
stpin_mcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053b4  080053b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080053b4  080053b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053b4  080053b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053b4  080053b4  000153b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000000c  080053c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  080053c8  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dd3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268e  00000000  00000000  00033e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00036498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  000376c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011bdd  00000000  00000000  000387f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016047  00000000  00000000  0004a3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c49e  00000000  00000000  00060414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc8b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004298  00000000  00000000  000cc904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005364 	.word	0x08005364

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005364 	.word	0x08005364

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fe79 	bl	8000f1c <HAL_Init>

  /* USER CODE BEGIN Init */

	aRxBuffer[0]=0x00;
 800022a:	4b22      	ldr	r3, [pc, #136]	; (80002b4 <main+0x94>)
 800022c:	2200      	movs	r2, #0
 800022e:	701a      	strb	r2, [r3, #0]
	aRxBuffer[1]=0x00;
 8000230:	4b20      	ldr	r3, [pc, #128]	; (80002b4 <main+0x94>)
 8000232:	2200      	movs	r2, #0
 8000234:	705a      	strb	r2, [r3, #1]
	aRxBuffer[2]=0x00;
 8000236:	4b1f      	ldr	r3, [pc, #124]	; (80002b4 <main+0x94>)
 8000238:	2200      	movs	r2, #0
 800023a:	709a      	strb	r2, [r3, #2]
	aRxBuffer[3]=0x00;
 800023c:	4b1d      	ldr	r3, [pc, #116]	; (80002b4 <main+0x94>)
 800023e:	2200      	movs	r2, #0
 8000240:	70da      	strb	r2, [r3, #3]

	aTxBuffer[0]=0xAA;
 8000242:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <main+0x98>)
 8000244:	22aa      	movs	r2, #170	; 0xaa
 8000246:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1]=0xBB;
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <main+0x98>)
 800024a:	22bb      	movs	r2, #187	; 0xbb
 800024c:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2]=0xCC;
 800024e:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <main+0x98>)
 8000250:	22cc      	movs	r2, #204	; 0xcc
 8000252:	709a      	strb	r2, [r3, #2]
	aTxBuffer[3]=0xDD;
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <main+0x98>)
 8000256:	22dd      	movs	r2, #221	; 0xdd
 8000258:	70da      	strb	r2, [r3, #3]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f833 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025e:	f000 fabb 	bl	80007d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000262:	f000 f91b 	bl	800049c <MX_I2C1_Init>
  MX_ADC_Init();
 8000266:	f000 f897 	bl	8000398 <MX_ADC_Init>
  MX_SPI1_Init();
 800026a:	f000 f957 	bl	800051c <MX_SPI1_Init>
  MX_TIM1_Init();
 800026e:	f000 f993 	bl	8000598 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000272:	f000 fa7f 	bl	8000774 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef status;
  status = HAL_I2C_EnableListen_IT(&hi2c1);
 8000276:	1dfc      	adds	r4, r7, #7
 8000278:	4b10      	ldr	r3, [pc, #64]	; (80002bc <main+0x9c>)
 800027a:	0018      	movs	r0, r3
 800027c:	f001 fdd2 	bl	8001e24 <HAL_I2C_EnableListen_IT>
 8000280:	0003      	movs	r3, r0
 8000282:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK){
 8000284:	1dfb      	adds	r3, r7, #7
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <main+0x70>
	  /* Transfer error in reception process */
	  Error_Handler();
 800028c:	f000 fb8f 	bl	80009ae <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1){
		if (Xfer_Complete ==1){
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <main+0xa0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d109      	bne.n	80002ac <main+0x8c>
			/* Put I2C peripheral in listen mode process */
			status = HAL_I2C_EnableListen_IT(&hi2c1);
 8000298:	1dfc      	adds	r4, r7, #7
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <main+0x9c>)
 800029c:	0018      	movs	r0, r3
 800029e:	f001 fdc1 	bl	8001e24 <HAL_I2C_EnableListen_IT>
 80002a2:	0003      	movs	r3, r0
 80002a4:	7023      	strb	r3, [r4, #0]
			Xfer_Complete =0;
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <main+0xa0>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(41);
 80002ac:	2029      	movs	r0, #41	; 0x29
 80002ae:	f000 fe99 	bl	8000fe4 <HAL_Delay>
		if (Xfer_Complete ==1){
 80002b2:	e7ed      	b.n	8000290 <main+0x70>
 80002b4:	20000034 	.word	0x20000034
 80002b8:	20000030 	.word	0x20000030
 80002bc:	20000078 	.word	0x20000078
 80002c0:	2000002c 	.word	0x2000002c

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b095      	sub	sp, #84	; 0x54
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	2420      	movs	r4, #32
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	0018      	movs	r0, r3
 80002d0:	2330      	movs	r3, #48	; 0x30
 80002d2:	001a      	movs	r2, r3
 80002d4:	2100      	movs	r1, #0
 80002d6:	f005 f83d 	bl	8005354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002da:	2310      	movs	r3, #16
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	0018      	movs	r0, r3
 80002e0:	2310      	movs	r3, #16
 80002e2:	001a      	movs	r2, r3
 80002e4:	2100      	movs	r1, #0
 80002e6:	f005 f835 	bl	8005354 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ea:	003b      	movs	r3, r7
 80002ec:	0018      	movs	r0, r3
 80002ee:	2310      	movs	r3, #16
 80002f0:	001a      	movs	r2, r3
 80002f2:	2100      	movs	r1, #0
 80002f4:	f005 f82e 	bl	8005354 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002f8:	0021      	movs	r1, r4
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2212      	movs	r2, #18
 80002fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2201      	movs	r2, #1
 8000304:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2201      	movs	r2, #1
 800030a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2210      	movs	r2, #16
 8000310:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2210      	movs	r2, #16
 8000316:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2202      	movs	r2, #2
 800031c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	22a0      	movs	r2, #160	; 0xa0
 8000328:	0392      	lsls	r2, r2, #14
 800032a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	187b      	adds	r3, r7, r1
 8000334:	0018      	movs	r0, r3
 8000336:	f002 ffdd 	bl	80032f4 <HAL_RCC_OscConfig>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800033e:	f000 fb36 	bl	80009ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	2110      	movs	r1, #16
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2207      	movs	r2, #7
 8000348:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2202      	movs	r2, #2
 800034e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2200      	movs	r2, #0
 800035a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2101      	movs	r1, #1
 8000360:	0018      	movs	r0, r3
 8000362:	f003 fae1 	bl	8003928 <HAL_RCC_ClockConfig>
 8000366:	1e03      	subs	r3, r0, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800036a:	f000 fb20 	bl	80009ae <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800036e:	003b      	movs	r3, r7
 8000370:	2221      	movs	r2, #33	; 0x21
 8000372:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000374:	003b      	movs	r3, r7
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800037a:	003b      	movs	r3, r7
 800037c:	2200      	movs	r2, #0
 800037e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000380:	003b      	movs	r3, r7
 8000382:	0018      	movs	r0, r3
 8000384:	f003 fc22 	bl	8003bcc <HAL_RCCEx_PeriphCLKConfig>
 8000388:	1e03      	subs	r3, r0, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800038c:	f000 fb0f 	bl	80009ae <Error_Handler>
  }
}
 8000390:	46c0      	nop			; (mov r8, r8)
 8000392:	46bd      	mov	sp, r7
 8000394:	b015      	add	sp, #84	; 0x54
 8000396:	bd90      	pop	{r4, r7, pc}

08000398 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	0018      	movs	r0, r3
 80003a2:	230c      	movs	r3, #12
 80003a4:	001a      	movs	r2, r3
 80003a6:	2100      	movs	r1, #0
 80003a8:	f004 ffd4 	bl	8005354 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80003ac:	4b39      	ldr	r3, [pc, #228]	; (8000494 <MX_ADC_Init+0xfc>)
 80003ae:	4a3a      	ldr	r2, [pc, #232]	; (8000498 <MX_ADC_Init+0x100>)
 80003b0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003b2:	4b38      	ldr	r3, [pc, #224]	; (8000494 <MX_ADC_Init+0xfc>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80003b8:	4b36      	ldr	r3, [pc, #216]	; (8000494 <MX_ADC_Init+0xfc>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003be:	4b35      	ldr	r3, [pc, #212]	; (8000494 <MX_ADC_Init+0xfc>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003c4:	4b33      	ldr	r3, [pc, #204]	; (8000494 <MX_ADC_Init+0xfc>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ca:	4b32      	ldr	r3, [pc, #200]	; (8000494 <MX_ADC_Init+0xfc>)
 80003cc:	2204      	movs	r2, #4
 80003ce:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003d0:	4b30      	ldr	r3, [pc, #192]	; (8000494 <MX_ADC_Init+0xfc>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003d6:	4b2f      	ldr	r3, [pc, #188]	; (8000494 <MX_ADC_Init+0xfc>)
 80003d8:	2200      	movs	r2, #0
 80003da:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80003dc:	4b2d      	ldr	r3, [pc, #180]	; (8000494 <MX_ADC_Init+0xfc>)
 80003de:	2200      	movs	r2, #0
 80003e0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003e2:	4b2c      	ldr	r3, [pc, #176]	; (8000494 <MX_ADC_Init+0xfc>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003e8:	4b2a      	ldr	r3, [pc, #168]	; (8000494 <MX_ADC_Init+0xfc>)
 80003ea:	22c2      	movs	r2, #194	; 0xc2
 80003ec:	32ff      	adds	r2, #255	; 0xff
 80003ee:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f0:	4b28      	ldr	r3, [pc, #160]	; (8000494 <MX_ADC_Init+0xfc>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003f6:	4b27      	ldr	r3, [pc, #156]	; (8000494 <MX_ADC_Init+0xfc>)
 80003f8:	2224      	movs	r2, #36	; 0x24
 80003fa:	2100      	movs	r1, #0
 80003fc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003fe:	4b25      	ldr	r3, [pc, #148]	; (8000494 <MX_ADC_Init+0xfc>)
 8000400:	2201      	movs	r2, #1
 8000402:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000404:	4b23      	ldr	r3, [pc, #140]	; (8000494 <MX_ADC_Init+0xfc>)
 8000406:	0018      	movs	r0, r3
 8000408:	f000 fe10 	bl	800102c <HAL_ADC_Init>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d001      	beq.n	8000414 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000410:	f000 facd 	bl	80009ae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2280      	movs	r2, #128	; 0x80
 800041e:	0152      	lsls	r2, r2, #5
 8000420:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2280      	movs	r2, #128	; 0x80
 8000426:	0552      	lsls	r2, r2, #21
 8000428:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800042a:	1d3a      	adds	r2, r7, #4
 800042c:	4b19      	ldr	r3, [pc, #100]	; (8000494 <MX_ADC_Init+0xfc>)
 800042e:	0011      	movs	r1, r2
 8000430:	0018      	movs	r0, r3
 8000432:	f000 ff3b 	bl	80012ac <HAL_ADC_ConfigChannel>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d001      	beq.n	800043e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800043a:	f000 fab8 	bl	80009ae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2203      	movs	r2, #3
 8000442:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000444:	1d3a      	adds	r2, r7, #4
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <MX_ADC_Init+0xfc>)
 8000448:	0011      	movs	r1, r2
 800044a:	0018      	movs	r0, r3
 800044c:	f000 ff2e 	bl	80012ac <HAL_ADC_ConfigChannel>
 8000450:	1e03      	subs	r3, r0, #0
 8000452:	d001      	beq.n	8000458 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000454:	f000 faab 	bl	80009ae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2204      	movs	r2, #4
 800045c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800045e:	1d3a      	adds	r2, r7, #4
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_ADC_Init+0xfc>)
 8000462:	0011      	movs	r1, r2
 8000464:	0018      	movs	r0, r3
 8000466:	f000 ff21 	bl	80012ac <HAL_ADC_ConfigChannel>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d001      	beq.n	8000472 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800046e:	f000 fa9e 	bl	80009ae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2209      	movs	r2, #9
 8000476:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000478:	1d3a      	adds	r2, r7, #4
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_ADC_Init+0xfc>)
 800047c:	0011      	movs	r1, r2
 800047e:	0018      	movs	r0, r3
 8000480:	f000 ff14 	bl	80012ac <HAL_ADC_ConfigChannel>
 8000484:	1e03      	subs	r3, r0, #0
 8000486:	d001      	beq.n	800048c <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000488:	f000 fa91 	bl	80009ae <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800048c:	46c0      	nop			; (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	b004      	add	sp, #16
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000038 	.word	0x20000038
 8000498:	40012400 	.word	0x40012400

0800049c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <MX_I2C1_Init+0x74>)
 80004a2:	4a1c      	ldr	r2, [pc, #112]	; (8000514 <MX_I2C1_Init+0x78>)
 80004a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <MX_I2C1_Init+0x74>)
 80004a8:	4a1b      	ldr	r2, [pc, #108]	; (8000518 <MX_I2C1_Init+0x7c>)
 80004aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 18;
 80004ac:	4b18      	ldr	r3, [pc, #96]	; (8000510 <MX_I2C1_Init+0x74>)
 80004ae:	2212      	movs	r2, #18
 80004b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <MX_I2C1_Init+0x74>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b8:	4b15      	ldr	r3, [pc, #84]	; (8000510 <MX_I2C1_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_I2C1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <MX_I2C1_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <MX_I2C1_Init+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <MX_I2C1_Init+0x74>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <MX_I2C1_Init+0x74>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 faab 	bl	8001a34 <HAL_I2C_Init>
 80004de:	1e03      	subs	r3, r0, #0
 80004e0:	d001      	beq.n	80004e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004e2:	f000 fa64 	bl	80009ae <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <MX_I2C1_Init+0x74>)
 80004e8:	2100      	movs	r1, #0
 80004ea:	0018      	movs	r0, r3
 80004ec:	f002 fe6a 	bl	80031c4 <HAL_I2CEx_ConfigAnalogFilter>
 80004f0:	1e03      	subs	r3, r0, #0
 80004f2:	d001      	beq.n	80004f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004f4:	f000 fa5b 	bl	80009ae <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <MX_I2C1_Init+0x74>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	0018      	movs	r0, r3
 80004fe:	f002 fead 	bl	800325c <HAL_I2CEx_ConfigDigitalFilter>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000506:	f000 fa52 	bl	80009ae <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000078 	.word	0x20000078
 8000514:	40005400 	.word	0x40005400
 8000518:	2000090e 	.word	0x2000090e

0800051c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <MX_SPI1_Init+0x74>)
 8000522:	4a1c      	ldr	r2, [pc, #112]	; (8000594 <MX_SPI1_Init+0x78>)
 8000524:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <MX_SPI1_Init+0x74>)
 8000528:	2282      	movs	r2, #130	; 0x82
 800052a:	0052      	lsls	r2, r2, #1
 800052c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800052e:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_SPI1_Init+0x74>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <MX_SPI1_Init+0x74>)
 8000536:	22c0      	movs	r2, #192	; 0xc0
 8000538:	0092      	lsls	r2, r2, #2
 800053a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <MX_SPI1_Init+0x74>)
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000542:	4b13      	ldr	r3, [pc, #76]	; (8000590 <MX_SPI1_Init+0x74>)
 8000544:	2200      	movs	r2, #0
 8000546:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_SPI1_Init+0x74>)
 800054a:	2280      	movs	r2, #128	; 0x80
 800054c:	0092      	lsls	r2, r2, #2
 800054e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <MX_SPI1_Init+0x74>)
 8000552:	2218      	movs	r2, #24
 8000554:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <MX_SPI1_Init+0x74>)
 8000558:	2200      	movs	r2, #0
 800055a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MX_SPI1_Init+0x74>)
 800055e:	2200      	movs	r2, #0
 8000560:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <MX_SPI1_Init+0x74>)
 8000564:	2200      	movs	r2, #0
 8000566:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MX_SPI1_Init+0x74>)
 800056a:	2207      	movs	r2, #7
 800056c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <MX_SPI1_Init+0x74>)
 8000570:	2200      	movs	r2, #0
 8000572:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MX_SPI1_Init+0x74>)
 8000576:	2208      	movs	r2, #8
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <MX_SPI1_Init+0x74>)
 800057c:	0018      	movs	r0, r3
 800057e:	f003 fbf3 	bl	8003d68 <HAL_SPI_Init>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d001      	beq.n	800058a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000586:	f000 fa12 	bl	80009ae <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000c4 	.word	0x200000c4
 8000594:	40013000 	.word	0x40013000

08000598 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b09a      	sub	sp, #104	; 0x68
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800059e:	2358      	movs	r3, #88	; 0x58
 80005a0:	18fb      	adds	r3, r7, r3
 80005a2:	0018      	movs	r0, r3
 80005a4:	2310      	movs	r3, #16
 80005a6:	001a      	movs	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	f004 fed3 	bl	8005354 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80005ae:	2344      	movs	r3, #68	; 0x44
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	0018      	movs	r0, r3
 80005b4:	2314      	movs	r3, #20
 80005b6:	001a      	movs	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	f004 fecb 	bl	8005354 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005be:	233c      	movs	r3, #60	; 0x3c
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	0018      	movs	r0, r3
 80005c4:	2308      	movs	r3, #8
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f004 fec3 	bl	8005354 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ce:	2320      	movs	r3, #32
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	0018      	movs	r0, r3
 80005d4:	231c      	movs	r3, #28
 80005d6:	001a      	movs	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	f004 febb 	bl	8005354 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005de:	003b      	movs	r3, r7
 80005e0:	0018      	movs	r0, r3
 80005e2:	2320      	movs	r3, #32
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f004 feb4 	bl	8005354 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005ec:	4b5e      	ldr	r3, [pc, #376]	; (8000768 <MX_TIM1_Init+0x1d0>)
 80005ee:	4a5f      	ldr	r2, [pc, #380]	; (800076c <MX_TIM1_Init+0x1d4>)
 80005f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005f2:	4b5d      	ldr	r3, [pc, #372]	; (8000768 <MX_TIM1_Init+0x1d0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f8:	4b5b      	ldr	r3, [pc, #364]	; (8000768 <MX_TIM1_Init+0x1d0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005fe:	4b5a      	ldr	r3, [pc, #360]	; (8000768 <MX_TIM1_Init+0x1d0>)
 8000600:	4a5b      	ldr	r2, [pc, #364]	; (8000770 <MX_TIM1_Init+0x1d8>)
 8000602:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000604:	4b58      	ldr	r3, [pc, #352]	; (8000768 <MX_TIM1_Init+0x1d0>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800060a:	4b57      	ldr	r3, [pc, #348]	; (8000768 <MX_TIM1_Init+0x1d0>)
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000610:	4b55      	ldr	r3, [pc, #340]	; (8000768 <MX_TIM1_Init+0x1d0>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000616:	4b54      	ldr	r3, [pc, #336]	; (8000768 <MX_TIM1_Init+0x1d0>)
 8000618:	0018      	movs	r0, r3
 800061a:	f003 fc5d 	bl	8003ed8 <HAL_TIM_Base_Init>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000622:	f000 f9c4 	bl	80009ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000626:	2158      	movs	r1, #88	; 0x58
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	0152      	lsls	r2, r2, #5
 800062e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000630:	187a      	adds	r2, r7, r1
 8000632:	4b4d      	ldr	r3, [pc, #308]	; (8000768 <MX_TIM1_Init+0x1d0>)
 8000634:	0011      	movs	r1, r2
 8000636:	0018      	movs	r0, r3
 8000638:	f003 fdbc 	bl	80041b4 <HAL_TIM_ConfigClockSource>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000640:	f000 f9b5 	bl	80009ae <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000644:	4b48      	ldr	r3, [pc, #288]	; (8000768 <MX_TIM1_Init+0x1d0>)
 8000646:	0018      	movs	r0, r3
 8000648:	f003 fc96 	bl	8003f78 <HAL_TIM_PWM_Init>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000650:	f000 f9ad 	bl	80009ae <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000654:	2144      	movs	r1, #68	; 0x44
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2205      	movs	r2, #5
 800065a:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2270      	movs	r2, #112	; 0x70
 8000660:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  sSlaveConfig.TriggerFilter = 0;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000674:	187a      	adds	r2, r7, r1
 8000676:	4b3c      	ldr	r3, [pc, #240]	; (8000768 <MX_TIM1_Init+0x1d0>)
 8000678:	0011      	movs	r1, r2
 800067a:	0018      	movs	r0, r3
 800067c:	f003 fe6e 	bl	800435c <HAL_TIM_SlaveConfigSynchro>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000684:	f000 f993 	bl	80009ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000688:	213c      	movs	r1, #60	; 0x3c
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000696:	187a      	adds	r2, r7, r1
 8000698:	4b33      	ldr	r3, [pc, #204]	; (8000768 <MX_TIM1_Init+0x1d0>)
 800069a:	0011      	movs	r1, r2
 800069c:	0018      	movs	r0, r3
 800069e:	f004 fa25 	bl	8004aec <HAL_TIMEx_MasterConfigSynchronization>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80006a6:	f000 f982 	bl	80009ae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006aa:	2120      	movs	r1, #32
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2260      	movs	r2, #96	; 0x60
 80006b0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006d6:	1879      	adds	r1, r7, r1
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <MX_TIM1_Init+0x1d0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	0018      	movs	r0, r3
 80006de:	f003 fca3 	bl	8004028 <HAL_TIM_PWM_ConfigChannel>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 80006e6:	f000 f962 	bl	80009ae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006ea:	2320      	movs	r3, #32
 80006ec:	18f9      	adds	r1, r7, r3
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_TIM1_Init+0x1d0>)
 80006f0:	2204      	movs	r2, #4
 80006f2:	0018      	movs	r0, r3
 80006f4:	f003 fc98 	bl	8004028 <HAL_TIM_PWM_ConfigChannel>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 80006fc:	f000 f957 	bl	80009ae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000700:	2320      	movs	r3, #32
 8000702:	18f9      	adds	r1, r7, r3
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_TIM1_Init+0x1d0>)
 8000706:	2208      	movs	r2, #8
 8000708:	0018      	movs	r0, r3
 800070a:	f003 fc8d 	bl	8004028 <HAL_TIM_PWM_ConfigChannel>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 8000712:	f000 f94c 	bl	80009ae <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000716:	003b      	movs	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800071c:	003b      	movs	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000722:	003b      	movs	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000728:	003b      	movs	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800072e:	003b      	movs	r3, r7
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	0152      	lsls	r2, r2, #5
 8000734:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000736:	003b      	movs	r3, r7
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	0192      	lsls	r2, r2, #6
 800073c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800073e:	003b      	movs	r3, r7
 8000740:	2200      	movs	r2, #0
 8000742:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000744:	003a      	movs	r2, r7
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_TIM1_Init+0x1d0>)
 8000748:	0011      	movs	r1, r2
 800074a:	0018      	movs	r0, r3
 800074c:	f004 fa26 	bl	8004b9c <HAL_TIMEx_ConfigBreakDeadTime>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0x1c0>
  {
    Error_Handler();
 8000754:	f000 f92b 	bl	80009ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <MX_TIM1_Init+0x1d0>)
 800075a:	0018      	movs	r0, r3
 800075c:	f000 faca 	bl	8000cf4 <HAL_TIM_MspPostInit>

}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b01a      	add	sp, #104	; 0x68
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000128 	.word	0x20000128
 800076c:	40012c00 	.word	0x40012c00
 8000770:	0000ffff 	.word	0x0000ffff

08000774 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_USART1_UART_Init+0x5c>)
 800077a:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <MX_USART1_UART_Init+0x60>)
 800077c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_USART1_UART_Init+0x5c>)
 8000780:	2296      	movs	r2, #150	; 0x96
 8000782:	0212      	lsls	r2, r2, #8
 8000784:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_USART1_UART_Init+0x5c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_USART1_UART_Init+0x5c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_USART1_UART_Init+0x5c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <MX_USART1_UART_Init+0x5c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USART1_UART_Init+0x5c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_USART1_UART_Init+0x5c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USART1_UART_Init+0x5c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_USART1_UART_Init+0x5c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <MX_USART1_UART_Init+0x5c>)
 80007b8:	2300      	movs	r3, #0
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	f004 fd35 	bl	800522c <HAL_RS485Ex_Init>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80007c6:	f000 f8f2 	bl	80009ae <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000170 	.word	0x20000170
 80007d4:	40013800 	.word	0x40013800

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b089      	sub	sp, #36	; 0x24
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	240c      	movs	r4, #12
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	0018      	movs	r0, r3
 80007e4:	2314      	movs	r3, #20
 80007e6:	001a      	movs	r2, r3
 80007e8:	2100      	movs	r1, #0
 80007ea:	f004 fdb3 	bl	8005354 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ee:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <MX_GPIO_Init+0xc8>)
 80007f0:	695a      	ldr	r2, [r3, #20]
 80007f2:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_GPIO_Init+0xc8>)
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	03c9      	lsls	r1, r1, #15
 80007f8:	430a      	orrs	r2, r1
 80007fa:	615a      	str	r2, [r3, #20]
 80007fc:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MX_GPIO_Init+0xc8>)
 80007fe:	695a      	ldr	r2, [r3, #20]
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	03db      	lsls	r3, r3, #15
 8000804:	4013      	ands	r3, r2
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <MX_GPIO_Init+0xc8>)
 800080c:	695a      	ldr	r2, [r3, #20]
 800080e:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <MX_GPIO_Init+0xc8>)
 8000810:	2180      	movs	r1, #128	; 0x80
 8000812:	0289      	lsls	r1, r1, #10
 8000814:	430a      	orrs	r2, r1
 8000816:	615a      	str	r2, [r3, #20]
 8000818:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <MX_GPIO_Init+0xc8>)
 800081a:	695a      	ldr	r2, [r3, #20]
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	029b      	lsls	r3, r3, #10
 8000820:	4013      	ands	r3, r2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <MX_GPIO_Init+0xc8>)
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_GPIO_Init+0xc8>)
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	02c9      	lsls	r1, r1, #11
 8000830:	430a      	orrs	r2, r1
 8000832:	615a      	str	r2, [r3, #20]
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_GPIO_Init+0xc8>)
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	02db      	lsls	r3, r3, #11
 800083c:	4013      	ands	r3, r2
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin|MAG_NCS_Pin|OC_TH_STBY2_Pin|OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_GPIO_Init+0xcc>)
 8000844:	2200      	movs	r2, #0
 8000846:	21c3      	movs	r1, #195	; 0xc3
 8000848:	0018      	movs	r0, r3
 800084a:	f001 f8d5 	bl	80019f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_STATUS_Pin MAG_NCS_Pin OC_TH_STBY2_Pin OC_TH_STBY1_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|MAG_NCS_Pin|OC_TH_STBY2_Pin|OC_TH_STBY1_Pin;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	22c3      	movs	r2, #195	; 0xc3
 8000852:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2201      	movs	r2, #1
 8000858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000866:	193b      	adds	r3, r7, r4
 8000868:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <MX_GPIO_Init+0xcc>)
 800086a:	0019      	movs	r1, r3
 800086c:	0010      	movs	r0, r2
 800086e:	f000 ff5b 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : OC_SEL_Pin */
  GPIO_InitStruct.Pin = OC_SEL_Pin;
 8000872:	0021      	movs	r1, r4
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	0112      	lsls	r2, r2, #4
 800087a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2200      	movs	r2, #0
 8000880:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8000888:	187a      	adds	r2, r7, r1
 800088a:	2390      	movs	r3, #144	; 0x90
 800088c:	05db      	lsls	r3, r3, #23
 800088e:	0011      	movs	r1, r2
 8000890:	0018      	movs	r0, r3
 8000892:	f000 ff49 	bl	8001728 <HAL_GPIO_Init>

}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b009      	add	sp, #36	; 0x24
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48001400 	.word	0x48001400

080008a8 <HAL_I2C_SlaveTxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Tx transfer, and
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  Xfer_Complete = 1;
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <HAL_I2C_SlaveTxCpltCallback+0x18>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	601a      	str	r2, [r3, #0]
//  aTxBuffer[0]++;
//  aTxBuffer[1]++;
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	2000002c 	.word	0x2000002c

080008c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  I2cHandle: I2C handle
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
//  Xfer_Complete = 1;
//  aRxBuffer[0]++;
//  aRxBuffer[1]++;

  HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin, GPIO_PIN_RESET);
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	2101      	movs	r1, #1
 80008d2:	0018      	movs	r0, r3
 80008d4:	f001 f890 	bl	80019f8 <HAL_GPIO_WritePin>

}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	b002      	add	sp, #8
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	48001400 	.word	0x48001400

080008e4 <HAL_I2C_AddrCallback>:
  *                the configuration information for the specified I2C.
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	0008      	movs	r0, r1
 80008ee:	0011      	movs	r1, r2
 80008f0:	1cfb      	adds	r3, r7, #3
 80008f2:	1c02      	adds	r2, r0, #0
 80008f4:	701a      	strb	r2, [r3, #0]
 80008f6:	003b      	movs	r3, r7
 80008f8:	1c0a      	adds	r2, r1, #0
 80008fa:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin, GPIO_PIN_SET);
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <HAL_I2C_AddrCallback+0x84>)
 80008fe:	2201      	movs	r2, #1
 8000900:	2101      	movs	r1, #1
 8000902:	0018      	movs	r0, r3
 8000904:	f001 f878 	bl	80019f8 <HAL_GPIO_WritePin>



  Transfer_Direction = TransferDirection;
 8000908:	1cfb      	adds	r3, r7, #3
 800090a:	781a      	ldrb	r2, [r3, #0]
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <HAL_I2C_AddrCallback+0x88>)
 800090e:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status;
  if (Transfer_Direction != 0){
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <HAL_I2C_AddrCallback+0x88>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00b      	beq.n	8000930 <HAL_I2C_AddrCallback+0x4c>
     /*##- Start the transmission process #####################################*/
	  /* While the I2C in reception process, user can transmit data through "aTxBuffer" buffer */
	  status = HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)aTxBuffer, BUFFERSIZE, I2C_FIRST_AND_LAST_FRAME);
 8000918:	230f      	movs	r3, #15
 800091a:	18fc      	adds	r4, r7, r3
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	049b      	lsls	r3, r3, #18
 8000920:	4913      	ldr	r1, [pc, #76]	; (8000970 <HAL_I2C_AddrCallback+0x8c>)
 8000922:	4814      	ldr	r0, [pc, #80]	; (8000974 <HAL_I2C_AddrCallback+0x90>)
 8000924:	2202      	movs	r2, #2
 8000926:	f001 f91b 	bl	8001b60 <HAL_I2C_Slave_Seq_Transmit_IT>
 800092a:	0003      	movs	r3, r0
 800092c:	7023      	strb	r3, [r4, #0]
//	  Xfer_Complete = 1;


  }

}
 800092e:	e016      	b.n	800095e <HAL_I2C_AddrCallback+0x7a>
	  status = HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)aRxBuffer, BUFFERSIZE, I2C_FIRST_AND_LAST_FRAME);
 8000930:	230f      	movs	r3, #15
 8000932:	18fc      	adds	r4, r7, r3
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	049b      	lsls	r3, r3, #18
 8000938:	490f      	ldr	r1, [pc, #60]	; (8000978 <HAL_I2C_AddrCallback+0x94>)
 800093a:	480e      	ldr	r0, [pc, #56]	; (8000974 <HAL_I2C_AddrCallback+0x90>)
 800093c:	2202      	movs	r2, #2
 800093e:	f001 f9bf 	bl	8001cc0 <HAL_I2C_Slave_Seq_Receive_IT>
 8000942:	0003      	movs	r3, r0
 8000944:	7023      	strb	r3, [r4, #0]
	  aTxBuffer[0] = aRxBuffer[0] + 1;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_I2C_AddrCallback+0x94>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_I2C_AddrCallback+0x8c>)
 8000950:	701a      	strb	r2, [r3, #0]
	  aTxBuffer[1] = aRxBuffer[1] + 1;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_I2C_AddrCallback+0x94>)
 8000954:	785b      	ldrb	r3, [r3, #1]
 8000956:	3301      	adds	r3, #1
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_I2C_AddrCallback+0x8c>)
 800095c:	705a      	strb	r2, [r3, #1]
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b005      	add	sp, #20
 8000964:	bd90      	pop	{r4, r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	48001400 	.word	0x48001400
 800096c:	20000028 	.word	0x20000028
 8000970:	20000030 	.word	0x20000030
 8000974:	20000078 	.word	0x20000078
 8000978:	20000034 	.word	0x20000034

0800097c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	b002      	add	sp, #8
 800098a:	bd80      	pop	{r7, pc}

0800098c <HAL_I2C_ErrorCallback>:
  * @param  I2cHandle: I2C handle
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF){
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	0018      	movs	r0, r3
 8000998:	f001 fb0a 	bl	8001fb0 <HAL_I2C_GetError>
 800099c:	0003      	movs	r3, r0
 800099e:	2b04      	cmp	r3, #4
 80009a0:	d001      	beq.n	80009a6 <HAL_I2C_ErrorCallback+0x1a>
    Error_Handler();
 80009a2:	f000 f804 	bl	80009ae <Error_Handler>
  }
}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b002      	add	sp, #8
 80009ac:	bd80      	pop	{r7, pc}

080009ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	af00      	add	r7, sp, #0
//  __disable_irq();
//  while (1)
//  {
//  }
  /* USER CODE END Error_Handler_Debug */
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_MspInit+0x44>)
 80009c0:	699a      	ldr	r2, [r3, #24]
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_MspInit+0x44>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	430a      	orrs	r2, r1
 80009c8:	619a      	str	r2, [r3, #24]
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_MspInit+0x44>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	2201      	movs	r2, #1
 80009d0:	4013      	ands	r3, r2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_MspInit+0x44>)
 80009d8:	69da      	ldr	r2, [r3, #28]
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_MspInit+0x44>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	0549      	lsls	r1, r1, #21
 80009e0:	430a      	orrs	r2, r1
 80009e2:	61da      	str	r2, [r3, #28]
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <HAL_MspInit+0x44>)
 80009e6:	69da      	ldr	r2, [r3, #28]
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	055b      	lsls	r3, r3, #21
 80009ec:	4013      	ands	r3, r2
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b002      	add	sp, #8
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b08b      	sub	sp, #44	; 0x2c
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	2414      	movs	r4, #20
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	2314      	movs	r3, #20
 8000a10:	001a      	movs	r2, r3
 8000a12:	2100      	movs	r1, #0
 8000a14:	f004 fc9e 	bl	8005354 <memset>
  if(hadc->Instance==ADC1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a27      	ldr	r2, [pc, #156]	; (8000abc <HAL_ADC_MspInit+0xbc>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d148      	bne.n	8000ab4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a22:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <HAL_ADC_MspInit+0xc0>)
 8000a24:	699a      	ldr	r2, [r3, #24]
 8000a26:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <HAL_ADC_MspInit+0xc0>)
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	0089      	lsls	r1, r1, #2
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	619a      	str	r2, [r3, #24]
 8000a30:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <HAL_ADC_MspInit+0xc0>)
 8000a32:	699a      	ldr	r2, [r3, #24]
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4013      	ands	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <HAL_ADC_MspInit+0xc0>)
 8000a40:	695a      	ldr	r2, [r3, #20]
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <HAL_ADC_MspInit+0xc0>)
 8000a44:	2180      	movs	r1, #128	; 0x80
 8000a46:	0289      	lsls	r1, r1, #10
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	615a      	str	r2, [r3, #20]
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_ADC_MspInit+0xc0>)
 8000a4e:	695a      	ldr	r2, [r3, #20]
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	029b      	lsls	r3, r3, #10
 8000a54:	4013      	ands	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_ADC_MspInit+0xc0>)
 8000a5c:	695a      	ldr	r2, [r3, #20]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_ADC_MspInit+0xc0>)
 8000a60:	2180      	movs	r1, #128	; 0x80
 8000a62:	02c9      	lsls	r1, r1, #11
 8000a64:	430a      	orrs	r2, r1
 8000a66:	615a      	str	r2, [r3, #20]
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_ADC_MspInit+0xc0>)
 8000a6a:	695a      	ldr	r2, [r3, #20]
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	02db      	lsls	r3, r3, #11
 8000a70:	4013      	ands	r3, r2
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC_IN0
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = OP_V_O_Pin|OP_W_O_Pin|BUS_SENSE_Pin;
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	2219      	movs	r2, #25
 8000a7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	2203      	movs	r2, #3
 8000a80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	193a      	adds	r2, r7, r4
 8000a8a:	2390      	movs	r3, #144	; 0x90
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 fe49 	bl	8001728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OP_U_O_Pin;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2202      	movs	r2, #2
 8000a9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(OP_U_O_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <HAL_ADC_MspInit+0xc4>)
 8000aac:	0019      	movs	r1, r3
 8000aae:	0010      	movs	r0, r2
 8000ab0:	f000 fe3a 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b00b      	add	sp, #44	; 0x2c
 8000aba:	bd90      	pop	{r4, r7, pc}
 8000abc:	40012400 	.word	0x40012400
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	48000400 	.word	0x48000400

08000ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b08b      	sub	sp, #44	; 0x2c
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	2414      	movs	r4, #20
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	2314      	movs	r3, #20
 8000ad8:	001a      	movs	r2, r3
 8000ada:	2100      	movs	r1, #0
 8000adc:	f004 fc3a 	bl	8005354 <memset>
  if(hi2c->Instance==I2C1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a20      	ldr	r2, [pc, #128]	; (8000b68 <HAL_I2C_MspInit+0xa0>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d139      	bne.n	8000b5e <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b20      	ldr	r3, [pc, #128]	; (8000b6c <HAL_I2C_MspInit+0xa4>)
 8000aec:	695a      	ldr	r2, [r3, #20]
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <HAL_I2C_MspInit+0xa4>)
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	02c9      	lsls	r1, r1, #11
 8000af4:	430a      	orrs	r2, r1
 8000af6:	615a      	str	r2, [r3, #20]
 8000af8:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <HAL_I2C_MspInit+0xa4>)
 8000afa:	695a      	ldr	r2, [r3, #20]
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	02db      	lsls	r3, r3, #11
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b06:	0021      	movs	r1, r4
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	22c0      	movs	r2, #192	; 0xc0
 8000b0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2212      	movs	r2, #18
 8000b12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2201      	movs	r2, #1
 8000b24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <HAL_I2C_MspInit+0xa8>)
 8000b2a:	0019      	movs	r1, r3
 8000b2c:	0010      	movs	r0, r2
 8000b2e:	f000 fdfb 	bl	8001728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_I2C_MspInit+0xa4>)
 8000b34:	69da      	ldr	r2, [r3, #28]
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_I2C_MspInit+0xa4>)
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	0389      	lsls	r1, r1, #14
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	61da      	str	r2, [r3, #28]
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_I2C_MspInit+0xa4>)
 8000b42:	69da      	ldr	r2, [r3, #28]
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	039b      	lsls	r3, r3, #14
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	2017      	movs	r0, #23
 8000b54:	f000 fd64 	bl	8001620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000b58:	2017      	movs	r0, #23
 8000b5a:	f000 fd76 	bl	800164a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b00b      	add	sp, #44	; 0x2c
 8000b64:	bd90      	pop	{r4, r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	40005400 	.word	0x40005400
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	48000400 	.word	0x48000400

08000b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b08b      	sub	sp, #44	; 0x2c
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	2414      	movs	r4, #20
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	0018      	movs	r0, r3
 8000b82:	2314      	movs	r3, #20
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f004 fbe4 	bl	8005354 <memset>
  if(hspi->Instance==SPI1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1c      	ldr	r2, [pc, #112]	; (8000c04 <HAL_SPI_MspInit+0x90>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d132      	bne.n	8000bfc <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_SPI_MspInit+0x94>)
 8000b98:	699a      	ldr	r2, [r3, #24]
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_SPI_MspInit+0x94>)
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	0149      	lsls	r1, r1, #5
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	619a      	str	r2, [r3, #24]
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_SPI_MspInit+0x94>)
 8000ba6:	699a      	ldr	r2, [r3, #24]
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	015b      	lsls	r3, r3, #5
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_SPI_MspInit+0x94>)
 8000bb4:	695a      	ldr	r2, [r3, #20]
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_SPI_MspInit+0x94>)
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	0289      	lsls	r1, r1, #10
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	615a      	str	r2, [r3, #20]
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_SPI_MspInit+0x94>)
 8000bc2:	695a      	ldr	r2, [r3, #20]
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	029b      	lsls	r3, r3, #10
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bce:	0021      	movs	r1, r4
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	22e0      	movs	r2, #224	; 0xe0
 8000bd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2202      	movs	r2, #2
 8000bda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2203      	movs	r2, #3
 8000be6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	187a      	adds	r2, r7, r1
 8000bf0:	2390      	movs	r3, #144	; 0x90
 8000bf2:	05db      	lsls	r3, r3, #23
 8000bf4:	0011      	movs	r1, r2
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f000 fd96 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b00b      	add	sp, #44	; 0x2c
 8000c02:	bd90      	pop	{r4, r7, pc}
 8000c04:	40013000 	.word	0x40013000
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b08b      	sub	sp, #44	; 0x2c
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	2414      	movs	r4, #20
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	0018      	movs	r0, r3
 8000c1a:	2314      	movs	r3, #20
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f004 fb98 	bl	8005354 <memset>
  if(htim_base->Instance==TIM1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a2f      	ldr	r2, [pc, #188]	; (8000ce8 <HAL_TIM_Base_MspInit+0xdc>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d157      	bne.n	8000cde <HAL_TIM_Base_MspInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c2e:	4b2f      	ldr	r3, [pc, #188]	; (8000cec <HAL_TIM_Base_MspInit+0xe0>)
 8000c30:	699a      	ldr	r2, [r3, #24]
 8000c32:	4b2e      	ldr	r3, [pc, #184]	; (8000cec <HAL_TIM_Base_MspInit+0xe0>)
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	0109      	lsls	r1, r1, #4
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	619a      	str	r2, [r3, #24]
 8000c3c:	4b2b      	ldr	r3, [pc, #172]	; (8000cec <HAL_TIM_Base_MspInit+0xe0>)
 8000c3e:	699a      	ldr	r2, [r3, #24]
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	011b      	lsls	r3, r3, #4
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	4b28      	ldr	r3, [pc, #160]	; (8000cec <HAL_TIM_Base_MspInit+0xe0>)
 8000c4c:	695a      	ldr	r2, [r3, #20]
 8000c4e:	4b27      	ldr	r3, [pc, #156]	; (8000cec <HAL_TIM_Base_MspInit+0xe0>)
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	02c9      	lsls	r1, r1, #11
 8000c54:	430a      	orrs	r2, r1
 8000c56:	615a      	str	r2, [r3, #20]
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <HAL_TIM_Base_MspInit+0xe0>)
 8000c5a:	695a      	ldr	r2, [r3, #20]
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	02db      	lsls	r3, r3, #11
 8000c60:	4013      	ands	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <HAL_TIM_Base_MspInit+0xe0>)
 8000c68:	695a      	ldr	r2, [r3, #20]
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <HAL_TIM_Base_MspInit+0xe0>)
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	0289      	lsls	r1, r1, #10
 8000c70:	430a      	orrs	r2, r1
 8000c72:	615a      	str	r2, [r3, #20]
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <HAL_TIM_Base_MspInit+0xe0>)
 8000c76:	695a      	ldr	r2, [r3, #20]
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	029b      	lsls	r3, r3, #10
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	0152      	lsls	r2, r2, #5
 8000c88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(OC_COMP_INT_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <HAL_TIM_Base_MspInit+0xe4>)
 8000ca6:	0019      	movs	r1, r3
 8000ca8:	0010      	movs	r0, r2
 8000caa:	f000 fd3d 	bl	8001728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OC_COMP_INT2_Pin;
 8000cae:	0021      	movs	r1, r4
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	0152      	lsls	r2, r2, #5
 8000cb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2202      	movs	r2, #2
 8000cbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2202      	movs	r2, #2
 8000cce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(OC_COMP_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	187a      	adds	r2, r7, r1
 8000cd2:	2390      	movs	r3, #144	; 0x90
 8000cd4:	05db      	lsls	r3, r3, #23
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f000 fd25 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b00b      	add	sp, #44	; 0x2c
 8000ce4:	bd90      	pop	{r4, r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	40012c00 	.word	0x40012c00
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	48000400 	.word	0x48000400

08000cf4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b08b      	sub	sp, #44	; 0x2c
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	2414      	movs	r4, #20
 8000cfe:	193b      	adds	r3, r7, r4
 8000d00:	0018      	movs	r0, r3
 8000d02:	2314      	movs	r3, #20
 8000d04:	001a      	movs	r2, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	f004 fb24 	bl	8005354 <memset>
  if(htim->Instance==TIM1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a28      	ldr	r2, [pc, #160]	; (8000db4 <HAL_TIM_MspPostInit+0xc0>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d149      	bne.n	8000daa <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <HAL_TIM_MspPostInit+0xc4>)
 8000d18:	695a      	ldr	r2, [r3, #20]
 8000d1a:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <HAL_TIM_MspPostInit+0xc4>)
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	02c9      	lsls	r1, r1, #11
 8000d20:	430a      	orrs	r2, r1
 8000d22:	615a      	str	r2, [r3, #20]
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <HAL_TIM_MspPostInit+0xc4>)
 8000d26:	695a      	ldr	r2, [r3, #20]
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	02db      	lsls	r3, r3, #11
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <HAL_TIM_MspPostInit+0xc4>)
 8000d34:	695a      	ldr	r2, [r3, #20]
 8000d36:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <HAL_TIM_MspPostInit+0xc4>)
 8000d38:	2180      	movs	r1, #128	; 0x80
 8000d3a:	0289      	lsls	r1, r1, #10
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	615a      	str	r2, [r3, #20]
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <HAL_TIM_MspPostInit+0xc4>)
 8000d42:	695a      	ldr	r2, [r3, #20]
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	029b      	lsls	r3, r3, #10
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|LSW_Pin;
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	22e0      	movs	r2, #224	; 0xe0
 8000d52:	0212      	lsls	r2, r2, #8
 8000d54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	2202      	movs	r2, #2
 8000d5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <HAL_TIM_MspPostInit+0xc8>)
 8000d72:	0019      	movs	r1, r3
 8000d74:	0010      	movs	r0, r2
 8000d76:	f000 fcd7 	bl	8001728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSU_Pin|HSV_Pin|HSW_Pin;
 8000d7a:	0021      	movs	r1, r4
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	22e0      	movs	r2, #224	; 0xe0
 8000d80:	00d2      	lsls	r2, r2, #3
 8000d82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2202      	movs	r2, #2
 8000d88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2202      	movs	r2, #2
 8000d9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	187a      	adds	r2, r7, r1
 8000d9e:	2390      	movs	r3, #144	; 0x90
 8000da0:	05db      	lsls	r3, r3, #23
 8000da2:	0011      	movs	r1, r2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f000 fcbf 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b00b      	add	sp, #44	; 0x2c
 8000db0:	bd90      	pop	{r4, r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	40012c00 	.word	0x40012c00
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	48000400 	.word	0x48000400

08000dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b08b      	sub	sp, #44	; 0x2c
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	2414      	movs	r4, #20
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	0018      	movs	r0, r3
 8000dce:	2314      	movs	r3, #20
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	f004 fabe 	bl	8005354 <memset>
  if(huart->Instance==USART1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1c      	ldr	r2, [pc, #112]	; (8000e50 <HAL_UART_MspInit+0x90>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d132      	bne.n	8000e48 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <HAL_UART_MspInit+0x94>)
 8000de4:	699a      	ldr	r2, [r3, #24]
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_UART_MspInit+0x94>)
 8000de8:	2180      	movs	r1, #128	; 0x80
 8000dea:	01c9      	lsls	r1, r1, #7
 8000dec:	430a      	orrs	r2, r1
 8000dee:	619a      	str	r2, [r3, #24]
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_UART_MspInit+0x94>)
 8000df2:	699a      	ldr	r2, [r3, #24]
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	01db      	lsls	r3, r3, #7
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_UART_MspInit+0x94>)
 8000e00:	695a      	ldr	r2, [r3, #20]
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <HAL_UART_MspInit+0x94>)
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	0289      	lsls	r1, r1, #10
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_UART_MspInit+0x94>)
 8000e0e:	695a      	ldr	r2, [r3, #20]
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	029b      	lsls	r3, r3, #10
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA1     ------> USART1_DE
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 8000e1a:	0021      	movs	r1, r4
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2202      	movs	r2, #2
 8000e26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2203      	movs	r2, #3
 8000e32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2201      	movs	r2, #1
 8000e38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	187a      	adds	r2, r7, r1
 8000e3c:	2390      	movs	r3, #144	; 0x90
 8000e3e:	05db      	lsls	r3, r3, #23
 8000e40:	0011      	movs	r1, r2
 8000e42:	0018      	movs	r0, r3
 8000e44:	f000 fc70 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b00b      	add	sp, #44	; 0x2c
 8000e4e:	bd90      	pop	{r4, r7, pc}
 8000e50:	40013800 	.word	0x40013800
 8000e54:	40021000 	.word	0x40021000
 8000e58:	00008006 	.word	0x00008006

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <NMI_Handler+0x4>

08000e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <HardFault_Handler+0x4>

08000e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e80:	f000 f894 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <I2C1_IRQHandler+0x2c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	699a      	ldr	r2, [r3, #24]
 8000e96:	23e0      	movs	r3, #224	; 0xe0
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d004      	beq.n	8000ea8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <I2C1_IRQHandler+0x2c>)
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f000 fffb 	bl	8001e9c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000ea6:	e003      	b.n	8000eb0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <I2C1_IRQHandler+0x2c>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f000 ffdc 	bl	8001e68 <HAL_I2C_EV_IRQHandler>
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	20000078 	.word	0x20000078

08000ebc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ece:	490e      	ldr	r1, [pc, #56]	; (8000f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <LoopForever+0xe>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee4:	4c0b      	ldr	r4, [pc, #44]	; (8000f14 <LoopForever+0x16>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ef2:	f7ff ffe3 	bl	8000ebc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ef6:	f004 fa09 	bl	800530c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000efa:	f7ff f991 	bl	8000220 <main>

08000efe <LoopForever>:

LoopForever:
    b LoopForever
 8000efe:	e7fe      	b.n	8000efe <LoopForever>
  ldr   r0, =_estack
 8000f00:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f0c:	080053bc 	.word	0x080053bc
  ldr r2, =_sbss
 8000f10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f14:	200001f8 	.word	0x200001f8

08000f18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_IRQHandler>
	...

08000f1c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <HAL_Init+0x24>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_Init+0x24>)
 8000f26:	2110      	movs	r1, #16
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f809 	bl	8000f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f32:	f7ff fd41 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	40022000 	.word	0x40022000

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_InitTick+0x5c>)
 8000f4e:	681c      	ldr	r4, [r3, #0]
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_InitTick+0x60>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	0019      	movs	r1, r3
 8000f56:	23fa      	movs	r3, #250	; 0xfa
 8000f58:	0098      	lsls	r0, r3, #2
 8000f5a:	f7ff f8d5 	bl	8000108 <__udivsi3>
 8000f5e:	0003      	movs	r3, r0
 8000f60:	0019      	movs	r1, r3
 8000f62:	0020      	movs	r0, r4
 8000f64:	f7ff f8d0 	bl	8000108 <__udivsi3>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f000 fb7d 	bl	800166a <HAL_SYSTICK_Config>
 8000f70:	1e03      	subs	r3, r0, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e00f      	b.n	8000f98 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d80b      	bhi.n	8000f96 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	2301      	movs	r3, #1
 8000f82:	425b      	negs	r3, r3
 8000f84:	2200      	movs	r2, #0
 8000f86:	0018      	movs	r0, r3
 8000f88:	f000 fb4a 	bl	8001620 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_InitTick+0x64>)
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e000      	b.n	8000f98 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b003      	add	sp, #12
 8000f9e:	bd90      	pop	{r4, r7, pc}
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000004 	.word	0x20000004

08000fac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_IncTick+0x1c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <HAL_IncTick+0x20>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	18d2      	adds	r2, r2, r3
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <HAL_IncTick+0x20>)
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	200001f4 	.word	0x200001f4

08000fd0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b02      	ldr	r3, [pc, #8]	; (8000fe0 <HAL_GetTick+0x10>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	200001f4 	.word	0x200001f4

08000fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff fff0 	bl	8000fd0 <HAL_GetTick>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	d005      	beq.n	800100a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_Delay+0x44>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	001a      	movs	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	189b      	adds	r3, r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	f7ff ffe0 	bl	8000fd0 <HAL_GetTick>
 8001010:	0002      	movs	r2, r0
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	429a      	cmp	r2, r3
 800101a:	d8f7      	bhi.n	800100c <HAL_Delay+0x28>
  {
  }
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	20000008 	.word	0x20000008

0800102c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001034:	230f      	movs	r3, #15
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e125      	b.n	8001296 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10a      	bne.n	8001068 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2234      	movs	r2, #52	; 0x34
 800105c:	2100      	movs	r1, #0
 800105e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	0018      	movs	r0, r3
 8001064:	f7ff fccc 	bl	8000a00 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800106c:	2210      	movs	r2, #16
 800106e:	4013      	ands	r3, r2
 8001070:	d000      	beq.n	8001074 <HAL_ADC_Init+0x48>
 8001072:	e103      	b.n	800127c <HAL_ADC_Init+0x250>
 8001074:	230f      	movs	r3, #15
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d000      	beq.n	8001080 <HAL_ADC_Init+0x54>
 800107e:	e0fd      	b.n	800127c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	2204      	movs	r2, #4
 8001088:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800108a:	d000      	beq.n	800108e <HAL_ADC_Init+0x62>
 800108c:	e0f6      	b.n	800127c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001092:	4a83      	ldr	r2, [pc, #524]	; (80012a0 <HAL_ADC_Init+0x274>)
 8001094:	4013      	ands	r3, r2
 8001096:	2202      	movs	r2, #2
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2203      	movs	r2, #3
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d112      	bne.n	80010d2 <HAL_ADC_Init+0xa6>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2201      	movs	r2, #1
 80010b4:	4013      	ands	r3, r2
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d009      	beq.n	80010ce <HAL_ADC_Init+0xa2>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	401a      	ands	r2, r3
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d101      	bne.n	80010d2 <HAL_ADC_Init+0xa6>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <HAL_ADC_Init+0xa8>
 80010d2:	2300      	movs	r3, #0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d116      	bne.n	8001106 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2218      	movs	r2, #24
 80010e0:	4393      	bics	r3, r2
 80010e2:	0019      	movs	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	0899      	lsrs	r1, r3, #2
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	430a      	orrs	r2, r1
 8001104:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4964      	ldr	r1, [pc, #400]	; (80012a4 <HAL_ADC_Init+0x278>)
 8001112:	400a      	ands	r2, r1
 8001114:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7e1b      	ldrb	r3, [r3, #24]
 800111a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7e5b      	ldrb	r3, [r3, #25]
 8001120:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001122:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7e9b      	ldrb	r3, [r3, #26]
 8001128:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800112a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	2b01      	cmp	r3, #1
 8001132:	d002      	beq.n	800113a <HAL_ADC_Init+0x10e>
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	015b      	lsls	r3, r3, #5
 8001138:	e000      	b.n	800113c <HAL_ADC_Init+0x110>
 800113a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800113c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001142:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d101      	bne.n	8001150 <HAL_ADC_Init+0x124>
 800114c:	2304      	movs	r3, #4
 800114e:	e000      	b.n	8001152 <HAL_ADC_Init+0x126>
 8001150:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001152:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2124      	movs	r1, #36	; 0x24
 8001158:	5c5b      	ldrb	r3, [r3, r1]
 800115a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800115c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	4313      	orrs	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7edb      	ldrb	r3, [r3, #27]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d115      	bne.n	8001198 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7e9b      	ldrb	r3, [r3, #26]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d105      	bne.n	8001180 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	2280      	movs	r2, #128	; 0x80
 8001178:	0252      	lsls	r2, r2, #9
 800117a:	4313      	orrs	r3, r2
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	e00b      	b.n	8001198 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001184:	2220      	movs	r2, #32
 8001186:	431a      	orrs	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001190:	2201      	movs	r2, #1
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69da      	ldr	r2, [r3, #28]
 800119c:	23c2      	movs	r3, #194	; 0xc2
 800119e:	33ff      	adds	r3, #255	; 0xff
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d007      	beq.n	80011b4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011ac:	4313      	orrs	r3, r2
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68d9      	ldr	r1, [r3, #12]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	055b      	lsls	r3, r3, #21
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d01b      	beq.n	8001208 <HAL_ADC_Init+0x1dc>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d017      	beq.n	8001208 <HAL_ADC_Init+0x1dc>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d013      	beq.n	8001208 <HAL_ADC_Init+0x1dc>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	d00f      	beq.n	8001208 <HAL_ADC_Init+0x1dc>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d00b      	beq.n	8001208 <HAL_ADC_Init+0x1dc>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	d007      	beq.n	8001208 <HAL_ADC_Init+0x1dc>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fc:	2b06      	cmp	r3, #6
 80011fe:	d003      	beq.n	8001208 <HAL_ADC_Init+0x1dc>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001204:	2b07      	cmp	r3, #7
 8001206:	d112      	bne.n	800122e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	695a      	ldr	r2, [r3, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2107      	movs	r1, #7
 8001214:	438a      	bics	r2, r1
 8001216:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6959      	ldr	r1, [r3, #20]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	2207      	movs	r2, #7
 8001224:	401a      	ands	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <HAL_ADC_Init+0x27c>)
 8001236:	4013      	ands	r3, r2
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	429a      	cmp	r2, r3
 800123c:	d10b      	bne.n	8001256 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001248:	2203      	movs	r2, #3
 800124a:	4393      	bics	r3, r2
 800124c:	2201      	movs	r2, #1
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001254:	e01c      	b.n	8001290 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125a:	2212      	movs	r2, #18
 800125c:	4393      	bics	r3, r2
 800125e:	2210      	movs	r2, #16
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126a:	2201      	movs	r2, #1
 800126c:	431a      	orrs	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001272:	230f      	movs	r3, #15
 8001274:	18fb      	adds	r3, r7, r3
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800127a:	e009      	b.n	8001290 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001280:	2210      	movs	r2, #16
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001288:	230f      	movs	r3, #15
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001290:	230f      	movs	r3, #15
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	781b      	ldrb	r3, [r3, #0]
}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b004      	add	sp, #16
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	fffffefd 	.word	0xfffffefd
 80012a4:	fffe0219 	.word	0xfffe0219
 80012a8:	833fffe7 	.word	0x833fffe7

080012ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b6:	230f      	movs	r3, #15
 80012b8:	18fb      	adds	r3, r7, r3
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	055b      	lsls	r3, r3, #21
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d011      	beq.n	80012f2 <HAL_ADC_ConfigChannel+0x46>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d00d      	beq.n	80012f2 <HAL_ADC_ConfigChannel+0x46>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d009      	beq.n	80012f2 <HAL_ADC_ConfigChannel+0x46>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d005      	beq.n	80012f2 <HAL_ADC_ConfigChannel+0x46>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d001      	beq.n	80012f2 <HAL_ADC_ConfigChannel+0x46>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2234      	movs	r2, #52	; 0x34
 80012f6:	5c9b      	ldrb	r3, [r3, r2]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x54>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e0d0      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1f6>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2234      	movs	r2, #52	; 0x34
 8001304:	2101      	movs	r1, #1
 8001306:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2204      	movs	r2, #4
 8001310:	4013      	ands	r3, r2
 8001312:	d000      	beq.n	8001316 <HAL_ADC_ConfigChannel+0x6a>
 8001314:	e0b4      	b.n	8001480 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4a64      	ldr	r2, [pc, #400]	; (80014ac <HAL_ADC_ConfigChannel+0x200>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d100      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x76>
 8001320:	e082      	b.n	8001428 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2201      	movs	r2, #1
 800132e:	409a      	lsls	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	055b      	lsls	r3, r3, #21
 8001340:	429a      	cmp	r2, r3
 8001342:	d037      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0x108>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	2b01      	cmp	r3, #1
 800134a:	d033      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0x108>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001350:	2b02      	cmp	r3, #2
 8001352:	d02f      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0x108>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001358:	2b03      	cmp	r3, #3
 800135a:	d02b      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0x108>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	2b04      	cmp	r3, #4
 8001362:	d027      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0x108>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	2b05      	cmp	r3, #5
 800136a:	d023      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0x108>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	2b06      	cmp	r3, #6
 8001372:	d01f      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0x108>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	2b07      	cmp	r3, #7
 800137a:	d01b      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	2107      	movs	r1, #7
 8001388:	400b      	ands	r3, r1
 800138a:	429a      	cmp	r2, r3
 800138c:	d012      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	695a      	ldr	r2, [r3, #20]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2107      	movs	r1, #7
 800139a:	438a      	bics	r2, r1
 800139c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6959      	ldr	r1, [r3, #20]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2207      	movs	r2, #7
 80013aa:	401a      	ands	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b10      	cmp	r3, #16
 80013ba:	d007      	beq.n	80013cc <HAL_ADC_ConfigChannel+0x120>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b11      	cmp	r3, #17
 80013c2:	d003      	beq.n	80013cc <HAL_ADC_ConfigChannel+0x120>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b12      	cmp	r3, #18
 80013ca:	d163      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80013cc:	4b38      	ldr	r3, [pc, #224]	; (80014b0 <HAL_ADC_ConfigChannel+0x204>)
 80013ce:	6819      	ldr	r1, [r3, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b10      	cmp	r3, #16
 80013d6:	d009      	beq.n	80013ec <HAL_ADC_ConfigChannel+0x140>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b11      	cmp	r3, #17
 80013de:	d102      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x13a>
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	03db      	lsls	r3, r3, #15
 80013e4:	e004      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x144>
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	045b      	lsls	r3, r3, #17
 80013ea:	e001      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x144>
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	041b      	lsls	r3, r3, #16
 80013f0:	4a2f      	ldr	r2, [pc, #188]	; (80014b0 <HAL_ADC_ConfigChannel+0x204>)
 80013f2:	430b      	orrs	r3, r1
 80013f4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b10      	cmp	r3, #16
 80013fc:	d14a      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013fe:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <HAL_ADC_ConfigChannel+0x208>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	492d      	ldr	r1, [pc, #180]	; (80014b8 <HAL_ADC_ConfigChannel+0x20c>)
 8001404:	0018      	movs	r0, r3
 8001406:	f7fe fe7f 	bl	8000108 <__udivsi3>
 800140a:	0003      	movs	r3, r0
 800140c:	001a      	movs	r2, r3
 800140e:	0013      	movs	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	189b      	adds	r3, r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001418:	e002      	b.n	8001420 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	3b01      	subs	r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f9      	bne.n	800141a <HAL_ADC_ConfigChannel+0x16e>
 8001426:	e035      	b.n	8001494 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2101      	movs	r1, #1
 8001434:	4099      	lsls	r1, r3
 8001436:	000b      	movs	r3, r1
 8001438:	43d9      	mvns	r1, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	400a      	ands	r2, r1
 8001440:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b10      	cmp	r3, #16
 8001448:	d007      	beq.n	800145a <HAL_ADC_ConfigChannel+0x1ae>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b11      	cmp	r3, #17
 8001450:	d003      	beq.n	800145a <HAL_ADC_ConfigChannel+0x1ae>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b12      	cmp	r3, #18
 8001458:	d11c      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_ADC_ConfigChannel+0x204>)
 800145c:	6819      	ldr	r1, [r3, #0]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b10      	cmp	r3, #16
 8001464:	d007      	beq.n	8001476 <HAL_ADC_ConfigChannel+0x1ca>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b11      	cmp	r3, #17
 800146c:	d101      	bne.n	8001472 <HAL_ADC_ConfigChannel+0x1c6>
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <HAL_ADC_ConfigChannel+0x210>)
 8001470:	e002      	b.n	8001478 <HAL_ADC_ConfigChannel+0x1cc>
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <HAL_ADC_ConfigChannel+0x214>)
 8001474:	e000      	b.n	8001478 <HAL_ADC_ConfigChannel+0x1cc>
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <HAL_ADC_ConfigChannel+0x218>)
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <HAL_ADC_ConfigChannel+0x204>)
 800147a:	400b      	ands	r3, r1
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e009      	b.n	8001494 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001484:	2220      	movs	r2, #32
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800148c:	230f      	movs	r3, #15
 800148e:	18fb      	adds	r3, r7, r3
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2234      	movs	r2, #52	; 0x34
 8001498:	2100      	movs	r1, #0
 800149a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800149c:	230f      	movs	r3, #15
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	781b      	ldrb	r3, [r3, #0]
}
 80014a2:	0018      	movs	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b004      	add	sp, #16
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	00001001 	.word	0x00001001
 80014b0:	40012708 	.word	0x40012708
 80014b4:	20000000 	.word	0x20000000
 80014b8:	000f4240 	.word	0x000f4240
 80014bc:	ffbfffff 	.word	0xffbfffff
 80014c0:	feffffff 	.word	0xfeffffff
 80014c4:	ff7fffff 	.word	0xff7fffff

080014c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	0002      	movs	r2, r0
 80014d0:	1dfb      	adds	r3, r7, #7
 80014d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	1dfb      	adds	r3, r7, #7
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b7f      	cmp	r3, #127	; 0x7f
 80014da:	d809      	bhi.n	80014f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014dc:	1dfb      	adds	r3, r7, #7
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	001a      	movs	r2, r3
 80014e2:	231f      	movs	r3, #31
 80014e4:	401a      	ands	r2, r3
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <__NVIC_EnableIRQ+0x30>)
 80014e8:	2101      	movs	r1, #1
 80014ea:	4091      	lsls	r1, r2
 80014ec:	000a      	movs	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]
  }
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b002      	add	sp, #8
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	e000e100 	.word	0xe000e100

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	0002      	movs	r2, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800150a:	1dfb      	adds	r3, r7, #7
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b7f      	cmp	r3, #127	; 0x7f
 8001510:	d828      	bhi.n	8001564 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001512:	4a2f      	ldr	r2, [pc, #188]	; (80015d0 <__NVIC_SetPriority+0xd4>)
 8001514:	1dfb      	adds	r3, r7, #7
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b25b      	sxtb	r3, r3
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	33c0      	adds	r3, #192	; 0xc0
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	589b      	ldr	r3, [r3, r2]
 8001522:	1dfa      	adds	r2, r7, #7
 8001524:	7812      	ldrb	r2, [r2, #0]
 8001526:	0011      	movs	r1, r2
 8001528:	2203      	movs	r2, #3
 800152a:	400a      	ands	r2, r1
 800152c:	00d2      	lsls	r2, r2, #3
 800152e:	21ff      	movs	r1, #255	; 0xff
 8001530:	4091      	lsls	r1, r2
 8001532:	000a      	movs	r2, r1
 8001534:	43d2      	mvns	r2, r2
 8001536:	401a      	ands	r2, r3
 8001538:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	019b      	lsls	r3, r3, #6
 800153e:	22ff      	movs	r2, #255	; 0xff
 8001540:	401a      	ands	r2, r3
 8001542:	1dfb      	adds	r3, r7, #7
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	0018      	movs	r0, r3
 8001548:	2303      	movs	r3, #3
 800154a:	4003      	ands	r3, r0
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001550:	481f      	ldr	r0, [pc, #124]	; (80015d0 <__NVIC_SetPriority+0xd4>)
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b25b      	sxtb	r3, r3
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	430a      	orrs	r2, r1
 800155c:	33c0      	adds	r3, #192	; 0xc0
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001562:	e031      	b.n	80015c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001564:	4a1b      	ldr	r2, [pc, #108]	; (80015d4 <__NVIC_SetPriority+0xd8>)
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	0019      	movs	r1, r3
 800156c:	230f      	movs	r3, #15
 800156e:	400b      	ands	r3, r1
 8001570:	3b08      	subs	r3, #8
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3306      	adds	r3, #6
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	18d3      	adds	r3, r2, r3
 800157a:	3304      	adds	r3, #4
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	1dfa      	adds	r2, r7, #7
 8001580:	7812      	ldrb	r2, [r2, #0]
 8001582:	0011      	movs	r1, r2
 8001584:	2203      	movs	r2, #3
 8001586:	400a      	ands	r2, r1
 8001588:	00d2      	lsls	r2, r2, #3
 800158a:	21ff      	movs	r1, #255	; 0xff
 800158c:	4091      	lsls	r1, r2
 800158e:	000a      	movs	r2, r1
 8001590:	43d2      	mvns	r2, r2
 8001592:	401a      	ands	r2, r3
 8001594:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	019b      	lsls	r3, r3, #6
 800159a:	22ff      	movs	r2, #255	; 0xff
 800159c:	401a      	ands	r2, r3
 800159e:	1dfb      	adds	r3, r7, #7
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	0018      	movs	r0, r3
 80015a4:	2303      	movs	r3, #3
 80015a6:	4003      	ands	r3, r0
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ac:	4809      	ldr	r0, [pc, #36]	; (80015d4 <__NVIC_SetPriority+0xd8>)
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	001c      	movs	r4, r3
 80015b4:	230f      	movs	r3, #15
 80015b6:	4023      	ands	r3, r4
 80015b8:	3b08      	subs	r3, #8
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	430a      	orrs	r2, r1
 80015be:	3306      	adds	r3, #6
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	18c3      	adds	r3, r0, r3
 80015c4:	3304      	adds	r3, #4
 80015c6:	601a      	str	r2, [r3, #0]
}
 80015c8:	46c0      	nop			; (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b003      	add	sp, #12
 80015ce:	bd90      	pop	{r4, r7, pc}
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	1e5a      	subs	r2, r3, #1
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	045b      	lsls	r3, r3, #17
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d301      	bcc.n	80015f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ec:	2301      	movs	r3, #1
 80015ee:	e010      	b.n	8001612 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <SysTick_Config+0x44>)
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	3a01      	subs	r2, #1
 80015f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f8:	2301      	movs	r3, #1
 80015fa:	425b      	negs	r3, r3
 80015fc:	2103      	movs	r1, #3
 80015fe:	0018      	movs	r0, r3
 8001600:	f7ff ff7c 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SysTick_Config+0x44>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Config+0x44>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b002      	add	sp, #8
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	210f      	movs	r1, #15
 800162c:	187b      	adds	r3, r7, r1
 800162e:	1c02      	adds	r2, r0, #0
 8001630:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	187b      	adds	r3, r7, r1
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b25b      	sxtb	r3, r3
 800163a:	0011      	movs	r1, r2
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff ff5d 	bl	80014fc <__NVIC_SetPriority>
}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	46bd      	mov	sp, r7
 8001646:	b004      	add	sp, #16
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	0002      	movs	r2, r0
 8001652:	1dfb      	adds	r3, r7, #7
 8001654:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001656:	1dfb      	adds	r3, r7, #7
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b25b      	sxtb	r3, r3
 800165c:	0018      	movs	r0, r3
 800165e:	f7ff ff33 	bl	80014c8 <__NVIC_EnableIRQ>
}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b002      	add	sp, #8
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	0018      	movs	r0, r3
 8001676:	f7ff ffaf 	bl	80015d8 <SysTick_Config>
 800167a:	0003      	movs	r3, r0
}
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	b002      	add	sp, #8
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800168c:	210f      	movs	r1, #15
 800168e:	187b      	adds	r3, r7, r1
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2221      	movs	r2, #33	; 0x21
 8001698:	5c9b      	ldrb	r3, [r3, r2]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d006      	beq.n	80016ae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2204      	movs	r2, #4
 80016a4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	e028      	b.n	8001700 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	210e      	movs	r1, #14
 80016ba:	438a      	bics	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2101      	movs	r1, #1
 80016ca:	438a      	bics	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d6:	2101      	movs	r1, #1
 80016d8:	4091      	lsls	r1, r2
 80016da:	000a      	movs	r2, r1
 80016dc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2221      	movs	r2, #33	; 0x21
 80016e2:	2101      	movs	r1, #1
 80016e4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2220      	movs	r2, #32
 80016ea:	2100      	movs	r1, #0
 80016ec:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d004      	beq.n	8001700 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	0010      	movs	r0, r2
 80016fe:	4798      	blx	r3
    } 
  }
  return status;
 8001700:	230f      	movs	r3, #15
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	781b      	ldrb	r3, [r3, #0]
}
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	b004      	add	sp, #16
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2221      	movs	r2, #33	; 0x21
 800171a:	5c9b      	ldrb	r3, [r3, r2]
 800171c:	b2db      	uxtb	r3, r3
}
 800171e:	0018      	movs	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	b002      	add	sp, #8
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001736:	e149      	b.n	80019cc <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2101      	movs	r1, #1
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	4091      	lsls	r1, r2
 8001742:	000a      	movs	r2, r1
 8001744:	4013      	ands	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d100      	bne.n	8001750 <HAL_GPIO_Init+0x28>
 800174e:	e13a      	b.n	80019c6 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2203      	movs	r2, #3
 8001756:	4013      	ands	r3, r2
 8001758:	2b01      	cmp	r3, #1
 800175a:	d005      	beq.n	8001768 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2203      	movs	r2, #3
 8001762:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001764:	2b02      	cmp	r3, #2
 8001766:	d130      	bne.n	80017ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	409a      	lsls	r2, r3
 8001776:	0013      	movs	r3, r2
 8001778:	43da      	mvns	r2, r3
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	409a      	lsls	r2, r3
 800178a:	0013      	movs	r3, r2
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800179e:	2201      	movs	r2, #1
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
 80017a4:	0013      	movs	r3, r2
 80017a6:	43da      	mvns	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	2201      	movs	r2, #1
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2203      	movs	r2, #3
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d017      	beq.n	8001806 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	409a      	lsls	r2, r3
 80017e4:	0013      	movs	r3, r2
 80017e6:	43da      	mvns	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	409a      	lsls	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2203      	movs	r2, #3
 800180c:	4013      	ands	r3, r2
 800180e:	2b02      	cmp	r3, #2
 8001810:	d123      	bne.n	800185a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	08da      	lsrs	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3208      	adds	r2, #8
 800181a:	0092      	lsls	r2, r2, #2
 800181c:	58d3      	ldr	r3, [r2, r3]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2207      	movs	r2, #7
 8001824:	4013      	ands	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	220f      	movs	r2, #15
 800182a:	409a      	lsls	r2, r3
 800182c:	0013      	movs	r3, r2
 800182e:	43da      	mvns	r2, r3
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2107      	movs	r1, #7
 800183e:	400b      	ands	r3, r1
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	409a      	lsls	r2, r3
 8001844:	0013      	movs	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	0092      	lsls	r2, r2, #2
 8001856:	6939      	ldr	r1, [r7, #16]
 8001858:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	409a      	lsls	r2, r3
 8001868:	0013      	movs	r3, r2
 800186a:	43da      	mvns	r2, r3
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2203      	movs	r2, #3
 8001878:	401a      	ands	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	409a      	lsls	r2, r3
 8001880:	0013      	movs	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	23c0      	movs	r3, #192	; 0xc0
 8001894:	029b      	lsls	r3, r3, #10
 8001896:	4013      	ands	r3, r2
 8001898:	d100      	bne.n	800189c <HAL_GPIO_Init+0x174>
 800189a:	e094      	b.n	80019c6 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189c:	4b51      	ldr	r3, [pc, #324]	; (80019e4 <HAL_GPIO_Init+0x2bc>)
 800189e:	699a      	ldr	r2, [r3, #24]
 80018a0:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <HAL_GPIO_Init+0x2bc>)
 80018a2:	2101      	movs	r1, #1
 80018a4:	430a      	orrs	r2, r1
 80018a6:	619a      	str	r2, [r3, #24]
 80018a8:	4b4e      	ldr	r3, [pc, #312]	; (80019e4 <HAL_GPIO_Init+0x2bc>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	2201      	movs	r2, #1
 80018ae:	4013      	ands	r3, r2
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018b4:	4a4c      	ldr	r2, [pc, #304]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	089b      	lsrs	r3, r3, #2
 80018ba:	3302      	adds	r3, #2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	589b      	ldr	r3, [r3, r2]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2203      	movs	r2, #3
 80018c6:	4013      	ands	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	220f      	movs	r2, #15
 80018cc:	409a      	lsls	r2, r3
 80018ce:	0013      	movs	r3, r2
 80018d0:	43da      	mvns	r2, r3
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	2390      	movs	r3, #144	; 0x90
 80018dc:	05db      	lsls	r3, r3, #23
 80018de:	429a      	cmp	r2, r3
 80018e0:	d00d      	beq.n	80018fe <HAL_GPIO_Init+0x1d6>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a41      	ldr	r2, [pc, #260]	; (80019ec <HAL_GPIO_Init+0x2c4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x1d2>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a40      	ldr	r2, [pc, #256]	; (80019f0 <HAL_GPIO_Init+0x2c8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_GPIO_Init+0x1ce>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e004      	b.n	8001900 <HAL_GPIO_Init+0x1d8>
 80018f6:	2305      	movs	r3, #5
 80018f8:	e002      	b.n	8001900 <HAL_GPIO_Init+0x1d8>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_GPIO_Init+0x1d8>
 80018fe:	2300      	movs	r3, #0
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	2103      	movs	r1, #3
 8001904:	400a      	ands	r2, r1
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	4093      	lsls	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001910:	4935      	ldr	r1, [pc, #212]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800191e:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <HAL_GPIO_Init+0x2cc>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43da      	mvns	r2, r3
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	025b      	lsls	r3, r3, #9
 8001936:	4013      	ands	r3, r2
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001942:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <HAL_GPIO_Init+0x2cc>)
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001948:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <HAL_GPIO_Init+0x2cc>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43da      	mvns	r2, r3
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	029b      	lsls	r3, r3, #10
 8001960:	4013      	ands	r3, r2
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <HAL_GPIO_Init+0x2cc>)
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_GPIO_Init+0x2cc>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43da      	mvns	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	035b      	lsls	r3, r3, #13
 800198a:	4013      	ands	r3, r2
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_GPIO_Init+0x2cc>)
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_GPIO_Init+0x2cc>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	43da      	mvns	r2, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	039b      	lsls	r3, r3, #14
 80019b4:	4013      	ands	r3, r2
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_GPIO_Init+0x2cc>)
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	40da      	lsrs	r2, r3
 80019d4:	1e13      	subs	r3, r2, #0
 80019d6:	d000      	beq.n	80019da <HAL_GPIO_Init+0x2b2>
 80019d8:	e6ae      	b.n	8001738 <HAL_GPIO_Init+0x10>
  } 
}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	b006      	add	sp, #24
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010000 	.word	0x40010000
 80019ec:	48000400 	.word	0x48000400
 80019f0:	48000800 	.word	0x48000800
 80019f4:	40010400 	.word	0x40010400

080019f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	0008      	movs	r0, r1
 8001a02:	0011      	movs	r1, r2
 8001a04:	1cbb      	adds	r3, r7, #2
 8001a06:	1c02      	adds	r2, r0, #0
 8001a08:	801a      	strh	r2, [r3, #0]
 8001a0a:	1c7b      	adds	r3, r7, #1
 8001a0c:	1c0a      	adds	r2, r1, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a10:	1c7b      	adds	r3, r7, #1
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a18:	1cbb      	adds	r3, r7, #2
 8001a1a:	881a      	ldrh	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a20:	e003      	b.n	8001a2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a22:	1cbb      	adds	r3, r7, #2
 8001a24:	881a      	ldrh	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b002      	add	sp, #8
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e082      	b.n	8001b4c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2241      	movs	r2, #65	; 0x41
 8001a4a:	5c9b      	ldrb	r3, [r3, r2]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d107      	bne.n	8001a62 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2240      	movs	r2, #64	; 0x40
 8001a56:	2100      	movs	r1, #0
 8001a58:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff f833 	bl	8000ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2241      	movs	r2, #65	; 0x41
 8001a66:	2124      	movs	r1, #36	; 0x24
 8001a68:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2101      	movs	r1, #1
 8001a76:	438a      	bics	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4934      	ldr	r1, [pc, #208]	; (8001b54 <HAL_I2C_Init+0x120>)
 8001a84:	400a      	ands	r2, r1
 8001a86:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4931      	ldr	r1, [pc, #196]	; (8001b58 <HAL_I2C_Init+0x124>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d108      	bne.n	8001ab2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	0209      	lsls	r1, r1, #8
 8001aac:	430a      	orrs	r2, r1
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	e007      	b.n	8001ac2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2184      	movs	r1, #132	; 0x84
 8001abc:	0209      	lsls	r1, r1, #8
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d104      	bne.n	8001ad4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2280      	movs	r2, #128	; 0x80
 8001ad0:	0112      	lsls	r2, r2, #4
 8001ad2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	491f      	ldr	r1, [pc, #124]	; (8001b5c <HAL_I2C_Init+0x128>)
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	491a      	ldr	r1, [pc, #104]	; (8001b58 <HAL_I2C_Init+0x124>)
 8001af0:	400a      	ands	r2, r1
 8001af2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	431a      	orrs	r2, r3
 8001afe:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69d9      	ldr	r1, [r3, #28]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1a      	ldr	r2, [r3, #32]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2101      	movs	r1, #1
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2241      	movs	r2, #65	; 0x41
 8001b38:	2120      	movs	r1, #32
 8001b3a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2242      	movs	r2, #66	; 0x42
 8001b46:	2100      	movs	r1, #0
 8001b48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b002      	add	sp, #8
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	f0ffffff 	.word	0xf0ffffff
 8001b58:	ffff7fff 	.word	0xffff7fff
 8001b5c:	02008000 	.word	0x02008000

08001b60 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	1dbb      	adds	r3, r7, #6
 8001b6e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2241      	movs	r2, #65	; 0x41
 8001b74:	5c9b      	ldrb	r3, [r3, r2]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	001a      	movs	r2, r3
 8001b7a:	2328      	movs	r3, #40	; 0x28
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b28      	cmp	r3, #40	; 0x28
 8001b80:	d000      	beq.n	8001b84 <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 8001b82:	e08f      	b.n	8001ca4 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 8001b8a:	1dbb      	adds	r3, r7, #6
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d105      	bne.n	8001b9e <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2280      	movs	r2, #128	; 0x80
 8001b96:	0092      	lsls	r2, r2, #2
 8001b98:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e083      	b.n	8001ca6 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001b9e:	4a44      	ldr	r2, [pc, #272]	; (8001cb0 <HAL_I2C_Slave_Seq_Transmit_IT+0x150>)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	0011      	movs	r1, r2
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f001 faa9 	bl	80030fc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2240      	movs	r2, #64	; 0x40
 8001bae:	5c9b      	ldrb	r3, [r3, r2]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e076      	b.n	8001ca6 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2240      	movs	r2, #64	; 0x40
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2241      	movs	r2, #65	; 0x41
 8001bc4:	5c9b      	ldrb	r3, [r3, r2]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8001bca:	d12c      	bne.n	8001c26 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2102      	movs	r1, #2
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f001 fa93 	bl	80030fc <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	401a      	ands	r2, r3
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d11d      	bne.n	8001c26 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	492f      	ldr	r1, [pc, #188]	; (8001cb4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>)
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d011      	beq.n	8001c26 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c06:	4a2c      	ldr	r2, [pc, #176]	; (8001cb8 <HAL_I2C_Slave_Seq_Transmit_IT+0x158>)
 8001c08:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f7ff fd38 	bl	8001684 <HAL_DMA_Abort_IT>
 8001c14:	1e03      	subs	r3, r0, #0
 8001c16:	d006      	beq.n	8001c26 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c22:	0018      	movs	r0, r3
 8001c24:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2241      	movs	r2, #65	; 0x41
 8001c2a:	2129      	movs	r1, #41	; 0x29
 8001c2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2242      	movs	r2, #66	; 0x42
 8001c32:	2120      	movs	r1, #32
 8001c34:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	491b      	ldr	r1, [pc, #108]	; (8001cb4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>)
 8001c48:	400a      	ands	r2, r1
 8001c4a:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1dba      	adds	r2, r7, #6
 8001c56:	8812      	ldrh	r2, [r2, #0]
 8001c58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8001c6e:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	0c1b      	lsrs	r3, r3, #16
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d103      	bne.n	8001c8c <HAL_I2C_Slave_Seq_Transmit_IT+0x12c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2208      	movs	r2, #8
 8001c8a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2240      	movs	r2, #64	; 0x40
 8001c90:	2100      	movs	r1, #0
 8001c92:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <HAL_I2C_Slave_Seq_Transmit_IT+0x150>)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	0011      	movs	r1, r2
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f001 f9c6 	bl	800302c <I2C_Enable_IRQ>

    return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e000      	b.n	8001ca6 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
  }
  else
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
  }
}
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b004      	add	sp, #16
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	00008001 	.word	0x00008001
 8001cb4:	ffff7fff 	.word	0xffff7fff
 8001cb8:	08002f83 	.word	0x08002f83
 8001cbc:	08001fc5 	.word	0x08001fc5

08001cc0 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	1dbb      	adds	r3, r7, #6
 8001cce:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2241      	movs	r2, #65	; 0x41
 8001cd4:	5c9b      	ldrb	r3, [r3, r2]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	001a      	movs	r2, r3
 8001cda:	2328      	movs	r3, #40	; 0x28
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b28      	cmp	r3, #40	; 0x28
 8001ce0:	d000      	beq.n	8001ce4 <HAL_I2C_Slave_Seq_Receive_IT+0x24>
 8001ce2:	e08f      	b.n	8001e04 <HAL_I2C_Slave_Seq_Receive_IT+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_I2C_Slave_Seq_Receive_IT+0x32>
 8001cea:	1dbb      	adds	r3, r7, #6
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d105      	bne.n	8001cfe <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2280      	movs	r2, #128	; 0x80
 8001cf6:	0092      	lsls	r2, r2, #2
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e083      	b.n	8001e06 <HAL_I2C_Slave_Seq_Receive_IT+0x146>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001cfe:	4a44      	ldr	r2, [pc, #272]	; (8001e10 <HAL_I2C_Slave_Seq_Receive_IT+0x150>)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	0011      	movs	r1, r2
 8001d04:	0018      	movs	r0, r3
 8001d06:	f001 f9f9 	bl	80030fc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2240      	movs	r2, #64	; 0x40
 8001d0e:	5c9b      	ldrb	r3, [r3, r2]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_I2C_Slave_Seq_Receive_IT+0x58>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e076      	b.n	8001e06 <HAL_I2C_Slave_Seq_Receive_IT+0x146>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2240      	movs	r2, #64	; 0x40
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2241      	movs	r2, #65	; 0x41
 8001d24:	5c9b      	ldrb	r3, [r3, r2]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b29      	cmp	r3, #41	; 0x29
 8001d2a:	d12c      	bne.n	8001d86 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2101      	movs	r1, #1
 8001d30:	0018      	movs	r0, r3
 8001d32:	f001 f9e3 	bl	80030fc <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	01db      	lsls	r3, r3, #7
 8001d40:	401a      	ands	r2, r3
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	01db      	lsls	r3, r3, #7
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d11d      	bne.n	8001d86 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	492f      	ldr	r1, [pc, #188]	; (8001e14 <HAL_I2C_Slave_Seq_Receive_IT+0x154>)
 8001d56:	400a      	ands	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d011      	beq.n	8001d86 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d66:	4a2c      	ldr	r2, [pc, #176]	; (8001e18 <HAL_I2C_Slave_Seq_Receive_IT+0x158>)
 8001d68:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f7ff fc88 	bl	8001684 <HAL_DMA_Abort_IT>
 8001d74:	1e03      	subs	r3, r0, #0
 8001d76:	d006      	beq.n	8001d86 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d82:	0018      	movs	r0, r3
 8001d84:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2241      	movs	r2, #65	; 0x41
 8001d8a:	212a      	movs	r1, #42	; 0x2a
 8001d8c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2242      	movs	r2, #66	; 0x42
 8001d92:	2120      	movs	r1, #32
 8001d94:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	491d      	ldr	r1, [pc, #116]	; (8001e1c <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8001da8:	400a      	ands	r2, r1
 8001daa:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1dba      	adds	r2, r7, #6
 8001db6:	8812      	ldrh	r2, [r2, #0]
 8001db8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8001dce:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	0c1b      	lsrs	r3, r3, #16
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4013      	ands	r3, r2
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d103      	bne.n	8001dec <HAL_I2C_Slave_Seq_Receive_IT+0x12c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2208      	movs	r2, #8
 8001dea:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2240      	movs	r2, #64	; 0x40
 8001df0:	2100      	movs	r1, #0
 8001df2:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001df4:	4a06      	ldr	r2, [pc, #24]	; (8001e10 <HAL_I2C_Slave_Seq_Receive_IT+0x150>)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	0011      	movs	r1, r2
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f001 f916 	bl	800302c <I2C_Enable_IRQ>

    return HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	e000      	b.n	8001e06 <HAL_I2C_Slave_Seq_Receive_IT+0x146>
  }
  else
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
  }
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b004      	add	sp, #16
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	00008002 	.word	0x00008002
 8001e14:	ffffbfff 	.word	0xffffbfff
 8001e18:	08002f83 	.word	0x08002f83
 8001e1c:	ffff7fff 	.word	0xffff7fff
 8001e20:	08001fc5 	.word	0x08001fc5

08001e24 <HAL_I2C_EnableListen_IT>:
  * @brief  Enable the Address listen mode with Interrupt.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY){
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2241      	movs	r2, #65	; 0x41
 8001e30:	5c9b      	ldrb	r3, [r3, r2]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	d10f      	bne.n	8001e58 <HAL_I2C_EnableListen_IT+0x34>
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2241      	movs	r2, #65	; 0x41
 8001e3c:	2128      	movs	r1, #40	; 0x28
 8001e3e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a08      	ldr	r2, [pc, #32]	; (8001e64 <HAL_I2C_EnableListen_IT+0x40>)
 8001e44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	021a      	lsls	r2, r3, #8
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	0011      	movs	r1, r2
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f001 f8ec 	bl	800302c <I2C_Enable_IRQ>

    return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e000      	b.n	8001e5a <HAL_I2C_EnableListen_IT+0x36>
  }else{
    return HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
  }
}
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b002      	add	sp, #8
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	08001fc5 	.word	0x08001fc5

08001e68 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	68f9      	ldr	r1, [r7, #12]
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	4798      	blx	r3
  }
}
 8001e94:	46c0      	nop			; (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b004      	add	sp, #16
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	001a      	movs	r2, r3
 8001eba:	2301      	movs	r3, #1
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d010      	beq.n	8001ee2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	09db      	lsrs	r3, r3, #7
 8001ec4:	001a      	movs	r2, r3
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001eca:	d00a      	beq.n	8001ee2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2280      	movs	r2, #128	; 0x80
 8001ede:	0052      	lsls	r2, r2, #1
 8001ee0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	0a9b      	lsrs	r3, r3, #10
 8001ee6:	001a      	movs	r2, r3
 8001ee8:	2301      	movs	r3, #1
 8001eea:	4013      	ands	r3, r2
 8001eec:	d010      	beq.n	8001f10 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	09db      	lsrs	r3, r3, #7
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001ef8:	d00a      	beq.n	8001f10 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	2208      	movs	r2, #8
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2280      	movs	r2, #128	; 0x80
 8001f0c:	00d2      	lsls	r2, r2, #3
 8001f0e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	0a5b      	lsrs	r3, r3, #9
 8001f14:	001a      	movs	r2, r3
 8001f16:	2301      	movs	r3, #1
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d010      	beq.n	8001f3e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	09db      	lsrs	r3, r3, #7
 8001f20:	001a      	movs	r2, r3
 8001f22:	2301      	movs	r3, #1
 8001f24:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001f26:	d00a      	beq.n	8001f3e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2280      	movs	r2, #128	; 0x80
 8001f3a:	0092      	lsls	r2, r2, #2
 8001f3c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	220b      	movs	r2, #11
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d005      	beq.n	8001f58 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	0011      	movs	r1, r2
 8001f52:	0018      	movs	r0, r3
 8001f54:	f000 fee8 	bl	8002d28 <I2C_ITError>
  }
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b006      	add	sp, #24
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b002      	add	sp, #8
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b002      	add	sp, #8
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b002      	add	sp, #8
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b002      	add	sp, #8
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b002      	add	sp, #8
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2240      	movs	r2, #64	; 0x40
 8001fde:	5c9b      	ldrb	r3, [r3, r2]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <I2C_Slave_ISR_IT+0x24>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e0fa      	b.n	80021de <I2C_Slave_ISR_IT+0x21a>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2240      	movs	r2, #64	; 0x40
 8001fec:	2101      	movs	r1, #1
 8001fee:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	001a      	movs	r2, r3
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d00b      	beq.n	8002014 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	001a      	movs	r2, r3
 8002002:	2301      	movs	r3, #1
 8002004:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002006:	d005      	beq.n	8002014 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	0011      	movs	r1, r2
 800200e:	0018      	movs	r0, r3
 8002010:	f000 fd0c 	bl	8002a2c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	001a      	movs	r2, r3
 800201a:	2301      	movs	r3, #1
 800201c:	4013      	ands	r3, r2
 800201e:	d054      	beq.n	80020ca <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	001a      	movs	r2, r3
 8002026:	2301      	movs	r3, #1
 8002028:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800202a:	d04e      	beq.n	80020ca <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d12d      	bne.n	8002092 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2241      	movs	r2, #65	; 0x41
 800203a:	5c9b      	ldrb	r3, [r3, r2]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b28      	cmp	r3, #40	; 0x28
 8002040:	d10b      	bne.n	800205a <I2C_Slave_ISR_IT+0x96>
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	049b      	lsls	r3, r3, #18
 8002048:	429a      	cmp	r2, r3
 800204a:	d106      	bne.n	800205a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0011      	movs	r1, r2
 8002052:	0018      	movs	r0, r3
 8002054:	f000 fe0e 	bl	8002c74 <I2C_ITListenCplt>
 8002058:	e036      	b.n	80020c8 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2241      	movs	r2, #65	; 0x41
 800205e:	5c9b      	ldrb	r3, [r3, r2]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b29      	cmp	r3, #41	; 0x29
 8002064:	d110      	bne.n	8002088 <I2C_Slave_ISR_IT+0xc4>
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	4a5f      	ldr	r2, [pc, #380]	; (80021e8 <I2C_Slave_ISR_IT+0x224>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00c      	beq.n	8002088 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2210      	movs	r2, #16
 8002074:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	0018      	movs	r0, r3
 800207a:	f000 ff60 	bl	8002f3e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	0018      	movs	r0, r3
 8002082:	f000 fb9b 	bl	80027bc <I2C_ITSlaveSeqCplt>
 8002086:	e01f      	b.n	80020c8 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2210      	movs	r2, #16
 800208e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002090:	e09d      	b.n	80021ce <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2210      	movs	r2, #16
 8002098:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	2204      	movs	r2, #4
 80020a0:	431a      	orrs	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <I2C_Slave_ISR_IT+0xf4>
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	045b      	lsls	r3, r3, #17
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d000      	beq.n	80020b8 <I2C_Slave_ISR_IT+0xf4>
 80020b6:	e08a      	b.n	80021ce <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	0011      	movs	r1, r2
 80020c0:	0018      	movs	r0, r3
 80020c2:	f000 fe31 	bl	8002d28 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80020c6:	e082      	b.n	80021ce <I2C_Slave_ISR_IT+0x20a>
 80020c8:	e081      	b.n	80021ce <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	001a      	movs	r2, r3
 80020d0:	2301      	movs	r3, #1
 80020d2:	4013      	ands	r3, r2
 80020d4:	d031      	beq.n	800213a <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	001a      	movs	r2, r3
 80020dc:	2301      	movs	r3, #1
 80020de:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80020e0:	d02b      	beq.n	800213a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d018      	beq.n	800211e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d154      	bne.n	80021d2 <I2C_Slave_ISR_IT+0x20e>
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	4a2f      	ldr	r2, [pc, #188]	; (80021e8 <I2C_Slave_ISR_IT+0x224>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d050      	beq.n	80021d2 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	0018      	movs	r0, r3
 8002134:	f000 fb42 	bl	80027bc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002138:	e04b      	b.n	80021d2 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	08db      	lsrs	r3, r3, #3
 800213e:	001a      	movs	r2, r3
 8002140:	2301      	movs	r3, #1
 8002142:	4013      	ands	r3, r2
 8002144:	d00c      	beq.n	8002160 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	08db      	lsrs	r3, r3, #3
 800214a:	001a      	movs	r2, r3
 800214c:	2301      	movs	r3, #1
 800214e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002150:	d006      	beq.n	8002160 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	0011      	movs	r1, r2
 8002158:	0018      	movs	r0, r3
 800215a:	f000 fa49 	bl	80025f0 <I2C_ITAddrCplt>
 800215e:	e039      	b.n	80021d4 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	085b      	lsrs	r3, r3, #1
 8002164:	001a      	movs	r2, r3
 8002166:	2301      	movs	r3, #1
 8002168:	4013      	ands	r3, r2
 800216a:	d033      	beq.n	80021d4 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	085b      	lsrs	r3, r3, #1
 8002170:	001a      	movs	r2, r3
 8002172:	2301      	movs	r3, #1
 8002174:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002176:	d02d      	beq.n	80021d4 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d018      	beq.n	80021b4 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	781a      	ldrb	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219c:	b29b      	uxth	r3, r3
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	851a      	strh	r2, [r3, #40]	; 0x28
 80021b2:	e00f      	b.n	80021d4 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	045b      	lsls	r3, r3, #17
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d002      	beq.n	80021c4 <I2C_Slave_ISR_IT+0x200>
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d107      	bne.n	80021d4 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 faf8 	bl	80027bc <I2C_ITSlaveSeqCplt>
 80021cc:	e002      	b.n	80021d4 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	e000      	b.n	80021d4 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80021d2:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2240      	movs	r2, #64	; 0x40
 80021d8:	2100      	movs	r1, #0
 80021da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b006      	add	sp, #24
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	ffff0000 	.word	0xffff0000

080021ec <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2240      	movs	r2, #64	; 0x40
 80021fc:	5c9b      	ldrb	r3, [r3, r2]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <I2C_Master_ISR_DMA+0x1a>
 8002202:	2302      	movs	r3, #2
 8002204:	e0f7      	b.n	80023f6 <I2C_Master_ISR_DMA+0x20a>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2240      	movs	r2, #64	; 0x40
 800220a:	2101      	movs	r1, #1
 800220c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	001a      	movs	r2, r3
 8002214:	2301      	movs	r3, #1
 8002216:	4013      	ands	r3, r2
 8002218:	d019      	beq.n	800224e <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	001a      	movs	r2, r3
 8002220:	2301      	movs	r3, #1
 8002222:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002224:	d013      	beq.n	800224e <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2210      	movs	r2, #16
 800222c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	2204      	movs	r2, #4
 8002234:	431a      	orrs	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2120      	movs	r1, #32
 800223e:	0018      	movs	r0, r3
 8002240:	f000 fef4 	bl	800302c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	0018      	movs	r0, r3
 8002248:	f000 fe79 	bl	8002f3e <I2C_Flush_TXDR>
 800224c:	e0ce      	b.n	80023ec <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	09db      	lsrs	r3, r3, #7
 8002252:	001a      	movs	r2, r3
 8002254:	2301      	movs	r3, #1
 8002256:	4013      	ands	r3, r2
 8002258:	d100      	bne.n	800225c <I2C_Master_ISR_DMA+0x70>
 800225a:	e07e      	b.n	800235a <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	099b      	lsrs	r3, r3, #6
 8002260:	001a      	movs	r2, r3
 8002262:	2301      	movs	r3, #1
 8002264:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002266:	d100      	bne.n	800226a <I2C_Master_ISR_DMA+0x7e>
 8002268:	e077      	b.n	800235a <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2140      	movs	r1, #64	; 0x40
 8002276:	438a      	bics	r2, r1
 8002278:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227e:	b29b      	uxth	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d055      	beq.n	8002330 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	b29a      	uxth	r2, r3
 800228c:	2312      	movs	r3, #18
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	0592      	lsls	r2, r2, #22
 8002292:	0d92      	lsrs	r2, r2, #22
 8002294:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	2bff      	cmp	r3, #255	; 0xff
 800229e:	d906      	bls.n	80022ae <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	22ff      	movs	r2, #255	; 0xff
 80022a4:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	045b      	lsls	r3, r3, #17
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	e010      	b.n	80022d0 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	4a50      	ldr	r2, [pc, #320]	; (8002400 <I2C_Master_ISR_DMA+0x214>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d003      	beq.n	80022ca <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	e002      	b.n	80022d0 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	049b      	lsls	r3, r3, #18
 80022ce:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	697c      	ldr	r4, [r7, #20]
 80022d8:	2312      	movs	r3, #18
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	8819      	ldrh	r1, [r3, #0]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	2300      	movs	r3, #0
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	0023      	movs	r3, r4
 80022e6:	f000 fe6b 	bl	8002fc0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2241      	movs	r2, #65	; 0x41
 8002300:	5c9b      	ldrb	r3, [r3, r2]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b22      	cmp	r3, #34	; 0x22
 8002306:	d109      	bne.n	800231c <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2180      	movs	r1, #128	; 0x80
 8002314:	0209      	lsls	r1, r1, #8
 8002316:	430a      	orrs	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800231a:	e067      	b.n	80023ec <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2180      	movs	r1, #128	; 0x80
 8002328:	01c9      	lsls	r1, r1, #7
 800232a:	430a      	orrs	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800232e:	e05d      	b.n	80023ec <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	049b      	lsls	r3, r3, #18
 800233a:	401a      	ands	r2, r3
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	049b      	lsls	r3, r3, #18
 8002340:	429a      	cmp	r2, r3
 8002342:	d004      	beq.n	800234e <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	0018      	movs	r0, r3
 8002348:	f000 f9f6 	bl	8002738 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800234c:	e04e      	b.n	80023ec <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2140      	movs	r1, #64	; 0x40
 8002352:	0018      	movs	r0, r3
 8002354:	f000 fce8 	bl	8002d28 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002358:	e048      	b.n	80023ec <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	099b      	lsrs	r3, r3, #6
 800235e:	001a      	movs	r2, r3
 8002360:	2301      	movs	r3, #1
 8002362:	4013      	ands	r3, r2
 8002364:	d02e      	beq.n	80023c4 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	099b      	lsrs	r3, r3, #6
 800236a:	001a      	movs	r2, r3
 800236c:	2301      	movs	r3, #1
 800236e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002370:	d028      	beq.n	80023c4 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d11d      	bne.n	80023b8 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	049b      	lsls	r3, r3, #18
 8002386:	401a      	ands	r2, r3
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	049b      	lsls	r3, r3, #18
 800238c:	429a      	cmp	r2, r3
 800238e:	d02c      	beq.n	80023ea <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	4a1a      	ldr	r2, [pc, #104]	; (8002400 <I2C_Master_ISR_DMA+0x214>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d109      	bne.n	80023ae <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2180      	movs	r1, #128	; 0x80
 80023a6:	01c9      	lsls	r1, r1, #7
 80023a8:	430a      	orrs	r2, r1
 80023aa:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80023ac:	e01d      	b.n	80023ea <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f000 f9c1 	bl	8002738 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80023b6:	e018      	b.n	80023ea <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2140      	movs	r1, #64	; 0x40
 80023bc:	0018      	movs	r0, r3
 80023be:	f000 fcb3 	bl	8002d28 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80023c2:	e012      	b.n	80023ea <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	001a      	movs	r2, r3
 80023ca:	2301      	movs	r3, #1
 80023cc:	4013      	ands	r3, r2
 80023ce:	d00d      	beq.n	80023ec <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	001a      	movs	r2, r3
 80023d6:	2301      	movs	r3, #1
 80023d8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023da:	d007      	beq.n	80023ec <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	0011      	movs	r1, r2
 80023e2:	0018      	movs	r0, r3
 80023e4:	f000 fa50 	bl	8002888 <I2C_ITMasterCplt>
 80023e8:	e000      	b.n	80023ec <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 80023ea:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2240      	movs	r2, #64	; 0x40
 80023f0:	2100      	movs	r1, #0
 80023f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b007      	add	sp, #28
 80023fc:	bd90      	pop	{r4, r7, pc}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	ffff0000 	.word	0xffff0000

08002404 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2240      	movs	r2, #64	; 0x40
 800241e:	5c9b      	ldrb	r3, [r3, r2]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <I2C_Slave_ISR_DMA+0x24>
 8002424:	2302      	movs	r3, #2
 8002426:	e0dd      	b.n	80025e4 <I2C_Slave_ISR_DMA+0x1e0>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2240      	movs	r2, #64	; 0x40
 800242c:	2101      	movs	r1, #1
 800242e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	001a      	movs	r2, r3
 8002436:	2301      	movs	r3, #1
 8002438:	4013      	ands	r3, r2
 800243a:	d00b      	beq.n	8002454 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	001a      	movs	r2, r3
 8002442:	2301      	movs	r3, #1
 8002444:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002446:	d005      	beq.n	8002454 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	0011      	movs	r1, r2
 800244e:	0018      	movs	r0, r3
 8002450:	f000 faec 	bl	8002a2c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	001a      	movs	r2, r3
 800245a:	2301      	movs	r3, #1
 800245c:	4013      	ands	r3, r2
 800245e:	d100      	bne.n	8002462 <I2C_Slave_ISR_DMA+0x5e>
 8002460:	e0a9      	b.n	80025b6 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	001a      	movs	r2, r3
 8002468:	2301      	movs	r3, #1
 800246a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800246c:	d100      	bne.n	8002470 <I2C_Slave_ISR_DMA+0x6c>
 800246e:	e0a2      	b.n	80025b6 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	0b9b      	lsrs	r3, r3, #14
 8002474:	001a      	movs	r2, r3
 8002476:	2301      	movs	r3, #1
 8002478:	4013      	ands	r3, r2
 800247a:	d106      	bne.n	800248a <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	0bdb      	lsrs	r3, r3, #15
 8002480:	001a      	movs	r2, r3
 8002482:	2301      	movs	r3, #1
 8002484:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002486:	d100      	bne.n	800248a <I2C_Slave_ISR_DMA+0x86>
 8002488:	e08e      	b.n	80025a8 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00d      	beq.n	80024ae <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	0bdb      	lsrs	r3, r3, #15
 8002496:	001a      	movs	r2, r3
 8002498:	2301      	movs	r3, #1
 800249a:	4013      	ands	r3, r2
 800249c:	d007      	beq.n	80024ae <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 80024aa:	2301      	movs	r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00d      	beq.n	80024d2 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	0b9b      	lsrs	r3, r3, #14
 80024ba:	001a      	movs	r2, r3
 80024bc:	2301      	movs	r3, #1
 80024be:	4013      	ands	r3, r2
 80024c0:	d007      	beq.n	80024d2 <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 80024ce:	2301      	movs	r3, #1
 80024d0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d12d      	bne.n	8002534 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2241      	movs	r2, #65	; 0x41
 80024dc:	5c9b      	ldrb	r3, [r3, r2]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b28      	cmp	r3, #40	; 0x28
 80024e2:	d10b      	bne.n	80024fc <I2C_Slave_ISR_DMA+0xf8>
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	049b      	lsls	r3, r3, #18
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d106      	bne.n	80024fc <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	0011      	movs	r1, r2
 80024f4:	0018      	movs	r0, r3
 80024f6:	f000 fbbd 	bl	8002c74 <I2C_ITListenCplt>
 80024fa:	e054      	b.n	80025a6 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2241      	movs	r2, #65	; 0x41
 8002500:	5c9b      	ldrb	r3, [r3, r2]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b29      	cmp	r3, #41	; 0x29
 8002506:	d110      	bne.n	800252a <I2C_Slave_ISR_DMA+0x126>
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	4a38      	ldr	r2, [pc, #224]	; (80025ec <I2C_Slave_ISR_DMA+0x1e8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00c      	beq.n	800252a <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2210      	movs	r2, #16
 8002516:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	0018      	movs	r0, r3
 800251c:	f000 fd0f 	bl	8002f3e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	0018      	movs	r0, r3
 8002524:	f000 f94a 	bl	80027bc <I2C_ITSlaveSeqCplt>
 8002528:	e03d      	b.n	80025a6 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2210      	movs	r2, #16
 8002530:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002532:	e03e      	b.n	80025b2 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2210      	movs	r2, #16
 800253a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	2204      	movs	r2, #4
 8002542:	431a      	orrs	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002548:	2317      	movs	r3, #23
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	2141      	movs	r1, #65	; 0x41
 8002550:	5c52      	ldrb	r2, [r2, r1]
 8002552:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <I2C_Slave_ISR_DMA+0x160>
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	045b      	lsls	r3, r3, #17
 8002560:	429a      	cmp	r2, r3
 8002562:	d126      	bne.n	80025b2 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002564:	2217      	movs	r2, #23
 8002566:	18bb      	adds	r3, r7, r2
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b21      	cmp	r3, #33	; 0x21
 800256c:	d003      	beq.n	8002576 <I2C_Slave_ISR_DMA+0x172>
 800256e:	18bb      	adds	r3, r7, r2
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b29      	cmp	r3, #41	; 0x29
 8002574:	d103      	bne.n	800257e <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2221      	movs	r2, #33	; 0x21
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
 800257c:	e00b      	b.n	8002596 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800257e:	2217      	movs	r2, #23
 8002580:	18bb      	adds	r3, r7, r2
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b22      	cmp	r3, #34	; 0x22
 8002586:	d003      	beq.n	8002590 <I2C_Slave_ISR_DMA+0x18c>
 8002588:	18bb      	adds	r3, r7, r2
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b2a      	cmp	r3, #42	; 0x2a
 800258e:	d102      	bne.n	8002596 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2222      	movs	r2, #34	; 0x22
 8002594:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	0011      	movs	r1, r2
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 fbc2 	bl	8002d28 <I2C_ITError>
      if (treatdmanack == 1U)
 80025a4:	e005      	b.n	80025b2 <I2C_Slave_ISR_DMA+0x1ae>
 80025a6:	e004      	b.n	80025b2 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2210      	movs	r2, #16
 80025ae:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80025b0:	e013      	b.n	80025da <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 80025b2:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80025b4:	e011      	b.n	80025da <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	08db      	lsrs	r3, r3, #3
 80025ba:	001a      	movs	r2, r3
 80025bc:	2301      	movs	r3, #1
 80025be:	4013      	ands	r3, r2
 80025c0:	d00b      	beq.n	80025da <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	08db      	lsrs	r3, r3, #3
 80025c6:	001a      	movs	r2, r3
 80025c8:	2301      	movs	r3, #1
 80025ca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80025cc:	d005      	beq.n	80025da <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	0011      	movs	r1, r2
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 f80b 	bl	80025f0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2240      	movs	r2, #64	; 0x40
 80025de:	2100      	movs	r1, #0
 80025e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b008      	add	sp, #32
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	ffff0000 	.word	0xffff0000

080025f0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2241      	movs	r2, #65	; 0x41
 80025fe:	5c9b      	ldrb	r3, [r3, r2]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	001a      	movs	r2, r3
 8002604:	2328      	movs	r3, #40	; 0x28
 8002606:	4013      	ands	r3, r2
 8002608:	2b28      	cmp	r3, #40	; 0x28
 800260a:	d000      	beq.n	800260e <I2C_ITAddrCplt+0x1e>
 800260c:	e088      	b.n	8002720 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	0c1b      	lsrs	r3, r3, #16
 8002616:	b2da      	uxtb	r2, r3
 8002618:	250f      	movs	r5, #15
 800261a:	197b      	adds	r3, r7, r5
 800261c:	2101      	movs	r1, #1
 800261e:	400a      	ands	r2, r1
 8002620:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	0c1b      	lsrs	r3, r3, #16
 800262a:	b29a      	uxth	r2, r3
 800262c:	200c      	movs	r0, #12
 800262e:	183b      	adds	r3, r7, r0
 8002630:	21fe      	movs	r1, #254	; 0xfe
 8002632:	400a      	ands	r2, r1
 8002634:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	b29a      	uxth	r2, r3
 800263e:	240a      	movs	r4, #10
 8002640:	193b      	adds	r3, r7, r4
 8002642:	0592      	lsls	r2, r2, #22
 8002644:	0d92      	lsrs	r2, r2, #22
 8002646:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	b29a      	uxth	r2, r3
 8002650:	2308      	movs	r3, #8
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	21fe      	movs	r1, #254	; 0xfe
 8002656:	400a      	ands	r2, r1
 8002658:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d148      	bne.n	80026f4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002662:	0021      	movs	r1, r4
 8002664:	187b      	adds	r3, r7, r1
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	09db      	lsrs	r3, r3, #7
 800266a:	b29a      	uxth	r2, r3
 800266c:	183b      	adds	r3, r7, r0
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	4053      	eors	r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	001a      	movs	r2, r3
 8002676:	2306      	movs	r3, #6
 8002678:	4013      	ands	r3, r2
 800267a:	d120      	bne.n	80026be <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800267c:	183b      	adds	r3, r7, r0
 800267e:	187a      	adds	r2, r7, r1
 8002680:	8812      	ldrh	r2, [r2, #0]
 8002682:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002692:	2b02      	cmp	r3, #2
 8002694:	d14c      	bne.n	8002730 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2208      	movs	r2, #8
 80026a2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2240      	movs	r2, #64	; 0x40
 80026a8:	2100      	movs	r1, #0
 80026aa:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80026ac:	183b      	adds	r3, r7, r0
 80026ae:	881a      	ldrh	r2, [r3, #0]
 80026b0:	197b      	adds	r3, r7, r5
 80026b2:	7819      	ldrb	r1, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	0018      	movs	r0, r3
 80026b8:	f7fe f914 	bl	80008e4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80026bc:	e038      	b.n	8002730 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80026be:	240c      	movs	r4, #12
 80026c0:	193b      	adds	r3, r7, r4
 80026c2:	2208      	movs	r2, #8
 80026c4:	18ba      	adds	r2, r7, r2
 80026c6:	8812      	ldrh	r2, [r2, #0]
 80026c8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	021a      	lsls	r2, r3, #8
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 fd12 	bl	80030fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2240      	movs	r2, #64	; 0x40
 80026dc:	2100      	movs	r1, #0
 80026de:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80026e0:	193b      	adds	r3, r7, r4
 80026e2:	881a      	ldrh	r2, [r3, #0]
 80026e4:	230f      	movs	r3, #15
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	7819      	ldrb	r1, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7fe f8f9 	bl	80008e4 <HAL_I2C_AddrCallback>
}
 80026f2:	e01d      	b.n	8002730 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	021a      	lsls	r2, r3, #8
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	0011      	movs	r1, r2
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 fcfd 	bl	80030fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2240      	movs	r2, #64	; 0x40
 8002706:	2100      	movs	r1, #0
 8002708:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800270a:	230c      	movs	r3, #12
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	881a      	ldrh	r2, [r3, #0]
 8002710:	230f      	movs	r3, #15
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	7819      	ldrb	r1, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	0018      	movs	r0, r3
 800271a:	f7fe f8e3 	bl	80008e4 <HAL_I2C_AddrCallback>
}
 800271e:	e007      	b.n	8002730 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2208      	movs	r2, #8
 8002726:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2240      	movs	r2, #64	; 0x40
 800272c:	2100      	movs	r1, #0
 800272e:	5499      	strb	r1, [r3, r2]
}
 8002730:	46c0      	nop			; (mov r8, r8)
 8002732:	46bd      	mov	sp, r7
 8002734:	b004      	add	sp, #16
 8002736:	bdb0      	pop	{r4, r5, r7, pc}

08002738 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2242      	movs	r2, #66	; 0x42
 8002744:	2100      	movs	r1, #0
 8002746:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2241      	movs	r2, #65	; 0x41
 800274c:	5c9b      	ldrb	r3, [r3, r2]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b21      	cmp	r3, #33	; 0x21
 8002752:	d117      	bne.n	8002784 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2241      	movs	r2, #65	; 0x41
 8002758:	2120      	movs	r1, #32
 800275a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2211      	movs	r2, #17
 8002760:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2101      	movs	r1, #1
 800276c:	0018      	movs	r0, r3
 800276e:	f000 fcc5 	bl	80030fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2240      	movs	r2, #64	; 0x40
 8002776:	2100      	movs	r1, #0
 8002778:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	0018      	movs	r0, r3
 800277e:	f7ff fbef 	bl	8001f60 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002782:	e016      	b.n	80027b2 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2241      	movs	r2, #65	; 0x41
 8002788:	2120      	movs	r1, #32
 800278a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2212      	movs	r2, #18
 8002790:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2102      	movs	r1, #2
 800279c:	0018      	movs	r0, r3
 800279e:	f000 fcad 	bl	80030fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2240      	movs	r2, #64	; 0x40
 80027a6:	2100      	movs	r1, #0
 80027a8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	0018      	movs	r0, r3
 80027ae:	f7ff fbdf 	bl	8001f70 <HAL_I2C_MasterRxCpltCallback>
}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b002      	add	sp, #8
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2242      	movs	r2, #66	; 0x42
 80027d0:	2100      	movs	r1, #0
 80027d2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	0b9b      	lsrs	r3, r3, #14
 80027d8:	001a      	movs	r2, r3
 80027da:	2301      	movs	r3, #1
 80027dc:	4013      	ands	r3, r2
 80027de:	d008      	beq.n	80027f2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4925      	ldr	r1, [pc, #148]	; (8002880 <I2C_ITSlaveSeqCplt+0xc4>)
 80027ec:	400a      	ands	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	e00d      	b.n	800280e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	0bdb      	lsrs	r3, r3, #15
 80027f6:	001a      	movs	r2, r3
 80027f8:	2301      	movs	r3, #1
 80027fa:	4013      	ands	r3, r2
 80027fc:	d007      	beq.n	800280e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	491e      	ldr	r1, [pc, #120]	; (8002884 <I2C_ITSlaveSeqCplt+0xc8>)
 800280a:	400a      	ands	r2, r1
 800280c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2241      	movs	r2, #65	; 0x41
 8002812:	5c9b      	ldrb	r3, [r3, r2]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b29      	cmp	r3, #41	; 0x29
 8002818:	d114      	bne.n	8002844 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2241      	movs	r2, #65	; 0x41
 800281e:	2128      	movs	r1, #40	; 0x28
 8002820:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2221      	movs	r2, #33	; 0x21
 8002826:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2101      	movs	r1, #1
 800282c:	0018      	movs	r0, r3
 800282e:	f000 fc65 	bl	80030fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2240      	movs	r2, #64	; 0x40
 8002836:	2100      	movs	r1, #0
 8002838:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f7fe f833 	bl	80008a8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002842:	e019      	b.n	8002878 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2241      	movs	r2, #65	; 0x41
 8002848:	5c9b      	ldrb	r3, [r3, r2]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b2a      	cmp	r3, #42	; 0x2a
 800284e:	d113      	bne.n	8002878 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2241      	movs	r2, #65	; 0x41
 8002854:	2128      	movs	r1, #40	; 0x28
 8002856:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2222      	movs	r2, #34	; 0x22
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2102      	movs	r1, #2
 8002862:	0018      	movs	r0, r3
 8002864:	f000 fc4a 	bl	80030fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2240      	movs	r2, #64	; 0x40
 800286c:	2100      	movs	r1, #0
 800286e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	0018      	movs	r0, r3
 8002874:	f7fe f826 	bl	80008c4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	b004      	add	sp, #16
 800287e:	bd80      	pop	{r7, pc}
 8002880:	ffffbfff 	.word	0xffffbfff
 8002884:	ffff7fff 	.word	0xffff7fff

08002888 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2220      	movs	r2, #32
 800289c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2241      	movs	r2, #65	; 0x41
 80028a2:	5c9b      	ldrb	r3, [r3, r2]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b21      	cmp	r3, #33	; 0x21
 80028a8:	d108      	bne.n	80028bc <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2101      	movs	r1, #1
 80028ae:	0018      	movs	r0, r3
 80028b0:	f000 fc24 	bl	80030fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2211      	movs	r2, #17
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
 80028ba:	e00d      	b.n	80028d8 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2241      	movs	r2, #65	; 0x41
 80028c0:	5c9b      	ldrb	r3, [r3, r2]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b22      	cmp	r3, #34	; 0x22
 80028c6:	d107      	bne.n	80028d8 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2102      	movs	r1, #2
 80028cc:	0018      	movs	r0, r3
 80028ce:	f000 fc15 	bl	80030fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2212      	movs	r2, #18
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4950      	ldr	r1, [pc, #320]	; (8002a24 <I2C_ITMasterCplt+0x19c>)
 80028e4:	400a      	ands	r2, r1
 80028e6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4d      	ldr	r2, [pc, #308]	; (8002a28 <I2C_ITMasterCplt+0x1a0>)
 80028f2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	001a      	movs	r2, r3
 80028fa:	2301      	movs	r3, #1
 80028fc:	4013      	ands	r3, r2
 80028fe:	d009      	beq.n	8002914 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2210      	movs	r2, #16
 8002906:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	2204      	movs	r2, #4
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2241      	movs	r2, #65	; 0x41
 8002918:	5c9b      	ldrb	r3, [r3, r2]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b60      	cmp	r3, #96	; 0x60
 800291e:	d10b      	bne.n	8002938 <I2C_ITMasterCplt+0xb0>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	001a      	movs	r2, r3
 8002926:	2301      	movs	r3, #1
 8002928:	4013      	ands	r3, r2
 800292a:	d005      	beq.n	8002938 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	b2db      	uxtb	r3, r3
 8002934:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002936:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	0018      	movs	r0, r3
 800293c:	f000 faff 	bl	8002f3e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2241      	movs	r2, #65	; 0x41
 800294a:	5c9b      	ldrb	r3, [r3, r2]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b60      	cmp	r3, #96	; 0x60
 8002950:	d002      	beq.n	8002958 <I2C_ITMasterCplt+0xd0>
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d007      	beq.n	8002968 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	0011      	movs	r1, r2
 8002960:	0018      	movs	r0, r3
 8002962:	f000 f9e1 	bl	8002d28 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002966:	e058      	b.n	8002a1a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2241      	movs	r2, #65	; 0x41
 800296c:	5c9b      	ldrb	r3, [r3, r2]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b21      	cmp	r3, #33	; 0x21
 8002972:	d126      	bne.n	80029c2 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2241      	movs	r2, #65	; 0x41
 8002978:	2120      	movs	r1, #32
 800297a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2242      	movs	r2, #66	; 0x42
 8002986:	5c9b      	ldrb	r3, [r3, r2]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b40      	cmp	r3, #64	; 0x40
 800298c:	d10c      	bne.n	80029a8 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2242      	movs	r2, #66	; 0x42
 8002992:	2100      	movs	r1, #0
 8002994:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2240      	movs	r2, #64	; 0x40
 800299a:	2100      	movs	r1, #0
 800299c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	0018      	movs	r0, r3
 80029a2:	f7ff faed 	bl	8001f80 <HAL_I2C_MemTxCpltCallback>
}
 80029a6:	e038      	b.n	8002a1a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2242      	movs	r2, #66	; 0x42
 80029ac:	2100      	movs	r1, #0
 80029ae:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2240      	movs	r2, #64	; 0x40
 80029b4:	2100      	movs	r1, #0
 80029b6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	0018      	movs	r0, r3
 80029bc:	f7ff fad0 	bl	8001f60 <HAL_I2C_MasterTxCpltCallback>
}
 80029c0:	e02b      	b.n	8002a1a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2241      	movs	r2, #65	; 0x41
 80029c6:	5c9b      	ldrb	r3, [r3, r2]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b22      	cmp	r3, #34	; 0x22
 80029cc:	d125      	bne.n	8002a1a <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2241      	movs	r2, #65	; 0x41
 80029d2:	2120      	movs	r1, #32
 80029d4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2242      	movs	r2, #66	; 0x42
 80029e0:	5c9b      	ldrb	r3, [r3, r2]
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b40      	cmp	r3, #64	; 0x40
 80029e6:	d10c      	bne.n	8002a02 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2242      	movs	r2, #66	; 0x42
 80029ec:	2100      	movs	r1, #0
 80029ee:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2240      	movs	r2, #64	; 0x40
 80029f4:	2100      	movs	r1, #0
 80029f6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f7ff fac8 	bl	8001f90 <HAL_I2C_MemRxCpltCallback>
}
 8002a00:	e00b      	b.n	8002a1a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2242      	movs	r2, #66	; 0x42
 8002a06:	2100      	movs	r1, #0
 8002a08:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2240      	movs	r2, #64	; 0x40
 8002a0e:	2100      	movs	r1, #0
 8002a10:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	0018      	movs	r0, r3
 8002a16:	f7ff faab 	bl	8001f70 <HAL_I2C_MasterRxCpltCallback>
}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b006      	add	sp, #24
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	fe00e800 	.word	0xfe00e800
 8002a28:	ffff0000 	.word	0xffff0000

08002a2c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a42:	200f      	movs	r0, #15
 8002a44:	183b      	adds	r3, r7, r0
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	2141      	movs	r1, #65	; 0x41
 8002a4a:	5c52      	ldrb	r2, [r2, r1]
 8002a4c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2220      	movs	r2, #32
 8002a54:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a56:	183b      	adds	r3, r7, r0
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b21      	cmp	r3, #33	; 0x21
 8002a5c:	d003      	beq.n	8002a66 <I2C_ITSlaveCplt+0x3a>
 8002a5e:	183b      	adds	r3, r7, r0
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b29      	cmp	r3, #41	; 0x29
 8002a64:	d109      	bne.n	8002a7a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002a66:	4a7d      	ldr	r2, [pc, #500]	; (8002c5c <I2C_ITSlaveCplt+0x230>)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	0011      	movs	r1, r2
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f000 fb45 	bl	80030fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2221      	movs	r2, #33	; 0x21
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
 8002a78:	e011      	b.n	8002a9e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a7a:	220f      	movs	r2, #15
 8002a7c:	18bb      	adds	r3, r7, r2
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b22      	cmp	r3, #34	; 0x22
 8002a82:	d003      	beq.n	8002a8c <I2C_ITSlaveCplt+0x60>
 8002a84:	18bb      	adds	r3, r7, r2
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b2a      	cmp	r3, #42	; 0x2a
 8002a8a:	d108      	bne.n	8002a9e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002a8c:	4a74      	ldr	r2, [pc, #464]	; (8002c60 <I2C_ITSlaveCplt+0x234>)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	0011      	movs	r1, r2
 8002a92:	0018      	movs	r0, r3
 8002a94:	f000 fb32 	bl	80030fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2222      	movs	r2, #34	; 0x22
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	0209      	lsls	r1, r1, #8
 8002aac:	430a      	orrs	r2, r1
 8002aae:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	496a      	ldr	r1, [pc, #424]	; (8002c64 <I2C_ITSlaveCplt+0x238>)
 8002abc:	400a      	ands	r2, r1
 8002abe:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f000 fa3b 	bl	8002f3e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	0b9b      	lsrs	r3, r3, #14
 8002acc:	001a      	movs	r2, r3
 8002ace:	2301      	movs	r3, #1
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d013      	beq.n	8002afc <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4962      	ldr	r1, [pc, #392]	; (8002c68 <I2C_ITSlaveCplt+0x23c>)
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d020      	beq.n	8002b2e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002afa:	e018      	b.n	8002b2e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	0bdb      	lsrs	r3, r3, #15
 8002b00:	001a      	movs	r2, r3
 8002b02:	2301      	movs	r3, #1
 8002b04:	4013      	ands	r3, r2
 8002b06:	d012      	beq.n	8002b2e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4956      	ldr	r1, [pc, #344]	; (8002c6c <I2C_ITSlaveCplt+0x240>)
 8002b14:	400a      	ands	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d006      	beq.n	8002b2e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	001a      	movs	r2, r3
 8002b34:	2301      	movs	r3, #1
 8002b36:	4013      	ands	r3, r2
 8002b38:	d020      	beq.n	8002b7c <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	4393      	bics	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00c      	beq.n	8002b7c <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d005      	beq.n	8002b92 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2242      	movs	r2, #66	; 0x42
 8002b96:	2100      	movs	r1, #0
 8002b98:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	0011      	movs	r1, r2
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f000 f8b9 	bl	8002d28 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2241      	movs	r2, #65	; 0x41
 8002bba:	5c9b      	ldrb	r3, [r3, r2]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b28      	cmp	r3, #40	; 0x28
 8002bc0:	d147      	bne.n	8002c52 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	0011      	movs	r1, r2
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f000 f853 	bl	8002c74 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002bce:	e040      	b.n	8002c52 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	4a26      	ldr	r2, [pc, #152]	; (8002c70 <I2C_ITSlaveCplt+0x244>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d016      	beq.n	8002c08 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7ff fded 	bl	80027bc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <I2C_ITSlaveCplt+0x244>)
 8002be6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2241      	movs	r2, #65	; 0x41
 8002bec:	2120      	movs	r1, #32
 8002bee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2240      	movs	r2, #64	; 0x40
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	0018      	movs	r0, r3
 8002c02:	f7fd febb 	bl	800097c <HAL_I2C_ListenCpltCallback>
}
 8002c06:	e024      	b.n	8002c52 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2241      	movs	r2, #65	; 0x41
 8002c0c:	5c9b      	ldrb	r3, [r3, r2]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b22      	cmp	r3, #34	; 0x22
 8002c12:	d10f      	bne.n	8002c34 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2241      	movs	r2, #65	; 0x41
 8002c18:	2120      	movs	r1, #32
 8002c1a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2240      	movs	r2, #64	; 0x40
 8002c26:	2100      	movs	r1, #0
 8002c28:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f7fd fe49 	bl	80008c4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002c32:	e00e      	b.n	8002c52 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2241      	movs	r2, #65	; 0x41
 8002c38:	2120      	movs	r1, #32
 8002c3a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2240      	movs	r2, #64	; 0x40
 8002c46:	2100      	movs	r1, #0
 8002c48:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7fd fe2b 	bl	80008a8 <HAL_I2C_SlaveTxCpltCallback>
}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b006      	add	sp, #24
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	00008001 	.word	0x00008001
 8002c60:	00008002 	.word	0x00008002
 8002c64:	fe00e800 	.word	0xfe00e800
 8002c68:	ffffbfff 	.word	0xffffbfff
 8002c6c:	ffff7fff 	.word	0xffff7fff
 8002c70:	ffff0000 	.word	0xffff0000

08002c74 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a27      	ldr	r2, [pc, #156]	; (8002d20 <I2C_ITListenCplt+0xac>)
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2241      	movs	r2, #65	; 0x41
 8002c8e:	2120      	movs	r1, #32
 8002c90:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2242      	movs	r2, #66	; 0x42
 8002c96:	2100      	movs	r1, #0
 8002c98:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	089b      	lsrs	r3, r3, #2
 8002ca4:	001a      	movs	r2, r3
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d022      	beq.n	8002cf2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d012      	beq.n	8002cf2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	2204      	movs	r2, #4
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002cf2:	4a0c      	ldr	r2, [pc, #48]	; (8002d24 <I2C_ITListenCplt+0xb0>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	0011      	movs	r1, r2
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 f9ff 	bl	80030fc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2210      	movs	r2, #16
 8002d04:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2240      	movs	r2, #64	; 0x40
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7fd fe33 	bl	800097c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b002      	add	sp, #8
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	ffff0000 	.word	0xffff0000
 8002d24:	00008003 	.word	0x00008003

08002d28 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002d32:	200f      	movs	r0, #15
 8002d34:	183b      	adds	r3, r7, r0
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	2141      	movs	r1, #65	; 0x41
 8002d3a:	5c52      	ldrb	r2, [r2, r1]
 8002d3c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2242      	movs	r2, #66	; 0x42
 8002d42:	2100      	movs	r1, #0
 8002d44:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a62      	ldr	r2, [pc, #392]	; (8002ed4 <I2C_ITError+0x1ac>)
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002d5e:	183b      	adds	r3, r7, r0
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b28      	cmp	r3, #40	; 0x28
 8002d64:	d007      	beq.n	8002d76 <I2C_ITError+0x4e>
 8002d66:	183b      	adds	r3, r7, r0
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b29      	cmp	r3, #41	; 0x29
 8002d6c:	d003      	beq.n	8002d76 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002d6e:	183b      	adds	r3, r7, r0
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b2a      	cmp	r3, #42	; 0x2a
 8002d74:	d10c      	bne.n	8002d90 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2103      	movs	r1, #3
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 f9be 	bl	80030fc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2241      	movs	r2, #65	; 0x41
 8002d84:	2128      	movs	r1, #40	; 0x28
 8002d86:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a53      	ldr	r2, [pc, #332]	; (8002ed8 <I2C_ITError+0x1b0>)
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d8e:	e012      	b.n	8002db6 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d90:	4a52      	ldr	r2, [pc, #328]	; (8002edc <I2C_ITError+0x1b4>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	0011      	movs	r1, r2
 8002d96:	0018      	movs	r0, r3
 8002d98:	f000 f9b0 	bl	80030fc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2241      	movs	r2, #65	; 0x41
 8002da0:	5c9b      	ldrb	r3, [r3, r2]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b60      	cmp	r3, #96	; 0x60
 8002da6:	d003      	beq.n	8002db0 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2241      	movs	r2, #65	; 0x41
 8002dac:	2120      	movs	r1, #32
 8002dae:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d03b      	beq.n	8002e3c <I2C_ITError+0x114>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b11      	cmp	r3, #17
 8002dc8:	d002      	beq.n	8002dd0 <I2C_ITError+0xa8>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b21      	cmp	r3, #33	; 0x21
 8002dce:	d135      	bne.n	8002e3c <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	01db      	lsls	r3, r3, #7
 8002dda:	401a      	ands	r2, r3
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	01db      	lsls	r3, r3, #7
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d107      	bne.n	8002df4 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	493c      	ldr	r1, [pc, #240]	; (8002ee0 <I2C_ITError+0x1b8>)
 8002df0:	400a      	ands	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7fe fc88 	bl	800170e <HAL_DMA_GetState>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d016      	beq.n	8002e32 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	4a36      	ldr	r2, [pc, #216]	; (8002ee4 <I2C_ITError+0x1bc>)
 8002e0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2240      	movs	r2, #64	; 0x40
 8002e10:	2100      	movs	r1, #0
 8002e12:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f7fe fc33 	bl	8001684 <HAL_DMA_Abort_IT>
 8002e1e:	1e03      	subs	r3, r0, #0
 8002e20:	d051      	beq.n	8002ec6 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e30:	e049      	b.n	8002ec6 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 f859 	bl	8002eec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e3a:	e044      	b.n	8002ec6 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d03b      	beq.n	8002ebc <I2C_ITError+0x194>
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b12      	cmp	r3, #18
 8002e48:	d002      	beq.n	8002e50 <I2C_ITError+0x128>
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b22      	cmp	r3, #34	; 0x22
 8002e4e:	d135      	bne.n	8002ebc <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d107      	bne.n	8002e74 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	491e      	ldr	r1, [pc, #120]	; (8002ee8 <I2C_ITError+0x1c0>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7fe fc48 	bl	800170e <HAL_DMA_GetState>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d016      	beq.n	8002eb2 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e88:	4a16      	ldr	r2, [pc, #88]	; (8002ee4 <I2C_ITError+0x1bc>)
 8002e8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2240      	movs	r2, #64	; 0x40
 8002e90:	2100      	movs	r1, #0
 8002e92:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7fe fbf3 	bl	8001684 <HAL_DMA_Abort_IT>
 8002e9e:	1e03      	subs	r3, r0, #0
 8002ea0:	d013      	beq.n	8002eca <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eac:	0018      	movs	r0, r3
 8002eae:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002eb0:	e00b      	b.n	8002eca <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f000 f819 	bl	8002eec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002eba:	e006      	b.n	8002eca <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f000 f814 	bl	8002eec <I2C_TreatErrorCallback>
  }
}
 8002ec4:	e002      	b.n	8002ecc <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	e000      	b.n	8002ecc <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002eca:	46c0      	nop			; (mov r8, r8)
}
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b004      	add	sp, #16
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	ffff0000 	.word	0xffff0000
 8002ed8:	08001fc5 	.word	0x08001fc5
 8002edc:	00008003 	.word	0x00008003
 8002ee0:	ffffbfff 	.word	0xffffbfff
 8002ee4:	08002f83 	.word	0x08002f83
 8002ee8:	ffff7fff 	.word	0xffff7fff

08002eec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2241      	movs	r2, #65	; 0x41
 8002ef8:	5c9b      	ldrb	r3, [r3, r2]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b60      	cmp	r3, #96	; 0x60
 8002efe:	d10f      	bne.n	8002f20 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2241      	movs	r2, #65	; 0x41
 8002f04:	2120      	movs	r1, #32
 8002f06:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2240      	movs	r2, #64	; 0x40
 8002f12:	2100      	movs	r1, #0
 8002f14:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f7ff f841 	bl	8001fa0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f1e:	e00a      	b.n	8002f36 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2240      	movs	r2, #64	; 0x40
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	0018      	movs	r0, r3
 8002f32:	f7fd fd2b 	bl	800098c <HAL_I2C_ErrorCallback>
}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b002      	add	sp, #8
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d103      	bne.n	8002f5c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2201      	movs	r2, #1
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d007      	beq.n	8002f7a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699a      	ldr	r2, [r3, #24]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2101      	movs	r1, #1
 8002f76:	430a      	orrs	r2, r1
 8002f78:	619a      	str	r2, [r3, #24]
  }
}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b002      	add	sp, #8
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fac:	2200      	movs	r2, #0
 8002fae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f7ff ff9a 	bl	8002eec <I2C_TreatErrorCallback>
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b004      	add	sp, #16
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	0008      	movs	r0, r1
 8002fca:	0011      	movs	r1, r2
 8002fcc:	607b      	str	r3, [r7, #4]
 8002fce:	240a      	movs	r4, #10
 8002fd0:	193b      	adds	r3, r7, r4
 8002fd2:	1c02      	adds	r2, r0, #0
 8002fd4:	801a      	strh	r2, [r3, #0]
 8002fd6:	2009      	movs	r0, #9
 8002fd8:	183b      	adds	r3, r7, r0
 8002fda:	1c0a      	adds	r2, r1, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	6a3a      	ldr	r2, [r7, #32]
 8002fe6:	0d51      	lsrs	r1, r2, #21
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	00d2      	lsls	r2, r2, #3
 8002fec:	400a      	ands	r2, r1
 8002fee:	490e      	ldr	r1, [pc, #56]	; (8003028 <I2C_TransferConfig+0x68>)
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	43d2      	mvns	r2, r2
 8002ff4:	401a      	ands	r2, r3
 8002ff6:	0011      	movs	r1, r2
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	059b      	lsls	r3, r3, #22
 8002ffe:	0d9a      	lsrs	r2, r3, #22
 8003000:	183b      	adds	r3, r7, r0
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	0418      	lsls	r0, r3, #16
 8003006:	23ff      	movs	r3, #255	; 0xff
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	4003      	ands	r3, r0
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	431a      	orrs	r2, r3
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	431a      	orrs	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	46bd      	mov	sp, r7
 8003022:	b005      	add	sp, #20
 8003024:	bd90      	pop	{r4, r7, pc}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	03ff63ff 	.word	0x03ff63ff

0800302c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	000a      	movs	r2, r1
 8003036:	1cbb      	adds	r3, r7, #2
 8003038:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003042:	4b2c      	ldr	r3, [pc, #176]	; (80030f4 <I2C_Enable_IRQ+0xc8>)
 8003044:	429a      	cmp	r2, r3
 8003046:	d004      	beq.n	8003052 <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800304c:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <I2C_Enable_IRQ+0xcc>)
 800304e:	429a      	cmp	r2, r3
 8003050:	d121      	bne.n	8003096 <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003052:	1cbb      	adds	r3, r7, #2
 8003054:	2200      	movs	r2, #0
 8003056:	5e9b      	ldrsh	r3, [r3, r2]
 8003058:	2b00      	cmp	r3, #0
 800305a:	da03      	bge.n	8003064 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	22b8      	movs	r2, #184	; 0xb8
 8003060:	4313      	orrs	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003064:	1cbb      	adds	r3, r7, #2
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	2b10      	cmp	r3, #16
 800306a:	d103      	bne.n	8003074 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2290      	movs	r2, #144	; 0x90
 8003070:	4313      	orrs	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003074:	1cbb      	adds	r3, r7, #2
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	2b20      	cmp	r3, #32
 800307a:	d103      	bne.n	8003084 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2260      	movs	r2, #96	; 0x60
 8003080:	4313      	orrs	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003084:	1cbb      	adds	r3, r7, #2
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	2b40      	cmp	r3, #64	; 0x40
 800308a:	d127      	bne.n	80030dc <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2240      	movs	r2, #64	; 0x40
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003094:	e022      	b.n	80030dc <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003096:	1cbb      	adds	r3, r7, #2
 8003098:	2200      	movs	r2, #0
 800309a:	5e9b      	ldrsh	r3, [r3, r2]
 800309c:	2b00      	cmp	r3, #0
 800309e:	da03      	bge.n	80030a8 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	22b8      	movs	r2, #184	; 0xb8
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80030a8:	1cbb      	adds	r3, r7, #2
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	2201      	movs	r2, #1
 80030ae:	4013      	ands	r3, r2
 80030b0:	d003      	beq.n	80030ba <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	22f2      	movs	r2, #242	; 0xf2
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80030ba:	1cbb      	adds	r3, r7, #2
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	2202      	movs	r2, #2
 80030c0:	4013      	ands	r3, r2
 80030c2:	d003      	beq.n	80030cc <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	22f4      	movs	r2, #244	; 0xf4
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80030cc:	1cbb      	adds	r3, r7, #2
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d103      	bne.n	80030dc <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6819      	ldr	r1, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b004      	add	sp, #16
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	080021ed 	.word	0x080021ed
 80030f8:	08002405 	.word	0x08002405

080030fc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	000a      	movs	r2, r1
 8003106:	1cbb      	adds	r3, r7, #2
 8003108:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800310e:	1cbb      	adds	r3, r7, #2
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	2201      	movs	r2, #1
 8003114:	4013      	ands	r3, r2
 8003116:	d010      	beq.n	800313a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2242      	movs	r2, #66	; 0x42
 800311c:	4313      	orrs	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2241      	movs	r2, #65	; 0x41
 8003124:	5c9b      	ldrb	r3, [r3, r2]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	001a      	movs	r2, r3
 800312a:	2328      	movs	r3, #40	; 0x28
 800312c:	4013      	ands	r3, r2
 800312e:	2b28      	cmp	r3, #40	; 0x28
 8003130:	d003      	beq.n	800313a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	22b0      	movs	r2, #176	; 0xb0
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800313a:	1cbb      	adds	r3, r7, #2
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	2202      	movs	r2, #2
 8003140:	4013      	ands	r3, r2
 8003142:	d010      	beq.n	8003166 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2244      	movs	r2, #68	; 0x44
 8003148:	4313      	orrs	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2241      	movs	r2, #65	; 0x41
 8003150:	5c9b      	ldrb	r3, [r3, r2]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	001a      	movs	r2, r3
 8003156:	2328      	movs	r3, #40	; 0x28
 8003158:	4013      	ands	r3, r2
 800315a:	2b28      	cmp	r3, #40	; 0x28
 800315c:	d003      	beq.n	8003166 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	22b0      	movs	r2, #176	; 0xb0
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003166:	1cbb      	adds	r3, r7, #2
 8003168:	2200      	movs	r2, #0
 800316a:	5e9b      	ldrsh	r3, [r3, r2]
 800316c:	2b00      	cmp	r3, #0
 800316e:	da03      	bge.n	8003178 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	22b8      	movs	r2, #184	; 0xb8
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003178:	1cbb      	adds	r3, r7, #2
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	2b10      	cmp	r3, #16
 800317e:	d103      	bne.n	8003188 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2290      	movs	r2, #144	; 0x90
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003188:	1cbb      	adds	r3, r7, #2
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	2b20      	cmp	r3, #32
 800318e:	d103      	bne.n	8003198 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	4313      	orrs	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003198:	1cbb      	adds	r3, r7, #2
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d103      	bne.n	80031a8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2240      	movs	r2, #64	; 0x40
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	43d9      	mvns	r1, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	400a      	ands	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]
}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	46bd      	mov	sp, r7
 80031be:	b004      	add	sp, #16
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2241      	movs	r2, #65	; 0x41
 80031d2:	5c9b      	ldrb	r3, [r3, r2]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	d138      	bne.n	800324c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2240      	movs	r2, #64	; 0x40
 80031de:	5c9b      	ldrb	r3, [r3, r2]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e032      	b.n	800324e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2240      	movs	r2, #64	; 0x40
 80031ec:	2101      	movs	r1, #1
 80031ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2241      	movs	r2, #65	; 0x41
 80031f4:	2124      	movs	r1, #36	; 0x24
 80031f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2101      	movs	r1, #1
 8003204:	438a      	bics	r2, r1
 8003206:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4911      	ldr	r1, [pc, #68]	; (8003258 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003214:	400a      	ands	r2, r1
 8003216:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6819      	ldr	r1, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2101      	movs	r1, #1
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2241      	movs	r2, #65	; 0x41
 800323c:	2120      	movs	r1, #32
 800323e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2240      	movs	r2, #64	; 0x40
 8003244:	2100      	movs	r1, #0
 8003246:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e000      	b.n	800324e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800324c:	2302      	movs	r3, #2
  }
}
 800324e:	0018      	movs	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	b002      	add	sp, #8
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	ffffefff 	.word	0xffffefff

0800325c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2241      	movs	r2, #65	; 0x41
 800326a:	5c9b      	ldrb	r3, [r3, r2]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b20      	cmp	r3, #32
 8003270:	d139      	bne.n	80032e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2240      	movs	r2, #64	; 0x40
 8003276:	5c9b      	ldrb	r3, [r3, r2]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800327c:	2302      	movs	r3, #2
 800327e:	e033      	b.n	80032e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2240      	movs	r2, #64	; 0x40
 8003284:	2101      	movs	r1, #1
 8003286:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2241      	movs	r2, #65	; 0x41
 800328c:	2124      	movs	r1, #36	; 0x24
 800328e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2101      	movs	r1, #1
 800329c:	438a      	bics	r2, r1
 800329e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4a11      	ldr	r2, [pc, #68]	; (80032f0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2101      	movs	r1, #1
 80032ce:	430a      	orrs	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2241      	movs	r2, #65	; 0x41
 80032d6:	2120      	movs	r1, #32
 80032d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2240      	movs	r2, #64	; 0x40
 80032de:	2100      	movs	r1, #0
 80032e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e000      	b.n	80032e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032e6:	2302      	movs	r3, #2
  }
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b004      	add	sp, #16
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	fffff0ff 	.word	0xfffff0ff

080032f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e301      	b.n	800390a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2201      	movs	r2, #1
 800330c:	4013      	ands	r3, r2
 800330e:	d100      	bne.n	8003312 <HAL_RCC_OscConfig+0x1e>
 8003310:	e08d      	b.n	800342e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003312:	4bc3      	ldr	r3, [pc, #780]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	220c      	movs	r2, #12
 8003318:	4013      	ands	r3, r2
 800331a:	2b04      	cmp	r3, #4
 800331c:	d00e      	beq.n	800333c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800331e:	4bc0      	ldr	r3, [pc, #768]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	220c      	movs	r2, #12
 8003324:	4013      	ands	r3, r2
 8003326:	2b08      	cmp	r3, #8
 8003328:	d116      	bne.n	8003358 <HAL_RCC_OscConfig+0x64>
 800332a:	4bbd      	ldr	r3, [pc, #756]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	025b      	lsls	r3, r3, #9
 8003332:	401a      	ands	r2, r3
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	025b      	lsls	r3, r3, #9
 8003338:	429a      	cmp	r2, r3
 800333a:	d10d      	bne.n	8003358 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	4bb8      	ldr	r3, [pc, #736]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	029b      	lsls	r3, r3, #10
 8003344:	4013      	ands	r3, r2
 8003346:	d100      	bne.n	800334a <HAL_RCC_OscConfig+0x56>
 8003348:	e070      	b.n	800342c <HAL_RCC_OscConfig+0x138>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d000      	beq.n	8003354 <HAL_RCC_OscConfig+0x60>
 8003352:	e06b      	b.n	800342c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e2d8      	b.n	800390a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d107      	bne.n	8003370 <HAL_RCC_OscConfig+0x7c>
 8003360:	4baf      	ldr	r3, [pc, #700]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4bae      	ldr	r3, [pc, #696]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003366:	2180      	movs	r1, #128	; 0x80
 8003368:	0249      	lsls	r1, r1, #9
 800336a:	430a      	orrs	r2, r1
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e02f      	b.n	80033d0 <HAL_RCC_OscConfig+0xdc>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10c      	bne.n	8003392 <HAL_RCC_OscConfig+0x9e>
 8003378:	4ba9      	ldr	r3, [pc, #676]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4ba8      	ldr	r3, [pc, #672]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 800337e:	49a9      	ldr	r1, [pc, #676]	; (8003624 <HAL_RCC_OscConfig+0x330>)
 8003380:	400a      	ands	r2, r1
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	4ba6      	ldr	r3, [pc, #664]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4ba5      	ldr	r3, [pc, #660]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 800338a:	49a7      	ldr	r1, [pc, #668]	; (8003628 <HAL_RCC_OscConfig+0x334>)
 800338c:	400a      	ands	r2, r1
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	e01e      	b.n	80033d0 <HAL_RCC_OscConfig+0xdc>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b05      	cmp	r3, #5
 8003398:	d10e      	bne.n	80033b8 <HAL_RCC_OscConfig+0xc4>
 800339a:	4ba1      	ldr	r3, [pc, #644]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4ba0      	ldr	r3, [pc, #640]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 80033a0:	2180      	movs	r1, #128	; 0x80
 80033a2:	02c9      	lsls	r1, r1, #11
 80033a4:	430a      	orrs	r2, r1
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	4b9d      	ldr	r3, [pc, #628]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b9c      	ldr	r3, [pc, #624]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 80033ae:	2180      	movs	r1, #128	; 0x80
 80033b0:	0249      	lsls	r1, r1, #9
 80033b2:	430a      	orrs	r2, r1
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e00b      	b.n	80033d0 <HAL_RCC_OscConfig+0xdc>
 80033b8:	4b99      	ldr	r3, [pc, #612]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b98      	ldr	r3, [pc, #608]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 80033be:	4999      	ldr	r1, [pc, #612]	; (8003624 <HAL_RCC_OscConfig+0x330>)
 80033c0:	400a      	ands	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	4b96      	ldr	r3, [pc, #600]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b95      	ldr	r3, [pc, #596]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 80033ca:	4997      	ldr	r1, [pc, #604]	; (8003628 <HAL_RCC_OscConfig+0x334>)
 80033cc:	400a      	ands	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d014      	beq.n	8003402 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fd fdfa 	bl	8000fd0 <HAL_GetTick>
 80033dc:	0003      	movs	r3, r0
 80033de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e2:	f7fd fdf5 	bl	8000fd0 <HAL_GetTick>
 80033e6:	0002      	movs	r2, r0
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b64      	cmp	r3, #100	; 0x64
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e28a      	b.n	800390a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f4:	4b8a      	ldr	r3, [pc, #552]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	029b      	lsls	r3, r3, #10
 80033fc:	4013      	ands	r3, r2
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0xee>
 8003400:	e015      	b.n	800342e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7fd fde5 	bl	8000fd0 <HAL_GetTick>
 8003406:	0003      	movs	r3, r0
 8003408:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800340c:	f7fd fde0 	bl	8000fd0 <HAL_GetTick>
 8003410:	0002      	movs	r2, r0
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e275      	b.n	800390a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341e:	4b80      	ldr	r3, [pc, #512]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	2380      	movs	r3, #128	; 0x80
 8003424:	029b      	lsls	r3, r3, #10
 8003426:	4013      	ands	r3, r2
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x118>
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2202      	movs	r2, #2
 8003434:	4013      	ands	r3, r2
 8003436:	d100      	bne.n	800343a <HAL_RCC_OscConfig+0x146>
 8003438:	e069      	b.n	800350e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800343a:	4b79      	ldr	r3, [pc, #484]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	220c      	movs	r2, #12
 8003440:	4013      	ands	r3, r2
 8003442:	d00b      	beq.n	800345c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003444:	4b76      	ldr	r3, [pc, #472]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	220c      	movs	r2, #12
 800344a:	4013      	ands	r3, r2
 800344c:	2b08      	cmp	r3, #8
 800344e:	d11c      	bne.n	800348a <HAL_RCC_OscConfig+0x196>
 8003450:	4b73      	ldr	r3, [pc, #460]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	025b      	lsls	r3, r3, #9
 8003458:	4013      	ands	r3, r2
 800345a:	d116      	bne.n	800348a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345c:	4b70      	ldr	r3, [pc, #448]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2202      	movs	r2, #2
 8003462:	4013      	ands	r3, r2
 8003464:	d005      	beq.n	8003472 <HAL_RCC_OscConfig+0x17e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d001      	beq.n	8003472 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e24b      	b.n	800390a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003472:	4b6b      	ldr	r3, [pc, #428]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	22f8      	movs	r2, #248	; 0xf8
 8003478:	4393      	bics	r3, r2
 800347a:	0019      	movs	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	00da      	lsls	r2, r3, #3
 8003482:	4b67      	ldr	r3, [pc, #412]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003484:	430a      	orrs	r2, r1
 8003486:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003488:	e041      	b.n	800350e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d024      	beq.n	80034dc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003492:	4b63      	ldr	r3, [pc, #396]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4b62      	ldr	r3, [pc, #392]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003498:	2101      	movs	r1, #1
 800349a:	430a      	orrs	r2, r1
 800349c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7fd fd97 	bl	8000fd0 <HAL_GetTick>
 80034a2:	0003      	movs	r3, r0
 80034a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a8:	f7fd fd92 	bl	8000fd0 <HAL_GetTick>
 80034ac:	0002      	movs	r2, r0
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e227      	b.n	800390a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ba:	4b59      	ldr	r3, [pc, #356]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2202      	movs	r2, #2
 80034c0:	4013      	ands	r3, r2
 80034c2:	d0f1      	beq.n	80034a8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c4:	4b56      	ldr	r3, [pc, #344]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	22f8      	movs	r2, #248	; 0xf8
 80034ca:	4393      	bics	r3, r2
 80034cc:	0019      	movs	r1, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	00da      	lsls	r2, r3, #3
 80034d4:	4b52      	ldr	r3, [pc, #328]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 80034d6:	430a      	orrs	r2, r1
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e018      	b.n	800350e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034dc:	4b50      	ldr	r3, [pc, #320]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4b4f      	ldr	r3, [pc, #316]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 80034e2:	2101      	movs	r1, #1
 80034e4:	438a      	bics	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fd fd72 	bl	8000fd0 <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f2:	f7fd fd6d 	bl	8000fd0 <HAL_GetTick>
 80034f6:	0002      	movs	r2, r0
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e202      	b.n	800390a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003504:	4b46      	ldr	r3, [pc, #280]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2202      	movs	r2, #2
 800350a:	4013      	ands	r3, r2
 800350c:	d1f1      	bne.n	80034f2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2208      	movs	r2, #8
 8003514:	4013      	ands	r3, r2
 8003516:	d036      	beq.n	8003586 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d019      	beq.n	8003554 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003520:	4b3f      	ldr	r3, [pc, #252]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003524:	4b3e      	ldr	r3, [pc, #248]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003526:	2101      	movs	r1, #1
 8003528:	430a      	orrs	r2, r1
 800352a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352c:	f7fd fd50 	bl	8000fd0 <HAL_GetTick>
 8003530:	0003      	movs	r3, r0
 8003532:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003536:	f7fd fd4b 	bl	8000fd0 <HAL_GetTick>
 800353a:	0002      	movs	r2, r0
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e1e0      	b.n	800390a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003548:	4b35      	ldr	r3, [pc, #212]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	2202      	movs	r2, #2
 800354e:	4013      	ands	r3, r2
 8003550:	d0f1      	beq.n	8003536 <HAL_RCC_OscConfig+0x242>
 8003552:	e018      	b.n	8003586 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003554:	4b32      	ldr	r3, [pc, #200]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003558:	4b31      	ldr	r3, [pc, #196]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 800355a:	2101      	movs	r1, #1
 800355c:	438a      	bics	r2, r1
 800355e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003560:	f7fd fd36 	bl	8000fd0 <HAL_GetTick>
 8003564:	0003      	movs	r3, r0
 8003566:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800356a:	f7fd fd31 	bl	8000fd0 <HAL_GetTick>
 800356e:	0002      	movs	r2, r0
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e1c6      	b.n	800390a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800357c:	4b28      	ldr	r3, [pc, #160]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	2202      	movs	r2, #2
 8003582:	4013      	ands	r3, r2
 8003584:	d1f1      	bne.n	800356a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2204      	movs	r2, #4
 800358c:	4013      	ands	r3, r2
 800358e:	d100      	bne.n	8003592 <HAL_RCC_OscConfig+0x29e>
 8003590:	e0b4      	b.n	80036fc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003592:	201f      	movs	r0, #31
 8003594:	183b      	adds	r3, r7, r0
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800359a:	4b21      	ldr	r3, [pc, #132]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 800359c:	69da      	ldr	r2, [r3, #28]
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	055b      	lsls	r3, r3, #21
 80035a2:	4013      	ands	r3, r2
 80035a4:	d110      	bne.n	80035c8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 80035a8:	69da      	ldr	r2, [r3, #28]
 80035aa:	4b1d      	ldr	r3, [pc, #116]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 80035ac:	2180      	movs	r1, #128	; 0x80
 80035ae:	0549      	lsls	r1, r1, #21
 80035b0:	430a      	orrs	r2, r1
 80035b2:	61da      	str	r2, [r3, #28]
 80035b4:	4b1a      	ldr	r3, [pc, #104]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	055b      	lsls	r3, r3, #21
 80035bc:	4013      	ands	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035c2:	183b      	adds	r3, r7, r0
 80035c4:	2201      	movs	r2, #1
 80035c6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	4b18      	ldr	r3, [pc, #96]	; (800362c <HAL_RCC_OscConfig+0x338>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4013      	ands	r3, r2
 80035d2:	d11a      	bne.n	800360a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035d4:	4b15      	ldr	r3, [pc, #84]	; (800362c <HAL_RCC_OscConfig+0x338>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	4b14      	ldr	r3, [pc, #80]	; (800362c <HAL_RCC_OscConfig+0x338>)
 80035da:	2180      	movs	r1, #128	; 0x80
 80035dc:	0049      	lsls	r1, r1, #1
 80035de:	430a      	orrs	r2, r1
 80035e0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e2:	f7fd fcf5 	bl	8000fd0 <HAL_GetTick>
 80035e6:	0003      	movs	r3, r0
 80035e8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ec:	f7fd fcf0 	bl	8000fd0 <HAL_GetTick>
 80035f0:	0002      	movs	r2, r0
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e185      	b.n	800390a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_RCC_OscConfig+0x338>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	2380      	movs	r3, #128	; 0x80
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4013      	ands	r3, r2
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10e      	bne.n	8003630 <HAL_RCC_OscConfig+0x33c>
 8003612:	4b03      	ldr	r3, [pc, #12]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003614:	6a1a      	ldr	r2, [r3, #32]
 8003616:	4b02      	ldr	r3, [pc, #8]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 8003618:	2101      	movs	r1, #1
 800361a:	430a      	orrs	r2, r1
 800361c:	621a      	str	r2, [r3, #32]
 800361e:	e035      	b.n	800368c <HAL_RCC_OscConfig+0x398>
 8003620:	40021000 	.word	0x40021000
 8003624:	fffeffff 	.word	0xfffeffff
 8003628:	fffbffff 	.word	0xfffbffff
 800362c:	40007000 	.word	0x40007000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10c      	bne.n	8003652 <HAL_RCC_OscConfig+0x35e>
 8003638:	4bb6      	ldr	r3, [pc, #728]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 800363a:	6a1a      	ldr	r2, [r3, #32]
 800363c:	4bb5      	ldr	r3, [pc, #724]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 800363e:	2101      	movs	r1, #1
 8003640:	438a      	bics	r2, r1
 8003642:	621a      	str	r2, [r3, #32]
 8003644:	4bb3      	ldr	r3, [pc, #716]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003646:	6a1a      	ldr	r2, [r3, #32]
 8003648:	4bb2      	ldr	r3, [pc, #712]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 800364a:	2104      	movs	r1, #4
 800364c:	438a      	bics	r2, r1
 800364e:	621a      	str	r2, [r3, #32]
 8003650:	e01c      	b.n	800368c <HAL_RCC_OscConfig+0x398>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b05      	cmp	r3, #5
 8003658:	d10c      	bne.n	8003674 <HAL_RCC_OscConfig+0x380>
 800365a:	4bae      	ldr	r3, [pc, #696]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 800365c:	6a1a      	ldr	r2, [r3, #32]
 800365e:	4bad      	ldr	r3, [pc, #692]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003660:	2104      	movs	r1, #4
 8003662:	430a      	orrs	r2, r1
 8003664:	621a      	str	r2, [r3, #32]
 8003666:	4bab      	ldr	r3, [pc, #684]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003668:	6a1a      	ldr	r2, [r3, #32]
 800366a:	4baa      	ldr	r3, [pc, #680]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 800366c:	2101      	movs	r1, #1
 800366e:	430a      	orrs	r2, r1
 8003670:	621a      	str	r2, [r3, #32]
 8003672:	e00b      	b.n	800368c <HAL_RCC_OscConfig+0x398>
 8003674:	4ba7      	ldr	r3, [pc, #668]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003676:	6a1a      	ldr	r2, [r3, #32]
 8003678:	4ba6      	ldr	r3, [pc, #664]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 800367a:	2101      	movs	r1, #1
 800367c:	438a      	bics	r2, r1
 800367e:	621a      	str	r2, [r3, #32]
 8003680:	4ba4      	ldr	r3, [pc, #656]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003682:	6a1a      	ldr	r2, [r3, #32]
 8003684:	4ba3      	ldr	r3, [pc, #652]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003686:	2104      	movs	r1, #4
 8003688:	438a      	bics	r2, r1
 800368a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d014      	beq.n	80036be <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003694:	f7fd fc9c 	bl	8000fd0 <HAL_GetTick>
 8003698:	0003      	movs	r3, r0
 800369a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	e009      	b.n	80036b2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800369e:	f7fd fc97 	bl	8000fd0 <HAL_GetTick>
 80036a2:	0002      	movs	r2, r0
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	4a9b      	ldr	r2, [pc, #620]	; (8003918 <HAL_RCC_OscConfig+0x624>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e12b      	b.n	800390a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b2:	4b98      	ldr	r3, [pc, #608]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	2202      	movs	r2, #2
 80036b8:	4013      	ands	r3, r2
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x3aa>
 80036bc:	e013      	b.n	80036e6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036be:	f7fd fc87 	bl	8000fd0 <HAL_GetTick>
 80036c2:	0003      	movs	r3, r0
 80036c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c6:	e009      	b.n	80036dc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fd fc82 	bl	8000fd0 <HAL_GetTick>
 80036cc:	0002      	movs	r2, r0
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	4a91      	ldr	r2, [pc, #580]	; (8003918 <HAL_RCC_OscConfig+0x624>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e116      	b.n	800390a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036dc:	4b8d      	ldr	r3, [pc, #564]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	2202      	movs	r2, #2
 80036e2:	4013      	ands	r3, r2
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036e6:	231f      	movs	r3, #31
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d105      	bne.n	80036fc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f0:	4b88      	ldr	r3, [pc, #544]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 80036f2:	69da      	ldr	r2, [r3, #28]
 80036f4:	4b87      	ldr	r3, [pc, #540]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 80036f6:	4989      	ldr	r1, [pc, #548]	; (800391c <HAL_RCC_OscConfig+0x628>)
 80036f8:	400a      	ands	r2, r1
 80036fa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2210      	movs	r2, #16
 8003702:	4013      	ands	r3, r2
 8003704:	d063      	beq.n	80037ce <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d12a      	bne.n	8003764 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800370e:	4b81      	ldr	r3, [pc, #516]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003712:	4b80      	ldr	r3, [pc, #512]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003714:	2104      	movs	r1, #4
 8003716:	430a      	orrs	r2, r1
 8003718:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800371a:	4b7e      	ldr	r3, [pc, #504]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 800371c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800371e:	4b7d      	ldr	r3, [pc, #500]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003720:	2101      	movs	r1, #1
 8003722:	430a      	orrs	r2, r1
 8003724:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003726:	f7fd fc53 	bl	8000fd0 <HAL_GetTick>
 800372a:	0003      	movs	r3, r0
 800372c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003730:	f7fd fc4e 	bl	8000fd0 <HAL_GetTick>
 8003734:	0002      	movs	r2, r0
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e0e3      	b.n	800390a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003742:	4b74      	ldr	r3, [pc, #464]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003746:	2202      	movs	r2, #2
 8003748:	4013      	ands	r3, r2
 800374a:	d0f1      	beq.n	8003730 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800374c:	4b71      	ldr	r3, [pc, #452]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 800374e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003750:	22f8      	movs	r2, #248	; 0xf8
 8003752:	4393      	bics	r3, r2
 8003754:	0019      	movs	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	00da      	lsls	r2, r3, #3
 800375c:	4b6d      	ldr	r3, [pc, #436]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 800375e:	430a      	orrs	r2, r1
 8003760:	635a      	str	r2, [r3, #52]	; 0x34
 8003762:	e034      	b.n	80037ce <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	3305      	adds	r3, #5
 800376a:	d111      	bne.n	8003790 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800376c:	4b69      	ldr	r3, [pc, #420]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 800376e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003770:	4b68      	ldr	r3, [pc, #416]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003772:	2104      	movs	r1, #4
 8003774:	438a      	bics	r2, r1
 8003776:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003778:	4b66      	ldr	r3, [pc, #408]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 800377a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377c:	22f8      	movs	r2, #248	; 0xf8
 800377e:	4393      	bics	r3, r2
 8003780:	0019      	movs	r1, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	00da      	lsls	r2, r3, #3
 8003788:	4b62      	ldr	r3, [pc, #392]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 800378a:	430a      	orrs	r2, r1
 800378c:	635a      	str	r2, [r3, #52]	; 0x34
 800378e:	e01e      	b.n	80037ce <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003790:	4b60      	ldr	r3, [pc, #384]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003794:	4b5f      	ldr	r3, [pc, #380]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003796:	2104      	movs	r1, #4
 8003798:	430a      	orrs	r2, r1
 800379a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800379c:	4b5d      	ldr	r3, [pc, #372]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 800379e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037a0:	4b5c      	ldr	r3, [pc, #368]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 80037a2:	2101      	movs	r1, #1
 80037a4:	438a      	bics	r2, r1
 80037a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a8:	f7fd fc12 	bl	8000fd0 <HAL_GetTick>
 80037ac:	0003      	movs	r3, r0
 80037ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80037b2:	f7fd fc0d 	bl	8000fd0 <HAL_GetTick>
 80037b6:	0002      	movs	r2, r0
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e0a2      	b.n	800390a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80037c4:	4b53      	ldr	r3, [pc, #332]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 80037c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c8:	2202      	movs	r2, #2
 80037ca:	4013      	ands	r3, r2
 80037cc:	d1f1      	bne.n	80037b2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d100      	bne.n	80037d8 <HAL_RCC_OscConfig+0x4e4>
 80037d6:	e097      	b.n	8003908 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037d8:	4b4e      	ldr	r3, [pc, #312]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	220c      	movs	r2, #12
 80037de:	4013      	ands	r3, r2
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d100      	bne.n	80037e6 <HAL_RCC_OscConfig+0x4f2>
 80037e4:	e06b      	b.n	80038be <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d14c      	bne.n	8003888 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ee:	4b49      	ldr	r3, [pc, #292]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4b48      	ldr	r3, [pc, #288]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 80037f4:	494a      	ldr	r1, [pc, #296]	; (8003920 <HAL_RCC_OscConfig+0x62c>)
 80037f6:	400a      	ands	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fa:	f7fd fbe9 	bl	8000fd0 <HAL_GetTick>
 80037fe:	0003      	movs	r3, r0
 8003800:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003804:	f7fd fbe4 	bl	8000fd0 <HAL_GetTick>
 8003808:	0002      	movs	r2, r0
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e079      	b.n	800390a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003816:	4b3f      	ldr	r3, [pc, #252]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	2380      	movs	r3, #128	; 0x80
 800381c:	049b      	lsls	r3, r3, #18
 800381e:	4013      	ands	r3, r2
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003822:	4b3c      	ldr	r3, [pc, #240]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	220f      	movs	r2, #15
 8003828:	4393      	bics	r3, r2
 800382a:	0019      	movs	r1, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003830:	4b38      	ldr	r3, [pc, #224]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003832:	430a      	orrs	r2, r1
 8003834:	62da      	str	r2, [r3, #44]	; 0x2c
 8003836:	4b37      	ldr	r3, [pc, #220]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4a3a      	ldr	r2, [pc, #232]	; (8003924 <HAL_RCC_OscConfig+0x630>)
 800383c:	4013      	ands	r3, r2
 800383e:	0019      	movs	r1, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	431a      	orrs	r2, r3
 800384a:	4b32      	ldr	r3, [pc, #200]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 800384c:	430a      	orrs	r2, r1
 800384e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003850:	4b30      	ldr	r3, [pc, #192]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b2f      	ldr	r3, [pc, #188]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 8003856:	2180      	movs	r1, #128	; 0x80
 8003858:	0449      	lsls	r1, r1, #17
 800385a:	430a      	orrs	r2, r1
 800385c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385e:	f7fd fbb7 	bl	8000fd0 <HAL_GetTick>
 8003862:	0003      	movs	r3, r0
 8003864:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003868:	f7fd fbb2 	bl	8000fd0 <HAL_GetTick>
 800386c:	0002      	movs	r2, r0
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e047      	b.n	800390a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800387a:	4b26      	ldr	r3, [pc, #152]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	2380      	movs	r3, #128	; 0x80
 8003880:	049b      	lsls	r3, r3, #18
 8003882:	4013      	ands	r3, r2
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x574>
 8003886:	e03f      	b.n	8003908 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003888:	4b22      	ldr	r3, [pc, #136]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b21      	ldr	r3, [pc, #132]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 800388e:	4924      	ldr	r1, [pc, #144]	; (8003920 <HAL_RCC_OscConfig+0x62c>)
 8003890:	400a      	ands	r2, r1
 8003892:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7fd fb9c 	bl	8000fd0 <HAL_GetTick>
 8003898:	0003      	movs	r3, r0
 800389a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389e:	f7fd fb97 	bl	8000fd0 <HAL_GetTick>
 80038a2:	0002      	movs	r2, r0
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e02c      	b.n	800390a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b0:	4b18      	ldr	r3, [pc, #96]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	2380      	movs	r3, #128	; 0x80
 80038b6:	049b      	lsls	r3, r3, #18
 80038b8:	4013      	ands	r3, r2
 80038ba:	d1f0      	bne.n	800389e <HAL_RCC_OscConfig+0x5aa>
 80038bc:	e024      	b.n	8003908 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e01f      	b.n	800390a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80038ca:	4b12      	ldr	r3, [pc, #72]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80038d0:	4b10      	ldr	r3, [pc, #64]	; (8003914 <HAL_RCC_OscConfig+0x620>)
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	025b      	lsls	r3, r3, #9
 80038dc:	401a      	ands	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d10e      	bne.n	8003904 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	220f      	movs	r2, #15
 80038ea:	401a      	ands	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d107      	bne.n	8003904 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	23f0      	movs	r3, #240	; 0xf0
 80038f8:	039b      	lsls	r3, r3, #14
 80038fa:	401a      	ands	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003900:	429a      	cmp	r2, r3
 8003902:	d001      	beq.n	8003908 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	0018      	movs	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	b008      	add	sp, #32
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	40021000 	.word	0x40021000
 8003918:	00001388 	.word	0x00001388
 800391c:	efffffff 	.word	0xefffffff
 8003920:	feffffff 	.word	0xfeffffff
 8003924:	ffc2ffff 	.word	0xffc2ffff

08003928 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0b3      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800393c:	4b5b      	ldr	r3, [pc, #364]	; (8003aac <HAL_RCC_ClockConfig+0x184>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2201      	movs	r2, #1
 8003942:	4013      	ands	r3, r2
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d911      	bls.n	800396e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b58      	ldr	r3, [pc, #352]	; (8003aac <HAL_RCC_ClockConfig+0x184>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2201      	movs	r2, #1
 8003950:	4393      	bics	r3, r2
 8003952:	0019      	movs	r1, r3
 8003954:	4b55      	ldr	r3, [pc, #340]	; (8003aac <HAL_RCC_ClockConfig+0x184>)
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395c:	4b53      	ldr	r3, [pc, #332]	; (8003aac <HAL_RCC_ClockConfig+0x184>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2201      	movs	r2, #1
 8003962:	4013      	ands	r3, r2
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d001      	beq.n	800396e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e09a      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2202      	movs	r2, #2
 8003974:	4013      	ands	r3, r2
 8003976:	d015      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2204      	movs	r2, #4
 800397e:	4013      	ands	r3, r2
 8003980:	d006      	beq.n	8003990 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003982:	4b4b      	ldr	r3, [pc, #300]	; (8003ab0 <HAL_RCC_ClockConfig+0x188>)
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <HAL_RCC_ClockConfig+0x188>)
 8003988:	21e0      	movs	r1, #224	; 0xe0
 800398a:	00c9      	lsls	r1, r1, #3
 800398c:	430a      	orrs	r2, r1
 800398e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003990:	4b47      	ldr	r3, [pc, #284]	; (8003ab0 <HAL_RCC_ClockConfig+0x188>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	22f0      	movs	r2, #240	; 0xf0
 8003996:	4393      	bics	r3, r2
 8003998:	0019      	movs	r1, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	4b44      	ldr	r3, [pc, #272]	; (8003ab0 <HAL_RCC_ClockConfig+0x188>)
 80039a0:	430a      	orrs	r2, r1
 80039a2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2201      	movs	r2, #1
 80039aa:	4013      	ands	r3, r2
 80039ac:	d040      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	4b3e      	ldr	r3, [pc, #248]	; (8003ab0 <HAL_RCC_ClockConfig+0x188>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	029b      	lsls	r3, r3, #10
 80039be:	4013      	ands	r3, r2
 80039c0:	d114      	bne.n	80039ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e06e      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ce:	4b38      	ldr	r3, [pc, #224]	; (8003ab0 <HAL_RCC_ClockConfig+0x188>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	049b      	lsls	r3, r3, #18
 80039d6:	4013      	ands	r3, r2
 80039d8:	d108      	bne.n	80039ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e062      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039de:	4b34      	ldr	r3, [pc, #208]	; (8003ab0 <HAL_RCC_ClockConfig+0x188>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2202      	movs	r2, #2
 80039e4:	4013      	ands	r3, r2
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e05b      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ec:	4b30      	ldr	r3, [pc, #192]	; (8003ab0 <HAL_RCC_ClockConfig+0x188>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2203      	movs	r2, #3
 80039f2:	4393      	bics	r3, r2
 80039f4:	0019      	movs	r1, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	4b2d      	ldr	r3, [pc, #180]	; (8003ab0 <HAL_RCC_ClockConfig+0x188>)
 80039fc:	430a      	orrs	r2, r1
 80039fe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a00:	f7fd fae6 	bl	8000fd0 <HAL_GetTick>
 8003a04:	0003      	movs	r3, r0
 8003a06:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a08:	e009      	b.n	8003a1e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a0a:	f7fd fae1 	bl	8000fd0 <HAL_GetTick>
 8003a0e:	0002      	movs	r2, r0
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	4a27      	ldr	r2, [pc, #156]	; (8003ab4 <HAL_RCC_ClockConfig+0x18c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e042      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <HAL_RCC_ClockConfig+0x188>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	220c      	movs	r2, #12
 8003a24:	401a      	ands	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d1ec      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a30:	4b1e      	ldr	r3, [pc, #120]	; (8003aac <HAL_RCC_ClockConfig+0x184>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2201      	movs	r2, #1
 8003a36:	4013      	ands	r3, r2
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d211      	bcs.n	8003a62 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b1b      	ldr	r3, [pc, #108]	; (8003aac <HAL_RCC_ClockConfig+0x184>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2201      	movs	r2, #1
 8003a44:	4393      	bics	r3, r2
 8003a46:	0019      	movs	r1, r3
 8003a48:	4b18      	ldr	r3, [pc, #96]	; (8003aac <HAL_RCC_ClockConfig+0x184>)
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a50:	4b16      	ldr	r3, [pc, #88]	; (8003aac <HAL_RCC_ClockConfig+0x184>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2201      	movs	r2, #1
 8003a56:	4013      	ands	r3, r2
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d001      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e020      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2204      	movs	r2, #4
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d009      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a6c:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <HAL_RCC_ClockConfig+0x188>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4a11      	ldr	r2, [pc, #68]	; (8003ab8 <HAL_RCC_ClockConfig+0x190>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	0019      	movs	r1, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <HAL_RCC_ClockConfig+0x188>)
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a80:	f000 f820 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8003a84:	0001      	movs	r1, r0
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <HAL_RCC_ClockConfig+0x188>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	220f      	movs	r2, #15
 8003a8e:	4013      	ands	r3, r2
 8003a90:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <HAL_RCC_ClockConfig+0x194>)
 8003a92:	5cd3      	ldrb	r3, [r2, r3]
 8003a94:	000a      	movs	r2, r1
 8003a96:	40da      	lsrs	r2, r3
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <HAL_RCC_ClockConfig+0x198>)
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003a9c:	2003      	movs	r0, #3
 8003a9e:	f7fd fa51 	bl	8000f44 <HAL_InitTick>
  
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b004      	add	sp, #16
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40022000 	.word	0x40022000
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	00001388 	.word	0x00001388
 8003ab8:	fffff8ff 	.word	0xfffff8ff
 8003abc:	0800539c 	.word	0x0800539c
 8003ac0:	20000000 	.word	0x20000000

08003ac4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac4:	b590      	push	{r4, r7, lr}
 8003ac6:	b08f      	sub	sp, #60	; 0x3c
 8003ac8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003aca:	2314      	movs	r3, #20
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	4a2b      	ldr	r2, [pc, #172]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ad0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003ad2:	c313      	stmia	r3!, {r0, r1, r4}
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003ad8:	1d3b      	adds	r3, r7, #4
 8003ada:	4a29      	ldr	r2, [pc, #164]	; (8003b80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003adc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003ade:	c313      	stmia	r3!, {r0, r1, r4}
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae8:	2300      	movs	r3, #0
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aec:	2300      	movs	r3, #0
 8003aee:	637b      	str	r3, [r7, #52]	; 0x34
 8003af0:	2300      	movs	r3, #0
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003af8:	4b22      	ldr	r3, [pc, #136]	; (8003b84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b00:	220c      	movs	r2, #12
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d002      	beq.n	8003b0e <HAL_RCC_GetSysClockFreq+0x4a>
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d003      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0x50>
 8003b0c:	e02d      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b0e:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b10:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b12:	e02d      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b16:	0c9b      	lsrs	r3, r3, #18
 8003b18:	220f      	movs	r2, #15
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2214      	movs	r2, #20
 8003b1e:	18ba      	adds	r2, r7, r2
 8003b20:	5cd3      	ldrb	r3, [r2, r3]
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003b24:	4b17      	ldr	r3, [pc, #92]	; (8003b84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	220f      	movs	r2, #15
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	1d3a      	adds	r2, r7, #4
 8003b2e:	5cd3      	ldrb	r3, [r2, r3]
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	025b      	lsls	r3, r3, #9
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b3e:	4812      	ldr	r0, [pc, #72]	; (8003b88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b40:	f7fc fae2 	bl	8000108 <__udivsi3>
 8003b44:	0003      	movs	r3, r0
 8003b46:	001a      	movs	r2, r3
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	4353      	muls	r3, r2
 8003b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b4e:	e009      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b52:	000a      	movs	r2, r1
 8003b54:	0152      	lsls	r2, r2, #5
 8003b56:	1a52      	subs	r2, r2, r1
 8003b58:	0193      	lsls	r3, r2, #6
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	185b      	adds	r3, r3, r1
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b66:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b68:	e002      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b6a:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b6e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003b72:	0018      	movs	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b00f      	add	sp, #60	; 0x3c
 8003b78:	bd90      	pop	{r4, r7, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	0800537c 	.word	0x0800537c
 8003b80:	0800538c 	.word	0x0800538c
 8003b84:	40021000 	.word	0x40021000
 8003b88:	007a1200 	.word	0x007a1200

08003b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b90:	4b02      	ldr	r3, [pc, #8]	; (8003b9c <HAL_RCC_GetHCLKFreq+0x10>)
 8003b92:	681b      	ldr	r3, [r3, #0]
}
 8003b94:	0018      	movs	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	20000000 	.word	0x20000000

08003ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003ba4:	f7ff fff2 	bl	8003b8c <HAL_RCC_GetHCLKFreq>
 8003ba8:	0001      	movs	r1, r0
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	0a1b      	lsrs	r3, r3, #8
 8003bb0:	2207      	movs	r2, #7
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	4a04      	ldr	r2, [pc, #16]	; (8003bc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bb6:	5cd3      	ldrb	r3, [r2, r3]
 8003bb8:	40d9      	lsrs	r1, r3
 8003bba:	000b      	movs	r3, r1
}    
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	080053ac 	.word	0x080053ac

08003bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	025b      	lsls	r3, r3, #9
 8003be4:	4013      	ands	r3, r2
 8003be6:	d100      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003be8:	e08e      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003bea:	2017      	movs	r0, #23
 8003bec:	183b      	adds	r3, r7, r0
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf2:	4b57      	ldr	r3, [pc, #348]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bf4:	69da      	ldr	r2, [r3, #28]
 8003bf6:	2380      	movs	r3, #128	; 0x80
 8003bf8:	055b      	lsls	r3, r3, #21
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d110      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bfe:	4b54      	ldr	r3, [pc, #336]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	4b53      	ldr	r3, [pc, #332]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	0549      	lsls	r1, r1, #21
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	61da      	str	r2, [r3, #28]
 8003c0c:	4b50      	ldr	r3, [pc, #320]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	055b      	lsls	r3, r3, #21
 8003c14:	4013      	ands	r3, r2
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1a:	183b      	adds	r3, r7, r0
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	4b4c      	ldr	r3, [pc, #304]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d11a      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c2c:	4b49      	ldr	r3, [pc, #292]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4b48      	ldr	r3, [pc, #288]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003c32:	2180      	movs	r1, #128	; 0x80
 8003c34:	0049      	lsls	r1, r1, #1
 8003c36:	430a      	orrs	r2, r1
 8003c38:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3a:	f7fd f9c9 	bl	8000fd0 <HAL_GetTick>
 8003c3e:	0003      	movs	r3, r0
 8003c40:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c42:	e008      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c44:	f7fd f9c4 	bl	8000fd0 <HAL_GetTick>
 8003c48:	0002      	movs	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	; 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e077      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c56:	4b3f      	ldr	r3, [pc, #252]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c62:	4b3b      	ldr	r3, [pc, #236]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c64:	6a1a      	ldr	r2, [r3, #32]
 8003c66:	23c0      	movs	r3, #192	; 0xc0
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d034      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	23c0      	movs	r3, #192	; 0xc0
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d02c      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c84:	4b32      	ldr	r3, [pc, #200]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	4a33      	ldr	r2, [pc, #204]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c8e:	4b30      	ldr	r3, [pc, #192]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c90:	6a1a      	ldr	r2, [r3, #32]
 8003c92:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c94:	2180      	movs	r1, #128	; 0x80
 8003c96:	0249      	lsls	r1, r1, #9
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c9c:	4b2c      	ldr	r3, [pc, #176]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003c9e:	6a1a      	ldr	r2, [r3, #32]
 8003ca0:	4b2b      	ldr	r3, [pc, #172]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ca2:	492e      	ldr	r1, [pc, #184]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ca8:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fd f98b 	bl	8000fd0 <HAL_GetTick>
 8003cba:	0003      	movs	r3, r0
 8003cbc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbe:	e009      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fd f986 	bl	8000fd0 <HAL_GetTick>
 8003cc4:	0002      	movs	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	4a25      	ldr	r2, [pc, #148]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e038      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd4:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cde:	4b1c      	ldr	r3, [pc, #112]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	4a1d      	ldr	r2, [pc, #116]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	4b18      	ldr	r3, [pc, #96]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cf2:	2317      	movs	r3, #23
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d105      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cfc:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d02:	4918      	ldr	r1, [pc, #96]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003d04:	400a      	ands	r2, r1
 8003d06:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d009      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d12:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	2203      	movs	r2, #3
 8003d18:	4393      	bics	r3, r2
 8003d1a:	0019      	movs	r1, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d22:	430a      	orrs	r2, r1
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d009      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d30:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d34:	2210      	movs	r2, #16
 8003d36:	4393      	bics	r3, r2
 8003d38:	0019      	movs	r1, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003d40:	430a      	orrs	r2, r1
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	0018      	movs	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b006      	add	sp, #24
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40007000 	.word	0x40007000
 8003d58:	fffffcff 	.word	0xfffffcff
 8003d5c:	fffeffff 	.word	0xfffeffff
 8003d60:	00001388 	.word	0x00001388
 8003d64:	efffffff 	.word	0xefffffff

08003d68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e0a8      	b.n	8003ecc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	2382      	movs	r3, #130	; 0x82
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d009      	beq.n	8003da2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	61da      	str	r2, [r3, #28]
 8003d94:	e005      	b.n	8003da2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	225d      	movs	r2, #93	; 0x5d
 8003dac:	5c9b      	ldrb	r3, [r3, r2]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d107      	bne.n	8003dc4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	225c      	movs	r2, #92	; 0x5c
 8003db8:	2100      	movs	r1, #0
 8003dba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f7fc fed8 	bl	8000b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	225d      	movs	r2, #93	; 0x5d
 8003dc8:	2102      	movs	r1, #2
 8003dca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2140      	movs	r1, #64	; 0x40
 8003dd8:	438a      	bics	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	23e0      	movs	r3, #224	; 0xe0
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d902      	bls.n	8003dee <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	e002      	b.n	8003df4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003dee:	2380      	movs	r3, #128	; 0x80
 8003df0:	015b      	lsls	r3, r3, #5
 8003df2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	23f0      	movs	r3, #240	; 0xf0
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d008      	beq.n	8003e12 <HAL_SPI_Init+0xaa>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	23e0      	movs	r3, #224	; 0xe0
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d002      	beq.n	8003e12 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	2382      	movs	r3, #130	; 0x82
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6899      	ldr	r1, [r3, #8]
 8003e20:	2384      	movs	r3, #132	; 0x84
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	400b      	ands	r3, r1
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2102      	movs	r1, #2
 8003e2e:	400b      	ands	r3, r1
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	2101      	movs	r1, #1
 8003e38:	400b      	ands	r3, r1
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6999      	ldr	r1, [r3, #24]
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	400b      	ands	r3, r1
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	2138      	movs	r1, #56	; 0x38
 8003e4e:	400b      	ands	r3, r1
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	2180      	movs	r1, #128	; 0x80
 8003e58:	400b      	ands	r3, r1
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	0011      	movs	r1, r2
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	019b      	lsls	r3, r3, #6
 8003e66:	401a      	ands	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	0c1b      	lsrs	r3, r3, #16
 8003e76:	2204      	movs	r2, #4
 8003e78:	401a      	ands	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	2110      	movs	r1, #16
 8003e80:	400b      	ands	r3, r1
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e88:	2108      	movs	r1, #8
 8003e8a:	400b      	ands	r3, r1
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68d9      	ldr	r1, [r3, #12]
 8003e92:	23f0      	movs	r3, #240	; 0xf0
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	400b      	ands	r3, r1
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	0011      	movs	r1, r2
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	2380      	movs	r3, #128	; 0x80
 8003ea0:	015b      	lsls	r3, r3, #5
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	69da      	ldr	r2, [r3, #28]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4907      	ldr	r1, [pc, #28]	; (8003ed4 <HAL_SPI_Init+0x16c>)
 8003eb8:	400a      	ands	r2, r1
 8003eba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	225d      	movs	r2, #93	; 0x5d
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	0018      	movs	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b004      	add	sp, #16
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	fffff7ff 	.word	0xfffff7ff

08003ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e042      	b.n	8003f70 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	223d      	movs	r2, #61	; 0x3d
 8003eee:	5c9b      	ldrb	r3, [r3, r2]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d107      	bne.n	8003f06 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	223c      	movs	r2, #60	; 0x3c
 8003efa:	2100      	movs	r1, #0
 8003efc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7fc fe83 	bl	8000c0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	223d      	movs	r2, #61	; 0x3d
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3304      	adds	r3, #4
 8003f16:	0019      	movs	r1, r3
 8003f18:	0010      	movs	r0, r2
 8003f1a:	f000 fa65 	bl	80043e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2246      	movs	r2, #70	; 0x46
 8003f22:	2101      	movs	r1, #1
 8003f24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	223e      	movs	r2, #62	; 0x3e
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	5499      	strb	r1, [r3, r2]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	223f      	movs	r2, #63	; 0x3f
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2240      	movs	r2, #64	; 0x40
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	5499      	strb	r1, [r3, r2]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2241      	movs	r2, #65	; 0x41
 8003f42:	2101      	movs	r1, #1
 8003f44:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2242      	movs	r2, #66	; 0x42
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	5499      	strb	r1, [r3, r2]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2243      	movs	r2, #67	; 0x43
 8003f52:	2101      	movs	r1, #1
 8003f54:	5499      	strb	r1, [r3, r2]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2244      	movs	r2, #68	; 0x44
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	5499      	strb	r1, [r3, r2]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2245      	movs	r2, #69	; 0x45
 8003f62:	2101      	movs	r1, #1
 8003f64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	223d      	movs	r2, #61	; 0x3d
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	0018      	movs	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b002      	add	sp, #8
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e042      	b.n	8004010 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	223d      	movs	r2, #61	; 0x3d
 8003f8e:	5c9b      	ldrb	r3, [r3, r2]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d107      	bne.n	8003fa6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	223c      	movs	r2, #60	; 0x3c
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f000 f839 	bl	8004018 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	223d      	movs	r2, #61	; 0x3d
 8003faa:	2102      	movs	r1, #2
 8003fac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	0019      	movs	r1, r3
 8003fb8:	0010      	movs	r0, r2
 8003fba:	f000 fa15 	bl	80043e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2246      	movs	r2, #70	; 0x46
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	223e      	movs	r2, #62	; 0x3e
 8003fca:	2101      	movs	r1, #1
 8003fcc:	5499      	strb	r1, [r3, r2]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	223f      	movs	r2, #63	; 0x3f
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	5499      	strb	r1, [r3, r2]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2240      	movs	r2, #64	; 0x40
 8003fda:	2101      	movs	r1, #1
 8003fdc:	5499      	strb	r1, [r3, r2]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2241      	movs	r2, #65	; 0x41
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2242      	movs	r2, #66	; 0x42
 8003fea:	2101      	movs	r1, #1
 8003fec:	5499      	strb	r1, [r3, r2]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2243      	movs	r2, #67	; 0x43
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	5499      	strb	r1, [r3, r2]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2244      	movs	r2, #68	; 0x44
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	5499      	strb	r1, [r3, r2]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2245      	movs	r2, #69	; 0x45
 8004002:	2101      	movs	r1, #1
 8004004:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	223d      	movs	r2, #61	; 0x3d
 800400a:	2101      	movs	r1, #1
 800400c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	0018      	movs	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	b002      	add	sp, #8
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004020:	46c0      	nop			; (mov r8, r8)
 8004022:	46bd      	mov	sp, r7
 8004024:	b002      	add	sp, #8
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004034:	2317      	movs	r3, #23
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	223c      	movs	r2, #60	; 0x3c
 8004040:	5c9b      	ldrb	r3, [r3, r2]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004046:	2302      	movs	r3, #2
 8004048:	e0ad      	b.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	223c      	movs	r2, #60	; 0x3c
 800404e:	2101      	movs	r1, #1
 8004050:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b0c      	cmp	r3, #12
 8004056:	d100      	bne.n	800405a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004058:	e076      	b.n	8004148 <HAL_TIM_PWM_ConfigChannel+0x120>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b0c      	cmp	r3, #12
 800405e:	d900      	bls.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004060:	e095      	b.n	800418e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b08      	cmp	r3, #8
 8004066:	d04e      	beq.n	8004106 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b08      	cmp	r3, #8
 800406c:	d900      	bls.n	8004070 <HAL_TIM_PWM_ConfigChannel+0x48>
 800406e:	e08e      	b.n	800418e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_TIM_PWM_ConfigChannel+0x56>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b04      	cmp	r3, #4
 800407a:	d021      	beq.n	80040c0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800407c:	e087      	b.n	800418e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	0011      	movs	r1, r2
 8004086:	0018      	movs	r0, r3
 8004088:	f000 fa24 	bl	80044d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2108      	movs	r1, #8
 8004098:	430a      	orrs	r2, r1
 800409a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2104      	movs	r1, #4
 80040a8:	438a      	bics	r2, r1
 80040aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6999      	ldr	r1, [r3, #24]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	619a      	str	r2, [r3, #24]
      break;
 80040be:	e06b      	b.n	8004198 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	0011      	movs	r1, r2
 80040c8:	0018      	movs	r0, r3
 80040ca:	f000 fa81 	bl	80045d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	699a      	ldr	r2, [r3, #24]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2180      	movs	r1, #128	; 0x80
 80040da:	0109      	lsls	r1, r1, #4
 80040dc:	430a      	orrs	r2, r1
 80040de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4931      	ldr	r1, [pc, #196]	; (80041b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80040ec:	400a      	ands	r2, r1
 80040ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6999      	ldr	r1, [r3, #24]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	021a      	lsls	r2, r3, #8
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	619a      	str	r2, [r3, #24]
      break;
 8004104:	e048      	b.n	8004198 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	0011      	movs	r1, r2
 800410e:	0018      	movs	r0, r3
 8004110:	f000 fadc 	bl	80046cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69da      	ldr	r2, [r3, #28]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2108      	movs	r1, #8
 8004120:	430a      	orrs	r2, r1
 8004122:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2104      	movs	r1, #4
 8004130:	438a      	bics	r2, r1
 8004132:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	69d9      	ldr	r1, [r3, #28]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	61da      	str	r2, [r3, #28]
      break;
 8004146:	e027      	b.n	8004198 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	0011      	movs	r1, r2
 8004150:	0018      	movs	r0, r3
 8004152:	f000 fb3b 	bl	80047cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69da      	ldr	r2, [r3, #28]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2180      	movs	r1, #128	; 0x80
 8004162:	0109      	lsls	r1, r1, #4
 8004164:	430a      	orrs	r2, r1
 8004166:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	490f      	ldr	r1, [pc, #60]	; (80041b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004174:	400a      	ands	r2, r1
 8004176:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	69d9      	ldr	r1, [r3, #28]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	021a      	lsls	r2, r3, #8
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	61da      	str	r2, [r3, #28]
      break;
 800418c:	e004      	b.n	8004198 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800418e:	2317      	movs	r3, #23
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	2201      	movs	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
      break;
 8004196:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	223c      	movs	r2, #60	; 0x3c
 800419c:	2100      	movs	r1, #0
 800419e:	5499      	strb	r1, [r3, r2]

  return status;
 80041a0:	2317      	movs	r3, #23
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	781b      	ldrb	r3, [r3, #0]
}
 80041a6:	0018      	movs	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b006      	add	sp, #24
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	fffffbff 	.word	0xfffffbff

080041b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041be:	230f      	movs	r3, #15
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	223c      	movs	r2, #60	; 0x3c
 80041ca:	5c9b      	ldrb	r3, [r3, r2]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_TIM_ConfigClockSource+0x20>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e0bc      	b.n	800434e <HAL_TIM_ConfigClockSource+0x19a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	223c      	movs	r2, #60	; 0x3c
 80041d8:	2101      	movs	r1, #1
 80041da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	223d      	movs	r2, #61	; 0x3d
 80041e0:	2102      	movs	r1, #2
 80041e2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2277      	movs	r2, #119	; 0x77
 80041f0:	4393      	bics	r3, r2
 80041f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4a58      	ldr	r2, [pc, #352]	; (8004358 <HAL_TIM_ConfigClockSource+0x1a4>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2280      	movs	r2, #128	; 0x80
 800420a:	0192      	lsls	r2, r2, #6
 800420c:	4293      	cmp	r3, r2
 800420e:	d040      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0xde>
 8004210:	2280      	movs	r2, #128	; 0x80
 8004212:	0192      	lsls	r2, r2, #6
 8004214:	4293      	cmp	r3, r2
 8004216:	d900      	bls.n	800421a <HAL_TIM_ConfigClockSource+0x66>
 8004218:	e088      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 800421a:	2280      	movs	r2, #128	; 0x80
 800421c:	0152      	lsls	r2, r2, #5
 800421e:	4293      	cmp	r3, r2
 8004220:	d100      	bne.n	8004224 <HAL_TIM_ConfigClockSource+0x70>
 8004222:	e088      	b.n	8004336 <HAL_TIM_ConfigClockSource+0x182>
 8004224:	2280      	movs	r2, #128	; 0x80
 8004226:	0152      	lsls	r2, r2, #5
 8004228:	4293      	cmp	r3, r2
 800422a:	d900      	bls.n	800422e <HAL_TIM_ConfigClockSource+0x7a>
 800422c:	e07e      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 800422e:	2b70      	cmp	r3, #112	; 0x70
 8004230:	d018      	beq.n	8004264 <HAL_TIM_ConfigClockSource+0xb0>
 8004232:	d900      	bls.n	8004236 <HAL_TIM_ConfigClockSource+0x82>
 8004234:	e07a      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 8004236:	2b60      	cmp	r3, #96	; 0x60
 8004238:	d04f      	beq.n	80042da <HAL_TIM_ConfigClockSource+0x126>
 800423a:	d900      	bls.n	800423e <HAL_TIM_ConfigClockSource+0x8a>
 800423c:	e076      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 800423e:	2b50      	cmp	r3, #80	; 0x50
 8004240:	d03b      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x106>
 8004242:	d900      	bls.n	8004246 <HAL_TIM_ConfigClockSource+0x92>
 8004244:	e072      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 8004246:	2b40      	cmp	r3, #64	; 0x40
 8004248:	d057      	beq.n	80042fa <HAL_TIM_ConfigClockSource+0x146>
 800424a:	d900      	bls.n	800424e <HAL_TIM_ConfigClockSource+0x9a>
 800424c:	e06e      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 800424e:	2b30      	cmp	r3, #48	; 0x30
 8004250:	d063      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x166>
 8004252:	d86b      	bhi.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 8004254:	2b20      	cmp	r3, #32
 8004256:	d060      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x166>
 8004258:	d868      	bhi.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d05d      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x166>
 800425e:	2b10      	cmp	r3, #16
 8004260:	d05b      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x166>
 8004262:	e063      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6899      	ldr	r1, [r3, #8]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f000 fc1a 	bl	8004aac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2277      	movs	r2, #119	; 0x77
 8004284:	4313      	orrs	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	609a      	str	r2, [r3, #8]
      break;
 8004290:	e052      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6899      	ldr	r1, [r3, #8]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f000 fc03 	bl	8004aac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2180      	movs	r1, #128	; 0x80
 80042b2:	01c9      	lsls	r1, r1, #7
 80042b4:	430a      	orrs	r2, r1
 80042b6:	609a      	str	r2, [r3, #8]
      break;
 80042b8:	e03e      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6859      	ldr	r1, [r3, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	001a      	movs	r2, r3
 80042c8:	f000 fb76 	bl	80049b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2150      	movs	r1, #80	; 0x50
 80042d2:	0018      	movs	r0, r3
 80042d4:	f000 fbd0 	bl	8004a78 <TIM_ITRx_SetConfig>
      break;
 80042d8:	e02e      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6859      	ldr	r1, [r3, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	001a      	movs	r2, r3
 80042e8:	f000 fb94 	bl	8004a14 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2160      	movs	r1, #96	; 0x60
 80042f2:	0018      	movs	r0, r3
 80042f4:	f000 fbc0 	bl	8004a78 <TIM_ITRx_SetConfig>
      break;
 80042f8:	e01e      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6859      	ldr	r1, [r3, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	001a      	movs	r2, r3
 8004308:	f000 fb56 	bl	80049b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2140      	movs	r1, #64	; 0x40
 8004312:	0018      	movs	r0, r3
 8004314:	f000 fbb0 	bl	8004a78 <TIM_ITRx_SetConfig>
      break;
 8004318:	e00e      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0019      	movs	r1, r3
 8004324:	0010      	movs	r0, r2
 8004326:	f000 fba7 	bl	8004a78 <TIM_ITRx_SetConfig>
      break;
 800432a:	e005      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800432c:	230f      	movs	r3, #15
 800432e:	18fb      	adds	r3, r7, r3
 8004330:	2201      	movs	r2, #1
 8004332:	701a      	strb	r2, [r3, #0]
      break;
 8004334:	e000      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004336:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	223d      	movs	r2, #61	; 0x3d
 800433c:	2101      	movs	r1, #1
 800433e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	223c      	movs	r2, #60	; 0x3c
 8004344:	2100      	movs	r1, #0
 8004346:	5499      	strb	r1, [r3, r2]

  return status;
 8004348:	230f      	movs	r3, #15
 800434a:	18fb      	adds	r3, r7, r3
 800434c:	781b      	ldrb	r3, [r3, #0]
}
 800434e:	0018      	movs	r0, r3
 8004350:	46bd      	mov	sp, r7
 8004352:	b004      	add	sp, #16
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	ffff00ff 	.word	0xffff00ff

0800435c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	223c      	movs	r2, #60	; 0x3c
 800436a:	5c9b      	ldrb	r3, [r3, r2]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004370:	2302      	movs	r3, #2
 8004372:	e032      	b.n	80043da <HAL_TIM_SlaveConfigSynchro+0x7e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	223c      	movs	r2, #60	; 0x3c
 8004378:	2101      	movs	r1, #1
 800437a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	223d      	movs	r2, #61	; 0x3d
 8004380:	2102      	movs	r1, #2
 8004382:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	0011      	movs	r1, r2
 800438a:	0018      	movs	r0, r3
 800438c:	f000 fa82 	bl	8004894 <TIM_SlaveTimer_SetConfig>
 8004390:	1e03      	subs	r3, r0, #0
 8004392:	d009      	beq.n	80043a8 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	223d      	movs	r2, #61	; 0x3d
 8004398:	2101      	movs	r1, #1
 800439a:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	223c      	movs	r2, #60	; 0x3c
 80043a0:	2100      	movs	r1, #0
 80043a2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e018      	b.n	80043da <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2140      	movs	r1, #64	; 0x40
 80043b4:	438a      	bics	r2, r1
 80043b6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4908      	ldr	r1, [pc, #32]	; (80043e4 <HAL_TIM_SlaveConfigSynchro+0x88>)
 80043c4:	400a      	ands	r2, r1
 80043c6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	223d      	movs	r2, #61	; 0x3d
 80043cc:	2101      	movs	r1, #1
 80043ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	223c      	movs	r2, #60	; 0x3c
 80043d4:	2100      	movs	r1, #0
 80043d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	0018      	movs	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	b002      	add	sp, #8
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	ffffbfff 	.word	0xffffbfff

080043e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a30      	ldr	r2, [pc, #192]	; (80044bc <TIM_Base_SetConfig+0xd4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d008      	beq.n	8004412 <TIM_Base_SetConfig+0x2a>
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	05db      	lsls	r3, r3, #23
 8004406:	429a      	cmp	r2, r3
 8004408:	d003      	beq.n	8004412 <TIM_Base_SetConfig+0x2a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a2c      	ldr	r2, [pc, #176]	; (80044c0 <TIM_Base_SetConfig+0xd8>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d108      	bne.n	8004424 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2270      	movs	r2, #112	; 0x70
 8004416:	4393      	bics	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a25      	ldr	r2, [pc, #148]	; (80044bc <TIM_Base_SetConfig+0xd4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d014      	beq.n	8004456 <TIM_Base_SetConfig+0x6e>
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	05db      	lsls	r3, r3, #23
 8004432:	429a      	cmp	r2, r3
 8004434:	d00f      	beq.n	8004456 <TIM_Base_SetConfig+0x6e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a21      	ldr	r2, [pc, #132]	; (80044c0 <TIM_Base_SetConfig+0xd8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00b      	beq.n	8004456 <TIM_Base_SetConfig+0x6e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a20      	ldr	r2, [pc, #128]	; (80044c4 <TIM_Base_SetConfig+0xdc>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d007      	beq.n	8004456 <TIM_Base_SetConfig+0x6e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a1f      	ldr	r2, [pc, #124]	; (80044c8 <TIM_Base_SetConfig+0xe0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d003      	beq.n	8004456 <TIM_Base_SetConfig+0x6e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a1e      	ldr	r2, [pc, #120]	; (80044cc <TIM_Base_SetConfig+0xe4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d108      	bne.n	8004468 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4a1d      	ldr	r2, [pc, #116]	; (80044d0 <TIM_Base_SetConfig+0xe8>)
 800445a:	4013      	ands	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2280      	movs	r2, #128	; 0x80
 800446c:	4393      	bics	r3, r2
 800446e:	001a      	movs	r2, r3
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <TIM_Base_SetConfig+0xd4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d007      	beq.n	80044a6 <TIM_Base_SetConfig+0xbe>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a0b      	ldr	r2, [pc, #44]	; (80044c8 <TIM_Base_SetConfig+0xe0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d003      	beq.n	80044a6 <TIM_Base_SetConfig+0xbe>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a0a      	ldr	r2, [pc, #40]	; (80044cc <TIM_Base_SetConfig+0xe4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d103      	bne.n	80044ae <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	691a      	ldr	r2, [r3, #16]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	615a      	str	r2, [r3, #20]
}
 80044b4:	46c0      	nop			; (mov r8, r8)
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b004      	add	sp, #16
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40012c00 	.word	0x40012c00
 80044c0:	40000400 	.word	0x40000400
 80044c4:	40002000 	.word	0x40002000
 80044c8:	40014400 	.word	0x40014400
 80044cc:	40014800 	.word	0x40014800
 80044d0:	fffffcff 	.word	0xfffffcff

080044d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	2201      	movs	r2, #1
 80044e4:	4393      	bics	r3, r2
 80044e6:	001a      	movs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2270      	movs	r2, #112	; 0x70
 8004502:	4393      	bics	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2203      	movs	r2, #3
 800450a:	4393      	bics	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2202      	movs	r2, #2
 800451c:	4393      	bics	r3, r2
 800451e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a23      	ldr	r2, [pc, #140]	; (80045bc <TIM_OC1_SetConfig+0xe8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d007      	beq.n	8004542 <TIM_OC1_SetConfig+0x6e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a22      	ldr	r2, [pc, #136]	; (80045c0 <TIM_OC1_SetConfig+0xec>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d003      	beq.n	8004542 <TIM_OC1_SetConfig+0x6e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a21      	ldr	r2, [pc, #132]	; (80045c4 <TIM_OC1_SetConfig+0xf0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d10c      	bne.n	800455c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2208      	movs	r2, #8
 8004546:	4393      	bics	r3, r2
 8004548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2204      	movs	r2, #4
 8004558:	4393      	bics	r3, r2
 800455a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a17      	ldr	r2, [pc, #92]	; (80045bc <TIM_OC1_SetConfig+0xe8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d007      	beq.n	8004574 <TIM_OC1_SetConfig+0xa0>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a16      	ldr	r2, [pc, #88]	; (80045c0 <TIM_OC1_SetConfig+0xec>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d003      	beq.n	8004574 <TIM_OC1_SetConfig+0xa0>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a15      	ldr	r2, [pc, #84]	; (80045c4 <TIM_OC1_SetConfig+0xf0>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d111      	bne.n	8004598 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	4a14      	ldr	r2, [pc, #80]	; (80045c8 <TIM_OC1_SetConfig+0xf4>)
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4a13      	ldr	r2, [pc, #76]	; (80045cc <TIM_OC1_SetConfig+0xf8>)
 8004580:	4013      	ands	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b006      	add	sp, #24
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40014400 	.word	0x40014400
 80045c4:	40014800 	.word	0x40014800
 80045c8:	fffffeff 	.word	0xfffffeff
 80045cc:	fffffdff 	.word	0xfffffdff

080045d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	2210      	movs	r2, #16
 80045e0:	4393      	bics	r3, r2
 80045e2:	001a      	movs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4a2c      	ldr	r2, [pc, #176]	; (80046b0 <TIM_OC2_SetConfig+0xe0>)
 80045fe:	4013      	ands	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4a2b      	ldr	r2, [pc, #172]	; (80046b4 <TIM_OC2_SetConfig+0xe4>)
 8004606:	4013      	ands	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	021b      	lsls	r3, r3, #8
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2220      	movs	r2, #32
 800461a:	4393      	bics	r3, r2
 800461c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a22      	ldr	r2, [pc, #136]	; (80046b8 <TIM_OC2_SetConfig+0xe8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d10d      	bne.n	800464e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2280      	movs	r2, #128	; 0x80
 8004636:	4393      	bics	r3, r2
 8004638:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2240      	movs	r2, #64	; 0x40
 800464a:	4393      	bics	r3, r2
 800464c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a19      	ldr	r2, [pc, #100]	; (80046b8 <TIM_OC2_SetConfig+0xe8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d007      	beq.n	8004666 <TIM_OC2_SetConfig+0x96>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a18      	ldr	r2, [pc, #96]	; (80046bc <TIM_OC2_SetConfig+0xec>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d003      	beq.n	8004666 <TIM_OC2_SetConfig+0x96>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a17      	ldr	r2, [pc, #92]	; (80046c0 <TIM_OC2_SetConfig+0xf0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d113      	bne.n	800468e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4a16      	ldr	r2, [pc, #88]	; (80046c4 <TIM_OC2_SetConfig+0xf4>)
 800466a:	4013      	ands	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <TIM_OC2_SetConfig+0xf8>)
 8004672:	4013      	ands	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	621a      	str	r2, [r3, #32]
}
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b006      	add	sp, #24
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	ffff8fff 	.word	0xffff8fff
 80046b4:	fffffcff 	.word	0xfffffcff
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40014400 	.word	0x40014400
 80046c0:	40014800 	.word	0x40014800
 80046c4:	fffffbff 	.word	0xfffffbff
 80046c8:	fffff7ff 	.word	0xfffff7ff

080046cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	4a33      	ldr	r2, [pc, #204]	; (80047a8 <TIM_OC3_SetConfig+0xdc>)
 80046dc:	401a      	ands	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2270      	movs	r2, #112	; 0x70
 80046f8:	4393      	bics	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2203      	movs	r2, #3
 8004700:	4393      	bics	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	4a26      	ldr	r2, [pc, #152]	; (80047ac <TIM_OC3_SetConfig+0xe0>)
 8004712:	4013      	ands	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a22      	ldr	r2, [pc, #136]	; (80047b0 <TIM_OC3_SetConfig+0xe4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d10d      	bne.n	8004746 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	4a21      	ldr	r2, [pc, #132]	; (80047b4 <TIM_OC3_SetConfig+0xe8>)
 800472e:	4013      	ands	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	4a1d      	ldr	r2, [pc, #116]	; (80047b8 <TIM_OC3_SetConfig+0xec>)
 8004742:	4013      	ands	r3, r2
 8004744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <TIM_OC3_SetConfig+0xe4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d007      	beq.n	800475e <TIM_OC3_SetConfig+0x92>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <TIM_OC3_SetConfig+0xf0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d003      	beq.n	800475e <TIM_OC3_SetConfig+0x92>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a19      	ldr	r2, [pc, #100]	; (80047c0 <TIM_OC3_SetConfig+0xf4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d113      	bne.n	8004786 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	4a18      	ldr	r2, [pc, #96]	; (80047c4 <TIM_OC3_SetConfig+0xf8>)
 8004762:	4013      	ands	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4a17      	ldr	r2, [pc, #92]	; (80047c8 <TIM_OC3_SetConfig+0xfc>)
 800476a:	4013      	ands	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	4313      	orrs	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	621a      	str	r2, [r3, #32]
}
 80047a0:	46c0      	nop			; (mov r8, r8)
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b006      	add	sp, #24
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	fffffeff 	.word	0xfffffeff
 80047ac:	fffffdff 	.word	0xfffffdff
 80047b0:	40012c00 	.word	0x40012c00
 80047b4:	fffff7ff 	.word	0xfffff7ff
 80047b8:	fffffbff 	.word	0xfffffbff
 80047bc:	40014400 	.word	0x40014400
 80047c0:	40014800 	.word	0x40014800
 80047c4:	ffffefff 	.word	0xffffefff
 80047c8:	ffffdfff 	.word	0xffffdfff

080047cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	4a26      	ldr	r2, [pc, #152]	; (8004874 <TIM_OC4_SetConfig+0xa8>)
 80047dc:	401a      	ands	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4a20      	ldr	r2, [pc, #128]	; (8004878 <TIM_OC4_SetConfig+0xac>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a1f      	ldr	r2, [pc, #124]	; (800487c <TIM_OC4_SetConfig+0xb0>)
 8004800:	4013      	ands	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4a1b      	ldr	r2, [pc, #108]	; (8004880 <TIM_OC4_SetConfig+0xb4>)
 8004814:	4013      	ands	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	031b      	lsls	r3, r3, #12
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a17      	ldr	r2, [pc, #92]	; (8004884 <TIM_OC4_SetConfig+0xb8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d007      	beq.n	800483c <TIM_OC4_SetConfig+0x70>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a16      	ldr	r2, [pc, #88]	; (8004888 <TIM_OC4_SetConfig+0xbc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d003      	beq.n	800483c <TIM_OC4_SetConfig+0x70>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a15      	ldr	r2, [pc, #84]	; (800488c <TIM_OC4_SetConfig+0xc0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d109      	bne.n	8004850 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	4a14      	ldr	r2, [pc, #80]	; (8004890 <TIM_OC4_SetConfig+0xc4>)
 8004840:	4013      	ands	r3, r2
 8004842:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	019b      	lsls	r3, r3, #6
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	621a      	str	r2, [r3, #32]
}
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	46bd      	mov	sp, r7
 800486e:	b006      	add	sp, #24
 8004870:	bd80      	pop	{r7, pc}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	ffffefff 	.word	0xffffefff
 8004878:	ffff8fff 	.word	0xffff8fff
 800487c:	fffffcff 	.word	0xfffffcff
 8004880:	ffffdfff 	.word	0xffffdfff
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40014400 	.word	0x40014400
 800488c:	40014800 	.word	0x40014800
 8004890:	ffffbfff 	.word	0xffffbfff

08004894 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800489e:	2317      	movs	r3, #23
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	2200      	movs	r2, #0
 80048a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2270      	movs	r2, #112	; 0x70
 80048b2:	4393      	bics	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	2207      	movs	r2, #7
 80048c4:	4393      	bics	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b70      	cmp	r3, #112	; 0x70
 80048e0:	d015      	beq.n	800490e <TIM_SlaveTimer_SetConfig+0x7a>
 80048e2:	d900      	bls.n	80048e6 <TIM_SlaveTimer_SetConfig+0x52>
 80048e4:	e05b      	b.n	800499e <TIM_SlaveTimer_SetConfig+0x10a>
 80048e6:	2b60      	cmp	r3, #96	; 0x60
 80048e8:	d04f      	beq.n	800498a <TIM_SlaveTimer_SetConfig+0xf6>
 80048ea:	d858      	bhi.n	800499e <TIM_SlaveTimer_SetConfig+0x10a>
 80048ec:	2b50      	cmp	r3, #80	; 0x50
 80048ee:	d042      	beq.n	8004976 <TIM_SlaveTimer_SetConfig+0xe2>
 80048f0:	d855      	bhi.n	800499e <TIM_SlaveTimer_SetConfig+0x10a>
 80048f2:	2b40      	cmp	r3, #64	; 0x40
 80048f4:	d016      	beq.n	8004924 <TIM_SlaveTimer_SetConfig+0x90>
 80048f6:	d852      	bhi.n	800499e <TIM_SlaveTimer_SetConfig+0x10a>
 80048f8:	2b30      	cmp	r3, #48	; 0x30
 80048fa:	d055      	beq.n	80049a8 <TIM_SlaveTimer_SetConfig+0x114>
 80048fc:	d84f      	bhi.n	800499e <TIM_SlaveTimer_SetConfig+0x10a>
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d052      	beq.n	80049a8 <TIM_SlaveTimer_SetConfig+0x114>
 8004902:	d84c      	bhi.n	800499e <TIM_SlaveTimer_SetConfig+0x10a>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d04f      	beq.n	80049a8 <TIM_SlaveTimer_SetConfig+0x114>
 8004908:	2b10      	cmp	r3, #16
 800490a:	d04d      	beq.n	80049a8 <TIM_SlaveTimer_SetConfig+0x114>
 800490c:	e047      	b.n	800499e <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6818      	ldr	r0, [r3, #0]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68d9      	ldr	r1, [r3, #12]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f000 f8c5 	bl	8004aac <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004922:	e042      	b.n	80049aa <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b05      	cmp	r3, #5
 800492a:	d101      	bne.n	8004930 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e03f      	b.n	80049b0 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6a1a      	ldr	r2, [r3, #32]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2101      	movs	r1, #1
 8004944:	438a      	bics	r2, r1
 8004946:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	22f0      	movs	r2, #240	; 0xf0
 8004954:	4393      	bics	r3, r2
 8004956:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	4313      	orrs	r3, r2
 8004962:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	621a      	str	r2, [r3, #32]
      break;
 8004974:	e019      	b.n	80049aa <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6899      	ldr	r1, [r3, #8]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	001a      	movs	r2, r3
 8004984:	f000 f818 	bl	80049b8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004988:	e00f      	b.n	80049aa <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6899      	ldr	r1, [r3, #8]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	001a      	movs	r2, r3
 8004998:	f000 f83c 	bl	8004a14 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800499c:	e005      	b.n	80049aa <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800499e:	2317      	movs	r3, #23
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	2201      	movs	r2, #1
 80049a4:	701a      	strb	r2, [r3, #0]
      break;
 80049a6:	e000      	b.n	80049aa <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80049a8:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 80049aa:	2317      	movs	r3, #23
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	781b      	ldrb	r3, [r3, #0]
}
 80049b0:	0018      	movs	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b006      	add	sp, #24
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	2201      	movs	r2, #1
 80049d0:	4393      	bics	r3, r2
 80049d2:	001a      	movs	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	22f0      	movs	r2, #240	; 0xf0
 80049e2:	4393      	bics	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	220a      	movs	r2, #10
 80049f4:	4393      	bics	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	621a      	str	r2, [r3, #32]
}
 8004a0c:	46c0      	nop			; (mov r8, r8)
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b006      	add	sp, #24
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	2210      	movs	r2, #16
 8004a26:	4393      	bics	r3, r2
 8004a28:	001a      	movs	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	4a0d      	ldr	r2, [pc, #52]	; (8004a74 <TIM_TI2_ConfigInputStage+0x60>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	031b      	lsls	r3, r3, #12
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	22a0      	movs	r2, #160	; 0xa0
 8004a50:	4393      	bics	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	621a      	str	r2, [r3, #32]
}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	b006      	add	sp, #24
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	ffff0fff 	.word	0xffff0fff

08004a78 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2270      	movs	r2, #112	; 0x70
 8004a8c:	4393      	bics	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	2207      	movs	r2, #7
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	609a      	str	r2, [r3, #8]
}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b004      	add	sp, #16
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	4a09      	ldr	r2, [pc, #36]	; (8004ae8 <TIM_ETR_SetConfig+0x3c>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	021a      	lsls	r2, r3, #8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	609a      	str	r2, [r3, #8]
}
 8004ae0:	46c0      	nop			; (mov r8, r8)
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b006      	add	sp, #24
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	ffff00ff 	.word	0xffff00ff

08004aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	223c      	movs	r2, #60	; 0x3c
 8004afa:	5c9b      	ldrb	r3, [r3, r2]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e042      	b.n	8004b8a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	223c      	movs	r2, #60	; 0x3c
 8004b08:	2101      	movs	r1, #1
 8004b0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	223d      	movs	r2, #61	; 0x3d
 8004b10:	2102      	movs	r1, #2
 8004b12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2270      	movs	r2, #112	; 0x70
 8004b28:	4393      	bics	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a14      	ldr	r2, [pc, #80]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d00a      	beq.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	05db      	lsls	r3, r3, #23
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d004      	beq.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a0f      	ldr	r2, [pc, #60]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d10c      	bne.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2280      	movs	r2, #128	; 0x80
 8004b62:	4393      	bics	r3, r2
 8004b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	223d      	movs	r2, #61	; 0x3d
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	223c      	movs	r2, #60	; 0x3c
 8004b84:	2100      	movs	r1, #0
 8004b86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b004      	add	sp, #16
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	40000400 	.word	0x40000400

08004b9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	223c      	movs	r2, #60	; 0x3c
 8004bae:	5c9b      	ldrb	r3, [r3, r2]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e03e      	b.n	8004c36 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	223c      	movs	r2, #60	; 0x3c
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	22ff      	movs	r2, #255	; 0xff
 8004bc4:	4393      	bics	r3, r2
 8004bc6:	001a      	movs	r2, r3
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4a1b      	ldr	r2, [pc, #108]	; (8004c40 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004bd4:	401a      	ands	r2, r3
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4a18      	ldr	r2, [pc, #96]	; (8004c44 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004be2:	401a      	ands	r2, r3
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4a16      	ldr	r2, [pc, #88]	; (8004c48 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004bf0:	401a      	ands	r2, r3
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4a13      	ldr	r2, [pc, #76]	; (8004c4c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004bfe:	401a      	ands	r2, r3
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4a11      	ldr	r2, [pc, #68]	; (8004c50 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004c0c:	401a      	ands	r2, r3
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4a0e      	ldr	r2, [pc, #56]	; (8004c54 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004c1a:	401a      	ands	r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	223c      	movs	r2, #60	; 0x3c
 8004c30:	2100      	movs	r1, #0
 8004c32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	0018      	movs	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	b004      	add	sp, #16
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	fffffcff 	.word	0xfffffcff
 8004c44:	fffffbff 	.word	0xfffffbff
 8004c48:	fffff7ff 	.word	0xfffff7ff
 8004c4c:	ffffefff 	.word	0xffffefff
 8004c50:	ffffdfff 	.word	0xffffdfff
 8004c54:	ffffbfff 	.word	0xffffbfff

08004c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c60:	231e      	movs	r3, #30
 8004c62:	18fb      	adds	r3, r7, r3
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a84      	ldr	r2, [pc, #528]	; (8004e98 <UART_SetConfig+0x240>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	0019      	movs	r1, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	4a7f      	ldr	r2, [pc, #508]	; (8004e9c <UART_SetConfig+0x244>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	0019      	movs	r1, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	4a76      	ldr	r2, [pc, #472]	; (8004ea0 <UART_SetConfig+0x248>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	0019      	movs	r1, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cd4:	4b73      	ldr	r3, [pc, #460]	; (8004ea4 <UART_SetConfig+0x24c>)
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	2203      	movs	r2, #3
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d00d      	beq.n	8004cfc <UART_SetConfig+0xa4>
 8004ce0:	d81b      	bhi.n	8004d1a <UART_SetConfig+0xc2>
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d014      	beq.n	8004d10 <UART_SetConfig+0xb8>
 8004ce6:	d818      	bhi.n	8004d1a <UART_SetConfig+0xc2>
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <UART_SetConfig+0x9a>
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d00a      	beq.n	8004d06 <UART_SetConfig+0xae>
 8004cf0:	e013      	b.n	8004d1a <UART_SetConfig+0xc2>
 8004cf2:	231f      	movs	r3, #31
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	e012      	b.n	8004d22 <UART_SetConfig+0xca>
 8004cfc:	231f      	movs	r3, #31
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	2202      	movs	r2, #2
 8004d02:	701a      	strb	r2, [r3, #0]
 8004d04:	e00d      	b.n	8004d22 <UART_SetConfig+0xca>
 8004d06:	231f      	movs	r3, #31
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	2204      	movs	r2, #4
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	e008      	b.n	8004d22 <UART_SetConfig+0xca>
 8004d10:	231f      	movs	r3, #31
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	2208      	movs	r2, #8
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	e003      	b.n	8004d22 <UART_SetConfig+0xca>
 8004d1a:	231f      	movs	r3, #31
 8004d1c:	18fb      	adds	r3, r7, r3
 8004d1e:	2210      	movs	r2, #16
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	2380      	movs	r3, #128	; 0x80
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d15d      	bne.n	8004dec <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8004d30:	231f      	movs	r3, #31
 8004d32:	18fb      	adds	r3, r7, r3
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d015      	beq.n	8004d66 <UART_SetConfig+0x10e>
 8004d3a:	dc18      	bgt.n	8004d6e <UART_SetConfig+0x116>
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d00d      	beq.n	8004d5c <UART_SetConfig+0x104>
 8004d40:	dc15      	bgt.n	8004d6e <UART_SetConfig+0x116>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <UART_SetConfig+0xf4>
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d005      	beq.n	8004d56 <UART_SetConfig+0xfe>
 8004d4a:	e010      	b.n	8004d6e <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d4c:	f7fe ff28 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 8004d50:	0003      	movs	r3, r0
 8004d52:	61bb      	str	r3, [r7, #24]
        break;
 8004d54:	e012      	b.n	8004d7c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d56:	4b54      	ldr	r3, [pc, #336]	; (8004ea8 <UART_SetConfig+0x250>)
 8004d58:	61bb      	str	r3, [r7, #24]
        break;
 8004d5a:	e00f      	b.n	8004d7c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d5c:	f7fe feb2 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8004d60:	0003      	movs	r3, r0
 8004d62:	61bb      	str	r3, [r7, #24]
        break;
 8004d64:	e00a      	b.n	8004d7c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d66:	2380      	movs	r3, #128	; 0x80
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	61bb      	str	r3, [r7, #24]
        break;
 8004d6c:	e006      	b.n	8004d7c <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d72:	231e      	movs	r3, #30
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	2201      	movs	r2, #1
 8004d78:	701a      	strb	r2, [r3, #0]
        break;
 8004d7a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d100      	bne.n	8004d84 <UART_SetConfig+0x12c>
 8004d82:	e07b      	b.n	8004e7c <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	005a      	lsls	r2, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	085b      	lsrs	r3, r3, #1
 8004d8e:	18d2      	adds	r2, r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	0019      	movs	r1, r3
 8004d96:	0010      	movs	r0, r2
 8004d98:	f7fb f9b6 	bl	8000108 <__udivsi3>
 8004d9c:	0003      	movs	r3, r0
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	2b0f      	cmp	r3, #15
 8004da6:	d91c      	bls.n	8004de2 <UART_SetConfig+0x18a>
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	025b      	lsls	r3, r3, #9
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d217      	bcs.n	8004de2 <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	200e      	movs	r0, #14
 8004db8:	183b      	adds	r3, r7, r0
 8004dba:	210f      	movs	r1, #15
 8004dbc:	438a      	bics	r2, r1
 8004dbe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2207      	movs	r2, #7
 8004dc8:	4013      	ands	r3, r2
 8004dca:	b299      	uxth	r1, r3
 8004dcc:	183b      	adds	r3, r7, r0
 8004dce:	183a      	adds	r2, r7, r0
 8004dd0:	8812      	ldrh	r2, [r2, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	183a      	adds	r2, r7, r0
 8004ddc:	8812      	ldrh	r2, [r2, #0]
 8004dde:	60da      	str	r2, [r3, #12]
 8004de0:	e04c      	b.n	8004e7c <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8004de2:	231e      	movs	r3, #30
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	2201      	movs	r2, #1
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	e047      	b.n	8004e7c <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dec:	231f      	movs	r3, #31
 8004dee:	18fb      	adds	r3, r7, r3
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d015      	beq.n	8004e22 <UART_SetConfig+0x1ca>
 8004df6:	dc18      	bgt.n	8004e2a <UART_SetConfig+0x1d2>
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d00d      	beq.n	8004e18 <UART_SetConfig+0x1c0>
 8004dfc:	dc15      	bgt.n	8004e2a <UART_SetConfig+0x1d2>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <UART_SetConfig+0x1b0>
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d005      	beq.n	8004e12 <UART_SetConfig+0x1ba>
 8004e06:	e010      	b.n	8004e2a <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e08:	f7fe feca 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	61bb      	str	r3, [r7, #24]
        break;
 8004e10:	e012      	b.n	8004e38 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e12:	4b25      	ldr	r3, [pc, #148]	; (8004ea8 <UART_SetConfig+0x250>)
 8004e14:	61bb      	str	r3, [r7, #24]
        break;
 8004e16:	e00f      	b.n	8004e38 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e18:	f7fe fe54 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	61bb      	str	r3, [r7, #24]
        break;
 8004e20:	e00a      	b.n	8004e38 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e22:	2380      	movs	r3, #128	; 0x80
 8004e24:	021b      	lsls	r3, r3, #8
 8004e26:	61bb      	str	r3, [r7, #24]
        break;
 8004e28:	e006      	b.n	8004e38 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e2e:	231e      	movs	r3, #30
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	2201      	movs	r2, #1
 8004e34:	701a      	strb	r2, [r3, #0]
        break;
 8004e36:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d01e      	beq.n	8004e7c <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	085a      	lsrs	r2, r3, #1
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	18d2      	adds	r2, r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	0019      	movs	r1, r3
 8004e4e:	0010      	movs	r0, r2
 8004e50:	f7fb f95a 	bl	8000108 <__udivsi3>
 8004e54:	0003      	movs	r3, r0
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b0f      	cmp	r3, #15
 8004e5e:	d909      	bls.n	8004e74 <UART_SetConfig+0x21c>
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	2380      	movs	r3, #128	; 0x80
 8004e64:	025b      	lsls	r3, r3, #9
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d204      	bcs.n	8004e74 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	60da      	str	r2, [r3, #12]
 8004e72:	e003      	b.n	8004e7c <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8004e74:	231e      	movs	r3, #30
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	2201      	movs	r2, #1
 8004e7a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e88:	231e      	movs	r3, #30
 8004e8a:	18fb      	adds	r3, r7, r3
 8004e8c:	781b      	ldrb	r3, [r3, #0]
}
 8004e8e:	0018      	movs	r0, r3
 8004e90:	46bd      	mov	sp, r7
 8004e92:	b008      	add	sp, #32
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	ffff69f3 	.word	0xffff69f3
 8004e9c:	ffffcfff 	.word	0xffffcfff
 8004ea0:	fffff4ff 	.word	0xfffff4ff
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	007a1200 	.word	0x007a1200

08004eac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	2201      	movs	r2, #1
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d00b      	beq.n	8004ed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4a4a      	ldr	r2, [pc, #296]	; (8004ff0 <UART_AdvFeatureConfig+0x144>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	0019      	movs	r1, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	2202      	movs	r2, #2
 8004edc:	4013      	ands	r3, r2
 8004ede:	d00b      	beq.n	8004ef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	4a43      	ldr	r2, [pc, #268]	; (8004ff4 <UART_AdvFeatureConfig+0x148>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	0019      	movs	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	2204      	movs	r2, #4
 8004efe:	4013      	ands	r3, r2
 8004f00:	d00b      	beq.n	8004f1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	4a3b      	ldr	r2, [pc, #236]	; (8004ff8 <UART_AdvFeatureConfig+0x14c>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	0019      	movs	r1, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	2208      	movs	r2, #8
 8004f20:	4013      	ands	r3, r2
 8004f22:	d00b      	beq.n	8004f3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	4a34      	ldr	r2, [pc, #208]	; (8004ffc <UART_AdvFeatureConfig+0x150>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	0019      	movs	r1, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	2210      	movs	r2, #16
 8004f42:	4013      	ands	r3, r2
 8004f44:	d00b      	beq.n	8004f5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4a2c      	ldr	r2, [pc, #176]	; (8005000 <UART_AdvFeatureConfig+0x154>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	0019      	movs	r1, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	2220      	movs	r2, #32
 8004f64:	4013      	ands	r3, r2
 8004f66:	d00b      	beq.n	8004f80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	4a25      	ldr	r2, [pc, #148]	; (8005004 <UART_AdvFeatureConfig+0x158>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	0019      	movs	r1, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	2240      	movs	r2, #64	; 0x40
 8004f86:	4013      	ands	r3, r2
 8004f88:	d01d      	beq.n	8004fc6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4a1d      	ldr	r2, [pc, #116]	; (8005008 <UART_AdvFeatureConfig+0x15c>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	0019      	movs	r1, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fa6:	2380      	movs	r3, #128	; 0x80
 8004fa8:	035b      	lsls	r3, r3, #13
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d10b      	bne.n	8004fc6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	4a15      	ldr	r2, [pc, #84]	; (800500c <UART_AdvFeatureConfig+0x160>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	0019      	movs	r1, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	2280      	movs	r2, #128	; 0x80
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d00b      	beq.n	8004fe8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	4a0e      	ldr	r2, [pc, #56]	; (8005010 <UART_AdvFeatureConfig+0x164>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	0019      	movs	r1, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]
  }
}
 8004fe8:	46c0      	nop			; (mov r8, r8)
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b002      	add	sp, #8
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	fffdffff 	.word	0xfffdffff
 8004ff4:	fffeffff 	.word	0xfffeffff
 8004ff8:	fffbffff 	.word	0xfffbffff
 8004ffc:	ffff7fff 	.word	0xffff7fff
 8005000:	ffffefff 	.word	0xffffefff
 8005004:	ffffdfff 	.word	0xffffdfff
 8005008:	ffefffff 	.word	0xffefffff
 800500c:	ff9fffff 	.word	0xff9fffff
 8005010:	fff7ffff 	.word	0xfff7ffff

08005014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af02      	add	r7, sp, #8
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2280      	movs	r2, #128	; 0x80
 8005020:	2100      	movs	r1, #0
 8005022:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005024:	f7fb ffd4 	bl	8000fd0 <HAL_GetTick>
 8005028:	0003      	movs	r3, r0
 800502a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2208      	movs	r2, #8
 8005034:	4013      	ands	r3, r2
 8005036:	2b08      	cmp	r3, #8
 8005038:	d10c      	bne.n	8005054 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2280      	movs	r2, #128	; 0x80
 800503e:	0391      	lsls	r1, r2, #14
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	4a17      	ldr	r2, [pc, #92]	; (80050a0 <UART_CheckIdleState+0x8c>)
 8005044:	9200      	str	r2, [sp, #0]
 8005046:	2200      	movs	r2, #0
 8005048:	f000 f82c 	bl	80050a4 <UART_WaitOnFlagUntilTimeout>
 800504c:	1e03      	subs	r3, r0, #0
 800504e:	d001      	beq.n	8005054 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e021      	b.n	8005098 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2204      	movs	r2, #4
 800505c:	4013      	ands	r3, r2
 800505e:	2b04      	cmp	r3, #4
 8005060:	d10c      	bne.n	800507c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2280      	movs	r2, #128	; 0x80
 8005066:	03d1      	lsls	r1, r2, #15
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	4a0d      	ldr	r2, [pc, #52]	; (80050a0 <UART_CheckIdleState+0x8c>)
 800506c:	9200      	str	r2, [sp, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	f000 f818 	bl	80050a4 <UART_WaitOnFlagUntilTimeout>
 8005074:	1e03      	subs	r3, r0, #0
 8005076:	d001      	beq.n	800507c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e00d      	b.n	8005098 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2274      	movs	r2, #116	; 0x74
 8005092:	2100      	movs	r1, #0
 8005094:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	0018      	movs	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	b004      	add	sp, #16
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	01ffffff 	.word	0x01ffffff

080050a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b094      	sub	sp, #80	; 0x50
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	1dfb      	adds	r3, r7, #7
 80050b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b4:	e0a3      	b.n	80051fe <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050b8:	3301      	adds	r3, #1
 80050ba:	d100      	bne.n	80050be <UART_WaitOnFlagUntilTimeout+0x1a>
 80050bc:	e09f      	b.n	80051fe <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050be:	f7fb ff87 	bl	8000fd0 <HAL_GetTick>
 80050c2:	0002      	movs	r2, r0
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d302      	bcc.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80050ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d13d      	bne.n	8005150 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050d4:	f3ef 8310 	mrs	r3, PRIMASK
 80050d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80050da:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050dc:	647b      	str	r3, [r7, #68]	; 0x44
 80050de:	2301      	movs	r3, #1
 80050e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e4:	f383 8810 	msr	PRIMASK, r3
}
 80050e8:	46c0      	nop			; (mov r8, r8)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	494c      	ldr	r1, [pc, #304]	; (8005228 <UART_WaitOnFlagUntilTimeout+0x184>)
 80050f6:	400a      	ands	r2, r1
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050fc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	f383 8810 	msr	PRIMASK, r3
}
 8005104:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005106:	f3ef 8310 	mrs	r3, PRIMASK
 800510a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800510c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510e:	643b      	str	r3, [r7, #64]	; 0x40
 8005110:	2301      	movs	r3, #1
 8005112:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005116:	f383 8810 	msr	PRIMASK, r3
}
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2101      	movs	r1, #1
 8005128:	438a      	bics	r2, r1
 800512a:	609a      	str	r2, [r3, #8]
 800512c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800512e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005132:	f383 8810 	msr	PRIMASK, r3
}
 8005136:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2220      	movs	r2, #32
 8005142:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2274      	movs	r2, #116	; 0x74
 8005148:	2100      	movs	r1, #0
 800514a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e067      	b.n	8005220 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2204      	movs	r2, #4
 8005158:	4013      	ands	r3, r2
 800515a:	d050      	beq.n	80051fe <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	69da      	ldr	r2, [r3, #28]
 8005162:	2380      	movs	r3, #128	; 0x80
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	401a      	ands	r2, r3
 8005168:	2380      	movs	r3, #128	; 0x80
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	429a      	cmp	r2, r3
 800516e:	d146      	bne.n	80051fe <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2280      	movs	r2, #128	; 0x80
 8005176:	0112      	lsls	r2, r2, #4
 8005178:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800517a:	f3ef 8310 	mrs	r3, PRIMASK
 800517e:	613b      	str	r3, [r7, #16]
  return(result);
 8005180:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005184:	2301      	movs	r3, #1
 8005186:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f383 8810 	msr	PRIMASK, r3
}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4923      	ldr	r1, [pc, #140]	; (8005228 <UART_WaitOnFlagUntilTimeout+0x184>)
 800519c:	400a      	ands	r2, r1
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	f383 8810 	msr	PRIMASK, r3
}
 80051aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ac:	f3ef 8310 	mrs	r3, PRIMASK
 80051b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80051b2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80051b6:	2301      	movs	r3, #1
 80051b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	f383 8810 	msr	PRIMASK, r3
}
 80051c0:	46c0      	nop			; (mov r8, r8)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2101      	movs	r1, #1
 80051ce:	438a      	bics	r2, r1
 80051d0:	609a      	str	r2, [r3, #8]
 80051d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	f383 8810 	msr	PRIMASK, r3
}
 80051dc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2280      	movs	r2, #128	; 0x80
 80051ee:	2120      	movs	r1, #32
 80051f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2274      	movs	r2, #116	; 0x74
 80051f6:	2100      	movs	r1, #0
 80051f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e010      	b.n	8005220 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	4013      	ands	r3, r2
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	425a      	negs	r2, r3
 800520e:	4153      	adcs	r3, r2
 8005210:	b2db      	uxtb	r3, r3
 8005212:	001a      	movs	r2, r3
 8005214:	1dfb      	adds	r3, r7, #7
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d100      	bne.n	800521e <UART_WaitOnFlagUntilTimeout+0x17a>
 800521c:	e74b      	b.n	80050b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	0018      	movs	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	b014      	add	sp, #80	; 0x50
 8005226:	bd80      	pop	{r7, pc}
 8005228:	fffffe5f 	.word	0xfffffe5f

0800522c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e05b      	b.n	80052fc <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005248:	2b00      	cmp	r3, #0
 800524a:	d107      	bne.n	800525c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2274      	movs	r2, #116	; 0x74
 8005250:	2100      	movs	r1, #0
 8005252:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	0018      	movs	r0, r3
 8005258:	f7fb fdb2 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2224      	movs	r2, #36	; 0x24
 8005260:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2101      	movs	r1, #1
 800526e:	438a      	bics	r2, r1
 8005270:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	0018      	movs	r0, r3
 8005276:	f7ff fcef 	bl	8004c58 <UART_SetConfig>
 800527a:	0003      	movs	r3, r0
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e03b      	b.n	80052fc <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	0018      	movs	r0, r3
 8005290:	f7ff fe0c 	bl	8004eac <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2180      	movs	r1, #128	; 0x80
 80052a0:	01c9      	lsls	r1, r1, #7
 80052a2:	430a      	orrs	r2, r1
 80052a4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	4a15      	ldr	r2, [pc, #84]	; (8005304 <HAL_RS485Ex_Init+0xd8>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	0019      	movs	r1, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	055b      	lsls	r3, r3, #21
 80052c0:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a0d      	ldr	r2, [pc, #52]	; (8005308 <HAL_RS485Ex_Init+0xdc>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	0019      	movs	r1, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	430a      	orrs	r2, r1
 80052e0:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2101      	movs	r1, #1
 80052ee:	430a      	orrs	r2, r1
 80052f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	0018      	movs	r0, r3
 80052f6:	f7ff fe8d 	bl	8005014 <UART_CheckIdleState>
 80052fa:	0003      	movs	r3, r0
}
 80052fc:	0018      	movs	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	b006      	add	sp, #24
 8005302:	bd80      	pop	{r7, pc}
 8005304:	ffff7fff 	.word	0xffff7fff
 8005308:	fc00ffff 	.word	0xfc00ffff

0800530c <__libc_init_array>:
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	2600      	movs	r6, #0
 8005310:	4d0c      	ldr	r5, [pc, #48]	; (8005344 <__libc_init_array+0x38>)
 8005312:	4c0d      	ldr	r4, [pc, #52]	; (8005348 <__libc_init_array+0x3c>)
 8005314:	1b64      	subs	r4, r4, r5
 8005316:	10a4      	asrs	r4, r4, #2
 8005318:	42a6      	cmp	r6, r4
 800531a:	d109      	bne.n	8005330 <__libc_init_array+0x24>
 800531c:	2600      	movs	r6, #0
 800531e:	f000 f821 	bl	8005364 <_init>
 8005322:	4d0a      	ldr	r5, [pc, #40]	; (800534c <__libc_init_array+0x40>)
 8005324:	4c0a      	ldr	r4, [pc, #40]	; (8005350 <__libc_init_array+0x44>)
 8005326:	1b64      	subs	r4, r4, r5
 8005328:	10a4      	asrs	r4, r4, #2
 800532a:	42a6      	cmp	r6, r4
 800532c:	d105      	bne.n	800533a <__libc_init_array+0x2e>
 800532e:	bd70      	pop	{r4, r5, r6, pc}
 8005330:	00b3      	lsls	r3, r6, #2
 8005332:	58eb      	ldr	r3, [r5, r3]
 8005334:	4798      	blx	r3
 8005336:	3601      	adds	r6, #1
 8005338:	e7ee      	b.n	8005318 <__libc_init_array+0xc>
 800533a:	00b3      	lsls	r3, r6, #2
 800533c:	58eb      	ldr	r3, [r5, r3]
 800533e:	4798      	blx	r3
 8005340:	3601      	adds	r6, #1
 8005342:	e7f2      	b.n	800532a <__libc_init_array+0x1e>
 8005344:	080053b4 	.word	0x080053b4
 8005348:	080053b4 	.word	0x080053b4
 800534c:	080053b4 	.word	0x080053b4
 8005350:	080053b8 	.word	0x080053b8

08005354 <memset>:
 8005354:	0003      	movs	r3, r0
 8005356:	1882      	adds	r2, r0, r2
 8005358:	4293      	cmp	r3, r2
 800535a:	d100      	bne.n	800535e <memset+0xa>
 800535c:	4770      	bx	lr
 800535e:	7019      	strb	r1, [r3, #0]
 8005360:	3301      	adds	r3, #1
 8005362:	e7f9      	b.n	8005358 <memset+0x4>

08005364 <_init>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr

08005370 <_fini>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005376:	bc08      	pop	{r3}
 8005378:	469e      	mov	lr, r3
 800537a:	4770      	bx	lr
