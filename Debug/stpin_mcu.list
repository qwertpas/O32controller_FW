
stpin_mcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000697c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08006a3c  08006a3c  00016a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ab8  08006ab8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006ab8  08006ab8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ab8  08006ab8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ab8  08006ab8  00016ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006abc  08006abc  00016abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000070  08006b30  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08006b30  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014326  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ca  00000000  00000000  000343be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00036b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  00037df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012389  00000000  00000000  00038f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016758  00000000  00000000  0004b2d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d943  00000000  00000000  00061a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf374  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004738  00000000  00000000  000cf3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006a24 	.word	0x08006a24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006a24 	.word	0x08006a24

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800041c:	f3bf 8f4f 	dsb	sy
}
 8000420:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <__NVIC_SystemReset+0x1c>)
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <__NVIC_SystemReset+0x20>)
 8000426:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000428:	f3bf 8f4f 	dsb	sy
}
 800042c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	e7fd      	b.n	800042e <__NVIC_SystemReset+0x16>
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	e000ed00 	.word	0xe000ed00
 8000438:	05fa0004 	.word	0x05fa0004

0800043c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800043c:	b5b0      	push	{r4, r5, r7, lr}
 800043e:	b09c      	sub	sp, #112	; 0x70
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000442:	f000 ffa7 	bl	8001394 <HAL_Init>

  /* USER CODE BEGIN Init */

	aRxBuffer[0]=0x00;
 8000446:	4b54      	ldr	r3, [pc, #336]	; (8000598 <main+0x15c>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
	aRxBuffer[1]=0x00;
 800044c:	4b52      	ldr	r3, [pc, #328]	; (8000598 <main+0x15c>)
 800044e:	2200      	movs	r2, #0
 8000450:	705a      	strb	r2, [r3, #1]
	aRxBuffer[2]=0x00;
 8000452:	4b51      	ldr	r3, [pc, #324]	; (8000598 <main+0x15c>)
 8000454:	2200      	movs	r2, #0
 8000456:	709a      	strb	r2, [r3, #2]
	aRxBuffer[3]=0x00;
 8000458:	4b4f      	ldr	r3, [pc, #316]	; (8000598 <main+0x15c>)
 800045a:	2200      	movs	r2, #0
 800045c:	70da      	strb	r2, [r3, #3]

	aTxBuffer[0]=0xAA;
 800045e:	4b4f      	ldr	r3, [pc, #316]	; (800059c <main+0x160>)
 8000460:	22aa      	movs	r2, #170	; 0xaa
 8000462:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1]=0xBB;
 8000464:	4b4d      	ldr	r3, [pc, #308]	; (800059c <main+0x160>)
 8000466:	22bb      	movs	r2, #187	; 0xbb
 8000468:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2]=0xCC;
 800046a:	4b4c      	ldr	r3, [pc, #304]	; (800059c <main+0x160>)
 800046c:	22cc      	movs	r2, #204	; 0xcc
 800046e:	709a      	strb	r2, [r3, #2]
	aTxBuffer[3]=0xDD;
 8000470:	4b4a      	ldr	r3, [pc, #296]	; (800059c <main+0x160>)
 8000472:	22dd      	movs	r2, #221	; 0xdd
 8000474:	70da      	strb	r2, [r3, #3]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000476:	f000 f8a9 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047a:	f000 fb6d 	bl	8000b58 <MX_GPIO_Init>
  MX_DMA_Init();
 800047e:	f000 fb4d 	bl	8000b1c <MX_DMA_Init>
  MX_I2C1_Init();
 8000482:	f000 f9a9 	bl	80007d8 <MX_I2C1_Init>
  MX_ADC_Init();
 8000486:	f000 f90b 	bl	80006a0 <MX_ADC_Init>
  MX_SPI1_Init();
 800048a:	f000 f9e5 	bl	8000858 <MX_SPI1_Init>
  MX_TIM1_Init();
 800048e:	f000 fa21 	bl	80008d4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000492:	f000 fb11 	bl	8000ab8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */



  HAL_StatusTypeDef status;
  status = HAL_I2C_EnableListen_IT(&hi2c1);
 8000496:	256b      	movs	r5, #107	; 0x6b
 8000498:	197c      	adds	r4, r7, r5
 800049a:	4b41      	ldr	r3, [pc, #260]	; (80005a0 <main+0x164>)
 800049c:	0018      	movs	r0, r3
 800049e:	f002 fa37 	bl	8002910 <HAL_I2C_EnableListen_IT>
 80004a2:	0003      	movs	r3, r0
 80004a4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK){
 80004a6:	197b      	adds	r3, r7, r5
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <main+0x76>
	  /* Transfer error in reception process */
	  Error_Handler();
 80004ae:	f000 fc4a 	bl	8000d46 <Error_Handler>


//  HAL_ADCEx_Calibration_Start(&hadc);

  //don't run when not connected to actual power i think
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004b2:	4b3c      	ldr	r3, [pc, #240]	; (80005a4 <main+0x168>)
 80004b4:	2100      	movs	r1, #0
 80004b6:	0018      	movs	r0, r3
 80004b8:	f004 fb2c 	bl	8004b14 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 80004bc:	4b3a      	ldr	r3, [pc, #232]	; (80005a8 <main+0x16c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	635a      	str	r2, [r3, #52]	; 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1){

		//restart I2C listener after a transfer
		if (Xfer_Complete ==1){
 80004c2:	4b3a      	ldr	r3, [pc, #232]	; (80005ac <main+0x170>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d10a      	bne.n	80004e0 <main+0xa4>
			/* Put I2C peripheral in listen mode process */
			status = HAL_I2C_EnableListen_IT(&hi2c1);
 80004ca:	236b      	movs	r3, #107	; 0x6b
 80004cc:	18fc      	adds	r4, r7, r3
 80004ce:	4b34      	ldr	r3, [pc, #208]	; (80005a0 <main+0x164>)
 80004d0:	0018      	movs	r0, r3
 80004d2:	f002 fa1d 	bl	8002910 <HAL_I2C_EnableListen_IT>
 80004d6:	0003      	movs	r3, r0
 80004d8:	7023      	strb	r3, [r4, #0]
			Xfer_Complete =0;
 80004da:	4b34      	ldr	r3, [pc, #208]	; (80005ac <main+0x170>)
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
		}

		//blink LED
		HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin, GPIO_PIN_SET);
 80004e0:	4b33      	ldr	r3, [pc, #204]	; (80005b0 <main+0x174>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	2101      	movs	r1, #1
 80004e6:	0018      	movs	r0, r3
 80004e8:	f001 fffc 	bl	80024e4 <HAL_GPIO_WritePin>
		TIM1->CCR1 = 20;
 80004ec:	4b2e      	ldr	r3, [pc, #184]	; (80005a8 <main+0x16c>)
 80004ee:	2214      	movs	r2, #20
 80004f0:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(20);
 80004f2:	2014      	movs	r0, #20
 80004f4:	f000 ffb2 	bl	800145c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin, GPIO_PIN_RESET);
 80004f8:	4b2d      	ldr	r3, [pc, #180]	; (80005b0 <main+0x174>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	2101      	movs	r1, #1
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 fff0 	bl	80024e4 <HAL_GPIO_WritePin>
		TIM1->CCR1 = 0;
 8000504:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <main+0x16c>)
 8000506:	2200      	movs	r2, #0
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(20);
 800050a:	2014      	movs	r0, #20
 800050c:	f000 ffa6 	bl	800145c <HAL_Delay>

		//read all ADCs
//		HAL_ADC_Start(&hadc);
	   // Poll ADC1 Perihperal & TimeOut = 1mSec
//		HAL_ADC_PollForConversion(&hadc, 1);
		HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_vals, NBR_ADC);  // start the adc in dma mode
 8000510:	4928      	ldr	r1, [pc, #160]	; (80005b4 <main+0x178>)
 8000512:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <main+0x17c>)
 8000514:	2206      	movs	r2, #6
 8000516:	0018      	movs	r0, r3
 8000518:	f001 f904 	bl	8001724 <HAL_ADC_Start_DMA>


		Serialprint("ADC: \n");
 800051c:	4b27      	ldr	r3, [pc, #156]	; (80005bc <main+0x180>)
 800051e:	0018      	movs	r0, r3
 8000520:	f000 fb82 	bl	8000c28 <Serialprint>
		for(int i = 0; i < NBR_ADC; i++){
 8000524:	2300      	movs	r3, #0
 8000526:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000528:	e02e      	b.n	8000588 <main+0x14c>
			if(i == 2){ //Vbus sensor
 800052a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800052c:	2b02      	cmp	r3, #2
 800052e:	d11a      	bne.n	8000566 <main+0x12a>
				sprintf(message, " %d", 330*adc_vals[i] * 512 / 4095);
 8000530:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <main+0x178>)
 8000532:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000534:	0052      	lsls	r2, r2, #1
 8000536:	5ad3      	ldrh	r3, [r2, r3]
 8000538:	001a      	movs	r2, r3
 800053a:	0013      	movs	r3, r2
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	189b      	adds	r3, r3, r2
 8000540:	015a      	lsls	r2, r3, #5
 8000542:	189b      	adds	r3, r3, r2
 8000544:	029b      	lsls	r3, r3, #10
 8000546:	491e      	ldr	r1, [pc, #120]	; (80005c0 <main+0x184>)
 8000548:	0018      	movs	r0, r3
 800054a:	f7ff fe79 	bl	8000240 <__divsi3>
 800054e:	0003      	movs	r3, r0
 8000550:	001a      	movs	r2, r3
 8000552:	491c      	ldr	r1, [pc, #112]	; (80005c4 <main+0x188>)
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	0018      	movs	r0, r3
 8000558:	f005 fdfa 	bl	8006150 <siprintf>
				Serialprint(message);
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	0018      	movs	r0, r3
 8000560:	f000 fb62 	bl	8000c28 <Serialprint>
 8000564:	e00d      	b.n	8000582 <main+0x146>
			}else{
				sprintf(message, " %d", adc_vals[i]);
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <main+0x178>)
 8000568:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800056a:	0052      	lsls	r2, r2, #1
 800056c:	5ad3      	ldrh	r3, [r2, r3]
 800056e:	001a      	movs	r2, r3
 8000570:	4914      	ldr	r1, [pc, #80]	; (80005c4 <main+0x188>)
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	0018      	movs	r0, r3
 8000576:	f005 fdeb 	bl	8006150 <siprintf>
				Serialprint(message);
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	0018      	movs	r0, r3
 800057e:	f000 fb53 	bl	8000c28 <Serialprint>
		for(int i = 0; i < NBR_ADC; i++){
 8000582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000584:	3301      	adds	r3, #1
 8000586:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800058a:	2b05      	cmp	r3, #5
 800058c:	ddcd      	ble.n	800052a <main+0xee>
			}
		}
		Serialprint("\n");
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <main+0x18c>)
 8000590:	0018      	movs	r0, r3
 8000592:	f000 fb49 	bl	8000c28 <Serialprint>
		if (Xfer_Complete ==1){
 8000596:	e794      	b.n	80004c2 <main+0x86>
 8000598:	20000098 	.word	0x20000098
 800059c:	20000094 	.word	0x20000094
 80005a0:	2000012c 	.word	0x2000012c
 80005a4:	200001dc 	.word	0x200001dc
 80005a8:	40012c00 	.word	0x40012c00
 80005ac:	20000090 	.word	0x20000090
 80005b0:	48001400 	.word	0x48001400
 80005b4:	2000009c 	.word	0x2000009c
 80005b8:	200000a8 	.word	0x200000a8
 80005bc:	08006a3c 	.word	0x08006a3c
 80005c0:	00000fff 	.word	0x00000fff
 80005c4:	08006a44 	.word	0x08006a44
 80005c8:	08006a48 	.word	0x08006a48

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b095      	sub	sp, #84	; 0x54
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	2420      	movs	r4, #32
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	0018      	movs	r0, r3
 80005d8:	2330      	movs	r3, #48	; 0x30
 80005da:	001a      	movs	r2, r3
 80005dc:	2100      	movs	r1, #0
 80005de:	f005 fdaf 	bl	8006140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e2:	2310      	movs	r3, #16
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	0018      	movs	r0, r3
 80005e8:	2310      	movs	r3, #16
 80005ea:	001a      	movs	r2, r3
 80005ec:	2100      	movs	r1, #0
 80005ee:	f005 fda7 	bl	8006140 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f2:	003b      	movs	r3, r7
 80005f4:	0018      	movs	r0, r3
 80005f6:	2310      	movs	r3, #16
 80005f8:	001a      	movs	r2, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	f005 fda0 	bl	8006140 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000600:	0021      	movs	r1, r4
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2212      	movs	r2, #18
 8000606:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2201      	movs	r2, #1
 800060c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2201      	movs	r2, #1
 8000612:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2210      	movs	r2, #16
 8000618:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2210      	movs	r2, #16
 800061e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2202      	movs	r2, #2
 8000624:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2200      	movs	r2, #0
 800062a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	22a0      	movs	r2, #160	; 0xa0
 8000630:	0392      	lsls	r2, r2, #14
 8000632:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2200      	movs	r2, #0
 8000638:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	187b      	adds	r3, r7, r1
 800063c:	0018      	movs	r0, r3
 800063e:	f003 fbcf 	bl	8003de0 <HAL_RCC_OscConfig>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000646:	f000 fb7e 	bl	8000d46 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	2110      	movs	r1, #16
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2207      	movs	r2, #7
 8000650:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2202      	movs	r2, #2
 8000656:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2101      	movs	r1, #1
 8000668:	0018      	movs	r0, r3
 800066a:	f003 fed3 	bl	8004414 <HAL_RCC_ClockConfig>
 800066e:	1e03      	subs	r3, r0, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000672:	f000 fb68 	bl	8000d46 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000676:	003b      	movs	r3, r7
 8000678:	2221      	movs	r2, #33	; 0x21
 800067a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800067c:	003b      	movs	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000682:	003b      	movs	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000688:	003b      	movs	r3, r7
 800068a:	0018      	movs	r0, r3
 800068c:	f004 f814 	bl	80046b8 <HAL_RCCEx_PeriphCLKConfig>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000694:	f000 fb57 	bl	8000d46 <Error_Handler>
  }
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	b015      	add	sp, #84	; 0x54
 800069e:	bd90      	pop	{r4, r7, pc}

080006a0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	0018      	movs	r0, r3
 80006aa:	230c      	movs	r3, #12
 80006ac:	001a      	movs	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f005 fd46 	bl	8006140 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80006b4:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <MX_ADC_Init+0x130>)
 80006b6:	4a47      	ldr	r2, [pc, #284]	; (80007d4 <MX_ADC_Init+0x134>)
 80006b8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006ba:	4b45      	ldr	r3, [pc, #276]	; (80007d0 <MX_ADC_Init+0x130>)
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80006c0:	4b43      	ldr	r3, [pc, #268]	; (80007d0 <MX_ADC_Init+0x130>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c6:	4b42      	ldr	r3, [pc, #264]	; (80007d0 <MX_ADC_Init+0x130>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80006cc:	4b40      	ldr	r3, [pc, #256]	; (80007d0 <MX_ADC_Init+0x130>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d2:	4b3f      	ldr	r3, [pc, #252]	; (80007d0 <MX_ADC_Init+0x130>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80006d8:	4b3d      	ldr	r3, [pc, #244]	; (80007d0 <MX_ADC_Init+0x130>)
 80006da:	2200      	movs	r2, #0
 80006dc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006de:	4b3c      	ldr	r3, [pc, #240]	; (80007d0 <MX_ADC_Init+0x130>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80006e4:	4b3a      	ldr	r3, [pc, #232]	; (80007d0 <MX_ADC_Init+0x130>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80006ea:	4b39      	ldr	r3, [pc, #228]	; (80007d0 <MX_ADC_Init+0x130>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f0:	4b37      	ldr	r3, [pc, #220]	; (80007d0 <MX_ADC_Init+0x130>)
 80006f2:	22c2      	movs	r2, #194	; 0xc2
 80006f4:	32ff      	adds	r2, #255	; 0xff
 80006f6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f8:	4b35      	ldr	r3, [pc, #212]	; (80007d0 <MX_ADC_Init+0x130>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <MX_ADC_Init+0x130>)
 8000700:	2224      	movs	r2, #36	; 0x24
 8000702:	2100      	movs	r1, #0
 8000704:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000706:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <MX_ADC_Init+0x130>)
 8000708:	2201      	movs	r2, #1
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800070c:	4b30      	ldr	r3, [pc, #192]	; (80007d0 <MX_ADC_Init+0x130>)
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fec8 	bl	80014a4 <HAL_ADC_Init>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000718:	f000 fb15 	bl	8000d46 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	0152      	lsls	r2, r2, #5
 8000728:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	0552      	lsls	r2, r2, #21
 8000730:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000732:	1d3a      	adds	r2, r7, #4
 8000734:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <MX_ADC_Init+0x130>)
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f001 f88d 	bl	8001858 <HAL_ADC_ConfigChannel>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000742:	f000 fb00 	bl	8000d46 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2203      	movs	r2, #3
 800074a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800074c:	1d3a      	adds	r2, r7, #4
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <MX_ADC_Init+0x130>)
 8000750:	0011      	movs	r1, r2
 8000752:	0018      	movs	r0, r3
 8000754:	f001 f880 	bl	8001858 <HAL_ADC_ConfigChannel>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 800075c:	f000 faf3 	bl	8000d46 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2204      	movs	r2, #4
 8000764:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000766:	1d3a      	adds	r2, r7, #4
 8000768:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MX_ADC_Init+0x130>)
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f001 f873 	bl	8001858 <HAL_ADC_ConfigChannel>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000776:	f000 fae6 	bl	8000d46 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2209      	movs	r2, #9
 800077e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000780:	1d3a      	adds	r2, r7, #4
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_ADC_Init+0x130>)
 8000784:	0011      	movs	r1, r2
 8000786:	0018      	movs	r0, r3
 8000788:	f001 f866 	bl	8001858 <HAL_ADC_ConfigChannel>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000790:	f000 fad9 	bl	8000d46 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2210      	movs	r2, #16
 8000798:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800079a:	1d3a      	adds	r2, r7, #4
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_ADC_Init+0x130>)
 800079e:	0011      	movs	r1, r2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 f859 	bl	8001858 <HAL_ADC_ConfigChannel>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 80007aa:	f000 facc 	bl	8000d46 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2211      	movs	r2, #17
 80007b2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007b4:	1d3a      	adds	r2, r7, #4
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_ADC_Init+0x130>)
 80007b8:	0011      	movs	r1, r2
 80007ba:	0018      	movs	r0, r3
 80007bc:	f001 f84c 	bl	8001858 <HAL_ADC_ConfigChannel>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 80007c4:	f000 fabf 	bl	8000d46 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b004      	add	sp, #16
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000a8 	.word	0x200000a8
 80007d4:	40012400 	.word	0x40012400

080007d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_I2C1_Init+0x74>)
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <MX_I2C1_Init+0x78>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_I2C1_Init+0x74>)
 80007e4:	4a1b      	ldr	r2, [pc, #108]	; (8000854 <MX_I2C1_Init+0x7c>)
 80007e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 18;
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_I2C1_Init+0x74>)
 80007ea:	2212      	movs	r2, #18
 80007ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_I2C1_Init+0x74>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_I2C1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_I2C1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_I2C1_Init+0x74>)
 8000814:	0018      	movs	r0, r3
 8000816:	f001 fe83 	bl	8002520 <HAL_I2C_Init>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800081e:	f000 fa92 	bl	8000d46 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_I2C1_Init+0x74>)
 8000824:	2100      	movs	r1, #0
 8000826:	0018      	movs	r0, r3
 8000828:	f003 fa42 	bl	8003cb0 <HAL_I2CEx_ConfigAnalogFilter>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d001      	beq.n	8000834 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000830:	f000 fa89 	bl	8000d46 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <MX_I2C1_Init+0x74>)
 8000836:	2100      	movs	r1, #0
 8000838:	0018      	movs	r0, r3
 800083a:	f003 fa85 	bl	8003d48 <HAL_I2CEx_ConfigDigitalFilter>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000842:	f000 fa80 	bl	8000d46 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000012c 	.word	0x2000012c
 8000850:	40005400 	.word	0x40005400
 8000854:	2000090e 	.word	0x2000090e

08000858 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_SPI1_Init+0x74>)
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <MX_SPI1_Init+0x78>)
 8000860:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_SPI1_Init+0x74>)
 8000864:	2282      	movs	r2, #130	; 0x82
 8000866:	0052      	lsls	r2, r2, #1
 8000868:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_SPI1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_SPI1_Init+0x74>)
 8000872:	22c0      	movs	r2, #192	; 0xc0
 8000874:	0092      	lsls	r2, r2, #2
 8000876:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_SPI1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_SPI1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_SPI1_Init+0x74>)
 8000886:	2280      	movs	r2, #128	; 0x80
 8000888:	0092      	lsls	r2, r2, #2
 800088a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_SPI1_Init+0x74>)
 800088e:	2218      	movs	r2, #24
 8000890:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_SPI1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_SPI1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_SPI1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_SPI1_Init+0x74>)
 80008a6:	2207      	movs	r2, #7
 80008a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_SPI1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_SPI1_Init+0x74>)
 80008b2:	2208      	movs	r2, #8
 80008b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <MX_SPI1_Init+0x74>)
 80008b8:	0018      	movs	r0, r3
 80008ba:	f003 ffcb 	bl	8004854 <HAL_SPI_Init>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008c2:	f000 fa40 	bl	8000d46 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000178 	.word	0x20000178
 80008d0:	40013000 	.word	0x40013000

080008d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b09a      	sub	sp, #104	; 0x68
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008da:	2358      	movs	r3, #88	; 0x58
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	0018      	movs	r0, r3
 80008e0:	2310      	movs	r3, #16
 80008e2:	001a      	movs	r2, r3
 80008e4:	2100      	movs	r1, #0
 80008e6:	f005 fc2b 	bl	8006140 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008ea:	2344      	movs	r3, #68	; 0x44
 80008ec:	18fb      	adds	r3, r7, r3
 80008ee:	0018      	movs	r0, r3
 80008f0:	2314      	movs	r3, #20
 80008f2:	001a      	movs	r2, r3
 80008f4:	2100      	movs	r1, #0
 80008f6:	f005 fc23 	bl	8006140 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fa:	233c      	movs	r3, #60	; 0x3c
 80008fc:	18fb      	adds	r3, r7, r3
 80008fe:	0018      	movs	r0, r3
 8000900:	2308      	movs	r3, #8
 8000902:	001a      	movs	r2, r3
 8000904:	2100      	movs	r1, #0
 8000906:	f005 fc1b 	bl	8006140 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090a:	2320      	movs	r3, #32
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	0018      	movs	r0, r3
 8000910:	231c      	movs	r3, #28
 8000912:	001a      	movs	r2, r3
 8000914:	2100      	movs	r1, #0
 8000916:	f005 fc13 	bl	8006140 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800091a:	003b      	movs	r3, r7
 800091c:	0018      	movs	r0, r3
 800091e:	2320      	movs	r3, #32
 8000920:	001a      	movs	r2, r3
 8000922:	2100      	movs	r1, #0
 8000924:	f005 fc0c 	bl	8006140 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000928:	4b60      	ldr	r3, [pc, #384]	; (8000aac <MX_TIM1_Init+0x1d8>)
 800092a:	4a61      	ldr	r2, [pc, #388]	; (8000ab0 <MX_TIM1_Init+0x1dc>)
 800092c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 800092e:	4b5f      	ldr	r3, [pc, #380]	; (8000aac <MX_TIM1_Init+0x1d8>)
 8000930:	2204      	movs	r2, #4
 8000932:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000934:	4b5d      	ldr	r3, [pc, #372]	; (8000aac <MX_TIM1_Init+0x1d8>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 800093a:	4b5c      	ldr	r3, [pc, #368]	; (8000aac <MX_TIM1_Init+0x1d8>)
 800093c:	4a5d      	ldr	r2, [pc, #372]	; (8000ab4 <MX_TIM1_Init+0x1e0>)
 800093e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000940:	4b5a      	ldr	r3, [pc, #360]	; (8000aac <MX_TIM1_Init+0x1d8>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000946:	4b59      	ldr	r3, [pc, #356]	; (8000aac <MX_TIM1_Init+0x1d8>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094c:	4b57      	ldr	r3, [pc, #348]	; (8000aac <MX_TIM1_Init+0x1d8>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000952:	4b56      	ldr	r3, [pc, #344]	; (8000aac <MX_TIM1_Init+0x1d8>)
 8000954:	0018      	movs	r0, r3
 8000956:	f004 f835 	bl	80049c4 <HAL_TIM_Base_Init>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800095e:	f000 f9f2 	bl	8000d46 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000962:	2158      	movs	r1, #88	; 0x58
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	0152      	lsls	r2, r2, #5
 800096a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800096c:	187a      	adds	r2, r7, r1
 800096e:	4b4f      	ldr	r3, [pc, #316]	; (8000aac <MX_TIM1_Init+0x1d8>)
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f004 fa40 	bl	8004df8 <HAL_TIM_ConfigClockSource>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800097c:	f000 f9e3 	bl	8000d46 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000980:	4b4a      	ldr	r3, [pc, #296]	; (8000aac <MX_TIM1_Init+0x1d8>)
 8000982:	0018      	movs	r0, r3
 8000984:	f004 f86e 	bl	8004a64 <HAL_TIM_PWM_Init>
 8000988:	1e03      	subs	r3, r0, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800098c:	f000 f9db 	bl	8000d46 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000990:	2144      	movs	r1, #68	; 0x44
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2205      	movs	r2, #5
 8000996:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2270      	movs	r2, #112	; 0x70
 800099c:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	0212      	lsls	r2, r2, #8
 80009a4:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
  sSlaveConfig.TriggerFilter = 0;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80009b2:	187a      	adds	r2, r7, r1
 80009b4:	4b3d      	ldr	r3, [pc, #244]	; (8000aac <MX_TIM1_Init+0x1d8>)
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f004 faf1 	bl	8004fa0 <HAL_TIM_SlaveConfigSynchro>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80009c2:	f000 f9c0 	bl	8000d46 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c6:	213c      	movs	r1, #60	; 0x3c
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009d4:	187a      	adds	r2, r7, r1
 80009d6:	4b35      	ldr	r3, [pc, #212]	; (8000aac <MX_TIM1_Init+0x1d8>)
 80009d8:	0011      	movs	r1, r2
 80009da:	0018      	movs	r0, r3
 80009dc:	f004 fecc 	bl	8005778 <HAL_TIMEx_MasterConfigSynchronization>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80009e4:	f000 f9af 	bl	8000d46 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e8:	2120      	movs	r1, #32
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2260      	movs	r2, #96	; 0x60
 80009ee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2200      	movs	r2, #0
 80009f4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	0092      	lsls	r2, r2, #2
 8000a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a16:	1879      	adds	r1, r7, r1
 8000a18:	4b24      	ldr	r3, [pc, #144]	; (8000aac <MX_TIM1_Init+0x1d8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f004 f925 	bl	8004c6c <HAL_TIM_PWM_ConfigChannel>
 8000a22:	1e03      	subs	r3, r0, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8000a26:	f000 f98e 	bl	8000d46 <Error_Handler>
  }
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a2a:	2120      	movs	r1, #32
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a32:	1879      	adds	r1, r7, r1
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_TIM1_Init+0x1d8>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f004 f917 	bl	8004c6c <HAL_TIM_PWM_ConfigChannel>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000a42:	f000 f980 	bl	8000d46 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a46:	2320      	movs	r3, #32
 8000a48:	18f9      	adds	r1, r7, r3
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_TIM1_Init+0x1d8>)
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f004 f90c 	bl	8004c6c <HAL_TIM_PWM_ConfigChannel>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000a58:	f000 f975 	bl	8000d46 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a5c:	003b      	movs	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a62:	003b      	movs	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a68:	003b      	movs	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 40;
 8000a6e:	003b      	movs	r3, r7
 8000a70:	2228      	movs	r2, #40	; 0x28
 8000a72:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a74:	003b      	movs	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	0192      	lsls	r2, r2, #6
 8000a80:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a82:	003b      	movs	r3, r7
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a88:	003a      	movs	r2, r7
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_TIM1_Init+0x1d8>)
 8000a8c:	0011      	movs	r1, r2
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f004 feca 	bl	8005828 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM1_Init+0x1c8>
  {
    Error_Handler();
 8000a98:	f000 f955 	bl	8000d46 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <MX_TIM1_Init+0x1d8>)
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 fb22 	bl	80010e8 <HAL_TIM_MspPostInit>

}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b01a      	add	sp, #104	; 0x68
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200001dc 	.word	0x200001dc
 8000ab0:	40012c00 	.word	0x40012c00
 8000ab4:	000003ff 	.word	0x000003ff

08000ab8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_USART1_UART_Init+0x5c>)
 8000abe:	4a16      	ldr	r2, [pc, #88]	; (8000b18 <MX_USART1_UART_Init+0x60>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_USART1_UART_Init+0x5c>)
 8000ac4:	22e1      	movs	r2, #225	; 0xe1
 8000ac6:	0252      	lsls	r2, r2, #9
 8000ac8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_USART1_UART_Init+0x5c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <MX_USART1_UART_Init+0x5c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_USART1_UART_Init+0x5c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <MX_USART1_UART_Init+0x5c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_USART1_UART_Init+0x5c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <MX_USART1_UART_Init+0x5c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_USART1_UART_Init+0x5c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <MX_USART1_UART_Init+0x5c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000afa:	4806      	ldr	r0, [pc, #24]	; (8000b14 <MX_USART1_UART_Init+0x5c>)
 8000afc:	2300      	movs	r3, #0
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	f005 fa83 	bl	800600c <HAL_RS485Ex_Init>
 8000b06:	1e03      	subs	r3, r0, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000b0a:	f000 f91c 	bl	8000d46 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000224 	.word	0x20000224
 8000b18:	40013800 	.word	0x40013800

08000b1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_DMA_Init+0x38>)
 8000b24:	695a      	ldr	r2, [r3, #20]
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_DMA_Init+0x38>)
 8000b28:	2101      	movs	r1, #1
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	615a      	str	r2, [r3, #20]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_DMA_Init+0x38>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	2201      	movs	r2, #1
 8000b34:	4013      	ands	r3, r2
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2009      	movs	r0, #9
 8000b40:	f001 f94c 	bl	8001ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b44:	2009      	movs	r0, #9
 8000b46:	f001 f95e 	bl	8001e06 <HAL_NVIC_EnableIRQ>

}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b002      	add	sp, #8
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	40021000 	.word	0x40021000

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	240c      	movs	r4, #12
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	0018      	movs	r0, r3
 8000b64:	2314      	movs	r3, #20
 8000b66:	001a      	movs	r2, r3
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f005 fae9 	bl	8006140 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <MX_GPIO_Init+0xc8>)
 8000b70:	695a      	ldr	r2, [r3, #20]
 8000b72:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <MX_GPIO_Init+0xc8>)
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	03c9      	lsls	r1, r1, #15
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <MX_GPIO_Init+0xc8>)
 8000b7e:	695a      	ldr	r2, [r3, #20]
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	03db      	lsls	r3, r3, #15
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <MX_GPIO_Init+0xc8>)
 8000b8c:	695a      	ldr	r2, [r3, #20]
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <MX_GPIO_Init+0xc8>)
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	0289      	lsls	r1, r1, #10
 8000b94:	430a      	orrs	r2, r1
 8000b96:	615a      	str	r2, [r3, #20]
 8000b98:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <MX_GPIO_Init+0xc8>)
 8000b9a:	695a      	ldr	r2, [r3, #20]
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	029b      	lsls	r3, r3, #10
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <MX_GPIO_Init+0xc8>)
 8000ba8:	695a      	ldr	r2, [r3, #20]
 8000baa:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <MX_GPIO_Init+0xc8>)
 8000bac:	2180      	movs	r1, #128	; 0x80
 8000bae:	02c9      	lsls	r1, r1, #11
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	615a      	str	r2, [r3, #20]
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_GPIO_Init+0xc8>)
 8000bb6:	695a      	ldr	r2, [r3, #20]
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	02db      	lsls	r3, r3, #11
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin|MAG_NCS_Pin|OC_TH_STBY2_Pin|OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_GPIO_Init+0xcc>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	21c3      	movs	r1, #195	; 0xc3
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f001 fc8b 	bl	80024e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_STATUS_Pin MAG_NCS_Pin OC_TH_STBY2_Pin OC_TH_STBY1_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|MAG_NCS_Pin|OC_TH_STBY2_Pin|OC_TH_STBY1_Pin;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	22c3      	movs	r2, #195	; 0xc3
 8000bd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <MX_GPIO_Init+0xcc>)
 8000bea:	0019      	movs	r1, r3
 8000bec:	0010      	movs	r0, r2
 8000bee:	f001 fb11 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : OC_SEL_Pin */
  GPIO_InitStruct.Pin = OC_SEL_Pin;
 8000bf2:	0021      	movs	r1, r4
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2280      	movs	r2, #128	; 0x80
 8000bf8:	0112      	lsls	r2, r2, #4
 8000bfa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8000c08:	187a      	adds	r2, r7, r1
 8000c0a:	2390      	movs	r3, #144	; 0x90
 8000c0c:	05db      	lsls	r3, r3, #23
 8000c0e:	0011      	movs	r1, r2
 8000c10:	0018      	movs	r0, r3
 8000c12:	f001 faff 	bl	8002214 <HAL_GPIO_Init>

}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b009      	add	sp, #36	; 0x24
 8000c1c:	bd90      	pop	{r4, r7, pc}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	40021000 	.word	0x40021000
 8000c24:	48001400 	.word	0x48001400

08000c28 <Serialprint>:

/**
  * @brief  Sends a message over Serial (UART TX) for debugging.
  * @param  message: The string to send
 */
void Serialprint(char *message){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 1000);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	0018      	movs	r0, r3
 8000c34:	f7ff fa68 	bl	8000108 <strlen>
 8000c38:	0003      	movs	r3, r0
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	23fa      	movs	r3, #250	; 0xfa
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <Serialprint+0x28>)
 8000c44:	f004 fe4e 	bl	80058e4 <HAL_UART_Transmit>
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b002      	add	sp, #8
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000224 	.word	0x20000224

08000c54 <HAL_I2C_SlaveTxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Tx transfer, and
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  Xfer_Complete = 1;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_I2C_SlaveTxCpltCallback+0x18>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	20000090 	.word	0x20000090

08000c70 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  I2cHandle: I2C handle
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_I2C_AddrCallback>:
  *                the configuration information for the specified I2C.
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	0008      	movs	r0, r1
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	1cfb      	adds	r3, r7, #3
 8000c8e:	1c02      	adds	r2, r0, #0
 8000c90:	701a      	strb	r2, [r3, #0]
 8000c92:	003b      	movs	r3, r7
 8000c94:	1c0a      	adds	r2, r1, #0
 8000c96:	801a      	strh	r2, [r3, #0]


  Transfer_Direction = TransferDirection;
 8000c98:	1cfb      	adds	r3, r7, #3
 8000c9a:	781a      	ldrb	r2, [r3, #0]
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_I2C_AddrCallback+0x84>)
 8000c9e:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status;
  if (Transfer_Direction != 0){
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_I2C_AddrCallback+0x84>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d00b      	beq.n	8000cc0 <HAL_I2C_AddrCallback+0x40>
     /*##- Start the transmission process #####################################*/
	  /* While the I2C in reception process, user can transmit data through "aTxBuffer" buffer */
	  status = HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)aTxBuffer, BUFFERSIZE, I2C_FIRST_AND_LAST_FRAME);
 8000ca8:	230f      	movs	r3, #15
 8000caa:	18fc      	adds	r4, r7, r3
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	049b      	lsls	r3, r3, #18
 8000cb0:	4915      	ldr	r1, [pc, #84]	; (8000d08 <HAL_I2C_AddrCallback+0x88>)
 8000cb2:	4816      	ldr	r0, [pc, #88]	; (8000d0c <HAL_I2C_AddrCallback+0x8c>)
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	f001 fcc9 	bl	800264c <HAL_I2C_Slave_Seq_Transmit_IT>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	7023      	strb	r3, [r4, #0]
 8000cbe:	e016      	b.n	8000cee <HAL_I2C_AddrCallback+0x6e>


  }else{
      /*##- Put I2C peripheral in reception process ###########################*/
	  status = HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)aRxBuffer, BUFFERSIZE, I2C_FIRST_AND_LAST_FRAME);
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	18fc      	adds	r4, r7, r3
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	049b      	lsls	r3, r3, #18
 8000cc8:	4911      	ldr	r1, [pc, #68]	; (8000d10 <HAL_I2C_AddrCallback+0x90>)
 8000cca:	4810      	ldr	r0, [pc, #64]	; (8000d0c <HAL_I2C_AddrCallback+0x8c>)
 8000ccc:	2202      	movs	r2, #2
 8000cce:	f001 fd6d 	bl	80027ac <HAL_I2C_Slave_Seq_Receive_IT>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	7023      	strb	r3, [r4, #0]

	  aTxBuffer[0] = aRxBuffer[0] + 1;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_I2C_AddrCallback+0x90>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_I2C_AddrCallback+0x88>)
 8000ce0:	701a      	strb	r2, [r3, #0]
	  aTxBuffer[1] = aRxBuffer[1] + 1;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_I2C_AddrCallback+0x90>)
 8000ce4:	785b      	ldrb	r3, [r3, #1]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <HAL_I2C_AddrCallback+0x88>)
 8000cec:	705a      	strb	r2, [r3, #1]
//	  Xfer_Complete = 1;


  }
  if(status != HAL_OK){
 8000cee:	230f      	movs	r3, #15
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_I2C_AddrCallback+0x7c>
	  Error_Handler();
 8000cf8:	f000 f825 	bl	8000d46 <Error_Handler>
  }

}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b005      	add	sp, #20
 8000d02:	bd90      	pop	{r4, r7, pc}
 8000d04:	2000008c 	.word	0x2000008c
 8000d08:	20000094 	.word	0x20000094
 8000d0c:	2000012c 	.word	0x2000012c
 8000d10:	20000098 	.word	0x20000098

08000d14 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_I2C_ErrorCallback>:
  * @param  I2cHandle: I2C handle
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF){
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f001 feb4 	bl	8002a9c <HAL_I2C_GetError>
 8000d34:	0003      	movs	r3, r0
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	d001      	beq.n	8000d3e <HAL_I2C_ErrorCallback+0x1a>
    Error_Handler();
 8000d3a:	f000 f804 	bl	8000d46 <Error_Handler>
  }
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b002      	add	sp, #8
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4a:	b672      	cpsid	i
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();		//disable interrupts
	NVIC_SystemReset(); //reset microcontroller, clearing any I2C faults. Maybe change to only
 8000d4e:	f7ff fb63 	bl	8000418 <__NVIC_SystemReset>
	...

08000d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_MspInit+0x44>)
 8000d5c:	699a      	ldr	r2, [r3, #24]
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_MspInit+0x44>)
 8000d60:	2101      	movs	r1, #1
 8000d62:	430a      	orrs	r2, r1
 8000d64:	619a      	str	r2, [r3, #24]
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_MspInit+0x44>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_MspInit+0x44>)
 8000d74:	69da      	ldr	r2, [r3, #28]
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_MspInit+0x44>)
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	0549      	lsls	r1, r1, #21
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	61da      	str	r2, [r3, #28]
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <HAL_MspInit+0x44>)
 8000d82:	69da      	ldr	r2, [r3, #28]
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	055b      	lsls	r3, r3, #21
 8000d88:	4013      	ands	r3, r2
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	40021000 	.word	0x40021000

08000d9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b08b      	sub	sp, #44	; 0x2c
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	2414      	movs	r4, #20
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	0018      	movs	r0, r3
 8000daa:	2314      	movs	r3, #20
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f005 f9c6 	bl	8006140 <memset>
  if(hadc->Instance==ADC1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a3b      	ldr	r2, [pc, #236]	; (8000ea8 <HAL_ADC_MspInit+0x10c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d170      	bne.n	8000ea0 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dbe:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <HAL_ADC_MspInit+0x110>)
 8000dc0:	699a      	ldr	r2, [r3, #24]
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <HAL_ADC_MspInit+0x110>)
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	0089      	lsls	r1, r1, #2
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	619a      	str	r2, [r3, #24]
 8000dcc:	4b37      	ldr	r3, [pc, #220]	; (8000eac <HAL_ADC_MspInit+0x110>)
 8000dce:	699a      	ldr	r2, [r3, #24]
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b34      	ldr	r3, [pc, #208]	; (8000eac <HAL_ADC_MspInit+0x110>)
 8000ddc:	695a      	ldr	r2, [r3, #20]
 8000dde:	4b33      	ldr	r3, [pc, #204]	; (8000eac <HAL_ADC_MspInit+0x110>)
 8000de0:	2180      	movs	r1, #128	; 0x80
 8000de2:	0289      	lsls	r1, r1, #10
 8000de4:	430a      	orrs	r2, r1
 8000de6:	615a      	str	r2, [r3, #20]
 8000de8:	4b30      	ldr	r3, [pc, #192]	; (8000eac <HAL_ADC_MspInit+0x110>)
 8000dea:	695a      	ldr	r2, [r3, #20]
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	029b      	lsls	r3, r3, #10
 8000df0:	4013      	ands	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <HAL_ADC_MspInit+0x110>)
 8000df8:	695a      	ldr	r2, [r3, #20]
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <HAL_ADC_MspInit+0x110>)
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	02c9      	lsls	r1, r1, #11
 8000e00:	430a      	orrs	r2, r1
 8000e02:	615a      	str	r2, [r3, #20]
 8000e04:	4b29      	ldr	r3, [pc, #164]	; (8000eac <HAL_ADC_MspInit+0x110>)
 8000e06:	695a      	ldr	r2, [r3, #20]
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	02db      	lsls	r3, r3, #11
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC_IN0
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = OP_V_O_Pin|OP_W_O_Pin|GPIO_PIN_4;
 8000e12:	193b      	adds	r3, r7, r4
 8000e14:	2219      	movs	r2, #25
 8000e16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e18:	193b      	adds	r3, r7, r4
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	193b      	adds	r3, r7, r4
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	193a      	adds	r2, r7, r4
 8000e26:	2390      	movs	r3, #144	; 0x90
 8000e28:	05db      	lsls	r3, r3, #23
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f001 f9f1 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OP_U_O_Pin;
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	2202      	movs	r2, #2
 8000e36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	193b      	adds	r3, r7, r4
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(OP_U_O_GPIO_Port, &GPIO_InitStruct);
 8000e44:	193b      	adds	r3, r7, r4
 8000e46:	4a1a      	ldr	r2, [pc, #104]	; (8000eb0 <HAL_ADC_MspInit+0x114>)
 8000e48:	0019      	movs	r1, r3
 8000e4a:	0010      	movs	r0, r2
 8000e4c:	f001 f9e2 	bl	8002214 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000e52:	4a19      	ldr	r2, [pc, #100]	; (8000eb8 <HAL_ADC_MspInit+0x11c>)
 8000e54:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000e64:	2280      	movs	r2, #128	; 0x80
 8000e66:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	0052      	lsls	r2, r2, #1
 8000e6e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	00d2      	lsls	r2, r2, #3
 8000e76:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000e7a:	2220      	movs	r2, #32
 8000e7c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000e86:	0018      	movs	r0, r3
 8000e88:	f000 ffda 	bl	8001e40 <HAL_DMA_Init>
 8000e8c:	1e03      	subs	r3, r0, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000e90:	f7ff ff59 	bl	8000d46 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000e98:	631a      	str	r2, [r3, #48]	; 0x30
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b00b      	add	sp, #44	; 0x2c
 8000ea6:	bd90      	pop	{r4, r7, pc}
 8000ea8:	40012400 	.word	0x40012400
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	48000400 	.word	0x48000400
 8000eb4:	200000e8 	.word	0x200000e8
 8000eb8:	40020008 	.word	0x40020008

08000ebc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b08b      	sub	sp, #44	; 0x2c
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	2414      	movs	r4, #20
 8000ec6:	193b      	adds	r3, r7, r4
 8000ec8:	0018      	movs	r0, r3
 8000eca:	2314      	movs	r3, #20
 8000ecc:	001a      	movs	r2, r3
 8000ece:	2100      	movs	r1, #0
 8000ed0:	f005 f936 	bl	8006140 <memset>
  if(hi2c->Instance==I2C1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a20      	ldr	r2, [pc, #128]	; (8000f5c <HAL_I2C_MspInit+0xa0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d139      	bne.n	8000f52 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <HAL_I2C_MspInit+0xa4>)
 8000ee0:	695a      	ldr	r2, [r3, #20]
 8000ee2:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <HAL_I2C_MspInit+0xa4>)
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	02c9      	lsls	r1, r1, #11
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	615a      	str	r2, [r3, #20]
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <HAL_I2C_MspInit+0xa4>)
 8000eee:	695a      	ldr	r2, [r3, #20]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	02db      	lsls	r3, r3, #11
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000efa:	0021      	movs	r1, r4
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	22c0      	movs	r2, #192	; 0xc0
 8000f00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2212      	movs	r2, #18
 8000f06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2203      	movs	r2, #3
 8000f12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2201      	movs	r2, #1
 8000f18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	4a11      	ldr	r2, [pc, #68]	; (8000f64 <HAL_I2C_MspInit+0xa8>)
 8000f1e:	0019      	movs	r1, r3
 8000f20:	0010      	movs	r0, r2
 8000f22:	f001 f977 	bl	8002214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_I2C_MspInit+0xa4>)
 8000f28:	69da      	ldr	r2, [r3, #28]
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_I2C_MspInit+0xa4>)
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	0389      	lsls	r1, r1, #14
 8000f30:	430a      	orrs	r2, r1
 8000f32:	61da      	str	r2, [r3, #28]
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_I2C_MspInit+0xa4>)
 8000f36:	69da      	ldr	r2, [r3, #28]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	039b      	lsls	r3, r3, #14
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2017      	movs	r0, #23
 8000f48:	f000 ff48 	bl	8001ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000f4c:	2017      	movs	r0, #23
 8000f4e:	f000 ff5a 	bl	8001e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b00b      	add	sp, #44	; 0x2c
 8000f58:	bd90      	pop	{r4, r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	40005400 	.word	0x40005400
 8000f60:	40021000 	.word	0x40021000
 8000f64:	48000400 	.word	0x48000400

08000f68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b08b      	sub	sp, #44	; 0x2c
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	2414      	movs	r4, #20
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	0018      	movs	r0, r3
 8000f76:	2314      	movs	r3, #20
 8000f78:	001a      	movs	r2, r3
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	f005 f8e0 	bl	8006140 <memset>
  if(hspi->Instance==SPI1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <HAL_SPI_MspInit+0x90>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d132      	bne.n	8000ff0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <HAL_SPI_MspInit+0x94>)
 8000f8c:	699a      	ldr	r2, [r3, #24]
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_SPI_MspInit+0x94>)
 8000f90:	2180      	movs	r1, #128	; 0x80
 8000f92:	0149      	lsls	r1, r1, #5
 8000f94:	430a      	orrs	r2, r1
 8000f96:	619a      	str	r2, [r3, #24]
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_SPI_MspInit+0x94>)
 8000f9a:	699a      	ldr	r2, [r3, #24]
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	015b      	lsls	r3, r3, #5
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_SPI_MspInit+0x94>)
 8000fa8:	695a      	ldr	r2, [r3, #20]
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <HAL_SPI_MspInit+0x94>)
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	0289      	lsls	r1, r1, #10
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	615a      	str	r2, [r3, #20]
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_SPI_MspInit+0x94>)
 8000fb6:	695a      	ldr	r2, [r3, #20]
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	029b      	lsls	r3, r3, #10
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fc2:	0021      	movs	r1, r4
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	22e0      	movs	r2, #224	; 0xe0
 8000fc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2202      	movs	r2, #2
 8000fce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	187a      	adds	r2, r7, r1
 8000fe4:	2390      	movs	r3, #144	; 0x90
 8000fe6:	05db      	lsls	r3, r3, #23
 8000fe8:	0011      	movs	r1, r2
 8000fea:	0018      	movs	r0, r3
 8000fec:	f001 f912 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b00b      	add	sp, #44	; 0x2c
 8000ff6:	bd90      	pop	{r4, r7, pc}
 8000ff8:	40013000 	.word	0x40013000
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b08b      	sub	sp, #44	; 0x2c
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	2414      	movs	r4, #20
 800100a:	193b      	adds	r3, r7, r4
 800100c:	0018      	movs	r0, r3
 800100e:	2314      	movs	r3, #20
 8001010:	001a      	movs	r2, r3
 8001012:	2100      	movs	r1, #0
 8001014:	f005 f894 	bl	8006140 <memset>
  if(htim_base->Instance==TIM1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a2f      	ldr	r2, [pc, #188]	; (80010dc <HAL_TIM_Base_MspInit+0xdc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d157      	bne.n	80010d2 <HAL_TIM_Base_MspInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001022:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <HAL_TIM_Base_MspInit+0xe0>)
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <HAL_TIM_Base_MspInit+0xe0>)
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	0109      	lsls	r1, r1, #4
 800102c:	430a      	orrs	r2, r1
 800102e:	619a      	str	r2, [r3, #24]
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <HAL_TIM_Base_MspInit+0xe0>)
 8001032:	699a      	ldr	r2, [r3, #24]
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <HAL_TIM_Base_MspInit+0xe0>)
 8001040:	695a      	ldr	r2, [r3, #20]
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <HAL_TIM_Base_MspInit+0xe0>)
 8001044:	2180      	movs	r1, #128	; 0x80
 8001046:	02c9      	lsls	r1, r1, #11
 8001048:	430a      	orrs	r2, r1
 800104a:	615a      	str	r2, [r3, #20]
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <HAL_TIM_Base_MspInit+0xe0>)
 800104e:	695a      	ldr	r2, [r3, #20]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	02db      	lsls	r3, r3, #11
 8001054:	4013      	ands	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <HAL_TIM_Base_MspInit+0xe0>)
 800105c:	695a      	ldr	r2, [r3, #20]
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <HAL_TIM_Base_MspInit+0xe0>)
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	0289      	lsls	r1, r1, #10
 8001064:	430a      	orrs	r2, r1
 8001066:	615a      	str	r2, [r3, #20]
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <HAL_TIM_Base_MspInit+0xe0>)
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	029b      	lsls	r3, r3, #10
 8001070:	4013      	ands	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 8001076:	193b      	adds	r3, r7, r4
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	0152      	lsls	r2, r2, #5
 800107c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	193b      	adds	r3, r7, r4
 8001080:	2202      	movs	r2, #2
 8001082:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	193b      	adds	r3, r7, r4
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001090:	193b      	adds	r3, r7, r4
 8001092:	2202      	movs	r2, #2
 8001094:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(OC_COMP_INT_GPIO_Port, &GPIO_InitStruct);
 8001096:	193b      	adds	r3, r7, r4
 8001098:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <HAL_TIM_Base_MspInit+0xe4>)
 800109a:	0019      	movs	r1, r3
 800109c:	0010      	movs	r0, r2
 800109e:	f001 f8b9 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OC_COMP_INT2_Pin;
 80010a2:	0021      	movs	r1, r4
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	0152      	lsls	r2, r2, #5
 80010aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2202      	movs	r2, #2
 80010b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80010be:	187b      	adds	r3, r7, r1
 80010c0:	2202      	movs	r2, #2
 80010c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(OC_COMP_INT2_GPIO_Port, &GPIO_InitStruct);
 80010c4:	187a      	adds	r2, r7, r1
 80010c6:	2390      	movs	r3, #144	; 0x90
 80010c8:	05db      	lsls	r3, r3, #23
 80010ca:	0011      	movs	r1, r2
 80010cc:	0018      	movs	r0, r3
 80010ce:	f001 f8a1 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b00b      	add	sp, #44	; 0x2c
 80010d8:	bd90      	pop	{r4, r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	40012c00 	.word	0x40012c00
 80010e0:	40021000 	.word	0x40021000
 80010e4:	48000400 	.word	0x48000400

080010e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b08b      	sub	sp, #44	; 0x2c
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	2414      	movs	r4, #20
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	0018      	movs	r0, r3
 80010f6:	2314      	movs	r3, #20
 80010f8:	001a      	movs	r2, r3
 80010fa:	2100      	movs	r1, #0
 80010fc:	f005 f820 	bl	8006140 <memset>
  if(htim->Instance==TIM1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <HAL_TIM_MspPostInit+0xc0>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d149      	bne.n	800119e <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <HAL_TIM_MspPostInit+0xc4>)
 800110c:	695a      	ldr	r2, [r3, #20]
 800110e:	4b27      	ldr	r3, [pc, #156]	; (80011ac <HAL_TIM_MspPostInit+0xc4>)
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	02c9      	lsls	r1, r1, #11
 8001114:	430a      	orrs	r2, r1
 8001116:	615a      	str	r2, [r3, #20]
 8001118:	4b24      	ldr	r3, [pc, #144]	; (80011ac <HAL_TIM_MspPostInit+0xc4>)
 800111a:	695a      	ldr	r2, [r3, #20]
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	02db      	lsls	r3, r3, #11
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <HAL_TIM_MspPostInit+0xc4>)
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <HAL_TIM_MspPostInit+0xc4>)
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	0289      	lsls	r1, r1, #10
 8001130:	430a      	orrs	r2, r1
 8001132:	615a      	str	r2, [r3, #20]
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <HAL_TIM_MspPostInit+0xc4>)
 8001136:	695a      	ldr	r2, [r3, #20]
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	029b      	lsls	r3, r3, #10
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|LSW_Pin;
 8001142:	193b      	adds	r3, r7, r4
 8001144:	22e0      	movs	r2, #224	; 0xe0
 8001146:	0212      	lsls	r2, r2, #8
 8001148:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	193b      	adds	r3, r7, r4
 800114c:	2202      	movs	r2, #2
 800114e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	193b      	adds	r3, r7, r4
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	193b      	adds	r3, r7, r4
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800115c:	193b      	adds	r3, r7, r4
 800115e:	2202      	movs	r2, #2
 8001160:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	193b      	adds	r3, r7, r4
 8001164:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <HAL_TIM_MspPostInit+0xc8>)
 8001166:	0019      	movs	r1, r3
 8001168:	0010      	movs	r0, r2
 800116a:	f001 f853 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSU_Pin|HSV_Pin|HSW_Pin;
 800116e:	0021      	movs	r1, r4
 8001170:	187b      	adds	r3, r7, r1
 8001172:	22e0      	movs	r2, #224	; 0xe0
 8001174:	00d2      	lsls	r2, r2, #3
 8001176:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	187b      	adds	r3, r7, r1
 800117a:	2202      	movs	r2, #2
 800117c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	187b      	adds	r3, r7, r1
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2202      	movs	r2, #2
 800118e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	187a      	adds	r2, r7, r1
 8001192:	2390      	movs	r3, #144	; 0x90
 8001194:	05db      	lsls	r3, r3, #23
 8001196:	0011      	movs	r1, r2
 8001198:	0018      	movs	r0, r3
 800119a:	f001 f83b 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b00b      	add	sp, #44	; 0x2c
 80011a4:	bd90      	pop	{r4, r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	40012c00 	.word	0x40012c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	48000400 	.word	0x48000400

080011b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b08b      	sub	sp, #44	; 0x2c
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	2414      	movs	r4, #20
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	0018      	movs	r0, r3
 80011c2:	2314      	movs	r3, #20
 80011c4:	001a      	movs	r2, r3
 80011c6:	2100      	movs	r1, #0
 80011c8:	f004 ffba 	bl	8006140 <memset>
  if(huart->Instance==USART1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <HAL_UART_MspInit+0x90>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d132      	bne.n	800123c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <HAL_UART_MspInit+0x94>)
 80011d8:	699a      	ldr	r2, [r3, #24]
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_UART_MspInit+0x94>)
 80011dc:	2180      	movs	r1, #128	; 0x80
 80011de:	01c9      	lsls	r1, r1, #7
 80011e0:	430a      	orrs	r2, r1
 80011e2:	619a      	str	r2, [r3, #24]
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <HAL_UART_MspInit+0x94>)
 80011e6:	699a      	ldr	r2, [r3, #24]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	01db      	lsls	r3, r3, #7
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_UART_MspInit+0x94>)
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_UART_MspInit+0x94>)
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	0289      	lsls	r1, r1, #10
 80011fc:	430a      	orrs	r2, r1
 80011fe:	615a      	str	r2, [r3, #20]
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HAL_UART_MspInit+0x94>)
 8001202:	695a      	ldr	r2, [r3, #20]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	029b      	lsls	r3, r3, #10
 8001208:	4013      	ands	r3, r2
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA1     ------> USART1_DE
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 800120e:	0021      	movs	r1, r4
 8001210:	187b      	adds	r3, r7, r1
 8001212:	4a0e      	ldr	r2, [pc, #56]	; (800124c <HAL_UART_MspInit+0x98>)
 8001214:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	187b      	adds	r3, r7, r1
 8001218:	2202      	movs	r2, #2
 800121a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	187b      	adds	r3, r7, r1
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001222:	187b      	adds	r3, r7, r1
 8001224:	2203      	movs	r2, #3
 8001226:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001228:	187b      	adds	r3, r7, r1
 800122a:	2201      	movs	r2, #1
 800122c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	187a      	adds	r2, r7, r1
 8001230:	2390      	movs	r3, #144	; 0x90
 8001232:	05db      	lsls	r3, r3, #23
 8001234:	0011      	movs	r1, r2
 8001236:	0018      	movs	r0, r3
 8001238:	f000 ffec 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800123c:	46c0      	nop			; (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	b00b      	add	sp, #44	; 0x2c
 8001242:	bd90      	pop	{r4, r7, pc}
 8001244:	40013800 	.word	0x40013800
 8001248:	40021000 	.word	0x40021000
 800124c:	00008006 	.word	0x00008006

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <NMI_Handler+0x4>

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001274:	f000 f8d6 	bl	8001424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <DMA1_Channel1_IRQHandler+0x14>)
 8001286:	0018      	movs	r0, r3
 8001288:	f000 fecd 	bl	8002026 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	200000e8 	.word	0x200000e8

08001298 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <I2C1_IRQHandler+0x2c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	699a      	ldr	r2, [r3, #24]
 80012a2:	23e0      	movs	r3, #224	; 0xe0
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4013      	ands	r3, r2
 80012a8:	d004      	beq.n	80012b4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <I2C1_IRQHandler+0x2c>)
 80012ac:	0018      	movs	r0, r3
 80012ae:	f001 fb6b 	bl	8002988 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80012b2:	e003      	b.n	80012bc <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <I2C1_IRQHandler+0x2c>)
 80012b6:	0018      	movs	r0, r3
 80012b8:	f001 fb4c 	bl	8002954 <HAL_I2C_EV_IRQHandler>
}
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	2000012c 	.word	0x2000012c

080012c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d0:	4a14      	ldr	r2, [pc, #80]	; (8001324 <_sbrk+0x5c>)
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <_sbrk+0x60>)
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <_sbrk+0x64>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	; (8001330 <_sbrk+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	18d3      	adds	r3, r2, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d207      	bcs.n	8001308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f8:	f004 fef8 	bl	80060ec <__errno>
 80012fc:	0003      	movs	r3, r0
 80012fe:	220c      	movs	r2, #12
 8001300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001302:	2301      	movs	r3, #1
 8001304:	425b      	negs	r3, r3
 8001306:	e009      	b.n	800131c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	18d2      	adds	r2, r2, r3
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <_sbrk+0x64>)
 8001318:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	b006      	add	sp, #24
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20001000 	.word	0x20001000
 8001328:	00000400 	.word	0x00000400
 800132c:	200002a8 	.word	0x200002a8
 8001330:	200002c0 	.word	0x200002c0

08001334 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001340:	480d      	ldr	r0, [pc, #52]	; (8001378 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001342:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001344:	480d      	ldr	r0, [pc, #52]	; (800137c <LoopForever+0x6>)
  ldr r1, =_edata
 8001346:	490e      	ldr	r1, [pc, #56]	; (8001380 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001348:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <LoopForever+0xe>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135a:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <LoopForever+0x12>)
  ldr r4, =_ebss
 800135c:	4c0b      	ldr	r4, [pc, #44]	; (800138c <LoopForever+0x16>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800136a:	f7ff ffe3 	bl	8001334 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800136e:	f004 fec3 	bl	80060f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001372:	f7ff f863 	bl	800043c <main>

08001376 <LoopForever>:

LoopForever:
    b LoopForever
 8001376:	e7fe      	b.n	8001376 <LoopForever>
  ldr   r0, =_estack
 8001378:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001384:	08006ac0 	.word	0x08006ac0
  ldr r2, =_sbss
 8001388:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800138c:	200002c0 	.word	0x200002c0

08001390 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_IRQHandler>
	...

08001394 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <HAL_Init+0x24>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_Init+0x24>)
 800139e:	2110      	movs	r1, #16
 80013a0:	430a      	orrs	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 f809 	bl	80013bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013aa:	f7ff fcd3 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	40022000 	.word	0x40022000

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_InitTick+0x5c>)
 80013c6:	681c      	ldr	r4, [r3, #0]
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_InitTick+0x60>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	0019      	movs	r1, r3
 80013ce:	23fa      	movs	r3, #250	; 0xfa
 80013d0:	0098      	lsls	r0, r3, #2
 80013d2:	f7fe feab 	bl	800012c <__udivsi3>
 80013d6:	0003      	movs	r3, r0
 80013d8:	0019      	movs	r1, r3
 80013da:	0020      	movs	r0, r4
 80013dc:	f7fe fea6 	bl	800012c <__udivsi3>
 80013e0:	0003      	movs	r3, r0
 80013e2:	0018      	movs	r0, r3
 80013e4:	f000 fd1f 	bl	8001e26 <HAL_SYSTICK_Config>
 80013e8:	1e03      	subs	r3, r0, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e00f      	b.n	8001410 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d80b      	bhi.n	800140e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	2301      	movs	r3, #1
 80013fa:	425b      	negs	r3, r3
 80013fc:	2200      	movs	r2, #0
 80013fe:	0018      	movs	r0, r3
 8001400:	f000 fcec 	bl	8001ddc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_InitTick+0x64>)
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
}
 8001410:	0018      	movs	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	b003      	add	sp, #12
 8001416:	bd90      	pop	{r4, r7, pc}
 8001418:	20000000 	.word	0x20000000
 800141c:	20000008 	.word	0x20000008
 8001420:	20000004 	.word	0x20000004

08001424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_IncTick+0x1c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	001a      	movs	r2, r3
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_IncTick+0x20>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	18d2      	adds	r2, r2, r3
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <HAL_IncTick+0x20>)
 8001436:	601a      	str	r2, [r3, #0]
}
 8001438:	46c0      	nop			; (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	20000008 	.word	0x20000008
 8001444:	200002ac 	.word	0x200002ac

08001448 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b02      	ldr	r3, [pc, #8]	; (8001458 <HAL_GetTick+0x10>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	0018      	movs	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	200002ac 	.word	0x200002ac

0800145c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff fff0 	bl	8001448 <HAL_GetTick>
 8001468:	0003      	movs	r3, r0
 800146a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3301      	adds	r3, #1
 8001474:	d005      	beq.n	8001482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_Delay+0x44>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	001a      	movs	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	189b      	adds	r3, r3, r2
 8001480:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	f7ff ffe0 	bl	8001448 <HAL_GetTick>
 8001488:	0002      	movs	r2, r0
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	429a      	cmp	r2, r3
 8001492:	d8f7      	bhi.n	8001484 <HAL_Delay+0x28>
  {
  }
}
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	46bd      	mov	sp, r7
 800149a:	b004      	add	sp, #16
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	20000008 	.word	0x20000008

080014a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ac:	230f      	movs	r3, #15
 80014ae:	18fb      	adds	r3, r7, r3
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e125      	b.n	800170e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10a      	bne.n	80014e0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2234      	movs	r2, #52	; 0x34
 80014d4:	2100      	movs	r1, #0
 80014d6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	0018      	movs	r0, r3
 80014dc:	f7ff fc5e 	bl	8000d9c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e4:	2210      	movs	r2, #16
 80014e6:	4013      	ands	r3, r2
 80014e8:	d000      	beq.n	80014ec <HAL_ADC_Init+0x48>
 80014ea:	e103      	b.n	80016f4 <HAL_ADC_Init+0x250>
 80014ec:	230f      	movs	r3, #15
 80014ee:	18fb      	adds	r3, r7, r3
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d000      	beq.n	80014f8 <HAL_ADC_Init+0x54>
 80014f6:	e0fd      	b.n	80016f4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2204      	movs	r2, #4
 8001500:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001502:	d000      	beq.n	8001506 <HAL_ADC_Init+0x62>
 8001504:	e0f6      	b.n	80016f4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150a:	4a83      	ldr	r2, [pc, #524]	; (8001718 <HAL_ADC_Init+0x274>)
 800150c:	4013      	ands	r3, r2
 800150e:	2202      	movs	r2, #2
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2203      	movs	r2, #3
 800151e:	4013      	ands	r3, r2
 8001520:	2b01      	cmp	r3, #1
 8001522:	d112      	bne.n	800154a <HAL_ADC_Init+0xa6>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	4013      	ands	r3, r2
 800152e:	2b01      	cmp	r3, #1
 8001530:	d009      	beq.n	8001546 <HAL_ADC_Init+0xa2>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	401a      	ands	r2, r3
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	429a      	cmp	r2, r3
 8001544:	d101      	bne.n	800154a <HAL_ADC_Init+0xa6>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_ADC_Init+0xa8>
 800154a:	2300      	movs	r3, #0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d116      	bne.n	800157e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2218      	movs	r2, #24
 8001558:	4393      	bics	r3, r2
 800155a:	0019      	movs	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	0899      	lsrs	r1, r3, #2
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4964      	ldr	r1, [pc, #400]	; (800171c <HAL_ADC_Init+0x278>)
 800158a:	400a      	ands	r2, r1
 800158c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7e1b      	ldrb	r3, [r3, #24]
 8001592:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7e5b      	ldrb	r3, [r3, #25]
 8001598:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800159a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7e9b      	ldrb	r3, [r3, #26]
 80015a0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80015a2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d002      	beq.n	80015b2 <HAL_ADC_Init+0x10e>
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	015b      	lsls	r3, r3, #5
 80015b0:	e000      	b.n	80015b4 <HAL_ADC_Init+0x110>
 80015b2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80015b4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80015ba:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_Init+0x124>
 80015c4:	2304      	movs	r3, #4
 80015c6:	e000      	b.n	80015ca <HAL_ADC_Init+0x126>
 80015c8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80015ca:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2124      	movs	r1, #36	; 0x24
 80015d0:	5c5b      	ldrb	r3, [r3, r1]
 80015d2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80015d4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	4313      	orrs	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7edb      	ldrb	r3, [r3, #27]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d115      	bne.n	8001610 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7e9b      	ldrb	r3, [r3, #26]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d105      	bne.n	80015f8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2280      	movs	r2, #128	; 0x80
 80015f0:	0252      	lsls	r2, r2, #9
 80015f2:	4313      	orrs	r3, r2
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	e00b      	b.n	8001610 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015fc:	2220      	movs	r2, #32
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001608:	2201      	movs	r2, #1
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69da      	ldr	r2, [r3, #28]
 8001614:	23c2      	movs	r3, #194	; 0xc2
 8001616:	33ff      	adds	r3, #255	; 0xff
 8001618:	429a      	cmp	r2, r3
 800161a:	d007      	beq.n	800162c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001624:	4313      	orrs	r3, r2
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	4313      	orrs	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68d9      	ldr	r1, [r3, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	430a      	orrs	r2, r1
 800163a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	055b      	lsls	r3, r3, #21
 8001644:	429a      	cmp	r2, r3
 8001646:	d01b      	beq.n	8001680 <HAL_ADC_Init+0x1dc>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	2b01      	cmp	r3, #1
 800164e:	d017      	beq.n	8001680 <HAL_ADC_Init+0x1dc>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	2b02      	cmp	r3, #2
 8001656:	d013      	beq.n	8001680 <HAL_ADC_Init+0x1dc>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	2b03      	cmp	r3, #3
 800165e:	d00f      	beq.n	8001680 <HAL_ADC_Init+0x1dc>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001664:	2b04      	cmp	r3, #4
 8001666:	d00b      	beq.n	8001680 <HAL_ADC_Init+0x1dc>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	2b05      	cmp	r3, #5
 800166e:	d007      	beq.n	8001680 <HAL_ADC_Init+0x1dc>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	2b06      	cmp	r3, #6
 8001676:	d003      	beq.n	8001680 <HAL_ADC_Init+0x1dc>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	2b07      	cmp	r3, #7
 800167e:	d112      	bne.n	80016a6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2107      	movs	r1, #7
 800168c:	438a      	bics	r2, r1
 800168e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6959      	ldr	r1, [r3, #20]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	2207      	movs	r2, #7
 800169c:	401a      	ands	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4a1c      	ldr	r2, [pc, #112]	; (8001720 <HAL_ADC_Init+0x27c>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d10b      	bne.n	80016ce <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c0:	2203      	movs	r2, #3
 80016c2:	4393      	bics	r3, r2
 80016c4:	2201      	movs	r2, #1
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016cc:	e01c      	b.n	8001708 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d2:	2212      	movs	r2, #18
 80016d4:	4393      	bics	r3, r2
 80016d6:	2210      	movs	r2, #16
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e2:	2201      	movs	r2, #1
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80016ea:	230f      	movs	r3, #15
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016f2:	e009      	b.n	8001708 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f8:	2210      	movs	r2, #16
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001700:	230f      	movs	r3, #15
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001708:	230f      	movs	r3, #15
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	781b      	ldrb	r3, [r3, #0]
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b004      	add	sp, #16
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	fffffefd 	.word	0xfffffefd
 800171c:	fffe0219 	.word	0xfffe0219
 8001720:	833fffe7 	.word	0x833fffe7

08001724 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001730:	2317      	movs	r3, #23
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2204      	movs	r2, #4
 8001740:	4013      	ands	r3, r2
 8001742:	d15e      	bne.n	8001802 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2234      	movs	r2, #52	; 0x34
 8001748:	5c9b      	ldrb	r3, [r3, r2]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_ADC_Start_DMA+0x2e>
 800174e:	2302      	movs	r3, #2
 8001750:	e05e      	b.n	8001810 <HAL_ADC_Start_DMA+0xec>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2234      	movs	r2, #52	; 0x34
 8001756:	2101      	movs	r1, #1
 8001758:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	7e5b      	ldrb	r3, [r3, #25]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d007      	beq.n	8001772 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001762:	2317      	movs	r3, #23
 8001764:	18fc      	adds	r4, r7, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	0018      	movs	r0, r3
 800176a:	f000 f983 	bl	8001a74 <ADC_Enable>
 800176e:	0003      	movs	r3, r0
 8001770:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001772:	2317      	movs	r3, #23
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d146      	bne.n	800180a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001780:	4a25      	ldr	r2, [pc, #148]	; (8001818 <HAL_ADC_Start_DMA+0xf4>)
 8001782:	4013      	ands	r3, r2
 8001784:	2280      	movs	r2, #128	; 0x80
 8001786:	0052      	lsls	r2, r2, #1
 8001788:	431a      	orrs	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2234      	movs	r2, #52	; 0x34
 8001798:	2100      	movs	r1, #0
 800179a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	4a1e      	ldr	r2, [pc, #120]	; (800181c <HAL_ADC_Start_DMA+0xf8>)
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_ADC_Start_DMA+0xfc>)
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_ADC_Start_DMA+0x100>)
 80017b2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	221c      	movs	r2, #28
 80017ba:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2110      	movs	r1, #16
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2101      	movs	r1, #1
 80017d8:	430a      	orrs	r2, r1
 80017da:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3340      	adds	r3, #64	; 0x40
 80017e6:	0019      	movs	r1, r3
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f000 fb70 	bl	8001ed0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2104      	movs	r1, #4
 80017fc:	430a      	orrs	r2, r1
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	e003      	b.n	800180a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001802:	2317      	movs	r3, #23
 8001804:	18fb      	adds	r3, r7, r3
 8001806:	2202      	movs	r2, #2
 8001808:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800180a:	2317      	movs	r3, #23
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	781b      	ldrb	r3, [r3, #0]
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b007      	add	sp, #28
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	fffff0fe 	.word	0xfffff0fe
 800181c:	08001b7d 	.word	0x08001b7d
 8001820:	08001c31 	.word	0x08001c31
 8001824:	08001c4f 	.word	0x08001c4f

08001828 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001830:	46c0      	nop			; (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	b002      	add	sp, #8
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001840:	46c0      	nop			; (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	b002      	add	sp, #8
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	b002      	add	sp, #8
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001862:	230f      	movs	r3, #15
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	055b      	lsls	r3, r3, #21
 8001876:	429a      	cmp	r2, r3
 8001878:	d011      	beq.n	800189e <HAL_ADC_ConfigChannel+0x46>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	2b01      	cmp	r3, #1
 8001880:	d00d      	beq.n	800189e <HAL_ADC_ConfigChannel+0x46>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	2b02      	cmp	r3, #2
 8001888:	d009      	beq.n	800189e <HAL_ADC_ConfigChannel+0x46>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	2b03      	cmp	r3, #3
 8001890:	d005      	beq.n	800189e <HAL_ADC_ConfigChannel+0x46>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	2b04      	cmp	r3, #4
 8001898:	d001      	beq.n	800189e <HAL_ADC_ConfigChannel+0x46>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2234      	movs	r2, #52	; 0x34
 80018a2:	5c9b      	ldrb	r3, [r3, r2]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x54>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e0d0      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x1f6>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2234      	movs	r2, #52	; 0x34
 80018b0:	2101      	movs	r1, #1
 80018b2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2204      	movs	r2, #4
 80018bc:	4013      	ands	r3, r2
 80018be:	d000      	beq.n	80018c2 <HAL_ADC_ConfigChannel+0x6a>
 80018c0:	e0b4      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4a64      	ldr	r2, [pc, #400]	; (8001a58 <HAL_ADC_ConfigChannel+0x200>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d100      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x76>
 80018cc:	e082      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2201      	movs	r2, #1
 80018da:	409a      	lsls	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	055b      	lsls	r3, r3, #21
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d037      	beq.n	8001960 <HAL_ADC_ConfigChannel+0x108>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d033      	beq.n	8001960 <HAL_ADC_ConfigChannel+0x108>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d02f      	beq.n	8001960 <HAL_ADC_ConfigChannel+0x108>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	2b03      	cmp	r3, #3
 8001906:	d02b      	beq.n	8001960 <HAL_ADC_ConfigChannel+0x108>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	2b04      	cmp	r3, #4
 800190e:	d027      	beq.n	8001960 <HAL_ADC_ConfigChannel+0x108>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	2b05      	cmp	r3, #5
 8001916:	d023      	beq.n	8001960 <HAL_ADC_ConfigChannel+0x108>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	2b06      	cmp	r3, #6
 800191e:	d01f      	beq.n	8001960 <HAL_ADC_ConfigChannel+0x108>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	2b07      	cmp	r3, #7
 8001926:	d01b      	beq.n	8001960 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	2107      	movs	r1, #7
 8001934:	400b      	ands	r3, r1
 8001936:	429a      	cmp	r2, r3
 8001938:	d012      	beq.n	8001960 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695a      	ldr	r2, [r3, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2107      	movs	r1, #7
 8001946:	438a      	bics	r2, r1
 8001948:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6959      	ldr	r1, [r3, #20]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2207      	movs	r2, #7
 8001956:	401a      	ands	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b10      	cmp	r3, #16
 8001966:	d007      	beq.n	8001978 <HAL_ADC_ConfigChannel+0x120>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b11      	cmp	r3, #17
 800196e:	d003      	beq.n	8001978 <HAL_ADC_ConfigChannel+0x120>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b12      	cmp	r3, #18
 8001976:	d163      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001978:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <HAL_ADC_ConfigChannel+0x204>)
 800197a:	6819      	ldr	r1, [r3, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b10      	cmp	r3, #16
 8001982:	d009      	beq.n	8001998 <HAL_ADC_ConfigChannel+0x140>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b11      	cmp	r3, #17
 800198a:	d102      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x13a>
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	03db      	lsls	r3, r3, #15
 8001990:	e004      	b.n	800199c <HAL_ADC_ConfigChannel+0x144>
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	045b      	lsls	r3, r3, #17
 8001996:	e001      	b.n	800199c <HAL_ADC_ConfigChannel+0x144>
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	041b      	lsls	r3, r3, #16
 800199c:	4a2f      	ldr	r2, [pc, #188]	; (8001a5c <HAL_ADC_ConfigChannel+0x204>)
 800199e:	430b      	orrs	r3, r1
 80019a0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b10      	cmp	r3, #16
 80019a8:	d14a      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019aa:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_ADC_ConfigChannel+0x208>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	492d      	ldr	r1, [pc, #180]	; (8001a64 <HAL_ADC_ConfigChannel+0x20c>)
 80019b0:	0018      	movs	r0, r3
 80019b2:	f7fe fbbb 	bl	800012c <__udivsi3>
 80019b6:	0003      	movs	r3, r0
 80019b8:	001a      	movs	r2, r3
 80019ba:	0013      	movs	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	189b      	adds	r3, r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019c4:	e002      	b.n	80019cc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f9      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x16e>
 80019d2:	e035      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2101      	movs	r1, #1
 80019e0:	4099      	lsls	r1, r3
 80019e2:	000b      	movs	r3, r1
 80019e4:	43d9      	mvns	r1, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	400a      	ands	r2, r1
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b10      	cmp	r3, #16
 80019f4:	d007      	beq.n	8001a06 <HAL_ADC_ConfigChannel+0x1ae>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b11      	cmp	r3, #17
 80019fc:	d003      	beq.n	8001a06 <HAL_ADC_ConfigChannel+0x1ae>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b12      	cmp	r3, #18
 8001a04:	d11c      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_ADC_ConfigChannel+0x204>)
 8001a08:	6819      	ldr	r1, [r3, #0]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b10      	cmp	r3, #16
 8001a10:	d007      	beq.n	8001a22 <HAL_ADC_ConfigChannel+0x1ca>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b11      	cmp	r3, #17
 8001a18:	d101      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x1c6>
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_ADC_ConfigChannel+0x210>)
 8001a1c:	e002      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x1cc>
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_ADC_ConfigChannel+0x214>)
 8001a20:	e000      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x1cc>
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <HAL_ADC_ConfigChannel+0x218>)
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <HAL_ADC_ConfigChannel+0x204>)
 8001a26:	400b      	ands	r3, r1
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e009      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a30:	2220      	movs	r2, #32
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001a38:	230f      	movs	r3, #15
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2234      	movs	r2, #52	; 0x34
 8001a44:	2100      	movs	r1, #0
 8001a46:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001a48:	230f      	movs	r3, #15
 8001a4a:	18fb      	adds	r3, r7, r3
 8001a4c:	781b      	ldrb	r3, [r3, #0]
}
 8001a4e:	0018      	movs	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b004      	add	sp, #16
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	00001001 	.word	0x00001001
 8001a5c:	40012708 	.word	0x40012708
 8001a60:	20000000 	.word	0x20000000
 8001a64:	000f4240 	.word	0x000f4240
 8001a68:	ffbfffff 	.word	0xffbfffff
 8001a6c:	feffffff 	.word	0xfeffffff
 8001a70:	ff7fffff 	.word	0xff7fffff

08001a74 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d112      	bne.n	8001ab8 <ADC_Enable+0x44>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d009      	beq.n	8001ab4 <ADC_Enable+0x40>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	401a      	ands	r2, r3
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d101      	bne.n	8001ab8 <ADC_Enable+0x44>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <ADC_Enable+0x46>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d152      	bne.n	8001b64 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4a2a      	ldr	r2, [pc, #168]	; (8001b70 <ADC_Enable+0xfc>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d00d      	beq.n	8001ae6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ace:	2210      	movs	r2, #16
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ada:	2201      	movs	r2, #1
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e03f      	b.n	8001b66 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2101      	movs	r1, #1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001af6:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <ADC_Enable+0x100>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	491f      	ldr	r1, [pc, #124]	; (8001b78 <ADC_Enable+0x104>)
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7fe fb15 	bl	800012c <__udivsi3>
 8001b02:	0003      	movs	r3, r0
 8001b04:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b06:	e002      	b.n	8001b0e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f9      	bne.n	8001b08 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b14:	f7ff fc98 	bl	8001448 <HAL_GetTick>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b1c:	e01b      	b.n	8001b56 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b1e:	f7ff fc93 	bl	8001448 <HAL_GetTick>
 8001b22:	0002      	movs	r2, r0
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d914      	bls.n	8001b56 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2201      	movs	r2, #1
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d00d      	beq.n	8001b56 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3e:	2210      	movs	r2, #16
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e007      	b.n	8001b66 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d1dc      	bne.n	8001b1e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	0018      	movs	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b004      	add	sp, #16
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	80000017 	.word	0x80000017
 8001b74:	20000000 	.word	0x20000000
 8001b78:	000f4240 	.word	0x000f4240

08001b7c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8e:	2250      	movs	r2, #80	; 0x50
 8001b90:	4013      	ands	r3, r2
 8001b92:	d140      	bne.n	8001c16 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b98:	2280      	movs	r2, #128	; 0x80
 8001b9a:	0092      	lsls	r2, r2, #2
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	23c0      	movs	r3, #192	; 0xc0
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	4013      	ands	r3, r2
 8001bae:	d12d      	bne.n	8001c0c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d129      	bne.n	8001c0c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d122      	bne.n	8001c0c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2204      	movs	r2, #4
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d110      	bne.n	8001bf4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	210c      	movs	r1, #12
 8001bde:	438a      	bics	r2, r1
 8001be0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be6:	4a11      	ldr	r2, [pc, #68]	; (8001c2c <ADC_DMAConvCplt+0xb0>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	2201      	movs	r2, #1
 8001bec:	431a      	orrs	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	639a      	str	r2, [r3, #56]	; 0x38
 8001bf2:	e00b      	b.n	8001c0c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c04:	2201      	movs	r2, #1
 8001c06:	431a      	orrs	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f7ff fe0a 	bl	8001828 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001c14:	e005      	b.n	8001c22 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	0010      	movs	r0, r2
 8001c20:	4798      	blx	r3
}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b004      	add	sp, #16
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	fffffefe 	.word	0xfffffefe

08001c30 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7ff fdf9 	bl	8001838 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b004      	add	sp, #16
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c60:	2240      	movs	r2, #64	; 0x40
 8001c62:	431a      	orrs	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	0018      	movs	r0, r3
 8001c78:	f7ff fde6 	bl	8001848 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c7c:	46c0      	nop			; (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b004      	add	sp, #16
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <__NVIC_EnableIRQ>:
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	1dfb      	adds	r3, r7, #7
 8001c8e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	1dfb      	adds	r3, r7, #7
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b7f      	cmp	r3, #127	; 0x7f
 8001c96:	d809      	bhi.n	8001cac <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c98:	1dfb      	adds	r3, r7, #7
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	001a      	movs	r2, r3
 8001c9e:	231f      	movs	r3, #31
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <__NVIC_EnableIRQ+0x30>)
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	4091      	lsls	r1, r2
 8001ca8:	000a      	movs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b002      	add	sp, #8
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <__NVIC_SetPriority>:
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	1dfb      	adds	r3, r7, #7
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b7f      	cmp	r3, #127	; 0x7f
 8001ccc:	d828      	bhi.n	8001d20 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cce:	4a2f      	ldr	r2, [pc, #188]	; (8001d8c <__NVIC_SetPriority+0xd4>)
 8001cd0:	1dfb      	adds	r3, r7, #7
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b25b      	sxtb	r3, r3
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	33c0      	adds	r3, #192	; 0xc0
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	589b      	ldr	r3, [r3, r2]
 8001cde:	1dfa      	adds	r2, r7, #7
 8001ce0:	7812      	ldrb	r2, [r2, #0]
 8001ce2:	0011      	movs	r1, r2
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	400a      	ands	r2, r1
 8001ce8:	00d2      	lsls	r2, r2, #3
 8001cea:	21ff      	movs	r1, #255	; 0xff
 8001cec:	4091      	lsls	r1, r2
 8001cee:	000a      	movs	r2, r1
 8001cf0:	43d2      	mvns	r2, r2
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	019b      	lsls	r3, r3, #6
 8001cfa:	22ff      	movs	r2, #255	; 0xff
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	1dfb      	adds	r3, r7, #7
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	0018      	movs	r0, r3
 8001d04:	2303      	movs	r3, #3
 8001d06:	4003      	ands	r3, r0
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d0c:	481f      	ldr	r0, [pc, #124]	; (8001d8c <__NVIC_SetPriority+0xd4>)
 8001d0e:	1dfb      	adds	r3, r7, #7
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	430a      	orrs	r2, r1
 8001d18:	33c0      	adds	r3, #192	; 0xc0
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	501a      	str	r2, [r3, r0]
}
 8001d1e:	e031      	b.n	8001d84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d20:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <__NVIC_SetPriority+0xd8>)
 8001d22:	1dfb      	adds	r3, r7, #7
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	0019      	movs	r1, r3
 8001d28:	230f      	movs	r3, #15
 8001d2a:	400b      	ands	r3, r1
 8001d2c:	3b08      	subs	r3, #8
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3306      	adds	r3, #6
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	18d3      	adds	r3, r2, r3
 8001d36:	3304      	adds	r3, #4
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	1dfa      	adds	r2, r7, #7
 8001d3c:	7812      	ldrb	r2, [r2, #0]
 8001d3e:	0011      	movs	r1, r2
 8001d40:	2203      	movs	r2, #3
 8001d42:	400a      	ands	r2, r1
 8001d44:	00d2      	lsls	r2, r2, #3
 8001d46:	21ff      	movs	r1, #255	; 0xff
 8001d48:	4091      	lsls	r1, r2
 8001d4a:	000a      	movs	r2, r1
 8001d4c:	43d2      	mvns	r2, r2
 8001d4e:	401a      	ands	r2, r3
 8001d50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	019b      	lsls	r3, r3, #6
 8001d56:	22ff      	movs	r2, #255	; 0xff
 8001d58:	401a      	ands	r2, r3
 8001d5a:	1dfb      	adds	r3, r7, #7
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	0018      	movs	r0, r3
 8001d60:	2303      	movs	r3, #3
 8001d62:	4003      	ands	r3, r0
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d68:	4809      	ldr	r0, [pc, #36]	; (8001d90 <__NVIC_SetPriority+0xd8>)
 8001d6a:	1dfb      	adds	r3, r7, #7
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	001c      	movs	r4, r3
 8001d70:	230f      	movs	r3, #15
 8001d72:	4023      	ands	r3, r4
 8001d74:	3b08      	subs	r3, #8
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	3306      	adds	r3, #6
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	18c3      	adds	r3, r0, r3
 8001d80:	3304      	adds	r3, #4
 8001d82:	601a      	str	r2, [r3, #0]
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b003      	add	sp, #12
 8001d8a:	bd90      	pop	{r4, r7, pc}
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	1e5a      	subs	r2, r3, #1
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	045b      	lsls	r3, r3, #17
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d301      	bcc.n	8001dac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da8:	2301      	movs	r3, #1
 8001daa:	e010      	b.n	8001dce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <SysTick_Config+0x44>)
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	3a01      	subs	r2, #1
 8001db2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db4:	2301      	movs	r3, #1
 8001db6:	425b      	negs	r3, r3
 8001db8:	2103      	movs	r1, #3
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f7ff ff7c 	bl	8001cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x44>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x44>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b002      	add	sp, #8
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	210f      	movs	r1, #15
 8001de8:	187b      	adds	r3, r7, r1
 8001dea:	1c02      	adds	r2, r0, #0
 8001dec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	187b      	adds	r3, r7, r1
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b25b      	sxtb	r3, r3
 8001df6:	0011      	movs	r1, r2
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff ff5d 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b004      	add	sp, #16
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	1dfb      	adds	r3, r7, #7
 8001e10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e12:	1dfb      	adds	r3, r7, #7
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	b25b      	sxtb	r3, r3
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f7ff ff33 	bl	8001c84 <__NVIC_EnableIRQ>
}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b002      	add	sp, #8
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	0018      	movs	r0, r3
 8001e32:	f7ff ffaf 	bl	8001d94 <SysTick_Config>
 8001e36:	0003      	movs	r3, r0
}
 8001e38:	0018      	movs	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e036      	b.n	8001ec4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2221      	movs	r2, #33	; 0x21
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <HAL_DMA_Init+0x8c>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f000 f998 	bl	80021dc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2221      	movs	r2, #33	; 0x21
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}  
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b004      	add	sp, #16
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	ffffc00f 	.word	0xffffc00f

08001ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001ede:	2317      	movs	r3, #23
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	5c9b      	ldrb	r3, [r3, r2]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_DMA_Start_IT+0x24>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e04f      	b.n	8001f94 <HAL_DMA_Start_IT+0xc4>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	2101      	movs	r1, #1
 8001efa:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2221      	movs	r2, #33	; 0x21
 8001f00:	5c9b      	ldrb	r3, [r3, r2]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d13a      	bne.n	8001f7e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2221      	movs	r2, #33	; 0x21
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2101      	movs	r1, #1
 8001f22:	438a      	bics	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	68b9      	ldr	r1, [r7, #8]
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f928 	bl	8002182 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d008      	beq.n	8001f4c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	210e      	movs	r1, #14
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	e00f      	b.n	8001f6c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	210a      	movs	r1, #10
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2104      	movs	r1, #4
 8001f68:	438a      	bics	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2101      	movs	r1, #1
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	e007      	b.n	8001f8e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2220      	movs	r2, #32
 8001f82:	2100      	movs	r1, #0
 8001f84:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001f86:	2317      	movs	r3, #23
 8001f88:	18fb      	adds	r3, r7, r3
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001f8e:	2317      	movs	r3, #23
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	781b      	ldrb	r3, [r3, #0]
} 
 8001f94:	0018      	movs	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b006      	add	sp, #24
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa4:	210f      	movs	r1, #15
 8001fa6:	187b      	adds	r3, r7, r1
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2221      	movs	r2, #33	; 0x21
 8001fb0:	5c9b      	ldrb	r3, [r3, r2]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d006      	beq.n	8001fc6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2204      	movs	r2, #4
 8001fbc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fbe:	187b      	adds	r3, r7, r1
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e028      	b.n	8002018 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	210e      	movs	r1, #14
 8001fd2:	438a      	bics	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	438a      	bics	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fee:	2101      	movs	r1, #1
 8001ff0:	4091      	lsls	r1, r2
 8001ff2:	000a      	movs	r2, r1
 8001ff4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2221      	movs	r2, #33	; 0x21
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2220      	movs	r2, #32
 8002002:	2100      	movs	r1, #0
 8002004:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200a:	2b00      	cmp	r3, #0
 800200c:	d004      	beq.n	8002018 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	0010      	movs	r0, r2
 8002016:	4798      	blx	r3
    } 
  }
  return status;
 8002018:	230f      	movs	r3, #15
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	781b      	ldrb	r3, [r3, #0]
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	b004      	add	sp, #16
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	2204      	movs	r2, #4
 8002044:	409a      	lsls	r2, r3
 8002046:	0013      	movs	r3, r2
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4013      	ands	r3, r2
 800204c:	d024      	beq.n	8002098 <HAL_DMA_IRQHandler+0x72>
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2204      	movs	r2, #4
 8002052:	4013      	ands	r3, r2
 8002054:	d020      	beq.n	8002098 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2220      	movs	r2, #32
 800205e:	4013      	ands	r3, r2
 8002060:	d107      	bne.n	8002072 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2104      	movs	r1, #4
 800206e:	438a      	bics	r2, r1
 8002070:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	2104      	movs	r1, #4
 800207c:	4091      	lsls	r1, r2
 800207e:	000a      	movs	r2, r1
 8002080:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002086:	2b00      	cmp	r3, #0
 8002088:	d100      	bne.n	800208c <HAL_DMA_IRQHandler+0x66>
 800208a:	e06a      	b.n	8002162 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	0010      	movs	r0, r2
 8002094:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002096:	e064      	b.n	8002162 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	2202      	movs	r2, #2
 800209e:	409a      	lsls	r2, r3
 80020a0:	0013      	movs	r3, r2
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4013      	ands	r3, r2
 80020a6:	d02b      	beq.n	8002100 <HAL_DMA_IRQHandler+0xda>
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2202      	movs	r2, #2
 80020ac:	4013      	ands	r3, r2
 80020ae:	d027      	beq.n	8002100 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2220      	movs	r2, #32
 80020b8:	4013      	ands	r3, r2
 80020ba:	d10b      	bne.n	80020d4 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	210a      	movs	r1, #10
 80020c8:	438a      	bics	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2221      	movs	r2, #33	; 0x21
 80020d0:	2101      	movs	r1, #1
 80020d2:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020dc:	2102      	movs	r1, #2
 80020de:	4091      	lsls	r1, r2
 80020e0:	000a      	movs	r2, r1
 80020e2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	2100      	movs	r1, #0
 80020ea:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d036      	beq.n	8002162 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	0010      	movs	r0, r2
 80020fc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80020fe:	e030      	b.n	8002162 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	2208      	movs	r2, #8
 8002106:	409a      	lsls	r2, r3
 8002108:	0013      	movs	r3, r2
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4013      	ands	r3, r2
 800210e:	d028      	beq.n	8002162 <HAL_DMA_IRQHandler+0x13c>
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2208      	movs	r2, #8
 8002114:	4013      	ands	r3, r2
 8002116:	d024      	beq.n	8002162 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	210e      	movs	r1, #14
 8002124:	438a      	bics	r2, r1
 8002126:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002130:	2101      	movs	r1, #1
 8002132:	4091      	lsls	r1, r2
 8002134:	000a      	movs	r2, r1
 8002136:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2221      	movs	r2, #33	; 0x21
 8002142:	2101      	movs	r1, #1
 8002144:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2220      	movs	r2, #32
 800214a:	2100      	movs	r1, #0
 800214c:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	0010      	movs	r0, r2
 800215e:	4798      	blx	r3
    }
   }
}  
 8002160:	e7ff      	b.n	8002162 <HAL_DMA_IRQHandler+0x13c>
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	46bd      	mov	sp, r7
 8002166:	b004      	add	sp, #16
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2221      	movs	r2, #33	; 0x21
 8002176:	5c9b      	ldrb	r3, [r3, r2]
 8002178:	b2db      	uxtb	r3, r3
}
 800217a:	0018      	movs	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	b002      	add	sp, #8
 8002180:	bd80      	pop	{r7, pc}

08002182 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002198:	2101      	movs	r1, #1
 800219a:	4091      	lsls	r1, r2
 800219c:	000a      	movs	r2, r1
 800219e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d108      	bne.n	80021c2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021c0:	e007      	b.n	80021d2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	60da      	str	r2, [r3, #12]
}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b004      	add	sp, #16
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a08      	ldr	r2, [pc, #32]	; (800220c <DMA_CalcBaseAndBitshift+0x30>)
 80021ea:	4694      	mov	ip, r2
 80021ec:	4463      	add	r3, ip
 80021ee:	2114      	movs	r1, #20
 80021f0:	0018      	movs	r0, r3
 80021f2:	f7fd ff9b 	bl	800012c <__udivsi3>
 80021f6:	0003      	movs	r3, r0
 80021f8:	009a      	lsls	r2, r3, #2
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a03      	ldr	r2, [pc, #12]	; (8002210 <DMA_CalcBaseAndBitshift+0x34>)
 8002202:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	b002      	add	sp, #8
 800220a:	bd80      	pop	{r7, pc}
 800220c:	bffdfff8 	.word	0xbffdfff8
 8002210:	40020000 	.word	0x40020000

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002222:	e149      	b.n	80024b8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4091      	lsls	r1, r2
 800222e:	000a      	movs	r2, r1
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d100      	bne.n	800223c <HAL_GPIO_Init+0x28>
 800223a:	e13a      	b.n	80024b2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2203      	movs	r2, #3
 8002242:	4013      	ands	r3, r2
 8002244:	2b01      	cmp	r3, #1
 8002246:	d005      	beq.n	8002254 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2203      	movs	r2, #3
 800224e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002250:	2b02      	cmp	r3, #2
 8002252:	d130      	bne.n	80022b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	409a      	lsls	r2, r3
 8002262:	0013      	movs	r3, r2
 8002264:	43da      	mvns	r2, r3
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	409a      	lsls	r2, r3
 8002276:	0013      	movs	r3, r2
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800228a:	2201      	movs	r2, #1
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	409a      	lsls	r2, r3
 8002290:	0013      	movs	r3, r2
 8002292:	43da      	mvns	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	2201      	movs	r2, #1
 80022a2:	401a      	ands	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2203      	movs	r2, #3
 80022bc:	4013      	ands	r3, r2
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d017      	beq.n	80022f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	2203      	movs	r2, #3
 80022ce:	409a      	lsls	r2, r3
 80022d0:	0013      	movs	r3, r2
 80022d2:	43da      	mvns	r2, r3
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	409a      	lsls	r2, r3
 80022e4:	0013      	movs	r3, r2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2203      	movs	r2, #3
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d123      	bne.n	8002346 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	08da      	lsrs	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3208      	adds	r2, #8
 8002306:	0092      	lsls	r2, r2, #2
 8002308:	58d3      	ldr	r3, [r2, r3]
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2207      	movs	r2, #7
 8002310:	4013      	ands	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	409a      	lsls	r2, r3
 8002318:	0013      	movs	r3, r2
 800231a:	43da      	mvns	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2107      	movs	r1, #7
 800232a:	400b      	ands	r3, r1
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	409a      	lsls	r2, r3
 8002330:	0013      	movs	r3, r2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	08da      	lsrs	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3208      	adds	r2, #8
 8002340:	0092      	lsls	r2, r2, #2
 8002342:	6939      	ldr	r1, [r7, #16]
 8002344:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	409a      	lsls	r2, r3
 8002354:	0013      	movs	r3, r2
 8002356:	43da      	mvns	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2203      	movs	r2, #3
 8002364:	401a      	ands	r2, r3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	409a      	lsls	r2, r3
 800236c:	0013      	movs	r3, r2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	23c0      	movs	r3, #192	; 0xc0
 8002380:	029b      	lsls	r3, r3, #10
 8002382:	4013      	ands	r3, r2
 8002384:	d100      	bne.n	8002388 <HAL_GPIO_Init+0x174>
 8002386:	e094      	b.n	80024b2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002388:	4b51      	ldr	r3, [pc, #324]	; (80024d0 <HAL_GPIO_Init+0x2bc>)
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	4b50      	ldr	r3, [pc, #320]	; (80024d0 <HAL_GPIO_Init+0x2bc>)
 800238e:	2101      	movs	r1, #1
 8002390:	430a      	orrs	r2, r1
 8002392:	619a      	str	r2, [r3, #24]
 8002394:	4b4e      	ldr	r3, [pc, #312]	; (80024d0 <HAL_GPIO_Init+0x2bc>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	2201      	movs	r2, #1
 800239a:	4013      	ands	r3, r2
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023a0:	4a4c      	ldr	r2, [pc, #304]	; (80024d4 <HAL_GPIO_Init+0x2c0>)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3302      	adds	r3, #2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	589b      	ldr	r3, [r3, r2]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2203      	movs	r2, #3
 80023b2:	4013      	ands	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	220f      	movs	r2, #15
 80023b8:	409a      	lsls	r2, r3
 80023ba:	0013      	movs	r3, r2
 80023bc:	43da      	mvns	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	2390      	movs	r3, #144	; 0x90
 80023c8:	05db      	lsls	r3, r3, #23
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d00d      	beq.n	80023ea <HAL_GPIO_Init+0x1d6>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a41      	ldr	r2, [pc, #260]	; (80024d8 <HAL_GPIO_Init+0x2c4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d007      	beq.n	80023e6 <HAL_GPIO_Init+0x1d2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a40      	ldr	r2, [pc, #256]	; (80024dc <HAL_GPIO_Init+0x2c8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_GPIO_Init+0x1ce>
 80023de:	2302      	movs	r3, #2
 80023e0:	e004      	b.n	80023ec <HAL_GPIO_Init+0x1d8>
 80023e2:	2305      	movs	r3, #5
 80023e4:	e002      	b.n	80023ec <HAL_GPIO_Init+0x1d8>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <HAL_GPIO_Init+0x1d8>
 80023ea:	2300      	movs	r3, #0
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	2103      	movs	r1, #3
 80023f0:	400a      	ands	r2, r1
 80023f2:	0092      	lsls	r2, r2, #2
 80023f4:	4093      	lsls	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023fc:	4935      	ldr	r1, [pc, #212]	; (80024d4 <HAL_GPIO_Init+0x2c0>)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	089b      	lsrs	r3, r3, #2
 8002402:	3302      	adds	r3, #2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800240a:	4b35      	ldr	r3, [pc, #212]	; (80024e0 <HAL_GPIO_Init+0x2cc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	43da      	mvns	r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	025b      	lsls	r3, r3, #9
 8002422:	4013      	ands	r3, r2
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800242e:	4b2c      	ldr	r3, [pc, #176]	; (80024e0 <HAL_GPIO_Init+0x2cc>)
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002434:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <HAL_GPIO_Init+0x2cc>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43da      	mvns	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	029b      	lsls	r3, r3, #10
 800244c:	4013      	ands	r3, r2
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002458:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <HAL_GPIO_Init+0x2cc>)
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245e:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <HAL_GPIO_Init+0x2cc>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	43da      	mvns	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	035b      	lsls	r3, r3, #13
 8002476:	4013      	ands	r3, r2
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002482:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <HAL_GPIO_Init+0x2cc>)
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <HAL_GPIO_Init+0x2cc>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	43da      	mvns	r2, r3
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	039b      	lsls	r3, r3, #14
 80024a0:	4013      	ands	r3, r2
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <HAL_GPIO_Init+0x2cc>)
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3301      	adds	r3, #1
 80024b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	40da      	lsrs	r2, r3
 80024c0:	1e13      	subs	r3, r2, #0
 80024c2:	d000      	beq.n	80024c6 <HAL_GPIO_Init+0x2b2>
 80024c4:	e6ae      	b.n	8002224 <HAL_GPIO_Init+0x10>
  } 
}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b006      	add	sp, #24
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40010000 	.word	0x40010000
 80024d8:	48000400 	.word	0x48000400
 80024dc:	48000800 	.word	0x48000800
 80024e0:	40010400 	.word	0x40010400

080024e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	0008      	movs	r0, r1
 80024ee:	0011      	movs	r1, r2
 80024f0:	1cbb      	adds	r3, r7, #2
 80024f2:	1c02      	adds	r2, r0, #0
 80024f4:	801a      	strh	r2, [r3, #0]
 80024f6:	1c7b      	adds	r3, r7, #1
 80024f8:	1c0a      	adds	r2, r1, #0
 80024fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024fc:	1c7b      	adds	r3, r7, #1
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d004      	beq.n	800250e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002504:	1cbb      	adds	r3, r7, #2
 8002506:	881a      	ldrh	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800250c:	e003      	b.n	8002516 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800250e:	1cbb      	adds	r3, r7, #2
 8002510:	881a      	ldrh	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	46bd      	mov	sp, r7
 800251a:	b002      	add	sp, #8
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e082      	b.n	8002638 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2241      	movs	r2, #65	; 0x41
 8002536:	5c9b      	ldrb	r3, [r3, r2]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d107      	bne.n	800254e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2240      	movs	r2, #64	; 0x40
 8002542:	2100      	movs	r1, #0
 8002544:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	0018      	movs	r0, r3
 800254a:	f7fe fcb7 	bl	8000ebc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2241      	movs	r2, #65	; 0x41
 8002552:	2124      	movs	r1, #36	; 0x24
 8002554:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	438a      	bics	r2, r1
 8002564:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4934      	ldr	r1, [pc, #208]	; (8002640 <HAL_I2C_Init+0x120>)
 8002570:	400a      	ands	r2, r1
 8002572:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4931      	ldr	r1, [pc, #196]	; (8002644 <HAL_I2C_Init+0x124>)
 8002580:	400a      	ands	r2, r1
 8002582:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d108      	bne.n	800259e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	0209      	lsls	r1, r1, #8
 8002598:	430a      	orrs	r2, r1
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	e007      	b.n	80025ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2184      	movs	r1, #132	; 0x84
 80025a8:	0209      	lsls	r1, r1, #8
 80025aa:	430a      	orrs	r2, r1
 80025ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d104      	bne.n	80025c0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	0112      	lsls	r2, r2, #4
 80025be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	491f      	ldr	r1, [pc, #124]	; (8002648 <HAL_I2C_Init+0x128>)
 80025cc:	430a      	orrs	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	491a      	ldr	r1, [pc, #104]	; (8002644 <HAL_I2C_Init+0x124>)
 80025dc:	400a      	ands	r2, r1
 80025de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69d9      	ldr	r1, [r3, #28]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1a      	ldr	r2, [r3, #32]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2101      	movs	r1, #1
 8002616:	430a      	orrs	r2, r1
 8002618:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2241      	movs	r2, #65	; 0x41
 8002624:	2120      	movs	r1, #32
 8002626:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2242      	movs	r2, #66	; 0x42
 8002632:	2100      	movs	r1, #0
 8002634:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	b002      	add	sp, #8
 800263e:	bd80      	pop	{r7, pc}
 8002640:	f0ffffff 	.word	0xf0ffffff
 8002644:	ffff7fff 	.word	0xffff7fff
 8002648:	02008000 	.word	0x02008000

0800264c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	1dbb      	adds	r3, r7, #6
 800265a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2241      	movs	r2, #65	; 0x41
 8002660:	5c9b      	ldrb	r3, [r3, r2]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	001a      	movs	r2, r3
 8002666:	2328      	movs	r3, #40	; 0x28
 8002668:	4013      	ands	r3, r2
 800266a:	2b28      	cmp	r3, #40	; 0x28
 800266c:	d000      	beq.n	8002670 <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 800266e:	e08f      	b.n	8002790 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 8002676:	1dbb      	adds	r3, r7, #6
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d105      	bne.n	800268a <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	0092      	lsls	r2, r2, #2
 8002684:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e083      	b.n	8002792 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800268a:	4a44      	ldr	r2, [pc, #272]	; (800279c <HAL_I2C_Slave_Seq_Transmit_IT+0x150>)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	0011      	movs	r1, r2
 8002690:	0018      	movs	r0, r3
 8002692:	f001 faa9 	bl	8003be8 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2240      	movs	r2, #64	; 0x40
 800269a:	5c9b      	ldrb	r3, [r3, r2]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e076      	b.n	8002792 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2240      	movs	r2, #64	; 0x40
 80026a8:	2101      	movs	r1, #1
 80026aa:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2241      	movs	r2, #65	; 0x41
 80026b0:	5c9b      	ldrb	r3, [r3, r2]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b2a      	cmp	r3, #42	; 0x2a
 80026b6:	d12c      	bne.n	8002712 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2102      	movs	r1, #2
 80026bc:	0018      	movs	r0, r3
 80026be:	f001 fa93 	bl	8003be8 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	401a      	ands	r2, r3
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d11d      	bne.n	8002712 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	492f      	ldr	r1, [pc, #188]	; (80027a0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>)
 80026e2:	400a      	ands	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d011      	beq.n	8002712 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f2:	4a2c      	ldr	r2, [pc, #176]	; (80027a4 <HAL_I2C_Slave_Seq_Transmit_IT+0x158>)
 80026f4:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fa:	0018      	movs	r0, r3
 80026fc:	f7ff fc4e 	bl	8001f9c <HAL_DMA_Abort_IT>
 8002700:	1e03      	subs	r3, r0, #0
 8002702:	d006      	beq.n	8002712 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270e:	0018      	movs	r0, r3
 8002710:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2241      	movs	r2, #65	; 0x41
 8002716:	2129      	movs	r1, #41	; 0x29
 8002718:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2242      	movs	r2, #66	; 0x42
 800271e:	2120      	movs	r1, #32
 8002720:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	491b      	ldr	r1, [pc, #108]	; (80027a0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>)
 8002734:	400a      	ands	r2, r1
 8002736:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1dba      	adds	r2, r7, #6
 8002742:	8812      	ldrh	r2, [r2, #0]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 800275a:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	0c1b      	lsrs	r3, r3, #16
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2201      	movs	r2, #1
 8002768:	4013      	ands	r3, r2
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d103      	bne.n	8002778 <HAL_I2C_Slave_Seq_Transmit_IT+0x12c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2208      	movs	r2, #8
 8002776:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2240      	movs	r2, #64	; 0x40
 800277c:	2100      	movs	r1, #0
 800277e:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8002780:	4a06      	ldr	r2, [pc, #24]	; (800279c <HAL_I2C_Slave_Seq_Transmit_IT+0x150>)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	0011      	movs	r1, r2
 8002786:	0018      	movs	r0, r3
 8002788:	f001 f9c6 	bl	8003b18 <I2C_Enable_IRQ>

    return HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	e000      	b.n	8002792 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
  }
  else
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
  }
}
 8002792:	0018      	movs	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	b004      	add	sp, #16
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	00008001 	.word	0x00008001
 80027a0:	ffff7fff 	.word	0xffff7fff
 80027a4:	08003a6f 	.word	0x08003a6f
 80027a8:	08002ab1 	.word	0x08002ab1

080027ac <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	1dbb      	adds	r3, r7, #6
 80027ba:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2241      	movs	r2, #65	; 0x41
 80027c0:	5c9b      	ldrb	r3, [r3, r2]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	001a      	movs	r2, r3
 80027c6:	2328      	movs	r3, #40	; 0x28
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b28      	cmp	r3, #40	; 0x28
 80027cc:	d000      	beq.n	80027d0 <HAL_I2C_Slave_Seq_Receive_IT+0x24>
 80027ce:	e08f      	b.n	80028f0 <HAL_I2C_Slave_Seq_Receive_IT+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_I2C_Slave_Seq_Receive_IT+0x32>
 80027d6:	1dbb      	adds	r3, r7, #6
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	0092      	lsls	r2, r2, #2
 80027e4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e083      	b.n	80028f2 <HAL_I2C_Slave_Seq_Receive_IT+0x146>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80027ea:	4a44      	ldr	r2, [pc, #272]	; (80028fc <HAL_I2C_Slave_Seq_Receive_IT+0x150>)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	0011      	movs	r1, r2
 80027f0:	0018      	movs	r0, r3
 80027f2:	f001 f9f9 	bl	8003be8 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2240      	movs	r2, #64	; 0x40
 80027fa:	5c9b      	ldrb	r3, [r3, r2]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_I2C_Slave_Seq_Receive_IT+0x58>
 8002800:	2302      	movs	r3, #2
 8002802:	e076      	b.n	80028f2 <HAL_I2C_Slave_Seq_Receive_IT+0x146>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2240      	movs	r2, #64	; 0x40
 8002808:	2101      	movs	r1, #1
 800280a:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2241      	movs	r2, #65	; 0x41
 8002810:	5c9b      	ldrb	r3, [r3, r2]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b29      	cmp	r3, #41	; 0x29
 8002816:	d12c      	bne.n	8002872 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2101      	movs	r1, #1
 800281c:	0018      	movs	r0, r3
 800281e:	f001 f9e3 	bl	8003be8 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	01db      	lsls	r3, r3, #7
 800282c:	401a      	ands	r2, r3
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	01db      	lsls	r3, r3, #7
 8002832:	429a      	cmp	r2, r3
 8002834:	d11d      	bne.n	8002872 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	492f      	ldr	r1, [pc, #188]	; (8002900 <HAL_I2C_Slave_Seq_Receive_IT+0x154>)
 8002842:	400a      	ands	r2, r1
 8002844:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284a:	2b00      	cmp	r3, #0
 800284c:	d011      	beq.n	8002872 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	4a2c      	ldr	r2, [pc, #176]	; (8002904 <HAL_I2C_Slave_Seq_Receive_IT+0x158>)
 8002854:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	0018      	movs	r0, r3
 800285c:	f7ff fb9e 	bl	8001f9c <HAL_DMA_Abort_IT>
 8002860:	1e03      	subs	r3, r0, #0
 8002862:	d006      	beq.n	8002872 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286e:	0018      	movs	r0, r3
 8002870:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2241      	movs	r2, #65	; 0x41
 8002876:	212a      	movs	r1, #42	; 0x2a
 8002878:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2242      	movs	r2, #66	; 0x42
 800287e:	2120      	movs	r1, #32
 8002880:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	491d      	ldr	r1, [pc, #116]	; (8002908 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8002894:	400a      	ands	r2, r1
 8002896:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1dba      	adds	r2, r7, #6
 80028a2:	8812      	ldrh	r2, [r2, #0]
 80028a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 80028ba:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	0c1b      	lsrs	r3, r3, #16
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2201      	movs	r2, #1
 80028c8:	4013      	ands	r3, r2
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d103      	bne.n	80028d8 <HAL_I2C_Slave_Seq_Receive_IT+0x12c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2208      	movs	r2, #8
 80028d6:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2240      	movs	r2, #64	; 0x40
 80028dc:	2100      	movs	r1, #0
 80028de:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80028e0:	4a06      	ldr	r2, [pc, #24]	; (80028fc <HAL_I2C_Slave_Seq_Receive_IT+0x150>)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	0011      	movs	r1, r2
 80028e6:	0018      	movs	r0, r3
 80028e8:	f001 f916 	bl	8003b18 <I2C_Enable_IRQ>

    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <HAL_I2C_Slave_Seq_Receive_IT+0x146>
  }
  else
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
  }
}
 80028f2:	0018      	movs	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b004      	add	sp, #16
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	00008002 	.word	0x00008002
 8002900:	ffffbfff 	.word	0xffffbfff
 8002904:	08003a6f 	.word	0x08003a6f
 8002908:	ffff7fff 	.word	0xffff7fff
 800290c:	08002ab1 	.word	0x08002ab1

08002910 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2241      	movs	r2, #65	; 0x41
 800291c:	5c9b      	ldrb	r3, [r3, r2]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b20      	cmp	r3, #32
 8002922:	d10f      	bne.n	8002944 <HAL_I2C_EnableListen_IT+0x34>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2241      	movs	r2, #65	; 0x41
 8002928:	2128      	movs	r1, #40	; 0x28
 800292a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_I2C_EnableListen_IT+0x40>)
 8002930:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	021a      	lsls	r2, r3, #8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	0011      	movs	r1, r2
 800293a:	0018      	movs	r0, r3
 800293c:	f001 f8ec 	bl	8003b18 <I2C_Enable_IRQ>

    return HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	e000      	b.n	8002946 <HAL_I2C_EnableListen_IT+0x36>
  }
  else
  {
    return HAL_BUSY;
 8002944:	2302      	movs	r3, #2
  }
}
 8002946:	0018      	movs	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	b002      	add	sp, #8
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	08002ab1 	.word	0x08002ab1

08002954 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	68f9      	ldr	r1, [r7, #12]
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
  }
}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	b004      	add	sp, #16
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	001a      	movs	r2, r3
 80029a6:	2301      	movs	r3, #1
 80029a8:	4013      	ands	r3, r2
 80029aa:	d010      	beq.n	80029ce <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	09db      	lsrs	r3, r3, #7
 80029b0:	001a      	movs	r2, r3
 80029b2:	2301      	movs	r3, #1
 80029b4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80029b6:	d00a      	beq.n	80029ce <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	2201      	movs	r2, #1
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	0052      	lsls	r2, r2, #1
 80029cc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	0a9b      	lsrs	r3, r3, #10
 80029d2:	001a      	movs	r2, r3
 80029d4:	2301      	movs	r3, #1
 80029d6:	4013      	ands	r3, r2
 80029d8:	d010      	beq.n	80029fc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	09db      	lsrs	r3, r3, #7
 80029de:	001a      	movs	r2, r3
 80029e0:	2301      	movs	r3, #1
 80029e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80029e4:	d00a      	beq.n	80029fc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	2208      	movs	r2, #8
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2280      	movs	r2, #128	; 0x80
 80029f8:	00d2      	lsls	r2, r2, #3
 80029fa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	0a5b      	lsrs	r3, r3, #9
 8002a00:	001a      	movs	r2, r3
 8002a02:	2301      	movs	r3, #1
 8002a04:	4013      	ands	r3, r2
 8002a06:	d010      	beq.n	8002a2a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	09db      	lsrs	r3, r3, #7
 8002a0c:	001a      	movs	r2, r3
 8002a0e:	2301      	movs	r3, #1
 8002a10:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002a12:	d00a      	beq.n	8002a2a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a18:	2202      	movs	r2, #2
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	0092      	lsls	r2, r2, #2
 8002a28:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	220b      	movs	r2, #11
 8002a34:	4013      	ands	r3, r2
 8002a36:	d005      	beq.n	8002a44 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	0011      	movs	r1, r2
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 fee8 	bl	8003814 <I2C_ITError>
  }
}
 8002a44:	46c0      	nop			; (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b006      	add	sp, #24
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002a54:	46c0      	nop			; (mov r8, r8)
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b002      	add	sp, #8
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002a64:	46c0      	nop			; (mov r8, r8)
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b002      	add	sp, #8
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002a74:	46c0      	nop			; (mov r8, r8)
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b002      	add	sp, #8
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a94:	46c0      	nop			; (mov r8, r8)
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b002      	add	sp, #8
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2240      	movs	r2, #64	; 0x40
 8002aca:	5c9b      	ldrb	r3, [r3, r2]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <I2C_Slave_ISR_IT+0x24>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e0fa      	b.n	8002cca <I2C_Slave_ISR_IT+0x21a>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2240      	movs	r2, #64	; 0x40
 8002ad8:	2101      	movs	r1, #1
 8002ada:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	001a      	movs	r2, r3
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d00b      	beq.n	8002b00 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	001a      	movs	r2, r3
 8002aee:	2301      	movs	r3, #1
 8002af0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002af2:	d005      	beq.n	8002b00 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	0011      	movs	r1, r2
 8002afa:	0018      	movs	r0, r3
 8002afc:	f000 fd0c 	bl	8003518 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	001a      	movs	r2, r3
 8002b06:	2301      	movs	r3, #1
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d054      	beq.n	8002bb6 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	001a      	movs	r2, r3
 8002b12:	2301      	movs	r3, #1
 8002b14:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b16:	d04e      	beq.n	8002bb6 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d12d      	bne.n	8002b7e <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2241      	movs	r2, #65	; 0x41
 8002b26:	5c9b      	ldrb	r3, [r3, r2]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b28      	cmp	r3, #40	; 0x28
 8002b2c:	d10b      	bne.n	8002b46 <I2C_Slave_ISR_IT+0x96>
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	049b      	lsls	r3, r3, #18
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d106      	bne.n	8002b46 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	0011      	movs	r1, r2
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 fe0e 	bl	8003760 <I2C_ITListenCplt>
 8002b44:	e036      	b.n	8002bb4 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2241      	movs	r2, #65	; 0x41
 8002b4a:	5c9b      	ldrb	r3, [r3, r2]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b29      	cmp	r3, #41	; 0x29
 8002b50:	d110      	bne.n	8002b74 <I2C_Slave_ISR_IT+0xc4>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	4a5f      	ldr	r2, [pc, #380]	; (8002cd4 <I2C_Slave_ISR_IT+0x224>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00c      	beq.n	8002b74 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2210      	movs	r2, #16
 8002b60:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	0018      	movs	r0, r3
 8002b66:	f000 ff60 	bl	8003a2a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f000 fb9b 	bl	80032a8 <I2C_ITSlaveSeqCplt>
 8002b72:	e01f      	b.n	8002bb4 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2210      	movs	r2, #16
 8002b7a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002b7c:	e09d      	b.n	8002cba <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2210      	movs	r2, #16
 8002b84:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <I2C_Slave_ISR_IT+0xf4>
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	045b      	lsls	r3, r3, #17
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d000      	beq.n	8002ba4 <I2C_Slave_ISR_IT+0xf4>
 8002ba2:	e08a      	b.n	8002cba <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	0011      	movs	r1, r2
 8002bac:	0018      	movs	r0, r3
 8002bae:	f000 fe31 	bl	8003814 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002bb2:	e082      	b.n	8002cba <I2C_Slave_ISR_IT+0x20a>
 8002bb4:	e081      	b.n	8002cba <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	089b      	lsrs	r3, r3, #2
 8002bba:	001a      	movs	r2, r3
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d031      	beq.n	8002c26 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	001a      	movs	r2, r3
 8002bc8:	2301      	movs	r3, #1
 8002bca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002bcc:	d02b      	beq.n	8002c26 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d018      	beq.n	8002c0a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d154      	bne.n	8002cbe <I2C_Slave_ISR_IT+0x20e>
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	4a2f      	ldr	r2, [pc, #188]	; (8002cd4 <I2C_Slave_ISR_IT+0x224>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d050      	beq.n	8002cbe <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f000 fb42 	bl	80032a8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002c24:	e04b      	b.n	8002cbe <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	08db      	lsrs	r3, r3, #3
 8002c2a:	001a      	movs	r2, r3
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d00c      	beq.n	8002c4c <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	08db      	lsrs	r3, r3, #3
 8002c36:	001a      	movs	r2, r3
 8002c38:	2301      	movs	r3, #1
 8002c3a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c3c:	d006      	beq.n	8002c4c <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	0011      	movs	r1, r2
 8002c44:	0018      	movs	r0, r3
 8002c46:	f000 fa49 	bl	80030dc <I2C_ITAddrCplt>
 8002c4a:	e039      	b.n	8002cc0 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	001a      	movs	r2, r3
 8002c52:	2301      	movs	r3, #1
 8002c54:	4013      	ands	r3, r2
 8002c56:	d033      	beq.n	8002cc0 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	085b      	lsrs	r3, r3, #1
 8002c5c:	001a      	movs	r2, r3
 8002c5e:	2301      	movs	r3, #1
 8002c60:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c62:	d02d      	beq.n	8002cc0 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d018      	beq.n	8002ca0 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	781a      	ldrb	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	851a      	strh	r2, [r3, #40]	; 0x28
 8002c9e:	e00f      	b.n	8002cc0 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	045b      	lsls	r3, r3, #17
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d002      	beq.n	8002cb0 <I2C_Slave_ISR_IT+0x200>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d107      	bne.n	8002cc0 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f000 faf8 	bl	80032a8 <I2C_ITSlaveSeqCplt>
 8002cb8:	e002      	b.n	8002cc0 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	e000      	b.n	8002cc0 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8002cbe:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2240      	movs	r2, #64	; 0x40
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	0018      	movs	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b006      	add	sp, #24
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	ffff0000 	.word	0xffff0000

08002cd8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b089      	sub	sp, #36	; 0x24
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2240      	movs	r2, #64	; 0x40
 8002ce8:	5c9b      	ldrb	r3, [r3, r2]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <I2C_Master_ISR_DMA+0x1a>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e0f7      	b.n	8002ee2 <I2C_Master_ISR_DMA+0x20a>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2240      	movs	r2, #64	; 0x40
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	001a      	movs	r2, r3
 8002d00:	2301      	movs	r3, #1
 8002d02:	4013      	ands	r3, r2
 8002d04:	d019      	beq.n	8002d3a <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d10:	d013      	beq.n	8002d3a <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2210      	movs	r2, #16
 8002d18:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	2204      	movs	r2, #4
 8002d20:	431a      	orrs	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2120      	movs	r1, #32
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f000 fef4 	bl	8003b18 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	0018      	movs	r0, r3
 8002d34:	f000 fe79 	bl	8003a2a <I2C_Flush_TXDR>
 8002d38:	e0ce      	b.n	8002ed8 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	09db      	lsrs	r3, r3, #7
 8002d3e:	001a      	movs	r2, r3
 8002d40:	2301      	movs	r3, #1
 8002d42:	4013      	ands	r3, r2
 8002d44:	d100      	bne.n	8002d48 <I2C_Master_ISR_DMA+0x70>
 8002d46:	e07e      	b.n	8002e46 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	099b      	lsrs	r3, r3, #6
 8002d4c:	001a      	movs	r2, r3
 8002d4e:	2301      	movs	r3, #1
 8002d50:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002d52:	d100      	bne.n	8002d56 <I2C_Master_ISR_DMA+0x7e>
 8002d54:	e077      	b.n	8002e46 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2140      	movs	r1, #64	; 0x40
 8002d62:	438a      	bics	r2, r1
 8002d64:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d055      	beq.n	8002e1c <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	2312      	movs	r3, #18
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	0592      	lsls	r2, r2, #22
 8002d7e:	0d92      	lsrs	r2, r2, #22
 8002d80:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2bff      	cmp	r3, #255	; 0xff
 8002d8a:	d906      	bls.n	8002d9a <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	22ff      	movs	r2, #255	; 0xff
 8002d90:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	045b      	lsls	r3, r3, #17
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	e010      	b.n	8002dbc <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	4a50      	ldr	r2, [pc, #320]	; (8002eec <I2C_Master_ISR_DMA+0x214>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d003      	beq.n	8002db6 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	e002      	b.n	8002dbc <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	049b      	lsls	r3, r3, #18
 8002dba:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	697c      	ldr	r4, [r7, #20]
 8002dc4:	2312      	movs	r3, #18
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	8819      	ldrh	r1, [r3, #0]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	0023      	movs	r3, r4
 8002dd2:	f000 fe6b 	bl	8003aac <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2241      	movs	r2, #65	; 0x41
 8002dec:	5c9b      	ldrb	r3, [r3, r2]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b22      	cmp	r3, #34	; 0x22
 8002df2:	d109      	bne.n	8002e08 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2180      	movs	r1, #128	; 0x80
 8002e00:	0209      	lsls	r1, r1, #8
 8002e02:	430a      	orrs	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002e06:	e067      	b.n	8002ed8 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2180      	movs	r1, #128	; 0x80
 8002e14:	01c9      	lsls	r1, r1, #7
 8002e16:	430a      	orrs	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002e1a:	e05d      	b.n	8002ed8 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	049b      	lsls	r3, r3, #18
 8002e26:	401a      	ands	r2, r3
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	049b      	lsls	r3, r3, #18
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d004      	beq.n	8002e3a <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	0018      	movs	r0, r3
 8002e34:	f000 f9f6 	bl	8003224 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002e38:	e04e      	b.n	8002ed8 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2140      	movs	r1, #64	; 0x40
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f000 fce8 	bl	8003814 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002e44:	e048      	b.n	8002ed8 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	001a      	movs	r2, r3
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d02e      	beq.n	8002eb0 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	099b      	lsrs	r3, r3, #6
 8002e56:	001a      	movs	r2, r3
 8002e58:	2301      	movs	r3, #1
 8002e5a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002e5c:	d028      	beq.n	8002eb0 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d11d      	bne.n	8002ea4 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	049b      	lsls	r3, r3, #18
 8002e72:	401a      	ands	r2, r3
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	049b      	lsls	r3, r3, #18
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d02c      	beq.n	8002ed6 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	4a1a      	ldr	r2, [pc, #104]	; (8002eec <I2C_Master_ISR_DMA+0x214>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d109      	bne.n	8002e9a <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	01c9      	lsls	r1, r1, #7
 8002e94:	430a      	orrs	r2, r1
 8002e96:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002e98:	e01d      	b.n	8002ed6 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f000 f9c1 	bl	8003224 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002ea2:	e018      	b.n	8002ed6 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2140      	movs	r1, #64	; 0x40
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f000 fcb3 	bl	8003814 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002eae:	e012      	b.n	8002ed6 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	001a      	movs	r2, r3
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d00d      	beq.n	8002ed8 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	001a      	movs	r2, r3
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ec6:	d007      	beq.n	8002ed8 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	0011      	movs	r1, r2
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 fa50 	bl	8003374 <I2C_ITMasterCplt>
 8002ed4:	e000      	b.n	8002ed8 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8002ed6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2240      	movs	r2, #64	; 0x40
 8002edc:	2100      	movs	r1, #0
 8002ede:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b007      	add	sp, #28
 8002ee8:	bd90      	pop	{r4, r7, pc}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	ffff0000 	.word	0xffff0000

08002ef0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f00:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2240      	movs	r2, #64	; 0x40
 8002f0a:	5c9b      	ldrb	r3, [r3, r2]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <I2C_Slave_ISR_DMA+0x24>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e0dd      	b.n	80030d0 <I2C_Slave_ISR_DMA+0x1e0>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2240      	movs	r2, #64	; 0x40
 8002f18:	2101      	movs	r1, #1
 8002f1a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	001a      	movs	r2, r3
 8002f22:	2301      	movs	r3, #1
 8002f24:	4013      	ands	r3, r2
 8002f26:	d00b      	beq.n	8002f40 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	001a      	movs	r2, r3
 8002f2e:	2301      	movs	r3, #1
 8002f30:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f32:	d005      	beq.n	8002f40 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	0011      	movs	r1, r2
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f000 faec 	bl	8003518 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	091b      	lsrs	r3, r3, #4
 8002f44:	001a      	movs	r2, r3
 8002f46:	2301      	movs	r3, #1
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d100      	bne.n	8002f4e <I2C_Slave_ISR_DMA+0x5e>
 8002f4c:	e0a9      	b.n	80030a2 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	001a      	movs	r2, r3
 8002f54:	2301      	movs	r3, #1
 8002f56:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f58:	d100      	bne.n	8002f5c <I2C_Slave_ISR_DMA+0x6c>
 8002f5a:	e0a2      	b.n	80030a2 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	0b9b      	lsrs	r3, r3, #14
 8002f60:	001a      	movs	r2, r3
 8002f62:	2301      	movs	r3, #1
 8002f64:	4013      	ands	r3, r2
 8002f66:	d106      	bne.n	8002f76 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	0bdb      	lsrs	r3, r3, #15
 8002f6c:	001a      	movs	r2, r3
 8002f6e:	2301      	movs	r3, #1
 8002f70:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002f72:	d100      	bne.n	8002f76 <I2C_Slave_ISR_DMA+0x86>
 8002f74:	e08e      	b.n	8003094 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00d      	beq.n	8002f9a <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0bdb      	lsrs	r3, r3, #15
 8002f82:	001a      	movs	r2, r3
 8002f84:	2301      	movs	r3, #1
 8002f86:	4013      	ands	r3, r2
 8002f88:	d007      	beq.n	8002f9a <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8002f96:	2301      	movs	r3, #1
 8002f98:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00d      	beq.n	8002fbe <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0b9b      	lsrs	r3, r3, #14
 8002fa6:	001a      	movs	r2, r3
 8002fa8:	2301      	movs	r3, #1
 8002faa:	4013      	ands	r3, r2
 8002fac:	d007      	beq.n	8002fbe <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d12d      	bne.n	8003020 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2241      	movs	r2, #65	; 0x41
 8002fc8:	5c9b      	ldrb	r3, [r3, r2]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b28      	cmp	r3, #40	; 0x28
 8002fce:	d10b      	bne.n	8002fe8 <I2C_Slave_ISR_DMA+0xf8>
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	049b      	lsls	r3, r3, #18
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d106      	bne.n	8002fe8 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	0011      	movs	r1, r2
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f000 fbbd 	bl	8003760 <I2C_ITListenCplt>
 8002fe6:	e054      	b.n	8003092 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2241      	movs	r2, #65	; 0x41
 8002fec:	5c9b      	ldrb	r3, [r3, r2]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b29      	cmp	r3, #41	; 0x29
 8002ff2:	d110      	bne.n	8003016 <I2C_Slave_ISR_DMA+0x126>
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	4a38      	ldr	r2, [pc, #224]	; (80030d8 <I2C_Slave_ISR_DMA+0x1e8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00c      	beq.n	8003016 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2210      	movs	r2, #16
 8003002:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	0018      	movs	r0, r3
 8003008:	f000 fd0f 	bl	8003a2a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	0018      	movs	r0, r3
 8003010:	f000 f94a 	bl	80032a8 <I2C_ITSlaveSeqCplt>
 8003014:	e03d      	b.n	8003092 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2210      	movs	r2, #16
 800301c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800301e:	e03e      	b.n	800309e <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2210      	movs	r2, #16
 8003026:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302c:	2204      	movs	r2, #4
 800302e:	431a      	orrs	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003034:	2317      	movs	r3, #23
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	2141      	movs	r1, #65	; 0x41
 800303c:	5c52      	ldrb	r2, [r2, r1]
 800303e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d004      	beq.n	8003050 <I2C_Slave_ISR_DMA+0x160>
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	045b      	lsls	r3, r3, #17
 800304c:	429a      	cmp	r2, r3
 800304e:	d126      	bne.n	800309e <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003050:	2217      	movs	r2, #23
 8003052:	18bb      	adds	r3, r7, r2
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b21      	cmp	r3, #33	; 0x21
 8003058:	d003      	beq.n	8003062 <I2C_Slave_ISR_DMA+0x172>
 800305a:	18bb      	adds	r3, r7, r2
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b29      	cmp	r3, #41	; 0x29
 8003060:	d103      	bne.n	800306a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2221      	movs	r2, #33	; 0x21
 8003066:	631a      	str	r2, [r3, #48]	; 0x30
 8003068:	e00b      	b.n	8003082 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800306a:	2217      	movs	r2, #23
 800306c:	18bb      	adds	r3, r7, r2
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b22      	cmp	r3, #34	; 0x22
 8003072:	d003      	beq.n	800307c <I2C_Slave_ISR_DMA+0x18c>
 8003074:	18bb      	adds	r3, r7, r2
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b2a      	cmp	r3, #42	; 0x2a
 800307a:	d102      	bne.n	8003082 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2222      	movs	r2, #34	; 0x22
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	0011      	movs	r1, r2
 800308a:	0018      	movs	r0, r3
 800308c:	f000 fbc2 	bl	8003814 <I2C_ITError>
      if (treatdmanack == 1U)
 8003090:	e005      	b.n	800309e <I2C_Slave_ISR_DMA+0x1ae>
 8003092:	e004      	b.n	800309e <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2210      	movs	r2, #16
 800309a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800309c:	e013      	b.n	80030c6 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 800309e:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80030a0:	e011      	b.n	80030c6 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	08db      	lsrs	r3, r3, #3
 80030a6:	001a      	movs	r2, r3
 80030a8:	2301      	movs	r3, #1
 80030aa:	4013      	ands	r3, r2
 80030ac:	d00b      	beq.n	80030c6 <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	08db      	lsrs	r3, r3, #3
 80030b2:	001a      	movs	r2, r3
 80030b4:	2301      	movs	r3, #1
 80030b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80030b8:	d005      	beq.n	80030c6 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	0011      	movs	r1, r2
 80030c0:	0018      	movs	r0, r3
 80030c2:	f000 f80b 	bl	80030dc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2240      	movs	r2, #64	; 0x40
 80030ca:	2100      	movs	r1, #0
 80030cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b008      	add	sp, #32
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	ffff0000 	.word	0xffff0000

080030dc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80030dc:	b5b0      	push	{r4, r5, r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2241      	movs	r2, #65	; 0x41
 80030ea:	5c9b      	ldrb	r3, [r3, r2]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	001a      	movs	r2, r3
 80030f0:	2328      	movs	r3, #40	; 0x28
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b28      	cmp	r3, #40	; 0x28
 80030f6:	d000      	beq.n	80030fa <I2C_ITAddrCplt+0x1e>
 80030f8:	e088      	b.n	800320c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	0c1b      	lsrs	r3, r3, #16
 8003102:	b2da      	uxtb	r2, r3
 8003104:	250f      	movs	r5, #15
 8003106:	197b      	adds	r3, r7, r5
 8003108:	2101      	movs	r1, #1
 800310a:	400a      	ands	r2, r1
 800310c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	0c1b      	lsrs	r3, r3, #16
 8003116:	b29a      	uxth	r2, r3
 8003118:	200c      	movs	r0, #12
 800311a:	183b      	adds	r3, r7, r0
 800311c:	21fe      	movs	r1, #254	; 0xfe
 800311e:	400a      	ands	r2, r1
 8003120:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	b29a      	uxth	r2, r3
 800312a:	240a      	movs	r4, #10
 800312c:	193b      	adds	r3, r7, r4
 800312e:	0592      	lsls	r2, r2, #22
 8003130:	0d92      	lsrs	r2, r2, #22
 8003132:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	b29a      	uxth	r2, r3
 800313c:	2308      	movs	r3, #8
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	21fe      	movs	r1, #254	; 0xfe
 8003142:	400a      	ands	r2, r1
 8003144:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d148      	bne.n	80031e0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800314e:	0021      	movs	r1, r4
 8003150:	187b      	adds	r3, r7, r1
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	09db      	lsrs	r3, r3, #7
 8003156:	b29a      	uxth	r2, r3
 8003158:	183b      	adds	r3, r7, r0
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	4053      	eors	r3, r2
 800315e:	b29b      	uxth	r3, r3
 8003160:	001a      	movs	r2, r3
 8003162:	2306      	movs	r3, #6
 8003164:	4013      	ands	r3, r2
 8003166:	d120      	bne.n	80031aa <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003168:	183b      	adds	r3, r7, r0
 800316a:	187a      	adds	r2, r7, r1
 800316c:	8812      	ldrh	r2, [r2, #0]
 800316e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317e:	2b02      	cmp	r3, #2
 8003180:	d14c      	bne.n	800321c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2208      	movs	r2, #8
 800318e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2240      	movs	r2, #64	; 0x40
 8003194:	2100      	movs	r1, #0
 8003196:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003198:	183b      	adds	r3, r7, r0
 800319a:	881a      	ldrh	r2, [r3, #0]
 800319c:	197b      	adds	r3, r7, r5
 800319e:	7819      	ldrb	r1, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	0018      	movs	r0, r3
 80031a4:	f7fd fd6c 	bl	8000c80 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80031a8:	e038      	b.n	800321c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80031aa:	240c      	movs	r4, #12
 80031ac:	193b      	adds	r3, r7, r4
 80031ae:	2208      	movs	r2, #8
 80031b0:	18ba      	adds	r2, r7, r2
 80031b2:	8812      	ldrh	r2, [r2, #0]
 80031b4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	021a      	lsls	r2, r3, #8
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	0011      	movs	r1, r2
 80031be:	0018      	movs	r0, r3
 80031c0:	f000 fd12 	bl	8003be8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2240      	movs	r2, #64	; 0x40
 80031c8:	2100      	movs	r1, #0
 80031ca:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031cc:	193b      	adds	r3, r7, r4
 80031ce:	881a      	ldrh	r2, [r3, #0]
 80031d0:	230f      	movs	r3, #15
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	7819      	ldrb	r1, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	0018      	movs	r0, r3
 80031da:	f7fd fd51 	bl	8000c80 <HAL_I2C_AddrCallback>
}
 80031de:	e01d      	b.n	800321c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80031e0:	2380      	movs	r3, #128	; 0x80
 80031e2:	021a      	lsls	r2, r3, #8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	0011      	movs	r1, r2
 80031e8:	0018      	movs	r0, r3
 80031ea:	f000 fcfd 	bl	8003be8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2240      	movs	r2, #64	; 0x40
 80031f2:	2100      	movs	r1, #0
 80031f4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031f6:	230c      	movs	r3, #12
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	881a      	ldrh	r2, [r3, #0]
 80031fc:	230f      	movs	r3, #15
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	7819      	ldrb	r1, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	0018      	movs	r0, r3
 8003206:	f7fd fd3b 	bl	8000c80 <HAL_I2C_AddrCallback>
}
 800320a:	e007      	b.n	800321c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2208      	movs	r2, #8
 8003212:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2240      	movs	r2, #64	; 0x40
 8003218:	2100      	movs	r1, #0
 800321a:	5499      	strb	r1, [r3, r2]
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	b004      	add	sp, #16
 8003222:	bdb0      	pop	{r4, r5, r7, pc}

08003224 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2242      	movs	r2, #66	; 0x42
 8003230:	2100      	movs	r1, #0
 8003232:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2241      	movs	r2, #65	; 0x41
 8003238:	5c9b      	ldrb	r3, [r3, r2]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b21      	cmp	r3, #33	; 0x21
 800323e:	d117      	bne.n	8003270 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2241      	movs	r2, #65	; 0x41
 8003244:	2120      	movs	r1, #32
 8003246:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2211      	movs	r2, #17
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2101      	movs	r1, #1
 8003258:	0018      	movs	r0, r3
 800325a:	f000 fcc5 	bl	8003be8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2240      	movs	r2, #64	; 0x40
 8003262:	2100      	movs	r1, #0
 8003264:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	0018      	movs	r0, r3
 800326a:	f7ff fbef 	bl	8002a4c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800326e:	e016      	b.n	800329e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2241      	movs	r2, #65	; 0x41
 8003274:	2120      	movs	r1, #32
 8003276:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2212      	movs	r2, #18
 800327c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2102      	movs	r1, #2
 8003288:	0018      	movs	r0, r3
 800328a:	f000 fcad 	bl	8003be8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2240      	movs	r2, #64	; 0x40
 8003292:	2100      	movs	r1, #0
 8003294:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	0018      	movs	r0, r3
 800329a:	f7ff fbdf 	bl	8002a5c <HAL_I2C_MasterRxCpltCallback>
}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b002      	add	sp, #8
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2242      	movs	r2, #66	; 0x42
 80032bc:	2100      	movs	r1, #0
 80032be:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	0b9b      	lsrs	r3, r3, #14
 80032c4:	001a      	movs	r2, r3
 80032c6:	2301      	movs	r3, #1
 80032c8:	4013      	ands	r3, r2
 80032ca:	d008      	beq.n	80032de <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4925      	ldr	r1, [pc, #148]	; (800336c <I2C_ITSlaveSeqCplt+0xc4>)
 80032d8:	400a      	ands	r2, r1
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e00d      	b.n	80032fa <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	0bdb      	lsrs	r3, r3, #15
 80032e2:	001a      	movs	r2, r3
 80032e4:	2301      	movs	r3, #1
 80032e6:	4013      	ands	r3, r2
 80032e8:	d007      	beq.n	80032fa <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	491e      	ldr	r1, [pc, #120]	; (8003370 <I2C_ITSlaveSeqCplt+0xc8>)
 80032f6:	400a      	ands	r2, r1
 80032f8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2241      	movs	r2, #65	; 0x41
 80032fe:	5c9b      	ldrb	r3, [r3, r2]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b29      	cmp	r3, #41	; 0x29
 8003304:	d114      	bne.n	8003330 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2241      	movs	r2, #65	; 0x41
 800330a:	2128      	movs	r1, #40	; 0x28
 800330c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2221      	movs	r2, #33	; 0x21
 8003312:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2101      	movs	r1, #1
 8003318:	0018      	movs	r0, r3
 800331a:	f000 fc65 	bl	8003be8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2240      	movs	r2, #64	; 0x40
 8003322:	2100      	movs	r1, #0
 8003324:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	0018      	movs	r0, r3
 800332a:	f7fd fc93 	bl	8000c54 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800332e:	e019      	b.n	8003364 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2241      	movs	r2, #65	; 0x41
 8003334:	5c9b      	ldrb	r3, [r3, r2]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b2a      	cmp	r3, #42	; 0x2a
 800333a:	d113      	bne.n	8003364 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2241      	movs	r2, #65	; 0x41
 8003340:	2128      	movs	r1, #40	; 0x28
 8003342:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2222      	movs	r2, #34	; 0x22
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2102      	movs	r1, #2
 800334e:	0018      	movs	r0, r3
 8003350:	f000 fc4a 	bl	8003be8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2240      	movs	r2, #64	; 0x40
 8003358:	2100      	movs	r1, #0
 800335a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	0018      	movs	r0, r3
 8003360:	f7fd fc86 	bl	8000c70 <HAL_I2C_SlaveRxCpltCallback>
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b004      	add	sp, #16
 800336a:	bd80      	pop	{r7, pc}
 800336c:	ffffbfff 	.word	0xffffbfff
 8003370:	ffff7fff 	.word	0xffff7fff

08003374 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2220      	movs	r2, #32
 8003388:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2241      	movs	r2, #65	; 0x41
 800338e:	5c9b      	ldrb	r3, [r3, r2]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b21      	cmp	r3, #33	; 0x21
 8003394:	d108      	bne.n	80033a8 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2101      	movs	r1, #1
 800339a:	0018      	movs	r0, r3
 800339c:	f000 fc24 	bl	8003be8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2211      	movs	r2, #17
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
 80033a6:	e00d      	b.n	80033c4 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2241      	movs	r2, #65	; 0x41
 80033ac:	5c9b      	ldrb	r3, [r3, r2]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b22      	cmp	r3, #34	; 0x22
 80033b2:	d107      	bne.n	80033c4 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2102      	movs	r1, #2
 80033b8:	0018      	movs	r0, r3
 80033ba:	f000 fc15 	bl	8003be8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2212      	movs	r2, #18
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4950      	ldr	r1, [pc, #320]	; (8003510 <I2C_ITMasterCplt+0x19c>)
 80033d0:	400a      	ands	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a4d      	ldr	r2, [pc, #308]	; (8003514 <I2C_ITMasterCplt+0x1a0>)
 80033de:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	001a      	movs	r2, r3
 80033e6:	2301      	movs	r3, #1
 80033e8:	4013      	ands	r3, r2
 80033ea:	d009      	beq.n	8003400 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2210      	movs	r2, #16
 80033f2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f8:	2204      	movs	r2, #4
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2241      	movs	r2, #65	; 0x41
 8003404:	5c9b      	ldrb	r3, [r3, r2]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b60      	cmp	r3, #96	; 0x60
 800340a:	d10b      	bne.n	8003424 <I2C_ITMasterCplt+0xb0>
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	089b      	lsrs	r3, r3, #2
 8003410:	001a      	movs	r2, r3
 8003412:	2301      	movs	r3, #1
 8003414:	4013      	ands	r3, r2
 8003416:	d005      	beq.n	8003424 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	b2db      	uxtb	r3, r3
 8003420:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003422:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	0018      	movs	r0, r3
 8003428:	f000 faff 	bl	8003a2a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2241      	movs	r2, #65	; 0x41
 8003436:	5c9b      	ldrb	r3, [r3, r2]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b60      	cmp	r3, #96	; 0x60
 800343c:	d002      	beq.n	8003444 <I2C_ITMasterCplt+0xd0>
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	0011      	movs	r1, r2
 800344c:	0018      	movs	r0, r3
 800344e:	f000 f9e1 	bl	8003814 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003452:	e058      	b.n	8003506 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2241      	movs	r2, #65	; 0x41
 8003458:	5c9b      	ldrb	r3, [r3, r2]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b21      	cmp	r3, #33	; 0x21
 800345e:	d126      	bne.n	80034ae <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2241      	movs	r2, #65	; 0x41
 8003464:	2120      	movs	r1, #32
 8003466:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2242      	movs	r2, #66	; 0x42
 8003472:	5c9b      	ldrb	r3, [r3, r2]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b40      	cmp	r3, #64	; 0x40
 8003478:	d10c      	bne.n	8003494 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2242      	movs	r2, #66	; 0x42
 800347e:	2100      	movs	r1, #0
 8003480:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2240      	movs	r2, #64	; 0x40
 8003486:	2100      	movs	r1, #0
 8003488:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	0018      	movs	r0, r3
 800348e:	f7ff faed 	bl	8002a6c <HAL_I2C_MemTxCpltCallback>
}
 8003492:	e038      	b.n	8003506 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2242      	movs	r2, #66	; 0x42
 8003498:	2100      	movs	r1, #0
 800349a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2240      	movs	r2, #64	; 0x40
 80034a0:	2100      	movs	r1, #0
 80034a2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	0018      	movs	r0, r3
 80034a8:	f7ff fad0 	bl	8002a4c <HAL_I2C_MasterTxCpltCallback>
}
 80034ac:	e02b      	b.n	8003506 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2241      	movs	r2, #65	; 0x41
 80034b2:	5c9b      	ldrb	r3, [r3, r2]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b22      	cmp	r3, #34	; 0x22
 80034b8:	d125      	bne.n	8003506 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2241      	movs	r2, #65	; 0x41
 80034be:	2120      	movs	r1, #32
 80034c0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2242      	movs	r2, #66	; 0x42
 80034cc:	5c9b      	ldrb	r3, [r3, r2]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d10c      	bne.n	80034ee <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2242      	movs	r2, #66	; 0x42
 80034d8:	2100      	movs	r1, #0
 80034da:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2240      	movs	r2, #64	; 0x40
 80034e0:	2100      	movs	r1, #0
 80034e2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	0018      	movs	r0, r3
 80034e8:	f7ff fac8 	bl	8002a7c <HAL_I2C_MemRxCpltCallback>
}
 80034ec:	e00b      	b.n	8003506 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2242      	movs	r2, #66	; 0x42
 80034f2:	2100      	movs	r1, #0
 80034f4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2240      	movs	r2, #64	; 0x40
 80034fa:	2100      	movs	r1, #0
 80034fc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	0018      	movs	r0, r3
 8003502:	f7ff faab 	bl	8002a5c <HAL_I2C_MasterRxCpltCallback>
}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b006      	add	sp, #24
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	fe00e800 	.word	0xfe00e800
 8003514:	ffff0000 	.word	0xffff0000

08003518 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800352e:	200f      	movs	r0, #15
 8003530:	183b      	adds	r3, r7, r0
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	2141      	movs	r1, #65	; 0x41
 8003536:	5c52      	ldrb	r2, [r2, r1]
 8003538:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2220      	movs	r2, #32
 8003540:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003542:	183b      	adds	r3, r7, r0
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b21      	cmp	r3, #33	; 0x21
 8003548:	d003      	beq.n	8003552 <I2C_ITSlaveCplt+0x3a>
 800354a:	183b      	adds	r3, r7, r0
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b29      	cmp	r3, #41	; 0x29
 8003550:	d109      	bne.n	8003566 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003552:	4a7d      	ldr	r2, [pc, #500]	; (8003748 <I2C_ITSlaveCplt+0x230>)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	0011      	movs	r1, r2
 8003558:	0018      	movs	r0, r3
 800355a:	f000 fb45 	bl	8003be8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2221      	movs	r2, #33	; 0x21
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
 8003564:	e011      	b.n	800358a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003566:	220f      	movs	r2, #15
 8003568:	18bb      	adds	r3, r7, r2
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b22      	cmp	r3, #34	; 0x22
 800356e:	d003      	beq.n	8003578 <I2C_ITSlaveCplt+0x60>
 8003570:	18bb      	adds	r3, r7, r2
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b2a      	cmp	r3, #42	; 0x2a
 8003576:	d108      	bne.n	800358a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003578:	4a74      	ldr	r2, [pc, #464]	; (800374c <I2C_ITSlaveCplt+0x234>)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	0011      	movs	r1, r2
 800357e:	0018      	movs	r0, r3
 8003580:	f000 fb32 	bl	8003be8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2222      	movs	r2, #34	; 0x22
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2180      	movs	r1, #128	; 0x80
 8003596:	0209      	lsls	r1, r1, #8
 8003598:	430a      	orrs	r2, r1
 800359a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	496a      	ldr	r1, [pc, #424]	; (8003750 <I2C_ITSlaveCplt+0x238>)
 80035a8:	400a      	ands	r2, r1
 80035aa:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	0018      	movs	r0, r3
 80035b0:	f000 fa3b 	bl	8003a2a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	0b9b      	lsrs	r3, r3, #14
 80035b8:	001a      	movs	r2, r3
 80035ba:	2301      	movs	r3, #1
 80035bc:	4013      	ands	r3, r2
 80035be:	d013      	beq.n	80035e8 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4962      	ldr	r1, [pc, #392]	; (8003754 <I2C_ITSlaveCplt+0x23c>)
 80035cc:	400a      	ands	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d020      	beq.n	800361a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035e6:	e018      	b.n	800361a <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	0bdb      	lsrs	r3, r3, #15
 80035ec:	001a      	movs	r2, r3
 80035ee:	2301      	movs	r3, #1
 80035f0:	4013      	ands	r3, r2
 80035f2:	d012      	beq.n	800361a <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4956      	ldr	r1, [pc, #344]	; (8003758 <I2C_ITSlaveCplt+0x240>)
 8003600:	400a      	ands	r2, r1
 8003602:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d006      	beq.n	800361a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	b29a      	uxth	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	089b      	lsrs	r3, r3, #2
 800361e:	001a      	movs	r2, r3
 8003620:	2301      	movs	r3, #1
 8003622:	4013      	ands	r3, r2
 8003624:	d020      	beq.n	8003668 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2204      	movs	r2, #4
 800362a:	4393      	bics	r3, r2
 800362c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00c      	beq.n	8003668 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	2204      	movs	r2, #4
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2242      	movs	r2, #66	; 0x42
 8003682:	2100      	movs	r1, #0
 8003684:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003690:	2b00      	cmp	r3, #0
 8003692:	d013      	beq.n	80036bc <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	0011      	movs	r1, r2
 800369c:	0018      	movs	r0, r3
 800369e:	f000 f8b9 	bl	8003814 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2241      	movs	r2, #65	; 0x41
 80036a6:	5c9b      	ldrb	r3, [r3, r2]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b28      	cmp	r3, #40	; 0x28
 80036ac:	d147      	bne.n	800373e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	0011      	movs	r1, r2
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 f853 	bl	8003760 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036ba:	e040      	b.n	800373e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	4a26      	ldr	r2, [pc, #152]	; (800375c <I2C_ITSlaveCplt+0x244>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d016      	beq.n	80036f4 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7ff fded 	bl	80032a8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a22      	ldr	r2, [pc, #136]	; (800375c <I2C_ITSlaveCplt+0x244>)
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2241      	movs	r2, #65	; 0x41
 80036d8:	2120      	movs	r1, #32
 80036da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2240      	movs	r2, #64	; 0x40
 80036e6:	2100      	movs	r1, #0
 80036e8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7fd fb11 	bl	8000d14 <HAL_I2C_ListenCpltCallback>
}
 80036f2:	e024      	b.n	800373e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2241      	movs	r2, #65	; 0x41
 80036f8:	5c9b      	ldrb	r3, [r3, r2]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b22      	cmp	r3, #34	; 0x22
 80036fe:	d10f      	bne.n	8003720 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2241      	movs	r2, #65	; 0x41
 8003704:	2120      	movs	r1, #32
 8003706:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2240      	movs	r2, #64	; 0x40
 8003712:	2100      	movs	r1, #0
 8003714:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	0018      	movs	r0, r3
 800371a:	f7fd faa9 	bl	8000c70 <HAL_I2C_SlaveRxCpltCallback>
}
 800371e:	e00e      	b.n	800373e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2241      	movs	r2, #65	; 0x41
 8003724:	2120      	movs	r1, #32
 8003726:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2240      	movs	r2, #64	; 0x40
 8003732:	2100      	movs	r1, #0
 8003734:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	0018      	movs	r0, r3
 800373a:	f7fd fa8b 	bl	8000c54 <HAL_I2C_SlaveTxCpltCallback>
}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	b006      	add	sp, #24
 8003744:	bd80      	pop	{r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	00008001 	.word	0x00008001
 800374c:	00008002 	.word	0x00008002
 8003750:	fe00e800 	.word	0xfe00e800
 8003754:	ffffbfff 	.word	0xffffbfff
 8003758:	ffff7fff 	.word	0xffff7fff
 800375c:	ffff0000 	.word	0xffff0000

08003760 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a27      	ldr	r2, [pc, #156]	; (800380c <I2C_ITListenCplt+0xac>)
 800376e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2241      	movs	r2, #65	; 0x41
 800377a:	2120      	movs	r1, #32
 800377c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2242      	movs	r2, #66	; 0x42
 8003782:	2100      	movs	r1, #0
 8003784:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	001a      	movs	r2, r3
 8003792:	2301      	movs	r3, #1
 8003794:	4013      	ands	r3, r2
 8003796:	d022      	beq.n	80037de <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d012      	beq.n	80037de <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	2204      	movs	r2, #4
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80037de:	4a0c      	ldr	r2, [pc, #48]	; (8003810 <I2C_ITListenCplt+0xb0>)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	0011      	movs	r1, r2
 80037e4:	0018      	movs	r0, r3
 80037e6:	f000 f9ff 	bl	8003be8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2210      	movs	r2, #16
 80037f0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2240      	movs	r2, #64	; 0x40
 80037f6:	2100      	movs	r1, #0
 80037f8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7fd fa89 	bl	8000d14 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	46bd      	mov	sp, r7
 8003806:	b002      	add	sp, #8
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	ffff0000 	.word	0xffff0000
 8003810:	00008003 	.word	0x00008003

08003814 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800381e:	200f      	movs	r0, #15
 8003820:	183b      	adds	r3, r7, r0
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	2141      	movs	r1, #65	; 0x41
 8003826:	5c52      	ldrb	r2, [r2, r1]
 8003828:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2242      	movs	r2, #66	; 0x42
 800382e:	2100      	movs	r1, #0
 8003830:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a62      	ldr	r2, [pc, #392]	; (80039c0 <I2C_ITError+0x1ac>)
 8003836:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800384a:	183b      	adds	r3, r7, r0
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b28      	cmp	r3, #40	; 0x28
 8003850:	d007      	beq.n	8003862 <I2C_ITError+0x4e>
 8003852:	183b      	adds	r3, r7, r0
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b29      	cmp	r3, #41	; 0x29
 8003858:	d003      	beq.n	8003862 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800385a:	183b      	adds	r3, r7, r0
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b2a      	cmp	r3, #42	; 0x2a
 8003860:	d10c      	bne.n	800387c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2103      	movs	r1, #3
 8003866:	0018      	movs	r0, r3
 8003868:	f000 f9be 	bl	8003be8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2241      	movs	r2, #65	; 0x41
 8003870:	2128      	movs	r1, #40	; 0x28
 8003872:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a53      	ldr	r2, [pc, #332]	; (80039c4 <I2C_ITError+0x1b0>)
 8003878:	635a      	str	r2, [r3, #52]	; 0x34
 800387a:	e012      	b.n	80038a2 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800387c:	4a52      	ldr	r2, [pc, #328]	; (80039c8 <I2C_ITError+0x1b4>)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	0011      	movs	r1, r2
 8003882:	0018      	movs	r0, r3
 8003884:	f000 f9b0 	bl	8003be8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2241      	movs	r2, #65	; 0x41
 800388c:	5c9b      	ldrb	r3, [r3, r2]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b60      	cmp	r3, #96	; 0x60
 8003892:	d003      	beq.n	800389c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2241      	movs	r2, #65	; 0x41
 8003898:	2120      	movs	r1, #32
 800389a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d03b      	beq.n	8003928 <I2C_ITError+0x114>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b11      	cmp	r3, #17
 80038b4:	d002      	beq.n	80038bc <I2C_ITError+0xa8>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b21      	cmp	r3, #33	; 0x21
 80038ba:	d135      	bne.n	8003928 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	01db      	lsls	r3, r3, #7
 80038c6:	401a      	ands	r2, r3
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	01db      	lsls	r3, r3, #7
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d107      	bne.n	80038e0 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	493c      	ldr	r1, [pc, #240]	; (80039cc <I2C_ITError+0x1b8>)
 80038dc:	400a      	ands	r2, r1
 80038de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	0018      	movs	r0, r3
 80038e6:	f7fe fc40 	bl	800216a <HAL_DMA_GetState>
 80038ea:	0003      	movs	r3, r0
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d016      	beq.n	800391e <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	4a36      	ldr	r2, [pc, #216]	; (80039d0 <I2C_ITError+0x1bc>)
 80038f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2240      	movs	r2, #64	; 0x40
 80038fc:	2100      	movs	r1, #0
 80038fe:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	0018      	movs	r0, r3
 8003906:	f7fe fb49 	bl	8001f9c <HAL_DMA_Abort_IT>
 800390a:	1e03      	subs	r3, r0, #0
 800390c:	d051      	beq.n	80039b2 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	0018      	movs	r0, r3
 800391a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800391c:	e049      	b.n	80039b2 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	0018      	movs	r0, r3
 8003922:	f000 f859 	bl	80039d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003926:	e044      	b.n	80039b2 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d03b      	beq.n	80039a8 <I2C_ITError+0x194>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b12      	cmp	r3, #18
 8003934:	d002      	beq.n	800393c <I2C_ITError+0x128>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b22      	cmp	r3, #34	; 0x22
 800393a:	d135      	bne.n	80039a8 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	2380      	movs	r3, #128	; 0x80
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	401a      	ands	r2, r3
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	429a      	cmp	r2, r3
 800394e:	d107      	bne.n	8003960 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	491e      	ldr	r1, [pc, #120]	; (80039d4 <I2C_ITError+0x1c0>)
 800395c:	400a      	ands	r2, r1
 800395e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003964:	0018      	movs	r0, r3
 8003966:	f7fe fc00 	bl	800216a <HAL_DMA_GetState>
 800396a:	0003      	movs	r3, r0
 800396c:	2b01      	cmp	r3, #1
 800396e:	d016      	beq.n	800399e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003974:	4a16      	ldr	r2, [pc, #88]	; (80039d0 <I2C_ITError+0x1bc>)
 8003976:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2240      	movs	r2, #64	; 0x40
 800397c:	2100      	movs	r1, #0
 800397e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003984:	0018      	movs	r0, r3
 8003986:	f7fe fb09 	bl	8001f9c <HAL_DMA_Abort_IT>
 800398a:	1e03      	subs	r3, r0, #0
 800398c:	d013      	beq.n	80039b6 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003998:	0018      	movs	r0, r3
 800399a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800399c:	e00b      	b.n	80039b6 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	0018      	movs	r0, r3
 80039a2:	f000 f819 	bl	80039d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039a6:	e006      	b.n	80039b6 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	0018      	movs	r0, r3
 80039ac:	f000 f814 	bl	80039d8 <I2C_TreatErrorCallback>
  }
}
 80039b0:	e002      	b.n	80039b8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	e000      	b.n	80039b8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039b6:	46c0      	nop			; (mov r8, r8)
}
 80039b8:	46c0      	nop			; (mov r8, r8)
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b004      	add	sp, #16
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	ffff0000 	.word	0xffff0000
 80039c4:	08002ab1 	.word	0x08002ab1
 80039c8:	00008003 	.word	0x00008003
 80039cc:	ffffbfff 	.word	0xffffbfff
 80039d0:	08003a6f 	.word	0x08003a6f
 80039d4:	ffff7fff 	.word	0xffff7fff

080039d8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2241      	movs	r2, #65	; 0x41
 80039e4:	5c9b      	ldrb	r3, [r3, r2]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b60      	cmp	r3, #96	; 0x60
 80039ea:	d10f      	bne.n	8003a0c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2241      	movs	r2, #65	; 0x41
 80039f0:	2120      	movs	r1, #32
 80039f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2240      	movs	r2, #64	; 0x40
 80039fe:	2100      	movs	r1, #0
 8003a00:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7ff f841 	bl	8002a8c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a0a:	e00a      	b.n	8003a22 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2240      	movs	r2, #64	; 0x40
 8003a16:	2100      	movs	r1, #0
 8003a18:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f7fd f981 	bl	8000d24 <HAL_I2C_ErrorCallback>
}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	46bd      	mov	sp, r7
 8003a26:	b002      	add	sp, #8
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d103      	bne.n	8003a48 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2200      	movs	r2, #0
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d007      	beq.n	8003a66 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2101      	movs	r1, #1
 8003a62:	430a      	orrs	r2, r1
 8003a64:	619a      	str	r2, [r3, #24]
  }
}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b002      	add	sp, #8
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	2200      	movs	r2, #0
 8003a8a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a98:	2200      	movs	r2, #0
 8003a9a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f7ff ff9a 	bl	80039d8 <I2C_TreatErrorCallback>
}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b004      	add	sp, #16
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003aac:	b590      	push	{r4, r7, lr}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	0008      	movs	r0, r1
 8003ab6:	0011      	movs	r1, r2
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	240a      	movs	r4, #10
 8003abc:	193b      	adds	r3, r7, r4
 8003abe:	1c02      	adds	r2, r0, #0
 8003ac0:	801a      	strh	r2, [r3, #0]
 8003ac2:	2009      	movs	r0, #9
 8003ac4:	183b      	adds	r3, r7, r0
 8003ac6:	1c0a      	adds	r2, r1, #0
 8003ac8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	6a3a      	ldr	r2, [r7, #32]
 8003ad2:	0d51      	lsrs	r1, r2, #21
 8003ad4:	2280      	movs	r2, #128	; 0x80
 8003ad6:	00d2      	lsls	r2, r2, #3
 8003ad8:	400a      	ands	r2, r1
 8003ada:	490e      	ldr	r1, [pc, #56]	; (8003b14 <I2C_TransferConfig+0x68>)
 8003adc:	430a      	orrs	r2, r1
 8003ade:	43d2      	mvns	r2, r2
 8003ae0:	401a      	ands	r2, r3
 8003ae2:	0011      	movs	r1, r2
 8003ae4:	193b      	adds	r3, r7, r4
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	059b      	lsls	r3, r3, #22
 8003aea:	0d9a      	lsrs	r2, r3, #22
 8003aec:	183b      	adds	r3, r7, r0
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	0418      	lsls	r0, r3, #16
 8003af2:	23ff      	movs	r3, #255	; 0xff
 8003af4:	041b      	lsls	r3, r3, #16
 8003af6:	4003      	ands	r3, r0
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	431a      	orrs	r2, r3
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	431a      	orrs	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b005      	add	sp, #20
 8003b10:	bd90      	pop	{r4, r7, pc}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	03ff63ff 	.word	0x03ff63ff

08003b18 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	000a      	movs	r2, r1
 8003b22:	1cbb      	adds	r3, r7, #2
 8003b24:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b2e:	4b2c      	ldr	r3, [pc, #176]	; (8003be0 <I2C_Enable_IRQ+0xc8>)
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d004      	beq.n	8003b3e <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003b38:	4b2a      	ldr	r3, [pc, #168]	; (8003be4 <I2C_Enable_IRQ+0xcc>)
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d121      	bne.n	8003b82 <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b3e:	1cbb      	adds	r3, r7, #2
 8003b40:	2200      	movs	r2, #0
 8003b42:	5e9b      	ldrsh	r3, [r3, r2]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	da03      	bge.n	8003b50 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	22b8      	movs	r2, #184	; 0xb8
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b50:	1cbb      	adds	r3, r7, #2
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d103      	bne.n	8003b60 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2290      	movs	r2, #144	; 0x90
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b60:	1cbb      	adds	r3, r7, #2
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d103      	bne.n	8003b70 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2260      	movs	r2, #96	; 0x60
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b70:	1cbb      	adds	r3, r7, #2
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d127      	bne.n	8003bc8 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2240      	movs	r2, #64	; 0x40
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b80:	e022      	b.n	8003bc8 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b82:	1cbb      	adds	r3, r7, #2
 8003b84:	2200      	movs	r2, #0
 8003b86:	5e9b      	ldrsh	r3, [r3, r2]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	da03      	bge.n	8003b94 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	22b8      	movs	r2, #184	; 0xb8
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003b94:	1cbb      	adds	r3, r7, #2
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d003      	beq.n	8003ba6 <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	22f2      	movs	r2, #242	; 0xf2
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ba6:	1cbb      	adds	r3, r7, #2
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	2202      	movs	r2, #2
 8003bac:	4013      	ands	r3, r2
 8003bae:	d003      	beq.n	8003bb8 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	22f4      	movs	r2, #244	; 0xf4
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003bb8:	1cbb      	adds	r3, r7, #2
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d103      	bne.n	8003bc8 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b004      	add	sp, #16
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	08002cd9 	.word	0x08002cd9
 8003be4:	08002ef1 	.word	0x08002ef1

08003be8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	000a      	movs	r2, r1
 8003bf2:	1cbb      	adds	r3, r7, #2
 8003bf4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003bfa:	1cbb      	adds	r3, r7, #2
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	4013      	ands	r3, r2
 8003c02:	d010      	beq.n	8003c26 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2242      	movs	r2, #66	; 0x42
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2241      	movs	r2, #65	; 0x41
 8003c10:	5c9b      	ldrb	r3, [r3, r2]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	001a      	movs	r2, r3
 8003c16:	2328      	movs	r3, #40	; 0x28
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b28      	cmp	r3, #40	; 0x28
 8003c1c:	d003      	beq.n	8003c26 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	22b0      	movs	r2, #176	; 0xb0
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c26:	1cbb      	adds	r3, r7, #2
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d010      	beq.n	8003c52 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2244      	movs	r2, #68	; 0x44
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2241      	movs	r2, #65	; 0x41
 8003c3c:	5c9b      	ldrb	r3, [r3, r2]
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	001a      	movs	r2, r3
 8003c42:	2328      	movs	r3, #40	; 0x28
 8003c44:	4013      	ands	r3, r2
 8003c46:	2b28      	cmp	r3, #40	; 0x28
 8003c48:	d003      	beq.n	8003c52 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	22b0      	movs	r2, #176	; 0xb0
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c52:	1cbb      	adds	r3, r7, #2
 8003c54:	2200      	movs	r2, #0
 8003c56:	5e9b      	ldrsh	r3, [r3, r2]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	da03      	bge.n	8003c64 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	22b8      	movs	r2, #184	; 0xb8
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003c64:	1cbb      	adds	r3, r7, #2
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d103      	bne.n	8003c74 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2290      	movs	r2, #144	; 0x90
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c74:	1cbb      	adds	r3, r7, #2
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d103      	bne.n	8003c84 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003c84:	1cbb      	adds	r3, r7, #2
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	2b40      	cmp	r3, #64	; 0x40
 8003c8a:	d103      	bne.n	8003c94 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2240      	movs	r2, #64	; 0x40
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	43d9      	mvns	r1, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	601a      	str	r2, [r3, #0]
}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b004      	add	sp, #16
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2241      	movs	r2, #65	; 0x41
 8003cbe:	5c9b      	ldrb	r3, [r3, r2]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d138      	bne.n	8003d38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2240      	movs	r2, #64	; 0x40
 8003cca:	5c9b      	ldrb	r3, [r3, r2]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e032      	b.n	8003d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2240      	movs	r2, #64	; 0x40
 8003cd8:	2101      	movs	r1, #1
 8003cda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2241      	movs	r2, #65	; 0x41
 8003ce0:	2124      	movs	r1, #36	; 0x24
 8003ce2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2101      	movs	r1, #1
 8003cf0:	438a      	bics	r2, r1
 8003cf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4911      	ldr	r1, [pc, #68]	; (8003d44 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003d00:	400a      	ands	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2101      	movs	r1, #1
 8003d20:	430a      	orrs	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2241      	movs	r2, #65	; 0x41
 8003d28:	2120      	movs	r1, #32
 8003d2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2240      	movs	r2, #64	; 0x40
 8003d30:	2100      	movs	r1, #0
 8003d32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e000      	b.n	8003d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d38:	2302      	movs	r3, #2
  }
}
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b002      	add	sp, #8
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	ffffefff 	.word	0xffffefff

08003d48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2241      	movs	r2, #65	; 0x41
 8003d56:	5c9b      	ldrb	r3, [r3, r2]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d139      	bne.n	8003dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2240      	movs	r2, #64	; 0x40
 8003d62:	5c9b      	ldrb	r3, [r3, r2]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e033      	b.n	8003dd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2240      	movs	r2, #64	; 0x40
 8003d70:	2101      	movs	r1, #1
 8003d72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2241      	movs	r2, #65	; 0x41
 8003d78:	2124      	movs	r1, #36	; 0x24
 8003d7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2101      	movs	r1, #1
 8003d88:	438a      	bics	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4a11      	ldr	r2, [pc, #68]	; (8003ddc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2101      	movs	r1, #1
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2241      	movs	r2, #65	; 0x41
 8003dc2:	2120      	movs	r1, #32
 8003dc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2240      	movs	r2, #64	; 0x40
 8003dca:	2100      	movs	r1, #0
 8003dcc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e000      	b.n	8003dd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
  }
}
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b004      	add	sp, #16
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	fffff0ff 	.word	0xfffff0ff

08003de0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e301      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2201      	movs	r2, #1
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d100      	bne.n	8003dfe <HAL_RCC_OscConfig+0x1e>
 8003dfc:	e08d      	b.n	8003f1a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003dfe:	4bc3      	ldr	r3, [pc, #780]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	220c      	movs	r2, #12
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d00e      	beq.n	8003e28 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e0a:	4bc0      	ldr	r3, [pc, #768]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	220c      	movs	r2, #12
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d116      	bne.n	8003e44 <HAL_RCC_OscConfig+0x64>
 8003e16:	4bbd      	ldr	r3, [pc, #756]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	025b      	lsls	r3, r3, #9
 8003e1e:	401a      	ands	r2, r3
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	025b      	lsls	r3, r3, #9
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d10d      	bne.n	8003e44 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e28:	4bb8      	ldr	r3, [pc, #736]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	2380      	movs	r3, #128	; 0x80
 8003e2e:	029b      	lsls	r3, r3, #10
 8003e30:	4013      	ands	r3, r2
 8003e32:	d100      	bne.n	8003e36 <HAL_RCC_OscConfig+0x56>
 8003e34:	e070      	b.n	8003f18 <HAL_RCC_OscConfig+0x138>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d000      	beq.n	8003e40 <HAL_RCC_OscConfig+0x60>
 8003e3e:	e06b      	b.n	8003f18 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e2d8      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d107      	bne.n	8003e5c <HAL_RCC_OscConfig+0x7c>
 8003e4c:	4baf      	ldr	r3, [pc, #700]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4bae      	ldr	r3, [pc, #696]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003e52:	2180      	movs	r1, #128	; 0x80
 8003e54:	0249      	lsls	r1, r1, #9
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e02f      	b.n	8003ebc <HAL_RCC_OscConfig+0xdc>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10c      	bne.n	8003e7e <HAL_RCC_OscConfig+0x9e>
 8003e64:	4ba9      	ldr	r3, [pc, #676]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4ba8      	ldr	r3, [pc, #672]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003e6a:	49a9      	ldr	r1, [pc, #676]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003e6c:	400a      	ands	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	4ba6      	ldr	r3, [pc, #664]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4ba5      	ldr	r3, [pc, #660]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003e76:	49a7      	ldr	r1, [pc, #668]	; (8004114 <HAL_RCC_OscConfig+0x334>)
 8003e78:	400a      	ands	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	e01e      	b.n	8003ebc <HAL_RCC_OscConfig+0xdc>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b05      	cmp	r3, #5
 8003e84:	d10e      	bne.n	8003ea4 <HAL_RCC_OscConfig+0xc4>
 8003e86:	4ba1      	ldr	r3, [pc, #644]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4ba0      	ldr	r3, [pc, #640]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003e8c:	2180      	movs	r1, #128	; 0x80
 8003e8e:	02c9      	lsls	r1, r1, #11
 8003e90:	430a      	orrs	r2, r1
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	4b9d      	ldr	r3, [pc, #628]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	4b9c      	ldr	r3, [pc, #624]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003e9a:	2180      	movs	r1, #128	; 0x80
 8003e9c:	0249      	lsls	r1, r1, #9
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	e00b      	b.n	8003ebc <HAL_RCC_OscConfig+0xdc>
 8003ea4:	4b99      	ldr	r3, [pc, #612]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	4b98      	ldr	r3, [pc, #608]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003eaa:	4999      	ldr	r1, [pc, #612]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003eac:	400a      	ands	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	4b96      	ldr	r3, [pc, #600]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4b95      	ldr	r3, [pc, #596]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003eb6:	4997      	ldr	r1, [pc, #604]	; (8004114 <HAL_RCC_OscConfig+0x334>)
 8003eb8:	400a      	ands	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d014      	beq.n	8003eee <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fd fac0 	bl	8001448 <HAL_GetTick>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ece:	f7fd fabb 	bl	8001448 <HAL_GetTick>
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b64      	cmp	r3, #100	; 0x64
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e28a      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee0:	4b8a      	ldr	r3, [pc, #552]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	029b      	lsls	r3, r3, #10
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0xee>
 8003eec:	e015      	b.n	8003f1a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eee:	f7fd faab 	bl	8001448 <HAL_GetTick>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ef8:	f7fd faa6 	bl	8001448 <HAL_GetTick>
 8003efc:	0002      	movs	r2, r0
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b64      	cmp	r3, #100	; 0x64
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e275      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f0a:	4b80      	ldr	r3, [pc, #512]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	2380      	movs	r3, #128	; 0x80
 8003f10:	029b      	lsls	r3, r3, #10
 8003f12:	4013      	ands	r3, r2
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x118>
 8003f16:	e000      	b.n	8003f1a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f18:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	4013      	ands	r3, r2
 8003f22:	d100      	bne.n	8003f26 <HAL_RCC_OscConfig+0x146>
 8003f24:	e069      	b.n	8003ffa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f26:	4b79      	ldr	r3, [pc, #484]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	220c      	movs	r2, #12
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d00b      	beq.n	8003f48 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f30:	4b76      	ldr	r3, [pc, #472]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	220c      	movs	r2, #12
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d11c      	bne.n	8003f76 <HAL_RCC_OscConfig+0x196>
 8003f3c:	4b73      	ldr	r3, [pc, #460]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	2380      	movs	r3, #128	; 0x80
 8003f42:	025b      	lsls	r3, r3, #9
 8003f44:	4013      	ands	r3, r2
 8003f46:	d116      	bne.n	8003f76 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f48:	4b70      	ldr	r3, [pc, #448]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d005      	beq.n	8003f5e <HAL_RCC_OscConfig+0x17e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d001      	beq.n	8003f5e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e24b      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5e:	4b6b      	ldr	r3, [pc, #428]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	22f8      	movs	r2, #248	; 0xf8
 8003f64:	4393      	bics	r3, r2
 8003f66:	0019      	movs	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	00da      	lsls	r2, r3, #3
 8003f6e:	4b67      	ldr	r3, [pc, #412]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003f70:	430a      	orrs	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f74:	e041      	b.n	8003ffa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d024      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f7e:	4b63      	ldr	r3, [pc, #396]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4b62      	ldr	r3, [pc, #392]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003f84:	2101      	movs	r1, #1
 8003f86:	430a      	orrs	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7fd fa5d 	bl	8001448 <HAL_GetTick>
 8003f8e:	0003      	movs	r3, r0
 8003f90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f94:	f7fd fa58 	bl	8001448 <HAL_GetTick>
 8003f98:	0002      	movs	r2, r0
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e227      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa6:	4b59      	ldr	r3, [pc, #356]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2202      	movs	r2, #2
 8003fac:	4013      	ands	r3, r2
 8003fae:	d0f1      	beq.n	8003f94 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb0:	4b56      	ldr	r3, [pc, #344]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	22f8      	movs	r2, #248	; 0xf8
 8003fb6:	4393      	bics	r3, r2
 8003fb8:	0019      	movs	r1, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	00da      	lsls	r2, r3, #3
 8003fc0:	4b52      	ldr	r3, [pc, #328]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	e018      	b.n	8003ffa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fc8:	4b50      	ldr	r3, [pc, #320]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b4f      	ldr	r3, [pc, #316]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003fce:	2101      	movs	r1, #1
 8003fd0:	438a      	bics	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd4:	f7fd fa38 	bl	8001448 <HAL_GetTick>
 8003fd8:	0003      	movs	r3, r0
 8003fda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fde:	f7fd fa33 	bl	8001448 <HAL_GetTick>
 8003fe2:	0002      	movs	r2, r0
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e202      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ff0:	4b46      	ldr	r3, [pc, #280]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d1f1      	bne.n	8003fde <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2208      	movs	r2, #8
 8004000:	4013      	ands	r3, r2
 8004002:	d036      	beq.n	8004072 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d019      	beq.n	8004040 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800400c:	4b3f      	ldr	r3, [pc, #252]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 800400e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004010:	4b3e      	ldr	r3, [pc, #248]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8004012:	2101      	movs	r1, #1
 8004014:	430a      	orrs	r2, r1
 8004016:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004018:	f7fd fa16 	bl	8001448 <HAL_GetTick>
 800401c:	0003      	movs	r3, r0
 800401e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004022:	f7fd fa11 	bl	8001448 <HAL_GetTick>
 8004026:	0002      	movs	r2, r0
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e1e0      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004034:	4b35      	ldr	r3, [pc, #212]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	2202      	movs	r2, #2
 800403a:	4013      	ands	r3, r2
 800403c:	d0f1      	beq.n	8004022 <HAL_RCC_OscConfig+0x242>
 800403e:	e018      	b.n	8004072 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004040:	4b32      	ldr	r3, [pc, #200]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8004042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004044:	4b31      	ldr	r3, [pc, #196]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8004046:	2101      	movs	r1, #1
 8004048:	438a      	bics	r2, r1
 800404a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404c:	f7fd f9fc 	bl	8001448 <HAL_GetTick>
 8004050:	0003      	movs	r3, r0
 8004052:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004056:	f7fd f9f7 	bl	8001448 <HAL_GetTick>
 800405a:	0002      	movs	r2, r0
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e1c6      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004068:	4b28      	ldr	r3, [pc, #160]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	2202      	movs	r2, #2
 800406e:	4013      	ands	r3, r2
 8004070:	d1f1      	bne.n	8004056 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2204      	movs	r2, #4
 8004078:	4013      	ands	r3, r2
 800407a:	d100      	bne.n	800407e <HAL_RCC_OscConfig+0x29e>
 800407c:	e0b4      	b.n	80041e8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800407e:	201f      	movs	r0, #31
 8004080:	183b      	adds	r3, r7, r0
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004086:	4b21      	ldr	r3, [pc, #132]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8004088:	69da      	ldr	r2, [r3, #28]
 800408a:	2380      	movs	r3, #128	; 0x80
 800408c:	055b      	lsls	r3, r3, #21
 800408e:	4013      	ands	r3, r2
 8004090:	d110      	bne.n	80040b4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004092:	4b1e      	ldr	r3, [pc, #120]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	4b1d      	ldr	r3, [pc, #116]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8004098:	2180      	movs	r1, #128	; 0x80
 800409a:	0549      	lsls	r1, r1, #21
 800409c:	430a      	orrs	r2, r1
 800409e:	61da      	str	r2, [r3, #28]
 80040a0:	4b1a      	ldr	r3, [pc, #104]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 80040a2:	69da      	ldr	r2, [r3, #28]
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	055b      	lsls	r3, r3, #21
 80040a8:	4013      	ands	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040ae:	183b      	adds	r3, r7, r0
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b4:	4b18      	ldr	r3, [pc, #96]	; (8004118 <HAL_RCC_OscConfig+0x338>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	4013      	ands	r3, r2
 80040be:	d11a      	bne.n	80040f6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040c0:	4b15      	ldr	r3, [pc, #84]	; (8004118 <HAL_RCC_OscConfig+0x338>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4b14      	ldr	r3, [pc, #80]	; (8004118 <HAL_RCC_OscConfig+0x338>)
 80040c6:	2180      	movs	r1, #128	; 0x80
 80040c8:	0049      	lsls	r1, r1, #1
 80040ca:	430a      	orrs	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ce:	f7fd f9bb 	bl	8001448 <HAL_GetTick>
 80040d2:	0003      	movs	r3, r0
 80040d4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d8:	f7fd f9b6 	bl	8001448 <HAL_GetTick>
 80040dc:	0002      	movs	r2, r0
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	; 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e185      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ea:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <HAL_RCC_OscConfig+0x338>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	4013      	ands	r3, r2
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d10e      	bne.n	800411c <HAL_RCC_OscConfig+0x33c>
 80040fe:	4b03      	ldr	r3, [pc, #12]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8004100:	6a1a      	ldr	r2, [r3, #32]
 8004102:	4b02      	ldr	r3, [pc, #8]	; (800410c <HAL_RCC_OscConfig+0x32c>)
 8004104:	2101      	movs	r1, #1
 8004106:	430a      	orrs	r2, r1
 8004108:	621a      	str	r2, [r3, #32]
 800410a:	e035      	b.n	8004178 <HAL_RCC_OscConfig+0x398>
 800410c:	40021000 	.word	0x40021000
 8004110:	fffeffff 	.word	0xfffeffff
 8004114:	fffbffff 	.word	0xfffbffff
 8004118:	40007000 	.word	0x40007000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10c      	bne.n	800413e <HAL_RCC_OscConfig+0x35e>
 8004124:	4bb6      	ldr	r3, [pc, #728]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004126:	6a1a      	ldr	r2, [r3, #32]
 8004128:	4bb5      	ldr	r3, [pc, #724]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 800412a:	2101      	movs	r1, #1
 800412c:	438a      	bics	r2, r1
 800412e:	621a      	str	r2, [r3, #32]
 8004130:	4bb3      	ldr	r3, [pc, #716]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004132:	6a1a      	ldr	r2, [r3, #32]
 8004134:	4bb2      	ldr	r3, [pc, #712]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004136:	2104      	movs	r1, #4
 8004138:	438a      	bics	r2, r1
 800413a:	621a      	str	r2, [r3, #32]
 800413c:	e01c      	b.n	8004178 <HAL_RCC_OscConfig+0x398>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b05      	cmp	r3, #5
 8004144:	d10c      	bne.n	8004160 <HAL_RCC_OscConfig+0x380>
 8004146:	4bae      	ldr	r3, [pc, #696]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004148:	6a1a      	ldr	r2, [r3, #32]
 800414a:	4bad      	ldr	r3, [pc, #692]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 800414c:	2104      	movs	r1, #4
 800414e:	430a      	orrs	r2, r1
 8004150:	621a      	str	r2, [r3, #32]
 8004152:	4bab      	ldr	r3, [pc, #684]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004154:	6a1a      	ldr	r2, [r3, #32]
 8004156:	4baa      	ldr	r3, [pc, #680]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004158:	2101      	movs	r1, #1
 800415a:	430a      	orrs	r2, r1
 800415c:	621a      	str	r2, [r3, #32]
 800415e:	e00b      	b.n	8004178 <HAL_RCC_OscConfig+0x398>
 8004160:	4ba7      	ldr	r3, [pc, #668]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004162:	6a1a      	ldr	r2, [r3, #32]
 8004164:	4ba6      	ldr	r3, [pc, #664]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004166:	2101      	movs	r1, #1
 8004168:	438a      	bics	r2, r1
 800416a:	621a      	str	r2, [r3, #32]
 800416c:	4ba4      	ldr	r3, [pc, #656]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 800416e:	6a1a      	ldr	r2, [r3, #32]
 8004170:	4ba3      	ldr	r3, [pc, #652]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004172:	2104      	movs	r1, #4
 8004174:	438a      	bics	r2, r1
 8004176:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d014      	beq.n	80041aa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004180:	f7fd f962 	bl	8001448 <HAL_GetTick>
 8004184:	0003      	movs	r3, r0
 8004186:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004188:	e009      	b.n	800419e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800418a:	f7fd f95d 	bl	8001448 <HAL_GetTick>
 800418e:	0002      	movs	r2, r0
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	4a9b      	ldr	r2, [pc, #620]	; (8004404 <HAL_RCC_OscConfig+0x624>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e12b      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419e:	4b98      	ldr	r3, [pc, #608]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	2202      	movs	r2, #2
 80041a4:	4013      	ands	r3, r2
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x3aa>
 80041a8:	e013      	b.n	80041d2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041aa:	f7fd f94d 	bl	8001448 <HAL_GetTick>
 80041ae:	0003      	movs	r3, r0
 80041b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b2:	e009      	b.n	80041c8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b4:	f7fd f948 	bl	8001448 <HAL_GetTick>
 80041b8:	0002      	movs	r2, r0
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	4a91      	ldr	r2, [pc, #580]	; (8004404 <HAL_RCC_OscConfig+0x624>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e116      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c8:	4b8d      	ldr	r3, [pc, #564]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	2202      	movs	r2, #2
 80041ce:	4013      	ands	r3, r2
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041d2:	231f      	movs	r3, #31
 80041d4:	18fb      	adds	r3, r7, r3
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d105      	bne.n	80041e8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041dc:	4b88      	ldr	r3, [pc, #544]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	4b87      	ldr	r3, [pc, #540]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 80041e2:	4989      	ldr	r1, [pc, #548]	; (8004408 <HAL_RCC_OscConfig+0x628>)
 80041e4:	400a      	ands	r2, r1
 80041e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2210      	movs	r2, #16
 80041ee:	4013      	ands	r3, r2
 80041f0:	d063      	beq.n	80042ba <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d12a      	bne.n	8004250 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80041fa:	4b81      	ldr	r3, [pc, #516]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 80041fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041fe:	4b80      	ldr	r3, [pc, #512]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004200:	2104      	movs	r1, #4
 8004202:	430a      	orrs	r2, r1
 8004204:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004206:	4b7e      	ldr	r3, [pc, #504]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800420a:	4b7d      	ldr	r3, [pc, #500]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 800420c:	2101      	movs	r1, #1
 800420e:	430a      	orrs	r2, r1
 8004210:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004212:	f7fd f919 	bl	8001448 <HAL_GetTick>
 8004216:	0003      	movs	r3, r0
 8004218:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800421c:	f7fd f914 	bl	8001448 <HAL_GetTick>
 8004220:	0002      	movs	r2, r0
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e0e3      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800422e:	4b74      	ldr	r3, [pc, #464]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004232:	2202      	movs	r2, #2
 8004234:	4013      	ands	r3, r2
 8004236:	d0f1      	beq.n	800421c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004238:	4b71      	ldr	r3, [pc, #452]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 800423a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423c:	22f8      	movs	r2, #248	; 0xf8
 800423e:	4393      	bics	r3, r2
 8004240:	0019      	movs	r1, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	00da      	lsls	r2, r3, #3
 8004248:	4b6d      	ldr	r3, [pc, #436]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 800424a:	430a      	orrs	r2, r1
 800424c:	635a      	str	r2, [r3, #52]	; 0x34
 800424e:	e034      	b.n	80042ba <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	3305      	adds	r3, #5
 8004256:	d111      	bne.n	800427c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004258:	4b69      	ldr	r3, [pc, #420]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 800425a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800425c:	4b68      	ldr	r3, [pc, #416]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 800425e:	2104      	movs	r1, #4
 8004260:	438a      	bics	r2, r1
 8004262:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004264:	4b66      	ldr	r3, [pc, #408]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004268:	22f8      	movs	r2, #248	; 0xf8
 800426a:	4393      	bics	r3, r2
 800426c:	0019      	movs	r1, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	00da      	lsls	r2, r3, #3
 8004274:	4b62      	ldr	r3, [pc, #392]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004276:	430a      	orrs	r2, r1
 8004278:	635a      	str	r2, [r3, #52]	; 0x34
 800427a:	e01e      	b.n	80042ba <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800427c:	4b60      	ldr	r3, [pc, #384]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 800427e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004280:	4b5f      	ldr	r3, [pc, #380]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004282:	2104      	movs	r1, #4
 8004284:	430a      	orrs	r2, r1
 8004286:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004288:	4b5d      	ldr	r3, [pc, #372]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 800428a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800428c:	4b5c      	ldr	r3, [pc, #368]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 800428e:	2101      	movs	r1, #1
 8004290:	438a      	bics	r2, r1
 8004292:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004294:	f7fd f8d8 	bl	8001448 <HAL_GetTick>
 8004298:	0003      	movs	r3, r0
 800429a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800429e:	f7fd f8d3 	bl	8001448 <HAL_GetTick>
 80042a2:	0002      	movs	r2, r0
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e0a2      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80042b0:	4b53      	ldr	r3, [pc, #332]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 80042b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b4:	2202      	movs	r2, #2
 80042b6:	4013      	ands	r3, r2
 80042b8:	d1f1      	bne.n	800429e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d100      	bne.n	80042c4 <HAL_RCC_OscConfig+0x4e4>
 80042c2:	e097      	b.n	80043f4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042c4:	4b4e      	ldr	r3, [pc, #312]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	220c      	movs	r2, #12
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d100      	bne.n	80042d2 <HAL_RCC_OscConfig+0x4f2>
 80042d0:	e06b      	b.n	80043aa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d14c      	bne.n	8004374 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042da:	4b49      	ldr	r3, [pc, #292]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4b48      	ldr	r3, [pc, #288]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 80042e0:	494a      	ldr	r1, [pc, #296]	; (800440c <HAL_RCC_OscConfig+0x62c>)
 80042e2:	400a      	ands	r2, r1
 80042e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e6:	f7fd f8af 	bl	8001448 <HAL_GetTick>
 80042ea:	0003      	movs	r3, r0
 80042ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f0:	f7fd f8aa 	bl	8001448 <HAL_GetTick>
 80042f4:	0002      	movs	r2, r0
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e079      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004302:	4b3f      	ldr	r3, [pc, #252]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	2380      	movs	r3, #128	; 0x80
 8004308:	049b      	lsls	r3, r3, #18
 800430a:	4013      	ands	r3, r2
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800430e:	4b3c      	ldr	r3, [pc, #240]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	220f      	movs	r2, #15
 8004314:	4393      	bics	r3, r2
 8004316:	0019      	movs	r1, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431c:	4b38      	ldr	r3, [pc, #224]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 800431e:	430a      	orrs	r2, r1
 8004320:	62da      	str	r2, [r3, #44]	; 0x2c
 8004322:	4b37      	ldr	r3, [pc, #220]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	4a3a      	ldr	r2, [pc, #232]	; (8004410 <HAL_RCC_OscConfig+0x630>)
 8004328:	4013      	ands	r3, r2
 800432a:	0019      	movs	r1, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	431a      	orrs	r2, r3
 8004336:	4b32      	ldr	r3, [pc, #200]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004338:	430a      	orrs	r2, r1
 800433a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800433c:	4b30      	ldr	r3, [pc, #192]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	4b2f      	ldr	r3, [pc, #188]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004342:	2180      	movs	r1, #128	; 0x80
 8004344:	0449      	lsls	r1, r1, #17
 8004346:	430a      	orrs	r2, r1
 8004348:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434a:	f7fd f87d 	bl	8001448 <HAL_GetTick>
 800434e:	0003      	movs	r3, r0
 8004350:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004354:	f7fd f878 	bl	8001448 <HAL_GetTick>
 8004358:	0002      	movs	r2, r0
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e047      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004366:	4b26      	ldr	r3, [pc, #152]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	049b      	lsls	r3, r3, #18
 800436e:	4013      	ands	r3, r2
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0x574>
 8004372:	e03f      	b.n	80043f4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004374:	4b22      	ldr	r3, [pc, #136]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4b21      	ldr	r3, [pc, #132]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 800437a:	4924      	ldr	r1, [pc, #144]	; (800440c <HAL_RCC_OscConfig+0x62c>)
 800437c:	400a      	ands	r2, r1
 800437e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004380:	f7fd f862 	bl	8001448 <HAL_GetTick>
 8004384:	0003      	movs	r3, r0
 8004386:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800438a:	f7fd f85d 	bl	8001448 <HAL_GetTick>
 800438e:	0002      	movs	r2, r0
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e02c      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800439c:	4b18      	ldr	r3, [pc, #96]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	2380      	movs	r3, #128	; 0x80
 80043a2:	049b      	lsls	r3, r3, #18
 80043a4:	4013      	ands	r3, r2
 80043a6:	d1f0      	bne.n	800438a <HAL_RCC_OscConfig+0x5aa>
 80043a8:	e024      	b.n	80043f4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e01f      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80043b6:	4b12      	ldr	r3, [pc, #72]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80043bc:	4b10      	ldr	r3, [pc, #64]	; (8004400 <HAL_RCC_OscConfig+0x620>)
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	025b      	lsls	r3, r3, #9
 80043c8:	401a      	ands	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d10e      	bne.n	80043f0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	220f      	movs	r2, #15
 80043d6:	401a      	ands	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043dc:	429a      	cmp	r2, r3
 80043de:	d107      	bne.n	80043f0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	23f0      	movs	r3, #240	; 0xf0
 80043e4:	039b      	lsls	r3, r3, #14
 80043e6:	401a      	ands	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b008      	add	sp, #32
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	40021000 	.word	0x40021000
 8004404:	00001388 	.word	0x00001388
 8004408:	efffffff 	.word	0xefffffff
 800440c:	feffffff 	.word	0xfeffffff
 8004410:	ffc2ffff 	.word	0xffc2ffff

08004414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0b3      	b.n	8004590 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004428:	4b5b      	ldr	r3, [pc, #364]	; (8004598 <HAL_RCC_ClockConfig+0x184>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2201      	movs	r2, #1
 800442e:	4013      	ands	r3, r2
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d911      	bls.n	800445a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004436:	4b58      	ldr	r3, [pc, #352]	; (8004598 <HAL_RCC_ClockConfig+0x184>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2201      	movs	r2, #1
 800443c:	4393      	bics	r3, r2
 800443e:	0019      	movs	r1, r3
 8004440:	4b55      	ldr	r3, [pc, #340]	; (8004598 <HAL_RCC_ClockConfig+0x184>)
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004448:	4b53      	ldr	r3, [pc, #332]	; (8004598 <HAL_RCC_ClockConfig+0x184>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2201      	movs	r2, #1
 800444e:	4013      	ands	r3, r2
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d001      	beq.n	800445a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e09a      	b.n	8004590 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2202      	movs	r2, #2
 8004460:	4013      	ands	r3, r2
 8004462:	d015      	beq.n	8004490 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2204      	movs	r2, #4
 800446a:	4013      	ands	r3, r2
 800446c:	d006      	beq.n	800447c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800446e:	4b4b      	ldr	r3, [pc, #300]	; (800459c <HAL_RCC_ClockConfig+0x188>)
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	4b4a      	ldr	r3, [pc, #296]	; (800459c <HAL_RCC_ClockConfig+0x188>)
 8004474:	21e0      	movs	r1, #224	; 0xe0
 8004476:	00c9      	lsls	r1, r1, #3
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800447c:	4b47      	ldr	r3, [pc, #284]	; (800459c <HAL_RCC_ClockConfig+0x188>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	22f0      	movs	r2, #240	; 0xf0
 8004482:	4393      	bics	r3, r2
 8004484:	0019      	movs	r1, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	4b44      	ldr	r3, [pc, #272]	; (800459c <HAL_RCC_ClockConfig+0x188>)
 800448c:	430a      	orrs	r2, r1
 800448e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2201      	movs	r2, #1
 8004496:	4013      	ands	r3, r2
 8004498:	d040      	beq.n	800451c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d107      	bne.n	80044b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a2:	4b3e      	ldr	r3, [pc, #248]	; (800459c <HAL_RCC_ClockConfig+0x188>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	2380      	movs	r3, #128	; 0x80
 80044a8:	029b      	lsls	r3, r3, #10
 80044aa:	4013      	ands	r3, r2
 80044ac:	d114      	bne.n	80044d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e06e      	b.n	8004590 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d107      	bne.n	80044ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ba:	4b38      	ldr	r3, [pc, #224]	; (800459c <HAL_RCC_ClockConfig+0x188>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	049b      	lsls	r3, r3, #18
 80044c2:	4013      	ands	r3, r2
 80044c4:	d108      	bne.n	80044d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e062      	b.n	8004590 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ca:	4b34      	ldr	r3, [pc, #208]	; (800459c <HAL_RCC_ClockConfig+0x188>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2202      	movs	r2, #2
 80044d0:	4013      	ands	r3, r2
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e05b      	b.n	8004590 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044d8:	4b30      	ldr	r3, [pc, #192]	; (800459c <HAL_RCC_ClockConfig+0x188>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2203      	movs	r2, #3
 80044de:	4393      	bics	r3, r2
 80044e0:	0019      	movs	r1, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	4b2d      	ldr	r3, [pc, #180]	; (800459c <HAL_RCC_ClockConfig+0x188>)
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044ec:	f7fc ffac 	bl	8001448 <HAL_GetTick>
 80044f0:	0003      	movs	r3, r0
 80044f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f4:	e009      	b.n	800450a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f6:	f7fc ffa7 	bl	8001448 <HAL_GetTick>
 80044fa:	0002      	movs	r2, r0
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	4a27      	ldr	r2, [pc, #156]	; (80045a0 <HAL_RCC_ClockConfig+0x18c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e042      	b.n	8004590 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450a:	4b24      	ldr	r3, [pc, #144]	; (800459c <HAL_RCC_ClockConfig+0x188>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	220c      	movs	r2, #12
 8004510:	401a      	ands	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	429a      	cmp	r2, r3
 800451a:	d1ec      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800451c:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <HAL_RCC_ClockConfig+0x184>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2201      	movs	r2, #1
 8004522:	4013      	ands	r3, r2
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d211      	bcs.n	800454e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452a:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <HAL_RCC_ClockConfig+0x184>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2201      	movs	r2, #1
 8004530:	4393      	bics	r3, r2
 8004532:	0019      	movs	r1, r3
 8004534:	4b18      	ldr	r3, [pc, #96]	; (8004598 <HAL_RCC_ClockConfig+0x184>)
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800453c:	4b16      	ldr	r3, [pc, #88]	; (8004598 <HAL_RCC_ClockConfig+0x184>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2201      	movs	r2, #1
 8004542:	4013      	ands	r3, r2
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d001      	beq.n	800454e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e020      	b.n	8004590 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2204      	movs	r2, #4
 8004554:	4013      	ands	r3, r2
 8004556:	d009      	beq.n	800456c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004558:	4b10      	ldr	r3, [pc, #64]	; (800459c <HAL_RCC_ClockConfig+0x188>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4a11      	ldr	r2, [pc, #68]	; (80045a4 <HAL_RCC_ClockConfig+0x190>)
 800455e:	4013      	ands	r3, r2
 8004560:	0019      	movs	r1, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	4b0d      	ldr	r3, [pc, #52]	; (800459c <HAL_RCC_ClockConfig+0x188>)
 8004568:	430a      	orrs	r2, r1
 800456a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800456c:	f000 f820 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8004570:	0001      	movs	r1, r0
 8004572:	4b0a      	ldr	r3, [pc, #40]	; (800459c <HAL_RCC_ClockConfig+0x188>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	091b      	lsrs	r3, r3, #4
 8004578:	220f      	movs	r2, #15
 800457a:	4013      	ands	r3, r2
 800457c:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <HAL_RCC_ClockConfig+0x194>)
 800457e:	5cd3      	ldrb	r3, [r2, r3]
 8004580:	000a      	movs	r2, r1
 8004582:	40da      	lsrs	r2, r3
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <HAL_RCC_ClockConfig+0x198>)
 8004586:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004588:	2003      	movs	r0, #3
 800458a:	f7fc ff17 	bl	80013bc <HAL_InitTick>
  
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	0018      	movs	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	b004      	add	sp, #16
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40022000 	.word	0x40022000
 800459c:	40021000 	.word	0x40021000
 80045a0:	00001388 	.word	0x00001388
 80045a4:	fffff8ff 	.word	0xfffff8ff
 80045a8:	08006a6c 	.word	0x08006a6c
 80045ac:	20000000 	.word	0x20000000

080045b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b0:	b590      	push	{r4, r7, lr}
 80045b2:	b08f      	sub	sp, #60	; 0x3c
 80045b4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80045b6:	2314      	movs	r3, #20
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	4a2b      	ldr	r2, [pc, #172]	; (8004668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045be:	c313      	stmia	r3!, {r0, r1, r4}
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80045c4:	1d3b      	adds	r3, r7, #4
 80045c6:	4a29      	ldr	r2, [pc, #164]	; (800466c <HAL_RCC_GetSysClockFreq+0xbc>)
 80045c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045ca:	c313      	stmia	r3!, {r0, r1, r4}
 80045cc:	6812      	ldr	r2, [r2, #0]
 80045ce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d4:	2300      	movs	r3, #0
 80045d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045d8:	2300      	movs	r3, #0
 80045da:	637b      	str	r3, [r7, #52]	; 0x34
 80045dc:	2300      	movs	r3, #0
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80045e4:	4b22      	ldr	r3, [pc, #136]	; (8004670 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	220c      	movs	r2, #12
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d002      	beq.n	80045fa <HAL_RCC_GetSysClockFreq+0x4a>
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d003      	beq.n	8004600 <HAL_RCC_GetSysClockFreq+0x50>
 80045f8:	e02d      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045fa:	4b1e      	ldr	r3, [pc, #120]	; (8004674 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80045fe:	e02d      	b.n	800465c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004602:	0c9b      	lsrs	r3, r3, #18
 8004604:	220f      	movs	r2, #15
 8004606:	4013      	ands	r3, r2
 8004608:	2214      	movs	r2, #20
 800460a:	18ba      	adds	r2, r7, r2
 800460c:	5cd3      	ldrb	r3, [r2, r3]
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004610:	4b17      	ldr	r3, [pc, #92]	; (8004670 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	220f      	movs	r2, #15
 8004616:	4013      	ands	r3, r2
 8004618:	1d3a      	adds	r2, r7, #4
 800461a:	5cd3      	ldrb	r3, [r2, r3]
 800461c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800461e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	025b      	lsls	r3, r3, #9
 8004624:	4013      	ands	r3, r2
 8004626:	d009      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800462a:	4812      	ldr	r0, [pc, #72]	; (8004674 <HAL_RCC_GetSysClockFreq+0xc4>)
 800462c:	f7fb fd7e 	bl	800012c <__udivsi3>
 8004630:	0003      	movs	r3, r0
 8004632:	001a      	movs	r2, r3
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	4353      	muls	r3, r2
 8004638:	637b      	str	r3, [r7, #52]	; 0x34
 800463a:	e009      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800463c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800463e:	000a      	movs	r2, r1
 8004640:	0152      	lsls	r2, r2, #5
 8004642:	1a52      	subs	r2, r2, r1
 8004644:	0193      	lsls	r3, r2, #6
 8004646:	1a9b      	subs	r3, r3, r2
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	185b      	adds	r3, r3, r1
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004652:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004654:	e002      	b.n	800465c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004656:	4b07      	ldr	r3, [pc, #28]	; (8004674 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004658:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800465a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800465e:	0018      	movs	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	b00f      	add	sp, #60	; 0x3c
 8004664:	bd90      	pop	{r4, r7, pc}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	08006a4c 	.word	0x08006a4c
 800466c:	08006a5c 	.word	0x08006a5c
 8004670:	40021000 	.word	0x40021000
 8004674:	007a1200 	.word	0x007a1200

08004678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800467c:	4b02      	ldr	r3, [pc, #8]	; (8004688 <HAL_RCC_GetHCLKFreq+0x10>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	20000000 	.word	0x20000000

0800468c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004690:	f7ff fff2 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 8004694:	0001      	movs	r1, r0
 8004696:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	2207      	movs	r2, #7
 800469e:	4013      	ands	r3, r2
 80046a0:	4a04      	ldr	r2, [pc, #16]	; (80046b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046a2:	5cd3      	ldrb	r3, [r2, r3]
 80046a4:	40d9      	lsrs	r1, r3
 80046a6:	000b      	movs	r3, r1
}    
 80046a8:	0018      	movs	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	40021000 	.word	0x40021000
 80046b4:	08006a7c 	.word	0x08006a7c

080046b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	2380      	movs	r3, #128	; 0x80
 80046ce:	025b      	lsls	r3, r3, #9
 80046d0:	4013      	ands	r3, r2
 80046d2:	d100      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80046d4:	e08e      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80046d6:	2017      	movs	r0, #23
 80046d8:	183b      	adds	r3, r7, r0
 80046da:	2200      	movs	r2, #0
 80046dc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046de:	4b57      	ldr	r3, [pc, #348]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80046e0:	69da      	ldr	r2, [r3, #28]
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	055b      	lsls	r3, r3, #21
 80046e6:	4013      	ands	r3, r2
 80046e8:	d110      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ea:	4b54      	ldr	r3, [pc, #336]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80046ec:	69da      	ldr	r2, [r3, #28]
 80046ee:	4b53      	ldr	r3, [pc, #332]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80046f0:	2180      	movs	r1, #128	; 0x80
 80046f2:	0549      	lsls	r1, r1, #21
 80046f4:	430a      	orrs	r2, r1
 80046f6:	61da      	str	r2, [r3, #28]
 80046f8:	4b50      	ldr	r3, [pc, #320]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	055b      	lsls	r3, r3, #21
 8004700:	4013      	ands	r3, r2
 8004702:	60bb      	str	r3, [r7, #8]
 8004704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004706:	183b      	adds	r3, r7, r0
 8004708:	2201      	movs	r2, #1
 800470a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470c:	4b4c      	ldr	r3, [pc, #304]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	2380      	movs	r3, #128	; 0x80
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	4013      	ands	r3, r2
 8004716:	d11a      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004718:	4b49      	ldr	r3, [pc, #292]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	4b48      	ldr	r3, [pc, #288]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800471e:	2180      	movs	r1, #128	; 0x80
 8004720:	0049      	lsls	r1, r1, #1
 8004722:	430a      	orrs	r2, r1
 8004724:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004726:	f7fc fe8f 	bl	8001448 <HAL_GetTick>
 800472a:	0003      	movs	r3, r0
 800472c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472e:	e008      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004730:	f7fc fe8a 	bl	8001448 <HAL_GetTick>
 8004734:	0002      	movs	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	; 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e077      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004742:	4b3f      	ldr	r3, [pc, #252]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	2380      	movs	r3, #128	; 0x80
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4013      	ands	r3, r2
 800474c:	d0f0      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800474e:	4b3b      	ldr	r3, [pc, #236]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004750:	6a1a      	ldr	r2, [r3, #32]
 8004752:	23c0      	movs	r3, #192	; 0xc0
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4013      	ands	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d034      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	23c0      	movs	r3, #192	; 0xc0
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4013      	ands	r3, r2
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	429a      	cmp	r2, r3
 800476e:	d02c      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004770:	4b32      	ldr	r3, [pc, #200]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	4a33      	ldr	r2, [pc, #204]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004776:	4013      	ands	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800477a:	4b30      	ldr	r3, [pc, #192]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800477c:	6a1a      	ldr	r2, [r3, #32]
 800477e:	4b2f      	ldr	r3, [pc, #188]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004780:	2180      	movs	r1, #128	; 0x80
 8004782:	0249      	lsls	r1, r1, #9
 8004784:	430a      	orrs	r2, r1
 8004786:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004788:	4b2c      	ldr	r3, [pc, #176]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800478a:	6a1a      	ldr	r2, [r3, #32]
 800478c:	4b2b      	ldr	r3, [pc, #172]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800478e:	492e      	ldr	r1, [pc, #184]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004790:	400a      	ands	r2, r1
 8004792:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004794:	4b29      	ldr	r3, [pc, #164]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	4013      	ands	r3, r2
 80047a0:	d013      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a2:	f7fc fe51 	bl	8001448 <HAL_GetTick>
 80047a6:	0003      	movs	r3, r0
 80047a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047aa:	e009      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ac:	f7fc fe4c 	bl	8001448 <HAL_GetTick>
 80047b0:	0002      	movs	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	4a25      	ldr	r2, [pc, #148]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e038      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c0:	4b1e      	ldr	r3, [pc, #120]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	2202      	movs	r2, #2
 80047c6:	4013      	ands	r3, r2
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ca:	4b1c      	ldr	r3, [pc, #112]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	4a1d      	ldr	r2, [pc, #116]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	0019      	movs	r1, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	4b18      	ldr	r3, [pc, #96]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80047da:	430a      	orrs	r2, r1
 80047dc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047de:	2317      	movs	r3, #23
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d105      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e8:	4b14      	ldr	r3, [pc, #80]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	4b13      	ldr	r3, [pc, #76]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80047ee:	4918      	ldr	r1, [pc, #96]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80047f0:	400a      	ands	r2, r1
 80047f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2201      	movs	r2, #1
 80047fa:	4013      	ands	r3, r2
 80047fc:	d009      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047fe:	4b0f      	ldr	r3, [pc, #60]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	2203      	movs	r2, #3
 8004804:	4393      	bics	r3, r2
 8004806:	0019      	movs	r1, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800480e:	430a      	orrs	r2, r1
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2220      	movs	r2, #32
 8004818:	4013      	ands	r3, r2
 800481a:	d009      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800481c:	4b07      	ldr	r3, [pc, #28]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	2210      	movs	r2, #16
 8004822:	4393      	bics	r3, r2
 8004824:	0019      	movs	r1, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	4b04      	ldr	r3, [pc, #16]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800482c:	430a      	orrs	r2, r1
 800482e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	0018      	movs	r0, r3
 8004834:	46bd      	mov	sp, r7
 8004836:	b006      	add	sp, #24
 8004838:	bd80      	pop	{r7, pc}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	40021000 	.word	0x40021000
 8004840:	40007000 	.word	0x40007000
 8004844:	fffffcff 	.word	0xfffffcff
 8004848:	fffeffff 	.word	0xfffeffff
 800484c:	00001388 	.word	0x00001388
 8004850:	efffffff 	.word	0xefffffff

08004854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0a8      	b.n	80049b8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	2382      	movs	r3, #130	; 0x82
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	429a      	cmp	r2, r3
 8004878:	d009      	beq.n	800488e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	61da      	str	r2, [r3, #28]
 8004880:	e005      	b.n	800488e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	225d      	movs	r2, #93	; 0x5d
 8004898:	5c9b      	ldrb	r3, [r3, r2]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d107      	bne.n	80048b0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	225c      	movs	r2, #92	; 0x5c
 80048a4:	2100      	movs	r1, #0
 80048a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	0018      	movs	r0, r3
 80048ac:	f7fc fb5c 	bl	8000f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	225d      	movs	r2, #93	; 0x5d
 80048b4:	2102      	movs	r1, #2
 80048b6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2140      	movs	r1, #64	; 0x40
 80048c4:	438a      	bics	r2, r1
 80048c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	23e0      	movs	r3, #224	; 0xe0
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d902      	bls.n	80048da <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	e002      	b.n	80048e0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048da:	2380      	movs	r3, #128	; 0x80
 80048dc:	015b      	lsls	r3, r3, #5
 80048de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	23f0      	movs	r3, #240	; 0xf0
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d008      	beq.n	80048fe <HAL_SPI_Init+0xaa>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	23e0      	movs	r3, #224	; 0xe0
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d002      	beq.n	80048fe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	2382      	movs	r3, #130	; 0x82
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	401a      	ands	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6899      	ldr	r1, [r3, #8]
 800490c:	2384      	movs	r3, #132	; 0x84
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	400b      	ands	r3, r1
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	2102      	movs	r1, #2
 800491a:	400b      	ands	r3, r1
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	2101      	movs	r1, #1
 8004924:	400b      	ands	r3, r1
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6999      	ldr	r1, [r3, #24]
 800492c:	2380      	movs	r3, #128	; 0x80
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	400b      	ands	r3, r1
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	2138      	movs	r1, #56	; 0x38
 800493a:	400b      	ands	r3, r1
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	2180      	movs	r1, #128	; 0x80
 8004944:	400b      	ands	r3, r1
 8004946:	431a      	orrs	r2, r3
 8004948:	0011      	movs	r1, r2
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800494e:	2380      	movs	r3, #128	; 0x80
 8004950:	019b      	lsls	r3, r3, #6
 8004952:	401a      	ands	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	2204      	movs	r2, #4
 8004964:	401a      	ands	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	2110      	movs	r1, #16
 800496c:	400b      	ands	r3, r1
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004974:	2108      	movs	r1, #8
 8004976:	400b      	ands	r3, r1
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68d9      	ldr	r1, [r3, #12]
 800497e:	23f0      	movs	r3, #240	; 0xf0
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	400b      	ands	r3, r1
 8004984:	431a      	orrs	r2, r3
 8004986:	0011      	movs	r1, r2
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	2380      	movs	r3, #128	; 0x80
 800498c:	015b      	lsls	r3, r3, #5
 800498e:	401a      	ands	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69da      	ldr	r2, [r3, #28]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4907      	ldr	r1, [pc, #28]	; (80049c0 <HAL_SPI_Init+0x16c>)
 80049a4:	400a      	ands	r2, r1
 80049a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	225d      	movs	r2, #93	; 0x5d
 80049b2:	2101      	movs	r1, #1
 80049b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b004      	add	sp, #16
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	fffff7ff 	.word	0xfffff7ff

080049c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e042      	b.n	8004a5c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	223d      	movs	r2, #61	; 0x3d
 80049da:	5c9b      	ldrb	r3, [r3, r2]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d107      	bne.n	80049f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	223c      	movs	r2, #60	; 0x3c
 80049e6:	2100      	movs	r1, #0
 80049e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	0018      	movs	r0, r3
 80049ee:	f7fc fb07 	bl	8001000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	223d      	movs	r2, #61	; 0x3d
 80049f6:	2102      	movs	r1, #2
 80049f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3304      	adds	r3, #4
 8004a02:	0019      	movs	r1, r3
 8004a04:	0010      	movs	r0, r2
 8004a06:	f000 fb11 	bl	800502c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2246      	movs	r2, #70	; 0x46
 8004a0e:	2101      	movs	r1, #1
 8004a10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	223e      	movs	r2, #62	; 0x3e
 8004a16:	2101      	movs	r1, #1
 8004a18:	5499      	strb	r1, [r3, r2]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	223f      	movs	r2, #63	; 0x3f
 8004a1e:	2101      	movs	r1, #1
 8004a20:	5499      	strb	r1, [r3, r2]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2240      	movs	r2, #64	; 0x40
 8004a26:	2101      	movs	r1, #1
 8004a28:	5499      	strb	r1, [r3, r2]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2241      	movs	r2, #65	; 0x41
 8004a2e:	2101      	movs	r1, #1
 8004a30:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2242      	movs	r2, #66	; 0x42
 8004a36:	2101      	movs	r1, #1
 8004a38:	5499      	strb	r1, [r3, r2]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2243      	movs	r2, #67	; 0x43
 8004a3e:	2101      	movs	r1, #1
 8004a40:	5499      	strb	r1, [r3, r2]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2244      	movs	r2, #68	; 0x44
 8004a46:	2101      	movs	r1, #1
 8004a48:	5499      	strb	r1, [r3, r2]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2245      	movs	r2, #69	; 0x45
 8004a4e:	2101      	movs	r1, #1
 8004a50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	223d      	movs	r2, #61	; 0x3d
 8004a56:	2101      	movs	r1, #1
 8004a58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b002      	add	sp, #8
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e042      	b.n	8004afc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	223d      	movs	r2, #61	; 0x3d
 8004a7a:	5c9b      	ldrb	r3, [r3, r2]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d107      	bne.n	8004a92 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	223c      	movs	r2, #60	; 0x3c
 8004a86:	2100      	movs	r1, #0
 8004a88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f000 f839 	bl	8004b04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	223d      	movs	r2, #61	; 0x3d
 8004a96:	2102      	movs	r1, #2
 8004a98:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	0019      	movs	r1, r3
 8004aa4:	0010      	movs	r0, r2
 8004aa6:	f000 fac1 	bl	800502c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2246      	movs	r2, #70	; 0x46
 8004aae:	2101      	movs	r1, #1
 8004ab0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	223e      	movs	r2, #62	; 0x3e
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	5499      	strb	r1, [r3, r2]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	223f      	movs	r2, #63	; 0x3f
 8004abe:	2101      	movs	r1, #1
 8004ac0:	5499      	strb	r1, [r3, r2]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2240      	movs	r2, #64	; 0x40
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	5499      	strb	r1, [r3, r2]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2241      	movs	r2, #65	; 0x41
 8004ace:	2101      	movs	r1, #1
 8004ad0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2242      	movs	r2, #66	; 0x42
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	5499      	strb	r1, [r3, r2]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2243      	movs	r2, #67	; 0x43
 8004ade:	2101      	movs	r1, #1
 8004ae0:	5499      	strb	r1, [r3, r2]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2244      	movs	r2, #68	; 0x44
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	5499      	strb	r1, [r3, r2]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2245      	movs	r2, #69	; 0x45
 8004aee:	2101      	movs	r1, #1
 8004af0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	223d      	movs	r2, #61	; 0x3d
 8004af6:	2101      	movs	r1, #1
 8004af8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	0018      	movs	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	b002      	add	sp, #8
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b0c:	46c0      	nop			; (mov r8, r8)
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b002      	add	sp, #8
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d108      	bne.n	8004b36 <HAL_TIM_PWM_Start+0x22>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	223e      	movs	r2, #62	; 0x3e
 8004b28:	5c9b      	ldrb	r3, [r3, r2]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	1e5a      	subs	r2, r3, #1
 8004b30:	4193      	sbcs	r3, r2
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	e01f      	b.n	8004b76 <HAL_TIM_PWM_Start+0x62>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d108      	bne.n	8004b4e <HAL_TIM_PWM_Start+0x3a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	223f      	movs	r2, #63	; 0x3f
 8004b40:	5c9b      	ldrb	r3, [r3, r2]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	3b01      	subs	r3, #1
 8004b46:	1e5a      	subs	r2, r3, #1
 8004b48:	4193      	sbcs	r3, r2
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	e013      	b.n	8004b76 <HAL_TIM_PWM_Start+0x62>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d108      	bne.n	8004b66 <HAL_TIM_PWM_Start+0x52>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2240      	movs	r2, #64	; 0x40
 8004b58:	5c9b      	ldrb	r3, [r3, r2]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	1e5a      	subs	r2, r3, #1
 8004b60:	4193      	sbcs	r3, r2
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	e007      	b.n	8004b76 <HAL_TIM_PWM_Start+0x62>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2241      	movs	r2, #65	; 0x41
 8004b6a:	5c9b      	ldrb	r3, [r3, r2]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	1e5a      	subs	r2, r3, #1
 8004b72:	4193      	sbcs	r3, r2
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e06a      	b.n	8004c54 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d104      	bne.n	8004b8e <HAL_TIM_PWM_Start+0x7a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	223e      	movs	r2, #62	; 0x3e
 8004b88:	2102      	movs	r1, #2
 8004b8a:	5499      	strb	r1, [r3, r2]
 8004b8c:	e013      	b.n	8004bb6 <HAL_TIM_PWM_Start+0xa2>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d104      	bne.n	8004b9e <HAL_TIM_PWM_Start+0x8a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	223f      	movs	r2, #63	; 0x3f
 8004b98:	2102      	movs	r1, #2
 8004b9a:	5499      	strb	r1, [r3, r2]
 8004b9c:	e00b      	b.n	8004bb6 <HAL_TIM_PWM_Start+0xa2>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d104      	bne.n	8004bae <HAL_TIM_PWM_Start+0x9a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2240      	movs	r2, #64	; 0x40
 8004ba8:	2102      	movs	r1, #2
 8004baa:	5499      	strb	r1, [r3, r2]
 8004bac:	e003      	b.n	8004bb6 <HAL_TIM_PWM_Start+0xa2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2241      	movs	r2, #65	; 0x41
 8004bb2:	2102      	movs	r1, #2
 8004bb4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6839      	ldr	r1, [r7, #0]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f000 fdb6 	bl	8005730 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a24      	ldr	r2, [pc, #144]	; (8004c5c <HAL_TIM_PWM_Start+0x148>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d009      	beq.n	8004be2 <HAL_TIM_PWM_Start+0xce>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a23      	ldr	r2, [pc, #140]	; (8004c60 <HAL_TIM_PWM_Start+0x14c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d004      	beq.n	8004be2 <HAL_TIM_PWM_Start+0xce>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <HAL_TIM_PWM_Start+0x150>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d101      	bne.n	8004be6 <HAL_TIM_PWM_Start+0xd2>
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <HAL_TIM_PWM_Start+0xd4>
 8004be6:	2300      	movs	r3, #0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2180      	movs	r1, #128	; 0x80
 8004bf8:	0209      	lsls	r1, r1, #8
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a16      	ldr	r2, [pc, #88]	; (8004c5c <HAL_TIM_PWM_Start+0x148>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00a      	beq.n	8004c1e <HAL_TIM_PWM_Start+0x10a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	2380      	movs	r3, #128	; 0x80
 8004c0e:	05db      	lsls	r3, r3, #23
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d004      	beq.n	8004c1e <HAL_TIM_PWM_Start+0x10a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a13      	ldr	r2, [pc, #76]	; (8004c68 <HAL_TIM_PWM_Start+0x154>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d111      	bne.n	8004c42 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2207      	movs	r2, #7
 8004c26:	4013      	ands	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b06      	cmp	r3, #6
 8004c2e:	d010      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c40:	e007      	b.n	8004c52 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	0018      	movs	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	b004      	add	sp, #16
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40014400 	.word	0x40014400
 8004c64:	40014800 	.word	0x40014800
 8004c68:	40000400 	.word	0x40000400

08004c6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c78:	2317      	movs	r3, #23
 8004c7a:	18fb      	adds	r3, r7, r3
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	223c      	movs	r2, #60	; 0x3c
 8004c84:	5c9b      	ldrb	r3, [r3, r2]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d101      	bne.n	8004c8e <HAL_TIM_PWM_ConfigChannel+0x22>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e0ad      	b.n	8004dea <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	223c      	movs	r2, #60	; 0x3c
 8004c92:	2101      	movs	r1, #1
 8004c94:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b0c      	cmp	r3, #12
 8004c9a:	d100      	bne.n	8004c9e <HAL_TIM_PWM_ConfigChannel+0x32>
 8004c9c:	e076      	b.n	8004d8c <HAL_TIM_PWM_ConfigChannel+0x120>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	d900      	bls.n	8004ca6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004ca4:	e095      	b.n	8004dd2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d04e      	beq.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0xde>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d900      	bls.n	8004cb4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004cb2:	e08e      	b.n	8004dd2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d021      	beq.n	8004d04 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004cc0:	e087      	b.n	8004dd2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	0011      	movs	r1, r2
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f000 fa24 	bl	8005118 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2108      	movs	r1, #8
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2104      	movs	r1, #4
 8004cec:	438a      	bics	r2, r1
 8004cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6999      	ldr	r1, [r3, #24]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	691a      	ldr	r2, [r3, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	619a      	str	r2, [r3, #24]
      break;
 8004d02:	e06b      	b.n	8004ddc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	0011      	movs	r1, r2
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f000 fa81 	bl	8005214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	699a      	ldr	r2, [r3, #24]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2180      	movs	r1, #128	; 0x80
 8004d1e:	0109      	lsls	r1, r1, #4
 8004d20:	430a      	orrs	r2, r1
 8004d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4931      	ldr	r1, [pc, #196]	; (8004df4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004d30:	400a      	ands	r2, r1
 8004d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6999      	ldr	r1, [r3, #24]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	021a      	lsls	r2, r3, #8
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	619a      	str	r2, [r3, #24]
      break;
 8004d48:	e048      	b.n	8004ddc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	0011      	movs	r1, r2
 8004d52:	0018      	movs	r0, r3
 8004d54:	f000 fadc 	bl	8005310 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69da      	ldr	r2, [r3, #28]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2108      	movs	r1, #8
 8004d64:	430a      	orrs	r2, r1
 8004d66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	69da      	ldr	r2, [r3, #28]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2104      	movs	r1, #4
 8004d74:	438a      	bics	r2, r1
 8004d76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69d9      	ldr	r1, [r3, #28]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	691a      	ldr	r2, [r3, #16]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	61da      	str	r2, [r3, #28]
      break;
 8004d8a:	e027      	b.n	8004ddc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	0011      	movs	r1, r2
 8004d94:	0018      	movs	r0, r3
 8004d96:	f000 fb3b 	bl	8005410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69da      	ldr	r2, [r3, #28]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2180      	movs	r1, #128	; 0x80
 8004da6:	0109      	lsls	r1, r1, #4
 8004da8:	430a      	orrs	r2, r1
 8004daa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69da      	ldr	r2, [r3, #28]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	490f      	ldr	r1, [pc, #60]	; (8004df4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004db8:	400a      	ands	r2, r1
 8004dba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69d9      	ldr	r1, [r3, #28]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	021a      	lsls	r2, r3, #8
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	61da      	str	r2, [r3, #28]
      break;
 8004dd0:	e004      	b.n	8004ddc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004dd2:	2317      	movs	r3, #23
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	701a      	strb	r2, [r3, #0]
      break;
 8004dda:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	223c      	movs	r2, #60	; 0x3c
 8004de0:	2100      	movs	r1, #0
 8004de2:	5499      	strb	r1, [r3, r2]

  return status;
 8004de4:	2317      	movs	r3, #23
 8004de6:	18fb      	adds	r3, r7, r3
 8004de8:	781b      	ldrb	r3, [r3, #0]
}
 8004dea:	0018      	movs	r0, r3
 8004dec:	46bd      	mov	sp, r7
 8004dee:	b006      	add	sp, #24
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	fffffbff 	.word	0xfffffbff

08004df8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e02:	230f      	movs	r3, #15
 8004e04:	18fb      	adds	r3, r7, r3
 8004e06:	2200      	movs	r2, #0
 8004e08:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	223c      	movs	r2, #60	; 0x3c
 8004e0e:	5c9b      	ldrb	r3, [r3, r2]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_TIM_ConfigClockSource+0x20>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e0bc      	b.n	8004f92 <HAL_TIM_ConfigClockSource+0x19a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	223c      	movs	r2, #60	; 0x3c
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	223d      	movs	r2, #61	; 0x3d
 8004e24:	2102      	movs	r1, #2
 8004e26:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2277      	movs	r2, #119	; 0x77
 8004e34:	4393      	bics	r3, r2
 8004e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4a58      	ldr	r2, [pc, #352]	; (8004f9c <HAL_TIM_ConfigClockSource+0x1a4>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2280      	movs	r2, #128	; 0x80
 8004e4e:	0192      	lsls	r2, r2, #6
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d040      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0xde>
 8004e54:	2280      	movs	r2, #128	; 0x80
 8004e56:	0192      	lsls	r2, r2, #6
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d900      	bls.n	8004e5e <HAL_TIM_ConfigClockSource+0x66>
 8004e5c:	e088      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x178>
 8004e5e:	2280      	movs	r2, #128	; 0x80
 8004e60:	0152      	lsls	r2, r2, #5
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d100      	bne.n	8004e68 <HAL_TIM_ConfigClockSource+0x70>
 8004e66:	e088      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x182>
 8004e68:	2280      	movs	r2, #128	; 0x80
 8004e6a:	0152      	lsls	r2, r2, #5
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d900      	bls.n	8004e72 <HAL_TIM_ConfigClockSource+0x7a>
 8004e70:	e07e      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x178>
 8004e72:	2b70      	cmp	r3, #112	; 0x70
 8004e74:	d018      	beq.n	8004ea8 <HAL_TIM_ConfigClockSource+0xb0>
 8004e76:	d900      	bls.n	8004e7a <HAL_TIM_ConfigClockSource+0x82>
 8004e78:	e07a      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x178>
 8004e7a:	2b60      	cmp	r3, #96	; 0x60
 8004e7c:	d04f      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x126>
 8004e7e:	d900      	bls.n	8004e82 <HAL_TIM_ConfigClockSource+0x8a>
 8004e80:	e076      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x178>
 8004e82:	2b50      	cmp	r3, #80	; 0x50
 8004e84:	d03b      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x106>
 8004e86:	d900      	bls.n	8004e8a <HAL_TIM_ConfigClockSource+0x92>
 8004e88:	e072      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x178>
 8004e8a:	2b40      	cmp	r3, #64	; 0x40
 8004e8c:	d057      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x146>
 8004e8e:	d900      	bls.n	8004e92 <HAL_TIM_ConfigClockSource+0x9a>
 8004e90:	e06e      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x178>
 8004e92:	2b30      	cmp	r3, #48	; 0x30
 8004e94:	d063      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x166>
 8004e96:	d86b      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x178>
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d060      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x166>
 8004e9c:	d868      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x178>
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d05d      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x166>
 8004ea2:	2b10      	cmp	r3, #16
 8004ea4:	d05b      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x166>
 8004ea6:	e063      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	6899      	ldr	r1, [r3, #8]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f000 fc1a 	bl	80056f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2277      	movs	r2, #119	; 0x77
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	609a      	str	r2, [r3, #8]
      break;
 8004ed4:	e052      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6899      	ldr	r1, [r3, #8]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f000 fc03 	bl	80056f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2180      	movs	r1, #128	; 0x80
 8004ef6:	01c9      	lsls	r1, r1, #7
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	609a      	str	r2, [r3, #8]
      break;
 8004efc:	e03e      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6859      	ldr	r1, [r3, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	001a      	movs	r2, r3
 8004f0c:	f000 fb76 	bl	80055fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2150      	movs	r1, #80	; 0x50
 8004f16:	0018      	movs	r0, r3
 8004f18:	f000 fbd0 	bl	80056bc <TIM_ITRx_SetConfig>
      break;
 8004f1c:	e02e      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6818      	ldr	r0, [r3, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6859      	ldr	r1, [r3, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	001a      	movs	r2, r3
 8004f2c:	f000 fb94 	bl	8005658 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2160      	movs	r1, #96	; 0x60
 8004f36:	0018      	movs	r0, r3
 8004f38:	f000 fbc0 	bl	80056bc <TIM_ITRx_SetConfig>
      break;
 8004f3c:	e01e      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6859      	ldr	r1, [r3, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	001a      	movs	r2, r3
 8004f4c:	f000 fb56 	bl	80055fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2140      	movs	r1, #64	; 0x40
 8004f56:	0018      	movs	r0, r3
 8004f58:	f000 fbb0 	bl	80056bc <TIM_ITRx_SetConfig>
      break;
 8004f5c:	e00e      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	0019      	movs	r1, r3
 8004f68:	0010      	movs	r0, r2
 8004f6a:	f000 fba7 	bl	80056bc <TIM_ITRx_SetConfig>
      break;
 8004f6e:	e005      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004f70:	230f      	movs	r3, #15
 8004f72:	18fb      	adds	r3, r7, r3
 8004f74:	2201      	movs	r2, #1
 8004f76:	701a      	strb	r2, [r3, #0]
      break;
 8004f78:	e000      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004f7a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	223d      	movs	r2, #61	; 0x3d
 8004f80:	2101      	movs	r1, #1
 8004f82:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	223c      	movs	r2, #60	; 0x3c
 8004f88:	2100      	movs	r1, #0
 8004f8a:	5499      	strb	r1, [r3, r2]

  return status;
 8004f8c:	230f      	movs	r3, #15
 8004f8e:	18fb      	adds	r3, r7, r3
 8004f90:	781b      	ldrb	r3, [r3, #0]
}
 8004f92:	0018      	movs	r0, r3
 8004f94:	46bd      	mov	sp, r7
 8004f96:	b004      	add	sp, #16
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	46c0      	nop			; (mov r8, r8)
 8004f9c:	ffff00ff 	.word	0xffff00ff

08004fa0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	223c      	movs	r2, #60	; 0x3c
 8004fae:	5c9b      	ldrb	r3, [r3, r2]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e032      	b.n	800501e <HAL_TIM_SlaveConfigSynchro+0x7e>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	223c      	movs	r2, #60	; 0x3c
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	223d      	movs	r2, #61	; 0x3d
 8004fc4:	2102      	movs	r1, #2
 8004fc6:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	0011      	movs	r1, r2
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f000 fa82 	bl	80054d8 <TIM_SlaveTimer_SetConfig>
 8004fd4:	1e03      	subs	r3, r0, #0
 8004fd6:	d009      	beq.n	8004fec <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	223d      	movs	r2, #61	; 0x3d
 8004fdc:	2101      	movs	r1, #1
 8004fde:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	223c      	movs	r2, #60	; 0x3c
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e018      	b.n	800501e <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2140      	movs	r1, #64	; 0x40
 8004ff8:	438a      	bics	r2, r1
 8004ffa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4908      	ldr	r1, [pc, #32]	; (8005028 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8005008:	400a      	ands	r2, r1
 800500a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	223d      	movs	r2, #61	; 0x3d
 8005010:	2101      	movs	r1, #1
 8005012:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	223c      	movs	r2, #60	; 0x3c
 8005018:	2100      	movs	r1, #0
 800501a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	0018      	movs	r0, r3
 8005020:	46bd      	mov	sp, r7
 8005022:	b002      	add	sp, #8
 8005024:	bd80      	pop	{r7, pc}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	ffffbfff 	.word	0xffffbfff

0800502c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a30      	ldr	r2, [pc, #192]	; (8005100 <TIM_Base_SetConfig+0xd4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d008      	beq.n	8005056 <TIM_Base_SetConfig+0x2a>
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	2380      	movs	r3, #128	; 0x80
 8005048:	05db      	lsls	r3, r3, #23
 800504a:	429a      	cmp	r2, r3
 800504c:	d003      	beq.n	8005056 <TIM_Base_SetConfig+0x2a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a2c      	ldr	r2, [pc, #176]	; (8005104 <TIM_Base_SetConfig+0xd8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d108      	bne.n	8005068 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2270      	movs	r2, #112	; 0x70
 800505a:	4393      	bics	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a25      	ldr	r2, [pc, #148]	; (8005100 <TIM_Base_SetConfig+0xd4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d014      	beq.n	800509a <TIM_Base_SetConfig+0x6e>
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	05db      	lsls	r3, r3, #23
 8005076:	429a      	cmp	r2, r3
 8005078:	d00f      	beq.n	800509a <TIM_Base_SetConfig+0x6e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a21      	ldr	r2, [pc, #132]	; (8005104 <TIM_Base_SetConfig+0xd8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00b      	beq.n	800509a <TIM_Base_SetConfig+0x6e>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a20      	ldr	r2, [pc, #128]	; (8005108 <TIM_Base_SetConfig+0xdc>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d007      	beq.n	800509a <TIM_Base_SetConfig+0x6e>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a1f      	ldr	r2, [pc, #124]	; (800510c <TIM_Base_SetConfig+0xe0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d003      	beq.n	800509a <TIM_Base_SetConfig+0x6e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a1e      	ldr	r2, [pc, #120]	; (8005110 <TIM_Base_SetConfig+0xe4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d108      	bne.n	80050ac <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4a1d      	ldr	r2, [pc, #116]	; (8005114 <TIM_Base_SetConfig+0xe8>)
 800509e:	4013      	ands	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2280      	movs	r2, #128	; 0x80
 80050b0:	4393      	bics	r3, r2
 80050b2:	001a      	movs	r2, r3
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a0a      	ldr	r2, [pc, #40]	; (8005100 <TIM_Base_SetConfig+0xd4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d007      	beq.n	80050ea <TIM_Base_SetConfig+0xbe>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a0b      	ldr	r2, [pc, #44]	; (800510c <TIM_Base_SetConfig+0xe0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d003      	beq.n	80050ea <TIM_Base_SetConfig+0xbe>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a0a      	ldr	r2, [pc, #40]	; (8005110 <TIM_Base_SetConfig+0xe4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d103      	bne.n	80050f2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	691a      	ldr	r2, [r3, #16]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	615a      	str	r2, [r3, #20]
}
 80050f8:	46c0      	nop			; (mov r8, r8)
 80050fa:	46bd      	mov	sp, r7
 80050fc:	b004      	add	sp, #16
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40012c00 	.word	0x40012c00
 8005104:	40000400 	.word	0x40000400
 8005108:	40002000 	.word	0x40002000
 800510c:	40014400 	.word	0x40014400
 8005110:	40014800 	.word	0x40014800
 8005114:	fffffcff 	.word	0xfffffcff

08005118 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	2201      	movs	r2, #1
 8005128:	4393      	bics	r3, r2
 800512a:	001a      	movs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2270      	movs	r2, #112	; 0x70
 8005146:	4393      	bics	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2203      	movs	r2, #3
 800514e:	4393      	bics	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2202      	movs	r2, #2
 8005160:	4393      	bics	r3, r2
 8005162:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a23      	ldr	r2, [pc, #140]	; (8005200 <TIM_OC1_SetConfig+0xe8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d007      	beq.n	8005186 <TIM_OC1_SetConfig+0x6e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a22      	ldr	r2, [pc, #136]	; (8005204 <TIM_OC1_SetConfig+0xec>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d003      	beq.n	8005186 <TIM_OC1_SetConfig+0x6e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a21      	ldr	r2, [pc, #132]	; (8005208 <TIM_OC1_SetConfig+0xf0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d10c      	bne.n	80051a0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2208      	movs	r2, #8
 800518a:	4393      	bics	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2204      	movs	r2, #4
 800519c:	4393      	bics	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a17      	ldr	r2, [pc, #92]	; (8005200 <TIM_OC1_SetConfig+0xe8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d007      	beq.n	80051b8 <TIM_OC1_SetConfig+0xa0>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a16      	ldr	r2, [pc, #88]	; (8005204 <TIM_OC1_SetConfig+0xec>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d003      	beq.n	80051b8 <TIM_OC1_SetConfig+0xa0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a15      	ldr	r2, [pc, #84]	; (8005208 <TIM_OC1_SetConfig+0xf0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d111      	bne.n	80051dc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	4a14      	ldr	r2, [pc, #80]	; (800520c <TIM_OC1_SetConfig+0xf4>)
 80051bc:	4013      	ands	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4a13      	ldr	r2, [pc, #76]	; (8005210 <TIM_OC1_SetConfig+0xf8>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	621a      	str	r2, [r3, #32]
}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b006      	add	sp, #24
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40014400 	.word	0x40014400
 8005208:	40014800 	.word	0x40014800
 800520c:	fffffeff 	.word	0xfffffeff
 8005210:	fffffdff 	.word	0xfffffdff

08005214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	2210      	movs	r2, #16
 8005224:	4393      	bics	r3, r2
 8005226:	001a      	movs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4a2c      	ldr	r2, [pc, #176]	; (80052f4 <TIM_OC2_SetConfig+0xe0>)
 8005242:	4013      	ands	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4a2b      	ldr	r2, [pc, #172]	; (80052f8 <TIM_OC2_SetConfig+0xe4>)
 800524a:	4013      	ands	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2220      	movs	r2, #32
 800525e:	4393      	bics	r3, r2
 8005260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a22      	ldr	r2, [pc, #136]	; (80052fc <TIM_OC2_SetConfig+0xe8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d10d      	bne.n	8005292 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2280      	movs	r2, #128	; 0x80
 800527a:	4393      	bics	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2240      	movs	r2, #64	; 0x40
 800528e:	4393      	bics	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a19      	ldr	r2, [pc, #100]	; (80052fc <TIM_OC2_SetConfig+0xe8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d007      	beq.n	80052aa <TIM_OC2_SetConfig+0x96>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a18      	ldr	r2, [pc, #96]	; (8005300 <TIM_OC2_SetConfig+0xec>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d003      	beq.n	80052aa <TIM_OC2_SetConfig+0x96>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a17      	ldr	r2, [pc, #92]	; (8005304 <TIM_OC2_SetConfig+0xf0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d113      	bne.n	80052d2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4a16      	ldr	r2, [pc, #88]	; (8005308 <TIM_OC2_SetConfig+0xf4>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	4a15      	ldr	r2, [pc, #84]	; (800530c <TIM_OC2_SetConfig+0xf8>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	621a      	str	r2, [r3, #32]
}
 80052ec:	46c0      	nop			; (mov r8, r8)
 80052ee:	46bd      	mov	sp, r7
 80052f0:	b006      	add	sp, #24
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	ffff8fff 	.word	0xffff8fff
 80052f8:	fffffcff 	.word	0xfffffcff
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	40014400 	.word	0x40014400
 8005304:	40014800 	.word	0x40014800
 8005308:	fffffbff 	.word	0xfffffbff
 800530c:	fffff7ff 	.word	0xfffff7ff

08005310 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	4a33      	ldr	r2, [pc, #204]	; (80053ec <TIM_OC3_SetConfig+0xdc>)
 8005320:	401a      	ands	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2270      	movs	r2, #112	; 0x70
 800533c:	4393      	bics	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2203      	movs	r2, #3
 8005344:	4393      	bics	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	4a26      	ldr	r2, [pc, #152]	; (80053f0 <TIM_OC3_SetConfig+0xe0>)
 8005356:	4013      	ands	r3, r2
 8005358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a22      	ldr	r2, [pc, #136]	; (80053f4 <TIM_OC3_SetConfig+0xe4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d10d      	bne.n	800538a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	4a21      	ldr	r2, [pc, #132]	; (80053f8 <TIM_OC3_SetConfig+0xe8>)
 8005372:	4013      	ands	r3, r2
 8005374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	4a1d      	ldr	r2, [pc, #116]	; (80053fc <TIM_OC3_SetConfig+0xec>)
 8005386:	4013      	ands	r3, r2
 8005388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a19      	ldr	r2, [pc, #100]	; (80053f4 <TIM_OC3_SetConfig+0xe4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d007      	beq.n	80053a2 <TIM_OC3_SetConfig+0x92>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a1a      	ldr	r2, [pc, #104]	; (8005400 <TIM_OC3_SetConfig+0xf0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_OC3_SetConfig+0x92>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a19      	ldr	r2, [pc, #100]	; (8005404 <TIM_OC3_SetConfig+0xf4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d113      	bne.n	80053ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4a18      	ldr	r2, [pc, #96]	; (8005408 <TIM_OC3_SetConfig+0xf8>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4a17      	ldr	r2, [pc, #92]	; (800540c <TIM_OC3_SetConfig+0xfc>)
 80053ae:	4013      	ands	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	621a      	str	r2, [r3, #32]
}
 80053e4:	46c0      	nop			; (mov r8, r8)
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b006      	add	sp, #24
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	fffffeff 	.word	0xfffffeff
 80053f0:	fffffdff 	.word	0xfffffdff
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	fffff7ff 	.word	0xfffff7ff
 80053fc:	fffffbff 	.word	0xfffffbff
 8005400:	40014400 	.word	0x40014400
 8005404:	40014800 	.word	0x40014800
 8005408:	ffffefff 	.word	0xffffefff
 800540c:	ffffdfff 	.word	0xffffdfff

08005410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	4a26      	ldr	r2, [pc, #152]	; (80054b8 <TIM_OC4_SetConfig+0xa8>)
 8005420:	401a      	ands	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4a20      	ldr	r2, [pc, #128]	; (80054bc <TIM_OC4_SetConfig+0xac>)
 800543c:	4013      	ands	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a1f      	ldr	r2, [pc, #124]	; (80054c0 <TIM_OC4_SetConfig+0xb0>)
 8005444:	4013      	ands	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	4a1b      	ldr	r2, [pc, #108]	; (80054c4 <TIM_OC4_SetConfig+0xb4>)
 8005458:	4013      	ands	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	031b      	lsls	r3, r3, #12
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <TIM_OC4_SetConfig+0xb8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d007      	beq.n	8005480 <TIM_OC4_SetConfig+0x70>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a16      	ldr	r2, [pc, #88]	; (80054cc <TIM_OC4_SetConfig+0xbc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d003      	beq.n	8005480 <TIM_OC4_SetConfig+0x70>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a15      	ldr	r2, [pc, #84]	; (80054d0 <TIM_OC4_SetConfig+0xc0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d109      	bne.n	8005494 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <TIM_OC4_SetConfig+0xc4>)
 8005484:	4013      	ands	r3, r2
 8005486:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	019b      	lsls	r3, r3, #6
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	621a      	str	r2, [r3, #32]
}
 80054ae:	46c0      	nop			; (mov r8, r8)
 80054b0:	46bd      	mov	sp, r7
 80054b2:	b006      	add	sp, #24
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	ffffefff 	.word	0xffffefff
 80054bc:	ffff8fff 	.word	0xffff8fff
 80054c0:	fffffcff 	.word	0xfffffcff
 80054c4:	ffffdfff 	.word	0xffffdfff
 80054c8:	40012c00 	.word	0x40012c00
 80054cc:	40014400 	.word	0x40014400
 80054d0:	40014800 	.word	0x40014800
 80054d4:	ffffbfff 	.word	0xffffbfff

080054d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054e2:	2317      	movs	r3, #23
 80054e4:	18fb      	adds	r3, r7, r3
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2270      	movs	r2, #112	; 0x70
 80054f6:	4393      	bics	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	2207      	movs	r2, #7
 8005508:	4393      	bics	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b70      	cmp	r3, #112	; 0x70
 8005524:	d015      	beq.n	8005552 <TIM_SlaveTimer_SetConfig+0x7a>
 8005526:	d900      	bls.n	800552a <TIM_SlaveTimer_SetConfig+0x52>
 8005528:	e05b      	b.n	80055e2 <TIM_SlaveTimer_SetConfig+0x10a>
 800552a:	2b60      	cmp	r3, #96	; 0x60
 800552c:	d04f      	beq.n	80055ce <TIM_SlaveTimer_SetConfig+0xf6>
 800552e:	d858      	bhi.n	80055e2 <TIM_SlaveTimer_SetConfig+0x10a>
 8005530:	2b50      	cmp	r3, #80	; 0x50
 8005532:	d042      	beq.n	80055ba <TIM_SlaveTimer_SetConfig+0xe2>
 8005534:	d855      	bhi.n	80055e2 <TIM_SlaveTimer_SetConfig+0x10a>
 8005536:	2b40      	cmp	r3, #64	; 0x40
 8005538:	d016      	beq.n	8005568 <TIM_SlaveTimer_SetConfig+0x90>
 800553a:	d852      	bhi.n	80055e2 <TIM_SlaveTimer_SetConfig+0x10a>
 800553c:	2b30      	cmp	r3, #48	; 0x30
 800553e:	d055      	beq.n	80055ec <TIM_SlaveTimer_SetConfig+0x114>
 8005540:	d84f      	bhi.n	80055e2 <TIM_SlaveTimer_SetConfig+0x10a>
 8005542:	2b20      	cmp	r3, #32
 8005544:	d052      	beq.n	80055ec <TIM_SlaveTimer_SetConfig+0x114>
 8005546:	d84c      	bhi.n	80055e2 <TIM_SlaveTimer_SetConfig+0x10a>
 8005548:	2b00      	cmp	r3, #0
 800554a:	d04f      	beq.n	80055ec <TIM_SlaveTimer_SetConfig+0x114>
 800554c:	2b10      	cmp	r3, #16
 800554e:	d04d      	beq.n	80055ec <TIM_SlaveTimer_SetConfig+0x114>
 8005550:	e047      	b.n	80055e2 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68d9      	ldr	r1, [r3, #12]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	689a      	ldr	r2, [r3, #8]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f000 f8c5 	bl	80056f0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005566:	e042      	b.n	80055ee <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b05      	cmp	r3, #5
 800556e:	d101      	bne.n	8005574 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e03f      	b.n	80055f4 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6a1a      	ldr	r2, [r3, #32]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2101      	movs	r1, #1
 8005588:	438a      	bics	r2, r1
 800558a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	22f0      	movs	r2, #240	; 0xf0
 8005598:	4393      	bics	r3, r2
 800559a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	621a      	str	r2, [r3, #32]
      break;
 80055b8:	e019      	b.n	80055ee <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6899      	ldr	r1, [r3, #8]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	001a      	movs	r2, r3
 80055c8:	f000 f818 	bl	80055fc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80055cc:	e00f      	b.n	80055ee <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6899      	ldr	r1, [r3, #8]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	001a      	movs	r2, r3
 80055dc:	f000 f83c 	bl	8005658 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80055e0:	e005      	b.n	80055ee <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80055e2:	2317      	movs	r3, #23
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	2201      	movs	r2, #1
 80055e8:	701a      	strb	r2, [r3, #0]
      break;
 80055ea:	e000      	b.n	80055ee <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80055ec:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 80055ee:	2317      	movs	r3, #23
 80055f0:	18fb      	adds	r3, r7, r3
 80055f2:	781b      	ldrb	r3, [r3, #0]
}
 80055f4:	0018      	movs	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b006      	add	sp, #24
 80055fa:	bd80      	pop	{r7, pc}

080055fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	2201      	movs	r2, #1
 8005614:	4393      	bics	r3, r2
 8005616:	001a      	movs	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	22f0      	movs	r2, #240	; 0xf0
 8005626:	4393      	bics	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	220a      	movs	r2, #10
 8005638:	4393      	bics	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	46c0      	nop			; (mov r8, r8)
 8005652:	46bd      	mov	sp, r7
 8005654:	b006      	add	sp, #24
 8005656:	bd80      	pop	{r7, pc}

08005658 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	2210      	movs	r2, #16
 800566a:	4393      	bics	r3, r2
 800566c:	001a      	movs	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	4a0d      	ldr	r2, [pc, #52]	; (80056b8 <TIM_TI2_ConfigInputStage+0x60>)
 8005682:	4013      	ands	r3, r2
 8005684:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	031b      	lsls	r3, r3, #12
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	22a0      	movs	r2, #160	; 0xa0
 8005694:	4393      	bics	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4313      	orrs	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	621a      	str	r2, [r3, #32]
}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	46bd      	mov	sp, r7
 80056b2:	b006      	add	sp, #24
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	ffff0fff 	.word	0xffff0fff

080056bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2270      	movs	r2, #112	; 0x70
 80056d0:	4393      	bics	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	2207      	movs	r2, #7
 80056dc:	4313      	orrs	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	609a      	str	r2, [r3, #8]
}
 80056e6:	46c0      	nop			; (mov r8, r8)
 80056e8:	46bd      	mov	sp, r7
 80056ea:	b004      	add	sp, #16
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	4a09      	ldr	r2, [pc, #36]	; (800572c <TIM_ETR_SetConfig+0x3c>)
 8005708:	4013      	ands	r3, r2
 800570a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	021a      	lsls	r2, r3, #8
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	431a      	orrs	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4313      	orrs	r3, r2
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	609a      	str	r2, [r3, #8]
}
 8005724:	46c0      	nop			; (mov r8, r8)
 8005726:	46bd      	mov	sp, r7
 8005728:	b006      	add	sp, #24
 800572a:	bd80      	pop	{r7, pc}
 800572c:	ffff00ff 	.word	0xffff00ff

08005730 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	221f      	movs	r2, #31
 8005740:	4013      	ands	r3, r2
 8005742:	2201      	movs	r2, #1
 8005744:	409a      	lsls	r2, r3
 8005746:	0013      	movs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	43d2      	mvns	r2, r2
 8005752:	401a      	ands	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a1a      	ldr	r2, [r3, #32]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	211f      	movs	r1, #31
 8005760:	400b      	ands	r3, r1
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	4099      	lsls	r1, r3
 8005766:	000b      	movs	r3, r1
 8005768:	431a      	orrs	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	46bd      	mov	sp, r7
 8005772:	b006      	add	sp, #24
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	223c      	movs	r2, #60	; 0x3c
 8005786:	5c9b      	ldrb	r3, [r3, r2]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800578c:	2302      	movs	r3, #2
 800578e:	e042      	b.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	223c      	movs	r2, #60	; 0x3c
 8005794:	2101      	movs	r1, #1
 8005796:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	223d      	movs	r2, #61	; 0x3d
 800579c:	2102      	movs	r1, #2
 800579e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2270      	movs	r2, #112	; 0x70
 80057b4:	4393      	bics	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a14      	ldr	r2, [pc, #80]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00a      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	2380      	movs	r3, #128	; 0x80
 80057da:	05db      	lsls	r3, r3, #23
 80057dc:	429a      	cmp	r2, r3
 80057de:	d004      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a0f      	ldr	r2, [pc, #60]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d10c      	bne.n	8005804 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2280      	movs	r2, #128	; 0x80
 80057ee:	4393      	bics	r3, r2
 80057f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	223d      	movs	r2, #61	; 0x3d
 8005808:	2101      	movs	r1, #1
 800580a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	223c      	movs	r2, #60	; 0x3c
 8005810:	2100      	movs	r1, #0
 8005812:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	0018      	movs	r0, r3
 8005818:	46bd      	mov	sp, r7
 800581a:	b004      	add	sp, #16
 800581c:	bd80      	pop	{r7, pc}
 800581e:	46c0      	nop			; (mov r8, r8)
 8005820:	40012c00 	.word	0x40012c00
 8005824:	40000400 	.word	0x40000400

08005828 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	223c      	movs	r2, #60	; 0x3c
 800583a:	5c9b      	ldrb	r3, [r3, r2]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005840:	2302      	movs	r3, #2
 8005842:	e03e      	b.n	80058c2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	223c      	movs	r2, #60	; 0x3c
 8005848:	2101      	movs	r1, #1
 800584a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	22ff      	movs	r2, #255	; 0xff
 8005850:	4393      	bics	r3, r2
 8005852:	001a      	movs	r2, r3
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4a1b      	ldr	r2, [pc, #108]	; (80058cc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005860:	401a      	ands	r2, r3
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4a18      	ldr	r2, [pc, #96]	; (80058d0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800586e:	401a      	ands	r2, r3
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4a16      	ldr	r2, [pc, #88]	; (80058d4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800587c:	401a      	ands	r2, r3
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4a13      	ldr	r2, [pc, #76]	; (80058d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800588a:	401a      	ands	r2, r3
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4a11      	ldr	r2, [pc, #68]	; (80058dc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005898:	401a      	ands	r2, r3
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4a0e      	ldr	r2, [pc, #56]	; (80058e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80058a6:	401a      	ands	r2, r3
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	223c      	movs	r2, #60	; 0x3c
 80058bc:	2100      	movs	r1, #0
 80058be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	0018      	movs	r0, r3
 80058c4:	46bd      	mov	sp, r7
 80058c6:	b004      	add	sp, #16
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	fffffcff 	.word	0xfffffcff
 80058d0:	fffffbff 	.word	0xfffffbff
 80058d4:	fffff7ff 	.word	0xfffff7ff
 80058d8:	ffffefff 	.word	0xffffefff
 80058dc:	ffffdfff 	.word	0xffffdfff
 80058e0:	ffffbfff 	.word	0xffffbfff

080058e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08a      	sub	sp, #40	; 0x28
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	1dbb      	adds	r3, r7, #6
 80058f2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058f8:	2b20      	cmp	r3, #32
 80058fa:	d000      	beq.n	80058fe <HAL_UART_Transmit+0x1a>
 80058fc:	e096      	b.n	8005a2c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <HAL_UART_Transmit+0x28>
 8005904:	1dbb      	adds	r3, r7, #6
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e08e      	b.n	8005a2e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	2380      	movs	r3, #128	; 0x80
 8005916:	015b      	lsls	r3, r3, #5
 8005918:	429a      	cmp	r2, r3
 800591a:	d109      	bne.n	8005930 <HAL_UART_Transmit+0x4c>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d105      	bne.n	8005930 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2201      	movs	r2, #1
 8005928:	4013      	ands	r3, r2
 800592a:	d001      	beq.n	8005930 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e07e      	b.n	8005a2e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2274      	movs	r2, #116	; 0x74
 8005934:	5c9b      	ldrb	r3, [r3, r2]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <HAL_UART_Transmit+0x5a>
 800593a:	2302      	movs	r3, #2
 800593c:	e077      	b.n	8005a2e <HAL_UART_Transmit+0x14a>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2274      	movs	r2, #116	; 0x74
 8005942:	2101      	movs	r1, #1
 8005944:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2280      	movs	r2, #128	; 0x80
 800594a:	2100      	movs	r1, #0
 800594c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2221      	movs	r2, #33	; 0x21
 8005952:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005954:	f7fb fd78 	bl	8001448 <HAL_GetTick>
 8005958:	0003      	movs	r3, r0
 800595a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	1dba      	adds	r2, r7, #6
 8005960:	2150      	movs	r1, #80	; 0x50
 8005962:	8812      	ldrh	r2, [r2, #0]
 8005964:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1dba      	adds	r2, r7, #6
 800596a:	2152      	movs	r1, #82	; 0x52
 800596c:	8812      	ldrh	r2, [r2, #0]
 800596e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	2380      	movs	r3, #128	; 0x80
 8005976:	015b      	lsls	r3, r3, #5
 8005978:	429a      	cmp	r2, r3
 800597a:	d108      	bne.n	800598e <HAL_UART_Transmit+0xaa>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d104      	bne.n	800598e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005984:	2300      	movs	r3, #0
 8005986:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	61bb      	str	r3, [r7, #24]
 800598c:	e003      	b.n	8005996 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005992:	2300      	movs	r3, #0
 8005994:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2274      	movs	r2, #116	; 0x74
 800599a:	2100      	movs	r1, #0
 800599c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800599e:	e02d      	b.n	80059fc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	0013      	movs	r3, r2
 80059aa:	2200      	movs	r2, #0
 80059ac:	2180      	movs	r1, #128	; 0x80
 80059ae:	f000 fa69 	bl	8005e84 <UART_WaitOnFlagUntilTimeout>
 80059b2:	1e03      	subs	r3, r0, #0
 80059b4:	d001      	beq.n	80059ba <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e039      	b.n	8005a2e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10b      	bne.n	80059d8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	881a      	ldrh	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	05d2      	lsls	r2, r2, #23
 80059ca:	0dd2      	lsrs	r2, r2, #23
 80059cc:	b292      	uxth	r2, r2
 80059ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	3302      	adds	r3, #2
 80059d4:	61bb      	str	r3, [r7, #24]
 80059d6:	e008      	b.n	80059ea <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	781a      	ldrb	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	b292      	uxth	r2, r2
 80059e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	3301      	adds	r3, #1
 80059e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2252      	movs	r2, #82	; 0x52
 80059ee:	5a9b      	ldrh	r3, [r3, r2]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b299      	uxth	r1, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2252      	movs	r2, #82	; 0x52
 80059fa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2252      	movs	r2, #82	; 0x52
 8005a00:	5a9b      	ldrh	r3, [r3, r2]
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1cb      	bne.n	80059a0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	0013      	movs	r3, r2
 8005a12:	2200      	movs	r2, #0
 8005a14:	2140      	movs	r1, #64	; 0x40
 8005a16:	f000 fa35 	bl	8005e84 <UART_WaitOnFlagUntilTimeout>
 8005a1a:	1e03      	subs	r3, r0, #0
 8005a1c:	d001      	beq.n	8005a22 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e005      	b.n	8005a2e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2220      	movs	r2, #32
 8005a26:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	e000      	b.n	8005a2e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005a2c:	2302      	movs	r3, #2
  }
}
 8005a2e:	0018      	movs	r0, r3
 8005a30:	46bd      	mov	sp, r7
 8005a32:	b008      	add	sp, #32
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a40:	231e      	movs	r3, #30
 8005a42:	18fb      	adds	r3, r7, r3
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a84      	ldr	r2, [pc, #528]	; (8005c78 <UART_SetConfig+0x240>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	0019      	movs	r1, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	4a7f      	ldr	r2, [pc, #508]	; (8005c7c <UART_SetConfig+0x244>)
 8005a7e:	4013      	ands	r3, r2
 8005a80:	0019      	movs	r1, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	4a76      	ldr	r2, [pc, #472]	; (8005c80 <UART_SetConfig+0x248>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ab4:	4b73      	ldr	r3, [pc, #460]	; (8005c84 <UART_SetConfig+0x24c>)
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	2203      	movs	r2, #3
 8005aba:	4013      	ands	r3, r2
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d00d      	beq.n	8005adc <UART_SetConfig+0xa4>
 8005ac0:	d81b      	bhi.n	8005afa <UART_SetConfig+0xc2>
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d014      	beq.n	8005af0 <UART_SetConfig+0xb8>
 8005ac6:	d818      	bhi.n	8005afa <UART_SetConfig+0xc2>
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <UART_SetConfig+0x9a>
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d00a      	beq.n	8005ae6 <UART_SetConfig+0xae>
 8005ad0:	e013      	b.n	8005afa <UART_SetConfig+0xc2>
 8005ad2:	231f      	movs	r3, #31
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	e012      	b.n	8005b02 <UART_SetConfig+0xca>
 8005adc:	231f      	movs	r3, #31
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	e00d      	b.n	8005b02 <UART_SetConfig+0xca>
 8005ae6:	231f      	movs	r3, #31
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	2204      	movs	r2, #4
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	e008      	b.n	8005b02 <UART_SetConfig+0xca>
 8005af0:	231f      	movs	r3, #31
 8005af2:	18fb      	adds	r3, r7, r3
 8005af4:	2208      	movs	r2, #8
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	e003      	b.n	8005b02 <UART_SetConfig+0xca>
 8005afa:	231f      	movs	r3, #31
 8005afc:	18fb      	adds	r3, r7, r3
 8005afe:	2210      	movs	r2, #16
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	2380      	movs	r3, #128	; 0x80
 8005b0a:	021b      	lsls	r3, r3, #8
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d15d      	bne.n	8005bcc <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8005b10:	231f      	movs	r3, #31
 8005b12:	18fb      	adds	r3, r7, r3
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d015      	beq.n	8005b46 <UART_SetConfig+0x10e>
 8005b1a:	dc18      	bgt.n	8005b4e <UART_SetConfig+0x116>
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d00d      	beq.n	8005b3c <UART_SetConfig+0x104>
 8005b20:	dc15      	bgt.n	8005b4e <UART_SetConfig+0x116>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <UART_SetConfig+0xf4>
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d005      	beq.n	8005b36 <UART_SetConfig+0xfe>
 8005b2a:	e010      	b.n	8005b4e <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b2c:	f7fe fdae 	bl	800468c <HAL_RCC_GetPCLK1Freq>
 8005b30:	0003      	movs	r3, r0
 8005b32:	61bb      	str	r3, [r7, #24]
        break;
 8005b34:	e012      	b.n	8005b5c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b36:	4b54      	ldr	r3, [pc, #336]	; (8005c88 <UART_SetConfig+0x250>)
 8005b38:	61bb      	str	r3, [r7, #24]
        break;
 8005b3a:	e00f      	b.n	8005b5c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b3c:	f7fe fd38 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8005b40:	0003      	movs	r3, r0
 8005b42:	61bb      	str	r3, [r7, #24]
        break;
 8005b44:	e00a      	b.n	8005b5c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b46:	2380      	movs	r3, #128	; 0x80
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	61bb      	str	r3, [r7, #24]
        break;
 8005b4c:	e006      	b.n	8005b5c <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b52:	231e      	movs	r3, #30
 8005b54:	18fb      	adds	r3, r7, r3
 8005b56:	2201      	movs	r2, #1
 8005b58:	701a      	strb	r2, [r3, #0]
        break;
 8005b5a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d100      	bne.n	8005b64 <UART_SetConfig+0x12c>
 8005b62:	e07b      	b.n	8005c5c <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	005a      	lsls	r2, r3, #1
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	085b      	lsrs	r3, r3, #1
 8005b6e:	18d2      	adds	r2, r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	0019      	movs	r1, r3
 8005b76:	0010      	movs	r0, r2
 8005b78:	f7fa fad8 	bl	800012c <__udivsi3>
 8005b7c:	0003      	movs	r3, r0
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	2b0f      	cmp	r3, #15
 8005b86:	d91c      	bls.n	8005bc2 <UART_SetConfig+0x18a>
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	2380      	movs	r3, #128	; 0x80
 8005b8c:	025b      	lsls	r3, r3, #9
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d217      	bcs.n	8005bc2 <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	200e      	movs	r0, #14
 8005b98:	183b      	adds	r3, r7, r0
 8005b9a:	210f      	movs	r1, #15
 8005b9c:	438a      	bics	r2, r1
 8005b9e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2207      	movs	r2, #7
 8005ba8:	4013      	ands	r3, r2
 8005baa:	b299      	uxth	r1, r3
 8005bac:	183b      	adds	r3, r7, r0
 8005bae:	183a      	adds	r2, r7, r0
 8005bb0:	8812      	ldrh	r2, [r2, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	183a      	adds	r2, r7, r0
 8005bbc:	8812      	ldrh	r2, [r2, #0]
 8005bbe:	60da      	str	r2, [r3, #12]
 8005bc0:	e04c      	b.n	8005c5c <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8005bc2:	231e      	movs	r3, #30
 8005bc4:	18fb      	adds	r3, r7, r3
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	e047      	b.n	8005c5c <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bcc:	231f      	movs	r3, #31
 8005bce:	18fb      	adds	r3, r7, r3
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d015      	beq.n	8005c02 <UART_SetConfig+0x1ca>
 8005bd6:	dc18      	bgt.n	8005c0a <UART_SetConfig+0x1d2>
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	d00d      	beq.n	8005bf8 <UART_SetConfig+0x1c0>
 8005bdc:	dc15      	bgt.n	8005c0a <UART_SetConfig+0x1d2>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <UART_SetConfig+0x1b0>
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d005      	beq.n	8005bf2 <UART_SetConfig+0x1ba>
 8005be6:	e010      	b.n	8005c0a <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be8:	f7fe fd50 	bl	800468c <HAL_RCC_GetPCLK1Freq>
 8005bec:	0003      	movs	r3, r0
 8005bee:	61bb      	str	r3, [r7, #24]
        break;
 8005bf0:	e012      	b.n	8005c18 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf2:	4b25      	ldr	r3, [pc, #148]	; (8005c88 <UART_SetConfig+0x250>)
 8005bf4:	61bb      	str	r3, [r7, #24]
        break;
 8005bf6:	e00f      	b.n	8005c18 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bf8:	f7fe fcda 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8005bfc:	0003      	movs	r3, r0
 8005bfe:	61bb      	str	r3, [r7, #24]
        break;
 8005c00:	e00a      	b.n	8005c18 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c02:	2380      	movs	r3, #128	; 0x80
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	61bb      	str	r3, [r7, #24]
        break;
 8005c08:	e006      	b.n	8005c18 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c0e:	231e      	movs	r3, #30
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	2201      	movs	r2, #1
 8005c14:	701a      	strb	r2, [r3, #0]
        break;
 8005c16:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d01e      	beq.n	8005c5c <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	085a      	lsrs	r2, r3, #1
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	18d2      	adds	r2, r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	0019      	movs	r1, r3
 8005c2e:	0010      	movs	r0, r2
 8005c30:	f7fa fa7c 	bl	800012c <__udivsi3>
 8005c34:	0003      	movs	r3, r0
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	2b0f      	cmp	r3, #15
 8005c3e:	d909      	bls.n	8005c54 <UART_SetConfig+0x21c>
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	2380      	movs	r3, #128	; 0x80
 8005c44:	025b      	lsls	r3, r3, #9
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d204      	bcs.n	8005c54 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	60da      	str	r2, [r3, #12]
 8005c52:	e003      	b.n	8005c5c <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8005c54:	231e      	movs	r3, #30
 8005c56:	18fb      	adds	r3, r7, r3
 8005c58:	2201      	movs	r2, #1
 8005c5a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c68:	231e      	movs	r3, #30
 8005c6a:	18fb      	adds	r3, r7, r3
 8005c6c:	781b      	ldrb	r3, [r3, #0]
}
 8005c6e:	0018      	movs	r0, r3
 8005c70:	46bd      	mov	sp, r7
 8005c72:	b008      	add	sp, #32
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	ffff69f3 	.word	0xffff69f3
 8005c7c:	ffffcfff 	.word	0xffffcfff
 8005c80:	fffff4ff 	.word	0xfffff4ff
 8005c84:	40021000 	.word	0x40021000
 8005c88:	007a1200 	.word	0x007a1200

08005c8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	2201      	movs	r2, #1
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	d00b      	beq.n	8005cb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	4a4a      	ldr	r2, [pc, #296]	; (8005dd0 <UART_AdvFeatureConfig+0x144>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	0019      	movs	r1, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	2202      	movs	r2, #2
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	d00b      	beq.n	8005cd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	4a43      	ldr	r2, [pc, #268]	; (8005dd4 <UART_AdvFeatureConfig+0x148>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	0019      	movs	r1, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	2204      	movs	r2, #4
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d00b      	beq.n	8005cfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	4a3b      	ldr	r2, [pc, #236]	; (8005dd8 <UART_AdvFeatureConfig+0x14c>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	0019      	movs	r1, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	2208      	movs	r2, #8
 8005d00:	4013      	ands	r3, r2
 8005d02:	d00b      	beq.n	8005d1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	4a34      	ldr	r2, [pc, #208]	; (8005ddc <UART_AdvFeatureConfig+0x150>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	0019      	movs	r1, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	2210      	movs	r2, #16
 8005d22:	4013      	ands	r3, r2
 8005d24:	d00b      	beq.n	8005d3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	4a2c      	ldr	r2, [pc, #176]	; (8005de0 <UART_AdvFeatureConfig+0x154>)
 8005d2e:	4013      	ands	r3, r2
 8005d30:	0019      	movs	r1, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	2220      	movs	r2, #32
 8005d44:	4013      	ands	r3, r2
 8005d46:	d00b      	beq.n	8005d60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	4a25      	ldr	r2, [pc, #148]	; (8005de4 <UART_AdvFeatureConfig+0x158>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	0019      	movs	r1, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	2240      	movs	r2, #64	; 0x40
 8005d66:	4013      	ands	r3, r2
 8005d68:	d01d      	beq.n	8005da6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	4a1d      	ldr	r2, [pc, #116]	; (8005de8 <UART_AdvFeatureConfig+0x15c>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	0019      	movs	r1, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d86:	2380      	movs	r3, #128	; 0x80
 8005d88:	035b      	lsls	r3, r3, #13
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d10b      	bne.n	8005da6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	4a15      	ldr	r2, [pc, #84]	; (8005dec <UART_AdvFeatureConfig+0x160>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	0019      	movs	r1, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	2280      	movs	r2, #128	; 0x80
 8005dac:	4013      	ands	r3, r2
 8005dae:	d00b      	beq.n	8005dc8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	4a0e      	ldr	r2, [pc, #56]	; (8005df0 <UART_AdvFeatureConfig+0x164>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	0019      	movs	r1, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	605a      	str	r2, [r3, #4]
  }
}
 8005dc8:	46c0      	nop			; (mov r8, r8)
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	b002      	add	sp, #8
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	fffdffff 	.word	0xfffdffff
 8005dd4:	fffeffff 	.word	0xfffeffff
 8005dd8:	fffbffff 	.word	0xfffbffff
 8005ddc:	ffff7fff 	.word	0xffff7fff
 8005de0:	ffffefff 	.word	0xffffefff
 8005de4:	ffffdfff 	.word	0xffffdfff
 8005de8:	ffefffff 	.word	0xffefffff
 8005dec:	ff9fffff 	.word	0xff9fffff
 8005df0:	fff7ffff 	.word	0xfff7ffff

08005df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2280      	movs	r2, #128	; 0x80
 8005e00:	2100      	movs	r1, #0
 8005e02:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e04:	f7fb fb20 	bl	8001448 <HAL_GetTick>
 8005e08:	0003      	movs	r3, r0
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2208      	movs	r2, #8
 8005e14:	4013      	ands	r3, r2
 8005e16:	2b08      	cmp	r3, #8
 8005e18:	d10c      	bne.n	8005e34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2280      	movs	r2, #128	; 0x80
 8005e1e:	0391      	lsls	r1, r2, #14
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	4a17      	ldr	r2, [pc, #92]	; (8005e80 <UART_CheckIdleState+0x8c>)
 8005e24:	9200      	str	r2, [sp, #0]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f000 f82c 	bl	8005e84 <UART_WaitOnFlagUntilTimeout>
 8005e2c:	1e03      	subs	r3, r0, #0
 8005e2e:	d001      	beq.n	8005e34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e021      	b.n	8005e78 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2204      	movs	r2, #4
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d10c      	bne.n	8005e5c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2280      	movs	r2, #128	; 0x80
 8005e46:	03d1      	lsls	r1, r2, #15
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	4a0d      	ldr	r2, [pc, #52]	; (8005e80 <UART_CheckIdleState+0x8c>)
 8005e4c:	9200      	str	r2, [sp, #0]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f000 f818 	bl	8005e84 <UART_WaitOnFlagUntilTimeout>
 8005e54:	1e03      	subs	r3, r0, #0
 8005e56:	d001      	beq.n	8005e5c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e00d      	b.n	8005e78 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2274      	movs	r2, #116	; 0x74
 8005e72:	2100      	movs	r1, #0
 8005e74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	0018      	movs	r0, r3
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	b004      	add	sp, #16
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	01ffffff 	.word	0x01ffffff

08005e84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b094      	sub	sp, #80	; 0x50
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	603b      	str	r3, [r7, #0]
 8005e90:	1dfb      	adds	r3, r7, #7
 8005e92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e94:	e0a3      	b.n	8005fde <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e98:	3301      	adds	r3, #1
 8005e9a:	d100      	bne.n	8005e9e <UART_WaitOnFlagUntilTimeout+0x1a>
 8005e9c:	e09f      	b.n	8005fde <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9e:	f7fb fad3 	bl	8001448 <HAL_GetTick>
 8005ea2:	0002      	movs	r2, r0
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d302      	bcc.n	8005eb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d13d      	bne.n	8005f30 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8005eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec4:	f383 8810 	msr	PRIMASK, r3
}
 8005ec8:	46c0      	nop			; (mov r8, r8)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	494c      	ldr	r1, [pc, #304]	; (8006008 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005ed6:	400a      	ands	r2, r1
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005edc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee0:	f383 8810 	msr	PRIMASK, r3
}
 8005ee4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8005eea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eee:	643b      	str	r3, [r7, #64]	; 0x40
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef6:	f383 8810 	msr	PRIMASK, r3
}
 8005efa:	46c0      	nop			; (mov r8, r8)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2101      	movs	r1, #1
 8005f08:	438a      	bics	r2, r1
 8005f0a:	609a      	str	r2, [r3, #8]
 8005f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f12:	f383 8810 	msr	PRIMASK, r3
}
 8005f16:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2220      	movs	r2, #32
 8005f22:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2274      	movs	r2, #116	; 0x74
 8005f28:	2100      	movs	r1, #0
 8005f2a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e067      	b.n	8006000 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2204      	movs	r2, #4
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d050      	beq.n	8005fde <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69da      	ldr	r2, [r3, #28]
 8005f42:	2380      	movs	r3, #128	; 0x80
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	401a      	ands	r2, r3
 8005f48:	2380      	movs	r3, #128	; 0x80
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d146      	bne.n	8005fde <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2280      	movs	r2, #128	; 0x80
 8005f56:	0112      	lsls	r2, r2, #4
 8005f58:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f5e:	613b      	str	r3, [r7, #16]
  return(result);
 8005f60:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f64:	2301      	movs	r3, #1
 8005f66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f383 8810 	msr	PRIMASK, r3
}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4923      	ldr	r1, [pc, #140]	; (8006008 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005f7c:	400a      	ands	r2, r1
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	f383 8810 	msr	PRIMASK, r3
}
 8005f8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f90:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f92:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f94:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f96:	2301      	movs	r3, #1
 8005f98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	f383 8810 	msr	PRIMASK, r3
}
 8005fa0:	46c0      	nop			; (mov r8, r8)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2101      	movs	r1, #1
 8005fae:	438a      	bics	r2, r1
 8005fb0:	609a      	str	r2, [r3, #8]
 8005fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	f383 8810 	msr	PRIMASK, r3
}
 8005fbc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2280      	movs	r2, #128	; 0x80
 8005fce:	2120      	movs	r1, #32
 8005fd0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2274      	movs	r2, #116	; 0x74
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e010      	b.n	8006000 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	425a      	negs	r2, r3
 8005fee:	4153      	adcs	r3, r2
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	001a      	movs	r2, r3
 8005ff4:	1dfb      	adds	r3, r7, #7
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d100      	bne.n	8005ffe <UART_WaitOnFlagUntilTimeout+0x17a>
 8005ffc:	e74b      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	0018      	movs	r0, r3
 8006002:	46bd      	mov	sp, r7
 8006004:	b014      	add	sp, #80	; 0x50
 8006006:	bd80      	pop	{r7, pc}
 8006008:	fffffe5f 	.word	0xfffffe5f

0800600c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e05b      	b.n	80060dc <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006028:	2b00      	cmp	r3, #0
 800602a:	d107      	bne.n	800603c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2274      	movs	r2, #116	; 0x74
 8006030:	2100      	movs	r1, #0
 8006032:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	0018      	movs	r0, r3
 8006038:	f7fb f8bc 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2224      	movs	r2, #36	; 0x24
 8006040:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2101      	movs	r1, #1
 800604e:	438a      	bics	r2, r1
 8006050:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	0018      	movs	r0, r3
 8006056:	f7ff fcef 	bl	8005a38 <UART_SetConfig>
 800605a:	0003      	movs	r3, r0
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e03b      	b.n	80060dc <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	0018      	movs	r0, r3
 8006070:	f7ff fe0c 	bl	8005c8c <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2180      	movs	r1, #128	; 0x80
 8006080:	01c9      	lsls	r1, r1, #7
 8006082:	430a      	orrs	r2, r1
 8006084:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	4a15      	ldr	r2, [pc, #84]	; (80060e4 <HAL_RS485Ex_Init+0xd8>)
 800608e:	4013      	ands	r3, r2
 8006090:	0019      	movs	r1, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	430a      	orrs	r2, r1
 800609a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	055b      	lsls	r3, r3, #21
 80060a0:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	041b      	lsls	r3, r3, #16
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a0d      	ldr	r2, [pc, #52]	; (80060e8 <HAL_RS485Ex_Init+0xdc>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	0019      	movs	r1, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	430a      	orrs	r2, r1
 80060c0:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2101      	movs	r1, #1
 80060ce:	430a      	orrs	r2, r1
 80060d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	0018      	movs	r0, r3
 80060d6:	f7ff fe8d 	bl	8005df4 <UART_CheckIdleState>
 80060da:	0003      	movs	r3, r0
}
 80060dc:	0018      	movs	r0, r3
 80060de:	46bd      	mov	sp, r7
 80060e0:	b006      	add	sp, #24
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	ffff7fff 	.word	0xffff7fff
 80060e8:	fc00ffff 	.word	0xfc00ffff

080060ec <__errno>:
 80060ec:	4b01      	ldr	r3, [pc, #4]	; (80060f4 <__errno+0x8>)
 80060ee:	6818      	ldr	r0, [r3, #0]
 80060f0:	4770      	bx	lr
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	2000000c 	.word	0x2000000c

080060f8 <__libc_init_array>:
 80060f8:	b570      	push	{r4, r5, r6, lr}
 80060fa:	2600      	movs	r6, #0
 80060fc:	4d0c      	ldr	r5, [pc, #48]	; (8006130 <__libc_init_array+0x38>)
 80060fe:	4c0d      	ldr	r4, [pc, #52]	; (8006134 <__libc_init_array+0x3c>)
 8006100:	1b64      	subs	r4, r4, r5
 8006102:	10a4      	asrs	r4, r4, #2
 8006104:	42a6      	cmp	r6, r4
 8006106:	d109      	bne.n	800611c <__libc_init_array+0x24>
 8006108:	2600      	movs	r6, #0
 800610a:	f000 fc8b 	bl	8006a24 <_init>
 800610e:	4d0a      	ldr	r5, [pc, #40]	; (8006138 <__libc_init_array+0x40>)
 8006110:	4c0a      	ldr	r4, [pc, #40]	; (800613c <__libc_init_array+0x44>)
 8006112:	1b64      	subs	r4, r4, r5
 8006114:	10a4      	asrs	r4, r4, #2
 8006116:	42a6      	cmp	r6, r4
 8006118:	d105      	bne.n	8006126 <__libc_init_array+0x2e>
 800611a:	bd70      	pop	{r4, r5, r6, pc}
 800611c:	00b3      	lsls	r3, r6, #2
 800611e:	58eb      	ldr	r3, [r5, r3]
 8006120:	4798      	blx	r3
 8006122:	3601      	adds	r6, #1
 8006124:	e7ee      	b.n	8006104 <__libc_init_array+0xc>
 8006126:	00b3      	lsls	r3, r6, #2
 8006128:	58eb      	ldr	r3, [r5, r3]
 800612a:	4798      	blx	r3
 800612c:	3601      	adds	r6, #1
 800612e:	e7f2      	b.n	8006116 <__libc_init_array+0x1e>
 8006130:	08006ab8 	.word	0x08006ab8
 8006134:	08006ab8 	.word	0x08006ab8
 8006138:	08006ab8 	.word	0x08006ab8
 800613c:	08006abc 	.word	0x08006abc

08006140 <memset>:
 8006140:	0003      	movs	r3, r0
 8006142:	1882      	adds	r2, r0, r2
 8006144:	4293      	cmp	r3, r2
 8006146:	d100      	bne.n	800614a <memset+0xa>
 8006148:	4770      	bx	lr
 800614a:	7019      	strb	r1, [r3, #0]
 800614c:	3301      	adds	r3, #1
 800614e:	e7f9      	b.n	8006144 <memset+0x4>

08006150 <siprintf>:
 8006150:	b40e      	push	{r1, r2, r3}
 8006152:	b500      	push	{lr}
 8006154:	490b      	ldr	r1, [pc, #44]	; (8006184 <siprintf+0x34>)
 8006156:	b09c      	sub	sp, #112	; 0x70
 8006158:	ab1d      	add	r3, sp, #116	; 0x74
 800615a:	9002      	str	r0, [sp, #8]
 800615c:	9006      	str	r0, [sp, #24]
 800615e:	9107      	str	r1, [sp, #28]
 8006160:	9104      	str	r1, [sp, #16]
 8006162:	4809      	ldr	r0, [pc, #36]	; (8006188 <siprintf+0x38>)
 8006164:	4909      	ldr	r1, [pc, #36]	; (800618c <siprintf+0x3c>)
 8006166:	cb04      	ldmia	r3!, {r2}
 8006168:	9105      	str	r1, [sp, #20]
 800616a:	6800      	ldr	r0, [r0, #0]
 800616c:	a902      	add	r1, sp, #8
 800616e:	9301      	str	r3, [sp, #4]
 8006170:	f000 f870 	bl	8006254 <_svfiprintf_r>
 8006174:	2300      	movs	r3, #0
 8006176:	9a02      	ldr	r2, [sp, #8]
 8006178:	7013      	strb	r3, [r2, #0]
 800617a:	b01c      	add	sp, #112	; 0x70
 800617c:	bc08      	pop	{r3}
 800617e:	b003      	add	sp, #12
 8006180:	4718      	bx	r3
 8006182:	46c0      	nop			; (mov r8, r8)
 8006184:	7fffffff 	.word	0x7fffffff
 8006188:	2000000c 	.word	0x2000000c
 800618c:	ffff0208 	.word	0xffff0208

08006190 <__ssputs_r>:
 8006190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006192:	688e      	ldr	r6, [r1, #8]
 8006194:	b085      	sub	sp, #20
 8006196:	0007      	movs	r7, r0
 8006198:	000c      	movs	r4, r1
 800619a:	9203      	str	r2, [sp, #12]
 800619c:	9301      	str	r3, [sp, #4]
 800619e:	429e      	cmp	r6, r3
 80061a0:	d83c      	bhi.n	800621c <__ssputs_r+0x8c>
 80061a2:	2390      	movs	r3, #144	; 0x90
 80061a4:	898a      	ldrh	r2, [r1, #12]
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	421a      	tst	r2, r3
 80061aa:	d034      	beq.n	8006216 <__ssputs_r+0x86>
 80061ac:	6909      	ldr	r1, [r1, #16]
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	6960      	ldr	r0, [r4, #20]
 80061b2:	1a5b      	subs	r3, r3, r1
 80061b4:	9302      	str	r3, [sp, #8]
 80061b6:	2303      	movs	r3, #3
 80061b8:	4343      	muls	r3, r0
 80061ba:	0fdd      	lsrs	r5, r3, #31
 80061bc:	18ed      	adds	r5, r5, r3
 80061be:	9b01      	ldr	r3, [sp, #4]
 80061c0:	9802      	ldr	r0, [sp, #8]
 80061c2:	3301      	adds	r3, #1
 80061c4:	181b      	adds	r3, r3, r0
 80061c6:	106d      	asrs	r5, r5, #1
 80061c8:	42ab      	cmp	r3, r5
 80061ca:	d900      	bls.n	80061ce <__ssputs_r+0x3e>
 80061cc:	001d      	movs	r5, r3
 80061ce:	0553      	lsls	r3, r2, #21
 80061d0:	d532      	bpl.n	8006238 <__ssputs_r+0xa8>
 80061d2:	0029      	movs	r1, r5
 80061d4:	0038      	movs	r0, r7
 80061d6:	f000 fb53 	bl	8006880 <_malloc_r>
 80061da:	1e06      	subs	r6, r0, #0
 80061dc:	d109      	bne.n	80061f2 <__ssputs_r+0x62>
 80061de:	230c      	movs	r3, #12
 80061e0:	603b      	str	r3, [r7, #0]
 80061e2:	2340      	movs	r3, #64	; 0x40
 80061e4:	2001      	movs	r0, #1
 80061e6:	89a2      	ldrh	r2, [r4, #12]
 80061e8:	4240      	negs	r0, r0
 80061ea:	4313      	orrs	r3, r2
 80061ec:	81a3      	strh	r3, [r4, #12]
 80061ee:	b005      	add	sp, #20
 80061f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061f2:	9a02      	ldr	r2, [sp, #8]
 80061f4:	6921      	ldr	r1, [r4, #16]
 80061f6:	f000 faba 	bl	800676e <memcpy>
 80061fa:	89a3      	ldrh	r3, [r4, #12]
 80061fc:	4a14      	ldr	r2, [pc, #80]	; (8006250 <__ssputs_r+0xc0>)
 80061fe:	401a      	ands	r2, r3
 8006200:	2380      	movs	r3, #128	; 0x80
 8006202:	4313      	orrs	r3, r2
 8006204:	81a3      	strh	r3, [r4, #12]
 8006206:	9b02      	ldr	r3, [sp, #8]
 8006208:	6126      	str	r6, [r4, #16]
 800620a:	18f6      	adds	r6, r6, r3
 800620c:	6026      	str	r6, [r4, #0]
 800620e:	6165      	str	r5, [r4, #20]
 8006210:	9e01      	ldr	r6, [sp, #4]
 8006212:	1aed      	subs	r5, r5, r3
 8006214:	60a5      	str	r5, [r4, #8]
 8006216:	9b01      	ldr	r3, [sp, #4]
 8006218:	429e      	cmp	r6, r3
 800621a:	d900      	bls.n	800621e <__ssputs_r+0x8e>
 800621c:	9e01      	ldr	r6, [sp, #4]
 800621e:	0032      	movs	r2, r6
 8006220:	9903      	ldr	r1, [sp, #12]
 8006222:	6820      	ldr	r0, [r4, #0]
 8006224:	f000 faac 	bl	8006780 <memmove>
 8006228:	68a3      	ldr	r3, [r4, #8]
 800622a:	2000      	movs	r0, #0
 800622c:	1b9b      	subs	r3, r3, r6
 800622e:	60a3      	str	r3, [r4, #8]
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	199e      	adds	r6, r3, r6
 8006234:	6026      	str	r6, [r4, #0]
 8006236:	e7da      	b.n	80061ee <__ssputs_r+0x5e>
 8006238:	002a      	movs	r2, r5
 800623a:	0038      	movs	r0, r7
 800623c:	f000 fb96 	bl	800696c <_realloc_r>
 8006240:	1e06      	subs	r6, r0, #0
 8006242:	d1e0      	bne.n	8006206 <__ssputs_r+0x76>
 8006244:	0038      	movs	r0, r7
 8006246:	6921      	ldr	r1, [r4, #16]
 8006248:	f000 faae 	bl	80067a8 <_free_r>
 800624c:	e7c7      	b.n	80061de <__ssputs_r+0x4e>
 800624e:	46c0      	nop			; (mov r8, r8)
 8006250:	fffffb7f 	.word	0xfffffb7f

08006254 <_svfiprintf_r>:
 8006254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006256:	b0a1      	sub	sp, #132	; 0x84
 8006258:	9003      	str	r0, [sp, #12]
 800625a:	001d      	movs	r5, r3
 800625c:	898b      	ldrh	r3, [r1, #12]
 800625e:	000f      	movs	r7, r1
 8006260:	0016      	movs	r6, r2
 8006262:	061b      	lsls	r3, r3, #24
 8006264:	d511      	bpl.n	800628a <_svfiprintf_r+0x36>
 8006266:	690b      	ldr	r3, [r1, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10e      	bne.n	800628a <_svfiprintf_r+0x36>
 800626c:	2140      	movs	r1, #64	; 0x40
 800626e:	f000 fb07 	bl	8006880 <_malloc_r>
 8006272:	6038      	str	r0, [r7, #0]
 8006274:	6138      	str	r0, [r7, #16]
 8006276:	2800      	cmp	r0, #0
 8006278:	d105      	bne.n	8006286 <_svfiprintf_r+0x32>
 800627a:	230c      	movs	r3, #12
 800627c:	9a03      	ldr	r2, [sp, #12]
 800627e:	3801      	subs	r0, #1
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	b021      	add	sp, #132	; 0x84
 8006284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006286:	2340      	movs	r3, #64	; 0x40
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	2300      	movs	r3, #0
 800628c:	ac08      	add	r4, sp, #32
 800628e:	6163      	str	r3, [r4, #20]
 8006290:	3320      	adds	r3, #32
 8006292:	7663      	strb	r3, [r4, #25]
 8006294:	3310      	adds	r3, #16
 8006296:	76a3      	strb	r3, [r4, #26]
 8006298:	9507      	str	r5, [sp, #28]
 800629a:	0035      	movs	r5, r6
 800629c:	782b      	ldrb	r3, [r5, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <_svfiprintf_r+0x52>
 80062a2:	2b25      	cmp	r3, #37	; 0x25
 80062a4:	d147      	bne.n	8006336 <_svfiprintf_r+0xe2>
 80062a6:	1bab      	subs	r3, r5, r6
 80062a8:	9305      	str	r3, [sp, #20]
 80062aa:	42b5      	cmp	r5, r6
 80062ac:	d00c      	beq.n	80062c8 <_svfiprintf_r+0x74>
 80062ae:	0032      	movs	r2, r6
 80062b0:	0039      	movs	r1, r7
 80062b2:	9803      	ldr	r0, [sp, #12]
 80062b4:	f7ff ff6c 	bl	8006190 <__ssputs_r>
 80062b8:	1c43      	adds	r3, r0, #1
 80062ba:	d100      	bne.n	80062be <_svfiprintf_r+0x6a>
 80062bc:	e0ae      	b.n	800641c <_svfiprintf_r+0x1c8>
 80062be:	6962      	ldr	r2, [r4, #20]
 80062c0:	9b05      	ldr	r3, [sp, #20]
 80062c2:	4694      	mov	ip, r2
 80062c4:	4463      	add	r3, ip
 80062c6:	6163      	str	r3, [r4, #20]
 80062c8:	782b      	ldrb	r3, [r5, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d100      	bne.n	80062d0 <_svfiprintf_r+0x7c>
 80062ce:	e0a5      	b.n	800641c <_svfiprintf_r+0x1c8>
 80062d0:	2201      	movs	r2, #1
 80062d2:	2300      	movs	r3, #0
 80062d4:	4252      	negs	r2, r2
 80062d6:	6062      	str	r2, [r4, #4]
 80062d8:	a904      	add	r1, sp, #16
 80062da:	3254      	adds	r2, #84	; 0x54
 80062dc:	1852      	adds	r2, r2, r1
 80062de:	1c6e      	adds	r6, r5, #1
 80062e0:	6023      	str	r3, [r4, #0]
 80062e2:	60e3      	str	r3, [r4, #12]
 80062e4:	60a3      	str	r3, [r4, #8]
 80062e6:	7013      	strb	r3, [r2, #0]
 80062e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80062ea:	2205      	movs	r2, #5
 80062ec:	7831      	ldrb	r1, [r6, #0]
 80062ee:	4854      	ldr	r0, [pc, #336]	; (8006440 <_svfiprintf_r+0x1ec>)
 80062f0:	f000 fa32 	bl	8006758 <memchr>
 80062f4:	1c75      	adds	r5, r6, #1
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d11f      	bne.n	800633a <_svfiprintf_r+0xe6>
 80062fa:	6822      	ldr	r2, [r4, #0]
 80062fc:	06d3      	lsls	r3, r2, #27
 80062fe:	d504      	bpl.n	800630a <_svfiprintf_r+0xb6>
 8006300:	2353      	movs	r3, #83	; 0x53
 8006302:	a904      	add	r1, sp, #16
 8006304:	185b      	adds	r3, r3, r1
 8006306:	2120      	movs	r1, #32
 8006308:	7019      	strb	r1, [r3, #0]
 800630a:	0713      	lsls	r3, r2, #28
 800630c:	d504      	bpl.n	8006318 <_svfiprintf_r+0xc4>
 800630e:	2353      	movs	r3, #83	; 0x53
 8006310:	a904      	add	r1, sp, #16
 8006312:	185b      	adds	r3, r3, r1
 8006314:	212b      	movs	r1, #43	; 0x2b
 8006316:	7019      	strb	r1, [r3, #0]
 8006318:	7833      	ldrb	r3, [r6, #0]
 800631a:	2b2a      	cmp	r3, #42	; 0x2a
 800631c:	d016      	beq.n	800634c <_svfiprintf_r+0xf8>
 800631e:	0035      	movs	r5, r6
 8006320:	2100      	movs	r1, #0
 8006322:	200a      	movs	r0, #10
 8006324:	68e3      	ldr	r3, [r4, #12]
 8006326:	782a      	ldrb	r2, [r5, #0]
 8006328:	1c6e      	adds	r6, r5, #1
 800632a:	3a30      	subs	r2, #48	; 0x30
 800632c:	2a09      	cmp	r2, #9
 800632e:	d94e      	bls.n	80063ce <_svfiprintf_r+0x17a>
 8006330:	2900      	cmp	r1, #0
 8006332:	d111      	bne.n	8006358 <_svfiprintf_r+0x104>
 8006334:	e017      	b.n	8006366 <_svfiprintf_r+0x112>
 8006336:	3501      	adds	r5, #1
 8006338:	e7b0      	b.n	800629c <_svfiprintf_r+0x48>
 800633a:	4b41      	ldr	r3, [pc, #260]	; (8006440 <_svfiprintf_r+0x1ec>)
 800633c:	6822      	ldr	r2, [r4, #0]
 800633e:	1ac0      	subs	r0, r0, r3
 8006340:	2301      	movs	r3, #1
 8006342:	4083      	lsls	r3, r0
 8006344:	4313      	orrs	r3, r2
 8006346:	002e      	movs	r6, r5
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	e7ce      	b.n	80062ea <_svfiprintf_r+0x96>
 800634c:	9b07      	ldr	r3, [sp, #28]
 800634e:	1d19      	adds	r1, r3, #4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	9107      	str	r1, [sp, #28]
 8006354:	2b00      	cmp	r3, #0
 8006356:	db01      	blt.n	800635c <_svfiprintf_r+0x108>
 8006358:	930b      	str	r3, [sp, #44]	; 0x2c
 800635a:	e004      	b.n	8006366 <_svfiprintf_r+0x112>
 800635c:	425b      	negs	r3, r3
 800635e:	60e3      	str	r3, [r4, #12]
 8006360:	2302      	movs	r3, #2
 8006362:	4313      	orrs	r3, r2
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	782b      	ldrb	r3, [r5, #0]
 8006368:	2b2e      	cmp	r3, #46	; 0x2e
 800636a:	d10a      	bne.n	8006382 <_svfiprintf_r+0x12e>
 800636c:	786b      	ldrb	r3, [r5, #1]
 800636e:	2b2a      	cmp	r3, #42	; 0x2a
 8006370:	d135      	bne.n	80063de <_svfiprintf_r+0x18a>
 8006372:	9b07      	ldr	r3, [sp, #28]
 8006374:	3502      	adds	r5, #2
 8006376:	1d1a      	adds	r2, r3, #4
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	9207      	str	r2, [sp, #28]
 800637c:	2b00      	cmp	r3, #0
 800637e:	db2b      	blt.n	80063d8 <_svfiprintf_r+0x184>
 8006380:	9309      	str	r3, [sp, #36]	; 0x24
 8006382:	4e30      	ldr	r6, [pc, #192]	; (8006444 <_svfiprintf_r+0x1f0>)
 8006384:	2203      	movs	r2, #3
 8006386:	0030      	movs	r0, r6
 8006388:	7829      	ldrb	r1, [r5, #0]
 800638a:	f000 f9e5 	bl	8006758 <memchr>
 800638e:	2800      	cmp	r0, #0
 8006390:	d006      	beq.n	80063a0 <_svfiprintf_r+0x14c>
 8006392:	2340      	movs	r3, #64	; 0x40
 8006394:	1b80      	subs	r0, r0, r6
 8006396:	4083      	lsls	r3, r0
 8006398:	6822      	ldr	r2, [r4, #0]
 800639a:	3501      	adds	r5, #1
 800639c:	4313      	orrs	r3, r2
 800639e:	6023      	str	r3, [r4, #0]
 80063a0:	7829      	ldrb	r1, [r5, #0]
 80063a2:	2206      	movs	r2, #6
 80063a4:	4828      	ldr	r0, [pc, #160]	; (8006448 <_svfiprintf_r+0x1f4>)
 80063a6:	1c6e      	adds	r6, r5, #1
 80063a8:	7621      	strb	r1, [r4, #24]
 80063aa:	f000 f9d5 	bl	8006758 <memchr>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	d03c      	beq.n	800642c <_svfiprintf_r+0x1d8>
 80063b2:	4b26      	ldr	r3, [pc, #152]	; (800644c <_svfiprintf_r+0x1f8>)
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d125      	bne.n	8006404 <_svfiprintf_r+0x1b0>
 80063b8:	2207      	movs	r2, #7
 80063ba:	9b07      	ldr	r3, [sp, #28]
 80063bc:	3307      	adds	r3, #7
 80063be:	4393      	bics	r3, r2
 80063c0:	3308      	adds	r3, #8
 80063c2:	9307      	str	r3, [sp, #28]
 80063c4:	6963      	ldr	r3, [r4, #20]
 80063c6:	9a04      	ldr	r2, [sp, #16]
 80063c8:	189b      	adds	r3, r3, r2
 80063ca:	6163      	str	r3, [r4, #20]
 80063cc:	e765      	b.n	800629a <_svfiprintf_r+0x46>
 80063ce:	4343      	muls	r3, r0
 80063d0:	0035      	movs	r5, r6
 80063d2:	2101      	movs	r1, #1
 80063d4:	189b      	adds	r3, r3, r2
 80063d6:	e7a6      	b.n	8006326 <_svfiprintf_r+0xd2>
 80063d8:	2301      	movs	r3, #1
 80063da:	425b      	negs	r3, r3
 80063dc:	e7d0      	b.n	8006380 <_svfiprintf_r+0x12c>
 80063de:	2300      	movs	r3, #0
 80063e0:	200a      	movs	r0, #10
 80063e2:	001a      	movs	r2, r3
 80063e4:	3501      	adds	r5, #1
 80063e6:	6063      	str	r3, [r4, #4]
 80063e8:	7829      	ldrb	r1, [r5, #0]
 80063ea:	1c6e      	adds	r6, r5, #1
 80063ec:	3930      	subs	r1, #48	; 0x30
 80063ee:	2909      	cmp	r1, #9
 80063f0:	d903      	bls.n	80063fa <_svfiprintf_r+0x1a6>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0c5      	beq.n	8006382 <_svfiprintf_r+0x12e>
 80063f6:	9209      	str	r2, [sp, #36]	; 0x24
 80063f8:	e7c3      	b.n	8006382 <_svfiprintf_r+0x12e>
 80063fa:	4342      	muls	r2, r0
 80063fc:	0035      	movs	r5, r6
 80063fe:	2301      	movs	r3, #1
 8006400:	1852      	adds	r2, r2, r1
 8006402:	e7f1      	b.n	80063e8 <_svfiprintf_r+0x194>
 8006404:	ab07      	add	r3, sp, #28
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	003a      	movs	r2, r7
 800640a:	0021      	movs	r1, r4
 800640c:	4b10      	ldr	r3, [pc, #64]	; (8006450 <_svfiprintf_r+0x1fc>)
 800640e:	9803      	ldr	r0, [sp, #12]
 8006410:	e000      	b.n	8006414 <_svfiprintf_r+0x1c0>
 8006412:	bf00      	nop
 8006414:	9004      	str	r0, [sp, #16]
 8006416:	9b04      	ldr	r3, [sp, #16]
 8006418:	3301      	adds	r3, #1
 800641a:	d1d3      	bne.n	80063c4 <_svfiprintf_r+0x170>
 800641c:	89bb      	ldrh	r3, [r7, #12]
 800641e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006420:	065b      	lsls	r3, r3, #25
 8006422:	d400      	bmi.n	8006426 <_svfiprintf_r+0x1d2>
 8006424:	e72d      	b.n	8006282 <_svfiprintf_r+0x2e>
 8006426:	2001      	movs	r0, #1
 8006428:	4240      	negs	r0, r0
 800642a:	e72a      	b.n	8006282 <_svfiprintf_r+0x2e>
 800642c:	ab07      	add	r3, sp, #28
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	003a      	movs	r2, r7
 8006432:	0021      	movs	r1, r4
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <_svfiprintf_r+0x1fc>)
 8006436:	9803      	ldr	r0, [sp, #12]
 8006438:	f000 f87c 	bl	8006534 <_printf_i>
 800643c:	e7ea      	b.n	8006414 <_svfiprintf_r+0x1c0>
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	08006a84 	.word	0x08006a84
 8006444:	08006a8a 	.word	0x08006a8a
 8006448:	08006a8e 	.word	0x08006a8e
 800644c:	00000000 	.word	0x00000000
 8006450:	08006191 	.word	0x08006191

08006454 <_printf_common>:
 8006454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006456:	0015      	movs	r5, r2
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	688a      	ldr	r2, [r1, #8]
 800645c:	690b      	ldr	r3, [r1, #16]
 800645e:	000c      	movs	r4, r1
 8006460:	9000      	str	r0, [sp, #0]
 8006462:	4293      	cmp	r3, r2
 8006464:	da00      	bge.n	8006468 <_printf_common+0x14>
 8006466:	0013      	movs	r3, r2
 8006468:	0022      	movs	r2, r4
 800646a:	602b      	str	r3, [r5, #0]
 800646c:	3243      	adds	r2, #67	; 0x43
 800646e:	7812      	ldrb	r2, [r2, #0]
 8006470:	2a00      	cmp	r2, #0
 8006472:	d001      	beq.n	8006478 <_printf_common+0x24>
 8006474:	3301      	adds	r3, #1
 8006476:	602b      	str	r3, [r5, #0]
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	069b      	lsls	r3, r3, #26
 800647c:	d502      	bpl.n	8006484 <_printf_common+0x30>
 800647e:	682b      	ldr	r3, [r5, #0]
 8006480:	3302      	adds	r3, #2
 8006482:	602b      	str	r3, [r5, #0]
 8006484:	6822      	ldr	r2, [r4, #0]
 8006486:	2306      	movs	r3, #6
 8006488:	0017      	movs	r7, r2
 800648a:	401f      	ands	r7, r3
 800648c:	421a      	tst	r2, r3
 800648e:	d027      	beq.n	80064e0 <_printf_common+0x8c>
 8006490:	0023      	movs	r3, r4
 8006492:	3343      	adds	r3, #67	; 0x43
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	1e5a      	subs	r2, r3, #1
 8006498:	4193      	sbcs	r3, r2
 800649a:	6822      	ldr	r2, [r4, #0]
 800649c:	0692      	lsls	r2, r2, #26
 800649e:	d430      	bmi.n	8006502 <_printf_common+0xae>
 80064a0:	0022      	movs	r2, r4
 80064a2:	9901      	ldr	r1, [sp, #4]
 80064a4:	9800      	ldr	r0, [sp, #0]
 80064a6:	9e08      	ldr	r6, [sp, #32]
 80064a8:	3243      	adds	r2, #67	; 0x43
 80064aa:	47b0      	blx	r6
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d025      	beq.n	80064fc <_printf_common+0xa8>
 80064b0:	2306      	movs	r3, #6
 80064b2:	6820      	ldr	r0, [r4, #0]
 80064b4:	682a      	ldr	r2, [r5, #0]
 80064b6:	68e1      	ldr	r1, [r4, #12]
 80064b8:	2500      	movs	r5, #0
 80064ba:	4003      	ands	r3, r0
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d103      	bne.n	80064c8 <_printf_common+0x74>
 80064c0:	1a8d      	subs	r5, r1, r2
 80064c2:	43eb      	mvns	r3, r5
 80064c4:	17db      	asrs	r3, r3, #31
 80064c6:	401d      	ands	r5, r3
 80064c8:	68a3      	ldr	r3, [r4, #8]
 80064ca:	6922      	ldr	r2, [r4, #16]
 80064cc:	4293      	cmp	r3, r2
 80064ce:	dd01      	ble.n	80064d4 <_printf_common+0x80>
 80064d0:	1a9b      	subs	r3, r3, r2
 80064d2:	18ed      	adds	r5, r5, r3
 80064d4:	2700      	movs	r7, #0
 80064d6:	42bd      	cmp	r5, r7
 80064d8:	d120      	bne.n	800651c <_printf_common+0xc8>
 80064da:	2000      	movs	r0, #0
 80064dc:	e010      	b.n	8006500 <_printf_common+0xac>
 80064de:	3701      	adds	r7, #1
 80064e0:	68e3      	ldr	r3, [r4, #12]
 80064e2:	682a      	ldr	r2, [r5, #0]
 80064e4:	1a9b      	subs	r3, r3, r2
 80064e6:	42bb      	cmp	r3, r7
 80064e8:	ddd2      	ble.n	8006490 <_printf_common+0x3c>
 80064ea:	0022      	movs	r2, r4
 80064ec:	2301      	movs	r3, #1
 80064ee:	9901      	ldr	r1, [sp, #4]
 80064f0:	9800      	ldr	r0, [sp, #0]
 80064f2:	9e08      	ldr	r6, [sp, #32]
 80064f4:	3219      	adds	r2, #25
 80064f6:	47b0      	blx	r6
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	d1f0      	bne.n	80064de <_printf_common+0x8a>
 80064fc:	2001      	movs	r0, #1
 80064fe:	4240      	negs	r0, r0
 8006500:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006502:	2030      	movs	r0, #48	; 0x30
 8006504:	18e1      	adds	r1, r4, r3
 8006506:	3143      	adds	r1, #67	; 0x43
 8006508:	7008      	strb	r0, [r1, #0]
 800650a:	0021      	movs	r1, r4
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	3145      	adds	r1, #69	; 0x45
 8006510:	7809      	ldrb	r1, [r1, #0]
 8006512:	18a2      	adds	r2, r4, r2
 8006514:	3243      	adds	r2, #67	; 0x43
 8006516:	3302      	adds	r3, #2
 8006518:	7011      	strb	r1, [r2, #0]
 800651a:	e7c1      	b.n	80064a0 <_printf_common+0x4c>
 800651c:	0022      	movs	r2, r4
 800651e:	2301      	movs	r3, #1
 8006520:	9901      	ldr	r1, [sp, #4]
 8006522:	9800      	ldr	r0, [sp, #0]
 8006524:	9e08      	ldr	r6, [sp, #32]
 8006526:	321a      	adds	r2, #26
 8006528:	47b0      	blx	r6
 800652a:	1c43      	adds	r3, r0, #1
 800652c:	d0e6      	beq.n	80064fc <_printf_common+0xa8>
 800652e:	3701      	adds	r7, #1
 8006530:	e7d1      	b.n	80064d6 <_printf_common+0x82>
	...

08006534 <_printf_i>:
 8006534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006536:	b08b      	sub	sp, #44	; 0x2c
 8006538:	9206      	str	r2, [sp, #24]
 800653a:	000a      	movs	r2, r1
 800653c:	3243      	adds	r2, #67	; 0x43
 800653e:	9307      	str	r3, [sp, #28]
 8006540:	9005      	str	r0, [sp, #20]
 8006542:	9204      	str	r2, [sp, #16]
 8006544:	7e0a      	ldrb	r2, [r1, #24]
 8006546:	000c      	movs	r4, r1
 8006548:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800654a:	2a78      	cmp	r2, #120	; 0x78
 800654c:	d807      	bhi.n	800655e <_printf_i+0x2a>
 800654e:	2a62      	cmp	r2, #98	; 0x62
 8006550:	d809      	bhi.n	8006566 <_printf_i+0x32>
 8006552:	2a00      	cmp	r2, #0
 8006554:	d100      	bne.n	8006558 <_printf_i+0x24>
 8006556:	e0c1      	b.n	80066dc <_printf_i+0x1a8>
 8006558:	2a58      	cmp	r2, #88	; 0x58
 800655a:	d100      	bne.n	800655e <_printf_i+0x2a>
 800655c:	e08c      	b.n	8006678 <_printf_i+0x144>
 800655e:	0026      	movs	r6, r4
 8006560:	3642      	adds	r6, #66	; 0x42
 8006562:	7032      	strb	r2, [r6, #0]
 8006564:	e022      	b.n	80065ac <_printf_i+0x78>
 8006566:	0010      	movs	r0, r2
 8006568:	3863      	subs	r0, #99	; 0x63
 800656a:	2815      	cmp	r0, #21
 800656c:	d8f7      	bhi.n	800655e <_printf_i+0x2a>
 800656e:	f7f9 fdd3 	bl	8000118 <__gnu_thumb1_case_shi>
 8006572:	0016      	.short	0x0016
 8006574:	fff6001f 	.word	0xfff6001f
 8006578:	fff6fff6 	.word	0xfff6fff6
 800657c:	001ffff6 	.word	0x001ffff6
 8006580:	fff6fff6 	.word	0xfff6fff6
 8006584:	fff6fff6 	.word	0xfff6fff6
 8006588:	003600a8 	.word	0x003600a8
 800658c:	fff6009a 	.word	0xfff6009a
 8006590:	00b9fff6 	.word	0x00b9fff6
 8006594:	0036fff6 	.word	0x0036fff6
 8006598:	fff6fff6 	.word	0xfff6fff6
 800659c:	009e      	.short	0x009e
 800659e:	0026      	movs	r6, r4
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	3642      	adds	r6, #66	; 0x42
 80065a4:	1d11      	adds	r1, r2, #4
 80065a6:	6019      	str	r1, [r3, #0]
 80065a8:	6813      	ldr	r3, [r2, #0]
 80065aa:	7033      	strb	r3, [r6, #0]
 80065ac:	2301      	movs	r3, #1
 80065ae:	e0a7      	b.n	8006700 <_printf_i+0x1cc>
 80065b0:	6808      	ldr	r0, [r1, #0]
 80065b2:	6819      	ldr	r1, [r3, #0]
 80065b4:	1d0a      	adds	r2, r1, #4
 80065b6:	0605      	lsls	r5, r0, #24
 80065b8:	d50b      	bpl.n	80065d2 <_printf_i+0x9e>
 80065ba:	680d      	ldr	r5, [r1, #0]
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	2d00      	cmp	r5, #0
 80065c0:	da03      	bge.n	80065ca <_printf_i+0x96>
 80065c2:	232d      	movs	r3, #45	; 0x2d
 80065c4:	9a04      	ldr	r2, [sp, #16]
 80065c6:	426d      	negs	r5, r5
 80065c8:	7013      	strb	r3, [r2, #0]
 80065ca:	4b61      	ldr	r3, [pc, #388]	; (8006750 <_printf_i+0x21c>)
 80065cc:	270a      	movs	r7, #10
 80065ce:	9303      	str	r3, [sp, #12]
 80065d0:	e01b      	b.n	800660a <_printf_i+0xd6>
 80065d2:	680d      	ldr	r5, [r1, #0]
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	0641      	lsls	r1, r0, #25
 80065d8:	d5f1      	bpl.n	80065be <_printf_i+0x8a>
 80065da:	b22d      	sxth	r5, r5
 80065dc:	e7ef      	b.n	80065be <_printf_i+0x8a>
 80065de:	680d      	ldr	r5, [r1, #0]
 80065e0:	6819      	ldr	r1, [r3, #0]
 80065e2:	1d08      	adds	r0, r1, #4
 80065e4:	6018      	str	r0, [r3, #0]
 80065e6:	062e      	lsls	r6, r5, #24
 80065e8:	d501      	bpl.n	80065ee <_printf_i+0xba>
 80065ea:	680d      	ldr	r5, [r1, #0]
 80065ec:	e003      	b.n	80065f6 <_printf_i+0xc2>
 80065ee:	066d      	lsls	r5, r5, #25
 80065f0:	d5fb      	bpl.n	80065ea <_printf_i+0xb6>
 80065f2:	680d      	ldr	r5, [r1, #0]
 80065f4:	b2ad      	uxth	r5, r5
 80065f6:	4b56      	ldr	r3, [pc, #344]	; (8006750 <_printf_i+0x21c>)
 80065f8:	2708      	movs	r7, #8
 80065fa:	9303      	str	r3, [sp, #12]
 80065fc:	2a6f      	cmp	r2, #111	; 0x6f
 80065fe:	d000      	beq.n	8006602 <_printf_i+0xce>
 8006600:	3702      	adds	r7, #2
 8006602:	0023      	movs	r3, r4
 8006604:	2200      	movs	r2, #0
 8006606:	3343      	adds	r3, #67	; 0x43
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	6863      	ldr	r3, [r4, #4]
 800660c:	60a3      	str	r3, [r4, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	db03      	blt.n	800661a <_printf_i+0xe6>
 8006612:	2204      	movs	r2, #4
 8006614:	6821      	ldr	r1, [r4, #0]
 8006616:	4391      	bics	r1, r2
 8006618:	6021      	str	r1, [r4, #0]
 800661a:	2d00      	cmp	r5, #0
 800661c:	d102      	bne.n	8006624 <_printf_i+0xf0>
 800661e:	9e04      	ldr	r6, [sp, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00c      	beq.n	800663e <_printf_i+0x10a>
 8006624:	9e04      	ldr	r6, [sp, #16]
 8006626:	0028      	movs	r0, r5
 8006628:	0039      	movs	r1, r7
 800662a:	f7f9 fe05 	bl	8000238 <__aeabi_uidivmod>
 800662e:	9b03      	ldr	r3, [sp, #12]
 8006630:	3e01      	subs	r6, #1
 8006632:	5c5b      	ldrb	r3, [r3, r1]
 8006634:	7033      	strb	r3, [r6, #0]
 8006636:	002b      	movs	r3, r5
 8006638:	0005      	movs	r5, r0
 800663a:	429f      	cmp	r7, r3
 800663c:	d9f3      	bls.n	8006626 <_printf_i+0xf2>
 800663e:	2f08      	cmp	r7, #8
 8006640:	d109      	bne.n	8006656 <_printf_i+0x122>
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	07db      	lsls	r3, r3, #31
 8006646:	d506      	bpl.n	8006656 <_printf_i+0x122>
 8006648:	6863      	ldr	r3, [r4, #4]
 800664a:	6922      	ldr	r2, [r4, #16]
 800664c:	4293      	cmp	r3, r2
 800664e:	dc02      	bgt.n	8006656 <_printf_i+0x122>
 8006650:	2330      	movs	r3, #48	; 0x30
 8006652:	3e01      	subs	r6, #1
 8006654:	7033      	strb	r3, [r6, #0]
 8006656:	9b04      	ldr	r3, [sp, #16]
 8006658:	1b9b      	subs	r3, r3, r6
 800665a:	6123      	str	r3, [r4, #16]
 800665c:	9b07      	ldr	r3, [sp, #28]
 800665e:	0021      	movs	r1, r4
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	9805      	ldr	r0, [sp, #20]
 8006664:	9b06      	ldr	r3, [sp, #24]
 8006666:	aa09      	add	r2, sp, #36	; 0x24
 8006668:	f7ff fef4 	bl	8006454 <_printf_common>
 800666c:	1c43      	adds	r3, r0, #1
 800666e:	d14c      	bne.n	800670a <_printf_i+0x1d6>
 8006670:	2001      	movs	r0, #1
 8006672:	4240      	negs	r0, r0
 8006674:	b00b      	add	sp, #44	; 0x2c
 8006676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006678:	3145      	adds	r1, #69	; 0x45
 800667a:	700a      	strb	r2, [r1, #0]
 800667c:	4a34      	ldr	r2, [pc, #208]	; (8006750 <_printf_i+0x21c>)
 800667e:	9203      	str	r2, [sp, #12]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	6821      	ldr	r1, [r4, #0]
 8006684:	ca20      	ldmia	r2!, {r5}
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	0608      	lsls	r0, r1, #24
 800668a:	d516      	bpl.n	80066ba <_printf_i+0x186>
 800668c:	07cb      	lsls	r3, r1, #31
 800668e:	d502      	bpl.n	8006696 <_printf_i+0x162>
 8006690:	2320      	movs	r3, #32
 8006692:	4319      	orrs	r1, r3
 8006694:	6021      	str	r1, [r4, #0]
 8006696:	2710      	movs	r7, #16
 8006698:	2d00      	cmp	r5, #0
 800669a:	d1b2      	bne.n	8006602 <_printf_i+0xce>
 800669c:	2320      	movs	r3, #32
 800669e:	6822      	ldr	r2, [r4, #0]
 80066a0:	439a      	bics	r2, r3
 80066a2:	6022      	str	r2, [r4, #0]
 80066a4:	e7ad      	b.n	8006602 <_printf_i+0xce>
 80066a6:	2220      	movs	r2, #32
 80066a8:	6809      	ldr	r1, [r1, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	6022      	str	r2, [r4, #0]
 80066ae:	0022      	movs	r2, r4
 80066b0:	2178      	movs	r1, #120	; 0x78
 80066b2:	3245      	adds	r2, #69	; 0x45
 80066b4:	7011      	strb	r1, [r2, #0]
 80066b6:	4a27      	ldr	r2, [pc, #156]	; (8006754 <_printf_i+0x220>)
 80066b8:	e7e1      	b.n	800667e <_printf_i+0x14a>
 80066ba:	0648      	lsls	r0, r1, #25
 80066bc:	d5e6      	bpl.n	800668c <_printf_i+0x158>
 80066be:	b2ad      	uxth	r5, r5
 80066c0:	e7e4      	b.n	800668c <_printf_i+0x158>
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	680d      	ldr	r5, [r1, #0]
 80066c6:	1d10      	adds	r0, r2, #4
 80066c8:	6949      	ldr	r1, [r1, #20]
 80066ca:	6018      	str	r0, [r3, #0]
 80066cc:	6813      	ldr	r3, [r2, #0]
 80066ce:	062e      	lsls	r6, r5, #24
 80066d0:	d501      	bpl.n	80066d6 <_printf_i+0x1a2>
 80066d2:	6019      	str	r1, [r3, #0]
 80066d4:	e002      	b.n	80066dc <_printf_i+0x1a8>
 80066d6:	066d      	lsls	r5, r5, #25
 80066d8:	d5fb      	bpl.n	80066d2 <_printf_i+0x19e>
 80066da:	8019      	strh	r1, [r3, #0]
 80066dc:	2300      	movs	r3, #0
 80066de:	9e04      	ldr	r6, [sp, #16]
 80066e0:	6123      	str	r3, [r4, #16]
 80066e2:	e7bb      	b.n	800665c <_printf_i+0x128>
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	1d11      	adds	r1, r2, #4
 80066e8:	6019      	str	r1, [r3, #0]
 80066ea:	6816      	ldr	r6, [r2, #0]
 80066ec:	2100      	movs	r1, #0
 80066ee:	0030      	movs	r0, r6
 80066f0:	6862      	ldr	r2, [r4, #4]
 80066f2:	f000 f831 	bl	8006758 <memchr>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d001      	beq.n	80066fe <_printf_i+0x1ca>
 80066fa:	1b80      	subs	r0, r0, r6
 80066fc:	6060      	str	r0, [r4, #4]
 80066fe:	6863      	ldr	r3, [r4, #4]
 8006700:	6123      	str	r3, [r4, #16]
 8006702:	2300      	movs	r3, #0
 8006704:	9a04      	ldr	r2, [sp, #16]
 8006706:	7013      	strb	r3, [r2, #0]
 8006708:	e7a8      	b.n	800665c <_printf_i+0x128>
 800670a:	6923      	ldr	r3, [r4, #16]
 800670c:	0032      	movs	r2, r6
 800670e:	9906      	ldr	r1, [sp, #24]
 8006710:	9805      	ldr	r0, [sp, #20]
 8006712:	9d07      	ldr	r5, [sp, #28]
 8006714:	47a8      	blx	r5
 8006716:	1c43      	adds	r3, r0, #1
 8006718:	d0aa      	beq.n	8006670 <_printf_i+0x13c>
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	079b      	lsls	r3, r3, #30
 800671e:	d415      	bmi.n	800674c <_printf_i+0x218>
 8006720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006722:	68e0      	ldr	r0, [r4, #12]
 8006724:	4298      	cmp	r0, r3
 8006726:	daa5      	bge.n	8006674 <_printf_i+0x140>
 8006728:	0018      	movs	r0, r3
 800672a:	e7a3      	b.n	8006674 <_printf_i+0x140>
 800672c:	0022      	movs	r2, r4
 800672e:	2301      	movs	r3, #1
 8006730:	9906      	ldr	r1, [sp, #24]
 8006732:	9805      	ldr	r0, [sp, #20]
 8006734:	9e07      	ldr	r6, [sp, #28]
 8006736:	3219      	adds	r2, #25
 8006738:	47b0      	blx	r6
 800673a:	1c43      	adds	r3, r0, #1
 800673c:	d098      	beq.n	8006670 <_printf_i+0x13c>
 800673e:	3501      	adds	r5, #1
 8006740:	68e3      	ldr	r3, [r4, #12]
 8006742:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	42ab      	cmp	r3, r5
 8006748:	dcf0      	bgt.n	800672c <_printf_i+0x1f8>
 800674a:	e7e9      	b.n	8006720 <_printf_i+0x1ec>
 800674c:	2500      	movs	r5, #0
 800674e:	e7f7      	b.n	8006740 <_printf_i+0x20c>
 8006750:	08006a95 	.word	0x08006a95
 8006754:	08006aa6 	.word	0x08006aa6

08006758 <memchr>:
 8006758:	b2c9      	uxtb	r1, r1
 800675a:	1882      	adds	r2, r0, r2
 800675c:	4290      	cmp	r0, r2
 800675e:	d101      	bne.n	8006764 <memchr+0xc>
 8006760:	2000      	movs	r0, #0
 8006762:	4770      	bx	lr
 8006764:	7803      	ldrb	r3, [r0, #0]
 8006766:	428b      	cmp	r3, r1
 8006768:	d0fb      	beq.n	8006762 <memchr+0xa>
 800676a:	3001      	adds	r0, #1
 800676c:	e7f6      	b.n	800675c <memchr+0x4>

0800676e <memcpy>:
 800676e:	2300      	movs	r3, #0
 8006770:	b510      	push	{r4, lr}
 8006772:	429a      	cmp	r2, r3
 8006774:	d100      	bne.n	8006778 <memcpy+0xa>
 8006776:	bd10      	pop	{r4, pc}
 8006778:	5ccc      	ldrb	r4, [r1, r3]
 800677a:	54c4      	strb	r4, [r0, r3]
 800677c:	3301      	adds	r3, #1
 800677e:	e7f8      	b.n	8006772 <memcpy+0x4>

08006780 <memmove>:
 8006780:	b510      	push	{r4, lr}
 8006782:	4288      	cmp	r0, r1
 8006784:	d902      	bls.n	800678c <memmove+0xc>
 8006786:	188b      	adds	r3, r1, r2
 8006788:	4298      	cmp	r0, r3
 800678a:	d303      	bcc.n	8006794 <memmove+0x14>
 800678c:	2300      	movs	r3, #0
 800678e:	e007      	b.n	80067a0 <memmove+0x20>
 8006790:	5c8b      	ldrb	r3, [r1, r2]
 8006792:	5483      	strb	r3, [r0, r2]
 8006794:	3a01      	subs	r2, #1
 8006796:	d2fb      	bcs.n	8006790 <memmove+0x10>
 8006798:	bd10      	pop	{r4, pc}
 800679a:	5ccc      	ldrb	r4, [r1, r3]
 800679c:	54c4      	strb	r4, [r0, r3]
 800679e:	3301      	adds	r3, #1
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d1fa      	bne.n	800679a <memmove+0x1a>
 80067a4:	e7f8      	b.n	8006798 <memmove+0x18>
	...

080067a8 <_free_r>:
 80067a8:	b570      	push	{r4, r5, r6, lr}
 80067aa:	0005      	movs	r5, r0
 80067ac:	2900      	cmp	r1, #0
 80067ae:	d010      	beq.n	80067d2 <_free_r+0x2a>
 80067b0:	1f0c      	subs	r4, r1, #4
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	da00      	bge.n	80067ba <_free_r+0x12>
 80067b8:	18e4      	adds	r4, r4, r3
 80067ba:	0028      	movs	r0, r5
 80067bc:	f000 f918 	bl	80069f0 <__malloc_lock>
 80067c0:	4a1d      	ldr	r2, [pc, #116]	; (8006838 <_free_r+0x90>)
 80067c2:	6813      	ldr	r3, [r2, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d105      	bne.n	80067d4 <_free_r+0x2c>
 80067c8:	6063      	str	r3, [r4, #4]
 80067ca:	6014      	str	r4, [r2, #0]
 80067cc:	0028      	movs	r0, r5
 80067ce:	f000 f917 	bl	8006a00 <__malloc_unlock>
 80067d2:	bd70      	pop	{r4, r5, r6, pc}
 80067d4:	42a3      	cmp	r3, r4
 80067d6:	d908      	bls.n	80067ea <_free_r+0x42>
 80067d8:	6821      	ldr	r1, [r4, #0]
 80067da:	1860      	adds	r0, r4, r1
 80067dc:	4283      	cmp	r3, r0
 80067de:	d1f3      	bne.n	80067c8 <_free_r+0x20>
 80067e0:	6818      	ldr	r0, [r3, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	1841      	adds	r1, r0, r1
 80067e6:	6021      	str	r1, [r4, #0]
 80067e8:	e7ee      	b.n	80067c8 <_free_r+0x20>
 80067ea:	001a      	movs	r2, r3
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <_free_r+0x4e>
 80067f2:	42a3      	cmp	r3, r4
 80067f4:	d9f9      	bls.n	80067ea <_free_r+0x42>
 80067f6:	6811      	ldr	r1, [r2, #0]
 80067f8:	1850      	adds	r0, r2, r1
 80067fa:	42a0      	cmp	r0, r4
 80067fc:	d10b      	bne.n	8006816 <_free_r+0x6e>
 80067fe:	6820      	ldr	r0, [r4, #0]
 8006800:	1809      	adds	r1, r1, r0
 8006802:	1850      	adds	r0, r2, r1
 8006804:	6011      	str	r1, [r2, #0]
 8006806:	4283      	cmp	r3, r0
 8006808:	d1e0      	bne.n	80067cc <_free_r+0x24>
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	1841      	adds	r1, r0, r1
 8006810:	6011      	str	r1, [r2, #0]
 8006812:	6053      	str	r3, [r2, #4]
 8006814:	e7da      	b.n	80067cc <_free_r+0x24>
 8006816:	42a0      	cmp	r0, r4
 8006818:	d902      	bls.n	8006820 <_free_r+0x78>
 800681a:	230c      	movs	r3, #12
 800681c:	602b      	str	r3, [r5, #0]
 800681e:	e7d5      	b.n	80067cc <_free_r+0x24>
 8006820:	6821      	ldr	r1, [r4, #0]
 8006822:	1860      	adds	r0, r4, r1
 8006824:	4283      	cmp	r3, r0
 8006826:	d103      	bne.n	8006830 <_free_r+0x88>
 8006828:	6818      	ldr	r0, [r3, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	1841      	adds	r1, r0, r1
 800682e:	6021      	str	r1, [r4, #0]
 8006830:	6063      	str	r3, [r4, #4]
 8006832:	6054      	str	r4, [r2, #4]
 8006834:	e7ca      	b.n	80067cc <_free_r+0x24>
 8006836:	46c0      	nop			; (mov r8, r8)
 8006838:	200002b0 	.word	0x200002b0

0800683c <sbrk_aligned>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	4e0f      	ldr	r6, [pc, #60]	; (800687c <sbrk_aligned+0x40>)
 8006840:	000d      	movs	r5, r1
 8006842:	6831      	ldr	r1, [r6, #0]
 8006844:	0004      	movs	r4, r0
 8006846:	2900      	cmp	r1, #0
 8006848:	d102      	bne.n	8006850 <sbrk_aligned+0x14>
 800684a:	f000 f8bf 	bl	80069cc <_sbrk_r>
 800684e:	6030      	str	r0, [r6, #0]
 8006850:	0029      	movs	r1, r5
 8006852:	0020      	movs	r0, r4
 8006854:	f000 f8ba 	bl	80069cc <_sbrk_r>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	d00a      	beq.n	8006872 <sbrk_aligned+0x36>
 800685c:	2303      	movs	r3, #3
 800685e:	1cc5      	adds	r5, r0, #3
 8006860:	439d      	bics	r5, r3
 8006862:	42a8      	cmp	r0, r5
 8006864:	d007      	beq.n	8006876 <sbrk_aligned+0x3a>
 8006866:	1a29      	subs	r1, r5, r0
 8006868:	0020      	movs	r0, r4
 800686a:	f000 f8af 	bl	80069cc <_sbrk_r>
 800686e:	1c43      	adds	r3, r0, #1
 8006870:	d101      	bne.n	8006876 <sbrk_aligned+0x3a>
 8006872:	2501      	movs	r5, #1
 8006874:	426d      	negs	r5, r5
 8006876:	0028      	movs	r0, r5
 8006878:	bd70      	pop	{r4, r5, r6, pc}
 800687a:	46c0      	nop			; (mov r8, r8)
 800687c:	200002b4 	.word	0x200002b4

08006880 <_malloc_r>:
 8006880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006882:	2203      	movs	r2, #3
 8006884:	1ccb      	adds	r3, r1, #3
 8006886:	4393      	bics	r3, r2
 8006888:	3308      	adds	r3, #8
 800688a:	0006      	movs	r6, r0
 800688c:	001f      	movs	r7, r3
 800688e:	2b0c      	cmp	r3, #12
 8006890:	d232      	bcs.n	80068f8 <_malloc_r+0x78>
 8006892:	270c      	movs	r7, #12
 8006894:	42b9      	cmp	r1, r7
 8006896:	d831      	bhi.n	80068fc <_malloc_r+0x7c>
 8006898:	0030      	movs	r0, r6
 800689a:	f000 f8a9 	bl	80069f0 <__malloc_lock>
 800689e:	4d32      	ldr	r5, [pc, #200]	; (8006968 <_malloc_r+0xe8>)
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	001c      	movs	r4, r3
 80068a4:	2c00      	cmp	r4, #0
 80068a6:	d12e      	bne.n	8006906 <_malloc_r+0x86>
 80068a8:	0039      	movs	r1, r7
 80068aa:	0030      	movs	r0, r6
 80068ac:	f7ff ffc6 	bl	800683c <sbrk_aligned>
 80068b0:	0004      	movs	r4, r0
 80068b2:	1c43      	adds	r3, r0, #1
 80068b4:	d11e      	bne.n	80068f4 <_malloc_r+0x74>
 80068b6:	682c      	ldr	r4, [r5, #0]
 80068b8:	0025      	movs	r5, r4
 80068ba:	2d00      	cmp	r5, #0
 80068bc:	d14a      	bne.n	8006954 <_malloc_r+0xd4>
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	0029      	movs	r1, r5
 80068c2:	18e3      	adds	r3, r4, r3
 80068c4:	0030      	movs	r0, r6
 80068c6:	9301      	str	r3, [sp, #4]
 80068c8:	f000 f880 	bl	80069cc <_sbrk_r>
 80068cc:	9b01      	ldr	r3, [sp, #4]
 80068ce:	4283      	cmp	r3, r0
 80068d0:	d143      	bne.n	800695a <_malloc_r+0xda>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	3703      	adds	r7, #3
 80068d6:	1aff      	subs	r7, r7, r3
 80068d8:	2303      	movs	r3, #3
 80068da:	439f      	bics	r7, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	2f0c      	cmp	r7, #12
 80068e0:	d200      	bcs.n	80068e4 <_malloc_r+0x64>
 80068e2:	270c      	movs	r7, #12
 80068e4:	0039      	movs	r1, r7
 80068e6:	0030      	movs	r0, r6
 80068e8:	f7ff ffa8 	bl	800683c <sbrk_aligned>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d034      	beq.n	800695a <_malloc_r+0xda>
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	19df      	adds	r7, r3, r7
 80068f4:	6027      	str	r7, [r4, #0]
 80068f6:	e013      	b.n	8006920 <_malloc_r+0xa0>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	dacb      	bge.n	8006894 <_malloc_r+0x14>
 80068fc:	230c      	movs	r3, #12
 80068fe:	2500      	movs	r5, #0
 8006900:	6033      	str	r3, [r6, #0]
 8006902:	0028      	movs	r0, r5
 8006904:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006906:	6822      	ldr	r2, [r4, #0]
 8006908:	1bd1      	subs	r1, r2, r7
 800690a:	d420      	bmi.n	800694e <_malloc_r+0xce>
 800690c:	290b      	cmp	r1, #11
 800690e:	d917      	bls.n	8006940 <_malloc_r+0xc0>
 8006910:	19e2      	adds	r2, r4, r7
 8006912:	6027      	str	r7, [r4, #0]
 8006914:	42a3      	cmp	r3, r4
 8006916:	d111      	bne.n	800693c <_malloc_r+0xbc>
 8006918:	602a      	str	r2, [r5, #0]
 800691a:	6863      	ldr	r3, [r4, #4]
 800691c:	6011      	str	r1, [r2, #0]
 800691e:	6053      	str	r3, [r2, #4]
 8006920:	0030      	movs	r0, r6
 8006922:	0025      	movs	r5, r4
 8006924:	f000 f86c 	bl	8006a00 <__malloc_unlock>
 8006928:	2207      	movs	r2, #7
 800692a:	350b      	adds	r5, #11
 800692c:	1d23      	adds	r3, r4, #4
 800692e:	4395      	bics	r5, r2
 8006930:	1aea      	subs	r2, r5, r3
 8006932:	429d      	cmp	r5, r3
 8006934:	d0e5      	beq.n	8006902 <_malloc_r+0x82>
 8006936:	1b5b      	subs	r3, r3, r5
 8006938:	50a3      	str	r3, [r4, r2]
 800693a:	e7e2      	b.n	8006902 <_malloc_r+0x82>
 800693c:	605a      	str	r2, [r3, #4]
 800693e:	e7ec      	b.n	800691a <_malloc_r+0x9a>
 8006940:	6862      	ldr	r2, [r4, #4]
 8006942:	42a3      	cmp	r3, r4
 8006944:	d101      	bne.n	800694a <_malloc_r+0xca>
 8006946:	602a      	str	r2, [r5, #0]
 8006948:	e7ea      	b.n	8006920 <_malloc_r+0xa0>
 800694a:	605a      	str	r2, [r3, #4]
 800694c:	e7e8      	b.n	8006920 <_malloc_r+0xa0>
 800694e:	0023      	movs	r3, r4
 8006950:	6864      	ldr	r4, [r4, #4]
 8006952:	e7a7      	b.n	80068a4 <_malloc_r+0x24>
 8006954:	002c      	movs	r4, r5
 8006956:	686d      	ldr	r5, [r5, #4]
 8006958:	e7af      	b.n	80068ba <_malloc_r+0x3a>
 800695a:	230c      	movs	r3, #12
 800695c:	0030      	movs	r0, r6
 800695e:	6033      	str	r3, [r6, #0]
 8006960:	f000 f84e 	bl	8006a00 <__malloc_unlock>
 8006964:	e7cd      	b.n	8006902 <_malloc_r+0x82>
 8006966:	46c0      	nop			; (mov r8, r8)
 8006968:	200002b0 	.word	0x200002b0

0800696c <_realloc_r>:
 800696c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800696e:	0007      	movs	r7, r0
 8006970:	000e      	movs	r6, r1
 8006972:	0014      	movs	r4, r2
 8006974:	2900      	cmp	r1, #0
 8006976:	d105      	bne.n	8006984 <_realloc_r+0x18>
 8006978:	0011      	movs	r1, r2
 800697a:	f7ff ff81 	bl	8006880 <_malloc_r>
 800697e:	0005      	movs	r5, r0
 8006980:	0028      	movs	r0, r5
 8006982:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006984:	2a00      	cmp	r2, #0
 8006986:	d103      	bne.n	8006990 <_realloc_r+0x24>
 8006988:	f7ff ff0e 	bl	80067a8 <_free_r>
 800698c:	0025      	movs	r5, r4
 800698e:	e7f7      	b.n	8006980 <_realloc_r+0x14>
 8006990:	f000 f83e 	bl	8006a10 <_malloc_usable_size_r>
 8006994:	9001      	str	r0, [sp, #4]
 8006996:	4284      	cmp	r4, r0
 8006998:	d803      	bhi.n	80069a2 <_realloc_r+0x36>
 800699a:	0035      	movs	r5, r6
 800699c:	0843      	lsrs	r3, r0, #1
 800699e:	42a3      	cmp	r3, r4
 80069a0:	d3ee      	bcc.n	8006980 <_realloc_r+0x14>
 80069a2:	0021      	movs	r1, r4
 80069a4:	0038      	movs	r0, r7
 80069a6:	f7ff ff6b 	bl	8006880 <_malloc_r>
 80069aa:	1e05      	subs	r5, r0, #0
 80069ac:	d0e8      	beq.n	8006980 <_realloc_r+0x14>
 80069ae:	9b01      	ldr	r3, [sp, #4]
 80069b0:	0022      	movs	r2, r4
 80069b2:	429c      	cmp	r4, r3
 80069b4:	d900      	bls.n	80069b8 <_realloc_r+0x4c>
 80069b6:	001a      	movs	r2, r3
 80069b8:	0031      	movs	r1, r6
 80069ba:	0028      	movs	r0, r5
 80069bc:	f7ff fed7 	bl	800676e <memcpy>
 80069c0:	0031      	movs	r1, r6
 80069c2:	0038      	movs	r0, r7
 80069c4:	f7ff fef0 	bl	80067a8 <_free_r>
 80069c8:	e7da      	b.n	8006980 <_realloc_r+0x14>
	...

080069cc <_sbrk_r>:
 80069cc:	2300      	movs	r3, #0
 80069ce:	b570      	push	{r4, r5, r6, lr}
 80069d0:	4d06      	ldr	r5, [pc, #24]	; (80069ec <_sbrk_r+0x20>)
 80069d2:	0004      	movs	r4, r0
 80069d4:	0008      	movs	r0, r1
 80069d6:	602b      	str	r3, [r5, #0]
 80069d8:	f7fa fc76 	bl	80012c8 <_sbrk>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d103      	bne.n	80069e8 <_sbrk_r+0x1c>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d000      	beq.n	80069e8 <_sbrk_r+0x1c>
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	bd70      	pop	{r4, r5, r6, pc}
 80069ea:	46c0      	nop			; (mov r8, r8)
 80069ec:	200002b8 	.word	0x200002b8

080069f0 <__malloc_lock>:
 80069f0:	b510      	push	{r4, lr}
 80069f2:	4802      	ldr	r0, [pc, #8]	; (80069fc <__malloc_lock+0xc>)
 80069f4:	f000 f814 	bl	8006a20 <__retarget_lock_acquire_recursive>
 80069f8:	bd10      	pop	{r4, pc}
 80069fa:	46c0      	nop			; (mov r8, r8)
 80069fc:	200002bc 	.word	0x200002bc

08006a00 <__malloc_unlock>:
 8006a00:	b510      	push	{r4, lr}
 8006a02:	4802      	ldr	r0, [pc, #8]	; (8006a0c <__malloc_unlock+0xc>)
 8006a04:	f000 f80d 	bl	8006a22 <__retarget_lock_release_recursive>
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	200002bc 	.word	0x200002bc

08006a10 <_malloc_usable_size_r>:
 8006a10:	1f0b      	subs	r3, r1, #4
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	1f18      	subs	r0, r3, #4
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	da01      	bge.n	8006a1e <_malloc_usable_size_r+0xe>
 8006a1a:	580b      	ldr	r3, [r1, r0]
 8006a1c:	18c0      	adds	r0, r0, r3
 8006a1e:	4770      	bx	lr

08006a20 <__retarget_lock_acquire_recursive>:
 8006a20:	4770      	bx	lr

08006a22 <__retarget_lock_release_recursive>:
 8006a22:	4770      	bx	lr

08006a24 <_init>:
 8006a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a26:	46c0      	nop			; (mov r8, r8)
 8006a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2a:	bc08      	pop	{r3}
 8006a2c:	469e      	mov	lr, r3
 8006a2e:	4770      	bx	lr

08006a30 <_fini>:
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	46c0      	nop			; (mov r8, r8)
 8006a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a36:	bc08      	pop	{r3}
 8006a38:	469e      	mov	lr, r3
 8006a3a:	4770      	bx	lr
