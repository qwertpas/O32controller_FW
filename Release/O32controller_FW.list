
O32controller_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006124  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  080061e4  080061e4  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006430  08006430  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08006430  08006430  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006430  08006430  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006430  08006430  00016430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006434  08006434  00016434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  2000006c  080064a4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  080064a4  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004f81  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011b9  00000000  00000000  00025058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  00026211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000144c  00000000  00000000  00027231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe5f  00000000  00000000  0002867d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000032b3  00000000  00000000  000384dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00003b6c  00000000  00000000  0003b790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080061cc 	.word	0x080061cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	080061cc 	.word	0x080061cc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_dadd>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	464f      	mov	r7, r9
 8000224:	4646      	mov	r6, r8
 8000226:	46d6      	mov	lr, sl
 8000228:	0004      	movs	r4, r0
 800022a:	b5c0      	push	{r6, r7, lr}
 800022c:	001f      	movs	r7, r3
 800022e:	030b      	lsls	r3, r1, #12
 8000230:	0010      	movs	r0, r2
 8000232:	004e      	lsls	r6, r1, #1
 8000234:	0a5b      	lsrs	r3, r3, #9
 8000236:	0fcd      	lsrs	r5, r1, #31
 8000238:	0f61      	lsrs	r1, r4, #29
 800023a:	007a      	lsls	r2, r7, #1
 800023c:	4319      	orrs	r1, r3
 800023e:	00e3      	lsls	r3, r4, #3
 8000240:	033c      	lsls	r4, r7, #12
 8000242:	0fff      	lsrs	r7, r7, #31
 8000244:	46bc      	mov	ip, r7
 8000246:	0a64      	lsrs	r4, r4, #9
 8000248:	0f47      	lsrs	r7, r0, #29
 800024a:	4327      	orrs	r7, r4
 800024c:	0d76      	lsrs	r6, r6, #21
 800024e:	0d52      	lsrs	r2, r2, #21
 8000250:	00c0      	lsls	r0, r0, #3
 8000252:	46b9      	mov	r9, r7
 8000254:	4680      	mov	r8, r0
 8000256:	1ab7      	subs	r7, r6, r2
 8000258:	4565      	cmp	r5, ip
 800025a:	d100      	bne.n	800025e <__aeabi_dadd+0x3e>
 800025c:	e09b      	b.n	8000396 <__aeabi_dadd+0x176>
 800025e:	2f00      	cmp	r7, #0
 8000260:	dc00      	bgt.n	8000264 <__aeabi_dadd+0x44>
 8000262:	e084      	b.n	800036e <__aeabi_dadd+0x14e>
 8000264:	2a00      	cmp	r2, #0
 8000266:	d100      	bne.n	800026a <__aeabi_dadd+0x4a>
 8000268:	e0be      	b.n	80003e8 <__aeabi_dadd+0x1c8>
 800026a:	4ac8      	ldr	r2, [pc, #800]	; (800058c <__aeabi_dadd+0x36c>)
 800026c:	4296      	cmp	r6, r2
 800026e:	d100      	bne.n	8000272 <__aeabi_dadd+0x52>
 8000270:	e124      	b.n	80004bc <__aeabi_dadd+0x29c>
 8000272:	2280      	movs	r2, #128	; 0x80
 8000274:	464c      	mov	r4, r9
 8000276:	0412      	lsls	r2, r2, #16
 8000278:	4314      	orrs	r4, r2
 800027a:	46a1      	mov	r9, r4
 800027c:	2f38      	cmp	r7, #56	; 0x38
 800027e:	dd00      	ble.n	8000282 <__aeabi_dadd+0x62>
 8000280:	e167      	b.n	8000552 <__aeabi_dadd+0x332>
 8000282:	2f1f      	cmp	r7, #31
 8000284:	dd00      	ble.n	8000288 <__aeabi_dadd+0x68>
 8000286:	e1d6      	b.n	8000636 <__aeabi_dadd+0x416>
 8000288:	2220      	movs	r2, #32
 800028a:	464c      	mov	r4, r9
 800028c:	1bd2      	subs	r2, r2, r7
 800028e:	4094      	lsls	r4, r2
 8000290:	46a2      	mov	sl, r4
 8000292:	4644      	mov	r4, r8
 8000294:	40fc      	lsrs	r4, r7
 8000296:	0020      	movs	r0, r4
 8000298:	4654      	mov	r4, sl
 800029a:	4304      	orrs	r4, r0
 800029c:	4640      	mov	r0, r8
 800029e:	4090      	lsls	r0, r2
 80002a0:	1e42      	subs	r2, r0, #1
 80002a2:	4190      	sbcs	r0, r2
 80002a4:	464a      	mov	r2, r9
 80002a6:	40fa      	lsrs	r2, r7
 80002a8:	4304      	orrs	r4, r0
 80002aa:	1a89      	subs	r1, r1, r2
 80002ac:	1b1c      	subs	r4, r3, r4
 80002ae:	42a3      	cmp	r3, r4
 80002b0:	4192      	sbcs	r2, r2
 80002b2:	4252      	negs	r2, r2
 80002b4:	1a8b      	subs	r3, r1, r2
 80002b6:	469a      	mov	sl, r3
 80002b8:	4653      	mov	r3, sl
 80002ba:	021b      	lsls	r3, r3, #8
 80002bc:	d400      	bmi.n	80002c0 <__aeabi_dadd+0xa0>
 80002be:	e0d4      	b.n	800046a <__aeabi_dadd+0x24a>
 80002c0:	4653      	mov	r3, sl
 80002c2:	025a      	lsls	r2, r3, #9
 80002c4:	0a53      	lsrs	r3, r2, #9
 80002c6:	469a      	mov	sl, r3
 80002c8:	4653      	mov	r3, sl
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d100      	bne.n	80002d0 <__aeabi_dadd+0xb0>
 80002ce:	e104      	b.n	80004da <__aeabi_dadd+0x2ba>
 80002d0:	4650      	mov	r0, sl
 80002d2:	f000 fb6b 	bl	80009ac <__clzsi2>
 80002d6:	0003      	movs	r3, r0
 80002d8:	3b08      	subs	r3, #8
 80002da:	2220      	movs	r2, #32
 80002dc:	0020      	movs	r0, r4
 80002de:	1ad2      	subs	r2, r2, r3
 80002e0:	4651      	mov	r1, sl
 80002e2:	40d0      	lsrs	r0, r2
 80002e4:	4099      	lsls	r1, r3
 80002e6:	0002      	movs	r2, r0
 80002e8:	409c      	lsls	r4, r3
 80002ea:	430a      	orrs	r2, r1
 80002ec:	42b3      	cmp	r3, r6
 80002ee:	da00      	bge.n	80002f2 <__aeabi_dadd+0xd2>
 80002f0:	e102      	b.n	80004f8 <__aeabi_dadd+0x2d8>
 80002f2:	1b9b      	subs	r3, r3, r6
 80002f4:	1c59      	adds	r1, r3, #1
 80002f6:	291f      	cmp	r1, #31
 80002f8:	dd00      	ble.n	80002fc <__aeabi_dadd+0xdc>
 80002fa:	e0a7      	b.n	800044c <__aeabi_dadd+0x22c>
 80002fc:	2320      	movs	r3, #32
 80002fe:	0010      	movs	r0, r2
 8000300:	0026      	movs	r6, r4
 8000302:	1a5b      	subs	r3, r3, r1
 8000304:	409c      	lsls	r4, r3
 8000306:	4098      	lsls	r0, r3
 8000308:	40ce      	lsrs	r6, r1
 800030a:	40ca      	lsrs	r2, r1
 800030c:	1e63      	subs	r3, r4, #1
 800030e:	419c      	sbcs	r4, r3
 8000310:	4330      	orrs	r0, r6
 8000312:	4692      	mov	sl, r2
 8000314:	2600      	movs	r6, #0
 8000316:	4304      	orrs	r4, r0
 8000318:	0763      	lsls	r3, r4, #29
 800031a:	d009      	beq.n	8000330 <__aeabi_dadd+0x110>
 800031c:	230f      	movs	r3, #15
 800031e:	4023      	ands	r3, r4
 8000320:	2b04      	cmp	r3, #4
 8000322:	d005      	beq.n	8000330 <__aeabi_dadd+0x110>
 8000324:	1d23      	adds	r3, r4, #4
 8000326:	42a3      	cmp	r3, r4
 8000328:	41a4      	sbcs	r4, r4
 800032a:	4264      	negs	r4, r4
 800032c:	44a2      	add	sl, r4
 800032e:	001c      	movs	r4, r3
 8000330:	4653      	mov	r3, sl
 8000332:	021b      	lsls	r3, r3, #8
 8000334:	d400      	bmi.n	8000338 <__aeabi_dadd+0x118>
 8000336:	e09b      	b.n	8000470 <__aeabi_dadd+0x250>
 8000338:	4b94      	ldr	r3, [pc, #592]	; (800058c <__aeabi_dadd+0x36c>)
 800033a:	3601      	adds	r6, #1
 800033c:	429e      	cmp	r6, r3
 800033e:	d100      	bne.n	8000342 <__aeabi_dadd+0x122>
 8000340:	e0b8      	b.n	80004b4 <__aeabi_dadd+0x294>
 8000342:	4653      	mov	r3, sl
 8000344:	4992      	ldr	r1, [pc, #584]	; (8000590 <__aeabi_dadd+0x370>)
 8000346:	08e4      	lsrs	r4, r4, #3
 8000348:	400b      	ands	r3, r1
 800034a:	0019      	movs	r1, r3
 800034c:	075b      	lsls	r3, r3, #29
 800034e:	4323      	orrs	r3, r4
 8000350:	0572      	lsls	r2, r6, #21
 8000352:	024c      	lsls	r4, r1, #9
 8000354:	0b24      	lsrs	r4, r4, #12
 8000356:	0d52      	lsrs	r2, r2, #21
 8000358:	0512      	lsls	r2, r2, #20
 800035a:	07ed      	lsls	r5, r5, #31
 800035c:	4322      	orrs	r2, r4
 800035e:	432a      	orrs	r2, r5
 8000360:	0018      	movs	r0, r3
 8000362:	0011      	movs	r1, r2
 8000364:	bce0      	pop	{r5, r6, r7}
 8000366:	46ba      	mov	sl, r7
 8000368:	46b1      	mov	r9, r6
 800036a:	46a8      	mov	r8, r5
 800036c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036e:	2f00      	cmp	r7, #0
 8000370:	d048      	beq.n	8000404 <__aeabi_dadd+0x1e4>
 8000372:	1b97      	subs	r7, r2, r6
 8000374:	2e00      	cmp	r6, #0
 8000376:	d000      	beq.n	800037a <__aeabi_dadd+0x15a>
 8000378:	e10e      	b.n	8000598 <__aeabi_dadd+0x378>
 800037a:	000c      	movs	r4, r1
 800037c:	431c      	orrs	r4, r3
 800037e:	d100      	bne.n	8000382 <__aeabi_dadd+0x162>
 8000380:	e1b7      	b.n	80006f2 <__aeabi_dadd+0x4d2>
 8000382:	1e7c      	subs	r4, r7, #1
 8000384:	2f01      	cmp	r7, #1
 8000386:	d100      	bne.n	800038a <__aeabi_dadd+0x16a>
 8000388:	e226      	b.n	80007d8 <__aeabi_dadd+0x5b8>
 800038a:	4d80      	ldr	r5, [pc, #512]	; (800058c <__aeabi_dadd+0x36c>)
 800038c:	42af      	cmp	r7, r5
 800038e:	d100      	bne.n	8000392 <__aeabi_dadd+0x172>
 8000390:	e1d5      	b.n	800073e <__aeabi_dadd+0x51e>
 8000392:	0027      	movs	r7, r4
 8000394:	e107      	b.n	80005a6 <__aeabi_dadd+0x386>
 8000396:	2f00      	cmp	r7, #0
 8000398:	dc00      	bgt.n	800039c <__aeabi_dadd+0x17c>
 800039a:	e0b2      	b.n	8000502 <__aeabi_dadd+0x2e2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	d047      	beq.n	8000430 <__aeabi_dadd+0x210>
 80003a0:	4a7a      	ldr	r2, [pc, #488]	; (800058c <__aeabi_dadd+0x36c>)
 80003a2:	4296      	cmp	r6, r2
 80003a4:	d100      	bne.n	80003a8 <__aeabi_dadd+0x188>
 80003a6:	e089      	b.n	80004bc <__aeabi_dadd+0x29c>
 80003a8:	2280      	movs	r2, #128	; 0x80
 80003aa:	464c      	mov	r4, r9
 80003ac:	0412      	lsls	r2, r2, #16
 80003ae:	4314      	orrs	r4, r2
 80003b0:	46a1      	mov	r9, r4
 80003b2:	2f38      	cmp	r7, #56	; 0x38
 80003b4:	dc6b      	bgt.n	800048e <__aeabi_dadd+0x26e>
 80003b6:	2f1f      	cmp	r7, #31
 80003b8:	dc00      	bgt.n	80003bc <__aeabi_dadd+0x19c>
 80003ba:	e16e      	b.n	800069a <__aeabi_dadd+0x47a>
 80003bc:	003a      	movs	r2, r7
 80003be:	4648      	mov	r0, r9
 80003c0:	3a20      	subs	r2, #32
 80003c2:	40d0      	lsrs	r0, r2
 80003c4:	4684      	mov	ip, r0
 80003c6:	2f20      	cmp	r7, #32
 80003c8:	d007      	beq.n	80003da <__aeabi_dadd+0x1ba>
 80003ca:	2240      	movs	r2, #64	; 0x40
 80003cc:	4648      	mov	r0, r9
 80003ce:	1bd2      	subs	r2, r2, r7
 80003d0:	4090      	lsls	r0, r2
 80003d2:	0002      	movs	r2, r0
 80003d4:	4640      	mov	r0, r8
 80003d6:	4310      	orrs	r0, r2
 80003d8:	4680      	mov	r8, r0
 80003da:	4640      	mov	r0, r8
 80003dc:	1e42      	subs	r2, r0, #1
 80003de:	4190      	sbcs	r0, r2
 80003e0:	4662      	mov	r2, ip
 80003e2:	0004      	movs	r4, r0
 80003e4:	4314      	orrs	r4, r2
 80003e6:	e057      	b.n	8000498 <__aeabi_dadd+0x278>
 80003e8:	464a      	mov	r2, r9
 80003ea:	4302      	orrs	r2, r0
 80003ec:	d100      	bne.n	80003f0 <__aeabi_dadd+0x1d0>
 80003ee:	e103      	b.n	80005f8 <__aeabi_dadd+0x3d8>
 80003f0:	1e7a      	subs	r2, r7, #1
 80003f2:	2f01      	cmp	r7, #1
 80003f4:	d100      	bne.n	80003f8 <__aeabi_dadd+0x1d8>
 80003f6:	e193      	b.n	8000720 <__aeabi_dadd+0x500>
 80003f8:	4c64      	ldr	r4, [pc, #400]	; (800058c <__aeabi_dadd+0x36c>)
 80003fa:	42a7      	cmp	r7, r4
 80003fc:	d100      	bne.n	8000400 <__aeabi_dadd+0x1e0>
 80003fe:	e18a      	b.n	8000716 <__aeabi_dadd+0x4f6>
 8000400:	0017      	movs	r7, r2
 8000402:	e73b      	b.n	800027c <__aeabi_dadd+0x5c>
 8000404:	4c63      	ldr	r4, [pc, #396]	; (8000594 <__aeabi_dadd+0x374>)
 8000406:	1c72      	adds	r2, r6, #1
 8000408:	4222      	tst	r2, r4
 800040a:	d000      	beq.n	800040e <__aeabi_dadd+0x1ee>
 800040c:	e0e0      	b.n	80005d0 <__aeabi_dadd+0x3b0>
 800040e:	000a      	movs	r2, r1
 8000410:	431a      	orrs	r2, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d000      	beq.n	8000418 <__aeabi_dadd+0x1f8>
 8000416:	e174      	b.n	8000702 <__aeabi_dadd+0x4e2>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d100      	bne.n	800041e <__aeabi_dadd+0x1fe>
 800041c:	e1d0      	b.n	80007c0 <__aeabi_dadd+0x5a0>
 800041e:	464a      	mov	r2, r9
 8000420:	4302      	orrs	r2, r0
 8000422:	d000      	beq.n	8000426 <__aeabi_dadd+0x206>
 8000424:	e1e3      	b.n	80007ee <__aeabi_dadd+0x5ce>
 8000426:	074a      	lsls	r2, r1, #29
 8000428:	08db      	lsrs	r3, r3, #3
 800042a:	4313      	orrs	r3, r2
 800042c:	08c9      	lsrs	r1, r1, #3
 800042e:	e029      	b.n	8000484 <__aeabi_dadd+0x264>
 8000430:	464a      	mov	r2, r9
 8000432:	4302      	orrs	r2, r0
 8000434:	d100      	bne.n	8000438 <__aeabi_dadd+0x218>
 8000436:	e17d      	b.n	8000734 <__aeabi_dadd+0x514>
 8000438:	1e7a      	subs	r2, r7, #1
 800043a:	2f01      	cmp	r7, #1
 800043c:	d100      	bne.n	8000440 <__aeabi_dadd+0x220>
 800043e:	e0e0      	b.n	8000602 <__aeabi_dadd+0x3e2>
 8000440:	4c52      	ldr	r4, [pc, #328]	; (800058c <__aeabi_dadd+0x36c>)
 8000442:	42a7      	cmp	r7, r4
 8000444:	d100      	bne.n	8000448 <__aeabi_dadd+0x228>
 8000446:	e166      	b.n	8000716 <__aeabi_dadd+0x4f6>
 8000448:	0017      	movs	r7, r2
 800044a:	e7b2      	b.n	80003b2 <__aeabi_dadd+0x192>
 800044c:	0010      	movs	r0, r2
 800044e:	3b1f      	subs	r3, #31
 8000450:	40d8      	lsrs	r0, r3
 8000452:	2920      	cmp	r1, #32
 8000454:	d003      	beq.n	800045e <__aeabi_dadd+0x23e>
 8000456:	2340      	movs	r3, #64	; 0x40
 8000458:	1a5b      	subs	r3, r3, r1
 800045a:	409a      	lsls	r2, r3
 800045c:	4314      	orrs	r4, r2
 800045e:	1e63      	subs	r3, r4, #1
 8000460:	419c      	sbcs	r4, r3
 8000462:	2300      	movs	r3, #0
 8000464:	2600      	movs	r6, #0
 8000466:	469a      	mov	sl, r3
 8000468:	4304      	orrs	r4, r0
 800046a:	0763      	lsls	r3, r4, #29
 800046c:	d000      	beq.n	8000470 <__aeabi_dadd+0x250>
 800046e:	e755      	b.n	800031c <__aeabi_dadd+0xfc>
 8000470:	4652      	mov	r2, sl
 8000472:	08e3      	lsrs	r3, r4, #3
 8000474:	0752      	lsls	r2, r2, #29
 8000476:	4313      	orrs	r3, r2
 8000478:	4652      	mov	r2, sl
 800047a:	0037      	movs	r7, r6
 800047c:	08d1      	lsrs	r1, r2, #3
 800047e:	4a43      	ldr	r2, [pc, #268]	; (800058c <__aeabi_dadd+0x36c>)
 8000480:	4297      	cmp	r7, r2
 8000482:	d01f      	beq.n	80004c4 <__aeabi_dadd+0x2a4>
 8000484:	0309      	lsls	r1, r1, #12
 8000486:	057a      	lsls	r2, r7, #21
 8000488:	0b0c      	lsrs	r4, r1, #12
 800048a:	0d52      	lsrs	r2, r2, #21
 800048c:	e764      	b.n	8000358 <__aeabi_dadd+0x138>
 800048e:	4642      	mov	r2, r8
 8000490:	464c      	mov	r4, r9
 8000492:	4314      	orrs	r4, r2
 8000494:	1e62      	subs	r2, r4, #1
 8000496:	4194      	sbcs	r4, r2
 8000498:	18e4      	adds	r4, r4, r3
 800049a:	429c      	cmp	r4, r3
 800049c:	4192      	sbcs	r2, r2
 800049e:	4252      	negs	r2, r2
 80004a0:	4692      	mov	sl, r2
 80004a2:	448a      	add	sl, r1
 80004a4:	4653      	mov	r3, sl
 80004a6:	021b      	lsls	r3, r3, #8
 80004a8:	d5df      	bpl.n	800046a <__aeabi_dadd+0x24a>
 80004aa:	4b38      	ldr	r3, [pc, #224]	; (800058c <__aeabi_dadd+0x36c>)
 80004ac:	3601      	adds	r6, #1
 80004ae:	429e      	cmp	r6, r3
 80004b0:	d000      	beq.n	80004b4 <__aeabi_dadd+0x294>
 80004b2:	e0b3      	b.n	800061c <__aeabi_dadd+0x3fc>
 80004b4:	0032      	movs	r2, r6
 80004b6:	2400      	movs	r4, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	e74d      	b.n	8000358 <__aeabi_dadd+0x138>
 80004bc:	074a      	lsls	r2, r1, #29
 80004be:	08db      	lsrs	r3, r3, #3
 80004c0:	4313      	orrs	r3, r2
 80004c2:	08c9      	lsrs	r1, r1, #3
 80004c4:	001a      	movs	r2, r3
 80004c6:	430a      	orrs	r2, r1
 80004c8:	d100      	bne.n	80004cc <__aeabi_dadd+0x2ac>
 80004ca:	e200      	b.n	80008ce <__aeabi_dadd+0x6ae>
 80004cc:	2480      	movs	r4, #128	; 0x80
 80004ce:	0324      	lsls	r4, r4, #12
 80004d0:	430c      	orrs	r4, r1
 80004d2:	0324      	lsls	r4, r4, #12
 80004d4:	4a2d      	ldr	r2, [pc, #180]	; (800058c <__aeabi_dadd+0x36c>)
 80004d6:	0b24      	lsrs	r4, r4, #12
 80004d8:	e73e      	b.n	8000358 <__aeabi_dadd+0x138>
 80004da:	0020      	movs	r0, r4
 80004dc:	f000 fa66 	bl	80009ac <__clzsi2>
 80004e0:	0003      	movs	r3, r0
 80004e2:	3318      	adds	r3, #24
 80004e4:	2b1f      	cmp	r3, #31
 80004e6:	dc00      	bgt.n	80004ea <__aeabi_dadd+0x2ca>
 80004e8:	e6f7      	b.n	80002da <__aeabi_dadd+0xba>
 80004ea:	0022      	movs	r2, r4
 80004ec:	3808      	subs	r0, #8
 80004ee:	4082      	lsls	r2, r0
 80004f0:	2400      	movs	r4, #0
 80004f2:	42b3      	cmp	r3, r6
 80004f4:	db00      	blt.n	80004f8 <__aeabi_dadd+0x2d8>
 80004f6:	e6fc      	b.n	80002f2 <__aeabi_dadd+0xd2>
 80004f8:	1af6      	subs	r6, r6, r3
 80004fa:	4b25      	ldr	r3, [pc, #148]	; (8000590 <__aeabi_dadd+0x370>)
 80004fc:	401a      	ands	r2, r3
 80004fe:	4692      	mov	sl, r2
 8000500:	e70a      	b.n	8000318 <__aeabi_dadd+0xf8>
 8000502:	2f00      	cmp	r7, #0
 8000504:	d02b      	beq.n	800055e <__aeabi_dadd+0x33e>
 8000506:	1b97      	subs	r7, r2, r6
 8000508:	2e00      	cmp	r6, #0
 800050a:	d100      	bne.n	800050e <__aeabi_dadd+0x2ee>
 800050c:	e0b8      	b.n	8000680 <__aeabi_dadd+0x460>
 800050e:	4c1f      	ldr	r4, [pc, #124]	; (800058c <__aeabi_dadd+0x36c>)
 8000510:	42a2      	cmp	r2, r4
 8000512:	d100      	bne.n	8000516 <__aeabi_dadd+0x2f6>
 8000514:	e11c      	b.n	8000750 <__aeabi_dadd+0x530>
 8000516:	2480      	movs	r4, #128	; 0x80
 8000518:	0424      	lsls	r4, r4, #16
 800051a:	4321      	orrs	r1, r4
 800051c:	2f38      	cmp	r7, #56	; 0x38
 800051e:	dd00      	ble.n	8000522 <__aeabi_dadd+0x302>
 8000520:	e11e      	b.n	8000760 <__aeabi_dadd+0x540>
 8000522:	2f1f      	cmp	r7, #31
 8000524:	dd00      	ble.n	8000528 <__aeabi_dadd+0x308>
 8000526:	e19e      	b.n	8000866 <__aeabi_dadd+0x646>
 8000528:	2620      	movs	r6, #32
 800052a:	000c      	movs	r4, r1
 800052c:	1bf6      	subs	r6, r6, r7
 800052e:	0018      	movs	r0, r3
 8000530:	40b3      	lsls	r3, r6
 8000532:	40b4      	lsls	r4, r6
 8000534:	40f8      	lsrs	r0, r7
 8000536:	1e5e      	subs	r6, r3, #1
 8000538:	41b3      	sbcs	r3, r6
 800053a:	40f9      	lsrs	r1, r7
 800053c:	4304      	orrs	r4, r0
 800053e:	431c      	orrs	r4, r3
 8000540:	4489      	add	r9, r1
 8000542:	4444      	add	r4, r8
 8000544:	4544      	cmp	r4, r8
 8000546:	419b      	sbcs	r3, r3
 8000548:	425b      	negs	r3, r3
 800054a:	444b      	add	r3, r9
 800054c:	469a      	mov	sl, r3
 800054e:	0016      	movs	r6, r2
 8000550:	e7a8      	b.n	80004a4 <__aeabi_dadd+0x284>
 8000552:	4642      	mov	r2, r8
 8000554:	464c      	mov	r4, r9
 8000556:	4314      	orrs	r4, r2
 8000558:	1e62      	subs	r2, r4, #1
 800055a:	4194      	sbcs	r4, r2
 800055c:	e6a6      	b.n	80002ac <__aeabi_dadd+0x8c>
 800055e:	4c0d      	ldr	r4, [pc, #52]	; (8000594 <__aeabi_dadd+0x374>)
 8000560:	1c72      	adds	r2, r6, #1
 8000562:	4222      	tst	r2, r4
 8000564:	d000      	beq.n	8000568 <__aeabi_dadd+0x348>
 8000566:	e0a8      	b.n	80006ba <__aeabi_dadd+0x49a>
 8000568:	000a      	movs	r2, r1
 800056a:	431a      	orrs	r2, r3
 800056c:	2e00      	cmp	r6, #0
 800056e:	d000      	beq.n	8000572 <__aeabi_dadd+0x352>
 8000570:	e10a      	b.n	8000788 <__aeabi_dadd+0x568>
 8000572:	2a00      	cmp	r2, #0
 8000574:	d100      	bne.n	8000578 <__aeabi_dadd+0x358>
 8000576:	e15e      	b.n	8000836 <__aeabi_dadd+0x616>
 8000578:	464a      	mov	r2, r9
 800057a:	4302      	orrs	r2, r0
 800057c:	d000      	beq.n	8000580 <__aeabi_dadd+0x360>
 800057e:	e161      	b.n	8000844 <__aeabi_dadd+0x624>
 8000580:	074a      	lsls	r2, r1, #29
 8000582:	08db      	lsrs	r3, r3, #3
 8000584:	4313      	orrs	r3, r2
 8000586:	08c9      	lsrs	r1, r1, #3
 8000588:	e77c      	b.n	8000484 <__aeabi_dadd+0x264>
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	000007ff 	.word	0x000007ff
 8000590:	ff7fffff 	.word	0xff7fffff
 8000594:	000007fe 	.word	0x000007fe
 8000598:	4ccf      	ldr	r4, [pc, #828]	; (80008d8 <__aeabi_dadd+0x6b8>)
 800059a:	42a2      	cmp	r2, r4
 800059c:	d100      	bne.n	80005a0 <__aeabi_dadd+0x380>
 800059e:	e0ce      	b.n	800073e <__aeabi_dadd+0x51e>
 80005a0:	2480      	movs	r4, #128	; 0x80
 80005a2:	0424      	lsls	r4, r4, #16
 80005a4:	4321      	orrs	r1, r4
 80005a6:	2f38      	cmp	r7, #56	; 0x38
 80005a8:	dc5b      	bgt.n	8000662 <__aeabi_dadd+0x442>
 80005aa:	2f1f      	cmp	r7, #31
 80005ac:	dd00      	ble.n	80005b0 <__aeabi_dadd+0x390>
 80005ae:	e0dc      	b.n	800076a <__aeabi_dadd+0x54a>
 80005b0:	2520      	movs	r5, #32
 80005b2:	000c      	movs	r4, r1
 80005b4:	1bed      	subs	r5, r5, r7
 80005b6:	001e      	movs	r6, r3
 80005b8:	40ab      	lsls	r3, r5
 80005ba:	40ac      	lsls	r4, r5
 80005bc:	40fe      	lsrs	r6, r7
 80005be:	1e5d      	subs	r5, r3, #1
 80005c0:	41ab      	sbcs	r3, r5
 80005c2:	4334      	orrs	r4, r6
 80005c4:	40f9      	lsrs	r1, r7
 80005c6:	431c      	orrs	r4, r3
 80005c8:	464b      	mov	r3, r9
 80005ca:	1a5b      	subs	r3, r3, r1
 80005cc:	4699      	mov	r9, r3
 80005ce:	e04c      	b.n	800066a <__aeabi_dadd+0x44a>
 80005d0:	464a      	mov	r2, r9
 80005d2:	1a1c      	subs	r4, r3, r0
 80005d4:	1a88      	subs	r0, r1, r2
 80005d6:	42a3      	cmp	r3, r4
 80005d8:	4192      	sbcs	r2, r2
 80005da:	4252      	negs	r2, r2
 80005dc:	4692      	mov	sl, r2
 80005de:	0002      	movs	r2, r0
 80005e0:	4650      	mov	r0, sl
 80005e2:	1a12      	subs	r2, r2, r0
 80005e4:	4692      	mov	sl, r2
 80005e6:	0212      	lsls	r2, r2, #8
 80005e8:	d478      	bmi.n	80006dc <__aeabi_dadd+0x4bc>
 80005ea:	4653      	mov	r3, sl
 80005ec:	4323      	orrs	r3, r4
 80005ee:	d000      	beq.n	80005f2 <__aeabi_dadd+0x3d2>
 80005f0:	e66a      	b.n	80002c8 <__aeabi_dadd+0xa8>
 80005f2:	2100      	movs	r1, #0
 80005f4:	2500      	movs	r5, #0
 80005f6:	e745      	b.n	8000484 <__aeabi_dadd+0x264>
 80005f8:	074a      	lsls	r2, r1, #29
 80005fa:	08db      	lsrs	r3, r3, #3
 80005fc:	4313      	orrs	r3, r2
 80005fe:	08c9      	lsrs	r1, r1, #3
 8000600:	e73d      	b.n	800047e <__aeabi_dadd+0x25e>
 8000602:	181c      	adds	r4, r3, r0
 8000604:	429c      	cmp	r4, r3
 8000606:	419b      	sbcs	r3, r3
 8000608:	4449      	add	r1, r9
 800060a:	468a      	mov	sl, r1
 800060c:	425b      	negs	r3, r3
 800060e:	449a      	add	sl, r3
 8000610:	4653      	mov	r3, sl
 8000612:	2601      	movs	r6, #1
 8000614:	021b      	lsls	r3, r3, #8
 8000616:	d400      	bmi.n	800061a <__aeabi_dadd+0x3fa>
 8000618:	e727      	b.n	800046a <__aeabi_dadd+0x24a>
 800061a:	2602      	movs	r6, #2
 800061c:	4652      	mov	r2, sl
 800061e:	4baf      	ldr	r3, [pc, #700]	; (80008dc <__aeabi_dadd+0x6bc>)
 8000620:	2101      	movs	r1, #1
 8000622:	401a      	ands	r2, r3
 8000624:	0013      	movs	r3, r2
 8000626:	4021      	ands	r1, r4
 8000628:	0862      	lsrs	r2, r4, #1
 800062a:	430a      	orrs	r2, r1
 800062c:	07dc      	lsls	r4, r3, #31
 800062e:	085b      	lsrs	r3, r3, #1
 8000630:	469a      	mov	sl, r3
 8000632:	4314      	orrs	r4, r2
 8000634:	e670      	b.n	8000318 <__aeabi_dadd+0xf8>
 8000636:	003a      	movs	r2, r7
 8000638:	464c      	mov	r4, r9
 800063a:	3a20      	subs	r2, #32
 800063c:	40d4      	lsrs	r4, r2
 800063e:	46a4      	mov	ip, r4
 8000640:	2f20      	cmp	r7, #32
 8000642:	d007      	beq.n	8000654 <__aeabi_dadd+0x434>
 8000644:	2240      	movs	r2, #64	; 0x40
 8000646:	4648      	mov	r0, r9
 8000648:	1bd2      	subs	r2, r2, r7
 800064a:	4090      	lsls	r0, r2
 800064c:	0002      	movs	r2, r0
 800064e:	4640      	mov	r0, r8
 8000650:	4310      	orrs	r0, r2
 8000652:	4680      	mov	r8, r0
 8000654:	4640      	mov	r0, r8
 8000656:	1e42      	subs	r2, r0, #1
 8000658:	4190      	sbcs	r0, r2
 800065a:	4662      	mov	r2, ip
 800065c:	0004      	movs	r4, r0
 800065e:	4314      	orrs	r4, r2
 8000660:	e624      	b.n	80002ac <__aeabi_dadd+0x8c>
 8000662:	4319      	orrs	r1, r3
 8000664:	000c      	movs	r4, r1
 8000666:	1e63      	subs	r3, r4, #1
 8000668:	419c      	sbcs	r4, r3
 800066a:	4643      	mov	r3, r8
 800066c:	1b1c      	subs	r4, r3, r4
 800066e:	45a0      	cmp	r8, r4
 8000670:	419b      	sbcs	r3, r3
 8000672:	4649      	mov	r1, r9
 8000674:	425b      	negs	r3, r3
 8000676:	1acb      	subs	r3, r1, r3
 8000678:	469a      	mov	sl, r3
 800067a:	4665      	mov	r5, ip
 800067c:	0016      	movs	r6, r2
 800067e:	e61b      	b.n	80002b8 <__aeabi_dadd+0x98>
 8000680:	000c      	movs	r4, r1
 8000682:	431c      	orrs	r4, r3
 8000684:	d100      	bne.n	8000688 <__aeabi_dadd+0x468>
 8000686:	e0c7      	b.n	8000818 <__aeabi_dadd+0x5f8>
 8000688:	1e7c      	subs	r4, r7, #1
 800068a:	2f01      	cmp	r7, #1
 800068c:	d100      	bne.n	8000690 <__aeabi_dadd+0x470>
 800068e:	e0f9      	b.n	8000884 <__aeabi_dadd+0x664>
 8000690:	4e91      	ldr	r6, [pc, #580]	; (80008d8 <__aeabi_dadd+0x6b8>)
 8000692:	42b7      	cmp	r7, r6
 8000694:	d05c      	beq.n	8000750 <__aeabi_dadd+0x530>
 8000696:	0027      	movs	r7, r4
 8000698:	e740      	b.n	800051c <__aeabi_dadd+0x2fc>
 800069a:	2220      	movs	r2, #32
 800069c:	464c      	mov	r4, r9
 800069e:	4640      	mov	r0, r8
 80006a0:	1bd2      	subs	r2, r2, r7
 80006a2:	4094      	lsls	r4, r2
 80006a4:	40f8      	lsrs	r0, r7
 80006a6:	4304      	orrs	r4, r0
 80006a8:	4640      	mov	r0, r8
 80006aa:	4090      	lsls	r0, r2
 80006ac:	1e42      	subs	r2, r0, #1
 80006ae:	4190      	sbcs	r0, r2
 80006b0:	464a      	mov	r2, r9
 80006b2:	40fa      	lsrs	r2, r7
 80006b4:	4304      	orrs	r4, r0
 80006b6:	1889      	adds	r1, r1, r2
 80006b8:	e6ee      	b.n	8000498 <__aeabi_dadd+0x278>
 80006ba:	4c87      	ldr	r4, [pc, #540]	; (80008d8 <__aeabi_dadd+0x6b8>)
 80006bc:	42a2      	cmp	r2, r4
 80006be:	d100      	bne.n	80006c2 <__aeabi_dadd+0x4a2>
 80006c0:	e6f9      	b.n	80004b6 <__aeabi_dadd+0x296>
 80006c2:	1818      	adds	r0, r3, r0
 80006c4:	4298      	cmp	r0, r3
 80006c6:	419b      	sbcs	r3, r3
 80006c8:	4449      	add	r1, r9
 80006ca:	425b      	negs	r3, r3
 80006cc:	18cb      	adds	r3, r1, r3
 80006ce:	07dc      	lsls	r4, r3, #31
 80006d0:	0840      	lsrs	r0, r0, #1
 80006d2:	085b      	lsrs	r3, r3, #1
 80006d4:	469a      	mov	sl, r3
 80006d6:	0016      	movs	r6, r2
 80006d8:	4304      	orrs	r4, r0
 80006da:	e6c6      	b.n	800046a <__aeabi_dadd+0x24a>
 80006dc:	4642      	mov	r2, r8
 80006de:	1ad4      	subs	r4, r2, r3
 80006e0:	45a0      	cmp	r8, r4
 80006e2:	4180      	sbcs	r0, r0
 80006e4:	464b      	mov	r3, r9
 80006e6:	4240      	negs	r0, r0
 80006e8:	1a59      	subs	r1, r3, r1
 80006ea:	1a0b      	subs	r3, r1, r0
 80006ec:	469a      	mov	sl, r3
 80006ee:	4665      	mov	r5, ip
 80006f0:	e5ea      	b.n	80002c8 <__aeabi_dadd+0xa8>
 80006f2:	464b      	mov	r3, r9
 80006f4:	464a      	mov	r2, r9
 80006f6:	08c0      	lsrs	r0, r0, #3
 80006f8:	075b      	lsls	r3, r3, #29
 80006fa:	4665      	mov	r5, ip
 80006fc:	4303      	orrs	r3, r0
 80006fe:	08d1      	lsrs	r1, r2, #3
 8000700:	e6bd      	b.n	800047e <__aeabi_dadd+0x25e>
 8000702:	2a00      	cmp	r2, #0
 8000704:	d000      	beq.n	8000708 <__aeabi_dadd+0x4e8>
 8000706:	e08e      	b.n	8000826 <__aeabi_dadd+0x606>
 8000708:	464b      	mov	r3, r9
 800070a:	4303      	orrs	r3, r0
 800070c:	d117      	bne.n	800073e <__aeabi_dadd+0x51e>
 800070e:	2180      	movs	r1, #128	; 0x80
 8000710:	2500      	movs	r5, #0
 8000712:	0309      	lsls	r1, r1, #12
 8000714:	e6da      	b.n	80004cc <__aeabi_dadd+0x2ac>
 8000716:	074a      	lsls	r2, r1, #29
 8000718:	08db      	lsrs	r3, r3, #3
 800071a:	4313      	orrs	r3, r2
 800071c:	08c9      	lsrs	r1, r1, #3
 800071e:	e6d1      	b.n	80004c4 <__aeabi_dadd+0x2a4>
 8000720:	1a1c      	subs	r4, r3, r0
 8000722:	464a      	mov	r2, r9
 8000724:	42a3      	cmp	r3, r4
 8000726:	419b      	sbcs	r3, r3
 8000728:	1a89      	subs	r1, r1, r2
 800072a:	425b      	negs	r3, r3
 800072c:	1acb      	subs	r3, r1, r3
 800072e:	469a      	mov	sl, r3
 8000730:	2601      	movs	r6, #1
 8000732:	e5c1      	b.n	80002b8 <__aeabi_dadd+0x98>
 8000734:	074a      	lsls	r2, r1, #29
 8000736:	08db      	lsrs	r3, r3, #3
 8000738:	4313      	orrs	r3, r2
 800073a:	08c9      	lsrs	r1, r1, #3
 800073c:	e69f      	b.n	800047e <__aeabi_dadd+0x25e>
 800073e:	4643      	mov	r3, r8
 8000740:	08d8      	lsrs	r0, r3, #3
 8000742:	464b      	mov	r3, r9
 8000744:	464a      	mov	r2, r9
 8000746:	075b      	lsls	r3, r3, #29
 8000748:	4665      	mov	r5, ip
 800074a:	4303      	orrs	r3, r0
 800074c:	08d1      	lsrs	r1, r2, #3
 800074e:	e6b9      	b.n	80004c4 <__aeabi_dadd+0x2a4>
 8000750:	4643      	mov	r3, r8
 8000752:	08d8      	lsrs	r0, r3, #3
 8000754:	464b      	mov	r3, r9
 8000756:	464a      	mov	r2, r9
 8000758:	075b      	lsls	r3, r3, #29
 800075a:	4303      	orrs	r3, r0
 800075c:	08d1      	lsrs	r1, r2, #3
 800075e:	e6b1      	b.n	80004c4 <__aeabi_dadd+0x2a4>
 8000760:	4319      	orrs	r1, r3
 8000762:	000c      	movs	r4, r1
 8000764:	1e63      	subs	r3, r4, #1
 8000766:	419c      	sbcs	r4, r3
 8000768:	e6eb      	b.n	8000542 <__aeabi_dadd+0x322>
 800076a:	003c      	movs	r4, r7
 800076c:	000d      	movs	r5, r1
 800076e:	3c20      	subs	r4, #32
 8000770:	40e5      	lsrs	r5, r4
 8000772:	2f20      	cmp	r7, #32
 8000774:	d003      	beq.n	800077e <__aeabi_dadd+0x55e>
 8000776:	2440      	movs	r4, #64	; 0x40
 8000778:	1be4      	subs	r4, r4, r7
 800077a:	40a1      	lsls	r1, r4
 800077c:	430b      	orrs	r3, r1
 800077e:	001c      	movs	r4, r3
 8000780:	1e63      	subs	r3, r4, #1
 8000782:	419c      	sbcs	r4, r3
 8000784:	432c      	orrs	r4, r5
 8000786:	e770      	b.n	800066a <__aeabi_dadd+0x44a>
 8000788:	2a00      	cmp	r2, #0
 800078a:	d0e1      	beq.n	8000750 <__aeabi_dadd+0x530>
 800078c:	464a      	mov	r2, r9
 800078e:	4302      	orrs	r2, r0
 8000790:	d0c1      	beq.n	8000716 <__aeabi_dadd+0x4f6>
 8000792:	074a      	lsls	r2, r1, #29
 8000794:	08db      	lsrs	r3, r3, #3
 8000796:	4313      	orrs	r3, r2
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	08c9      	lsrs	r1, r1, #3
 800079c:	0312      	lsls	r2, r2, #12
 800079e:	4211      	tst	r1, r2
 80007a0:	d008      	beq.n	80007b4 <__aeabi_dadd+0x594>
 80007a2:	4648      	mov	r0, r9
 80007a4:	08c4      	lsrs	r4, r0, #3
 80007a6:	4214      	tst	r4, r2
 80007a8:	d104      	bne.n	80007b4 <__aeabi_dadd+0x594>
 80007aa:	4643      	mov	r3, r8
 80007ac:	0021      	movs	r1, r4
 80007ae:	08db      	lsrs	r3, r3, #3
 80007b0:	0742      	lsls	r2, r0, #29
 80007b2:	4313      	orrs	r3, r2
 80007b4:	0f5a      	lsrs	r2, r3, #29
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	0752      	lsls	r2, r2, #29
 80007ba:	08db      	lsrs	r3, r3, #3
 80007bc:	4313      	orrs	r3, r2
 80007be:	e681      	b.n	80004c4 <__aeabi_dadd+0x2a4>
 80007c0:	464b      	mov	r3, r9
 80007c2:	4303      	orrs	r3, r0
 80007c4:	d100      	bne.n	80007c8 <__aeabi_dadd+0x5a8>
 80007c6:	e714      	b.n	80005f2 <__aeabi_dadd+0x3d2>
 80007c8:	464b      	mov	r3, r9
 80007ca:	464a      	mov	r2, r9
 80007cc:	08c0      	lsrs	r0, r0, #3
 80007ce:	075b      	lsls	r3, r3, #29
 80007d0:	4665      	mov	r5, ip
 80007d2:	4303      	orrs	r3, r0
 80007d4:	08d1      	lsrs	r1, r2, #3
 80007d6:	e655      	b.n	8000484 <__aeabi_dadd+0x264>
 80007d8:	1ac4      	subs	r4, r0, r3
 80007da:	45a0      	cmp	r8, r4
 80007dc:	4180      	sbcs	r0, r0
 80007de:	464b      	mov	r3, r9
 80007e0:	4240      	negs	r0, r0
 80007e2:	1a59      	subs	r1, r3, r1
 80007e4:	1a0b      	subs	r3, r1, r0
 80007e6:	469a      	mov	sl, r3
 80007e8:	4665      	mov	r5, ip
 80007ea:	2601      	movs	r6, #1
 80007ec:	e564      	b.n	80002b8 <__aeabi_dadd+0x98>
 80007ee:	1a1c      	subs	r4, r3, r0
 80007f0:	464a      	mov	r2, r9
 80007f2:	42a3      	cmp	r3, r4
 80007f4:	4180      	sbcs	r0, r0
 80007f6:	1a8a      	subs	r2, r1, r2
 80007f8:	4240      	negs	r0, r0
 80007fa:	1a12      	subs	r2, r2, r0
 80007fc:	4692      	mov	sl, r2
 80007fe:	0212      	lsls	r2, r2, #8
 8000800:	d549      	bpl.n	8000896 <__aeabi_dadd+0x676>
 8000802:	4642      	mov	r2, r8
 8000804:	1ad4      	subs	r4, r2, r3
 8000806:	45a0      	cmp	r8, r4
 8000808:	4180      	sbcs	r0, r0
 800080a:	464b      	mov	r3, r9
 800080c:	4240      	negs	r0, r0
 800080e:	1a59      	subs	r1, r3, r1
 8000810:	1a0b      	subs	r3, r1, r0
 8000812:	469a      	mov	sl, r3
 8000814:	4665      	mov	r5, ip
 8000816:	e57f      	b.n	8000318 <__aeabi_dadd+0xf8>
 8000818:	464b      	mov	r3, r9
 800081a:	464a      	mov	r2, r9
 800081c:	08c0      	lsrs	r0, r0, #3
 800081e:	075b      	lsls	r3, r3, #29
 8000820:	4303      	orrs	r3, r0
 8000822:	08d1      	lsrs	r1, r2, #3
 8000824:	e62b      	b.n	800047e <__aeabi_dadd+0x25e>
 8000826:	464a      	mov	r2, r9
 8000828:	08db      	lsrs	r3, r3, #3
 800082a:	4302      	orrs	r2, r0
 800082c:	d138      	bne.n	80008a0 <__aeabi_dadd+0x680>
 800082e:	074a      	lsls	r2, r1, #29
 8000830:	4313      	orrs	r3, r2
 8000832:	08c9      	lsrs	r1, r1, #3
 8000834:	e646      	b.n	80004c4 <__aeabi_dadd+0x2a4>
 8000836:	464b      	mov	r3, r9
 8000838:	464a      	mov	r2, r9
 800083a:	08c0      	lsrs	r0, r0, #3
 800083c:	075b      	lsls	r3, r3, #29
 800083e:	4303      	orrs	r3, r0
 8000840:	08d1      	lsrs	r1, r2, #3
 8000842:	e61f      	b.n	8000484 <__aeabi_dadd+0x264>
 8000844:	181c      	adds	r4, r3, r0
 8000846:	429c      	cmp	r4, r3
 8000848:	419b      	sbcs	r3, r3
 800084a:	4449      	add	r1, r9
 800084c:	468a      	mov	sl, r1
 800084e:	425b      	negs	r3, r3
 8000850:	449a      	add	sl, r3
 8000852:	4653      	mov	r3, sl
 8000854:	021b      	lsls	r3, r3, #8
 8000856:	d400      	bmi.n	800085a <__aeabi_dadd+0x63a>
 8000858:	e607      	b.n	800046a <__aeabi_dadd+0x24a>
 800085a:	4652      	mov	r2, sl
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <__aeabi_dadd+0x6bc>)
 800085e:	2601      	movs	r6, #1
 8000860:	401a      	ands	r2, r3
 8000862:	4692      	mov	sl, r2
 8000864:	e601      	b.n	800046a <__aeabi_dadd+0x24a>
 8000866:	003c      	movs	r4, r7
 8000868:	000e      	movs	r6, r1
 800086a:	3c20      	subs	r4, #32
 800086c:	40e6      	lsrs	r6, r4
 800086e:	2f20      	cmp	r7, #32
 8000870:	d003      	beq.n	800087a <__aeabi_dadd+0x65a>
 8000872:	2440      	movs	r4, #64	; 0x40
 8000874:	1be4      	subs	r4, r4, r7
 8000876:	40a1      	lsls	r1, r4
 8000878:	430b      	orrs	r3, r1
 800087a:	001c      	movs	r4, r3
 800087c:	1e63      	subs	r3, r4, #1
 800087e:	419c      	sbcs	r4, r3
 8000880:	4334      	orrs	r4, r6
 8000882:	e65e      	b.n	8000542 <__aeabi_dadd+0x322>
 8000884:	4443      	add	r3, r8
 8000886:	4283      	cmp	r3, r0
 8000888:	4180      	sbcs	r0, r0
 800088a:	4449      	add	r1, r9
 800088c:	468a      	mov	sl, r1
 800088e:	4240      	negs	r0, r0
 8000890:	001c      	movs	r4, r3
 8000892:	4482      	add	sl, r0
 8000894:	e6bc      	b.n	8000610 <__aeabi_dadd+0x3f0>
 8000896:	4653      	mov	r3, sl
 8000898:	4323      	orrs	r3, r4
 800089a:	d100      	bne.n	800089e <__aeabi_dadd+0x67e>
 800089c:	e6a9      	b.n	80005f2 <__aeabi_dadd+0x3d2>
 800089e:	e5e4      	b.n	800046a <__aeabi_dadd+0x24a>
 80008a0:	074a      	lsls	r2, r1, #29
 80008a2:	4313      	orrs	r3, r2
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	08c9      	lsrs	r1, r1, #3
 80008a8:	0312      	lsls	r2, r2, #12
 80008aa:	4211      	tst	r1, r2
 80008ac:	d009      	beq.n	80008c2 <__aeabi_dadd+0x6a2>
 80008ae:	4648      	mov	r0, r9
 80008b0:	08c4      	lsrs	r4, r0, #3
 80008b2:	4214      	tst	r4, r2
 80008b4:	d105      	bne.n	80008c2 <__aeabi_dadd+0x6a2>
 80008b6:	4643      	mov	r3, r8
 80008b8:	4665      	mov	r5, ip
 80008ba:	0021      	movs	r1, r4
 80008bc:	08db      	lsrs	r3, r3, #3
 80008be:	0742      	lsls	r2, r0, #29
 80008c0:	4313      	orrs	r3, r2
 80008c2:	0f5a      	lsrs	r2, r3, #29
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	08db      	lsrs	r3, r3, #3
 80008c8:	0752      	lsls	r2, r2, #29
 80008ca:	4313      	orrs	r3, r2
 80008cc:	e5fa      	b.n	80004c4 <__aeabi_dadd+0x2a4>
 80008ce:	2300      	movs	r3, #0
 80008d0:	4a01      	ldr	r2, [pc, #4]	; (80008d8 <__aeabi_dadd+0x6b8>)
 80008d2:	001c      	movs	r4, r3
 80008d4:	e540      	b.n	8000358 <__aeabi_dadd+0x138>
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	000007ff 	.word	0x000007ff
 80008dc:	ff7fffff 	.word	0xff7fffff

080008e0 <__aeabi_d2iz>:
 80008e0:	000a      	movs	r2, r1
 80008e2:	b530      	push	{r4, r5, lr}
 80008e4:	4c13      	ldr	r4, [pc, #76]	; (8000934 <__aeabi_d2iz+0x54>)
 80008e6:	0053      	lsls	r3, r2, #1
 80008e8:	0309      	lsls	r1, r1, #12
 80008ea:	0005      	movs	r5, r0
 80008ec:	0b09      	lsrs	r1, r1, #12
 80008ee:	2000      	movs	r0, #0
 80008f0:	0d5b      	lsrs	r3, r3, #21
 80008f2:	0fd2      	lsrs	r2, r2, #31
 80008f4:	42a3      	cmp	r3, r4
 80008f6:	dd04      	ble.n	8000902 <__aeabi_d2iz+0x22>
 80008f8:	480f      	ldr	r0, [pc, #60]	; (8000938 <__aeabi_d2iz+0x58>)
 80008fa:	4283      	cmp	r3, r0
 80008fc:	dd02      	ble.n	8000904 <__aeabi_d2iz+0x24>
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <__aeabi_d2iz+0x5c>)
 8000900:	18d0      	adds	r0, r2, r3
 8000902:	bd30      	pop	{r4, r5, pc}
 8000904:	2080      	movs	r0, #128	; 0x80
 8000906:	0340      	lsls	r0, r0, #13
 8000908:	4301      	orrs	r1, r0
 800090a:	480d      	ldr	r0, [pc, #52]	; (8000940 <__aeabi_d2iz+0x60>)
 800090c:	1ac0      	subs	r0, r0, r3
 800090e:	281f      	cmp	r0, #31
 8000910:	dd08      	ble.n	8000924 <__aeabi_d2iz+0x44>
 8000912:	480c      	ldr	r0, [pc, #48]	; (8000944 <__aeabi_d2iz+0x64>)
 8000914:	1ac3      	subs	r3, r0, r3
 8000916:	40d9      	lsrs	r1, r3
 8000918:	000b      	movs	r3, r1
 800091a:	4258      	negs	r0, r3
 800091c:	2a00      	cmp	r2, #0
 800091e:	d1f0      	bne.n	8000902 <__aeabi_d2iz+0x22>
 8000920:	0018      	movs	r0, r3
 8000922:	e7ee      	b.n	8000902 <__aeabi_d2iz+0x22>
 8000924:	4c08      	ldr	r4, [pc, #32]	; (8000948 <__aeabi_d2iz+0x68>)
 8000926:	40c5      	lsrs	r5, r0
 8000928:	46a4      	mov	ip, r4
 800092a:	4463      	add	r3, ip
 800092c:	4099      	lsls	r1, r3
 800092e:	000b      	movs	r3, r1
 8000930:	432b      	orrs	r3, r5
 8000932:	e7f2      	b.n	800091a <__aeabi_d2iz+0x3a>
 8000934:	000003fe 	.word	0x000003fe
 8000938:	0000041d 	.word	0x0000041d
 800093c:	7fffffff 	.word	0x7fffffff
 8000940:	00000433 	.word	0x00000433
 8000944:	00000413 	.word	0x00000413
 8000948:	fffffbed 	.word	0xfffffbed

0800094c <__aeabi_i2d>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	2800      	cmp	r0, #0
 8000950:	d016      	beq.n	8000980 <__aeabi_i2d+0x34>
 8000952:	17c3      	asrs	r3, r0, #31
 8000954:	18c5      	adds	r5, r0, r3
 8000956:	405d      	eors	r5, r3
 8000958:	0fc4      	lsrs	r4, r0, #31
 800095a:	0028      	movs	r0, r5
 800095c:	f000 f826 	bl	80009ac <__clzsi2>
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <__aeabi_i2d+0x5c>)
 8000962:	1a1b      	subs	r3, r3, r0
 8000964:	280a      	cmp	r0, #10
 8000966:	dc16      	bgt.n	8000996 <__aeabi_i2d+0x4a>
 8000968:	0002      	movs	r2, r0
 800096a:	002e      	movs	r6, r5
 800096c:	3215      	adds	r2, #21
 800096e:	4096      	lsls	r6, r2
 8000970:	220b      	movs	r2, #11
 8000972:	1a12      	subs	r2, r2, r0
 8000974:	40d5      	lsrs	r5, r2
 8000976:	055b      	lsls	r3, r3, #21
 8000978:	032d      	lsls	r5, r5, #12
 800097a:	0b2d      	lsrs	r5, r5, #12
 800097c:	0d5b      	lsrs	r3, r3, #21
 800097e:	e003      	b.n	8000988 <__aeabi_i2d+0x3c>
 8000980:	2400      	movs	r4, #0
 8000982:	2300      	movs	r3, #0
 8000984:	2500      	movs	r5, #0
 8000986:	2600      	movs	r6, #0
 8000988:	051b      	lsls	r3, r3, #20
 800098a:	432b      	orrs	r3, r5
 800098c:	07e4      	lsls	r4, r4, #31
 800098e:	4323      	orrs	r3, r4
 8000990:	0030      	movs	r0, r6
 8000992:	0019      	movs	r1, r3
 8000994:	bd70      	pop	{r4, r5, r6, pc}
 8000996:	380b      	subs	r0, #11
 8000998:	4085      	lsls	r5, r0
 800099a:	055b      	lsls	r3, r3, #21
 800099c:	032d      	lsls	r5, r5, #12
 800099e:	2600      	movs	r6, #0
 80009a0:	0b2d      	lsrs	r5, r5, #12
 80009a2:	0d5b      	lsrs	r3, r3, #21
 80009a4:	e7f0      	b.n	8000988 <__aeabi_i2d+0x3c>
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	0000041e 	.word	0x0000041e

080009ac <__clzsi2>:
 80009ac:	211c      	movs	r1, #28
 80009ae:	2301      	movs	r3, #1
 80009b0:	041b      	lsls	r3, r3, #16
 80009b2:	4298      	cmp	r0, r3
 80009b4:	d301      	bcc.n	80009ba <__clzsi2+0xe>
 80009b6:	0c00      	lsrs	r0, r0, #16
 80009b8:	3910      	subs	r1, #16
 80009ba:	0a1b      	lsrs	r3, r3, #8
 80009bc:	4298      	cmp	r0, r3
 80009be:	d301      	bcc.n	80009c4 <__clzsi2+0x18>
 80009c0:	0a00      	lsrs	r0, r0, #8
 80009c2:	3908      	subs	r1, #8
 80009c4:	091b      	lsrs	r3, r3, #4
 80009c6:	4298      	cmp	r0, r3
 80009c8:	d301      	bcc.n	80009ce <__clzsi2+0x22>
 80009ca:	0900      	lsrs	r0, r0, #4
 80009cc:	3904      	subs	r1, #4
 80009ce:	a202      	add	r2, pc, #8	; (adr r2, 80009d8 <__clzsi2+0x2c>)
 80009d0:	5c10      	ldrb	r0, [r2, r0]
 80009d2:	1840      	adds	r0, r0, r1
 80009d4:	4770      	bx	lr
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	02020304 	.word	0x02020304
 80009dc:	01010101 	.word	0x01010101
	...

080009e8 <foc_startup>:
static uint16_t loop_freq = 0; // Hz, calculated at 100Hz using count

static uint8_t uart_watchdog = 0;


void foc_startup() {
 80009e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ea:	46de      	mov	lr, fp
 80009ec:	4657      	mov	r7, sl
 80009ee:	4645      	mov	r5, r8
 80009f0:	464e      	mov	r6, r9
 80009f2:	b5e0      	push	{r5, r6, r7, lr}


    HAL_ADC_Stop(&hadc); // stop adc before calibration
 80009f4:	4f53      	ldr	r7, [pc, #332]	; (8000b44 <foc_startup+0x15c>)
void foc_startup() {
 80009f6:	b083      	sub	sp, #12
    HAL_ADC_Stop(&hadc); // stop adc before calibration
 80009f8:	0038      	movs	r0, r7
 80009fa:	f001 fb5f 	bl	80020bc <HAL_ADC_Stop>
    HAL_Delay(1);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f001 f9d2 	bl	8001da8 <HAL_Delay>
    HAL_ADCEx_Calibration_Start(&hadc); // seems like this uses VREFINT_CAL
 8000a04:	0038      	movs	r0, r7
 8000a06:	f001 fca7 	bl	8002358 <HAL_ADCEx_Calibration_Start>

    HAL_TIM_Base_Start(&htim1);  // Replace htim1 with your TIM_HandleTypeDef instance
 8000a0a:	4c4f      	ldr	r4, [pc, #316]	; (8000b48 <foc_startup+0x160>)
    TIM1->EGR = TIM_EGR_UG;
 8000a0c:	4d4f      	ldr	r5, [pc, #316]	; (8000b4c <foc_startup+0x164>)
    HAL_TIM_Base_Start(&htim1);  // Replace htim1 with your TIM_HandleTypeDef instance
 8000a0e:	0020      	movs	r0, r4
 8000a10:	f003 fb90 	bl	8004134 <HAL_TIM_Base_Start>
    TIM1->EGR = TIM_EGR_UG;
 8000a14:	2301      	movs	r3, #1
    htim1.Instance->RCR = 1; // Set RCR
 8000a16:	6822      	ldr	r2, [r4, #0]
    TIM1->EGR = TIM_EGR_UG;
 8000a18:	616b      	str	r3, [r5, #20]


    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a1a:	2100      	movs	r1, #0
    htim1.Instance->RCR = 1; // Set RCR
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a1e:	0020      	movs	r0, r4
 8000a20:	f003 fc42 	bl	80042a8 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); // turn on complementary channel
 8000a24:	2100      	movs	r1, #0
 8000a26:	0020      	movs	r0, r4
 8000a28:	f003 ff60 	bl	80048ec <HAL_TIMEx_PWMN_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	0020      	movs	r0, r4
 8000a30:	f003 fc3a 	bl	80042a8 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); // turn on complementary channel
 8000a34:	2104      	movs	r1, #4
 8000a36:	0020      	movs	r0, r4
 8000a38:	f003 ff58 	bl	80048ec <HAL_TIMEx_PWMN_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000a3c:	2108      	movs	r1, #8
 8000a3e:	0020      	movs	r0, r4
 8000a40:	f003 fc32 	bl	80042a8 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // turn on complementary channel
 8000a44:	0020      	movs	r0, r4

    
    HAL_TIM_Base_Start_IT(&htim2); // 100Hz timer for printing

    TIM1->CCR1 = 0;
 8000a46:	2400      	movs	r4, #0
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // turn on complementary channel
 8000a48:	2108      	movs	r1, #8
 8000a4a:	f003 ff4f 	bl	80048ec <HAL_TIMEx_PWMN_Start>
    HAL_TIM_Base_Start_IT(&htim2); // 100Hz timer for printing
 8000a4e:	4840      	ldr	r0, [pc, #256]	; (8000b50 <foc_startup+0x168>)
 8000a50:	f003 fb9a 	bl	8004188 <HAL_TIM_Base_Start_IT>
    TIM1->CCR1 = 0;
 8000a54:	636c      	str	r4, [r5, #52]	; 0x34
    TIM1->CCR2 = 0;
    TIM1->CCR3 = 0;

    // green, wait 2 seconds, then red to give time for flashing
    LED_RED;
 8000a56:	2201      	movs	r2, #1
    TIM1->CCR2 = 0;
 8000a58:	63ac      	str	r4, [r5, #56]	; 0x38
    LED_RED;
 8000a5a:	2101      	movs	r1, #1
    TIM1->CCR3 = 0;
 8000a5c:	63ec      	str	r4, [r5, #60]	; 0x3c
    LED_RED;
 8000a5e:	483d      	ldr	r0, [pc, #244]	; (8000b54 <foc_startup+0x16c>)
 8000a60:	f001 ff32 	bl	80028c8 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 8000a64:	20fa      	movs	r0, #250	; 0xfa
 8000a66:	00c0      	lsls	r0, r0, #3
 8000a68:	f001 f99e 	bl	8001da8 <HAL_Delay>
    LED_GREEN;
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2101      	movs	r1, #1
 8000a70:	4838      	ldr	r0, [pc, #224]	; (8000b54 <foc_startup+0x16c>)
 8000a72:	f001 ff29 	bl	80028c8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000a76:	2064      	movs	r0, #100	; 0x64
 8000a78:	f001 f996 	bl	8001da8 <HAL_Delay>

    // get out of standby mode to allow gate drive
    ENABLE_DRIVE;
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2180      	movs	r1, #128	; 0x80
 8000a80:	4834      	ldr	r0, [pc, #208]	; (8000b54 <foc_startup+0x16c>)
 8000a82:	f001 ff21 	bl	80028c8 <HAL_GPIO_WritePin>
 8000a86:	2201      	movs	r2, #1
 8000a88:	2140      	movs	r1, #64	; 0x40
 8000a8a:	4832      	ldr	r0, [pc, #200]	; (8000b54 <foc_startup+0x16c>)
 8000a8c:	f001 ff1c 	bl	80028c8 <HAL_GPIO_WritePin>

    // move to step 0
    TIM1->CCR1 = 20;
 8000a90:	2314      	movs	r3, #20
    TIM1->CCR2 = 0;
    TIM1->CCR3 = 0;

    HAL_Delay(1000);
 8000a92:	20fa      	movs	r0, #250	; 0xfa
    TIM1->CCR1 = 20;
 8000a94:	636b      	str	r3, [r5, #52]	; 0x34
    HAL_Delay(1000);
 8000a96:	0080      	lsls	r0, r0, #2
    TIM1->CCR2 = 0;
 8000a98:	63ac      	str	r4, [r5, #56]	; 0x38
    TIM1->CCR3 = 0;
 8000a9a:	63ec      	str	r4, [r5, #60]	; 0x3c
    HAL_Delay(1000);
 8000a9c:	f001 f984 	bl	8001da8 <HAL_Delay>
 8000aa0:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <foc_startup+0x170>)
 8000aa2:	4c2e      	ldr	r4, [pc, #184]	; (8000b5c <foc_startup+0x174>)
 8000aa4:	469b      	mov	fp, r3
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <foc_startup+0x178>)
 8000aa8:	250a      	movs	r5, #10
 8000aaa:	4698      	mov	r8, r3

    for (int i = 0; i < 10; i++) { // take some measurements to let the sensors settle
        HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 0);
        HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 8000aac:	1ea3      	subs	r3, r4, #2
 8000aae:	469a      	mov	sl, r3
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	425b      	negs	r3, r3
 8000ab4:	4699      	mov	r9, r3
        HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2102      	movs	r1, #2
 8000aba:	4826      	ldr	r0, [pc, #152]	; (8000b54 <foc_startup+0x16c>)
 8000abc:	f001 ff04 	bl	80028c8 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 8000ac0:	464b      	mov	r3, r9
 8000ac2:	0022      	movs	r2, r4
 8000ac4:	4651      	mov	r1, sl
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	4658      	mov	r0, fp
 8000aca:	2302      	movs	r3, #2
 8000acc:	f003 f868 	bl	8003ba0 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 1);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	481f      	ldr	r0, [pc, #124]	; (8000b54 <foc_startup+0x16c>)
 8000ad6:	f001 fef7 	bl	80028c8 <HAL_GPIO_WritePin>

        HAL_ADC_Start_DMA(&hadc, (uint32_t *)p.adc_vals, NBR_ADC); // start the adc in dma mode

        HAL_UART_Receive(&huart1, p.uart_RX, 1, 1);
 8000ada:	0026      	movs	r6, r4
        HAL_ADC_Start_DMA(&hadc, (uint32_t *)p.adc_vals, NBR_ADC); // start the adc in dma mode
 8000adc:	0021      	movs	r1, r4
 8000ade:	2206      	movs	r2, #6
 8000ae0:	390e      	subs	r1, #14
 8000ae2:	0038      	movs	r0, r7
        HAL_UART_Receive(&huart1, p.uart_RX, 1, 1);
 8000ae4:	3e2c      	subs	r6, #44	; 0x2c
        HAL_ADC_Start_DMA(&hadc, (uint32_t *)p.adc_vals, NBR_ADC); // start the adc in dma mode
 8000ae6:	f001 fb09 	bl	80020fc <HAL_ADC_Start_DMA>
    for (int i = 0; i < 10; i++) { // take some measurements to let the sensors settle
 8000aea:	3d01      	subs	r5, #1
        HAL_UART_Receive(&huart1, p.uart_RX, 1, 1);
 8000aec:	2301      	movs	r3, #1
 8000aee:	2201      	movs	r2, #1
 8000af0:	0031      	movs	r1, r6
 8000af2:	4640      	mov	r0, r8
 8000af4:	f004 fc58 	bl	80053a8 <HAL_UART_Receive>
    for (int i = 0; i < 10; i++) { // take some measurements to let the sensors settle
 8000af8:	2d00      	cmp	r5, #0
 8000afa:	d1dc      	bne.n	8000ab6 <foc_startup+0xce>
    // stop motor
    TIM1->CCR1 = 0;
    TIM1->CCR2 = 0;
    TIM1->CCR3 = 0;

    m_angle = (uint16_t)((p.spi_RX[0] << 8) + p.spi_RX[1] + 16384); // 0 to 32767
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	01c9      	lsls	r1, r1, #7
 8000b00:	468c      	mov	ip, r1
    TIM1->CCR1 = 0;
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <foc_startup+0x164>)
    m_angle_prev = m_angle;
    e_offset = (m_angle * PPAIRS - e_offset) & (32768 - 1);         // convert to electrical angle, modulo 32768
 8000b04:	4917      	ldr	r1, [pc, #92]	; (8000b64 <foc_startup+0x17c>)
    TIM1->CCR1 = 0;
 8000b06:	635d      	str	r5, [r3, #52]	; 0x34
    TIM1->CCR2 = 0;
 8000b08:	639d      	str	r5, [r3, #56]	; 0x38
    TIM1->CCR3 = 0;
 8000b0a:	63dd      	str	r5, [r3, #60]	; 0x3c
    m_angle = (uint16_t)((p.spi_RX[0] << 8) + p.spi_RX[1] + 16384); // 0 to 32767
 8000b0c:	7822      	ldrb	r2, [r4, #0]
 8000b0e:	7863      	ldrb	r3, [r4, #1]
 8000b10:	0212      	lsls	r2, r2, #8
 8000b12:	4463      	add	r3, ip
 8000b14:	18d2      	adds	r2, r2, r3
    m_angle_prev = m_angle;
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <foc_startup+0x180>)
    m_angle = (uint16_t)((p.spi_RX[0] << 8) + p.spi_RX[1] + 16384); // 0 to 32767
 8000b18:	b292      	uxth	r2, r2
    m_angle_prev = m_angle;
 8000b1a:	801a      	strh	r2, [r3, #0]
    e_offset = (m_angle * PPAIRS - e_offset) & (32768 - 1);         // convert to electrical angle, modulo 32768
 8000b1c:	00d3      	lsls	r3, r2, #3
 8000b1e:	1a9b      	subs	r3, r3, r2
 8000b20:	000a      	movs	r2, r1
 8000b22:	8809      	ldrh	r1, [r1, #0]

    HAL_UART_Receive_IT(&huart1, p.uart_RX, UARTSIZE);
 8000b24:	4640      	mov	r0, r8
    e_offset = (m_angle * PPAIRS - e_offset) & (32768 - 1);         // convert to electrical angle, modulo 32768
 8000b26:	1a5b      	subs	r3, r3, r1
 8000b28:	045b      	lsls	r3, r3, #17
 8000b2a:	0c5b      	lsrs	r3, r3, #17
 8000b2c:	8013      	strh	r3, [r2, #0]
    HAL_UART_Receive_IT(&huart1, p.uart_RX, UARTSIZE);
 8000b2e:	0031      	movs	r1, r6
 8000b30:	220a      	movs	r2, #10
 8000b32:	f004 fe2b 	bl	800578c <HAL_UART_Receive_IT>
    //    HAL_UART_Receive_DMA(&huart1, p.uart_RX, UARTSIZE);
}
 8000b36:	b003      	add	sp, #12
 8000b38:	bcf0      	pop	{r4, r5, r6, r7}
 8000b3a:	46bb      	mov	fp, r7
 8000b3c:	46b2      	mov	sl, r6
 8000b3e:	46a9      	mov	r9, r5
 8000b40:	46a0      	mov	r8, r4
 8000b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b44:	200000ec 	.word	0x200000ec
 8000b48:	2000026c 	.word	0x2000026c
 8000b4c:	40012c00 	.word	0x40012c00
 8000b50:	200002b4 	.word	0x200002b4
 8000b54:	48001400 	.word	0x48001400
 8000b58:	20000208 	.word	0x20000208
 8000b5c:	200003be 	.word	0x200003be
 8000b60:	200002fc 	.word	0x200002fc
 8000b64:	200000de 	.word	0x200000de
 8000b68:	200000e0 	.word	0x200000e0

08000b6c <foc_loop>:

void foc_loop() {
 8000b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6e:	46de      	mov	lr, fp
 8000b70:	4657      	mov	r7, sl
 8000b72:	464e      	mov	r6, r9
 8000b74:	4645      	mov	r5, r8

    if(!p.adc_conversion_flag) return;
 8000b76:	233f      	movs	r3, #63	; 0x3f
void foc_loop() {
 8000b78:	b5e0      	push	{r5, r6, r7, lr}
    if(!p.adc_conversion_flag) return;
 8000b7a:	4c06      	ldr	r4, [pc, #24]	; (8000b94 <foc_loop+0x28>)
void foc_loop() {
 8000b7c:	b08f      	sub	sp, #60	; 0x3c
    if(!p.adc_conversion_flag) return;
 8000b7e:	5ce2      	ldrb	r2, [r4, r3]
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	d109      	bne.n	8000b98 <foc_loop+0x2c>
        // HAL_UART_Transmit_DMA(&huart1, print_TX, 20);

        p.print_flag = 0;
    }
    // LED_GREEN;
}
 8000b84:	b00f      	add	sp, #60	; 0x3c
 8000b86:	bcf0      	pop	{r4, r5, r6, r7}
 8000b88:	46bb      	mov	fp, r7
 8000b8a:	46b2      	mov	sl, r6
 8000b8c:	46a9      	mov	r9, r5
 8000b8e:	46a0      	mov	r8, r4
 8000b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	20000384 	.word	0x20000384
    p.adc_conversion_flag = 0;
 8000b98:	2200      	movs	r2, #0
 8000b9a:	54e2      	strb	r2, [r4, r3]
    count++;
 8000b9c:	4beb      	ldr	r3, [pc, #940]	; (8000f4c <foc_loop+0x3e0>)
        HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 0);
 8000b9e:	2102      	movs	r1, #2
    count++;
 8000ba0:	469b      	mov	fp, r3
 8000ba2:	465a      	mov	r2, fp
 8000ba4:	681b      	ldr	r3, [r3, #0]
        HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 0);
 8000ba6:	48ea      	ldr	r0, [pc, #936]	; (8000f50 <foc_loop+0x3e4>)
    count++;
 8000ba8:	3301      	adds	r3, #1
 8000baa:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f001 fe8b 	bl	80028c8 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	0022      	movs	r2, r4
 8000bb6:	0021      	movs	r1, r4
 8000bb8:	425b      	negs	r3, r3
 8000bba:	323a      	adds	r2, #58	; 0x3a
 8000bbc:	3138      	adds	r1, #56	; 0x38
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	48e4      	ldr	r0, [pc, #912]	; (8000f54 <foc_loop+0x3e8>)
 8000bc2:	3303      	adds	r3, #3
 8000bc4:	f002 ffec 	bl	8003ba0 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 1);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2102      	movs	r1, #2
 8000bcc:	48e0      	ldr	r0, [pc, #896]	; (8000f50 <foc_loop+0x3e4>)
 8000bce:	f001 fe7b 	bl	80028c8 <HAL_GPIO_WritePin>
        m_angle = ((uint16_t)(p.spi_RX[0]) << 8) + p.spi_RX[1] + 16384;
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	233a      	movs	r3, #58	; 0x3a
 8000bd6:	223b      	movs	r2, #59	; 0x3b
 8000bd8:	01c9      	lsls	r1, r1, #7
 8000bda:	468c      	mov	ip, r1
 8000bdc:	5ce3      	ldrb	r3, [r4, r3]
 8000bde:	5ca2      	ldrb	r2, [r4, r2]
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	4462      	add	r2, ip
 8000be4:	189b      	adds	r3, r3, r2
        e_angle = (m_angle * PPAIRS - e_offset) & (32768 - 1); // convert to electrical angle and modulo
 8000be6:	49dc      	ldr	r1, [pc, #880]	; (8000f58 <foc_loop+0x3ec>)
        m_angle = ((uint16_t)(p.spi_RX[0]) << 8) + p.spi_RX[1] + 16384;
 8000be8:	b29b      	uxth	r3, r3
        e_angle = (m_angle * PPAIRS - e_offset) & (32768 - 1); // convert to electrical angle and modulo
 8000bea:	8809      	ldrh	r1, [r1, #0]
 8000bec:	00da      	lsls	r2, r3, #3
 8000bee:	1ad2      	subs	r2, r2, r3
 8000bf0:	1a52      	subs	r2, r2, r1
 8000bf2:	4dda      	ldr	r5, [pc, #872]	; (8000f5c <foc_loop+0x3f0>)
 8000bf4:	0452      	lsls	r2, r2, #17
 8000bf6:	0c52      	lsrs	r2, r2, #17
 8000bf8:	802a      	strh	r2, [r5, #0]
        if (m_angle_prev < 8192 && m_angle > 24576) { // detect angle wraparound and increment a revolution
 8000bfa:	2280      	movs	r2, #128	; 0x80
 8000bfc:	49d8      	ldr	r1, [pc, #864]	; (8000f60 <foc_loop+0x3f4>)
 8000bfe:	0192      	lsls	r2, r2, #6
 8000c00:	8808      	ldrh	r0, [r1, #0]
 8000c02:	4290      	cmp	r0, r2
 8000c04:	d300      	bcc.n	8000c08 <foc_loop+0x9c>
 8000c06:	e25a      	b.n	80010be <foc_loop+0x552>
 8000c08:	22c0      	movs	r2, #192	; 0xc0
 8000c0a:	01d2      	lsls	r2, r2, #7
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d900      	bls.n	8000c12 <foc_loop+0xa6>
 8000c10:	e265      	b.n	80010de <foc_loop+0x572>
            revs -= 32768;
 8000c12:	4ad4      	ldr	r2, [pc, #848]	; (8000f64 <foc_loop+0x3f8>)
 8000c14:	6812      	ldr	r2, [r2, #0]
        I_u_accum = I_u_accum - I_u + (p.adc_vals[3] - adc_U_offset);
 8000c16:	4ed4      	ldr	r6, [pc, #848]	; (8000f68 <foc_loop+0x3fc>)
        m_angle_prev = m_angle;
 8000c18:	800b      	strh	r3, [r1, #0]
        I_u_accum = I_u_accum - I_u + (p.adc_vals[3] - adc_U_offset);
 8000c1a:	46b4      	mov	ip, r6
        cont_angle = m_angle + revs;
 8000c1c:	48d3      	ldr	r0, [pc, #844]	; (8000f6c <foc_loop+0x400>)
        I_u = I_u_accum >> ADC_FILT_LVL;
 8000c1e:	49d4      	ldr	r1, [pc, #848]	; (8000f70 <foc_loop+0x404>)
        cont_angle = m_angle + revs;
 8000c20:	189a      	adds	r2, r3, r2
 8000c22:	6002      	str	r2, [r0, #0]
        I_u = I_u_accum >> ADC_FILT_LVL;
 8000c24:	680a      	ldr	r2, [r1, #0]
        cont_angle = m_angle + revs;
 8000c26:	9008      	str	r0, [sp, #32]
        I_u = I_u_accum >> ADC_FILT_LVL;
 8000c28:	4bd2      	ldr	r3, [pc, #840]	; (8000f74 <foc_loop+0x408>)
 8000c2a:	1110      	asrs	r0, r2, #4
 8000c2c:	b200      	sxth	r0, r0
 8000c2e:	8018      	strh	r0, [r3, #0]
 8000c30:	9304      	str	r3, [sp, #16]
        I_u_accum = I_u_accum - I_u + (p.adc_vals[3] - adc_U_offset);
 8000c32:	8e63      	ldrh	r3, [r4, #50]	; 0x32
        I_v_accum = I_v_accum - I_v + (p.adc_vals[0] - adc_V_offset);
 8000c34:	4fd0      	ldr	r7, [pc, #832]	; (8000f78 <foc_loop+0x40c>)
        I_u_accum = I_u_accum - I_u + (p.adc_vals[3] - adc_U_offset);
 8000c36:	4463      	add	r3, ip
        I_v_accum = I_v_accum - I_v + (p.adc_vals[0] - adc_V_offset);
 8000c38:	46bc      	mov	ip, r7
        I_u_accum = I_u_accum - I_u + (p.adc_vals[3] - adc_U_offset);
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	189b      	adds	r3, r3, r2
 8000c3e:	600b      	str	r3, [r1, #0]
        I_v = I_v_accum >> ADC_FILT_LVL;
 8000c40:	49ce      	ldr	r1, [pc, #824]	; (8000f7c <foc_loop+0x410>)
 8000c42:	4bcf      	ldr	r3, [pc, #828]	; (8000f80 <foc_loop+0x414>)
 8000c44:	680a      	ldr	r2, [r1, #0]
 8000c46:	4699      	mov	r9, r3
 8000c48:	1116      	asrs	r6, r2, #4
 8000c4a:	b236      	sxth	r6, r6
 8000c4c:	801e      	strh	r6, [r3, #0]
        I_v_accum = I_v_accum - I_v + (p.adc_vals[0] - adc_V_offset);
 8000c4e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
        I_w_accum = I_w_accum - I_w + (p.adc_vals[1] - adc_W_offset);
 8000c50:	4fcc      	ldr	r7, [pc, #816]	; (8000f84 <foc_loop+0x418>)
        I_v_accum = I_v_accum - I_v + (p.adc_vals[0] - adc_V_offset);
 8000c52:	4463      	add	r3, ip
        I_w_accum = I_w_accum - I_w + (p.adc_vals[1] - adc_W_offset);
 8000c54:	46bc      	mov	ip, r7
        I_v_accum = I_v_accum - I_v + (p.adc_vals[0] - adc_V_offset);
 8000c56:	1b92      	subs	r2, r2, r6
 8000c58:	189b      	adds	r3, r3, r2
 8000c5a:	600b      	str	r3, [r1, #0]
        I_w = I_w_accum >> ADC_FILT_LVL;
 8000c5c:	49ca      	ldr	r1, [pc, #808]	; (8000f88 <foc_loop+0x41c>)
 8000c5e:	4bcb      	ldr	r3, [pc, #812]	; (8000f8c <foc_loop+0x420>)
 8000c60:	680a      	ldr	r2, [r1, #0]
 8000c62:	4698      	mov	r8, r3
 8000c64:	1116      	asrs	r6, r2, #4
 8000c66:	b236      	sxth	r6, r6
 8000c68:	801e      	strh	r6, [r3, #0]
        I_w_accum = I_w_accum - I_w + (p.adc_vals[1] - adc_W_offset);
 8000c6a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8000c6c:	1b92      	subs	r2, r2, r6
 8000c6e:	4463      	add	r3, ip
 8000c70:	189b      	adds	r3, r3, r2
 8000c72:	600b      	str	r3, [r1, #0]
        I_phase = abs16(I_u);
 8000c74:	f001 f816 	bl	8001ca4 <abs16>
        if(abs16(I_v) > I_phase) I_phase = abs16(I_v);
 8000c78:	464b      	mov	r3, r9
        I_phase = abs16(I_u);
 8000c7a:	4ec5      	ldr	r6, [pc, #788]	; (8000f90 <foc_loop+0x424>)
 8000c7c:	8030      	strh	r0, [r6, #0]
        if(abs16(I_v) > I_phase) I_phase = abs16(I_v);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	5e18      	ldrsh	r0, [r3, r0]
 8000c82:	f001 f80f 	bl	8001ca4 <abs16>
 8000c86:	2200      	movs	r2, #0
 8000c88:	5eb3      	ldrsh	r3, [r6, r2]
 8000c8a:	4283      	cmp	r3, r0
 8000c8c:	da00      	bge.n	8000c90 <foc_loop+0x124>
 8000c8e:	e23c      	b.n	800110a <foc_loop+0x59e>
        if(abs16(I_w) > I_phase) I_phase = abs16(I_w);
 8000c90:	4643      	mov	r3, r8
 8000c92:	2000      	movs	r0, #0
 8000c94:	5e18      	ldrsh	r0, [r3, r0]
 8000c96:	f001 f805 	bl	8001ca4 <abs16>
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	5eb3      	ldrsh	r3, [r6, r2]
 8000c9e:	4283      	cmp	r3, r0
 8000ca0:	da00      	bge.n	8000ca4 <foc_loop+0x138>
 8000ca2:	e239      	b.n	8001118 <foc_loop+0x5ac>
        uint8_t angle_lut = e_angle >> 7; // scale e_angle [0,32767] to [0,255] for lookup table
 8000ca4:	882b      	ldrh	r3, [r5, #0]
        int16_t Q16_sin_t = sin_lut[angle_lut];
 8000ca6:	4abb      	ldr	r2, [pc, #748]	; (8000f94 <foc_loop+0x428>)
        uint8_t angle_lut = e_angle >> 7; // scale e_angle [0,32767] to [0,255] for lookup table
 8000ca8:	09db      	lsrs	r3, r3, #7
 8000caa:	b2db      	uxtb	r3, r3
        int16_t Q16_sin_t = sin_lut[angle_lut];
 8000cac:	0059      	lsls	r1, r3, #1
 8000cae:	5e8f      	ldrsh	r7, [r1, r2]
            Q16_cos_t = sin_lut[(64 - angle_lut) & (256 - 1)]; /// 64 out of 256 is the equilvalent of /// 90º/360º. &255 is mod256.
 8000cb0:	2140      	movs	r1, #64	; 0x40
        if (angle_lut < 64) {
 8000cb2:	2b3f      	cmp	r3, #63	; 0x3f
 8000cb4:	d900      	bls.n	8000cb8 <foc_loop+0x14c>
            Q16_cos_t = sin_lut[(63 - angle_lut) & (256 - 1)];
 8000cb6:	213f      	movs	r1, #63	; 0x3f
 8000cb8:	1ac9      	subs	r1, r1, r3
 8000cba:	23ff      	movs	r3, #255	; 0xff
        int16_t Q16_SQRT3_2_sin_t = (Q16_SQRT3_2 * Q16_sin_t) >> 16;
 8000cbc:	4db6      	ldr	r5, [pc, #728]	; (8000f98 <foc_loop+0x42c>)
            Q16_cos_t = sin_lut[(63 - angle_lut) & (256 - 1)];
 8000cbe:	400b      	ands	r3, r1
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	5e9a      	ldrsh	r2, [r3, r2]
        int16_t Q16_SQRT3_2_sin_t = (Q16_SQRT3_2 * Q16_sin_t) >> 16;
 8000cc4:	002b      	movs	r3, r5
            Q16_cos_t = sin_lut[(63 - angle_lut) & (256 - 1)];
 8000cc6:	9203      	str	r2, [sp, #12]
        int16_t Q16_1_2_sin_t = (Q16_1_2 * Q16_sin_t) >> 16;
 8000cc8:	107a      	asrs	r2, r7, #1
 8000cca:	4692      	mov	sl, r2
        int16_t Q16_SQRT3_2_cos_t = (Q16_SQRT3_2 * Q16_cos_t) >> 16;
 8000ccc:	9903      	ldr	r1, [sp, #12]
        int16_t Q16_SQRT3_2_sin_t = (Q16_SQRT3_2 * Q16_sin_t) >> 16;
 8000cce:	437b      	muls	r3, r7
        int16_t Q16_1_2_cos_t = (Q16_1_2 * Q16_cos_t) >> 16;
 8000cd0:	104a      	asrs	r2, r1, #1
        int16_t Q16_SQRT3_2_cos_t = (Q16_SQRT3_2 * Q16_cos_t) >> 16;
 8000cd2:	434d      	muls	r5, r1
        I_d = (Q16_cos_t * I_u + (Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_w) >> 16;
 8000cd4:	9904      	ldr	r1, [sp, #16]
        int16_t Q16_SQRT3_2_sin_t = (Q16_SQRT3_2 * Q16_sin_t) >> 16;
 8000cd6:	141b      	asrs	r3, r3, #16
        I_d = (Q16_cos_t * I_u + (Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_w) >> 16;
 8000cd8:	2000      	movs	r0, #0
 8000cda:	5e08      	ldrsh	r0, [r1, r0]
 8000cdc:	4649      	mov	r1, r9
 8000cde:	1a9e      	subs	r6, r3, r2
 8000ce0:	9205      	str	r2, [sp, #20]
        I_q = (Q16_sin_t * I_u + (-Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * I_v + (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * I_w) >> 16;
 8000ce2:	4652      	mov	r2, sl
        I_d = (Q16_cos_t * I_u + (Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_w) >> 16;
 8000ce4:	9304      	str	r3, [sp, #16]
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	9006      	str	r0, [sp, #24]
 8000cea:	2000      	movs	r0, #0
 8000cec:	5e09      	ldrsh	r1, [r1, r0]
 8000cee:	9609      	str	r6, [sp, #36]	; 0x24
 8000cf0:	434e      	muls	r6, r1
        int16_t Q16_SQRT3_2_cos_t = (Q16_SQRT3_2 * Q16_cos_t) >> 16;
 8000cf2:	142d      	asrs	r5, r5, #16
        I_d = (Q16_cos_t * I_u + (Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_w) >> 16;
 8000cf4:	46b4      	mov	ip, r6
        I_q = (Q16_sin_t * I_u + (-Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * I_v + (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * I_w) >> 16;
 8000cf6:	1aaa      	subs	r2, r5, r2
        I_d = (Q16_cos_t * I_u + (Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_w) >> 16;
 8000cf8:	9e04      	ldr	r6, [sp, #16]
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	5e1b      	ldrsh	r3, [r3, r0]
        I_q = (Q16_sin_t * I_u + (-Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * I_v + (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * I_w) >> 16;
 8000cfe:	9207      	str	r2, [sp, #28]
        I_d = (Q16_cos_t * I_u + (Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_w) >> 16;
 8000d00:	9803      	ldr	r0, [sp, #12]
 8000d02:	9a06      	ldr	r2, [sp, #24]
 8000d04:	4276      	negs	r6, r6
 8000d06:	4342      	muls	r2, r0
 8000d08:	0030      	movs	r0, r6
 8000d0a:	9e05      	ldr	r6, [sp, #20]
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1b86      	subs	r6, r0, r6
 8000d10:	435e      	muls	r6, r3
 8000d12:	46b4      	mov	ip, r6
        I_q = (Q16_sin_t * I_u + (-Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * I_v + (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * I_w) >> 16;
 8000d14:	4656      	mov	r6, sl
        I_d = (I_d * Q16_2_3) >> 15;
 8000d16:	48a1      	ldr	r0, [pc, #644]	; (8000f9c <foc_loop+0x430>)
        I_d = (Q16_cos_t * I_u + (Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_w) >> 16;
 8000d18:	4462      	add	r2, ip
 8000d1a:	1412      	asrs	r2, r2, #16
        I_d = (I_d * Q16_2_3) >> 15;
 8000d1c:	4342      	muls	r2, r0
        I_q = (Q16_sin_t * I_u + (-Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * I_v + (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * I_w) >> 16;
 8000d1e:	4268      	negs	r0, r5
 8000d20:	1b80      	subs	r0, r0, r6
 8000d22:	4341      	muls	r1, r0
 8000d24:	9806      	ldr	r0, [sp, #24]
        I_d = (I_d * Q16_2_3) >> 15;
 8000d26:	13d2      	asrs	r2, r2, #15
        I_q = (Q16_sin_t * I_u + (-Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * I_v + (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * I_w) >> 16;
 8000d28:	4378      	muls	r0, r7
 8000d2a:	1809      	adds	r1, r1, r0
 8000d2c:	9807      	ldr	r0, [sp, #28]
 8000d2e:	4343      	muls	r3, r0
 8000d30:	18c9      	adds	r1, r1, r3
 8000d32:	1409      	asrs	r1, r1, #16
        I_q = (I_q * -Q16_2_3) >> 15;
 8000d34:	010b      	lsls	r3, r1, #4
 8000d36:	1a5b      	subs	r3, r3, r1
 8000d38:	039b      	lsls	r3, r3, #14
 8000d3a:	185b      	adds	r3, r3, r1
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	185b      	adds	r3, r3, r1
 8000d40:	0119      	lsls	r1, r3, #4
        I_d_filt = I_d_accum >> DQ_FILT_LVL;
 8000d42:	4897      	ldr	r0, [pc, #604]	; (8000fa0 <foc_loop+0x434>)
        I_q = (I_q * -Q16_2_3) >> 15;
 8000d44:	185b      	adds	r3, r3, r1
 8000d46:	0219      	lsls	r1, r3, #8
 8000d48:	185b      	adds	r3, r3, r1
        I_d_filt = I_d_accum >> DQ_FILT_LVL;
 8000d4a:	6801      	ldr	r1, [r0, #0]
        I_q = (I_q * -Q16_2_3) >> 15;
 8000d4c:	13db      	asrs	r3, r3, #15
        I_d_filt = I_d_accum >> DQ_FILT_LVL;
 8000d4e:	120e      	asrs	r6, r1, #8
        I_d_accum = I_d_accum - I_d_filt + I_d;
 8000d50:	b236      	sxth	r6, r6
 8000d52:	1b89      	subs	r1, r1, r6
 8000d54:	b216      	sxth	r6, r2
 8000d56:	46b4      	mov	ip, r6
 8000d58:	4461      	add	r1, ip
 8000d5a:	6001      	str	r1, [r0, #0]
        I_q_filt = I_q_accum >> DQ_FILT_LVL;
 8000d5c:	4891      	ldr	r0, [pc, #580]	; (8000fa4 <foc_loop+0x438>)
 8000d5e:	6801      	ldr	r1, [r0, #0]
 8000d60:	120e      	asrs	r6, r1, #8
        I_q_accum = I_q_accum - I_q_filt + I_q;
 8000d62:	b236      	sxth	r6, r6
 8000d64:	1b89      	subs	r1, r1, r6
 8000d66:	b21e      	sxth	r6, r3
 8000d68:	46b4      	mov	ip, r6
 8000d6a:	4461      	add	r1, ip
 8000d6c:	6001      	str	r1, [r0, #0]
        I_q_error = I_q_des - I_q;
 8000d6e:	488e      	ldr	r0, [pc, #568]	; (8000fa8 <foc_loop+0x43c>)
 8000d70:	498e      	ldr	r1, [pc, #568]	; (8000fac <foc_loop+0x440>)
 8000d72:	0006      	movs	r6, r0
 8000d74:	9006      	str	r0, [sp, #24]
 8000d76:	8800      	ldrh	r0, [r0, #0]
 8000d78:	4688      	mov	r8, r1
 8000d7a:	1ac3      	subs	r3, r0, r3
 8000d7c:	800b      	strh	r3, [r1, #0]
        I_d_error_int = clip(I_d_error_int + (I_d_error >> 10), -32768, 32767);
 8000d7e:	498c      	ldr	r1, [pc, #560]	; (8000fb0 <foc_loop+0x444>)
        I_d_error = I_d_des - I_d;
 8000d80:	4250      	negs	r0, r2
        I_d_error_int = clip(I_d_error_int + (I_d_error >> 10), -32768, 32767);
 8000d82:	4689      	mov	r9, r1
 8000d84:	680b      	ldr	r3, [r1, #0]
 8000d86:	b200      	sxth	r0, r0
 8000d88:	1280      	asrs	r0, r0, #10
 8000d8a:	4a8a      	ldr	r2, [pc, #552]	; (8000fb4 <foc_loop+0x448>)
 8000d8c:	498a      	ldr	r1, [pc, #552]	; (8000fb8 <foc_loop+0x44c>)
 8000d8e:	18c0      	adds	r0, r0, r3
 8000d90:	f000 ff6e 	bl	8001c70 <clip>
 8000d94:	4649      	mov	r1, r9
 8000d96:	6008      	str	r0, [r1, #0]
        I_q_error_int = clip(I_q_error_int + (I_q_error >> 10), -32768, 32767);
 8000d98:	4641      	mov	r1, r8
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	5e08      	ldrsh	r0, [r1, r0]
 8000d9e:	4987      	ldr	r1, [pc, #540]	; (8000fbc <foc_loop+0x450>)
 8000da0:	1280      	asrs	r0, r0, #10
 8000da2:	680b      	ldr	r3, [r1, #0]
 8000da4:	4688      	mov	r8, r1
 8000da6:	4a83      	ldr	r2, [pc, #524]	; (8000fb4 <foc_loop+0x448>)
 8000da8:	4983      	ldr	r1, [pc, #524]	; (8000fb8 <foc_loop+0x44c>)
 8000daa:	18c0      	adds	r0, r0, r3
 8000dac:	f000 ff60 	bl	8001c70 <clip>
        V_d = ((KP_d * I_d_error) >> 16) + ((KI_d * I_d_error_int) >> 16) + ((KF_d * I_d_des) >> 16);
 8000db0:	2300      	movs	r3, #0
 8000db2:	4a83      	ldr	r2, [pc, #524]	; (8000fc0 <foc_loop+0x454>)
        I_q_error_int = clip(I_q_error_int + (I_q_error >> 10), -32768, 32767);
 8000db4:	4641      	mov	r1, r8
        V_d = ((KP_d * I_d_error) >> 16) + ((KI_d * I_d_error_int) >> 16) + ((KF_d * I_d_des) >> 16);
 8000db6:	8013      	strh	r3, [r2, #0]
        V_q = ((KP_q * I_q_error) >> 16) + ((KI_q * I_q_error_int) >> 16) + ((KF_q * I_q_des) >> 16);
 8000db8:	2300      	movs	r3, #0
        V_d = ((KP_d * I_d_error) >> 16) + ((KI_d * I_d_error_int) >> 16) + ((KF_d * I_d_des) >> 16);
 8000dba:	4690      	mov	r8, r2
        V_q = ((KP_q * I_q_error) >> 16) + ((KI_q * I_q_error_int) >> 16) + ((KF_q * I_q_des) >> 16);
 8000dbc:	56f3      	ldrsb	r3, [r6, r3]
 8000dbe:	4a81      	ldr	r2, [pc, #516]	; (8000fc4 <foc_loop+0x458>)
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	4691      	mov	r9, r2
 8000dc4:	8013      	strh	r3, [r2, #0]
        I_q_error_int = clip(I_q_error_int + (I_q_error >> 10), -32768, 32767);
 8000dc6:	6008      	str	r0, [r1, #0]
        V_d = clip(V_d, -32768, 32767);
 8000dc8:	4a7a      	ldr	r2, [pc, #488]	; (8000fb4 <foc_loop+0x448>)
 8000dca:	497b      	ldr	r1, [pc, #492]	; (8000fb8 <foc_loop+0x44c>)
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f000 ff4f 	bl	8001c70 <clip>
 8000dd2:	4641      	mov	r1, r8
 8000dd4:	8008      	strh	r0, [r1, #0]
        V_q = clip(V_q, -32768, 32767);
 8000dd6:	4649      	mov	r1, r9
 8000dd8:	4a76      	ldr	r2, [pc, #472]	; (8000fb4 <foc_loop+0x448>)
 8000dda:	2000      	movs	r0, #0
 8000ddc:	5e08      	ldrsh	r0, [r1, r0]
 8000dde:	4976      	ldr	r1, [pc, #472]	; (8000fb8 <foc_loop+0x44c>)
 8000de0:	f000 ff46 	bl	8001c70 <clip>
 8000de4:	4649      	mov	r1, r9
 8000de6:	b203      	sxth	r3, r0
 8000de8:	800b      	strh	r3, [r1, #0]
        V_u = (Q16_cos_t * V_d - Q16_sin_t * V_q) >> 15;
 8000dea:	4641      	mov	r1, r8
 8000dec:	2200      	movs	r2, #0
 8000dee:	5e8a      	ldrsh	r2, [r1, r2]
        V_v = ((Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * V_d + (Q16_SQRT3_2_cos_t + Q16_1_2_sin_t) * V_q) >> 15;
 8000df0:	0029      	movs	r1, r5
        V_u = (Q16_cos_t * V_d - Q16_sin_t * V_q) >> 15;
 8000df2:	9e03      	ldr	r6, [sp, #12]
 8000df4:	435f      	muls	r7, r3
 8000df6:	4356      	muls	r6, r2
 8000df8:	1bf0      	subs	r0, r6, r7
        V_v = ((Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * V_d + (Q16_SQRT3_2_cos_t + Q16_1_2_sin_t) * V_q) >> 15;
 8000dfa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000dfc:	4451      	add	r1, sl
 8000dfe:	4356      	muls	r6, r2
 8000e00:	4359      	muls	r1, r3
 8000e02:	1989      	adds	r1, r1, r6
 8000e04:	4e70      	ldr	r6, [pc, #448]	; (8000fc8 <foc_loop+0x45c>)
 8000e06:	13c9      	asrs	r1, r1, #15
 8000e08:	6031      	str	r1, [r6, #0]
 8000e0a:	9603      	str	r6, [sp, #12]
        V_w = (-(Q16_SQRT3_2_sin_t + Q16_1_2_cos_t) * V_d - (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * V_q) >> 15;
 8000e0c:	9e05      	ldr	r6, [sp, #20]
 8000e0e:	9d04      	ldr	r5, [sp, #16]
 8000e10:	46b4      	mov	ip, r6
 8000e12:	4465      	add	r5, ip
 8000e14:	426d      	negs	r5, r5
 8000e16:	436a      	muls	r2, r5
 8000e18:	9d07      	ldr	r5, [sp, #28]
        V_u = (Q16_cos_t * V_d - Q16_sin_t * V_q) >> 15;
 8000e1a:	4f6c      	ldr	r7, [pc, #432]	; (8000fcc <foc_loop+0x460>)
        V_w = (-(Q16_SQRT3_2_sin_t + Q16_1_2_cos_t) * V_d - (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * V_q) >> 15;
 8000e1c:	436b      	muls	r3, r5
 8000e1e:	4d6c      	ldr	r5, [pc, #432]	; (8000fd0 <foc_loop+0x464>)
 8000e20:	1ad2      	subs	r2, r2, r3
 8000e22:	13d2      	asrs	r2, r2, #15
        V_u = (Q16_cos_t * V_d - Q16_sin_t * V_q) >> 15;
 8000e24:	13c0      	asrs	r0, r0, #15
        V_w = (-(Q16_SQRT3_2_sin_t + Q16_1_2_cos_t) * V_d - (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * V_q) >> 15;
 8000e26:	602a      	str	r2, [r5, #0]
        V_u = (Q16_cos_t * V_d - Q16_sin_t * V_q) >> 15;
 8000e28:	6038      	str	r0, [r7, #0]
        V_offset = (min3(V_u, V_v, V_w) + max3(V_u, V_v, V_w)) >> 1;
 8000e2a:	f000 ff2b 	bl	8001c84 <min3>
 8000e2e:	9e03      	ldr	r6, [sp, #12]
 8000e30:	4682      	mov	sl, r0
 8000e32:	682a      	ldr	r2, [r5, #0]
 8000e34:	6831      	ldr	r1, [r6, #0]
 8000e36:	6838      	ldr	r0, [r7, #0]
 8000e38:	f000 ff2c 	bl	8001c94 <max3>
 8000e3c:	4450      	add	r0, sl
 8000e3e:	1043      	asrs	r3, r0, #1
        D_u = ((V_u - V_offset) >> log2_V_per_D) + D_mid;
 8000e40:	6838      	ldr	r0, [r7, #0]
        V_offset = (min3(V_u, V_v, V_w) + max3(V_u, V_v, V_w)) >> 1;
 8000e42:	469a      	mov	sl, r3
        D_u = ((V_u - V_offset) >> log2_V_per_D) + D_mid;
 8000e44:	1ac0      	subs	r0, r0, r3
 8000e46:	1140      	asrs	r0, r0, #5
 8000e48:	f7ff fd80 	bl	800094c <__aeabi_i2d>
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	4b61      	ldr	r3, [pc, #388]	; (8000fd4 <foc_loop+0x468>)
 8000e50:	f7ff f9e6 	bl	8000220 <__aeabi_dadd>
 8000e54:	f7ff fd44 	bl	80008e0 <__aeabi_d2iz>
 8000e58:	b203      	sxth	r3, r0
 8000e5a:	4699      	mov	r9, r3
 8000e5c:	464a      	mov	r2, r9
 8000e5e:	4b5e      	ldr	r3, [pc, #376]	; (8000fd8 <foc_loop+0x46c>)
        D_v = ((V_v - V_offset) >> log2_V_per_D) + D_mid;
 8000e60:	6830      	ldr	r0, [r6, #0]
        D_u = ((V_u - V_offset) >> log2_V_per_D) + D_mid;
 8000e62:	801a      	strh	r2, [r3, #0]
 8000e64:	9304      	str	r3, [sp, #16]
        D_v = ((V_v - V_offset) >> log2_V_per_D) + D_mid;
 8000e66:	4653      	mov	r3, sl
 8000e68:	1ac0      	subs	r0, r0, r3
 8000e6a:	1140      	asrs	r0, r0, #5
 8000e6c:	f7ff fd6e 	bl	800094c <__aeabi_i2d>
 8000e70:	2200      	movs	r2, #0
 8000e72:	4b58      	ldr	r3, [pc, #352]	; (8000fd4 <foc_loop+0x468>)
 8000e74:	f7ff f9d4 	bl	8000220 <__aeabi_dadd>
 8000e78:	f7ff fd32 	bl	80008e0 <__aeabi_d2iz>
 8000e7c:	b203      	sxth	r3, r0
 8000e7e:	4698      	mov	r8, r3
 8000e80:	4642      	mov	r2, r8
 8000e82:	4b56      	ldr	r3, [pc, #344]	; (8000fdc <foc_loop+0x470>)
        D_w = ((V_w - V_offset) >> log2_V_per_D) + D_mid;
 8000e84:	6828      	ldr	r0, [r5, #0]
        D_v = ((V_v - V_offset) >> log2_V_per_D) + D_mid;
 8000e86:	801a      	strh	r2, [r3, #0]
 8000e88:	9305      	str	r3, [sp, #20]
        D_w = ((V_w - V_offset) >> log2_V_per_D) + D_mid;
 8000e8a:	4653      	mov	r3, sl
 8000e8c:	1ac0      	subs	r0, r0, r3
 8000e8e:	1140      	asrs	r0, r0, #5
 8000e90:	f7ff fd5c 	bl	800094c <__aeabi_i2d>
 8000e94:	2200      	movs	r2, #0
 8000e96:	4b4f      	ldr	r3, [pc, #316]	; (8000fd4 <foc_loop+0x468>)
 8000e98:	f7ff f9c2 	bl	8000220 <__aeabi_dadd>
 8000e9c:	f7ff fd20 	bl	80008e0 <__aeabi_d2iz>
    if(cont_angle_des != MIN_INT32){
 8000ea0:	2180      	movs	r1, #128	; 0x80
        D_w = ((V_w - V_offset) >> log2_V_per_D) + D_mid;
 8000ea2:	4a4f      	ldr	r2, [pc, #316]	; (8000fe0 <foc_loop+0x474>)
 8000ea4:	b203      	sxth	r3, r0
 8000ea6:	8013      	strh	r3, [r2, #0]
 8000ea8:	9207      	str	r2, [sp, #28]
    if(cont_angle_des != MIN_INT32){
 8000eaa:	4a4e      	ldr	r2, [pc, #312]	; (8000fe4 <foc_loop+0x478>)
 8000eac:	0609      	lsls	r1, r1, #24
 8000eae:	4692      	mov	sl, r2
 8000eb0:	6812      	ldr	r2, [r2, #0]
 8000eb2:	428a      	cmp	r2, r1
 8000eb4:	d00c      	beq.n	8000ed0 <foc_loop+0x364>
        reverse = (cont_angle_error > 0) ? 0 : 1;
 8000eb6:	9808      	ldr	r0, [sp, #32]
 8000eb8:	494b      	ldr	r1, [pc, #300]	; (8000fe8 <foc_loop+0x47c>)
 8000eba:	6800      	ldr	r0, [r0, #0]
 8000ebc:	9109      	str	r1, [sp, #36]	; 0x24
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	4666      	mov	r6, ip
 8000ec2:	4661      	mov	r1, ip
 8000ec4:	0fd0      	lsrs	r0, r2, #31
 8000ec6:	17f6      	asrs	r6, r6, #31
 8000ec8:	4291      	cmp	r1, r2
 8000eca:	4170      	adcs	r0, r6
 8000ecc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000ece:	7008      	strb	r0, [r1, #0]
        if(I_q_des == 0){
 8000ed0:	9a06      	ldr	r2, [sp, #24]
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	5e52      	ldrsh	r2, [r2, r1]
 8000ed6:	2a00      	cmp	r2, #0
 8000ed8:	d000      	beq.n	8000edc <foc_loop+0x370>
 8000eda:	e0e5      	b.n	80010a8 <foc_loop+0x53c>
            TIM1->CCR1 = 0;
 8000edc:	4b43      	ldr	r3, [pc, #268]	; (8000fec <foc_loop+0x480>)
 8000ede:	635a      	str	r2, [r3, #52]	; 0x34
            TIM1->CCR2 = 0;
 8000ee0:	639a      	str	r2, [r3, #56]	; 0x38
            TIM1->CCR3 = 0;
 8000ee2:	63da      	str	r2, [r3, #60]	; 0x3c
    if (p.uart_idle) {
 8000ee4:	233e      	movs	r3, #62	; 0x3e
 8000ee6:	5ce3      	ldrb	r3, [r4, r3]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d100      	bne.n	8000eee <foc_loop+0x382>
 8000eec:	e0c4      	b.n	8001078 <foc_loop+0x50c>
        while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)) {
 8000eee:	2220      	movs	r2, #32
 8000ef0:	4b3f      	ldr	r3, [pc, #252]	; (8000ff0 <foc_loop+0x484>)
 8000ef2:	4691      	mov	r9, r2
 8000ef4:	4698      	mov	r8, r3
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	069b      	lsls	r3, r3, #26
 8000efc:	d512      	bpl.n	8000f24 <foc_loop+0x3b8>
 8000efe:	0023      	movs	r3, r4
 8000f00:	4644      	mov	r4, r8
 8000f02:	4698      	mov	r8, r3
 8000f04:	9e03      	ldr	r6, [sp, #12]
            HAL_UART_Receive(&huart1, temp_buffer, 1, 1);
 8000f06:	2301      	movs	r3, #1
 8000f08:	2201      	movs	r2, #1
 8000f0a:	0020      	movs	r0, r4
 8000f0c:	a90b      	add	r1, sp, #44	; 0x2c
 8000f0e:	f004 fa4b 	bl	80053a8 <HAL_UART_Receive>
        while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)) {
 8000f12:	464a      	mov	r2, r9
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	69db      	ldr	r3, [r3, #28]
 8000f18:	421a      	tst	r2, r3
 8000f1a:	d1f4      	bne.n	8000f06 <foc_loop+0x39a>
 8000f1c:	4643      	mov	r3, r8
 8000f1e:	46a0      	mov	r8, r4
 8000f20:	001c      	movs	r4, r3
 8000f22:	9603      	str	r6, [sp, #12]
        if (p.uart_RX[0] & 0x80) {
 8000f24:	220e      	movs	r2, #14
 8000f26:	56a2      	ldrsb	r2, [r4, r2]
 8000f28:	7ba3      	ldrb	r3, [r4, #14]
 8000f2a:	2a00      	cmp	r2, #0
 8000f2c:	da00      	bge.n	8000f30 <foc_loop+0x3c4>
 8000f2e:	e0e4      	b.n	80010fa <foc_loop+0x58e>
        } else if (p.uart_RX[1] & 0x80) {
 8000f30:	210f      	movs	r1, #15
 8000f32:	5661      	ldrsb	r1, [r4, r1]
 8000f34:	7be2      	ldrb	r2, [r4, #15]
 8000f36:	2900      	cmp	r1, #0
 8000f38:	da00      	bge.n	8000f3c <foc_loop+0x3d0>
 8000f3a:	e0fe      	b.n	800113a <foc_loop+0x5ce>
            p.uart_cmd[0] = p.uart_RX[2] & CMD_MASK;
 8000f3c:	200f      	movs	r0, #15
 8000f3e:	7c21      	ldrb	r1, [r4, #16]
 8000f40:	4381      	bics	r1, r0
            p.uart_cmd[1] = (p.uart_RX[0] << 7) | (p.uart_RX[1]);
 8000f42:	01d8      	lsls	r0, r3, #7
            p.uart_cmd[0] = p.uart_RX[2] & CMD_MASK;
 8000f44:	8321      	strh	r1, [r4, #24]
            p.uart_cmd[1] = (p.uart_RX[0] << 7) | (p.uart_RX[1]);
 8000f46:	4310      	orrs	r0, r2
 8000f48:	e054      	b.n	8000ff4 <foc_loop+0x488>
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	200000d8 	.word	0x200000d8
 8000f50:	48001400 	.word	0x48001400
 8000f54:	20000208 	.word	0x20000208
 8000f58:	200000de 	.word	0x200000de
 8000f5c:	200000dc 	.word	0x200000dc
 8000f60:	200000e0 	.word	0x200000e0
 8000f64:	200000e4 	.word	0x200000e4
 8000f68:	fffff7fd 	.word	0xfffff7fd
 8000f6c:	200000d0 	.word	0x200000d0
 8000f70:	200000ac 	.word	0x200000ac
 8000f74:	200000a8 	.word	0x200000a8
 8000f78:	fffff80a 	.word	0xfffff80a
 8000f7c:	200000b4 	.word	0x200000b4
 8000f80:	200000b0 	.word	0x200000b0
 8000f84:	fffff804 	.word	0xfffff804
 8000f88:	200000bc 	.word	0x200000bc
 8000f8c:	200000b8 	.word	0x200000b8
 8000f90:	20000098 	.word	0x20000098
 8000f94:	080061e4 	.word	0x080061e4
 8000f98:	0000ddb4 	.word	0x0000ddb4
 8000f9c:	0000aaab 	.word	0x0000aaab
 8000fa0:	20000090 	.word	0x20000090
 8000fa4:	2000009c 	.word	0x2000009c
 8000fa8:	200000a0 	.word	0x200000a0
 8000fac:	200000a2 	.word	0x200000a2
 8000fb0:	20000094 	.word	0x20000094
 8000fb4:	00007fff 	.word	0x00007fff
 8000fb8:	ffff8000 	.word	0xffff8000
 8000fbc:	200000a4 	.word	0x200000a4
 8000fc0:	200000c0 	.word	0x200000c0
 8000fc4:	200000c2 	.word	0x200000c2
 8000fc8:	200000c8 	.word	0x200000c8
 8000fcc:	200000c4 	.word	0x200000c4
 8000fd0:	200000cc 	.word	0x200000cc
 8000fd4:	4088fc00 	.word	0x4088fc00
 8000fd8:	20000088 	.word	0x20000088
 8000fdc:	2000008a 	.word	0x2000008a
 8000fe0:	2000008c 	.word	0x2000008c
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	200000e2 	.word	0x200000e2
 8000fec:	40012c00 	.word	0x40012c00
 8000ff0:	200002fc 	.word	0x200002fc
            p.uart_cmd[1] = (p.uart_RX[1] << 7) | (p.uart_RX[2]);
 8000ff4:	8360      	strh	r0, [r4, #26]
        p.uart_cmd[1] = pad14(p.uart_cmd[1]);
 8000ff6:	f000 fe5b 	bl	8001cb0 <pad14>
        if (p.uart_cmd[0] == CMD_SET_VOLTAGE) {
 8000ffa:	2218      	movs	r2, #24
 8000ffc:	5ea3      	ldrsh	r3, [r4, r2]
        p.uart_cmd[1] = pad14(p.uart_cmd[1]);
 8000ffe:	8360      	strh	r0, [r4, #26]
        if (p.uart_cmd[0] == CMD_SET_VOLTAGE) {
 8001000:	2b80      	cmp	r3, #128	; 0x80
 8001002:	d100      	bne.n	8001006 <foc_loop+0x49a>
 8001004:	e08f      	b.n	8001126 <foc_loop+0x5ba>
        } else if (p.uart_cmd[0] == CMD_SET_POSITION) {
 8001006:	2ba0      	cmp	r3, #160	; 0xa0
 8001008:	d100      	bne.n	800100c <foc_loop+0x4a0>
 800100a:	e0a0      	b.n	800114e <foc_loop+0x5e2>
        p.uart_TX[0] = (uint8_t)(V_u >> 9) & 0b01111111;
 800100c:	237f      	movs	r3, #127	; 0x7f
 800100e:	683a      	ldr	r2, [r7, #0]
        RS485_SET_TX;
 8001010:	2090      	movs	r0, #144	; 0x90
        p.uart_TX[0] = (uint8_t)(V_u >> 9) & 0b01111111;
 8001012:	1251      	asrs	r1, r2, #9
        p.uart_TX[1] = (uint8_t)(V_u >> 2) & 0b01111111;
 8001014:	1092      	asrs	r2, r2, #2
 8001016:	401a      	ands	r2, r3
 8001018:	7162      	strb	r2, [r4, #5]
        p.uart_TX[2] = (uint8_t)(V_v >> 9) & 0b01111111;
 800101a:	9a03      	ldr	r2, [sp, #12]
        p.uart_TX[0] = (uint8_t)(V_u >> 9) & 0b01111111;
 800101c:	4019      	ands	r1, r3
        p.uart_TX[2] = (uint8_t)(V_v >> 9) & 0b01111111;
 800101e:	6812      	ldr	r2, [r2, #0]
        p.uart_TX[0] = (uint8_t)(V_u >> 9) & 0b01111111;
 8001020:	7121      	strb	r1, [r4, #4]
        p.uart_TX[2] = (uint8_t)(V_v >> 9) & 0b01111111;
 8001022:	1251      	asrs	r1, r2, #9
        p.uart_TX[3] = (uint8_t)(V_v >> 2) & 0b01111111;
 8001024:	1092      	asrs	r2, r2, #2
 8001026:	401a      	ands	r2, r3
 8001028:	71e2      	strb	r2, [r4, #7]
        p.uart_TX[4] = (uint8_t)(V_w >> 9) & 0b01111111;
 800102a:	682a      	ldr	r2, [r5, #0]
        p.uart_TX[2] = (uint8_t)(V_v >> 9) & 0b01111111;
 800102c:	4019      	ands	r1, r3
 800102e:	71a1      	strb	r1, [r4, #6]
        p.uart_TX[4] = (uint8_t)(V_w >> 9) & 0b01111111;
 8001030:	1251      	asrs	r1, r2, #9
        p.uart_TX[5] = (uint8_t)(V_w >> 2) & 0b01111111;
 8001032:	1092      	asrs	r2, r2, #2
 8001034:	401a      	ands	r2, r3
 8001036:	7262      	strb	r2, [r4, #9]
        p.uart_TX[6] = (uint8_t)((D_u+1) >> 0) & 0b01111111;
 8001038:	9a04      	ldr	r2, [sp, #16]
        p.uart_TX[4] = (uint8_t)(V_w >> 9) & 0b01111111;
 800103a:	4019      	ands	r1, r3
        p.uart_TX[6] = (uint8_t)((D_u+1) >> 0) & 0b01111111;
 800103c:	8812      	ldrh	r2, [r2, #0]
        p.uart_TX[4] = (uint8_t)(V_w >> 9) & 0b01111111;
 800103e:	7221      	strb	r1, [r4, #8]
        p.uart_TX[6] = (uint8_t)((D_u+1) >> 0) & 0b01111111;
 8001040:	3201      	adds	r2, #1
 8001042:	401a      	ands	r2, r3
 8001044:	72a2      	strb	r2, [r4, #10]
        p.uart_TX[7] = (uint8_t)((D_v+1) >> 0) & 0b01111111;
 8001046:	9a05      	ldr	r2, [sp, #20]
        RS485_SET_TX;
 8001048:	2102      	movs	r1, #2
        p.uart_TX[7] = (uint8_t)((D_v+1) >> 0) & 0b01111111;
 800104a:	8812      	ldrh	r2, [r2, #0]
        RS485_SET_TX;
 800104c:	05c0      	lsls	r0, r0, #23
        p.uart_TX[7] = (uint8_t)((D_v+1) >> 0) & 0b01111111;
 800104e:	3201      	adds	r2, #1
 8001050:	401a      	ands	r2, r3
 8001052:	72e2      	strb	r2, [r4, #11]
        p.uart_TX[8] = (uint8_t)((D_w+1) >> 0) & 0b01111111;
 8001054:	9a07      	ldr	r2, [sp, #28]
 8001056:	8812      	ldrh	r2, [r2, #0]
 8001058:	3201      	adds	r2, #1
 800105a:	4013      	ands	r3, r2
 800105c:	7323      	strb	r3, [r4, #12]
        p.uart_TX[9] = MIN_INT8;
 800105e:	2380      	movs	r3, #128	; 0x80
        RS485_SET_TX;
 8001060:	2201      	movs	r2, #1
        p.uart_TX[9] = MIN_INT8;
 8001062:	7363      	strb	r3, [r4, #13]
        RS485_SET_TX;
 8001064:	f001 fc30 	bl	80028c8 <HAL_GPIO_WritePin>
        HAL_UART_Transmit_DMA(&huart1, p.uart_TX, 10); // DMA channel 4
 8001068:	220a      	movs	r2, #10
 800106a:	4640      	mov	r0, r8
 800106c:	1d21      	adds	r1, r4, #4
 800106e:	f003 fcd5 	bl	8004a1c <HAL_UART_Transmit_DMA>
        p.uart_idle = 0;
 8001072:	233e      	movs	r3, #62	; 0x3e
 8001074:	2200      	movs	r2, #0
 8001076:	54e2      	strb	r2, [r4, r3]
    if (p.print_flag) { // 100Hz clock
 8001078:	233c      	movs	r3, #60	; 0x3c
 800107a:	5ce3      	ldrb	r3, [r4, r3]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d100      	bne.n	8001082 <foc_loop+0x516>
 8001080:	e580      	b.n	8000b84 <foc_loop+0x18>
        cont_angle_prev = cont_angle;
 8001082:	9a08      	ldr	r2, [sp, #32]
 8001084:	4b34      	ldr	r3, [pc, #208]	; (8001158 <foc_loop+0x5ec>)
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	601a      	str	r2, [r3, #0]
        count = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	465a      	mov	r2, fp
 800108e:	6013      	str	r3, [r2, #0]
        uart_watchdog++;
 8001090:	4a32      	ldr	r2, [pc, #200]	; (800115c <foc_loop+0x5f0>)
 8001092:	7813      	ldrb	r3, [r2, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b2db      	uxtb	r3, r3
        if (uart_watchdog > 5) {
 8001098:	2b05      	cmp	r3, #5
 800109a:	d900      	bls.n	800109e <foc_loop+0x532>
            uart_watchdog = 5;
 800109c:	2305      	movs	r3, #5
 800109e:	7013      	strb	r3, [r2, #0]
        p.print_flag = 0;
 80010a0:	233c      	movs	r3, #60	; 0x3c
 80010a2:	2200      	movs	r2, #0
 80010a4:	54e2      	strb	r2, [r4, r3]
 80010a6:	e56d      	b.n	8000b84 <foc_loop+0x18>
        }else if(!reverse){ //don't know why switching the phases doesn't make it reverse
 80010a8:	4a2d      	ldr	r2, [pc, #180]	; (8001160 <foc_loop+0x5f4>)
 80010aa:	7812      	ldrb	r2, [r2, #0]
 80010ac:	2a00      	cmp	r2, #0
 80010ae:	d11d      	bne.n	80010ec <foc_loop+0x580>
            TIM1->CCR1 = D_u;
 80010b0:	4649      	mov	r1, r9
 80010b2:	4a2c      	ldr	r2, [pc, #176]	; (8001164 <foc_loop+0x5f8>)
 80010b4:	6351      	str	r1, [r2, #52]	; 0x34
            TIM1->CCR2 = D_v;
 80010b6:	4641      	mov	r1, r8
 80010b8:	6391      	str	r1, [r2, #56]	; 0x38
            TIM1->CCR3 = D_w;
 80010ba:	63d3      	str	r3, [r2, #60]	; 0x3c
 80010bc:	e712      	b.n	8000ee4 <foc_loop+0x378>
        } else if (m_angle < 8192 && m_angle_prev > 24576) {
 80010be:	4293      	cmp	r3, r2
 80010c0:	d300      	bcc.n	80010c4 <foc_loop+0x558>
 80010c2:	e5a6      	b.n	8000c12 <foc_loop+0xa6>
 80010c4:	22c0      	movs	r2, #192	; 0xc0
 80010c6:	01d2      	lsls	r2, r2, #7
 80010c8:	4290      	cmp	r0, r2
 80010ca:	d800      	bhi.n	80010ce <foc_loop+0x562>
 80010cc:	e5a1      	b.n	8000c12 <foc_loop+0xa6>
            revs += 32768;
 80010ce:	2680      	movs	r6, #128	; 0x80
 80010d0:	0236      	lsls	r6, r6, #8
 80010d2:	46b4      	mov	ip, r6
 80010d4:	4824      	ldr	r0, [pc, #144]	; (8001168 <foc_loop+0x5fc>)
 80010d6:	6802      	ldr	r2, [r0, #0]
 80010d8:	4462      	add	r2, ip
 80010da:	6002      	str	r2, [r0, #0]
 80010dc:	e59b      	b.n	8000c16 <foc_loop+0xaa>
            revs -= 32768;
 80010de:	4e23      	ldr	r6, [pc, #140]	; (800116c <foc_loop+0x600>)
 80010e0:	4821      	ldr	r0, [pc, #132]	; (8001168 <foc_loop+0x5fc>)
 80010e2:	46b4      	mov	ip, r6
 80010e4:	6802      	ldr	r2, [r0, #0]
 80010e6:	4462      	add	r2, ip
 80010e8:	6002      	str	r2, [r0, #0]
 80010ea:	e594      	b.n	8000c16 <foc_loop+0xaa>
            TIM1->CCR1 = D_u;
 80010ec:	4649      	mov	r1, r9
 80010ee:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <foc_loop+0x5f8>)
 80010f0:	6351      	str	r1, [r2, #52]	; 0x34
            TIM1->CCR2 = D_w;
 80010f2:	6393      	str	r3, [r2, #56]	; 0x38
            TIM1->CCR3 = D_v;
 80010f4:	4643      	mov	r3, r8
 80010f6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80010f8:	e6f4      	b.n	8000ee4 <foc_loop+0x378>
            p.uart_cmd[0] = p.uart_RX[0] & CMD_MASK;
 80010fa:	220f      	movs	r2, #15
 80010fc:	4393      	bics	r3, r2
 80010fe:	8323      	strh	r3, [r4, #24]
            p.uart_cmd[1] = (p.uart_RX[1] << 7) | (p.uart_RX[2]);
 8001100:	7be3      	ldrb	r3, [r4, #15]
 8001102:	7c20      	ldrb	r0, [r4, #16]
 8001104:	01db      	lsls	r3, r3, #7
 8001106:	4318      	orrs	r0, r3
 8001108:	e774      	b.n	8000ff4 <foc_loop+0x488>
        if(abs16(I_v) > I_phase) I_phase = abs16(I_v);
 800110a:	464b      	mov	r3, r9
 800110c:	2000      	movs	r0, #0
 800110e:	5e18      	ldrsh	r0, [r3, r0]
 8001110:	f000 fdc8 	bl	8001ca4 <abs16>
 8001114:	8030      	strh	r0, [r6, #0]
 8001116:	e5bb      	b.n	8000c90 <foc_loop+0x124>
        if(abs16(I_w) > I_phase) I_phase = abs16(I_w);
 8001118:	4643      	mov	r3, r8
 800111a:	2000      	movs	r0, #0
 800111c:	5e18      	ldrsh	r0, [r3, r0]
 800111e:	f000 fdc1 	bl	8001ca4 <abs16>
 8001122:	8030      	strh	r0, [r6, #0]
 8001124:	e5be      	b.n	8000ca4 <foc_loop+0x138>
            reverse = (p.uart_cmd[1] >> 13) & 1;
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <foc_loop+0x5f4>)
 8001128:	0483      	lsls	r3, r0, #18
 800112a:	0fdb      	lsrs	r3, r3, #31
 800112c:	7013      	strb	r3, [r2, #0]
            mag = reverse ? (~p.uart_cmd[1]) + 1 : p.uart_cmd[1]; // If negative, take the absolute value assuming two's complement
 800112e:	d10b      	bne.n	8001148 <foc_loop+0x5dc>
 8001130:	b280      	uxth	r0, r0
            I_q_des = mag >> 2;
 8001132:	9b06      	ldr	r3, [sp, #24]
 8001134:	0880      	lsrs	r0, r0, #2
 8001136:	8018      	strh	r0, [r3, #0]
 8001138:	e768      	b.n	800100c <foc_loop+0x4a0>
            p.uart_cmd[0] = p.uart_RX[1] & CMD_MASK;
 800113a:	210f      	movs	r1, #15
            p.uart_cmd[1] = (p.uart_RX[2] << 7) | (p.uart_RX[0]);
 800113c:	7c20      	ldrb	r0, [r4, #16]
            p.uart_cmd[0] = p.uart_RX[1] & CMD_MASK;
 800113e:	438a      	bics	r2, r1
            p.uart_cmd[1] = (p.uart_RX[2] << 7) | (p.uart_RX[0]);
 8001140:	01c0      	lsls	r0, r0, #7
            p.uart_cmd[0] = p.uart_RX[1] & CMD_MASK;
 8001142:	8322      	strh	r2, [r4, #24]
            p.uart_cmd[1] = (p.uart_RX[2] << 7) | (p.uart_RX[0]);
 8001144:	4318      	orrs	r0, r3
 8001146:	e755      	b.n	8000ff4 <foc_loop+0x488>
            mag = reverse ? (~p.uart_cmd[1]) + 1 : p.uart_cmd[1]; // If negative, take the absolute value assuming two's complement
 8001148:	4240      	negs	r0, r0
 800114a:	b280      	uxth	r0, r0
 800114c:	e7f1      	b.n	8001132 <foc_loop+0x5c6>
            cont_angle_des = p.uart_cmd[1] << 13;
 800114e:	4653      	mov	r3, sl
 8001150:	0340      	lsls	r0, r0, #13
 8001152:	6018      	str	r0, [r3, #0]
 8001154:	e75a      	b.n	800100c <foc_loop+0x4a0>
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	200000d4 	.word	0x200000d4
 800115c:	200000e8 	.word	0x200000e8
 8001160:	200000e2 	.word	0x200000e2
 8001164:	40012c00 	.word	0x40012c00
 8001168:	200000e4 	.word	0x200000e4
 800116c:	ffff8000 	.word	0xffff8000

08001170 <__io_putchar>:
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

// overrides printf
int __io_putchar(int ch) {
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001170:	2301      	movs	r3, #1
int __io_putchar(int ch) {
 8001172:	b500      	push	{lr}
 8001174:	b083      	sub	sp, #12
 8001176:	9001      	str	r0, [sp, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001178:	2201      	movs	r2, #1
 800117a:	425b      	negs	r3, r3
 800117c:	a901      	add	r1, sp, #4
 800117e:	4803      	ldr	r0, [pc, #12]	; (800118c <__io_putchar+0x1c>)
 8001180:	f004 f8a0 	bl	80052c4 <HAL_UART_Transmit>
    return ch;
 8001184:	9801      	ldr	r0, [sp, #4]
}
 8001186:	b003      	add	sp, #12
 8001188:	bd00      	pop	{pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	200002fc 	.word	0x200002fc

08001190 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback whenever a timer rolls over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
    if (htim == &htim2) { // 100Hz
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001192:	4283      	cmp	r3, r0
 8001194:	d000      	beq.n	8001198 <HAL_TIM_PeriodElapsedCallback+0x8>
        p.print_flag = 1;
    }
}
 8001196:	4770      	bx	lr
        p.print_flag = 1;
 8001198:	223c      	movs	r2, #60	; 0x3c
 800119a:	2101      	movs	r1, #1
 800119c:	4b02      	ldr	r3, [pc, #8]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800119e:	5499      	strb	r1, [r3, r2]
}
 80011a0:	e7f9      	b.n	8001196 <HAL_TIM_PeriodElapsedCallback+0x6>
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	200002b4 	.word	0x200002b4
 80011a8:	20000384 	.word	0x20000384

080011ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) { // gets called before all bits finish
    p.uart_watchdog = 0;
 80011ac:	2240      	movs	r2, #64	; 0x40
 80011ae:	2100      	movs	r1, #0
 80011b0:	4b01      	ldr	r3, [pc, #4]	; (80011b8 <HAL_UART_RxCpltCallback+0xc>)
 80011b2:	5499      	strb	r1, [r3, r2]
}
 80011b4:	4770      	bx	lr
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	20000384 	.word	0x20000384

080011bc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
    RS485_SET_RX;
 80011bc:	2090      	movs	r0, #144	; 0x90
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80011be:	b510      	push	{r4, lr}
    RS485_SET_RX;
 80011c0:	2200      	movs	r2, #0
 80011c2:	2102      	movs	r1, #2
 80011c4:	05c0      	lsls	r0, r0, #23
 80011c6:	f001 fb7f 	bl	80028c8 <HAL_GPIO_WritePin>
    HAL_UART_Receive_IT(&huart1, p.uart_RX, UARTSIZE);
 80011ca:	4903      	ldr	r1, [pc, #12]	; (80011d8 <HAL_UART_TxCpltCallback+0x1c>)
 80011cc:	220a      	movs	r2, #10
 80011ce:	4803      	ldr	r0, [pc, #12]	; (80011dc <HAL_UART_TxCpltCallback+0x20>)
 80011d0:	310e      	adds	r1, #14
 80011d2:	f004 fadb 	bl	800578c <HAL_UART_Receive_IT>

}
 80011d6:	bd10      	pop	{r4, pc}
 80011d8:	20000384 	.word	0x20000384
 80011dc:	200002fc 	.word	0x200002fc

080011e0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) { // receive overrun error happens once in a while, just restart RX
    RS485_SET_RX;
 80011e0:	2090      	movs	r0, #144	; 0x90
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) { // receive overrun error happens once in a while, just restart RX
 80011e2:	b510      	push	{r4, lr}
    RS485_SET_RX;
 80011e4:	2200      	movs	r2, #0
 80011e6:	2102      	movs	r1, #2
 80011e8:	05c0      	lsls	r0, r0, #23
 80011ea:	f001 fb6d 	bl	80028c8 <HAL_GPIO_WritePin>
    HAL_UART_Receive_IT(&huart1, p.uart_RX, UARTSIZE);
 80011ee:	4906      	ldr	r1, [pc, #24]	; (8001208 <HAL_UART_ErrorCallback+0x28>)
 80011f0:	220a      	movs	r2, #10
 80011f2:	310e      	adds	r1, #14
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_UART_ErrorCallback+0x2c>)
 80011f6:	f004 fac9 	bl	800578c <HAL_UART_Receive_IT>
    LED_RED;
 80011fa:	2201      	movs	r2, #1
 80011fc:	2101      	movs	r1, #1
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <HAL_UART_ErrorCallback+0x30>)
 8001200:	f001 fb62 	bl	80028c8 <HAL_GPIO_WritePin>
}
 8001204:	bd10      	pop	{r4, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	20000384 	.word	0x20000384
 800120c:	200002fc 	.word	0x200002fc
 8001210:	48001400 	.word	0x48001400

08001214 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
    if (hadc->Instance == ADC1) {
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <HAL_ADC_ConvCpltCallback+0x20>)
 8001216:	6802      	ldr	r2, [r0, #0]
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001218:	b510      	push	{r4, lr}
    if (hadc->Instance == ADC1) {
 800121a:	429a      	cmp	r2, r3
 800121c:	d000      	beq.n	8001220 <HAL_ADC_ConvCpltCallback+0xc>
        // End of conversion actions
        LED_GREEN;
        p.adc_conversion_flag = 1; //allow main loop to continiue
    }
}
 800121e:	bd10      	pop	{r4, pc}
        LED_GREEN;
 8001220:	2200      	movs	r2, #0
 8001222:	2101      	movs	r1, #1
 8001224:	4804      	ldr	r0, [pc, #16]	; (8001238 <HAL_ADC_ConvCpltCallback+0x24>)
 8001226:	f001 fb4f 	bl	80028c8 <HAL_GPIO_WritePin>
        p.adc_conversion_flag = 1; //allow main loop to continiue
 800122a:	223f      	movs	r2, #63	; 0x3f
 800122c:	2101      	movs	r1, #1
 800122e:	4b03      	ldr	r3, [pc, #12]	; (800123c <HAL_ADC_ConvCpltCallback+0x28>)
 8001230:	5499      	strb	r1, [r3, r2]
}
 8001232:	e7f4      	b.n	800121e <HAL_ADC_ConvCpltCallback+0xa>
 8001234:	40012400 	.word	0x40012400
 8001238:	48001400 	.word	0x48001400
 800123c:	20000384 	.word	0x20000384

08001240 <Error_Handler>:
 * @retval None
 */
void Error_Handler(void) {
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    LED_RED;
 8001240:	2201      	movs	r2, #1
 8001242:	2101      	movs	r1, #1
void Error_Handler(void) {
 8001244:	b510      	push	{r4, lr}
    LED_RED;
 8001246:	4808      	ldr	r0, [pc, #32]	; (8001268 <Error_Handler+0x28>)
 8001248:	f001 fb3e 	bl	80028c8 <HAL_GPIO_WritePin>
    printf("ERROR HANDLER \n");
 800124c:	4807      	ldr	r0, [pc, #28]	; (800126c <Error_Handler+0x2c>)
 800124e:	f004 fbef 	bl	8005a30 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001252:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <Error_Handler+0x30>)
 800125a:	4a06      	ldr	r2, [pc, #24]	; (8001274 <Error_Handler+0x34>)
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	e7fd      	b.n	8001262 <Error_Handler+0x22>
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	48001400 	.word	0x48001400
 800126c:	080063e4 	.word	0x080063e4
 8001270:	e000ed00 	.word	0xe000ed00
 8001274:	05fa0004 	.word	0x05fa0004

08001278 <SystemClock_Config>:
void SystemClock_Config(void) {
 8001278:	b510      	push	{r4, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127c:	222c      	movs	r2, #44	; 0x2c
 800127e:	2100      	movs	r1, #0
 8001280:	a809      	add	r0, sp, #36	; 0x24
 8001282:	f004 fbdf 	bl	8005a44 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001286:	2210      	movs	r2, #16
 8001288:	2100      	movs	r1, #0
 800128a:	4668      	mov	r0, sp
 800128c:	f004 fbda 	bl	8005a44 <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001290:	2210      	movs	r2, #16
 8001292:	2100      	movs	r1, #0
 8001294:	a804      	add	r0, sp, #16
 8001296:	f004 fbd5 	bl	8005a44 <memset>
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI14;
 800129a:	2312      	movs	r3, #18
 800129c:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129e:	3b11      	subs	r3, #17
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a0:	2410      	movs	r4, #16
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a2:	930b      	str	r3, [sp, #44]	; 0x2c
    RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80012a4:	930d      	str	r3, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16; // can do RCC_PLL_MUL16 for 64MHz clock speed (affects PWM)
 80012a6:	23e0      	movs	r3, #224	; 0xe0
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a8:	940c      	str	r4, [sp, #48]	; 0x30
    RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80012aa:	940e      	str	r4, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16; // can do RCC_PLL_MUL16 for 64MHz clock speed (affects PWM)
 80012ac:	039b      	lsls	r3, r3, #14
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ae:	3c0e      	subs	r4, #14
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012b0:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b2:	9410      	str	r4, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16; // can do RCC_PLL_MUL16 for 64MHz clock speed (affects PWM)
 80012b4:	9312      	str	r3, [sp, #72]	; 0x48
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012b6:	f001 ff05 	bl	80030c4 <HAL_RCC_OscConfig>
 80012ba:	2800      	cmp	r0, #0
 80012bc:	d115      	bne.n	80012ea <SystemClock_Config+0x72>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80012be:	2307      	movs	r3, #7
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c0:	9002      	str	r0, [sp, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c2:	9003      	str	r0, [sp, #12]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80012c4:	2101      	movs	r1, #1
 80012c6:	4668      	mov	r0, sp
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80012c8:	9300      	str	r3, [sp, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ca:	9401      	str	r4, [sp, #4]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80012cc:	f002 f97e 	bl	80035cc <HAL_RCC_ClockConfig>
 80012d0:	2800      	cmp	r0, #0
 80012d2:	d10a      	bne.n	80012ea <SystemClock_Config+0x72>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
 80012d4:	2321      	movs	r3, #33	; 0x21
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80012d6:	9006      	str	r0, [sp, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80012d8:	9007      	str	r0, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80012da:	a804      	add	r0, sp, #16
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
 80012dc:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80012de:	f002 fa11 	bl	8003704 <HAL_RCCEx_PeriphCLKConfig>
 80012e2:	2800      	cmp	r0, #0
 80012e4:	d101      	bne.n	80012ea <SystemClock_Config+0x72>
}
 80012e6:	b014      	add	sp, #80	; 0x50
 80012e8:	bd10      	pop	{r4, pc}
        Error_Handler();
 80012ea:	f7ff ffa9 	bl	8001240 <Error_Handler>
 80012ee:	46c0      	nop			; (mov r8, r8)

080012f0 <main>:
int main(void) {
 80012f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f2:	b0a9      	sub	sp, #164	; 0xa4
    HAL_Init();
 80012f4:	f000 fd36 	bl	8001d64 <HAL_Init>
    SystemClock_Config();
 80012f8:	f7ff ffbe 	bl	8001278 <SystemClock_Config>
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	2214      	movs	r2, #20
 80012fe:	2100      	movs	r1, #0
 8001300:	a820      	add	r0, sp, #128	; 0x80
 8001302:	f004 fb9f 	bl	8005a44 <memset>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	4ce5      	ldr	r4, [pc, #916]	; (80016a0 <main+0x3b0>)
 800130a:	03d2      	lsls	r2, r2, #15
 800130c:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 800130e:	21c3      	movs	r1, #195	; 0xc3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001310:	4313      	orrs	r3, r2
 8001312:	6163      	str	r3, [r4, #20]
 8001314:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 8001316:	48e3      	ldr	r0, [pc, #908]	; (80016a4 <main+0x3b4>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001318:	4013      	ands	r3, r2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	6963      	ldr	r3, [r4, #20]
 8001322:	0292      	lsls	r2, r2, #10
 8001324:	4313      	orrs	r3, r2
 8001326:	6163      	str	r3, [r4, #20]
 8001328:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	4013      	ands	r3, r2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	9303      	str	r3, [sp, #12]
 8001332:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	6963      	ldr	r3, [r4, #20]
 8001336:	02d2      	lsls	r2, r2, #11
 8001338:	4313      	orrs	r3, r2
 800133a:	6163      	str	r3, [r4, #20]
 800133c:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2601      	movs	r6, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4013      	ands	r3, r2
 8001342:	9304      	str	r3, [sp, #16]
    HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 8001348:	f001 fabe 	bl	80028c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(USART_DE_GPIO_Port, USART_DE_Pin, GPIO_PIN_RESET);
 800134c:	2090      	movs	r0, #144	; 0x90
 800134e:	2200      	movs	r2, #0
 8001350:	2102      	movs	r1, #2
 8001352:	05c0      	lsls	r0, r0, #23
 8001354:	f001 fab8 	bl	80028c8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin;
 8001358:	23c3      	movs	r3, #195	; 0xc3
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800135a:	48d2      	ldr	r0, [pc, #840]	; (80016a4 <main+0x3b4>)
 800135c:	a920      	add	r1, sp, #128	; 0x80
    GPIO_InitStruct.Pin = LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin;
 800135e:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	9621      	str	r6, [sp, #132]	; 0x84
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001366:	f001 f9b1 	bl	80026cc <HAL_GPIO_Init>
    HAL_GPIO_Init(USART_DE_GPIO_Port, &GPIO_InitStruct);
 800136a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = USART_DE_Pin;
 800136c:	2302      	movs	r3, #2
    HAL_GPIO_Init(USART_DE_GPIO_Port, &GPIO_InitStruct);
 800136e:	a920      	add	r1, sp, #128	; 0x80
 8001370:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART_DE_Pin;
 8001372:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001374:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	9621      	str	r6, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(USART_DE_GPIO_Port, &GPIO_InitStruct);
 800137a:	f001 f9a7 	bl	80026cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OC_SEL_Pin;
 800137e:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8001380:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = OC_SEL_Pin;
 8001382:	011b      	lsls	r3, r3, #4
    HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8001384:	a920      	add	r1, sp, #128	; 0x80
 8001386:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = OC_SEL_Pin;
 8001388:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138a:	9521      	str	r5, [sp, #132]	; 0x84
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	9522      	str	r5, [sp, #136]	; 0x88
    HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 800138e:	f001 f99d 	bl	80026cc <HAL_GPIO_Init>
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001392:	6963      	ldr	r3, [r4, #20]
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001394:	2200      	movs	r2, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001396:	4333      	orrs	r3, r6
 8001398:	6163      	str	r3, [r4, #20]
 800139a:	6963      	ldr	r3, [r4, #20]
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800139c:	2100      	movs	r1, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 800139e:	4033      	ands	r3, r6
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013a0:	2009      	movs	r0, #9
    __HAL_RCC_DMA1_CLK_ENABLE();
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013a6:	f001 f831 	bl	800240c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013aa:	2009      	movs	r0, #9
 80013ac:	f001 f860 	bl	8002470 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	200b      	movs	r0, #11
 80013b6:	f001 f829 	bl	800240c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80013ba:	200b      	movs	r0, #11
 80013bc:	f001 f858 	bl	8002470 <HAL_NVIC_EnableIRQ>
    hi2c1.Instance = I2C1;
 80013c0:	4cb9      	ldr	r4, [pc, #740]	; (80016a8 <main+0x3b8>)
 80013c2:	4bba      	ldr	r3, [pc, #744]	; (80016ac <main+0x3bc>)
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80013c4:	0020      	movs	r0, r4
    hi2c1.Instance = I2C1;
 80013c6:	6023      	str	r3, [r4, #0]
    hi2c1.Init.Timing = 0x2000090E;
 80013c8:	4bb9      	ldr	r3, [pc, #740]	; (80016b0 <main+0x3c0>)
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ca:	60e6      	str	r6, [r4, #12]
    hi2c1.Init.Timing = 0x2000090E;
 80013cc:	6063      	str	r3, [r4, #4]
    hi2c1.Init.OwnAddress1 = 18;
 80013ce:	2312      	movs	r3, #18
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d0:	6125      	str	r5, [r4, #16]
    hi2c1.Init.OwnAddress1 = 18;
 80013d2:	60a3      	str	r3, [r4, #8]
    hi2c1.Init.OwnAddress2 = 0;
 80013d4:	6165      	str	r5, [r4, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013d6:	61a5      	str	r5, [r4, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d8:	61e5      	str	r5, [r4, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013da:	6225      	str	r5, [r4, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80013dc:	f001 fa7a 	bl	80028d4 <HAL_I2C_Init>
 80013e0:	2800      	cmp	r0, #0
 80013e2:	d000      	beq.n	80013e6 <main+0xf6>
 80013e4:	e1a6      	b.n	8001734 <main+0x444>
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80013e6:	2100      	movs	r1, #0
 80013e8:	0020      	movs	r0, r4
 80013ea:	f001 fe17 	bl	800301c <HAL_I2CEx_ConfigAnalogFilter>
 80013ee:	2800      	cmp	r0, #0
 80013f0:	d000      	beq.n	80013f4 <main+0x104>
 80013f2:	e19f      	b.n	8001734 <main+0x444>
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80013f4:	2100      	movs	r1, #0
 80013f6:	0020      	movs	r0, r4
 80013f8:	f001 fe36 	bl	8003068 <HAL_I2CEx_ConfigDigitalFilter>
 80013fc:	1e05      	subs	r5, r0, #0
 80013fe:	d000      	beq.n	8001402 <main+0x112>
 8001400:	e198      	b.n	8001734 <main+0x444>
    ADC_ChannelConfTypeDef sConfig = {0};
 8001402:	220c      	movs	r2, #12
 8001404:	2100      	movs	r1, #0
 8001406:	a809      	add	r0, sp, #36	; 0x24
 8001408:	f004 fb1c 	bl	8005a44 <memset>
    hadc.Instance = ADC1;
 800140c:	4ca9      	ldr	r4, [pc, #676]	; (80016b4 <main+0x3c4>)
 800140e:	4baa      	ldr	r3, [pc, #680]	; (80016b8 <main+0x3c8>)
    hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001410:	2704      	movs	r7, #4
    hadc.Instance = ADC1;
 8001412:	6023      	str	r3, [r4, #0]
    hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	6223      	str	r3, [r4, #32]
    hadc.Init.DMAContinuousRequests = DISABLE;
 800141a:	2324      	movs	r3, #36	; 0x24
    if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800141c:	0020      	movs	r0, r4
    hadc.Init.LowPowerAutoWait = DISABLE;
 800141e:	61a5      	str	r5, [r4, #24]
    hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001420:	6065      	str	r5, [r4, #4]
    hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001422:	60a5      	str	r5, [r4, #8]
    hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001424:	60e5      	str	r5, [r4, #12]
    hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001426:	6126      	str	r6, [r4, #16]
    hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001428:	6167      	str	r7, [r4, #20]
    hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 800142a:	61e5      	str	r5, [r4, #28]
    hadc.Init.DMAContinuousRequests = DISABLE;
 800142c:	54e5      	strb	r5, [r4, r3]
    hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800142e:	62a6      	str	r6, [r4, #40]	; 0x28
    if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8001430:	f000 fd9c 	bl	8001f6c <HAL_ADC_Init>
 8001434:	2800      	cmp	r0, #0
 8001436:	d000      	beq.n	800143a <main+0x14a>
 8001438:	e17c      	b.n	8001734 <main+0x444>
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	015b      	lsls	r3, r3, #5
 800143e:	930a      	str	r3, [sp, #40]	; 0x28
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001440:	2380      	movs	r3, #128	; 0x80
    sConfig.Channel = ADC_CHANNEL_0;
 8001442:	9009      	str	r0, [sp, #36]	; 0x24
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001444:	055b      	lsls	r3, r3, #21
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001446:	0020      	movs	r0, r4
 8001448:	a909      	add	r1, sp, #36	; 0x24
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800144a:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800144c:	f000 fef0 	bl	8002230 <HAL_ADC_ConfigChannel>
 8001450:	2800      	cmp	r0, #0
 8001452:	d000      	beq.n	8001456 <main+0x166>
 8001454:	e16e      	b.n	8001734 <main+0x444>
    sConfig.Channel = ADC_CHANNEL_3;
 8001456:	2303      	movs	r3, #3
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001458:	0020      	movs	r0, r4
 800145a:	a909      	add	r1, sp, #36	; 0x24
    sConfig.Channel = ADC_CHANNEL_3;
 800145c:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800145e:	f000 fee7 	bl	8002230 <HAL_ADC_ConfigChannel>
 8001462:	2800      	cmp	r0, #0
 8001464:	d000      	beq.n	8001468 <main+0x178>
 8001466:	e165      	b.n	8001734 <main+0x444>
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001468:	0020      	movs	r0, r4
 800146a:	a909      	add	r1, sp, #36	; 0x24
    sConfig.Channel = ADC_CHANNEL_4;
 800146c:	9709      	str	r7, [sp, #36]	; 0x24
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800146e:	f000 fedf 	bl	8002230 <HAL_ADC_ConfigChannel>
 8001472:	2800      	cmp	r0, #0
 8001474:	d000      	beq.n	8001478 <main+0x188>
 8001476:	e15d      	b.n	8001734 <main+0x444>
    sConfig.Channel = ADC_CHANNEL_9;
 8001478:	2309      	movs	r3, #9
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800147a:	0020      	movs	r0, r4
 800147c:	a909      	add	r1, sp, #36	; 0x24
    sConfig.Channel = ADC_CHANNEL_9;
 800147e:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001480:	f000 fed6 	bl	8002230 <HAL_ADC_ConfigChannel>
 8001484:	2800      	cmp	r0, #0
 8001486:	d000      	beq.n	800148a <main+0x19a>
 8001488:	e154      	b.n	8001734 <main+0x444>
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800148a:	2310      	movs	r3, #16
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800148c:	0020      	movs	r0, r4
 800148e:	a909      	add	r1, sp, #36	; 0x24
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001490:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001492:	f000 fecd 	bl	8002230 <HAL_ADC_ConfigChannel>
 8001496:	2800      	cmp	r0, #0
 8001498:	d000      	beq.n	800149c <main+0x1ac>
 800149a:	e14b      	b.n	8001734 <main+0x444>
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 800149c:	2311      	movs	r3, #17
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800149e:	0020      	movs	r0, r4
 80014a0:	a909      	add	r1, sp, #36	; 0x24
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014a2:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80014a4:	f000 fec4 	bl	8002230 <HAL_ADC_ConfigChannel>
 80014a8:	2800      	cmp	r0, #0
 80014aa:	d000      	beq.n	80014ae <main+0x1be>
 80014ac:	e142      	b.n	8001734 <main+0x444>
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ae:	22e0      	movs	r2, #224	; 0xe0
    hspi1.Instance = SPI1;
 80014b0:	4882      	ldr	r0, [pc, #520]	; (80016bc <main+0x3cc>)
 80014b2:	4b83      	ldr	r3, [pc, #524]	; (80016c0 <main+0x3d0>)
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b4:	00d2      	lsls	r2, r2, #3
    hspi1.Instance = SPI1;
 80014b6:	6003      	str	r3, [r0, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 80014b8:	2382      	movs	r3, #130	; 0x82
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ba:	60c2      	str	r2, [r0, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014bc:	2202      	movs	r2, #2
    hspi1.Init.Mode = SPI_MODE_MASTER;
 80014be:	005b      	lsls	r3, r3, #1
    hspi1.Init.CRCPolynomial = 7;
 80014c0:	2107      	movs	r1, #7
    hspi1.Init.Mode = SPI_MODE_MASTER;
 80014c2:	6043      	str	r3, [r0, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014c4:	2300      	movs	r3, #0
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014c6:	6102      	str	r2, [r0, #16]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 80014c8:	32ff      	adds	r2, #255	; 0xff
 80014ca:	32ff      	adds	r2, #255	; 0xff
 80014cc:	6182      	str	r2, [r0, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014ce:	3af9      	subs	r2, #249	; 0xf9
 80014d0:	3aff      	subs	r2, #255	; 0xff
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014d2:	6083      	str	r3, [r0, #8]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d4:	6143      	str	r3, [r0, #20]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014d6:	61c2      	str	r2, [r0, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d8:	6203      	str	r3, [r0, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014da:	6243      	str	r3, [r0, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014dc:	6283      	str	r3, [r0, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 80014de:	62c1      	str	r1, [r0, #44]	; 0x2c
    hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014e0:	6303      	str	r3, [r0, #48]	; 0x30
    hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014e2:	6342      	str	r2, [r0, #52]	; 0x34
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80014e4:	f002 fab6 	bl	8003a54 <HAL_SPI_Init>
 80014e8:	1e05      	subs	r5, r0, #0
 80014ea:	d000      	beq.n	80014ee <main+0x1fe>
 80014ec:	e122      	b.n	8001734 <main+0x444>
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ee:	2620      	movs	r6, #32
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f0:	2210      	movs	r2, #16
 80014f2:	2100      	movs	r1, #0
 80014f4:	a810      	add	r0, sp, #64	; 0x40
 80014f6:	f004 faa5 	bl	8005a44 <memset>
    TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014fa:	2214      	movs	r2, #20
 80014fc:	2100      	movs	r1, #0
 80014fe:	a814      	add	r0, sp, #80	; 0x50
 8001500:	f004 faa0 	bl	8005a44 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	2208      	movs	r2, #8
 8001506:	2100      	movs	r1, #0
 8001508:	a807      	add	r0, sp, #28
 800150a:	f004 fa9b 	bl	8005a44 <memset>
    TIM_OC_InitTypeDef sConfigOC = {0};
 800150e:	221c      	movs	r2, #28
 8001510:	2100      	movs	r1, #0
 8001512:	a819      	add	r0, sp, #100	; 0x64
 8001514:	f004 fa96 	bl	8005a44 <memset>
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001518:	2220      	movs	r2, #32
 800151a:	2100      	movs	r1, #0
 800151c:	a820      	add	r0, sp, #128	; 0x80
 800151e:	f004 fa91 	bl	8005a44 <memset>
    htim1.Instance = TIM1;
 8001522:	4c68      	ldr	r4, [pc, #416]	; (80016c4 <main+0x3d4>)
 8001524:	4b68      	ldr	r3, [pc, #416]	; (80016c8 <main+0x3d8>)
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001526:	0020      	movs	r0, r4
    htim1.Instance = TIM1;
 8001528:	6023      	str	r3, [r4, #0]
    htim1.Init.Period = MAX_DUTY;
 800152a:	4b68      	ldr	r3, [pc, #416]	; (80016cc <main+0x3dc>)
    htim1.Init.Prescaler = 0;
 800152c:	6065      	str	r5, [r4, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800152e:	60a6      	str	r6, [r4, #8]
    htim1.Init.Period = MAX_DUTY;
 8001530:	60e3      	str	r3, [r4, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	6125      	str	r5, [r4, #16]
    htim1.Init.RepetitionCounter = 0; // start with 0, then set RCR1 to create update event every other time on low edge
 8001534:	6165      	str	r5, [r4, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001536:	61a5      	str	r5, [r4, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001538:	f003 f894 	bl	8004664 <HAL_TIM_Base_Init>
 800153c:	2800      	cmp	r0, #0
 800153e:	d000      	beq.n	8001542 <main+0x252>
 8001540:	e0f8      	b.n	8001734 <main+0x444>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001542:	2380      	movs	r3, #128	; 0x80
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001544:	0020      	movs	r0, r4
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001546:	015b      	lsls	r3, r3, #5
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001548:	a910      	add	r1, sp, #64	; 0x40
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154a:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800154c:	f002 feb0 	bl	80042b0 <HAL_TIM_ConfigClockSource>
 8001550:	2800      	cmp	r0, #0
 8001552:	d000      	beq.n	8001556 <main+0x266>
 8001554:	e0ee      	b.n	8001734 <main+0x444>
    if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001556:	0020      	movs	r0, r4
 8001558:	f003 f8b0 	bl	80046bc <HAL_TIM_PWM_Init>
 800155c:	2800      	cmp	r0, #0
 800155e:	d000      	beq.n	8001562 <main+0x272>
 8001560:	e0e8      	b.n	8001734 <main+0x444>
    sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001562:	2305      	movs	r3, #5
 8001564:	9314      	str	r3, [sp, #80]	; 0x50
    sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8001566:	336b      	adds	r3, #107	; 0x6b
 8001568:	9315      	str	r3, [sp, #84]	; 0x54
    sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 800156a:	2380      	movs	r3, #128	; 0x80
    sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800156c:	9017      	str	r0, [sp, #92]	; 0x5c
    sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 800156e:	021b      	lsls	r3, r3, #8
    sSlaveConfig.TriggerFilter = 0;
 8001570:	9018      	str	r0, [sp, #96]	; 0x60
    if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8001572:	a914      	add	r1, sp, #80	; 0x50
 8001574:	0020      	movs	r0, r4
    sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 8001576:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8001578:	f002 ff52 	bl	8004420 <HAL_TIM_SlaveConfigSynchro>
 800157c:	2800      	cmp	r0, #0
 800157e:	d000      	beq.n	8001582 <main+0x292>
 8001580:	e0d8      	b.n	8001734 <main+0x444>
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001582:	2380      	movs	r3, #128	; 0x80
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8001584:	0020      	movs	r0, r4
 8001586:	a907      	add	r1, sp, #28
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001588:	9607      	str	r6, [sp, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800158a:	9308      	str	r3, [sp, #32]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 800158c:	f003 f9b2 	bl	80048f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001590:	2800      	cmp	r0, #0
 8001592:	d000      	beq.n	8001596 <main+0x2a6>
 8001594:	e0ce      	b.n	8001734 <main+0x444>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001596:	2360      	movs	r3, #96	; 0x60
    sConfigOC.Pulse = 0;
 8001598:	901a      	str	r0, [sp, #104]	; 0x68
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159a:	901b      	str	r0, [sp, #108]	; 0x6c
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800159c:	901c      	str	r0, [sp, #112]	; 0x70
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159e:	901d      	str	r0, [sp, #116]	; 0x74
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015a0:	901e      	str	r0, [sp, #120]	; 0x78
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015a2:	901f      	str	r0, [sp, #124]	; 0x7c
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80015a4:	2200      	movs	r2, #0
 80015a6:	0020      	movs	r0, r4
 80015a8:	a919      	add	r1, sp, #100	; 0x64
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015aa:	9319      	str	r3, [sp, #100]	; 0x64
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80015ac:	f003 f8ee 	bl	800478c <HAL_TIM_PWM_ConfigChannel>
 80015b0:	2800      	cmp	r0, #0
 80015b2:	d000      	beq.n	80015b6 <main+0x2c6>
 80015b4:	e0be      	b.n	8001734 <main+0x444>
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80015b6:	2204      	movs	r2, #4
 80015b8:	0020      	movs	r0, r4
 80015ba:	a919      	add	r1, sp, #100	; 0x64
 80015bc:	f003 f8e6 	bl	800478c <HAL_TIM_PWM_ConfigChannel>
 80015c0:	2800      	cmp	r0, #0
 80015c2:	d000      	beq.n	80015c6 <main+0x2d6>
 80015c4:	e0b6      	b.n	8001734 <main+0x444>
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80015c6:	2208      	movs	r2, #8
 80015c8:	0020      	movs	r0, r4
 80015ca:	a919      	add	r1, sp, #100	; 0x64
 80015cc:	f003 f8de 	bl	800478c <HAL_TIM_PWM_ConfigChannel>
 80015d0:	2800      	cmp	r0, #0
 80015d2:	d000      	beq.n	80015d6 <main+0x2e6>
 80015d4:	e0ae      	b.n	8001734 <main+0x444>
    sBreakDeadTimeConfig.DeadTime = 20;
 80015d6:	2314      	movs	r3, #20
 80015d8:	9323      	str	r3, [sp, #140]	; 0x8c
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015da:	2380      	movs	r3, #128	; 0x80
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015dc:	9020      	str	r0, [sp, #128]	; 0x80
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015de:	9021      	str	r0, [sp, #132]	; 0x84
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015e0:	9022      	str	r0, [sp, #136]	; 0x88
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e2:	9024      	str	r0, [sp, #144]	; 0x90
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015e4:	019b      	lsls	r3, r3, #6
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e6:	9027      	str	r0, [sp, #156]	; 0x9c
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 80015e8:	a920      	add	r1, sp, #128	; 0x80
 80015ea:	0020      	movs	r0, r4
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ec:	9325      	str	r3, [sp, #148]	; 0x94
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 80015ee:	f003 f9af 	bl	8004950 <HAL_TIMEx_ConfigBreakDeadTime>
 80015f2:	2800      	cmp	r0, #0
 80015f4:	d000      	beq.n	80015f8 <main+0x308>
 80015f6:	e09d      	b.n	8001734 <main+0x444>
    HAL_TIM_Base_Start_IT(&htim1); // Start TIM1 and enable the update interrupt
 80015f8:	0020      	movs	r0, r4
 80015fa:	f002 fdc5 	bl	8004188 <HAL_TIM_Base_Start_IT>
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0); // Set the priority for TIM1 global interrupt
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	200d      	movs	r0, #13
 8001604:	f000 ff02 	bl	800240c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); // Enable the TIM1 global interrupt
 8001608:	200d      	movs	r0, #13
 800160a:	f000 ff31 	bl	8002470 <HAL_NVIC_EnableIRQ>
    HAL_TIM_MspPostInit(&htim1);
 800160e:	0020      	movs	r0, r4
 8001610:	f000 f9e0 	bl	80019d4 <HAL_TIM_MspPostInit>
    huart1.Instance = USART1;
 8001614:	4c2e      	ldr	r4, [pc, #184]	; (80016d0 <main+0x3e0>)
 8001616:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <main+0x3e4>)
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001618:	220c      	movs	r2, #12
    huart1.Instance = USART1;
 800161a:	6023      	str	r3, [r4, #0]
    huart1.Init.BaudRate = 115200;
 800161c:	23e1      	movs	r3, #225	; 0xe1
 800161e:	025b      	lsls	r3, r3, #9
 8001620:	6063      	str	r3, [r4, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	2300      	movs	r3, #0
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001624:	0020      	movs	r0, r4
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	60a3      	str	r3, [r4, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001628:	60e3      	str	r3, [r4, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800162a:	6123      	str	r3, [r4, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 800162c:	6162      	str	r2, [r4, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162e:	61a3      	str	r3, [r4, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	61e3      	str	r3, [r4, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001632:	6223      	str	r3, [r4, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001634:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001636:	f003 ffab 	bl	8005590 <HAL_UART_Init>
 800163a:	1e06      	subs	r6, r0, #0
 800163c:	d17a      	bne.n	8001734 <main+0x444>
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE); // enable idle line interrupt
 800163e:	2110      	movs	r1, #16
 8001640:	6822      	ldr	r2, [r4, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001642:	a80c      	add	r0, sp, #48	; 0x30
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE); // enable idle line interrupt
 8001644:	6813      	ldr	r3, [r2, #0]
 8001646:	430b      	orrs	r3, r1
 8001648:	6013      	str	r3, [r2, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164a:	2100      	movs	r1, #0
 800164c:	2210      	movs	r2, #16
 800164e:	f004 f9f9 	bl	8005a44 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001652:	2208      	movs	r2, #8
 8001654:	2100      	movs	r1, #0
 8001656:	a805      	add	r0, sp, #20
 8001658:	f004 f9f4 	bl	8005a44 <memset>
    htim2.Instance = TIM2;
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	4d1e      	ldr	r5, [pc, #120]	; (80016d8 <main+0x3e8>)
 8001660:	05db      	lsls	r3, r3, #23
 8001662:	602b      	str	r3, [r5, #0]
    htim2.Init.Prescaler = 63;
 8001664:	233f      	movs	r3, #63	; 0x3f
 8001666:	606b      	str	r3, [r5, #4]
    htim2.Init.Period = 10000;
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <main+0x3ec>)
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800166a:	0028      	movs	r0, r5
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	60ae      	str	r6, [r5, #8]
    htim2.Init.Period = 10000;
 800166e:	60eb      	str	r3, [r5, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001670:	612e      	str	r6, [r5, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001672:	61ae      	str	r6, [r5, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001674:	f002 fff6 	bl	8004664 <HAL_TIM_Base_Init>
 8001678:	2800      	cmp	r0, #0
 800167a:	d15b      	bne.n	8001734 <main+0x444>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167c:	2380      	movs	r3, #128	; 0x80
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800167e:	0028      	movs	r0, r5
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001680:	015b      	lsls	r3, r3, #5
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001682:	a90c      	add	r1, sp, #48	; 0x30
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001684:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001686:	f002 fe13 	bl	80042b0 <HAL_TIM_ConfigClockSource>
 800168a:	2800      	cmp	r0, #0
 800168c:	d152      	bne.n	8001734 <main+0x444>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168e:	9005      	str	r0, [sp, #20]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	9006      	str	r0, [sp, #24]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8001692:	a905      	add	r1, sp, #20
 8001694:	0028      	movs	r0, r5
 8001696:	f003 f92d 	bl	80048f4 <HAL_TIMEx_MasterConfigSynchronization>
 800169a:	2800      	cmp	r0, #0
 800169c:	d14a      	bne.n	8001734 <main+0x444>
 800169e:	e01f      	b.n	80016e0 <main+0x3f0>
 80016a0:	40021000 	.word	0x40021000
 80016a4:	48001400 	.word	0x48001400
 80016a8:	200001b4 	.word	0x200001b4
 80016ac:	40005400 	.word	0x40005400
 80016b0:	2000090e 	.word	0x2000090e
 80016b4:	200000ec 	.word	0x200000ec
 80016b8:	40012400 	.word	0x40012400
 80016bc:	20000208 	.word	0x20000208
 80016c0:	40013000 	.word	0x40013000
 80016c4:	2000026c 	.word	0x2000026c
 80016c8:	40012c00 	.word	0x40012c00
 80016cc:	0000063f 	.word	0x0000063f
 80016d0:	200002fc 	.word	0x200002fc
 80016d4:	40013800 	.word	0x40013800
 80016d8:	200002b4 	.word	0x200002b4
 80016dc:	00002710 	.word	0x00002710
    HAL_MultiProcessor_Init(&huart1, UART_ADDR, UART_WAKEUPMETHOD_ADDRESSMARK);
 80016e0:	2280      	movs	r2, #128	; 0x80
 80016e2:	2102      	movs	r1, #2
 80016e4:	0112      	lsls	r2, r2, #4
 80016e6:	0020      	movs	r0, r4
 80016e8:	f003 ff86 	bl	80055f8 <HAL_MultiProcessor_Init>
    HAL_MultiProcessorEx_AddressLength_Set(&huart1, UART_ADDRESS_DETECT_4B);
 80016ec:	2100      	movs	r1, #0
 80016ee:	0020      	movs	r0, r4
 80016f0:	f004 f87e 	bl	80057f0 <HAL_MultiProcessorEx_AddressLength_Set>
    HAL_MultiProcessor_EnableMuteMode(&huart1);
 80016f4:	0020      	movs	r0, r4
 80016f6:	f003 ffc7 	bl	8005688 <HAL_MultiProcessor_EnableMuteMode>
    HAL_MultiProcessor_EnterMuteMode(&huart1);
 80016fa:	0020      	movs	r0, r4
 80016fc:	f003 fc8c 	bl	8005018 <HAL_MultiProcessor_EnterMuteMode>
    DISABLE_DRIVE;
 8001700:	2200      	movs	r2, #0
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	480c      	ldr	r0, [pc, #48]	; (8001738 <main+0x448>)
 8001706:	f001 f8df 	bl	80028c8 <HAL_GPIO_WritePin>
 800170a:	2200      	movs	r2, #0
 800170c:	2140      	movs	r1, #64	; 0x40
 800170e:	480a      	ldr	r0, [pc, #40]	; (8001738 <main+0x448>)
 8001710:	f001 f8da 	bl	80028c8 <HAL_GPIO_WritePin>
    RS485_SET_RX;
 8001714:	2090      	movs	r0, #144	; 0x90
 8001716:	2200      	movs	r2, #0
 8001718:	2102      	movs	r1, #2
 800171a:	05c0      	lsls	r0, r0, #23
 800171c:	f001 f8d4 	bl	80028c8 <HAL_GPIO_WritePin>
            foc_startup();
 8001720:	f7ff f962 	bl	80009e8 <foc_startup>
        LED_GREEN;
 8001724:	2200      	movs	r2, #0
 8001726:	2101      	movs	r1, #1
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <main+0x448>)
 800172a:	f001 f8cd 	bl	80028c8 <HAL_GPIO_WritePin>
            foc_loop();
 800172e:	f7ff fa1d 	bl	8000b6c <foc_loop>
 8001732:	e7f7      	b.n	8001724 <main+0x434>
        Error_Handler();
 8001734:	f7ff fd84 	bl	8001240 <Error_Handler>
 8001738:	48001400 	.word	0x48001400

0800173c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173c:	2201      	movs	r2, #1
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_MspInit+0x2c>)
{
 8001740:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	6999      	ldr	r1, [r3, #24]
 8001744:	4311      	orrs	r1, r2
 8001746:	6199      	str	r1, [r3, #24]
 8001748:	6999      	ldr	r1, [r3, #24]
 800174a:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 800174c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	9200      	str	r2, [sp, #0]
 8001750:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	69da      	ldr	r2, [r3, #28]
 8001754:	0549      	lsls	r1, r1, #21
 8001756:	430a      	orrs	r2, r1
 8001758:	61da      	str	r2, [r3, #28]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	400b      	ands	r3, r1
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001762:	b002      	add	sp, #8
 8001764:	4770      	bx	lr
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	40021000 	.word	0x40021000

0800176c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800176c:	b570      	push	{r4, r5, r6, lr}
 800176e:	0004      	movs	r4, r0
 8001770:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	2214      	movs	r2, #20
 8001774:	2100      	movs	r1, #0
 8001776:	a803      	add	r0, sp, #12
 8001778:	f004 f964 	bl	8005a44 <memset>
  if(hadc->Instance==ADC1)
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <HAL_ADC_MspInit+0xb0>)
 800177e:	6822      	ldr	r2, [r4, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001784:	b008      	add	sp, #32
 8001786:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	4b25      	ldr	r3, [pc, #148]	; (8001820 <HAL_ADC_MspInit+0xb4>)
 800178c:	0089      	lsls	r1, r1, #2
 800178e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001792:	430a      	orrs	r2, r1
 8001794:	619a      	str	r2, [r3, #24]
 8001796:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001798:	2503      	movs	r5, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 800179a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 800179e:	9200      	str	r2, [sp, #0]
 80017a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	695a      	ldr	r2, [r3, #20]
 80017a4:	0289      	lsls	r1, r1, #10
 80017a6:	430a      	orrs	r2, r1
 80017a8:	615a      	str	r2, [r3, #20]
 80017aa:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	9201      	str	r2, [sp, #4]
 80017b4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	02c9      	lsls	r1, r1, #11
 80017ba:	430a      	orrs	r2, r1
 80017bc:	615a      	str	r2, [r3, #20]
 80017be:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2600      	movs	r6, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	400b      	ands	r3, r1
 80017c4:	9302      	str	r3, [sp, #8]
 80017c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = OP_V_O_Pin|OP_W_O_Pin|GPIO_PIN_4;
 80017c8:	2319      	movs	r3, #25
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = OP_V_O_Pin|OP_W_O_Pin|GPIO_PIN_4;
 80017cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ce:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f000 ff7c 	bl	80026cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OP_U_O_Pin;
 80017d4:	2302      	movs	r3, #2
    HAL_GPIO_Init(OP_U_O_GPIO_Port, &GPIO_InitStruct);
 80017d6:	4813      	ldr	r0, [pc, #76]	; (8001824 <HAL_ADC_MspInit+0xb8>)
 80017d8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = OP_U_O_Pin;
 80017da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017dc:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(OP_U_O_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f000 ff74 	bl	80026cc <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 80017e4:	4d10      	ldr	r5, [pc, #64]	; (8001828 <HAL_ADC_MspInit+0xbc>)
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_ADC_MspInit+0xc0>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80017e8:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 80017ea:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017f0:	3380      	adds	r3, #128	; 0x80
 80017f2:	612b      	str	r3, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80017fa:	2320      	movs	r3, #32
 80017fc:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	015b      	lsls	r3, r3, #5
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001802:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001804:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001806:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001808:	f000 fe58 	bl	80024bc <HAL_DMA_Init>
 800180c:	2800      	cmp	r0, #0
 800180e:	d102      	bne.n	8001816 <HAL_ADC_MspInit+0xaa>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001810:	6325      	str	r5, [r4, #48]	; 0x30
 8001812:	626c      	str	r4, [r5, #36]	; 0x24
}
 8001814:	e7b6      	b.n	8001784 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8001816:	f7ff fd13 	bl	8001240 <Error_Handler>
 800181a:	e7f9      	b.n	8001810 <HAL_ADC_MspInit+0xa4>
 800181c:	40012400 	.word	0x40012400
 8001820:	40021000 	.word	0x40021000
 8001824:	48000400 	.word	0x48000400
 8001828:	2000012c 	.word	0x2000012c
 800182c:	40020008 	.word	0x40020008

08001830 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001830:	b510      	push	{r4, lr}
 8001832:	0004      	movs	r4, r0
 8001834:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	2214      	movs	r2, #20
 8001838:	2100      	movs	r1, #0
 800183a:	a803      	add	r0, sp, #12
 800183c:	f004 f902 	bl	8005a44 <memset>
  if(hi2c->Instance==I2C1)
 8001840:	4b16      	ldr	r3, [pc, #88]	; (800189c <HAL_I2C_MspInit+0x6c>)
 8001842:	6822      	ldr	r2, [r4, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d001      	beq.n	800184c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001848:	b008      	add	sp, #32
 800184a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	4c14      	ldr	r4, [pc, #80]	; (80018a0 <HAL_I2C_MspInit+0x70>)
 8001850:	02d2      	lsls	r2, r2, #11
 8001852:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	4313      	orrs	r3, r2
 8001858:	6163      	str	r3, [r4, #20]
 800185a:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185c:	4811      	ldr	r0, [pc, #68]	; (80018a4 <HAL_I2C_MspInit+0x74>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	4013      	ands	r3, r2
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001864:	23c0      	movs	r3, #192	; 0xc0
 8001866:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001868:	3bae      	subs	r3, #174	; 0xae
 800186a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800186c:	3b0f      	subs	r3, #15
 800186e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001870:	3b02      	subs	r3, #2
 8001872:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	f000 ff2a 	bl	80026cc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001878:	2280      	movs	r2, #128	; 0x80
 800187a:	69e3      	ldr	r3, [r4, #28]
 800187c:	0392      	lsls	r2, r2, #14
 800187e:	4313      	orrs	r3, r2
 8001880:	61e3      	str	r3, [r4, #28]
 8001882:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8001884:	2100      	movs	r1, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001886:	4013      	ands	r3, r2
 8001888:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2017      	movs	r0, #23
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8001890:	f000 fdbc 	bl	800240c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8001894:	2017      	movs	r0, #23
 8001896:	f000 fdeb 	bl	8002470 <HAL_NVIC_EnableIRQ>
}
 800189a:	e7d5      	b.n	8001848 <HAL_I2C_MspInit+0x18>
 800189c:	40005400 	.word	0x40005400
 80018a0:	40021000 	.word	0x40021000
 80018a4:	48000400 	.word	0x48000400

080018a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018a8:	b510      	push	{r4, lr}
 80018aa:	0004      	movs	r4, r0
 80018ac:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ae:	2214      	movs	r2, #20
 80018b0:	2100      	movs	r1, #0
 80018b2:	a803      	add	r0, sp, #12
 80018b4:	f004 f8c6 	bl	8005a44 <memset>
  if(hspi->Instance==SPI1)
 80018b8:	4b16      	ldr	r3, [pc, #88]	; (8001914 <HAL_SPI_MspInit+0x6c>)
 80018ba:	6822      	ldr	r2, [r4, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018c0:	b008      	add	sp, #32
 80018c2:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018c4:	2180      	movs	r1, #128	; 0x80
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_SPI_MspInit+0x70>)
 80018c8:	0149      	lsls	r1, r1, #5
 80018ca:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ce:	430a      	orrs	r2, r1
 80018d0:	619a      	str	r2, [r3, #24]
 80018d2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018d6:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018da:	9201      	str	r2, [sp, #4]
 80018dc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	0289      	lsls	r1, r1, #10
 80018e2:	430a      	orrs	r2, r1
 80018e4:	615a      	str	r2, [r3, #20]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	400b      	ands	r3, r1
 80018ea:	9302      	str	r3, [sp, #8]
 80018ec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018ee:	23e0      	movs	r3, #224	; 0xe0
 80018f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	3bde      	subs	r3, #222	; 0xde
 80018f4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f8:	3301      	adds	r3, #1
 80018fa:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f000 fee6 	bl	80026cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2100      	movs	r1, #0
 8001904:	2019      	movs	r0, #25
 8001906:	f000 fd81 	bl	800240c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800190a:	2019      	movs	r0, #25
 800190c:	f000 fdb0 	bl	8002470 <HAL_NVIC_EnableIRQ>
}
 8001910:	e7d6      	b.n	80018c0 <HAL_SPI_MspInit+0x18>
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	40013000 	.word	0x40013000
 8001918:	40021000 	.word	0x40021000

0800191c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800191c:	b530      	push	{r4, r5, lr}
 800191e:	0004      	movs	r4, r0
 8001920:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001922:	2214      	movs	r2, #20
 8001924:	2100      	movs	r1, #0
 8001926:	a805      	add	r0, sp, #20
 8001928:	f004 f88c 	bl	8005a44 <memset>
  if(htim_base->Instance==TIM1)
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	4a26      	ldr	r2, [pc, #152]	; (80019c8 <HAL_TIM_Base_MspInit+0xac>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d005      	beq.n	8001940 <HAL_TIM_Base_MspInit+0x24>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	05d2      	lsls	r2, r2, #23
 8001938:	4293      	cmp	r3, r2
 800193a:	d033      	beq.n	80019a4 <HAL_TIM_Base_MspInit+0x88>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800193c:	b00b      	add	sp, #44	; 0x2c
 800193e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_TIM_Base_MspInit+0xb0>)
 8001944:	0109      	lsls	r1, r1, #4
 8001946:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 8001948:	2580      	movs	r5, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 800194a:	430a      	orrs	r2, r1
 800194c:	619a      	str	r2, [r3, #24]
 800194e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2402      	movs	r4, #2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001952:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001954:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001956:	9201      	str	r2, [sp, #4]
 8001958:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	695a      	ldr	r2, [r3, #20]
 800195c:	02c9      	lsls	r1, r1, #11
 800195e:	430a      	orrs	r2, r1
 8001960:	615a      	str	r2, [r3, #20]
 8001962:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 8001964:	016d      	lsls	r5, r5, #5
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	9202      	str	r2, [sp, #8]
 800196c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	0289      	lsls	r1, r1, #10
 8001972:	430a      	orrs	r2, r1
 8001974:	615a      	str	r2, [r3, #20]
 8001976:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(OC_COMP_INT_GPIO_Port, &GPIO_InitStruct);
 8001978:	4815      	ldr	r0, [pc, #84]	; (80019d0 <HAL_TIM_Base_MspInit+0xb4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	400b      	ands	r3, r1
 800197c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(OC_COMP_INT_GPIO_Port, &GPIO_InitStruct);
 800197e:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001980:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 8001982:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001986:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(OC_COMP_INT_GPIO_Port, &GPIO_InitStruct);
 8001988:	f000 fea0 	bl	80026cc <HAL_GPIO_Init>
    HAL_GPIO_Init(OC_COMP_INT2_GPIO_Port, &GPIO_InitStruct);
 800198c:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
    HAL_GPIO_Init(OC_COMP_INT2_GPIO_Port, &GPIO_InitStruct);
 8001990:	a905      	add	r1, sp, #20
 8001992:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = OC_COMP_INT2_Pin;
 8001994:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800199c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(OC_COMP_INT2_GPIO_Port, &GPIO_InitStruct);
 800199e:	f000 fe95 	bl	80026cc <HAL_GPIO_Init>
 80019a2:	e7cb      	b.n	800193c <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019a4:	2301      	movs	r3, #1
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <HAL_TIM_Base_MspInit+0xb0>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019a8:	200f      	movs	r0, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019aa:	69d1      	ldr	r1, [r2, #28]
 80019ac:	4319      	orrs	r1, r3
 80019ae:	61d1      	str	r1, [r2, #28]
 80019b0:	69d2      	ldr	r2, [r2, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019b2:	2100      	movs	r1, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019b4:	4013      	ands	r3, r2
 80019b6:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019b8:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ba:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019bc:	f000 fd26 	bl	800240c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019c0:	200f      	movs	r0, #15
 80019c2:	f000 fd55 	bl	8002470 <HAL_NVIC_EnableIRQ>
}
 80019c6:	e7b9      	b.n	800193c <HAL_TIM_Base_MspInit+0x20>
 80019c8:	40012c00 	.word	0x40012c00
 80019cc:	40021000 	.word	0x40021000
 80019d0:	48000400 	.word	0x48000400

080019d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019d4:	b510      	push	{r4, lr}
 80019d6:	0004      	movs	r4, r0
 80019d8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	2214      	movs	r2, #20
 80019dc:	2100      	movs	r1, #0
 80019de:	a803      	add	r0, sp, #12
 80019e0:	f004 f830 	bl	8005a44 <memset>
  if(htim->Instance==TIM1)
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_TIM_MspPostInit+0x74>)
 80019e6:	6822      	ldr	r2, [r4, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019ec:	b008      	add	sp, #32
 80019ee:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <HAL_TIM_MspPostInit+0x78>)
 80019f4:	02c9      	lsls	r1, r1, #11
 80019f6:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	430a      	orrs	r2, r1
 80019fc:	615a      	str	r2, [r3, #20]
 80019fe:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a00:	4813      	ldr	r0, [pc, #76]	; (8001a50 <HAL_TIM_MspPostInit+0x7c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a02:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	9201      	str	r2, [sp, #4]
 8001a08:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	0289      	lsls	r1, r1, #10
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	615a      	str	r2, [r3, #20]
 8001a12:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	400b      	ands	r3, r1
 8001a18:	9302      	str	r3, [sp, #8]
 8001a1a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|GPIO_PIN_15;
 8001a1c:	23e0      	movs	r3, #224	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|GPIO_PIN_15;
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001a24:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a26:	f000 fe51 	bl	80026cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HSU_Pin|HSV_Pin|GPIO_PIN_10;
 8001a2a:	23e0      	movs	r3, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = HSU_Pin|HSV_Pin|GPIO_PIN_10;
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	a903      	add	r1, sp, #12
 8001a36:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001a3e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	f000 fe44 	bl	80026cc <HAL_GPIO_Init>
}
 8001a44:	e7d2      	b.n	80019ec <HAL_TIM_MspPostInit+0x18>
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	40012c00 	.word	0x40012c00
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	48000400 	.word	0x48000400

08001a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a54:	b530      	push	{r4, r5, lr}
 8001a56:	0004      	movs	r4, r0
 8001a58:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5a:	2214      	movs	r2, #20
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	a803      	add	r0, sp, #12
 8001a60:	f003 fff0 	bl	8005a44 <memset>
  if(huart->Instance==USART1)
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <HAL_UART_MspInit+0xa8>)
 8001a66:	6822      	ldr	r2, [r4, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_UART_MspInit+0x1c>


  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a6c:	b009      	add	sp, #36	; 0x24
 8001a6e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a70:	2180      	movs	r1, #128	; 0x80
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_UART_MspInit+0xac>)
 8001a74:	01c9      	lsls	r1, r1, #7
 8001a76:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a78:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	619a      	str	r2, [r3, #24]
 8001a7e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a82:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a86:	9201      	str	r2, [sp, #4]
 8001a88:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	695a      	ldr	r2, [r3, #20]
 8001a8c:	0289      	lsls	r1, r1, #10
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	615a      	str	r2, [r3, #20]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	400b      	ands	r3, r1
 8001a96:	9302      	str	r3, [sp, #8]
 8001a98:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <HAL_UART_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001a9e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001aa8:	3b02      	subs	r3, #2
 8001aaa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f000 fe0e 	bl	80026cc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001ab0:	4d15      	ldr	r5, [pc, #84]	; (8001b08 <HAL_UART_MspInit+0xb4>)
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_UART_MspInit+0xb8>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ab4:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001ab6:	602b      	str	r3, [r5, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ab8:	2310      	movs	r3, #16
 8001aba:	606b      	str	r3, [r5, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001abc:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001abe:	0028      	movs	r0, r5
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac0:	60ab      	str	r3, [r5, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ac2:	60ea      	str	r2, [r5, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ac4:	612b      	str	r3, [r5, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ac6:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001ac8:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001aca:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001acc:	f000 fcf6 	bl	80024bc <HAL_DMA_Init>
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	d110      	bne.n	8001af6 <HAL_UART_MspInit+0xa2>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <HAL_UART_MspInit+0xbc>)
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	6811      	ldr	r1, [r2, #0]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001adc:	201b      	movs	r0, #27
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 8001ade:	430b      	orrs	r3, r1
 8001ae0:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001ae6:	6725      	str	r5, [r4, #112]	; 0x70
 8001ae8:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001aea:	f000 fc8f 	bl	800240c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aee:	201b      	movs	r0, #27
 8001af0:	f000 fcbe 	bl	8002470 <HAL_NVIC_EnableIRQ>
}
 8001af4:	e7ba      	b.n	8001a6c <HAL_UART_MspInit+0x18>
      Error_Handler();
 8001af6:	f7ff fba3 	bl	8001240 <Error_Handler>
 8001afa:	e7eb      	b.n	8001ad4 <HAL_UART_MspInit+0x80>
 8001afc:	40013800 	.word	0x40013800
 8001b00:	40021000 	.word	0x40021000
 8001b04:	00008004 	.word	0x00008004
 8001b08:	20000170 	.word	0x20000170
 8001b0c:	40020044 	.word	0x40020044
 8001b10:	40010000 	.word	0x40010000

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	e7fe      	b.n	8001b14 <NMI_Handler>
 8001b16:	46c0      	nop			; (mov r8, r8)

08001b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b18:	e7fe      	b.n	8001b18 <HardFault_Handler>
 8001b1a:	46c0      	nop			; (mov r8, r8)

08001b1c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b1c:	4770      	bx	lr
 8001b1e:	46c0      	nop			; (mov r8, r8)

08001b20 <PendSV_Handler>:
 8001b20:	4770      	bx	lr
 8001b22:	46c0      	nop			; (mov r8, r8)

08001b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b24:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b26:	f000 f92d 	bl	8001d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2a:	bd10      	pop	{r4, pc}

08001b2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b2c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001b2e:	4802      	ldr	r0, [pc, #8]	; (8001b38 <DMA1_Channel1_IRQHandler+0xc>)
 8001b30:	f000 fd7a 	bl	8002628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b34:	bd10      	pop	{r4, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	2000012c 	.word	0x2000012c

08001b3c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001b3c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b3e:	4802      	ldr	r0, [pc, #8]	; (8001b48 <DMA1_Channel4_5_IRQHandler+0xc>)
 8001b40:	f000 fd72 	bl	8002628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */
  

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8001b44:	bd10      	pop	{r4, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	20000170 	.word	0x20000170

08001b4c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/* Define the ISR for TIM1 interrupt */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void) {
 8001b4c:	b510      	push	{r4, lr}
  //center of PWM low period to sample ADCs
  // LED_RED;
  // LED_GREEN;

  HAL_ADC_Start_DMA(&hadc, (uint32_t *)p.adc_vals, NBR_ADC);
 8001b4e:	2206      	movs	r2, #6
 8001b50:	4903      	ldr	r1, [pc, #12]	; (8001b60 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001b52:	4804      	ldr	r0, [pc, #16]	; (8001b64 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x18>)
 8001b54:	f000 fad2 	bl	80020fc <HAL_ADC_Start_DMA>
  // LED_RED;
  // LED_GREEN;


  HAL_TIM_IRQHandler(&htim1); // Call the HAL handler to clear the interrupt
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1c>)
 8001b5a:	f002 fc8d 	bl	8004478 <HAL_TIM_IRQHandler>
}
 8001b5e:	bd10      	pop	{r4, pc}
 8001b60:	200003b0 	.word	0x200003b0
 8001b64:	200000ec 	.word	0x200000ec
 8001b68:	2000026c 	.word	0x2000026c

08001b6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b6c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b6e:	4802      	ldr	r0, [pc, #8]	; (8001b78 <TIM2_IRQHandler+0xc>)
 8001b70:	f002 fc82 	bl	8004478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b74:	bd10      	pop	{r4, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	200002b4 	.word	0x200002b4

08001b7c <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001b7c:	4806      	ldr	r0, [pc, #24]	; (8001b98 <I2C1_IRQHandler+0x1c>)
{
 8001b7e:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001b80:	6803      	ldr	r3, [r0, #0]
 8001b82:	699a      	ldr	r2, [r3, #24]
 8001b84:	23e0      	movs	r3, #224	; 0xe0
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	421a      	tst	r2, r3
 8001b8a:	d002      	beq.n	8001b92 <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b8c:	f001 f8b0 	bl	8002cf0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001b90:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b92:	f000 fef9 	bl	8002988 <HAL_I2C_EV_IRQHandler>
}
 8001b96:	e7fb      	b.n	8001b90 <I2C1_IRQHandler+0x14>
 8001b98:	200001b4 	.word	0x200001b4

08001b9c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b9c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b9e:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <SPI1_IRQHandler+0xc>)
 8001ba0:	f002 f91e 	bl	8003de0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001ba4:	bd10      	pop	{r4, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	20000208 	.word	0x20000208

08001bac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001bac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bae:	4c07      	ldr	r4, [pc, #28]	; (8001bcc <USART1_IRQHandler+0x20>)
 8001bb0:	0020      	movs	r0, r4
 8001bb2:	f002 ffef 	bl	8004b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	69d9      	ldr	r1, [r3, #28]
 8001bbc:	420a      	tst	r2, r1
 8001bbe:	d004      	beq.n	8001bca <USART1_IRQHandler+0x1e>
        __HAL_UART_CLEAR_IDLEFLAG(&huart1);
        p.uart_idle = 1;
 8001bc0:	2101      	movs	r1, #1
        __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001bc2:	621a      	str	r2, [r3, #32]
        p.uart_idle = 1;
 8001bc4:	4b02      	ldr	r3, [pc, #8]	; (8001bd0 <USART1_IRQHandler+0x24>)
 8001bc6:	322e      	adds	r2, #46	; 0x2e
 8001bc8:	5499      	strb	r1, [r3, r2]
    }

  /* USER CODE END USART1_IRQn 1 */
}
 8001bca:	bd10      	pop	{r4, pc}
 8001bcc:	200002fc 	.word	0x200002fc
 8001bd0:	20000384 	.word	0x20000384

08001bd4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd4:	b570      	push	{r4, r5, r6, lr}
 8001bd6:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd8:	dd07      	ble.n	8001bea <_read+0x16>
 8001bda:	000c      	movs	r4, r1
 8001bdc:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 8001bde:	e000      	b.n	8001be2 <_read+0xe>
 8001be0:	bf00      	nop
 8001be2:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be4:	3401      	adds	r4, #1
 8001be6:	42ac      	cmp	r4, r5
 8001be8:	d1f9      	bne.n	8001bde <_read+0xa>
  }

  return len;
}
 8001bea:	0030      	movs	r0, r6
 8001bec:	bd70      	pop	{r4, r5, r6, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)

08001bf0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bf0:	b570      	push	{r4, r5, r6, lr}
 8001bf2:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf4:	dd07      	ble.n	8001c06 <_write+0x16>
 8001bf6:	000c      	movs	r4, r1
 8001bf8:	188d      	adds	r5, r1, r2
  {
    __io_putchar(*ptr++);
 8001bfa:	7820      	ldrb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfc:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 8001bfe:	f7ff fab7 	bl	8001170 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	42ac      	cmp	r4, r5
 8001c04:	d1f9      	bne.n	8001bfa <_write+0xa>
  }
  return len;
}
 8001c06:	0030      	movs	r0, r6
 8001c08:	bd70      	pop	{r4, r5, r6, pc}
 8001c0a:	46c0      	nop			; (mov r8, r8)

08001c0c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8001c0c:	2001      	movs	r0, #1
}
 8001c0e:	4240      	negs	r0, r0
 8001c10:	4770      	bx	lr
 8001c12:	46c0      	nop			; (mov r8, r8)

08001c14 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	019b      	lsls	r3, r3, #6
  return 0;
}
 8001c18:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001c1a:	604b      	str	r3, [r1, #4]
}
 8001c1c:	4770      	bx	lr
 8001c1e:	46c0      	nop			; (mov r8, r8)

08001c20 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001c20:	2001      	movs	r0, #1
 8001c22:	4770      	bx	lr

08001c24 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001c24:	2000      	movs	r0, #0
 8001c26:	4770      	bx	lr

08001c28 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c28:	490c      	ldr	r1, [pc, #48]	; (8001c5c <_sbrk+0x34>)
 8001c2a:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <_sbrk+0x38>)
{
 8001c2c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c2e:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c30:	490c      	ldr	r1, [pc, #48]	; (8001c64 <_sbrk+0x3c>)
{
 8001c32:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001c34:	6808      	ldr	r0, [r1, #0]
 8001c36:	2800      	cmp	r0, #0
 8001c38:	d004      	beq.n	8001c44 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3a:	18c3      	adds	r3, r0, r3
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d806      	bhi.n	8001c4e <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001c40:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8001c42:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001c44:	4808      	ldr	r0, [pc, #32]	; (8001c68 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 8001c46:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 8001c48:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d9f8      	bls.n	8001c40 <_sbrk+0x18>
    errno = ENOMEM;
 8001c4e:	f003 ff01 	bl	8005a54 <__errno>
 8001c52:	230c      	movs	r3, #12
 8001c54:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001c56:	2001      	movs	r0, #1
 8001c58:	4240      	negs	r0, r0
 8001c5a:	e7f2      	b.n	8001c42 <_sbrk+0x1a>
 8001c5c:	00000400 	.word	0x00000400
 8001c60:	20001000 	.word	0x20001000
 8001c64:	200003c8 	.word	0x200003c8
 8001c68:	20000520 	.word	0x20000520

08001c6c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001c6c:	4770      	bx	lr
 8001c6e:	46c0      	nop			; (mov r8, r8)

08001c70 <clip>:

// int16_t clip16(int16_t x, int16_t min, int16_t max) {
//     return (x > max ? (max) : (x < min ? min : x));
// }

int32_t clip(int32_t x, int32_t min, int32_t max) {
 8001c70:	0003      	movs	r3, r0
 8001c72:	0010      	movs	r0, r2
    return (x > max ? (max) : (x < min ? min : x));
 8001c74:	4293      	cmp	r3, r2
 8001c76:	dc02      	bgt.n	8001c7e <clip+0xe>
 8001c78:	0018      	movs	r0, r3
 8001c7a:	428b      	cmp	r3, r1
 8001c7c:	db00      	blt.n	8001c80 <clip+0x10>
}
 8001c7e:	4770      	bx	lr
    return (x > max ? (max) : (x < min ? min : x));
 8001c80:	0008      	movs	r0, r1
 8001c82:	e7fc      	b.n	8001c7e <clip+0xe>

08001c84 <min3>:

int32_t min3(int32_t x, int32_t y, int32_t z){
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8001c84:	4288      	cmp	r0, r1
 8001c86:	db00      	blt.n	8001c8a <min3+0x6>
 8001c88:	0008      	movs	r0, r1
 8001c8a:	4290      	cmp	r0, r2
 8001c8c:	dd00      	ble.n	8001c90 <min3+0xc>
 8001c8e:	0010      	movs	r0, r2
}
 8001c90:	4770      	bx	lr
 8001c92:	46c0      	nop			; (mov r8, r8)

08001c94 <max3>:

int32_t max3(int32_t x, int32_t y, int32_t z){
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8001c94:	4288      	cmp	r0, r1
 8001c96:	dc00      	bgt.n	8001c9a <max3+0x6>
 8001c98:	0008      	movs	r0, r1
 8001c9a:	4290      	cmp	r0, r2
 8001c9c:	da00      	bge.n	8001ca0 <max3+0xc>
 8001c9e:	0010      	movs	r0, r2
}
 8001ca0:	4770      	bx	lr
 8001ca2:	46c0      	nop			; (mov r8, r8)

08001ca4 <abs16>:

int16_t abs16(int16_t val) {
    if(val < 0) return -val;
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	da01      	bge.n	8001cac <abs16+0x8>
 8001ca8:	4240      	negs	r0, r0
 8001caa:	b200      	sxth	r0, r0
    else return val;
}
 8001cac:	4770      	bx	lr
 8001cae:	46c0      	nop			; (mov r8, r8)

08001cb0 <pad14>:
    if(val < 0) return -val;
    else return val;
}

int16_t pad14(int32_t val) {
    return (val & 0x2000) ? (val | 0xC000) : val;
 8001cb0:	0483      	lsls	r3, r0, #18
 8001cb2:	d503      	bpl.n	8001cbc <pad14+0xc>
 8001cb4:	4b02      	ldr	r3, [pc, #8]	; (8001cc0 <pad14+0x10>)
 8001cb6:	4318      	orrs	r0, r3
 8001cb8:	b200      	sxth	r0, r0
}
 8001cba:	4770      	bx	lr
    return (val & 0x2000) ? (val | 0xC000) : val;
 8001cbc:	b200      	sxth	r0, r0
 8001cbe:	e7fc      	b.n	8001cba <pad14+0xa>
 8001cc0:	ffffc000 	.word	0xffffc000

08001cc4 <Reset_Handler>:
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <LoopForever+0x2>)
 8001cc6:	4685      	mov	sp, r0
 8001cc8:	f7ff ffd0 	bl	8001c6c <SystemInit>
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <LoopForever+0x6>)
 8001cce:	490d      	ldr	r1, [pc, #52]	; (8001d04 <LoopForever+0xa>)
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <LoopForever+0xe>)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e002      	b.n	8001cdc <LoopCopyDataInit>

08001cd6 <CopyDataInit>:
 8001cd6:	58d4      	ldr	r4, [r2, r3]
 8001cd8:	50c4      	str	r4, [r0, r3]
 8001cda:	3304      	adds	r3, #4

08001cdc <LoopCopyDataInit>:
 8001cdc:	18c4      	adds	r4, r0, r3
 8001cde:	428c      	cmp	r4, r1
 8001ce0:	d3f9      	bcc.n	8001cd6 <CopyDataInit>
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <LoopForever+0x12>)
 8001ce4:	4c0a      	ldr	r4, [pc, #40]	; (8001d10 <LoopForever+0x16>)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e001      	b.n	8001cee <LoopFillZerobss>

08001cea <FillZerobss>:
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	3204      	adds	r2, #4

08001cee <LoopFillZerobss>:
 8001cee:	42a2      	cmp	r2, r4
 8001cf0:	d3fb      	bcc.n	8001cea <FillZerobss>
 8001cf2:	f003 feb5 	bl	8005a60 <__libc_init_array>
 8001cf6:	f7ff fafb 	bl	80012f0 <main>

08001cfa <LoopForever>:
 8001cfa:	e7fe      	b.n	8001cfa <LoopForever>
 8001cfc:	20001000 	.word	0x20001000
 8001d00:	20000000 	.word	0x20000000
 8001d04:	2000006c 	.word	0x2000006c
 8001d08:	08006438 	.word	0x08006438
 8001d0c:	2000006c 	.word	0x2000006c
 8001d10:	2000051c 	.word	0x2000051c

08001d14 <ADC1_IRQHandler>:
 8001d14:	e7fe      	b.n	8001d14 <ADC1_IRQHandler>
	...

08001d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d18:	b570      	push	{r4, r5, r6, lr}
 8001d1a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d1c:	20fa      	movs	r0, #250	; 0xfa
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_InitTick+0x40>)
 8001d20:	0080      	lsls	r0, r0, #2
 8001d22:	7819      	ldrb	r1, [r3, #0]
 8001d24:	f7fe f9f0 	bl	8000108 <__udivsi3>
 8001d28:	4d0c      	ldr	r5, [pc, #48]	; (8001d5c <HAL_InitTick+0x44>)
 8001d2a:	0001      	movs	r1, r0
 8001d2c:	6828      	ldr	r0, [r5, #0]
 8001d2e:	f7fe f9eb 	bl	8000108 <__udivsi3>
 8001d32:	f000 fba9 	bl	8002488 <HAL_SYSTICK_Config>
 8001d36:	2800      	cmp	r0, #0
 8001d38:	d10c      	bne.n	8001d54 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8001d3a:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3c:	2c03      	cmp	r4, #3
 8001d3e:	d900      	bls.n	8001d42 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8001d40:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d42:	3802      	subs	r0, #2
 8001d44:	2200      	movs	r2, #0
 8001d46:	0021      	movs	r1, r4
 8001d48:	f000 fb60 	bl	800240c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <HAL_InitTick+0x48>)
 8001d4e:	2000      	movs	r0, #0
 8001d50:	601c      	str	r4, [r3, #0]
 8001d52:	e7f5      	b.n	8001d40 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8001d54:	2001      	movs	r0, #1
 8001d56:	e7f3      	b.n	8001d40 <HAL_InitTick+0x28>
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	20000004 	.word	0x20000004
 8001d60:	2000000c 	.word	0x2000000c

08001d64 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d64:	2110      	movs	r1, #16
 8001d66:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <HAL_Init+0x1c>)
{
 8001d68:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d6a:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d6e:	430b      	orrs	r3, r1
 8001d70:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d72:	f7ff ffd1 	bl	8001d18 <HAL_InitTick>
  HAL_MspInit();
 8001d76:	f7ff fce1 	bl	800173c <HAL_MspInit>
}
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	bd10      	pop	{r4, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	40022000 	.word	0x40022000

08001d84 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001d84:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <HAL_IncTick+0x10>)
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <HAL_IncTick+0x14>)
 8001d88:	6811      	ldr	r1, [r2, #0]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	185b      	adds	r3, r3, r1
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	4770      	bx	lr
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	200003cc 	.word	0x200003cc
 8001d98:	20000008 	.word	0x20000008

08001d9c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d9c:	4b01      	ldr	r3, [pc, #4]	; (8001da4 <HAL_GetTick+0x8>)
 8001d9e:	6818      	ldr	r0, [r3, #0]
}
 8001da0:	4770      	bx	lr
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	200003cc 	.word	0x200003cc

08001da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da8:	b570      	push	{r4, r5, r6, lr}
 8001daa:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff fff6 	bl	8001d9c <HAL_GetTick>
 8001db0:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db2:	1c63      	adds	r3, r4, #1
 8001db4:	d002      	beq.n	8001dbc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db6:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <HAL_Delay+0x20>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001dbc:	f7ff ffee 	bl	8001d9c <HAL_GetTick>
 8001dc0:	1b40      	subs	r0, r0, r5
 8001dc2:	42a0      	cmp	r0, r4
 8001dc4:	d3fa      	bcc.n	8001dbc <HAL_Delay+0x14>
  {
  }
}
 8001dc6:	bd70      	pop	{r4, r5, r6, pc}
 8001dc8:	20000008 	.word	0x20000008

08001dcc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001dce:	2303      	movs	r3, #3
 8001dd0:	6802      	ldr	r2, [r0, #0]
{
 8001dd2:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001dd4:	6891      	ldr	r1, [r2, #8]
 8001dd6:	400b      	ands	r3, r1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d001      	beq.n	8001de0 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ddc:	2000      	movs	r0, #0
}
 8001dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001de0:	6811      	ldr	r1, [r2, #0]
 8001de2:	420b      	tst	r3, r1
 8001de4:	d00e      	beq.n	8001e04 <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001de6:	2705      	movs	r7, #5
 8001de8:	6893      	ldr	r3, [r2, #8]
 8001dea:	401f      	ands	r7, r3
 8001dec:	2f01      	cmp	r7, #1
 8001dee:	d00d      	beq.n	8001e0c <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df0:	2210      	movs	r2, #16
 8001df2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8001df4:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df6:	4313      	orrs	r3, r2
 8001df8:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001dfc:	3a0f      	subs	r2, #15
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001e02:	e7ec      	b.n	8001dde <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e04:	68d3      	ldr	r3, [r2, #12]
 8001e06:	041b      	lsls	r3, r3, #16
 8001e08:	d5e8      	bpl.n	8001ddc <ADC_Disable+0x10>
 8001e0a:	e7ec      	b.n	8001de6 <ADC_Disable+0x1a>
      __HAL_ADC_DISABLE(hadc);
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	6893      	ldr	r3, [r2, #8]
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e10:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 8001e12:	430b      	orrs	r3, r1
 8001e14:	6093      	str	r3, [r2, #8]
 8001e16:	2303      	movs	r3, #3
 8001e18:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001e1a:	f7ff ffbf 	bl	8001d9c <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e1e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001e20:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	421f      	tst	r7, r3
 8001e26:	d0d9      	beq.n	8001ddc <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e28:	f7ff ffb8 	bl	8001d9c <HAL_GetTick>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e2c:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e2e:	1b80      	subs	r0, r0, r6
 8001e30:	2802      	cmp	r0, #2
 8001e32:	d902      	bls.n	8001e3a <ADC_Disable+0x6e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	4215      	tst	r5, r2
 8001e38:	d103      	bne.n	8001e42 <ADC_Disable+0x76>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	421d      	tst	r5, r3
 8001e3e:	d1f3      	bne.n	8001e28 <ADC_Disable+0x5c>
 8001e40:	e7cc      	b.n	8001ddc <ADC_Disable+0x10>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e42:	2210      	movs	r2, #16
 8001e44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          return HAL_ERROR;
 8001e46:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e4e:	432b      	orrs	r3, r5
 8001e50:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001e52:	e7c4      	b.n	8001dde <ADC_Disable+0x12>

08001e54 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001e54:	2204      	movs	r2, #4
 8001e56:	6803      	ldr	r3, [r0, #0]
{
 8001e58:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001e5a:	6899      	ldr	r1, [r3, #8]
{
 8001e5c:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001e5e:	420a      	tst	r2, r1
 8001e60:	d01d      	beq.n	8001e9e <ADC_ConversionStop+0x4a>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001e62:	6899      	ldr	r1, [r3, #8]
 8001e64:	420a      	tst	r2, r1
 8001e66:	d006      	beq.n	8001e76 <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001e68:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001e6a:	0792      	lsls	r2, r2, #30
 8001e6c:	d403      	bmi.n	8001e76 <ADC_ConversionStop+0x22>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001e6e:	2110      	movs	r1, #16
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e76:	f7ff ff91 	bl	8001d9c <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001e7a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001e7c:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	075b      	lsls	r3, r3, #29
 8001e82:	d50c      	bpl.n	8001e9e <ADC_ConversionStop+0x4a>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001e84:	2504      	movs	r5, #4
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001e86:	f7ff ff89 	bl	8001d9c <HAL_GetTick>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001e8a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001e8c:	1b80      	subs	r0, r0, r6
 8001e8e:	2802      	cmp	r0, #2
 8001e90:	d902      	bls.n	8001e98 <ADC_ConversionStop+0x44>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	4215      	tst	r5, r2
 8001e96:	d104      	bne.n	8001ea2 <ADC_ConversionStop+0x4e>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	421d      	tst	r5, r3
 8001e9c:	d1f3      	bne.n	8001e86 <ADC_ConversionStop+0x32>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e9e:	2000      	movs	r0, #0
}
 8001ea0:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea2:	2210      	movs	r2, #16
 8001ea4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          return HAL_ERROR;
 8001ea6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001eae:	3a0f      	subs	r2, #15
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001eb4:	e7f4      	b.n	8001ea0 <ADC_ConversionStop+0x4c>
 8001eb6:	46c0      	nop			; (mov r8, r8)

08001eb8 <ADC_Enable.constprop.0>:
  __IO uint32_t wait_loop_index = 0U;
 8001eb8:	2300      	movs	r3, #0
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8001eba:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ebc:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8001ebe:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001ec0:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ec2:	6891      	ldr	r1, [r2, #8]
 8001ec4:	3303      	adds	r3, #3
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8001ec6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ec8:	400b      	ands	r3, r1
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d037      	beq.n	8001f3e <ADC_Enable.constprop.0+0x86>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001ece:	6891      	ldr	r1, [r2, #8]
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <ADC_Enable.constprop.0+0xa8>)
 8001ed2:	4219      	tst	r1, r3
 8001ed4:	d129      	bne.n	8001f2a <ADC_Enable.constprop.0+0x72>
    __HAL_ADC_ENABLE(hadc);
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	6893      	ldr	r3, [r2, #8]
 8001eda:	430b      	orrs	r3, r1
 8001edc:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ede:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <ADC_Enable.constprop.0+0xac>)
 8001ee0:	4921      	ldr	r1, [pc, #132]	; (8001f68 <ADC_Enable.constprop.0+0xb0>)
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	f7fe f910 	bl	8000108 <__udivsi3>
 8001ee8:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8001eea:	9b01      	ldr	r3, [sp, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <ADC_Enable.constprop.0+0x44>
      wait_loop_index--;
 8001ef0:	9b01      	ldr	r3, [sp, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001ef6:	9b01      	ldr	r3, [sp, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f9      	bne.n	8001ef0 <ADC_Enable.constprop.0+0x38>
    tickstart = HAL_GetTick();
 8001efc:	f7ff ff4e 	bl	8001d9c <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f00:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001f02:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f04:	681b      	ldr	r3, [r3, #0]
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f06:	2501      	movs	r5, #1
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f08:	07db      	lsls	r3, r3, #31
 8001f0a:	d40b      	bmi.n	8001f24 <ADC_Enable.constprop.0+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f0c:	f7ff ff46 	bl	8001d9c <HAL_GetTick>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f10:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f12:	1b80      	subs	r0, r0, r6
 8001f14:	2802      	cmp	r0, #2
 8001f16:	d902      	bls.n	8001f1e <ADC_Enable.constprop.0+0x66>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4215      	tst	r5, r2
 8001f1c:	d016      	beq.n	8001f4c <ADC_Enable.constprop.0+0x94>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	421d      	tst	r5, r3
 8001f22:	d0f3      	beq.n	8001f0c <ADC_Enable.constprop.0+0x54>
  return HAL_OK;
 8001f24:	2000      	movs	r0, #0
}
 8001f26:	b002      	add	sp, #8
 8001f28:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8001f2e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f30:	4313      	orrs	r3, r2
 8001f32:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f36:	3a0f      	subs	r2, #15
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001f3c:	e7f3      	b.n	8001f26 <ADC_Enable.constprop.0+0x6e>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f3e:	6811      	ldr	r1, [r2, #0]
 8001f40:	420b      	tst	r3, r1
 8001f42:	d1ef      	bne.n	8001f24 <ADC_Enable.constprop.0+0x6c>
 8001f44:	68d3      	ldr	r3, [r2, #12]
 8001f46:	041b      	lsls	r3, r3, #16
 8001f48:	d4ec      	bmi.n	8001f24 <ADC_Enable.constprop.0+0x6c>
 8001f4a:	e7c0      	b.n	8001ece <ADC_Enable.constprop.0+0x16>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          return HAL_ERROR;
 8001f50:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f52:	4313      	orrs	r3, r2
 8001f54:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f58:	432b      	orrs	r3, r5
 8001f5a:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001f5c:	e7e3      	b.n	8001f26 <ADC_Enable.constprop.0+0x6e>
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	80000017 	.word	0x80000017
 8001f64:	20000004 	.word	0x20000004
 8001f68:	000f4240 	.word	0x000f4240

08001f6c <HAL_ADC_Init>:
{
 8001f6c:	b570      	push	{r4, r5, r6, lr}
 8001f6e:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8001f70:	d100      	bne.n	8001f74 <HAL_ADC_Init+0x8>
 8001f72:	e082      	b.n	800207a <HAL_ADC_Init+0x10e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f74:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d069      	beq.n	800204e <HAL_ADC_Init+0xe2>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f7c:	06db      	lsls	r3, r3, #27
 8001f7e:	d460      	bmi.n	8002042 <HAL_ADC_Init+0xd6>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001f80:	6822      	ldr	r2, [r4, #0]
 8001f82:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8001f84:	075b      	lsls	r3, r3, #29
 8001f86:	d45c      	bmi.n	8002042 <HAL_ADC_Init+0xd6>
    ADC_STATE_CLR_SET(hadc->State,
 8001f88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f8a:	4949      	ldr	r1, [pc, #292]	; (80020b0 <HAL_ADC_Init+0x144>)
 8001f8c:	400b      	ands	r3, r1
 8001f8e:	3106      	adds	r1, #6
 8001f90:	31ff      	adds	r1, #255	; 0xff
 8001f92:	430b      	orrs	r3, r1
 8001f94:	63a3      	str	r3, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001f96:	2303      	movs	r3, #3
 8001f98:	6891      	ldr	r1, [r2, #8]
 8001f9a:	400b      	ands	r3, r1
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d05c      	beq.n	800205a <HAL_ADC_Init+0xee>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001fa0:	2118      	movs	r1, #24
 8001fa2:	68d3      	ldr	r3, [r2, #12]
 8001fa4:	438b      	bics	r3, r1
 8001fa6:	68a1      	ldr	r1, [r4, #8]
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001fac:	6913      	ldr	r3, [r2, #16]
 8001fae:	6861      	ldr	r1, [r4, #4]
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001fb8:	68d3      	ldr	r3, [r2, #12]
 8001fba:	493e      	ldr	r1, [pc, #248]	; (80020b4 <HAL_ADC_Init+0x148>)
 8001fbc:	400b      	ands	r3, r1
 8001fbe:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fc0:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001fc2:	7e61      	ldrb	r1, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fc4:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001fc6:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fc8:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001fca:	7ea0      	ldrb	r0, [r4, #26]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001fcc:	68e1      	ldr	r1, [r4, #12]
 8001fce:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001fd0:	0341      	lsls	r1, r0, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001fd2:	430b      	orrs	r3, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001fd4:	2124      	movs	r1, #36	; 0x24
 8001fd6:	5c61      	ldrb	r1, [r4, r1]
 8001fd8:	0049      	lsls	r1, r1, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001fda:	430b      	orrs	r3, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001fdc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001fde:	3901      	subs	r1, #1
 8001fe0:	1e4d      	subs	r5, r1, #1
 8001fe2:	41a9      	sbcs	r1, r5
 8001fe4:	0309      	lsls	r1, r1, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001fe6:	430b      	orrs	r3, r1
 8001fe8:	6921      	ldr	r1, [r4, #16]
 8001fea:	3902      	subs	r1, #2
 8001fec:	424d      	negs	r5, r1
 8001fee:	4169      	adcs	r1, r5
 8001ff0:	0089      	lsls	r1, r1, #2
 8001ff2:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ff4:	7ee1      	ldrb	r1, [r4, #27]
 8001ff6:	2901      	cmp	r1, #1
 8001ff8:	d04b      	beq.n	8002092 <HAL_ADC_Init+0x126>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ffa:	20c2      	movs	r0, #194	; 0xc2
 8001ffc:	69e1      	ldr	r1, [r4, #28]
 8001ffe:	30ff      	adds	r0, #255	; 0xff
 8002000:	4281      	cmp	r1, r0
 8002002:	d002      	beq.n	800200a <HAL_ADC_Init+0x9e>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002004:	6a20      	ldr	r0, [r4, #32]
 8002006:	4301      	orrs	r1, r0
 8002008:	430b      	orrs	r3, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800200a:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800200c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800200e:	4319      	orrs	r1, r3
 8002010:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002012:	2180      	movs	r1, #128	; 0x80
 8002014:	0549      	lsls	r1, r1, #21
 8002016:	428d      	cmp	r5, r1
 8002018:	d026      	beq.n	8002068 <HAL_ADC_Init+0xfc>
 800201a:	1e69      	subs	r1, r5, #1
 800201c:	2906      	cmp	r1, #6
 800201e:	d923      	bls.n	8002068 <HAL_ADC_Init+0xfc>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002020:	68d2      	ldr	r2, [r2, #12]
 8002022:	4925      	ldr	r1, [pc, #148]	; (80020b8 <HAL_ADC_Init+0x14c>)
 8002024:	400a      	ands	r2, r1
 8002026:	429a      	cmp	r2, r3
 8002028:	d029      	beq.n	800207e <HAL_ADC_Init+0x112>
      ADC_STATE_CLR_SET(hadc->State,
 800202a:	2212      	movs	r2, #18
 800202c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      tmp_hal_status = HAL_ERROR;
 800202e:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002030:	4393      	bics	r3, r2
 8002032:	3a02      	subs	r2, #2
 8002034:	4313      	orrs	r3, r2
 8002036:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002038:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800203a:	3a0f      	subs	r2, #15
 800203c:	4313      	orrs	r3, r2
 800203e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002040:	e004      	b.n	800204c <HAL_ADC_Init+0xe0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002042:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 8002044:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002046:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002048:	4313      	orrs	r3, r2
 800204a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800204c:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Lock = HAL_UNLOCKED;
 800204e:	2234      	movs	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8002050:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8002052:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8002054:	f7ff fb8a 	bl	800176c <HAL_ADC_MspInit>
 8002058:	e78f      	b.n	8001f7a <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800205a:	6811      	ldr	r1, [r2, #0]
 800205c:	420b      	tst	r3, r1
 800205e:	d1ab      	bne.n	8001fb8 <HAL_ADC_Init+0x4c>
 8002060:	68d3      	ldr	r3, [r2, #12]
 8002062:	041b      	lsls	r3, r3, #16
 8002064:	d4a8      	bmi.n	8001fb8 <HAL_ADC_Init+0x4c>
 8002066:	e79b      	b.n	8001fa0 <HAL_ADC_Init+0x34>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002068:	2107      	movs	r1, #7
 800206a:	6950      	ldr	r0, [r2, #20]
 800206c:	4388      	bics	r0, r1
 800206e:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002070:	6950      	ldr	r0, [r2, #20]
 8002072:	4029      	ands	r1, r5
 8002074:	4301      	orrs	r1, r0
 8002076:	6151      	str	r1, [r2, #20]
 8002078:	e7d2      	b.n	8002020 <HAL_ADC_Init+0xb4>
    return HAL_ERROR;
 800207a:	2001      	movs	r0, #1
 800207c:	e7e6      	b.n	800204c <HAL_ADC_Init+0xe0>
      ADC_CLEAR_ERRORCODE(hadc);
 800207e:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002080:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8002082:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8002084:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002086:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002088:	4393      	bics	r3, r2
 800208a:	3a02      	subs	r2, #2
 800208c:	4313      	orrs	r3, r2
 800208e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002090:	e7dc      	b.n	800204c <HAL_ADC_Init+0xe0>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002092:	2800      	cmp	r0, #0
 8002094:	d103      	bne.n	800209e <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002096:	2180      	movs	r1, #128	; 0x80
 8002098:	0249      	lsls	r1, r1, #9
 800209a:	430b      	orrs	r3, r1
 800209c:	e7ad      	b.n	8001ffa <HAL_ADC_Init+0x8e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800209e:	2520      	movs	r5, #32
 80020a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80020a2:	4328      	orrs	r0, r5
 80020a4:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80020a8:	4301      	orrs	r1, r0
 80020aa:	63e1      	str	r1, [r4, #60]	; 0x3c
 80020ac:	e7a5      	b.n	8001ffa <HAL_ADC_Init+0x8e>
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	fffffefd 	.word	0xfffffefd
 80020b4:	fffe0219 	.word	0xfffe0219
 80020b8:	833fffe7 	.word	0x833fffe7

080020bc <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80020bc:	2334      	movs	r3, #52	; 0x34
{ 
 80020be:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80020c0:	5cc2      	ldrb	r2, [r0, r3]
{ 
 80020c2:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80020c4:	2a01      	cmp	r2, #1
 80020c6:	d014      	beq.n	80020f2 <HAL_ADC_Stop+0x36>
 80020c8:	2501      	movs	r5, #1
 80020ca:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80020cc:	f7ff fec2 	bl	8001e54 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80020d0:	2800      	cmp	r0, #0
 80020d2:	d003      	beq.n	80020dc <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80020d4:	2334      	movs	r3, #52	; 0x34
 80020d6:	2200      	movs	r2, #0
 80020d8:	54e2      	strb	r2, [r4, r3]
}
 80020da:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80020dc:	0020      	movs	r0, r4
 80020de:	f7ff fe75 	bl	8001dcc <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80020e2:	2800      	cmp	r0, #0
 80020e4:	d1f6      	bne.n	80020d4 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80020e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020e8:	4a03      	ldr	r2, [pc, #12]	; (80020f8 <HAL_ADC_Stop+0x3c>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	432b      	orrs	r3, r5
 80020ee:	63a3      	str	r3, [r4, #56]	; 0x38
 80020f0:	e7f0      	b.n	80020d4 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80020f2:	2002      	movs	r0, #2
 80020f4:	e7f1      	b.n	80020da <HAL_ADC_Stop+0x1e>
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	fffffefe 	.word	0xfffffefe

080020fc <HAL_ADC_Start_DMA>:
{
 80020fc:	b5d0      	push	{r4, r6, r7, lr}
 80020fe:	000e      	movs	r6, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002100:	6801      	ldr	r1, [r0, #0]
{
 8002102:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002104:	688b      	ldr	r3, [r1, #8]
{
 8002106:	0017      	movs	r7, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002108:	075b      	lsls	r3, r3, #29
 800210a:	d435      	bmi.n	8002178 <HAL_ADC_Start_DMA+0x7c>
    __HAL_LOCK(hadc);
 800210c:	2334      	movs	r3, #52	; 0x34
 800210e:	5cc2      	ldrb	r2, [r0, r3]
 8002110:	2a01      	cmp	r2, #1
 8002112:	d031      	beq.n	8002178 <HAL_ADC_Start_DMA+0x7c>
 8002114:	2201      	movs	r2, #1
 8002116:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002118:	7e43      	ldrb	r3, [r0, #25]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d004      	beq.n	8002128 <HAL_ADC_Start_DMA+0x2c>
      tmp_hal_status = ADC_Enable(hadc);
 800211e:	f7ff fecb 	bl	8001eb8 <ADC_Enable.constprop.0>
    if (tmp_hal_status == HAL_OK)
 8002122:	2800      	cmp	r0, #0
 8002124:	d127      	bne.n	8002176 <HAL_ADC_Start_DMA+0x7a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002126:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8002128:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <HAL_ADC_Start_DMA+0x80>)
 800212c:	401a      	ands	r2, r3
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4313      	orrs	r3, r2
 8002134:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 8002136:	2234      	movs	r2, #52	; 0x34
      ADC_CLEAR_ERRORCODE(hadc);
 8002138:	2300      	movs	r3, #0
 800213a:	63e3      	str	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 800213c:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800213e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_ADC_Start_DMA+0x84>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002142:	3a24      	subs	r2, #36	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002144:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_ADC_Start_DMA+0x88>)
 8002148:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <HAL_ADC_Start_DMA+0x8c>)
 800214c:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800214e:	231c      	movs	r3, #28
 8002150:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002152:	684b      	ldr	r3, [r1, #4]
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002158:	68cb      	ldr	r3, [r1, #12]
 800215a:	3a0f      	subs	r2, #15
 800215c:	4313      	orrs	r3, r2
 800215e:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002160:	0032      	movs	r2, r6
 8002162:	003b      	movs	r3, r7
 8002164:	3140      	adds	r1, #64	; 0x40
 8002166:	f000 f9dd 	bl	8002524 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800216a:	2104      	movs	r1, #4
 800216c:	2000      	movs	r0, #0
 800216e:	6822      	ldr	r2, [r4, #0]
 8002170:	6893      	ldr	r3, [r2, #8]
 8002172:	430b      	orrs	r3, r1
 8002174:	6093      	str	r3, [r2, #8]
}
 8002176:	bdd0      	pop	{r4, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 8002178:	2002      	movs	r0, #2
 800217a:	e7fc      	b.n	8002176 <HAL_ADC_Start_DMA+0x7a>
 800217c:	fffff0fe 	.word	0xfffff0fe
 8002180:	0800218d 	.word	0x0800218d
 8002184:	08002205 	.word	0x08002205
 8002188:	08002215 	.word	0x08002215

0800218c <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800218c:	2150      	movs	r1, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800218e:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002190:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002194:	4211      	tst	r1, r2
 8002196:	d10e      	bne.n	80021b6 <ADC_DMAConvCplt+0x2a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002198:	2280      	movs	r2, #128	; 0x80
 800219a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800219c:	0092      	lsls	r2, r2, #2
 800219e:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021a0:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	0109      	lsls	r1, r1, #4
 80021a8:	68d0      	ldr	r0, [r2, #12]
 80021aa:	4208      	tst	r0, r1
 80021ac:	d007      	beq.n	80021be <ADC_DMAConvCplt+0x32>

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021ae:	0018      	movs	r0, r3
 80021b0:	f7ff f830 	bl	8001214 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80021b4:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4798      	blx	r3
}
 80021bc:	e7fa      	b.n	80021b4 <ADC_DMAConvCplt+0x28>
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021be:	7e99      	ldrb	r1, [r3, #26]
 80021c0:	2900      	cmp	r1, #0
 80021c2:	d1f4      	bne.n	80021ae <ADC_DMAConvCplt+0x22>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80021c4:	6811      	ldr	r1, [r2, #0]
 80021c6:	0709      	lsls	r1, r1, #28
 80021c8:	d5f1      	bpl.n	80021ae <ADC_DMAConvCplt+0x22>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021ca:	6891      	ldr	r1, [r2, #8]
 80021cc:	0749      	lsls	r1, r1, #29
 80021ce:	d40b      	bmi.n	80021e8 <ADC_DMAConvCplt+0x5c>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80021d0:	200c      	movs	r0, #12
 80021d2:	6851      	ldr	r1, [r2, #4]
 80021d4:	4381      	bics	r1, r0
 80021d6:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80021d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021da:	4908      	ldr	r1, [pc, #32]	; (80021fc <ADC_DMAConvCplt+0x70>)
 80021dc:	400a      	ands	r2, r1
 80021de:	3104      	adds	r1, #4
 80021e0:	31ff      	adds	r1, #255	; 0xff
 80021e2:	430a      	orrs	r2, r1
 80021e4:	639a      	str	r2, [r3, #56]	; 0x38
 80021e6:	e7e2      	b.n	80021ae <ADC_DMAConvCplt+0x22>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e8:	2120      	movs	r1, #32
 80021ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ec:	430a      	orrs	r2, r1
 80021ee:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021f2:	391f      	subs	r1, #31
 80021f4:	430a      	orrs	r2, r1
 80021f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80021f8:	e7d9      	b.n	80021ae <ADC_DMAConvCplt+0x22>
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	fffffefe 	.word	0xfffffefe

08002200 <HAL_ADC_ConvHalfCpltCallback>:
 8002200:	4770      	bx	lr
 8002202:	46c0      	nop			; (mov r8, r8)

08002204 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002204:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002206:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002208:	f7ff fffa 	bl	8002200 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800220c:	bd10      	pop	{r4, pc}
 800220e:	46c0      	nop			; (mov r8, r8)

08002210 <HAL_ADC_ErrorCallback>:
 8002210:	4770      	bx	lr
 8002212:	46c0      	nop			; (mov r8, r8)

08002214 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002214:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002216:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002218:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800221a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800221c:	4313      	orrs	r3, r2
 800221e:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002220:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002222:	3a3c      	subs	r2, #60	; 0x3c
 8002224:	4313      	orrs	r3, r2
 8002226:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002228:	f7ff fff2 	bl	8002210 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800222c:	bd10      	pop	{r4, pc}
 800222e:	46c0      	nop			; (mov r8, r8)

08002230 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8002230:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8002232:	2234      	movs	r2, #52	; 0x34
{
 8002234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002236:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002238:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800223a:	5c83      	ldrb	r3, [r0, r2]
{
 800223c:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800223e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8002240:	2b01      	cmp	r3, #1
 8002242:	d060      	beq.n	8002306 <HAL_ADC_ConfigChannel+0xd6>
 8002244:	2301      	movs	r3, #1
 8002246:	5483      	strb	r3, [r0, r2]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002248:	6805      	ldr	r5, [r0, #0]
 800224a:	68aa      	ldr	r2, [r5, #8]
 800224c:	0752      	lsls	r2, r2, #29
 800224e:	d509      	bpl.n	8002264 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002250:	2220      	movs	r2, #32
 8002252:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002254:	4313      	orrs	r3, r2
 8002256:	6383      	str	r3, [r0, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8002258:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800225a:	2334      	movs	r3, #52	; 0x34
 800225c:	2200      	movs	r2, #0
 800225e:	54e2      	strb	r2, [r4, r3]
}
 8002260:	b003      	add	sp, #12
 8002262:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 8002264:	4a36      	ldr	r2, [pc, #216]	; (8002340 <HAL_ADC_ConfigChannel+0x110>)
 8002266:	6848      	ldr	r0, [r1, #4]
 8002268:	4290      	cmp	r0, r2
 800226a:	d030      	beq.n	80022ce <HAL_ADC_ConfigChannel+0x9e>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800226c:	680a      	ldr	r2, [r1, #0]
 800226e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8002270:	4093      	lsls	r3, r2
 8002272:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002274:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002276:	4338      	orrs	r0, r7
 8002278:	62a8      	str	r0, [r5, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800227a:	055b      	lsls	r3, r3, #21
 800227c:	429e      	cmp	r6, r3
 800227e:	d00f      	beq.n	80022a0 <HAL_ADC_ConfigChannel+0x70>
 8002280:	3e01      	subs	r6, #1
 8002282:	2e06      	cmp	r6, #6
 8002284:	d90c      	bls.n	80022a0 <HAL_ADC_ConfigChannel+0x70>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002286:	2307      	movs	r3, #7
 8002288:	6888      	ldr	r0, [r1, #8]
 800228a:	6969      	ldr	r1, [r5, #20]
 800228c:	4019      	ands	r1, r3
 800228e:	4288      	cmp	r0, r1
 8002290:	d006      	beq.n	80022a0 <HAL_ADC_ConfigChannel+0x70>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002292:	6969      	ldr	r1, [r5, #20]
 8002294:	4399      	bics	r1, r3
 8002296:	6169      	str	r1, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002298:	6969      	ldr	r1, [r5, #20]
 800229a:	4003      	ands	r3, r0
 800229c:	430b      	orrs	r3, r1
 800229e:	616b      	str	r3, [r5, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022a0:	0013      	movs	r3, r2
 80022a2:	3b10      	subs	r3, #16
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d810      	bhi.n	80022ca <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80022a8:	4926      	ldr	r1, [pc, #152]	; (8002344 <HAL_ADC_ConfigChannel+0x114>)
 80022aa:	680b      	ldr	r3, [r1, #0]
 80022ac:	2a10      	cmp	r2, #16
 80022ae:	d02e      	beq.n	800230e <HAL_ADC_ConfigChannel+0xde>
 80022b0:	3a11      	subs	r2, #17
 80022b2:	1e50      	subs	r0, r2, #1
 80022b4:	4182      	sbcs	r2, r0
 80022b6:	20c0      	movs	r0, #192	; 0xc0
 80022b8:	4252      	negs	r2, r2
 80022ba:	0400      	lsls	r0, r0, #16
 80022bc:	4002      	ands	r2, r0
 80022be:	2080      	movs	r0, #128	; 0x80
 80022c0:	03c0      	lsls	r0, r0, #15
 80022c2:	4684      	mov	ip, r0
 80022c4:	4462      	add	r2, ip
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ca:	2000      	movs	r0, #0
 80022cc:	e7c5      	b.n	800225a <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80022ce:	680a      	ldr	r2, [r1, #0]
 80022d0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80022d2:	4093      	lsls	r3, r2
 80022d4:	4398      	bics	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022d6:	0013      	movs	r3, r2
 80022d8:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80022da:	62a8      	str	r0, [r5, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d8f4      	bhi.n	80022ca <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_ADC_ConfigChannel+0x114>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2a10      	cmp	r2, #16
 80022e6:	d010      	beq.n	800230a <HAL_ADC_ConfigChannel+0xda>
 80022e8:	3a11      	subs	r2, #17
 80022ea:	4251      	negs	r1, r2
 80022ec:	414a      	adcs	r2, r1
 80022ee:	21c0      	movs	r1, #192	; 0xc0
 80022f0:	4252      	negs	r2, r2
 80022f2:	0409      	lsls	r1, r1, #16
 80022f4:	400a      	ands	r2, r1
 80022f6:	4914      	ldr	r1, [pc, #80]	; (8002348 <HAL_ADC_ConfigChannel+0x118>)
 80022f8:	468c      	mov	ip, r1
 80022fa:	4462      	add	r2, ip
 80022fc:	401a      	ands	r2, r3
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_ADC_ConfigChannel+0x114>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002300:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	e7a9      	b.n	800225a <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 8002306:	2002      	movs	r0, #2
 8002308:	e7aa      	b.n	8002260 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800230a:	4a10      	ldr	r2, [pc, #64]	; (800234c <HAL_ADC_ConfigChannel+0x11c>)
 800230c:	e7f6      	b.n	80022fc <HAL_ADC_ConfigChannel+0xcc>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800230e:	2280      	movs	r2, #128	; 0x80
 8002310:	0412      	lsls	r2, r2, #16
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <HAL_ADC_ConfigChannel+0x120>)
 8002318:	490e      	ldr	r1, [pc, #56]	; (8002354 <HAL_ADC_ConfigChannel+0x124>)
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	f7fd fef4 	bl	8000108 <__udivsi3>
 8002320:	0083      	lsls	r3, r0, #2
 8002322:	181b      	adds	r3, r3, r0
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002328:	9b01      	ldr	r3, [sp, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0cd      	beq.n	80022ca <HAL_ADC_ConfigChannel+0x9a>
            wait_loop_index--;
 800232e:	9b01      	ldr	r3, [sp, #4]
 8002330:	3b01      	subs	r3, #1
 8002332:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002334:	9b01      	ldr	r3, [sp, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f9      	bne.n	800232e <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233a:	2000      	movs	r0, #0
 800233c:	e78d      	b.n	800225a <HAL_ADC_ConfigChannel+0x2a>
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	00001001 	.word	0x00001001
 8002344:	40012708 	.word	0x40012708
 8002348:	feffffff 	.word	0xfeffffff
 800234c:	ff7fffff 	.word	0xff7fffff
 8002350:	20000004 	.word	0x20000004
 8002354:	000f4240 	.word	0x000f4240

08002358 <HAL_ADCEx_Calibration_Start>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002358:	2334      	movs	r3, #52	; 0x34
{
 800235a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800235c:	5cc2      	ldrb	r2, [r0, r3]
{
 800235e:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8002360:	2a01      	cmp	r2, #1
 8002362:	d04e      	beq.n	8002402 <HAL_ADCEx_Calibration_Start+0xaa>
 8002364:	2201      	movs	r2, #1
 8002366:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002368:	6803      	ldr	r3, [r0, #0]
 800236a:	3202      	adds	r2, #2
 800236c:	6899      	ldr	r1, [r3, #8]
 800236e:	400a      	ands	r2, r1
 8002370:	2a01      	cmp	r2, #1
 8002372:	d105      	bne.n	8002380 <HAL_ADCEx_Calibration_Start+0x28>
 8002374:	6819      	ldr	r1, [r3, #0]
 8002376:	420a      	tst	r2, r1
 8002378:	d12e      	bne.n	80023d8 <HAL_ADCEx_Calibration_Start+0x80>
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	0412      	lsls	r2, r2, #16
 800237e:	d42b      	bmi.n	80023d8 <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002380:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002382:	4921      	ldr	r1, [pc, #132]	; (8002408 <HAL_ADCEx_Calibration_Start+0xb0>)
 8002384:	400a      	ands	r2, r1
 8002386:	3106      	adds	r1, #6
 8002388:	31ff      	adds	r1, #255	; 0xff
 800238a:	430a      	orrs	r2, r1
 800238c:	63a2      	str	r2, [r4, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800238e:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	3101      	adds	r1, #1
 8002394:	438a      	bics	r2, r1
 8002396:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002398:	2280      	movs	r2, #128	; 0x80
 800239a:	6899      	ldr	r1, [r3, #8]
 800239c:	0612      	lsls	r2, r2, #24
 800239e:	430a      	orrs	r2, r1
 80023a0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80023a2:	f7ff fcfb 	bl	8001d9c <HAL_GetTick>
 80023a6:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	2a00      	cmp	r2, #0
 80023ae:	da1c      	bge.n	80023ea <HAL_ADCEx_Calibration_Start+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80023b0:	f7ff fcf4 	bl	8001d9c <HAL_GetTick>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80023b4:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80023b6:	1b40      	subs	r0, r0, r5
 80023b8:	2802      	cmp	r0, #2
 80023ba:	d9f6      	bls.n	80023aa <HAL_ADCEx_Calibration_Start+0x52>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	2a00      	cmp	r2, #0
 80023c0:	daf3      	bge.n	80023aa <HAL_ADCEx_Calibration_Start+0x52>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80023c2:	2212      	movs	r2, #18
 80023c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);

          return HAL_ERROR;
 80023c6:	2001      	movs	r0, #1
          ADC_STATE_CLR_SET(hadc->State,
 80023c8:	4393      	bics	r3, r2
 80023ca:	3a02      	subs	r2, #2
 80023cc:	4313      	orrs	r3, r2
 80023ce:	63a3      	str	r3, [r4, #56]	; 0x38
          __HAL_UNLOCK(hadc);
 80023d0:	2200      	movs	r2, #0
 80023d2:	2334      	movs	r3, #52	; 0x34
 80023d4:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 80023d6:	e007      	b.n	80023e8 <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d8:	2220      	movs	r2, #32
    
    tmp_hal_status = HAL_ERROR;
 80023da:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023de:	4313      	orrs	r3, r2
 80023e0:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e2:	2334      	movs	r3, #52	; 0x34
 80023e4:	2200      	movs	r2, #0
 80023e6:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80023ea:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80023ec:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80023ee:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80023f0:	430e      	orrs	r6, r1
 80023f2:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80023f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f6:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 80023f8:	4393      	bics	r3, r2
 80023fa:	3a02      	subs	r2, #2
 80023fc:	4313      	orrs	r3, r2
 80023fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8002400:	e7ef      	b.n	80023e2 <HAL_ADCEx_Calibration_Start+0x8a>
  __HAL_LOCK(hadc);
 8002402:	2002      	movs	r0, #2
 8002404:	e7f0      	b.n	80023e8 <HAL_ADCEx_Calibration_Start+0x90>
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	fffffefd 	.word	0xfffffefd

0800240c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800240c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 800240e:	2800      	cmp	r0, #0
 8002410:	db14      	blt.n	800243c <HAL_NVIC_SetPriority+0x30>
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002414:	2203      	movs	r2, #3
 8002416:	469c      	mov	ip, r3
 8002418:	23ff      	movs	r3, #255	; 0xff
 800241a:	0884      	lsrs	r4, r0, #2
 800241c:	4002      	ands	r2, r0
 800241e:	0018      	movs	r0, r3
 8002420:	26c0      	movs	r6, #192	; 0xc0
 8002422:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002424:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002426:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002428:	400b      	ands	r3, r1
 800242a:	4093      	lsls	r3, r2
 800242c:	00a4      	lsls	r4, r4, #2
 800242e:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002430:	00b6      	lsls	r6, r6, #2
 8002432:	59a5      	ldr	r5, [r4, r6]
 8002434:	4385      	bics	r5, r0
 8002436:	432b      	orrs	r3, r5
 8002438:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800243a:	bd70      	pop	{r4, r5, r6, pc}
 800243c:	4a0b      	ldr	r2, [pc, #44]	; (800246c <HAL_NVIC_SetPriority+0x60>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800243e:	230f      	movs	r3, #15
 8002440:	4694      	mov	ip, r2
 8002442:	2203      	movs	r2, #3
 8002444:	4003      	ands	r3, r0
 8002446:	4010      	ands	r0, r2
 8002448:	32fc      	adds	r2, #252	; 0xfc
 800244a:	0015      	movs	r5, r2
 800244c:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800244e:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002450:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002452:	400a      	ands	r2, r1
 8002454:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002456:	3b08      	subs	r3, #8
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4463      	add	r3, ip
 800245e:	69dc      	ldr	r4, [r3, #28]
 8002460:	43ac      	bics	r4, r5
 8002462:	4322      	orrs	r2, r4
 8002464:	61da      	str	r2, [r3, #28]
 8002466:	e7e8      	b.n	800243a <HAL_NVIC_SetPriority+0x2e>
 8002468:	e000e100 	.word	0xe000e100
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002470:	2800      	cmp	r0, #0
 8002472:	db05      	blt.n	8002480 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002474:	221f      	movs	r2, #31
 8002476:	2301      	movs	r3, #1
 8002478:	4002      	ands	r2, r0
 800247a:	4093      	lsls	r3, r2
 800247c:	4a01      	ldr	r2, [pc, #4]	; (8002484 <HAL_NVIC_EnableIRQ+0x14>)
 800247e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002480:	4770      	bx	lr
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	e000e100 	.word	0xe000e100

08002488 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002488:	2280      	movs	r2, #128	; 0x80
 800248a:	1e43      	subs	r3, r0, #1
 800248c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800248e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002490:	4293      	cmp	r3, r2
 8002492:	d20e      	bcs.n	80024b2 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002494:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002496:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002498:	4807      	ldr	r0, [pc, #28]	; (80024b8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800249c:	6a03      	ldr	r3, [r0, #32]
 800249e:	0609      	lsls	r1, r1, #24
 80024a0:	021b      	lsls	r3, r3, #8
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	430b      	orrs	r3, r1
 80024a6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a8:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024aa:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ac:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ae:	3307      	adds	r3, #7
 80024b0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80024b2:	4770      	bx	lr
 80024b4:	e000e010 	.word	0xe000e010
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80024c0:	d027      	beq.n	8002512 <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024c2:	2521      	movs	r5, #33	; 0x21
 80024c4:	2302      	movs	r3, #2
 80024c6:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024c8:	6800      	ldr	r0, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80024cc:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024ce:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024d0:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80024d2:	6863      	ldr	r3, [r4, #4]
 80024d4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d6:	68e1      	ldr	r1, [r4, #12]
 80024d8:	430b      	orrs	r3, r1
 80024da:	6921      	ldr	r1, [r4, #16]
 80024dc:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024de:	6961      	ldr	r1, [r4, #20]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	69a1      	ldr	r1, [r4, #24]
 80024e4:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e6:	69e1      	ldr	r1, [r4, #28]
 80024e8:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80024ea:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024ec:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024ee:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_DMA_Init+0x60>)
 80024f0:	2114      	movs	r1, #20
 80024f2:	469c      	mov	ip, r3
 80024f4:	4460      	add	r0, ip
 80024f6:	f7fd fe07 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 80024fc:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 80024fe:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002500:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002502:	0080      	lsls	r0, r0, #2
 8002504:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8002506:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002508:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800250a:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 800250c:	321f      	adds	r2, #31
 800250e:	54a3      	strb	r3, [r4, r2]
}
 8002510:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002512:	2001      	movs	r0, #1
 8002514:	e7fc      	b.n	8002510 <HAL_DMA_Init+0x54>
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	ffffc00f 	.word	0xffffc00f
 800251c:	bffdfff8 	.word	0xbffdfff8
 8002520:	40020000 	.word	0x40020000

08002524 <HAL_DMA_Start_IT>:
{
 8002524:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8002526:	2420      	movs	r4, #32
 8002528:	5d05      	ldrb	r5, [r0, r4]
 800252a:	2d01      	cmp	r5, #1
 800252c:	d037      	beq.n	800259e <HAL_DMA_Start_IT+0x7a>
 800252e:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8002530:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 8002532:	5505      	strb	r5, [r0, r4]
  if (HAL_DMA_STATE_READY == hdma->State)
 8002534:	5dc5      	ldrb	r5, [r0, r7]
 8002536:	b2ee      	uxtb	r6, r5
 8002538:	2d01      	cmp	r5, #1
 800253a:	d003      	beq.n	8002544 <HAL_DMA_Start_IT+0x20>
    __HAL_UNLOCK(hdma);
 800253c:	2300      	movs	r3, #0
 800253e:	5503      	strb	r3, [r0, r4]
    status = HAL_BUSY;
 8002540:	2002      	movs	r0, #2
}
 8002542:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002544:	3c1e      	subs	r4, #30
 8002546:	55c4      	strb	r4, [r0, r7]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002548:	2400      	movs	r4, #0
 800254a:	6384      	str	r4, [r0, #56]	; 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800254c:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800254e:	6c07      	ldr	r7, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002550:	6825      	ldr	r5, [r4, #0]
 8002552:	43b5      	bics	r5, r6
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002554:	40be      	lsls	r6, r7
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002556:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002558:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800255a:	606e      	str	r6, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 800255c:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800255e:	6843      	ldr	r3, [r0, #4]
 8002560:	2b10      	cmp	r3, #16
 8002562:	d00e      	beq.n	8002582 <HAL_DMA_Start_IT+0x5e>
    if (NULL != hdma->XferHalfCpltCallback)
 8002564:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = SrcAddress;
 8002566:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8002568:	60e2      	str	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00e      	beq.n	800258c <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800256e:	220e      	movs	r2, #14
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002576:	2201      	movs	r2, #1
 8002578:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800257a:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 800257c:	4313      	orrs	r3, r2
 800257e:	6023      	str	r3, [r4, #0]
 8002580:	e7df      	b.n	8002542 <HAL_DMA_Start_IT+0x1e>
    if (NULL != hdma->XferHalfCpltCallback)
 8002582:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8002584:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002586:	60e1      	str	r1, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f0      	bne.n	800256e <HAL_DMA_Start_IT+0x4a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800258c:	220a      	movs	r2, #10
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	4313      	orrs	r3, r2
 8002592:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	3a06      	subs	r2, #6
 8002598:	4393      	bics	r3, r2
 800259a:	6023      	str	r3, [r4, #0]
 800259c:	e7eb      	b.n	8002576 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 800259e:	2002      	movs	r0, #2
 80025a0:	e7cf      	b.n	8002542 <HAL_DMA_Start_IT+0x1e>
 80025a2:	46c0      	nop			; (mov r8, r8)

080025a4 <HAL_DMA_Abort>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025a4:	2221      	movs	r2, #33	; 0x21
{
 80025a6:	b530      	push	{r4, r5, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025a8:	5c81      	ldrb	r1, [r0, r2]
{
 80025aa:	0003      	movs	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025ac:	2902      	cmp	r1, #2
 80025ae:	d006      	beq.n	80025be <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025b0:	3a1d      	subs	r2, #29
 80025b2:	6382      	str	r2, [r0, #56]	; 0x38
    return HAL_ERROR;
 80025b4:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80025b6:	2220      	movs	r2, #32
 80025b8:	2100      	movs	r1, #0
 80025ba:	5499      	strb	r1, [r3, r2]
}
 80025bc:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025be:	240e      	movs	r4, #14
 80025c0:	6801      	ldr	r1, [r0, #0]
 80025c2:	6808      	ldr	r0, [r1, #0]
 80025c4:	43a0      	bics	r0, r4
 80025c6:	6008      	str	r0, [r1, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025c8:	2001      	movs	r0, #1
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025ca:	0005      	movs	r5, r0
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025cc:	680c      	ldr	r4, [r1, #0]
 80025ce:	4384      	bics	r4, r0
 80025d0:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025d2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80025d4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80025d6:	40a5      	lsls	r5, r4
 80025d8:	604d      	str	r5, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 80025da:	5498      	strb	r0, [r3, r2]
  return HAL_OK;
 80025dc:	2000      	movs	r0, #0
 80025de:	e7ea      	b.n	80025b6 <HAL_DMA_Abort+0x12>

080025e0 <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80025e0:	2321      	movs	r3, #33	; 0x21
{
 80025e2:	b570      	push	{r4, r5, r6, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80025e4:	5cc2      	ldrb	r2, [r0, r3]
 80025e6:	2a02      	cmp	r2, #2
 80025e8:	d003      	beq.n	80025f2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ea:	3b1d      	subs	r3, #29
 80025ec:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80025ee:	2001      	movs	r0, #1
}
 80025f0:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025f2:	240e      	movs	r4, #14
 80025f4:	6802      	ldr	r2, [r0, #0]
 80025f6:	6811      	ldr	r1, [r2, #0]
 80025f8:	43a1      	bics	r1, r4
 80025fa:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025fc:	2101      	movs	r1, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025fe:	000d      	movs	r5, r1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002600:	6814      	ldr	r4, [r2, #0]
 8002602:	438c      	bics	r4, r1
 8002604:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002606:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002608:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800260a:	40a5      	lsls	r5, r4
 800260c:	6055      	str	r5, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800260e:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8002610:	2200      	movs	r2, #0
 8002612:	2320      	movs	r3, #32
 8002614:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8002616:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 800261c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800261e:	2000      	movs	r0, #0
 8002620:	e7e6      	b.n	80025f0 <HAL_DMA_Abort_IT+0x10>
 8002622:	2000      	movs	r0, #0
 8002624:	e7e4      	b.n	80025f0 <HAL_DMA_Abort_IT+0x10>
 8002626:	46c0      	nop			; (mov r8, r8)

08002628 <HAL_DMA_IRQHandler>:
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002628:	2104      	movs	r1, #4
{
 800262a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800262c:	000c      	movs	r4, r1
 800262e:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002630:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002632:	409c      	lsls	r4, r3
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002634:	683a      	ldr	r2, [r7, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002636:	6806      	ldr	r6, [r0, #0]
 8002638:	6835      	ldr	r5, [r6, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800263a:	4222      	tst	r2, r4
 800263c:	d00d      	beq.n	800265a <HAL_DMA_IRQHandler+0x32>
 800263e:	4229      	tst	r1, r5
 8002640:	d00b      	beq.n	800265a <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002642:	6833      	ldr	r3, [r6, #0]
 8002644:	069b      	lsls	r3, r3, #26
 8002646:	d402      	bmi.n	800264e <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002648:	6833      	ldr	r3, [r6, #0]
 800264a:	438b      	bics	r3, r1
 800264c:	6033      	str	r3, [r6, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800264e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002650:	607c      	str	r4, [r7, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8002652:	2b00      	cmp	r3, #0
 8002654:	d000      	beq.n	8002658 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 8002656:	4798      	blx	r3
}
 8002658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800265a:	2102      	movs	r1, #2
 800265c:	000c      	movs	r4, r1
 800265e:	409c      	lsls	r4, r3
 8002660:	4222      	tst	r2, r4
 8002662:	d014      	beq.n	800268e <HAL_DMA_IRQHandler+0x66>
 8002664:	4229      	tst	r1, r5
 8002666:	d012      	beq.n	800268e <HAL_DMA_IRQHandler+0x66>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002668:	6833      	ldr	r3, [r6, #0]
 800266a:	069b      	lsls	r3, r3, #26
 800266c:	d406      	bmi.n	800267c <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800266e:	220a      	movs	r2, #10
 8002670:	6833      	ldr	r3, [r6, #0]
 8002672:	4393      	bics	r3, r2
 8002674:	6033      	str	r3, [r6, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002676:	2321      	movs	r3, #33	; 0x21
 8002678:	3a09      	subs	r2, #9
 800267a:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800267c:	2320      	movs	r3, #32
 800267e:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002680:	607c      	str	r4, [r7, #4]
    __HAL_UNLOCK(hdma);
 8002682:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 8002684:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0e6      	beq.n	8002658 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 800268a:	4798      	blx	r3
 800268c:	e7e4      	b.n	8002658 <HAL_DMA_IRQHandler+0x30>
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800268e:	2108      	movs	r1, #8
 8002690:	000c      	movs	r4, r1
 8002692:	409c      	lsls	r4, r3
 8002694:	4222      	tst	r2, r4
 8002696:	d0df      	beq.n	8002658 <HAL_DMA_IRQHandler+0x30>
 8002698:	4229      	tst	r1, r5
 800269a:	d0dd      	beq.n	8002658 <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800269c:	6832      	ldr	r2, [r6, #0]
 800269e:	3106      	adds	r1, #6
 80026a0:	438a      	bics	r2, r1
 80026a2:	6032      	str	r2, [r6, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80026a4:	2201      	movs	r2, #1
 80026a6:	0011      	movs	r1, r2
 80026a8:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;
 80026aa:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80026ac:	6079      	str	r1, [r7, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026ae:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80026b0:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80026b2:	2200      	movs	r2, #0
 80026b4:	3b01      	subs	r3, #1
 80026b6:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80026b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0cc      	beq.n	8002658 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 80026be:	4798      	blx	r3
 80026c0:	e7ca      	b.n	8002658 <HAL_DMA_IRQHandler+0x30>
 80026c2:	46c0      	nop			; (mov r8, r8)

080026c4 <HAL_DMA_GetState>:
  return hdma->State;
 80026c4:	2321      	movs	r3, #33	; 0x21
 80026c6:	5cc0      	ldrb	r0, [r0, r3]
 80026c8:	b2c0      	uxtb	r0, r0
}
 80026ca:	4770      	bx	lr

080026cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ce:	46de      	mov	lr, fp
 80026d0:	4657      	mov	r7, sl
 80026d2:	464e      	mov	r6, r9
 80026d4:	4645      	mov	r5, r8
 80026d6:	b5e0      	push	{r5, r6, r7, lr}
 80026d8:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026da:	6809      	ldr	r1, [r1, #0]
 80026dc:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80026de:	2300      	movs	r3, #0
{
 80026e0:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e2:	2900      	cmp	r1, #0
 80026e4:	d100      	bne.n	80026e8 <HAL_GPIO_Init+0x1c>
 80026e6:	e0d0      	b.n	800288a <HAL_GPIO_Init+0x1be>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e8:	4c72      	ldr	r4, [pc, #456]	; (80028b4 <HAL_GPIO_Init+0x1e8>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026ea:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ec:	46a3      	mov	fp, r4
 80026ee:	e064      	b.n	80027ba <HAL_GPIO_Init+0xee>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f0:	4665      	mov	r5, ip
 80026f2:	2d03      	cmp	r5, #3
 80026f4:	d000      	beq.n	80026f8 <HAL_GPIO_Init+0x2c>
 80026f6:	e0b6      	b.n	8002866 <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026f8:	4666      	mov	r6, ip
 80026fa:	4096      	lsls	r6, r2
 80026fc:	43f5      	mvns	r5, r6
 80026fe:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 8002700:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002702:	9d02      	ldr	r5, [sp, #8]
 8002704:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002706:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002708:	25c0      	movs	r5, #192	; 0xc0
 800270a:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 800270c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800270e:	422c      	tst	r4, r5
 8002710:	d04d      	beq.n	80027ae <HAL_GPIO_Init+0xe2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	465d      	mov	r5, fp
 8002714:	2601      	movs	r6, #1
 8002716:	465f      	mov	r7, fp
 8002718:	69ad      	ldr	r5, [r5, #24]
 800271a:	4335      	orrs	r5, r6
 800271c:	61bd      	str	r5, [r7, #24]
 800271e:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002720:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002722:	4035      	ands	r5, r6
 8002724:	4e64      	ldr	r6, [pc, #400]	; (80028b8 <HAL_GPIO_Init+0x1ec>)
 8002726:	9505      	str	r5, [sp, #20]
 8002728:	46b4      	mov	ip, r6
 800272a:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800272c:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 800272e:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002730:	00bf      	lsls	r7, r7, #2
 8002732:	00ad      	lsls	r5, r5, #2
 8002734:	4465      	add	r5, ip
 8002736:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 8002738:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800273a:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 800273c:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800273e:	4666      	mov	r6, ip
 8002740:	40b7      	lsls	r7, r6
 8002742:	003e      	movs	r6, r7
 8002744:	464f      	mov	r7, r9
 8002746:	43b7      	bics	r7, r6
 8002748:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800274a:	2790      	movs	r7, #144	; 0x90
 800274c:	05ff      	lsls	r7, r7, #23
 800274e:	42b8      	cmp	r0, r7
 8002750:	d00e      	beq.n	8002770 <HAL_GPIO_Init+0xa4>
 8002752:	4f5a      	ldr	r7, [pc, #360]	; (80028bc <HAL_GPIO_Init+0x1f0>)
 8002754:	42b8      	cmp	r0, r7
 8002756:	d100      	bne.n	800275a <HAL_GPIO_Init+0x8e>
 8002758:	e09e      	b.n	8002898 <HAL_GPIO_Init+0x1cc>
 800275a:	4f59      	ldr	r7, [pc, #356]	; (80028c0 <HAL_GPIO_Init+0x1f4>)
 800275c:	42b8      	cmp	r0, r7
 800275e:	d100      	bne.n	8002762 <HAL_GPIO_Init+0x96>
 8002760:	e0a1      	b.n	80028a6 <HAL_GPIO_Init+0x1da>
 8002762:	4666      	mov	r6, ip
 8002764:	2705      	movs	r7, #5
 8002766:	40b7      	lsls	r7, r6
 8002768:	003e      	movs	r6, r7
 800276a:	464f      	mov	r7, r9
 800276c:	4337      	orrs	r7, r6
 800276e:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002770:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002772:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002774:	60ae      	str	r6, [r5, #8]
        temp = EXTI->RTSR;
 8002776:	4d53      	ldr	r5, [pc, #332]	; (80028c4 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8002778:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800277a:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 800277c:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 800277e:	68ad      	ldr	r5, [r5, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002780:	423c      	tst	r4, r7
 8002782:	d17f      	bne.n	8002884 <HAL_GPIO_Init+0x1b8>
        temp &= ~(iocurrent);
 8002784:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8002786:	4f4f      	ldr	r7, [pc, #316]	; (80028c4 <HAL_GPIO_Init+0x1f8>)
 8002788:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 800278a:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800278c:	02a7      	lsls	r7, r4, #10
 800278e:	d476      	bmi.n	800287e <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 8002790:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8002792:	4f4c      	ldr	r7, [pc, #304]	; (80028c4 <HAL_GPIO_Init+0x1f8>)
 8002794:	60fd      	str	r5, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002796:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002798:	03a7      	lsls	r7, r4, #14
 800279a:	d46d      	bmi.n	8002878 <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 800279c:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800279e:	4f49      	ldr	r7, [pc, #292]	; (80028c4 <HAL_GPIO_Init+0x1f8>)
 80027a0:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
 80027a2:	683d      	ldr	r5, [r7, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027a4:	03e4      	lsls	r4, r4, #15
 80027a6:	d463      	bmi.n	8002870 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 80027a8:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80027aa:	4c46      	ldr	r4, [pc, #280]	; (80028c4 <HAL_GPIO_Init+0x1f8>)
 80027ac:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ae:	000c      	movs	r4, r1
      }
    }

    position++;
 80027b0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b2:	40dc      	lsrs	r4, r3
 80027b4:	3202      	adds	r2, #2
 80027b6:	2c00      	cmp	r4, #0
 80027b8:	d067      	beq.n	800288a <HAL_GPIO_Init+0x1be>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027ba:	2601      	movs	r6, #1
 80027bc:	000c      	movs	r4, r1
 80027be:	409e      	lsls	r6, r3
 80027c0:	4034      	ands	r4, r6
 80027c2:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 80027c4:	4231      	tst	r1, r6
 80027c6:	d0f2      	beq.n	80027ae <HAL_GPIO_Init+0xe2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027c8:	4654      	mov	r4, sl
 80027ca:	2503      	movs	r5, #3
 80027cc:	6864      	ldr	r4, [r4, #4]
 80027ce:	4025      	ands	r5, r4
 80027d0:	46ac      	mov	ip, r5
 80027d2:	3d01      	subs	r5, #1
 80027d4:	2d01      	cmp	r5, #1
 80027d6:	d88b      	bhi.n	80026f0 <HAL_GPIO_Init+0x24>
        temp = GPIOx->OSPEEDR;
 80027d8:	6885      	ldr	r5, [r0, #8]
 80027da:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027dc:	2503      	movs	r5, #3
 80027de:	4095      	lsls	r5, r2
 80027e0:	46a8      	mov	r8, r5
 80027e2:	43ed      	mvns	r5, r5
 80027e4:	464f      	mov	r7, r9
 80027e6:	9502      	str	r5, [sp, #8]
 80027e8:	4645      	mov	r5, r8
 80027ea:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027ec:	4655      	mov	r5, sl
 80027ee:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027f0:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027f2:	002f      	movs	r7, r5
 80027f4:	4097      	lsls	r7, r2
 80027f6:	46b8      	mov	r8, r7
 80027f8:	464f      	mov	r7, r9
 80027fa:	4645      	mov	r5, r8
 80027fc:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 80027fe:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002800:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002802:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002804:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002806:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002808:	0926      	lsrs	r6, r4, #4
 800280a:	402e      	ands	r6, r5
 800280c:	409e      	lsls	r6, r3
 800280e:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8002810:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8002812:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002814:	9d02      	ldr	r5, [sp, #8]
 8002816:	402e      	ands	r6, r5
 8002818:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800281a:	4656      	mov	r6, sl
 800281c:	68b6      	ldr	r6, [r6, #8]
 800281e:	4647      	mov	r7, r8
 8002820:	4096      	lsls	r6, r2
 8002822:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8002824:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002826:	4667      	mov	r7, ip
 8002828:	4666      	mov	r6, ip
 800282a:	4096      	lsls	r6, r2
 800282c:	2f02      	cmp	r7, #2
 800282e:	d000      	beq.n	8002832 <HAL_GPIO_Init+0x166>
 8002830:	e766      	b.n	8002700 <HAL_GPIO_Init+0x34>
        temp = GPIOx->AFR[position >> 3u];
 8002832:	08dd      	lsrs	r5, r3, #3
 8002834:	00ad      	lsls	r5, r5, #2
 8002836:	46ac      	mov	ip, r5
 8002838:	4484      	add	ip, r0
 800283a:	4665      	mov	r5, ip
 800283c:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800283e:	2507      	movs	r5, #7
 8002840:	401d      	ands	r5, r3
 8002842:	00ad      	lsls	r5, r5, #2
 8002844:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 8002846:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002848:	250f      	movs	r5, #15
 800284a:	4647      	mov	r7, r8
 800284c:	40bd      	lsls	r5, r7
 800284e:	9f03      	ldr	r7, [sp, #12]
 8002850:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002852:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002854:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002856:	4647      	mov	r7, r8
 8002858:	692d      	ldr	r5, [r5, #16]
 800285a:	40bd      	lsls	r5, r7
 800285c:	9f03      	ldr	r7, [sp, #12]
 800285e:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8002860:	4665      	mov	r5, ip
 8002862:	622f      	str	r7, [r5, #32]
 8002864:	e74c      	b.n	8002700 <HAL_GPIO_Init+0x34>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002866:	2503      	movs	r5, #3
 8002868:	4095      	lsls	r5, r2
 800286a:	43ed      	mvns	r5, r5
 800286c:	9502      	str	r5, [sp, #8]
 800286e:	e7d0      	b.n	8002812 <HAL_GPIO_Init+0x146>
          temp |= iocurrent;
 8002870:	9c01      	ldr	r4, [sp, #4]
 8002872:	432c      	orrs	r4, r5
 8002874:	0025      	movs	r5, r4
 8002876:	e798      	b.n	80027aa <HAL_GPIO_Init+0xde>
          temp |= iocurrent;
 8002878:	9f01      	ldr	r7, [sp, #4]
 800287a:	433d      	orrs	r5, r7
 800287c:	e78f      	b.n	800279e <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 800287e:	9f01      	ldr	r7, [sp, #4]
 8002880:	433d      	orrs	r5, r7
 8002882:	e786      	b.n	8002792 <HAL_GPIO_Init+0xc6>
          temp |= iocurrent;
 8002884:	9f01      	ldr	r7, [sp, #4]
 8002886:	433d      	orrs	r5, r7
 8002888:	e77d      	b.n	8002786 <HAL_GPIO_Init+0xba>
  } 
}
 800288a:	b007      	add	sp, #28
 800288c:	bcf0      	pop	{r4, r5, r6, r7}
 800288e:	46bb      	mov	fp, r7
 8002890:	46b2      	mov	sl, r6
 8002892:	46a9      	mov	r9, r5
 8002894:	46a0      	mov	r8, r4
 8002896:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002898:	4667      	mov	r7, ip
 800289a:	2601      	movs	r6, #1
 800289c:	40be      	lsls	r6, r7
 800289e:	464f      	mov	r7, r9
 80028a0:	4337      	orrs	r7, r6
 80028a2:	46b9      	mov	r9, r7
 80028a4:	e764      	b.n	8002770 <HAL_GPIO_Init+0xa4>
 80028a6:	4667      	mov	r7, ip
 80028a8:	2602      	movs	r6, #2
 80028aa:	40be      	lsls	r6, r7
 80028ac:	464f      	mov	r7, r9
 80028ae:	4337      	orrs	r7, r6
 80028b0:	46b9      	mov	r9, r7
 80028b2:	e75d      	b.n	8002770 <HAL_GPIO_Init+0xa4>
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40010000 	.word	0x40010000
 80028bc:	48000400 	.word	0x48000400
 80028c0:	48000800 	.word	0x48000800
 80028c4:	40010400 	.word	0x40010400

080028c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028c8:	2a00      	cmp	r2, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028cc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028ce:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028d0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80028d2:	e7fc      	b.n	80028ce <HAL_GPIO_WritePin+0x6>

080028d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b510      	push	{r4, lr}
 80028d6:	1e04      	subs	r4, r0, #0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028d8:	d04d      	beq.n	8002976 <HAL_I2C_Init+0xa2>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028da:	2341      	movs	r3, #65	; 0x41
 80028dc:	5cc3      	ldrb	r3, [r0, r3]
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d043      	beq.n	800296c <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028e4:	2341      	movs	r3, #65	; 0x41
 80028e6:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028e8:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80028ea:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	438a      	bics	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028f4:	4921      	ldr	r1, [pc, #132]	; (800297c <HAL_I2C_Init+0xa8>)
 80028f6:	6862      	ldr	r2, [r4, #4]
 80028f8:	400a      	ands	r2, r1
 80028fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	4920      	ldr	r1, [pc, #128]	; (8002980 <HAL_I2C_Init+0xac>)
 8002900:	400a      	ands	r2, r1
 8002902:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002904:	68e2      	ldr	r2, [r4, #12]
 8002906:	2a01      	cmp	r2, #1
 8002908:	d02a      	beq.n	8002960 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800290a:	2184      	movs	r1, #132	; 0x84
 800290c:	68a0      	ldr	r0, [r4, #8]
 800290e:	0209      	lsls	r1, r1, #8
 8002910:	4301      	orrs	r1, r0
 8002912:	6099      	str	r1, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002914:	2a02      	cmp	r2, #2
 8002916:	d102      	bne.n	800291e <HAL_I2C_Init+0x4a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002918:	2280      	movs	r2, #128	; 0x80
 800291a:	0112      	lsls	r2, r2, #4
 800291c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	4a18      	ldr	r2, [pc, #96]	; (8002984 <HAL_I2C_Init+0xb0>)
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8002922:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002924:	430a      	orrs	r2, r1
 8002926:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	4915      	ldr	r1, [pc, #84]	; (8002980 <HAL_I2C_Init+0xac>)
 800292c:	400a      	ands	r2, r1
 800292e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002930:	6961      	ldr	r1, [r4, #20]
 8002932:	6922      	ldr	r2, [r4, #16]
 8002934:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002936:	69a1      	ldr	r1, [r4, #24]
 8002938:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800293a:	430a      	orrs	r2, r1
 800293c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800293e:	6a21      	ldr	r1, [r4, #32]
 8002940:	69e2      	ldr	r2, [r4, #28]
 8002942:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 8002944:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002946:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800294e:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002950:	2241      	movs	r2, #65	; 0x41
 8002952:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002954:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002956:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002958:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 800295a:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800295c:	54a3      	strb	r3, [r4, r2]
}
 800295e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002960:	2280      	movs	r2, #128	; 0x80
 8002962:	68a1      	ldr	r1, [r4, #8]
 8002964:	0212      	lsls	r2, r2, #8
 8002966:	430a      	orrs	r2, r1
 8002968:	609a      	str	r2, [r3, #8]
 800296a:	e7d8      	b.n	800291e <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 800296c:	3340      	adds	r3, #64	; 0x40
 800296e:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8002970:	f7fe ff5e 	bl	8001830 <HAL_I2C_MspInit>
 8002974:	e7b6      	b.n	80028e4 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8002976:	2001      	movs	r0, #1
 8002978:	e7f1      	b.n	800295e <HAL_I2C_Init+0x8a>
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	f0ffffff 	.word	0xf0ffffff
 8002980:	ffff7fff 	.word	0xffff7fff
 8002984:	02008000 	.word	0x02008000

08002988 <HAL_I2C_EV_IRQHandler>:
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002988:	6803      	ldr	r3, [r0, #0]
{
 800298a:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800298c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800298e:	681a      	ldr	r2, [r3, #0]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002990:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002992:	2b00      	cmp	r3, #0
 8002994:	d000      	beq.n	8002998 <HAL_I2C_EV_IRQHandler+0x10>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002996:	4798      	blx	r3
  }
}
 8002998:	bd10      	pop	{r4, pc}
 800299a:	46c0      	nop			; (mov r8, r8)

0800299c <HAL_I2C_SlaveTxCpltCallback>:
 800299c:	4770      	bx	lr
 800299e:	46c0      	nop			; (mov r8, r8)

080029a0 <HAL_I2C_SlaveRxCpltCallback>:
 80029a0:	4770      	bx	lr
 80029a2:	46c0      	nop			; (mov r8, r8)

080029a4 <I2C_ITSlaveSeqCplt>:
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a4:	2142      	movs	r1, #66	; 0x42
{
 80029a6:	b510      	push	{r4, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a8:	2400      	movs	r4, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80029aa:	6803      	ldr	r3, [r0, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ae:	5444      	strb	r4, [r0, r1]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80029b0:	0451      	lsls	r1, r2, #17
 80029b2:	d50b      	bpl.n	80029cc <I2C_ITSlaveSeqCplt+0x28>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4920      	ldr	r1, [pc, #128]	; (8002a38 <I2C_ITSlaveSeqCplt+0x94>)
 80029b8:	400a      	ands	r2, r1
 80029ba:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80029bc:	2141      	movs	r1, #65	; 0x41
 80029be:	5c42      	ldrb	r2, [r0, r1]
 80029c0:	2a29      	cmp	r2, #41	; 0x29
 80029c2:	d00d      	beq.n	80029e0 <I2C_ITSlaveSeqCplt+0x3c>
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80029c4:	5c42      	ldrb	r2, [r0, r1]
 80029c6:	2a2a      	cmp	r2, #42	; 0x2a
 80029c8:	d020      	beq.n	8002a0c <I2C_ITSlaveSeqCplt+0x68>
  }
  else
  {
    /* Nothing to do */
  }
}
 80029ca:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80029cc:	0412      	lsls	r2, r2, #16
 80029ce:	d5f5      	bpl.n	80029bc <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	491a      	ldr	r1, [pc, #104]	; (8002a3c <I2C_ITSlaveSeqCplt+0x98>)
 80029d4:	400a      	ands	r2, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80029d6:	2141      	movs	r1, #65	; 0x41
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80029d8:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80029da:	5c42      	ldrb	r2, [r0, r1]
 80029dc:	2a29      	cmp	r2, #41	; 0x29
 80029de:	d1f1      	bne.n	80029c4 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029e0:	2421      	movs	r4, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80029e2:	3a01      	subs	r2, #1
 80029e4:	5442      	strb	r2, [r0, r1]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029e6:	6304      	str	r4, [r0, #48]	; 0x30
  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80029e8:	5c41      	ldrb	r1, [r0, r1]
 80029ea:	400a      	ands	r2, r1
 80029ec:	3a28      	subs	r2, #40	; 0x28
 80029ee:	4251      	negs	r1, r2
 80029f0:	414a      	adcs	r2, r1
 80029f2:	21b0      	movs	r1, #176	; 0xb0
 80029f4:	4252      	negs	r2, r2
 80029f6:	400a      	ands	r2, r1
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80029f8:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80029fa:	3af3      	subs	r2, #243	; 0xf3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80029fc:	400a      	ands	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002a00:	2340      	movs	r3, #64	; 0x40
 8002a02:	2200      	movs	r2, #0
 8002a04:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a06:	f7ff ffc9 	bl	800299c <HAL_I2C_SlaveTxCpltCallback>
 8002a0a:	e7de      	b.n	80029ca <I2C_ITSlaveSeqCplt+0x26>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a0c:	2422      	movs	r4, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a0e:	3a02      	subs	r2, #2
 8002a10:	5442      	strb	r2, [r0, r1]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a12:	6304      	str	r4, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a14:	5c41      	ldrb	r1, [r0, r1]
 8002a16:	400a      	ands	r2, r1
 8002a18:	3a28      	subs	r2, #40	; 0x28
 8002a1a:	4251      	negs	r1, r2
 8002a1c:	414a      	adcs	r2, r1
 8002a1e:	21b0      	movs	r1, #176	; 0xb0
 8002a20:	4252      	negs	r2, r2
 8002a22:	400a      	ands	r2, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a24:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a26:	3af5      	subs	r2, #245	; 0xf5
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a28:	400a      	ands	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002a2c:	2340      	movs	r3, #64	; 0x40
 8002a2e:	2200      	movs	r2, #0
 8002a30:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a32:	f7ff ffb5 	bl	80029a0 <HAL_I2C_SlaveRxCpltCallback>
}
 8002a36:	e7c8      	b.n	80029ca <I2C_ITSlaveSeqCplt+0x26>
 8002a38:	ffffbfff 	.word	0xffffbfff
 8002a3c:	ffff7fff 	.word	0xffff7fff

08002a40 <HAL_I2C_AddrCallback>:
}
 8002a40:	4770      	bx	lr
 8002a42:	46c0      	nop			; (mov r8, r8)

08002a44 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a46:	46c6      	mov	lr, r8
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002a48:	25fe      	movs	r5, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 8002a4a:	6803      	ldr	r3, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a4c:	68c6      	ldr	r6, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8002a4e:	6999      	ldr	r1, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002a50:	699a      	ldr	r2, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 8002a52:	03c9      	lsls	r1, r1, #15
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002a54:	0c12      	lsrs	r2, r2, #16
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002a56:	689c      	ldr	r4, [r3, #8]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002a58:	b500      	push	{lr}
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002a5a:	68df      	ldr	r7, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8002a5c:	0fc9      	lsrs	r1, r1, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002a5e:	402a      	ands	r2, r5
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a60:	2e02      	cmp	r6, #2
 8002a62:	d113      	bne.n	8002a8c <I2C_ITAddrCplt.part.0+0x48>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002a64:	05a4      	lsls	r4, r4, #22
 8002a66:	0da6      	lsrs	r6, r4, #22
 8002a68:	46b4      	mov	ip, r6
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002a6a:	2606      	movs	r6, #6
 8002a6c:	0f64      	lsrs	r4, r4, #29
 8002a6e:	4054      	eors	r4, r2
 8002a70:	0032      	movs	r2, r6
 8002a72:	4022      	ands	r2, r4
 8002a74:	4690      	mov	r8, r2
 8002a76:	4226      	tst	r6, r4
 8002a78:	d112      	bne.n	8002aa0 <I2C_ITAddrCplt.part.0+0x5c>
        hi2c->AddrEventCount++;
 8002a7a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002a7c:	3401      	adds	r4, #1
 8002a7e:	6484      	str	r4, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002a80:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002a82:	2a02      	cmp	r2, #2
 8002a84:	d018      	beq.n	8002ab8 <I2C_ITAddrCplt.part.0+0x74>
}
 8002a86:	bc80      	pop	{r7}
 8002a88:	46b8      	mov	r8, r7
 8002a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a8c:	25b8      	movs	r5, #184	; 0xb8
 8002a8e:	681c      	ldr	r4, [r3, #0]
 8002a90:	43ac      	bics	r4, r5
 8002a92:	601c      	str	r4, [r3, #0]
      __HAL_UNLOCK(hi2c);
 8002a94:	2340      	movs	r3, #64	; 0x40
 8002a96:	2400      	movs	r4, #0
 8002a98:	54c4      	strb	r4, [r0, r3]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a9a:	f7ff ffd1 	bl	8002a40 <HAL_I2C_AddrCallback>
}
 8002a9e:	e7f2      	b.n	8002a86 <I2C_ITAddrCplt.part.0+0x42>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002aa0:	24b8      	movs	r4, #184	; 0xb8
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	43a2      	bics	r2, r4
 8002aa6:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
 8002aa8:	2340      	movs	r3, #64	; 0x40
 8002aaa:	2200      	movs	r2, #0
 8002aac:	54c2      	strb	r2, [r0, r3]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002aae:	002a      	movs	r2, r5
 8002ab0:	403a      	ands	r2, r7
 8002ab2:	f7ff ffc5 	bl	8002a40 <HAL_I2C_AddrCallback>
 8002ab6:	e7e6      	b.n	8002a86 <I2C_ITAddrCplt.part.0+0x42>
          hi2c->AddrEventCount = 0U;
 8002ab8:	4642      	mov	r2, r8
 8002aba:	6482      	str	r2, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002abc:	2208      	movs	r2, #8
 8002abe:	61da      	str	r2, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	2340      	movs	r3, #64	; 0x40
 8002ac4:	54c2      	strb	r2, [r0, r3]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ac6:	4662      	mov	r2, ip
 8002ac8:	f7ff ffba 	bl	8002a40 <HAL_I2C_AddrCallback>
 8002acc:	e7db      	b.n	8002a86 <I2C_ITAddrCplt.part.0+0x42>
 8002ace:	46c0      	nop			; (mov r8, r8)

08002ad0 <HAL_I2C_ListenCpltCallback>:
 8002ad0:	4770      	bx	lr
 8002ad2:	46c0      	nop			; (mov r8, r8)

08002ad4 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ad4:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <I2C_ITListenCplt+0x64>)
  hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	2241      	movs	r2, #65	; 0x41
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ad8:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 8002ada:	b510      	push	{r4, lr}
  hi2c->PreviousState = I2C_STATE_NONE;
 8002adc:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	2420      	movs	r4, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ae0:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002ae2:	5484      	strb	r4, [r0, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae4:	3201      	adds	r2, #1
 8002ae6:	5483      	strb	r3, [r0, r2]
  hi2c->XferISR = NULL;
 8002ae8:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002aea:	3304      	adds	r3, #4
 8002aec:	420b      	tst	r3, r1
 8002aee:	d012      	beq.n	8002b16 <I2C_ITListenCplt+0x42>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002af0:	6802      	ldr	r2, [r0, #0]
 8002af2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002af4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002af6:	7011      	strb	r1, [r2, #0]
    hi2c->pBuffPtr++;
 8002af8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002afa:	3201      	adds	r2, #1
 8002afc:	6242      	str	r2, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002afe:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8002b00:	2a00      	cmp	r2, #0
 8002b02:	d008      	beq.n	8002b16 <I2C_ITListenCplt+0x42>
      hi2c->XferSize--;
 8002b04:	3a01      	subs	r2, #1
 8002b06:	8502      	strh	r2, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8002b08:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002b0a:	3a01      	subs	r2, #1
 8002b0c:	b292      	uxth	r2, r2
 8002b0e:	8542      	strh	r2, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002b12:	4313      	orrs	r3, r2
 8002b14:	6443      	str	r3, [r0, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b16:	2341      	movs	r3, #65	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002b18:	21fe      	movs	r1, #254	; 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b1a:	5cc2      	ldrb	r2, [r0, r3]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b1c:	5cc3      	ldrb	r3, [r0, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002b1e:	6803      	ldr	r3, [r0, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	438a      	bics	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b26:	2210      	movs	r2, #16
 8002b28:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002b2a:	2340      	movs	r3, #64	; 0x40
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	54c2      	strb	r2, [r0, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 8002b30:	f7ff ffce 	bl	8002ad0 <HAL_I2C_ListenCpltCallback>
}
 8002b34:	bd10      	pop	{r4, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	ffff0000 	.word	0xffff0000

08002b3c <HAL_I2C_ErrorCallback>:
 8002b3c:	4770      	bx	lr
 8002b3e:	46c0      	nop			; (mov r8, r8)

08002b40 <HAL_I2C_AbortCpltCallback>:
 8002b40:	4770      	bx	lr
 8002b42:	46c0      	nop			; (mov r8, r8)

08002b44 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002b44:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002b46:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 8002b48:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002b4e:	2200      	movs	r2, #0
 8002b50:	635a      	str	r2, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8002b52:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002b58:	2200      	movs	r2, #0
 8002b5a:	635a      	str	r2, [r3, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b5c:	2341      	movs	r3, #65	; 0x41
 8002b5e:	5cc2      	ldrb	r2, [r0, r3]
 8002b60:	2a60      	cmp	r2, #96	; 0x60
 8002b62:	d006      	beq.n	8002b72 <I2C_DMAAbort+0x2e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b64:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8002b66:	2240      	movs	r2, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b68:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002b6a:	5483      	strb	r3, [r0, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002b6c:	f7ff ffe6 	bl	8002b3c <HAL_I2C_ErrorCallback>
}
 8002b70:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	3a40      	subs	r2, #64	; 0x40
 8002b74:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b76:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8002b78:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b7a:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002b7c:	5483      	strb	r3, [r0, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b7e:	f7ff ffdf 	bl	8002b40 <HAL_I2C_AbortCpltCallback>
}
 8002b82:	e7f5      	b.n	8002b70 <I2C_DMAAbort+0x2c>

08002b84 <I2C_ITError>:
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b84:	2242      	movs	r2, #66	; 0x42
{
 8002b86:	b570      	push	{r4, r5, r6, lr}
 8002b88:	0004      	movs	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b8a:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002b8c:	2041      	movs	r0, #65	; 0x41
 8002b8e:	5c23      	ldrb	r3, [r4, r0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b90:	54a5      	strb	r5, [r4, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b92:	4a52      	ldr	r2, [pc, #328]	; (8002cdc <I2C_ITError+0x158>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002b94:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b96:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002b98:	8565      	strh	r5, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002b9a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	6462      	str	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d835      	bhi.n	8002c10 <I2C_ITError+0x8c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ba4:	2328      	movs	r3, #40	; 0x28
 8002ba6:	5c22      	ldrb	r2, [r4, r0]
 8002ba8:	401a      	ands	r2, r3
 8002baa:	3a28      	subs	r2, #40	; 0x28
 8002bac:	4251      	negs	r1, r2
 8002bae:	414a      	adcs	r2, r1
 8002bb0:	21af      	movs	r1, #175	; 0xaf
 8002bb2:	4252      	negs	r2, r2
 8002bb4:	438a      	bics	r2, r1
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bb6:	5c21      	ldrb	r1, [r4, r0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bb8:	32f6      	adds	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002bba:	43d2      	mvns	r2, r2
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bbc:	400b      	ands	r3, r1
 8002bbe:	2b28      	cmp	r3, #40	; 0x28
 8002bc0:	d001      	beq.n	8002bc6 <I2C_ITError+0x42>
 8002bc2:	22f7      	movs	r2, #247	; 0xf7
 8002bc4:	4252      	negs	r2, r2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	6819      	ldr	r1, [r3, #0]
 8002bca:	400a      	ands	r2, r1
 8002bcc:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002bce:	2128      	movs	r1, #40	; 0x28
 8002bd0:	2241      	movs	r2, #65	; 0x41
 8002bd2:	54a1      	strb	r1, [r4, r2]
 8002bd4:	4a42      	ldr	r2, [pc, #264]	; (8002ce0 <I2C_ITError+0x15c>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002bd6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002bd8:	6362      	str	r2, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8002bda:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d004      	beq.n	8002bea <I2C_ITError+0x66>
 8002be0:	0011      	movs	r1, r2
 8002be2:	2510      	movs	r5, #16
 8002be4:	3911      	subs	r1, #17
 8002be6:	43a9      	bics	r1, r5
 8002be8:	d03a      	beq.n	8002c60 <I2C_ITError+0xdc>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002bea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002bec:	2800      	cmp	r0, #0
 8002bee:	d003      	beq.n	8002bf8 <I2C_ITError+0x74>
 8002bf0:	2110      	movs	r1, #16
 8002bf2:	3a12      	subs	r2, #18
 8002bf4:	438a      	bics	r2, r1
 8002bf6:	d048      	beq.n	8002c8a <I2C_ITError+0x106>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bf8:	2341      	movs	r3, #65	; 0x41
 8002bfa:	5ce2      	ldrb	r2, [r4, r3]
 8002bfc:	2a60      	cmp	r2, #96	; 0x60
 8002bfe:	d062      	beq.n	8002cc6 <I2C_ITError+0x142>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c00:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8002c02:	2240      	movs	r2, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c04:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ErrorCallback(hi2c);
 8002c06:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8002c08:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002c0a:	f7ff ff97 	bl	8002b3c <HAL_I2C_ErrorCallback>
}
 8002c0e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002c10:	21fe      	movs	r1, #254	; 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c12:	5c23      	ldrb	r3, [r4, r0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c14:	5c23      	ldrb	r3, [r4, r0]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002c16:	6823      	ldr	r3, [r4, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	438a      	bics	r2, r1
 8002c1c:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	0792      	lsls	r2, r2, #30
 8002c22:	d500      	bpl.n	8002c26 <I2C_ITError+0xa2>
    hi2c->Instance->TXDR = 0x00U;
 8002c24:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c26:	2201      	movs	r2, #1
 8002c28:	6999      	ldr	r1, [r3, #24]
 8002c2a:	420a      	tst	r2, r1
 8002c2c:	d102      	bne.n	8002c34 <I2C_ITError+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c2e:	6999      	ldr	r1, [r3, #24]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002c34:	2241      	movs	r2, #65	; 0x41
 8002c36:	5ca1      	ldrb	r1, [r4, r2]
 8002c38:	2960      	cmp	r1, #96	; 0x60
 8002c3a:	d00f      	beq.n	8002c5c <I2C_ITError+0xd8>
      hi2c->State         = HAL_I2C_STATE_READY;
 8002c3c:	2120      	movs	r1, #32
 8002c3e:	54a1      	strb	r1, [r4, r2]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	4211      	tst	r1, r2
 8002c44:	d00a      	beq.n	8002c5c <I2C_ITError+0xd8>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c46:	2210      	movs	r2, #16
 8002c48:	6999      	ldr	r1, [r3, #24]
 8002c4a:	420a      	tst	r2, r1
 8002c4c:	d004      	beq.n	8002c58 <I2C_ITError+0xd4>
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c4e:	2104      	movs	r1, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c50:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c52:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002c54:	430a      	orrs	r2, r1
 8002c56:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c58:	2220      	movs	r2, #32
 8002c5a:	61da      	str	r2, [r3, #28]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	e7ba      	b.n	8002bd6 <I2C_ITError+0x52>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	0452      	lsls	r2, r2, #17
 8002c64:	d42a      	bmi.n	8002cbc <I2C_ITError+0x138>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c66:	f7ff fd2d 	bl	80026c4 <HAL_DMA_GetState>
 8002c6a:	2801      	cmp	r0, #1
 8002c6c:	d0c4      	beq.n	8002bf8 <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c6e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002c70:	4b1c      	ldr	r3, [pc, #112]	; (8002ce4 <I2C_ITError+0x160>)
      __HAL_UNLOCK(hi2c);
 8002c72:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c74:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8002c76:	2340      	movs	r3, #64	; 0x40
 8002c78:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002c7a:	f7ff fcb1 	bl	80025e0 <HAL_DMA_Abort_IT>
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d0c5      	beq.n	8002c0e <I2C_ITError+0x8a>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c82:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002c84:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002c86:	4798      	blx	r3
 8002c88:	e7c1      	b.n	8002c0e <I2C_ITError+0x8a>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	0412      	lsls	r2, r2, #16
 8002c8e:	d503      	bpl.n	8002c98 <I2C_ITError+0x114>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4915      	ldr	r1, [pc, #84]	; (8002ce8 <I2C_ITError+0x164>)
 8002c94:	400a      	ands	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c98:	f7ff fd14 	bl	80026c4 <HAL_DMA_GetState>
 8002c9c:	2801      	cmp	r0, #1
 8002c9e:	d0ab      	beq.n	8002bf8 <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ca0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002ca2:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <I2C_ITError+0x160>)
      __HAL_UNLOCK(hi2c);
 8002ca4:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ca6:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8002ca8:	2340      	movs	r3, #64	; 0x40
 8002caa:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002cac:	f7ff fc98 	bl	80025e0 <HAL_DMA_Abort_IT>
 8002cb0:	2800      	cmp	r0, #0
 8002cb2:	d0ac      	beq.n	8002c0e <I2C_ITError+0x8a>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002cb4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002cb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cb8:	4798      	blx	r3
 8002cba:	e7a8      	b.n	8002c0e <I2C_ITError+0x8a>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	490b      	ldr	r1, [pc, #44]	; (8002cec <I2C_ITError+0x168>)
 8002cc0:	400a      	ands	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	e7cf      	b.n	8002c66 <I2C_ITError+0xe2>
    hi2c->State = HAL_I2C_STATE_READY;
 8002cc6:	3a40      	subs	r2, #64	; 0x40
 8002cc8:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cca:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8002ccc:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cce:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cd0:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8002cd2:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cd4:	f7ff ff34 	bl	8002b40 <HAL_I2C_AbortCpltCallback>
}
 8002cd8:	e799      	b.n	8002c0e <I2C_ITError+0x8a>
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	ffff0000 	.word	0xffff0000
 8002ce0:	08002ebd 	.word	0x08002ebd
 8002ce4:	08002b45 	.word	0x08002b45
 8002ce8:	ffff7fff 	.word	0xffff7fff
 8002cec:	ffffbfff 	.word	0xffffbfff

08002cf0 <HAL_I2C_ER_IRQHandler>:
{
 8002cf0:	b570      	push	{r4, r5, r6, lr}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002cf2:	2480      	movs	r4, #128	; 0x80
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002cf4:	6802      	ldr	r2, [r0, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002cf6:	0064      	lsls	r4, r4, #1
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002cf8:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002cfa:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002cfc:	4223      	tst	r3, r4
 8002cfe:	d02a      	beq.n	8002d56 <HAL_I2C_ER_IRQHandler+0x66>
 8002d00:	060d      	lsls	r5, r1, #24
 8002d02:	d51b      	bpl.n	8002d3c <HAL_I2C_ER_IRQHandler+0x4c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002d04:	2501      	movs	r5, #1
 8002d06:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002d08:	4329      	orrs	r1, r5
 8002d0a:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d0c:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002d0e:	0559      	lsls	r1, r3, #21
 8002d10:	d526      	bpl.n	8002d60 <HAL_I2C_ER_IRQHandler+0x70>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002d12:	2408      	movs	r4, #8
 8002d14:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002d16:	4321      	orrs	r1, r4
 8002d18:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	00c9      	lsls	r1, r1, #3
 8002d1e:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d20:	059b      	lsls	r3, r3, #22
 8002d22:	d506      	bpl.n	8002d32 <HAL_I2C_ER_IRQHandler+0x42>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002d24:	2102      	movs	r1, #2
 8002d26:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	61d3      	str	r3, [r2, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002d32:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8002d34:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002d36:	420b      	tst	r3, r1
 8002d38:	d10a      	bne.n	8002d50 <HAL_I2C_ER_IRQHandler+0x60>
}
 8002d3a:	bd70      	pop	{r4, r5, r6, pc}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002d3c:	055c      	lsls	r4, r3, #21
 8002d3e:	d4f8      	bmi.n	8002d32 <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d40:	059b      	lsls	r3, r3, #22
 8002d42:	d5f6      	bpl.n	8002d32 <HAL_I2C_ER_IRQHandler+0x42>
 8002d44:	0609      	lsls	r1, r1, #24
 8002d46:	d4ed      	bmi.n	8002d24 <HAL_I2C_ER_IRQHandler+0x34>
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002d48:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8002d4a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002d4c:	420b      	tst	r3, r1
 8002d4e:	d0f4      	beq.n	8002d3a <HAL_I2C_ER_IRQHandler+0x4a>
    I2C_ITError(hi2c, tmperror);
 8002d50:	f7ff ff18 	bl	8002b84 <I2C_ITError>
}
 8002d54:	e7f1      	b.n	8002d3a <HAL_I2C_ER_IRQHandler+0x4a>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002d56:	055c      	lsls	r4, r3, #21
 8002d58:	d5f2      	bpl.n	8002d40 <HAL_I2C_ER_IRQHandler+0x50>
 8002d5a:	0609      	lsls	r1, r1, #24
 8002d5c:	d4d9      	bmi.n	8002d12 <HAL_I2C_ER_IRQHandler+0x22>
 8002d5e:	e7e8      	b.n	8002d32 <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d60:	059b      	lsls	r3, r3, #22
 8002d62:	d4df      	bmi.n	8002d24 <HAL_I2C_ER_IRQHandler+0x34>
 8002d64:	e7e5      	b.n	8002d32 <HAL_I2C_ER_IRQHandler+0x42>
 8002d66:	46c0      	nop			; (mov r8, r8)

08002d68 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002d68:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002d6a:	6803      	ldr	r3, [r0, #0]
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002d6c:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002d6e:	2041      	movs	r0, #65	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d70:	2620      	movs	r6, #32
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002d72:	000d      	movs	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002d74:	6819      	ldr	r1, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002d76:	5c22      	ldrb	r2, [r4, r0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d78:	61de      	str	r6, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d7a:	3e18      	subs	r6, #24
 8002d7c:	43b2      	bics	r2, r6
 8002d7e:	2a21      	cmp	r2, #33	; 0x21
 8002d80:	d050      	beq.n	8002e24 <I2C_ITSlaveCplt.constprop.0+0xbc>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d82:	2a22      	cmp	r2, #34	; 0x22
 8002d84:	d100      	bne.n	8002d88 <I2C_ITSlaveCplt.constprop.0+0x20>
 8002d86:	e073      	b.n	8002e70 <I2C_ITSlaveCplt.constprop.0+0x108>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d88:	2280      	movs	r2, #128	; 0x80
 8002d8a:	6858      	ldr	r0, [r3, #4]
 8002d8c:	0212      	lsls	r2, r2, #8
 8002d8e:	4302      	orrs	r2, r0
 8002d90:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	4845      	ldr	r0, [pc, #276]	; (8002eac <I2C_ITSlaveCplt.constprop.0+0x144>)
 8002d96:	4002      	ands	r2, r0
 8002d98:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d9a:	699a      	ldr	r2, [r3, #24]
 8002d9c:	0792      	lsls	r2, r2, #30
 8002d9e:	d501      	bpl.n	8002da4 <I2C_ITSlaveCplt.constprop.0+0x3c>
    hi2c->Instance->TXDR = 0x00U;
 8002da0:	2200      	movs	r2, #0
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002da4:	2201      	movs	r2, #1
 8002da6:	6998      	ldr	r0, [r3, #24]
 8002da8:	4202      	tst	r2, r0
 8002daa:	d102      	bne.n	8002db2 <I2C_ITSlaveCplt.constprop.0+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dac:	6998      	ldr	r0, [r3, #24]
 8002dae:	4302      	orrs	r2, r0
 8002db0:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002db2:	044a      	lsls	r2, r1, #17
 8002db4:	d53d      	bpl.n	8002e32 <I2C_ITSlaveCplt.constprop.0+0xca>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	493d      	ldr	r1, [pc, #244]	; (8002eb0 <I2C_ITSlaveCplt.constprop.0+0x148>)
 8002dba:	400a      	ands	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8002dbe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002dc0:	2a00      	cmp	r2, #0
 8002dc2:	d003      	beq.n	8002dcc <I2C_ITSlaveCplt.constprop.0+0x64>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	6852      	ldr	r2, [r2, #4]
 8002dc8:	b292      	uxth	r2, r2
 8002dca:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002dcc:	2204      	movs	r2, #4
 8002dce:	422a      	tst	r2, r5
 8002dd0:	d009      	beq.n	8002de6 <I2C_ITSlaveCplt.constprop.0+0x7e>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002dd2:	4395      	bics	r5, r2
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dd8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ddc:	3301      	adds	r3, #1
 8002dde:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002de0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d13d      	bne.n	8002e62 <I2C_ITSlaveCplt.constprop.0+0xfa>
  if (hi2c->XferCount != 0U)
 8002de6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <I2C_ITSlaveCplt.constprop.0+0x8c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dec:	2204      	movs	r2, #4
 8002dee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002df0:	4313      	orrs	r3, r2
 8002df2:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	2242      	movs	r2, #66	; 0x42
 8002df8:	54a3      	strb	r3, [r4, r2]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002dfa:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8002dfc:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002dfe:	2e00      	cmp	r6, #0
 8002e00:	d13d      	bne.n	8002e7e <I2C_ITSlaveCplt.constprop.0+0x116>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002e02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e04:	4d2b      	ldr	r5, [pc, #172]	; (8002eb4 <I2C_ITSlaveCplt.constprop.0+0x14c>)
 8002e06:	42ab      	cmp	r3, r5
 8002e08:	d11d      	bne.n	8002e46 <I2C_ITSlaveCplt.constprop.0+0xde>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e0a:	2341      	movs	r3, #65	; 0x41
 8002e0c:	5ce2      	ldrb	r2, [r4, r3]
 8002e0e:	2a22      	cmp	r2, #34	; 0x22
 8002e10:	d042      	beq.n	8002e98 <I2C_ITSlaveCplt.constprop.0+0x130>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	2220      	movs	r2, #32
 8002e14:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8002e16:	2340      	movs	r3, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e18:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e1a:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8002e1c:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e1e:	f7ff fdbd 	bl	800299c <HAL_I2C_SlaveTxCpltCallback>
}
 8002e22:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e24:	5c20      	ldrb	r0, [r4, r0]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	36f2      	adds	r6, #242	; 0xf2
 8002e2a:	43b0      	bics	r0, r6
 8002e2c:	6018      	str	r0, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e2e:	6322      	str	r2, [r4, #48]	; 0x30
 8002e30:	e7aa      	b.n	8002d88 <I2C_ITSlaveCplt.constprop.0+0x20>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e32:	0409      	lsls	r1, r1, #16
 8002e34:	d5ca      	bpl.n	8002dcc <I2C_ITSlaveCplt.constprop.0+0x64>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	491f      	ldr	r1, [pc, #124]	; (8002eb8 <I2C_ITSlaveCplt.constprop.0+0x150>)
 8002e3a:	400a      	ands	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002e3e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e40:	2a00      	cmp	r2, #0
 8002e42:	d1bf      	bne.n	8002dc4 <I2C_ITSlaveCplt.constprop.0+0x5c>
 8002e44:	e7c2      	b.n	8002dcc <I2C_ITSlaveCplt.constprop.0+0x64>
    I2C_ITSlaveSeqCplt(hi2c);
 8002e46:	0020      	movs	r0, r4
 8002e48:	f7ff fdac 	bl	80029a4 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e4c:	2341      	movs	r3, #65	; 0x41
 8002e4e:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e50:	62e5      	str	r5, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002e52:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8002e54:	3b01      	subs	r3, #1
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e56:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e58:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8002e5a:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e5c:	f7ff fe38 	bl	8002ad0 <HAL_I2C_ListenCpltCallback>
 8002e60:	e7df      	b.n	8002e22 <I2C_ITSlaveCplt.constprop.0+0xba>
      hi2c->XferSize--;
 8002e62:	3b01      	subs	r3, #1
 8002e64:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002e66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002e6e:	e7ba      	b.n	8002de6 <I2C_ITSlaveCplt.constprop.0+0x7e>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002e70:	26fc      	movs	r6, #252	; 0xfc
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e72:	5c20      	ldrb	r0, [r4, r0]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	43b0      	bics	r0, r6
 8002e78:	6018      	str	r0, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e7a:	6322      	str	r2, [r4, #48]	; 0x30
 8002e7c:	e784      	b.n	8002d88 <I2C_ITSlaveCplt.constprop.0+0x20>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e7e:	0020      	movs	r0, r4
 8002e80:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002e82:	f7ff fe7f 	bl	8002b84 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002e86:	2341      	movs	r3, #65	; 0x41
 8002e88:	5ce3      	ldrb	r3, [r4, r3]
 8002e8a:	2b28      	cmp	r3, #40	; 0x28
 8002e8c:	d1c9      	bne.n	8002e22 <I2C_ITSlaveCplt.constprop.0+0xba>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e8e:	0029      	movs	r1, r5
 8002e90:	0020      	movs	r0, r4
 8002e92:	f7ff fe1f 	bl	8002ad4 <I2C_ITListenCplt>
 8002e96:	e7c4      	b.n	8002e22 <I2C_ITSlaveCplt.constprop.0+0xba>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e98:	3a02      	subs	r2, #2
 8002e9a:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8002e9c:	3b01      	subs	r3, #1
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e9e:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ea0:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8002ea2:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ea4:	f7ff fd7c 	bl	80029a0 <HAL_I2C_SlaveRxCpltCallback>
 8002ea8:	e7bb      	b.n	8002e22 <I2C_ITSlaveCplt.constprop.0+0xba>
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	fe00e800 	.word	0xfe00e800
 8002eb0:	ffffbfff 	.word	0xffffbfff
 8002eb4:	ffff0000 	.word	0xffff0000
 8002eb8:	ffff7fff 	.word	0xffff7fff

08002ebc <I2C_Slave_ISR_IT>:
{
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8002ebe:	2340      	movs	r3, #64	; 0x40
{
 8002ec0:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 8002ec2:	5cc2      	ldrb	r2, [r0, r3]
{
 8002ec4:	0004      	movs	r4, r0
 8002ec6:	000d      	movs	r5, r1
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ec8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8002eca:	2a01      	cmp	r2, #1
 8002ecc:	d100      	bne.n	8002ed0 <I2C_Slave_ISR_IT+0x14>
 8002ece:	e06e      	b.n	8002fae <I2C_Slave_ISR_IT+0xf2>
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	54c2      	strb	r2, [r0, r3]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ed4:	3b20      	subs	r3, #32
 8002ed6:	420b      	tst	r3, r1
 8002ed8:	d001      	beq.n	8002ede <I2C_Slave_ISR_IT+0x22>
 8002eda:	4233      	tst	r3, r6
 8002edc:	d14a      	bne.n	8002f74 <I2C_Slave_ISR_IT+0xb8>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ede:	2310      	movs	r3, #16
 8002ee0:	422b      	tst	r3, r5
 8002ee2:	d016      	beq.n	8002f12 <I2C_Slave_ISR_IT+0x56>
 8002ee4:	4233      	tst	r3, r6
 8002ee6:	d014      	beq.n	8002f12 <I2C_Slave_ISR_IT+0x56>
    if (hi2c->XferCount == 0U)
 8002ee8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002eea:	2a00      	cmp	r2, #0
 8002eec:	d148      	bne.n	8002f80 <I2C_Slave_ISR_IT+0xc4>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002eee:	3331      	adds	r3, #49	; 0x31
 8002ef0:	5ce3      	ldrb	r3, [r4, r3]
 8002ef2:	2b28      	cmp	r3, #40	; 0x28
 8002ef4:	d100      	bne.n	8002ef8 <I2C_Slave_ISR_IT+0x3c>
 8002ef6:	e06a      	b.n	8002fce <I2C_Slave_ISR_IT+0x112>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002ef8:	2341      	movs	r3, #65	; 0x41
 8002efa:	5ce3      	ldrb	r3, [r4, r3]
 8002efc:	2b29      	cmp	r3, #41	; 0x29
 8002efe:	d100      	bne.n	8002f02 <I2C_Slave_ISR_IT+0x46>
 8002f00:	e06f      	b.n	8002fe2 <I2C_Slave_ISR_IT+0x126>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f02:	2210      	movs	r2, #16
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002f08:	2340      	movs	r3, #64	; 0x40
 8002f0a:	2200      	movs	r2, #0
  return HAL_OK;
 8002f0c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 8002f0e:	54e2      	strb	r2, [r4, r3]
}
 8002f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f12:	2304      	movs	r3, #4
 8002f14:	422b      	tst	r3, r5
 8002f16:	d113      	bne.n	8002f40 <I2C_Slave_ISR_IT+0x84>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f18:	2308      	movs	r3, #8
 8002f1a:	422b      	tst	r3, r5
 8002f1c:	d001      	beq.n	8002f22 <I2C_Slave_ISR_IT+0x66>
 8002f1e:	4233      	tst	r3, r6
 8002f20:	d13c      	bne.n	8002f9c <I2C_Slave_ISR_IT+0xe0>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f22:	2302      	movs	r3, #2
 8002f24:	422b      	tst	r3, r5
 8002f26:	d0ef      	beq.n	8002f08 <I2C_Slave_ISR_IT+0x4c>
 8002f28:	4233      	tst	r3, r6
 8002f2a:	d0ed      	beq.n	8002f08 <I2C_Slave_ISR_IT+0x4c>
    if (hi2c->XferCount > 0U)
 8002f2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d13f      	bne.n	8002fb2 <I2C_Slave_ISR_IT+0xf6>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002f32:	4b38      	ldr	r3, [pc, #224]	; (8003014 <I2C_Slave_ISR_IT+0x158>)
 8002f34:	421f      	tst	r7, r3
 8002f36:	d1e7      	bne.n	8002f08 <I2C_Slave_ISR_IT+0x4c>
        I2C_ITSlaveSeqCplt(hi2c);
 8002f38:	0020      	movs	r0, r4
 8002f3a:	f7ff fd33 	bl	80029a4 <I2C_ITSlaveSeqCplt>
 8002f3e:	e7e3      	b.n	8002f08 <I2C_Slave_ISR_IT+0x4c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f40:	4233      	tst	r3, r6
 8002f42:	d0e9      	beq.n	8002f18 <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount > 0U)
 8002f44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <I2C_Slave_ISR_IT+0xaa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f50:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f54:	3301      	adds	r3, #1
 8002f56:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002f58:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002f5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8002f66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1cd      	bne.n	8002f08 <I2C_Slave_ISR_IT+0x4c>
 8002f6c:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <I2C_Slave_ISR_IT+0x15c>)
 8002f6e:	429f      	cmp	r7, r3
 8002f70:	d0ca      	beq.n	8002f08 <I2C_Slave_ISR_IT+0x4c>
 8002f72:	e7e1      	b.n	8002f38 <I2C_Slave_ISR_IT+0x7c>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002f74:	f7ff fef8 	bl	8002d68 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f78:	2310      	movs	r3, #16
 8002f7a:	422b      	tst	r3, r5
 8002f7c:	d0c9      	beq.n	8002f12 <I2C_Slave_ISR_IT+0x56>
 8002f7e:	e7b1      	b.n	8002ee4 <I2C_Slave_ISR_IT+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f80:	6822      	ldr	r2, [r4, #0]
 8002f82:	61d3      	str	r3, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f84:	2204      	movs	r2, #4
 8002f86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f8c:	4b21      	ldr	r3, [pc, #132]	; (8003014 <I2C_Slave_ISR_IT+0x158>)
 8002f8e:	421f      	tst	r7, r3
 8002f90:	d1ba      	bne.n	8002f08 <I2C_Slave_ISR_IT+0x4c>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f92:	0020      	movs	r0, r4
 8002f94:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002f96:	f7ff fdf5 	bl	8002b84 <I2C_ITError>
 8002f9a:	e7b5      	b.n	8002f08 <I2C_Slave_ISR_IT+0x4c>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f9c:	2241      	movs	r2, #65	; 0x41
 8002f9e:	5ca1      	ldrb	r1, [r4, r2]
 8002fa0:	3a19      	subs	r2, #25
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	2a28      	cmp	r2, #40	; 0x28
 8002fa6:	d030      	beq.n	800300a <I2C_Slave_ISR_IT+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fa8:	6822      	ldr	r2, [r4, #0]
 8002faa:	61d3      	str	r3, [r2, #28]
 8002fac:	e7ac      	b.n	8002f08 <I2C_Slave_ISR_IT+0x4c>
  __HAL_LOCK(hi2c);
 8002fae:	2002      	movs	r0, #2
 8002fb0:	e7ae      	b.n	8002f10 <I2C_Slave_ISR_IT+0x54>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fb4:	6822      	ldr	r2, [r4, #0]
 8002fb6:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002fb8:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fba:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002fbc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002fbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002fc6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	8523      	strh	r3, [r4, #40]	; 0x28
 8002fcc:	e79c      	b.n	8002f08 <I2C_Slave_ISR_IT+0x4c>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	049b      	lsls	r3, r3, #18
 8002fd2:	429f      	cmp	r7, r3
 8002fd4:	d000      	beq.n	8002fd8 <I2C_Slave_ISR_IT+0x11c>
 8002fd6:	e78f      	b.n	8002ef8 <I2C_Slave_ISR_IT+0x3c>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002fd8:	0029      	movs	r1, r5
 8002fda:	0020      	movs	r0, r4
 8002fdc:	f7ff fd7a 	bl	8002ad4 <I2C_ITListenCplt>
 8002fe0:	e792      	b.n	8002f08 <I2C_Slave_ISR_IT+0x4c>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <I2C_Slave_ISR_IT+0x15c>)
 8002fe4:	429f      	cmp	r7, r3
 8002fe6:	d100      	bne.n	8002fea <I2C_Slave_ISR_IT+0x12e>
 8002fe8:	e78b      	b.n	8002f02 <I2C_Slave_ISR_IT+0x46>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fea:	2210      	movs	r2, #16
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	0792      	lsls	r2, r2, #30
 8002ff4:	d501      	bpl.n	8002ffa <I2C_Slave_ISR_IT+0x13e>
    hi2c->Instance->TXDR = 0x00U;
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	6999      	ldr	r1, [r3, #24]
 8002ffe:	420a      	tst	r2, r1
 8003000:	d19a      	bne.n	8002f38 <I2C_Slave_ISR_IT+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003002:	6999      	ldr	r1, [r3, #24]
 8003004:	430a      	orrs	r2, r1
 8003006:	619a      	str	r2, [r3, #24]
 8003008:	e796      	b.n	8002f38 <I2C_Slave_ISR_IT+0x7c>
 800300a:	0020      	movs	r0, r4
 800300c:	f7ff fd1a 	bl	8002a44 <I2C_ITAddrCplt.part.0>
 8003010:	e77a      	b.n	8002f08 <I2C_Slave_ISR_IT+0x4c>
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	feffffff 	.word	0xfeffffff
 8003018:	ffff0000 	.word	0xffff0000

0800301c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800301c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800301e:	2441      	movs	r4, #65	; 0x41
 8003020:	5d03      	ldrb	r3, [r0, r4]
{
 8003022:	468c      	mov	ip, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003024:	b2dd      	uxtb	r5, r3
 8003026:	2b20      	cmp	r3, #32
 8003028:	d11a      	bne.n	8003060 <HAL_I2CEx_ConfigAnalogFilter+0x44>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800302a:	2640      	movs	r6, #64	; 0x40
 800302c:	5d83      	ldrb	r3, [r0, r6]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d016      	beq.n	8003060 <HAL_I2CEx_ConfigAnalogFilter+0x44>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003032:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003034:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003036:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8003038:	6803      	ldr	r3, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800303a:	490a      	ldr	r1, [pc, #40]	; (8003064 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	43ba      	bics	r2, r7
 8003040:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	400a      	ands	r2, r1
 8003046:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003048:	4662      	mov	r2, ip
 800304a:	6819      	ldr	r1, [r3, #0]
 800304c:	4311      	orrs	r1, r2
 800304e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	433a      	orrs	r2, r7
 8003054:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003056:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003058:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 800305a:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 800305c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800305e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003060:	2002      	movs	r0, #2
 8003062:	e7fc      	b.n	800305e <HAL_I2CEx_ConfigAnalogFilter+0x42>
 8003064:	ffffefff 	.word	0xffffefff

08003068 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306a:	46ce      	mov	lr, r9
 800306c:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800306e:	2441      	movs	r4, #65	; 0x41
{
 8003070:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003072:	5d03      	ldrb	r3, [r0, r4]
 8003074:	b2dd      	uxtb	r5, r3
 8003076:	2b20      	cmp	r3, #32
 8003078:	d11f      	bne.n	80030ba <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307a:	2640      	movs	r6, #64	; 0x40
 800307c:	5d83      	ldrb	r3, [r0, r6]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d01b      	beq.n	80030ba <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003082:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003084:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003086:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8003088:	6802      	ldr	r2, [r0, #0]
 800308a:	46b9      	mov	r9, r7
 800308c:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800308e:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8003090:	43bb      	bics	r3, r7
 8003092:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8003094:	6813      	ldr	r3, [r2, #0]
 8003096:	4698      	mov	r8, r3
    tmpreg &= ~(I2C_CR1_DNF);
 8003098:	4647      	mov	r7, r8
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <HAL_I2CEx_ConfigDigitalFilter+0x58>)
 800309c:	401f      	ands	r7, r3
    tmpreg |= DigitalFilter << 8U;
 800309e:	4339      	orrs	r1, r7

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030a0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030a2:	4649      	mov	r1, r9
 80030a4:	6813      	ldr	r3, [r2, #0]
 80030a6:	430b      	orrs	r3, r1
 80030a8:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030aa:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80030ac:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 80030ae:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 80030b0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80030b2:	bcc0      	pop	{r6, r7}
 80030b4:	46b9      	mov	r9, r7
 80030b6:	46b0      	mov	r8, r6
 80030b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80030ba:	2002      	movs	r0, #2
 80030bc:	e7f9      	b.n	80030b2 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	fffff0ff 	.word	0xfffff0ff

080030c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c6:	46ce      	mov	lr, r9
 80030c8:	4647      	mov	r7, r8
 80030ca:	b580      	push	{r7, lr}
 80030cc:	0004      	movs	r4, r0
 80030ce:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d0:	2800      	cmp	r0, #0
 80030d2:	d100      	bne.n	80030d6 <HAL_RCC_OscConfig+0x12>
 80030d4:	e0ee      	b.n	80032b4 <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030d6:	6803      	ldr	r3, [r0, #0]
 80030d8:	07da      	lsls	r2, r3, #31
 80030da:	d535      	bpl.n	8003148 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030dc:	210c      	movs	r1, #12
 80030de:	48c3      	ldr	r0, [pc, #780]	; (80033ec <HAL_RCC_OscConfig+0x328>)
 80030e0:	6842      	ldr	r2, [r0, #4]
 80030e2:	400a      	ands	r2, r1
 80030e4:	2a04      	cmp	r2, #4
 80030e6:	d100      	bne.n	80030ea <HAL_RCC_OscConfig+0x26>
 80030e8:	e101      	b.n	80032ee <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030ea:	6842      	ldr	r2, [r0, #4]
 80030ec:	4011      	ands	r1, r2
 80030ee:	2908      	cmp	r1, #8
 80030f0:	d100      	bne.n	80030f4 <HAL_RCC_OscConfig+0x30>
 80030f2:	e0f8      	b.n	80032e6 <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f4:	6863      	ldr	r3, [r4, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d00f      	beq.n	800311a <HAL_RCC_OscConfig+0x56>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d100      	bne.n	8003100 <HAL_RCC_OscConfig+0x3c>
 80030fe:	e11e      	b.n	800333e <HAL_RCC_OscConfig+0x27a>
 8003100:	2b05      	cmp	r3, #5
 8003102:	d100      	bne.n	8003106 <HAL_RCC_OscConfig+0x42>
 8003104:	e1a7      	b.n	8003456 <HAL_RCC_OscConfig+0x392>
 8003106:	4bb9      	ldr	r3, [pc, #740]	; (80033ec <HAL_RCC_OscConfig+0x328>)
 8003108:	49b9      	ldr	r1, [pc, #740]	; (80033f0 <HAL_RCC_OscConfig+0x32c>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	400a      	ands	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	49b8      	ldr	r1, [pc, #736]	; (80033f4 <HAL_RCC_OscConfig+0x330>)
 8003114:	400a      	ands	r2, r1
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	e005      	b.n	8003126 <HAL_RCC_OscConfig+0x62>
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	4ab3      	ldr	r2, [pc, #716]	; (80033ec <HAL_RCC_OscConfig+0x328>)
 800311e:	025b      	lsls	r3, r3, #9
 8003120:	6811      	ldr	r1, [r2, #0]
 8003122:	430b      	orrs	r3, r1
 8003124:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003126:	f7fe fe39 	bl	8001d9c <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800312c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	4faf      	ldr	r7, [pc, #700]	; (80033ec <HAL_RCC_OscConfig+0x328>)
 8003130:	02b6      	lsls	r6, r6, #10
 8003132:	e005      	b.n	8003140 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003134:	f7fe fe32 	bl	8001d9c <HAL_GetTick>
 8003138:	1b40      	subs	r0, r0, r5
 800313a:	2864      	cmp	r0, #100	; 0x64
 800313c:	d900      	bls.n	8003140 <HAL_RCC_OscConfig+0x7c>
 800313e:	e0fc      	b.n	800333a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	4233      	tst	r3, r6
 8003144:	d0f6      	beq.n	8003134 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	079a      	lsls	r2, r3, #30
 800314a:	d529      	bpl.n	80031a0 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800314c:	220c      	movs	r2, #12
 800314e:	49a7      	ldr	r1, [pc, #668]	; (80033ec <HAL_RCC_OscConfig+0x328>)
 8003150:	6848      	ldr	r0, [r1, #4]
 8003152:	4202      	tst	r2, r0
 8003154:	d100      	bne.n	8003158 <HAL_RCC_OscConfig+0x94>
 8003156:	e0a6      	b.n	80032a6 <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003158:	6848      	ldr	r0, [r1, #4]
 800315a:	4002      	ands	r2, r0
 800315c:	2a08      	cmp	r2, #8
 800315e:	d100      	bne.n	8003162 <HAL_RCC_OscConfig+0x9e>
 8003160:	e09d      	b.n	800329e <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003162:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003164:	4da1      	ldr	r5, [pc, #644]	; (80033ec <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003166:	2b00      	cmp	r3, #0
 8003168:	d100      	bne.n	800316c <HAL_RCC_OscConfig+0xa8>
 800316a:	e11f      	b.n	80033ac <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 800316c:	2201      	movs	r2, #1
 800316e:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8003172:	4313      	orrs	r3, r2
 8003174:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003176:	f7fe fe11 	bl	8001d9c <HAL_GetTick>
 800317a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317c:	e005      	b.n	800318a <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800317e:	f7fe fe0d 	bl	8001d9c <HAL_GetTick>
 8003182:	1b80      	subs	r0, r0, r6
 8003184:	2802      	cmp	r0, #2
 8003186:	d900      	bls.n	800318a <HAL_RCC_OscConfig+0xc6>
 8003188:	e0d7      	b.n	800333a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318a:	682b      	ldr	r3, [r5, #0]
 800318c:	421f      	tst	r7, r3
 800318e:	d0f6      	beq.n	800317e <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003190:	21f8      	movs	r1, #248	; 0xf8
 8003192:	682a      	ldr	r2, [r5, #0]
 8003194:	6923      	ldr	r3, [r4, #16]
 8003196:	438a      	bics	r2, r1
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4313      	orrs	r3, r2
 800319c:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	071a      	lsls	r2, r3, #28
 80031a2:	d42d      	bmi.n	8003200 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	d544      	bpl.n	8003232 <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80031aa:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ac:	4b8f      	ldr	r3, [pc, #572]	; (80033ec <HAL_RCC_OscConfig+0x328>)
 80031ae:	0552      	lsls	r2, r2, #21
 80031b0:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80031b2:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b4:	4211      	tst	r1, r2
 80031b6:	d108      	bne.n	80031ca <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b8:	69d9      	ldr	r1, [r3, #28]
 80031ba:	4311      	orrs	r1, r2
 80031bc:	61d9      	str	r1, [r3, #28]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	4013      	ands	r3, r2
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80031c6:	2301      	movs	r3, #1
 80031c8:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ca:	2780      	movs	r7, #128	; 0x80
 80031cc:	4e8a      	ldr	r6, [pc, #552]	; (80033f8 <HAL_RCC_OscConfig+0x334>)
 80031ce:	007f      	lsls	r7, r7, #1
 80031d0:	6833      	ldr	r3, [r6, #0]
 80031d2:	423b      	tst	r3, r7
 80031d4:	d100      	bne.n	80031d8 <HAL_RCC_OscConfig+0x114>
 80031d6:	e094      	b.n	8003302 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d8:	68a3      	ldr	r3, [r4, #8]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d100      	bne.n	80031e0 <HAL_RCC_OscConfig+0x11c>
 80031de:	e0f8      	b.n	80033d2 <HAL_RCC_OscConfig+0x30e>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d100      	bne.n	80031e6 <HAL_RCC_OscConfig+0x122>
 80031e4:	e0c4      	b.n	8003370 <HAL_RCC_OscConfig+0x2ac>
 80031e6:	2b05      	cmp	r3, #5
 80031e8:	d100      	bne.n	80031ec <HAL_RCC_OscConfig+0x128>
 80031ea:	e140      	b.n	800346e <HAL_RCC_OscConfig+0x3aa>
 80031ec:	2101      	movs	r1, #1
 80031ee:	4b7f      	ldr	r3, [pc, #508]	; (80033ec <HAL_RCC_OscConfig+0x328>)
 80031f0:	6a1a      	ldr	r2, [r3, #32]
 80031f2:	438a      	bics	r2, r1
 80031f4:	621a      	str	r2, [r3, #32]
 80031f6:	6a1a      	ldr	r2, [r3, #32]
 80031f8:	3103      	adds	r1, #3
 80031fa:	438a      	bics	r2, r1
 80031fc:	621a      	str	r2, [r3, #32]
 80031fe:	e0ec      	b.n	80033da <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003200:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8003202:	4d7a      	ldr	r5, [pc, #488]	; (80033ec <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003204:	2b00      	cmp	r3, #0
 8003206:	d05b      	beq.n	80032c0 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8003208:	2201      	movs	r2, #1
 800320a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 800320e:	4313      	orrs	r3, r2
 8003210:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003212:	f7fe fdc3 	bl	8001d9c <HAL_GetTick>
 8003216:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003218:	e005      	b.n	8003226 <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800321a:	f7fe fdbf 	bl	8001d9c <HAL_GetTick>
 800321e:	1b80      	subs	r0, r0, r6
 8003220:	2802      	cmp	r0, #2
 8003222:	d900      	bls.n	8003226 <HAL_RCC_OscConfig+0x162>
 8003224:	e089      	b.n	800333a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003226:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003228:	421f      	tst	r7, r3
 800322a:	d0f6      	beq.n	800321a <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	075a      	lsls	r2, r3, #29
 8003230:	d4ba      	bmi.n	80031a8 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003232:	06db      	lsls	r3, r3, #27
 8003234:	d512      	bpl.n	800325c <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003236:	6963      	ldr	r3, [r4, #20]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d100      	bne.n	800323e <HAL_RCC_OscConfig+0x17a>
 800323c:	e13d      	b.n	80034ba <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800323e:	3305      	adds	r3, #5
 8003240:	d000      	beq.n	8003244 <HAL_RCC_OscConfig+0x180>
 8003242:	e0e9      	b.n	8003418 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003244:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003246:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8003248:	4a68      	ldr	r2, [pc, #416]	; (80033ec <HAL_RCC_OscConfig+0x328>)
 800324a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800324c:	438b      	bics	r3, r1
 800324e:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003250:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003252:	69a3      	ldr	r3, [r4, #24]
 8003254:	4381      	bics	r1, r0
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	430b      	orrs	r3, r1
 800325a:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325c:	6a23      	ldr	r3, [r4, #32]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d01b      	beq.n	800329a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003262:	220c      	movs	r2, #12
 8003264:	4d61      	ldr	r5, [pc, #388]	; (80033ec <HAL_RCC_OscConfig+0x328>)
 8003266:	6869      	ldr	r1, [r5, #4]
 8003268:	400a      	ands	r2, r1
 800326a:	2a08      	cmp	r2, #8
 800326c:	d100      	bne.n	8003270 <HAL_RCC_OscConfig+0x1ac>
 800326e:	e108      	b.n	8003482 <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003270:	2b02      	cmp	r3, #2
 8003272:	d100      	bne.n	8003276 <HAL_RCC_OscConfig+0x1b2>
 8003274:	e13f      	b.n	80034f6 <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003276:	682b      	ldr	r3, [r5, #0]
 8003278:	4a60      	ldr	r2, [pc, #384]	; (80033fc <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800327c:	4013      	ands	r3, r2
 800327e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003280:	f7fe fd8c 	bl	8001d9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003284:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8003286:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003288:	e004      	b.n	8003294 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800328a:	f7fe fd87 	bl	8001d9c <HAL_GetTick>
 800328e:	1b00      	subs	r0, r0, r4
 8003290:	2802      	cmp	r0, #2
 8003292:	d852      	bhi.n	800333a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003294:	682b      	ldr	r3, [r5, #0]
 8003296:	4233      	tst	r3, r6
 8003298:	d1f7      	bne.n	800328a <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 800329a:	2000      	movs	r0, #0
 800329c:	e00b      	b.n	80032b6 <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800329e:	684a      	ldr	r2, [r1, #4]
 80032a0:	03d2      	lsls	r2, r2, #15
 80032a2:	d500      	bpl.n	80032a6 <HAL_RCC_OscConfig+0x1e2>
 80032a4:	e75d      	b.n	8003162 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a6:	4a51      	ldr	r2, [pc, #324]	; (80033ec <HAL_RCC_OscConfig+0x328>)
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	0792      	lsls	r2, r2, #30
 80032ac:	d539      	bpl.n	8003322 <HAL_RCC_OscConfig+0x25e>
 80032ae:	68e2      	ldr	r2, [r4, #12]
 80032b0:	2a01      	cmp	r2, #1
 80032b2:	d036      	beq.n	8003322 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 80032b4:	2001      	movs	r0, #1
}
 80032b6:	b003      	add	sp, #12
 80032b8:	bcc0      	pop	{r6, r7}
 80032ba:	46b9      	mov	r9, r7
 80032bc:	46b0      	mov	r8, r6
 80032be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 80032c0:	2201      	movs	r2, #1
 80032c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c4:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80032c6:	4393      	bics	r3, r2
 80032c8:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80032ca:	f7fe fd67 	bl	8001d9c <HAL_GetTick>
 80032ce:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	e004      	b.n	80032dc <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d2:	f7fe fd63 	bl	8001d9c <HAL_GetTick>
 80032d6:	1b80      	subs	r0, r0, r6
 80032d8:	2802      	cmp	r0, #2
 80032da:	d82e      	bhi.n	800333a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80032de:	421f      	tst	r7, r3
 80032e0:	d1f7      	bne.n	80032d2 <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	e7a3      	b.n	800322e <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032e6:	6842      	ldr	r2, [r0, #4]
 80032e8:	03d2      	lsls	r2, r2, #15
 80032ea:	d400      	bmi.n	80032ee <HAL_RCC_OscConfig+0x22a>
 80032ec:	e702      	b.n	80030f4 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ee:	4a3f      	ldr	r2, [pc, #252]	; (80033ec <HAL_RCC_OscConfig+0x328>)
 80032f0:	6812      	ldr	r2, [r2, #0]
 80032f2:	0392      	lsls	r2, r2, #14
 80032f4:	d400      	bmi.n	80032f8 <HAL_RCC_OscConfig+0x234>
 80032f6:	e727      	b.n	8003148 <HAL_RCC_OscConfig+0x84>
 80032f8:	6862      	ldr	r2, [r4, #4]
 80032fa:	2a00      	cmp	r2, #0
 80032fc:	d000      	beq.n	8003300 <HAL_RCC_OscConfig+0x23c>
 80032fe:	e723      	b.n	8003148 <HAL_RCC_OscConfig+0x84>
 8003300:	e7d8      	b.n	80032b4 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003302:	6833      	ldr	r3, [r6, #0]
 8003304:	433b      	orrs	r3, r7
 8003306:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003308:	f7fe fd48 	bl	8001d9c <HAL_GetTick>
 800330c:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330e:	e004      	b.n	800331a <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003310:	f7fe fd44 	bl	8001d9c <HAL_GetTick>
 8003314:	1b40      	subs	r0, r0, r5
 8003316:	2864      	cmp	r0, #100	; 0x64
 8003318:	d80f      	bhi.n	800333a <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331a:	6833      	ldr	r3, [r6, #0]
 800331c:	423b      	tst	r3, r7
 800331e:	d0f7      	beq.n	8003310 <HAL_RCC_OscConfig+0x24c>
 8003320:	e75a      	b.n	80031d8 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003322:	25f8      	movs	r5, #248	; 0xf8
 8003324:	4831      	ldr	r0, [pc, #196]	; (80033ec <HAL_RCC_OscConfig+0x328>)
 8003326:	6922      	ldr	r2, [r4, #16]
 8003328:	6801      	ldr	r1, [r0, #0]
 800332a:	00d2      	lsls	r2, r2, #3
 800332c:	43a9      	bics	r1, r5
 800332e:	430a      	orrs	r2, r1
 8003330:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003332:	071a      	lsls	r2, r3, #28
 8003334:	d400      	bmi.n	8003338 <HAL_RCC_OscConfig+0x274>
 8003336:	e735      	b.n	80031a4 <HAL_RCC_OscConfig+0xe0>
 8003338:	e762      	b.n	8003200 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 800333a:	2003      	movs	r0, #3
 800333c:	e7bb      	b.n	80032b6 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333e:	4d2b      	ldr	r5, [pc, #172]	; (80033ec <HAL_RCC_OscConfig+0x328>)
 8003340:	4a2b      	ldr	r2, [pc, #172]	; (80033f0 <HAL_RCC_OscConfig+0x32c>)
 8003342:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003344:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003346:	4013      	ands	r3, r2
 8003348:	602b      	str	r3, [r5, #0]
 800334a:	682b      	ldr	r3, [r5, #0]
 800334c:	4a29      	ldr	r2, [pc, #164]	; (80033f4 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334e:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003350:	4013      	ands	r3, r2
 8003352:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003354:	f7fe fd22 	bl	8001d9c <HAL_GetTick>
 8003358:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335a:	e004      	b.n	8003366 <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800335c:	f7fe fd1e 	bl	8001d9c <HAL_GetTick>
 8003360:	1b80      	subs	r0, r0, r6
 8003362:	2864      	cmp	r0, #100	; 0x64
 8003364:	d8e9      	bhi.n	800333a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003366:	682b      	ldr	r3, [r5, #0]
 8003368:	423b      	tst	r3, r7
 800336a:	d1f7      	bne.n	800335c <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336c:	6823      	ldr	r3, [r4, #0]
 800336e:	e6eb      	b.n	8003148 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003370:	2201      	movs	r2, #1
 8003372:	4e1e      	ldr	r6, [pc, #120]	; (80033ec <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003374:	4d22      	ldr	r5, [pc, #136]	; (8003400 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003376:	6a33      	ldr	r3, [r6, #32]
 8003378:	4393      	bics	r3, r2
 800337a:	6233      	str	r3, [r6, #32]
 800337c:	6a33      	ldr	r3, [r6, #32]
 800337e:	3203      	adds	r2, #3
 8003380:	4393      	bics	r3, r2
 8003382:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8003384:	f7fe fd0a 	bl	8001d9c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003388:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 800338a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338c:	4698      	mov	r8, r3
 800338e:	e004      	b.n	800339a <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003390:	f7fe fd04 	bl	8001d9c <HAL_GetTick>
 8003394:	1bc0      	subs	r0, r0, r7
 8003396:	42a8      	cmp	r0, r5
 8003398:	d8cf      	bhi.n	800333a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339a:	4642      	mov	r2, r8
 800339c:	6a33      	ldr	r3, [r6, #32]
 800339e:	421a      	tst	r2, r3
 80033a0:	d1f6      	bne.n	8003390 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 80033a2:	464b      	mov	r3, r9
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d04f      	beq.n	8003448 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	e742      	b.n	8003232 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 80033ac:	2201      	movs	r2, #1
 80033ae:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b0:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 80033b2:	4393      	bics	r3, r2
 80033b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80033b6:	f7fe fcf1 	bl	8001d9c <HAL_GetTick>
 80033ba:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033bc:	e004      	b.n	80033c8 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033be:	f7fe fced 	bl	8001d9c <HAL_GetTick>
 80033c2:	1b80      	subs	r0, r0, r6
 80033c4:	2802      	cmp	r0, #2
 80033c6:	d8b8      	bhi.n	800333a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	421f      	tst	r7, r3
 80033cc:	d1f7      	bne.n	80033be <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	e6e6      	b.n	80031a0 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d2:	4906      	ldr	r1, [pc, #24]	; (80033ec <HAL_RCC_OscConfig+0x328>)
 80033d4:	6a0a      	ldr	r2, [r1, #32]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80033da:	f7fe fcdf 	bl	8001d9c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033de:	4b03      	ldr	r3, [pc, #12]	; (80033ec <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 80033e0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e2:	4698      	mov	r8, r3
 80033e4:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e6:	4d06      	ldr	r5, [pc, #24]	; (8003400 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e8:	e011      	b.n	800340e <HAL_RCC_OscConfig+0x34a>
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	40021000 	.word	0x40021000
 80033f0:	fffeffff 	.word	0xfffeffff
 80033f4:	fffbffff 	.word	0xfffbffff
 80033f8:	40007000 	.word	0x40007000
 80033fc:	feffffff 	.word	0xfeffffff
 8003400:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003404:	f7fe fcca 	bl	8001d9c <HAL_GetTick>
 8003408:	1b80      	subs	r0, r0, r6
 800340a:	42a8      	cmp	r0, r5
 800340c:	d895      	bhi.n	800333a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340e:	4643      	mov	r3, r8
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	421f      	tst	r7, r3
 8003414:	d0f6      	beq.n	8003404 <HAL_RCC_OscConfig+0x340>
 8003416:	e7c4      	b.n	80033a2 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003418:	2204      	movs	r2, #4
 800341a:	4d53      	ldr	r5, [pc, #332]	; (8003568 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800341c:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800341e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003420:	4313      	orrs	r3, r2
 8003422:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8003424:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003426:	3a03      	subs	r2, #3
 8003428:	4393      	bics	r3, r2
 800342a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800342c:	f7fe fcb6 	bl	8001d9c <HAL_GetTick>
 8003430:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003432:	e005      	b.n	8003440 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003434:	f7fe fcb2 	bl	8001d9c <HAL_GetTick>
 8003438:	1b80      	subs	r0, r0, r6
 800343a:	2802      	cmp	r0, #2
 800343c:	d900      	bls.n	8003440 <HAL_RCC_OscConfig+0x37c>
 800343e:	e77c      	b.n	800333a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003440:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003442:	421f      	tst	r7, r3
 8003444:	d1f6      	bne.n	8003434 <HAL_RCC_OscConfig+0x370>
 8003446:	e709      	b.n	800325c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003448:	4a47      	ldr	r2, [pc, #284]	; (8003568 <HAL_RCC_OscConfig+0x4a4>)
 800344a:	4948      	ldr	r1, [pc, #288]	; (800356c <HAL_RCC_OscConfig+0x4a8>)
 800344c:	69d3      	ldr	r3, [r2, #28]
 800344e:	400b      	ands	r3, r1
 8003450:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	e6ed      	b.n	8003232 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003456:	2280      	movs	r2, #128	; 0x80
 8003458:	4b43      	ldr	r3, [pc, #268]	; (8003568 <HAL_RCC_OscConfig+0x4a4>)
 800345a:	02d2      	lsls	r2, r2, #11
 800345c:	6819      	ldr	r1, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	2280      	movs	r2, #128	; 0x80
 8003464:	6819      	ldr	r1, [r3, #0]
 8003466:	0252      	lsls	r2, r2, #9
 8003468:	430a      	orrs	r2, r1
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e65b      	b.n	8003126 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800346e:	2104      	movs	r1, #4
 8003470:	4b3d      	ldr	r3, [pc, #244]	; (8003568 <HAL_RCC_OscConfig+0x4a4>)
 8003472:	6a1a      	ldr	r2, [r3, #32]
 8003474:	430a      	orrs	r2, r1
 8003476:	621a      	str	r2, [r3, #32]
 8003478:	6a1a      	ldr	r2, [r3, #32]
 800347a:	3903      	subs	r1, #3
 800347c:	430a      	orrs	r2, r1
 800347e:	621a      	str	r2, [r3, #32]
 8003480:	e7ab      	b.n	80033da <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003482:	2b01      	cmp	r3, #1
 8003484:	d100      	bne.n	8003488 <HAL_RCC_OscConfig+0x3c4>
 8003486:	e715      	b.n	80032b4 <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003488:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 800348a:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800348c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800348e:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8003490:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 8003492:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003494:	4013      	ands	r3, r2
 8003496:	428b      	cmp	r3, r1
 8003498:	d000      	beq.n	800349c <HAL_RCC_OscConfig+0x3d8>
 800349a:	e70c      	b.n	80032b6 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800349c:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800349e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80034a0:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a2:	428b      	cmp	r3, r1
 80034a4:	d000      	beq.n	80034a8 <HAL_RCC_OscConfig+0x3e4>
 80034a6:	e706      	b.n	80032b6 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80034a8:	23f0      	movs	r3, #240	; 0xf0
 80034aa:	039b      	lsls	r3, r3, #14
 80034ac:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80034ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80034b0:	1ad2      	subs	r2, r2, r3
 80034b2:	1e53      	subs	r3, r2, #1
 80034b4:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 80034b6:	b2d0      	uxtb	r0, r2
 80034b8:	e6fd      	b.n	80032b6 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 80034ba:	2104      	movs	r1, #4
 80034bc:	4d2a      	ldr	r5, [pc, #168]	; (8003568 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80034be:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80034c0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80034c2:	430a      	orrs	r2, r1
 80034c4:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80034c6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80034c8:	4313      	orrs	r3, r2
 80034ca:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80034cc:	f7fe fc66 	bl	8001d9c <HAL_GetTick>
 80034d0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80034d2:	e005      	b.n	80034e0 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80034d4:	f7fe fc62 	bl	8001d9c <HAL_GetTick>
 80034d8:	1b80      	subs	r0, r0, r6
 80034da:	2802      	cmp	r0, #2
 80034dc:	d900      	bls.n	80034e0 <HAL_RCC_OscConfig+0x41c>
 80034de:	e72c      	b.n	800333a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80034e0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80034e2:	421f      	tst	r7, r3
 80034e4:	d0f6      	beq.n	80034d4 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80034e6:	21f8      	movs	r1, #248	; 0xf8
 80034e8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80034ea:	69a3      	ldr	r3, [r4, #24]
 80034ec:	438a      	bics	r2, r1
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4313      	orrs	r3, r2
 80034f2:	636b      	str	r3, [r5, #52]	; 0x34
 80034f4:	e6b2      	b.n	800325c <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 80034f6:	682b      	ldr	r3, [r5, #0]
 80034f8:	4a1d      	ldr	r2, [pc, #116]	; (8003570 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034fa:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80034fc:	4013      	ands	r3, r2
 80034fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003500:	f7fe fc4c 	bl	8001d9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003504:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8003506:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003508:	e005      	b.n	8003516 <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800350a:	f7fe fc47 	bl	8001d9c <HAL_GetTick>
 800350e:	1b80      	subs	r0, r0, r6
 8003510:	2802      	cmp	r0, #2
 8003512:	d900      	bls.n	8003516 <HAL_RCC_OscConfig+0x452>
 8003514:	e711      	b.n	800333a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003516:	682b      	ldr	r3, [r5, #0]
 8003518:	423b      	tst	r3, r7
 800351a:	d1f6      	bne.n	800350a <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800351c:	220f      	movs	r2, #15
 800351e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003520:	4e11      	ldr	r6, [pc, #68]	; (8003568 <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003522:	4393      	bics	r3, r2
 8003524:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003526:	4313      	orrs	r3, r2
 8003528:	62eb      	str	r3, [r5, #44]	; 0x2c
 800352a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800352c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800352e:	686a      	ldr	r2, [r5, #4]
 8003530:	430b      	orrs	r3, r1
 8003532:	4910      	ldr	r1, [pc, #64]	; (8003574 <HAL_RCC_OscConfig+0x4b0>)
 8003534:	400a      	ands	r2, r1
 8003536:	4313      	orrs	r3, r2
 8003538:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	682a      	ldr	r2, [r5, #0]
 800353e:	045b      	lsls	r3, r3, #17
 8003540:	4313      	orrs	r3, r2
 8003542:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003544:	f7fe fc2a 	bl	8001d9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003548:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800354a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800354c:	04ad      	lsls	r5, r5, #18
 800354e:	e005      	b.n	800355c <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003550:	f7fe fc24 	bl	8001d9c <HAL_GetTick>
 8003554:	1b00      	subs	r0, r0, r4
 8003556:	2802      	cmp	r0, #2
 8003558:	d900      	bls.n	800355c <HAL_RCC_OscConfig+0x498>
 800355a:	e6ee      	b.n	800333a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800355c:	6833      	ldr	r3, [r6, #0]
 800355e:	422b      	tst	r3, r5
 8003560:	d0f6      	beq.n	8003550 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 8003562:	2000      	movs	r0, #0
 8003564:	e6a7      	b.n	80032b6 <HAL_RCC_OscConfig+0x1f2>
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	40021000 	.word	0x40021000
 800356c:	efffffff 	.word	0xefffffff
 8003570:	feffffff 	.word	0xfeffffff
 8003574:	ffc2ffff 	.word	0xffc2ffff

08003578 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003578:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 800357a:	4910      	ldr	r1, [pc, #64]	; (80035bc <HAL_RCC_GetSysClockFreq+0x44>)
{
 800357c:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800357e:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003580:	4013      	ands	r3, r2
 8003582:	2b08      	cmp	r3, #8
 8003584:	d001      	beq.n	800358a <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003586:	480e      	ldr	r0, [pc, #56]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003588:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800358a:	250f      	movs	r5, #15
 800358c:	480d      	ldr	r0, [pc, #52]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x4c>)
 800358e:	0c93      	lsrs	r3, r2, #18
 8003590:	402b      	ands	r3, r5
 8003592:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003594:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003596:	03d2      	lsls	r2, r2, #15
 8003598:	d507      	bpl.n	80035aa <HAL_RCC_GetSysClockFreq+0x32>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800359a:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x50>)
 800359c:	400d      	ands	r5, r1
 800359e:	5d59      	ldrb	r1, [r3, r5]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035a0:	4807      	ldr	r0, [pc, #28]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x48>)
 80035a2:	f7fc fdb1 	bl	8000108 <__udivsi3>
 80035a6:	4360      	muls	r0, r4
 80035a8:	e7ee      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x10>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035aa:	0162      	lsls	r2, r4, #5
 80035ac:	1b12      	subs	r2, r2, r4
 80035ae:	0193      	lsls	r3, r2, #6
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	191b      	adds	r3, r3, r4
 80035b6:	0218      	lsls	r0, r3, #8
 80035b8:	e7e6      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x10>
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	40021000 	.word	0x40021000
 80035c0:	007a1200 	.word	0x007a1200
 80035c4:	0800640c 	.word	0x0800640c
 80035c8:	0800641c 	.word	0x0800641c

080035cc <HAL_RCC_ClockConfig>:
{
 80035cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ce:	46ce      	mov	lr, r9
 80035d0:	4647      	mov	r7, r8
 80035d2:	0004      	movs	r4, r0
 80035d4:	000d      	movs	r5, r1
 80035d6:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 80035d8:	2800      	cmp	r0, #0
 80035da:	d00d      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x2c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035dc:	2301      	movs	r3, #1
 80035de:	493b      	ldr	r1, [pc, #236]	; (80036cc <HAL_RCC_ClockConfig+0x100>)
 80035e0:	680a      	ldr	r2, [r1, #0]
 80035e2:	401a      	ands	r2, r3
 80035e4:	42aa      	cmp	r2, r5
 80035e6:	d20c      	bcs.n	8003602 <HAL_RCC_ClockConfig+0x36>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e8:	680a      	ldr	r2, [r1, #0]
 80035ea:	439a      	bics	r2, r3
 80035ec:	432a      	orrs	r2, r5
 80035ee:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f0:	680a      	ldr	r2, [r1, #0]
 80035f2:	4013      	ands	r3, r2
 80035f4:	42ab      	cmp	r3, r5
 80035f6:	d004      	beq.n	8003602 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 80035f8:	2001      	movs	r0, #1
}
 80035fa:	bcc0      	pop	{r6, r7}
 80035fc:	46b9      	mov	r9, r7
 80035fe:	46b0      	mov	r8, r6
 8003600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	079a      	lsls	r2, r3, #30
 8003606:	d50e      	bpl.n	8003626 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	075a      	lsls	r2, r3, #29
 800360a:	d505      	bpl.n	8003618 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800360c:	22e0      	movs	r2, #224	; 0xe0
 800360e:	4930      	ldr	r1, [pc, #192]	; (80036d0 <HAL_RCC_ClockConfig+0x104>)
 8003610:	00d2      	lsls	r2, r2, #3
 8003612:	6848      	ldr	r0, [r1, #4]
 8003614:	4302      	orrs	r2, r0
 8003616:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003618:	20f0      	movs	r0, #240	; 0xf0
 800361a:	492d      	ldr	r1, [pc, #180]	; (80036d0 <HAL_RCC_ClockConfig+0x104>)
 800361c:	684a      	ldr	r2, [r1, #4]
 800361e:	4382      	bics	r2, r0
 8003620:	68a0      	ldr	r0, [r4, #8]
 8003622:	4302      	orrs	r2, r0
 8003624:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003626:	07db      	lsls	r3, r3, #31
 8003628:	d522      	bpl.n	8003670 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <HAL_RCC_ClockConfig+0x104>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362c:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003630:	2a01      	cmp	r2, #1
 8003632:	d046      	beq.n	80036c2 <HAL_RCC_ClockConfig+0xf6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003634:	2a02      	cmp	r2, #2
 8003636:	d041      	beq.n	80036bc <HAL_RCC_ClockConfig+0xf0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003638:	079b      	lsls	r3, r3, #30
 800363a:	d5dd      	bpl.n	80035f8 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800363c:	2103      	movs	r1, #3
 800363e:	4e24      	ldr	r6, [pc, #144]	; (80036d0 <HAL_RCC_ClockConfig+0x104>)
 8003640:	6873      	ldr	r3, [r6, #4]
 8003642:	438b      	bics	r3, r1
 8003644:	4313      	orrs	r3, r2
 8003646:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003648:	f7fe fba8 	bl	8001d9c <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364c:	230c      	movs	r3, #12
 800364e:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003650:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <HAL_RCC_ClockConfig+0x108>)
    tickstart = HAL_GetTick();
 8003652:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003654:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	e004      	b.n	8003662 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003658:	f7fe fba0 	bl	8001d9c <HAL_GetTick>
 800365c:	1bc0      	subs	r0, r0, r7
 800365e:	4548      	cmp	r0, r9
 8003660:	d832      	bhi.n	80036c8 <HAL_RCC_ClockConfig+0xfc>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003662:	4643      	mov	r3, r8
 8003664:	6872      	ldr	r2, [r6, #4]
 8003666:	401a      	ands	r2, r3
 8003668:	6863      	ldr	r3, [r4, #4]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	429a      	cmp	r2, r3
 800366e:	d1f3      	bne.n	8003658 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003670:	2101      	movs	r1, #1
 8003672:	4a16      	ldr	r2, [pc, #88]	; (80036cc <HAL_RCC_ClockConfig+0x100>)
 8003674:	6813      	ldr	r3, [r2, #0]
 8003676:	400b      	ands	r3, r1
 8003678:	42ab      	cmp	r3, r5
 800367a:	d905      	bls.n	8003688 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367c:	6813      	ldr	r3, [r2, #0]
 800367e:	438b      	bics	r3, r1
 8003680:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	6813      	ldr	r3, [r2, #0]
 8003684:	4219      	tst	r1, r3
 8003686:	d1b7      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	075b      	lsls	r3, r3, #29
 800368c:	d506      	bpl.n	800369c <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800368e:	4a10      	ldr	r2, [pc, #64]	; (80036d0 <HAL_RCC_ClockConfig+0x104>)
 8003690:	4911      	ldr	r1, [pc, #68]	; (80036d8 <HAL_RCC_ClockConfig+0x10c>)
 8003692:	6853      	ldr	r3, [r2, #4]
 8003694:	400b      	ands	r3, r1
 8003696:	68e1      	ldr	r1, [r4, #12]
 8003698:	430b      	orrs	r3, r1
 800369a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800369c:	f7ff ff6c 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_RCC_ClockConfig+0x104>)
 80036a2:	4a0e      	ldr	r2, [pc, #56]	; (80036dc <HAL_RCC_ClockConfig+0x110>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	490e      	ldr	r1, [pc, #56]	; (80036e0 <HAL_RCC_ClockConfig+0x114>)
 80036a8:	061b      	lsls	r3, r3, #24
 80036aa:	0f1b      	lsrs	r3, r3, #28
 80036ac:	5cd3      	ldrb	r3, [r2, r3]
 80036ae:	40d8      	lsrs	r0, r3
 80036b0:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80036b2:	2003      	movs	r0, #3
 80036b4:	f7fe fb30 	bl	8001d18 <HAL_InitTick>
  return HAL_OK;
 80036b8:	2000      	movs	r0, #0
 80036ba:	e79e      	b.n	80035fa <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036bc:	019b      	lsls	r3, r3, #6
 80036be:	d4bd      	bmi.n	800363c <HAL_RCC_ClockConfig+0x70>
 80036c0:	e79a      	b.n	80035f8 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	039b      	lsls	r3, r3, #14
 80036c4:	d4ba      	bmi.n	800363c <HAL_RCC_ClockConfig+0x70>
 80036c6:	e797      	b.n	80035f8 <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 80036c8:	2003      	movs	r0, #3
 80036ca:	e796      	b.n	80035fa <HAL_RCC_ClockConfig+0x2e>
 80036cc:	40022000 	.word	0x40022000
 80036d0:	40021000 	.word	0x40021000
 80036d4:	00001388 	.word	0x00001388
 80036d8:	fffff8ff 	.word	0xfffff8ff
 80036dc:	080063f4 	.word	0x080063f4
 80036e0:	20000004 	.word	0x20000004

080036e4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80036e4:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80036e6:	4a05      	ldr	r2, [pc, #20]	; (80036fc <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4905      	ldr	r1, [pc, #20]	; (8003700 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80036ec:	055b      	lsls	r3, r3, #21
 80036ee:	0f5b      	lsrs	r3, r3, #29
 80036f0:	5ccb      	ldrb	r3, [r1, r3]
 80036f2:	6810      	ldr	r0, [r2, #0]
 80036f4:	40d8      	lsrs	r0, r3
}    
 80036f6:	4770      	bx	lr
 80036f8:	40021000 	.word	0x40021000
 80036fc:	20000004 	.word	0x20000004
 8003700:	08006404 	.word	0x08006404

08003704 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003706:	46ce      	mov	lr, r9
 8003708:	4647      	mov	r7, r8
 800370a:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800370c:	6803      	ldr	r3, [r0, #0]
{
 800370e:	0004      	movs	r4, r0
 8003710:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003712:	03da      	lsls	r2, r3, #15
 8003714:	d530      	bpl.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003716:	2280      	movs	r2, #128	; 0x80
 8003718:	4b43      	ldr	r3, [pc, #268]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800371a:	0552      	lsls	r2, r2, #21
 800371c:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800371e:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003720:	4211      	tst	r1, r2
 8003722:	d041      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003724:	2680      	movs	r6, #128	; 0x80
 8003726:	4d41      	ldr	r5, [pc, #260]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003728:	0076      	lsls	r6, r6, #1
 800372a:	682b      	ldr	r3, [r5, #0]
 800372c:	4233      	tst	r3, r6
 800372e:	d049      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003730:	4d3d      	ldr	r5, [pc, #244]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003732:	23c0      	movs	r3, #192	; 0xc0
 8003734:	6a2a      	ldr	r2, [r5, #32]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	0010      	movs	r0, r2
 800373a:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800373c:	421a      	tst	r2, r3
 800373e:	d063      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003740:	6861      	ldr	r1, [r4, #4]
 8003742:	400b      	ands	r3, r1
 8003744:	4283      	cmp	r3, r0
 8003746:	d00e      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003748:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800374a:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800374c:	6a2e      	ldr	r6, [r5, #32]
 800374e:	0240      	lsls	r0, r0, #9
 8003750:	4330      	orrs	r0, r6
 8003752:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003754:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003756:	4a36      	ldr	r2, [pc, #216]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003758:	4e36      	ldr	r6, [pc, #216]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800375a:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800375c:	4030      	ands	r0, r6
 800375e:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003760:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003762:	07db      	lsls	r3, r3, #31
 8003764:	d43f      	bmi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003766:	4a30      	ldr	r2, [pc, #192]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003768:	4831      	ldr	r0, [pc, #196]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800376a:	6a13      	ldr	r3, [r2, #32]
 800376c:	4003      	ands	r3, r0
 800376e:	430b      	orrs	r3, r1
 8003770:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003772:	2f01      	cmp	r7, #1
 8003774:	d051      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	07da      	lsls	r2, r3, #31
 800377a:	d506      	bpl.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800377c:	2003      	movs	r0, #3
 800377e:	492a      	ldr	r1, [pc, #168]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003780:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003782:	4382      	bics	r2, r0
 8003784:	68a0      	ldr	r0, [r4, #8]
 8003786:	4302      	orrs	r2, r0
 8003788:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800378a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800378c:	069b      	lsls	r3, r3, #26
 800378e:	d506      	bpl.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003790:	2110      	movs	r1, #16
 8003792:	4a25      	ldr	r2, [pc, #148]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003794:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003796:	438b      	bics	r3, r1
 8003798:	68e1      	ldr	r1, [r4, #12]
 800379a:	430b      	orrs	r3, r1
 800379c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800379e:	b003      	add	sp, #12
 80037a0:	bcc0      	pop	{r6, r7}
 80037a2:	46b9      	mov	r9, r7
 80037a4:	46b0      	mov	r8, r6
 80037a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 80037aa:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ac:	4d1f      	ldr	r5, [pc, #124]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80037ae:	4311      	orrs	r1, r2
 80037b0:	61d9      	str	r1, [r3, #28]
 80037b2:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80037b6:	4013      	ands	r3, r2
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 80037be:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	4233      	tst	r3, r6
 80037c2:	d1b5      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c4:	682b      	ldr	r3, [r5, #0]
 80037c6:	4333      	orrs	r3, r6
 80037c8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80037ca:	f7fe fae7 	bl	8001d9c <HAL_GetTick>
 80037ce:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	4233      	tst	r3, r6
 80037d4:	d1ac      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d6:	f7fe fae1 	bl	8001d9c <HAL_GetTick>
 80037da:	4643      	mov	r3, r8
 80037dc:	1ac0      	subs	r0, r0, r3
 80037de:	2864      	cmp	r0, #100	; 0x64
 80037e0:	d9f6      	bls.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 80037e2:	2003      	movs	r0, #3
 80037e4:	e7db      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 80037e6:	f7fe fad9 	bl	8001d9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ea:	2302      	movs	r3, #2
 80037ec:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 80037f0:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f2:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f4:	e004      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f6:	f7fe fad1 	bl	8001d9c <HAL_GetTick>
 80037fa:	1b80      	subs	r0, r0, r6
 80037fc:	4548      	cmp	r0, r9
 80037fe:	d8f0      	bhi.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003800:	4642      	mov	r2, r8
 8003802:	6a2b      	ldr	r3, [r5, #32]
 8003804:	421a      	tst	r2, r3
 8003806:	d0f6      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003808:	4a07      	ldr	r2, [pc, #28]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800380a:	4809      	ldr	r0, [pc, #36]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800380c:	6a13      	ldr	r3, [r2, #32]
 800380e:	6861      	ldr	r1, [r4, #4]
 8003810:	4003      	ands	r3, r0
 8003812:	430b      	orrs	r3, r1
 8003814:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 8003816:	2f01      	cmp	r7, #1
 8003818:	d1ad      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 800381a:	69d3      	ldr	r3, [r2, #28]
 800381c:	4907      	ldr	r1, [pc, #28]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800381e:	400b      	ands	r3, r1
 8003820:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	e7a8      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	40021000 	.word	0x40021000
 800382c:	40007000 	.word	0x40007000
 8003830:	fffffcff 	.word	0xfffffcff
 8003834:	fffeffff 	.word	0xfffeffff
 8003838:	00001388 	.word	0x00001388
 800383c:	efffffff 	.word	0xefffffff

08003840 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003842:	46de      	mov	lr, fp
 8003844:	4657      	mov	r7, sl
 8003846:	464e      	mov	r6, r9
 8003848:	4645      	mov	r5, r8
 800384a:	b5e0      	push	{r5, r6, r7, lr}
 800384c:	b083      	sub	sp, #12
 800384e:	001e      	movs	r6, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003850:	466b      	mov	r3, sp
 8003852:	1cdf      	adds	r7, r3, #3
 8003854:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003856:	0015      	movs	r5, r2
 8003858:	4681      	mov	r9, r0
 800385a:	000c      	movs	r4, r1
  __IO uint8_t  tmpreg8 = 0;
 800385c:	703b      	strb	r3, [r7, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800385e:	f7fe fa9d 	bl	8001d9c <HAL_GetTick>
 8003862:	1976      	adds	r6, r6, r5
 8003864:	1a33      	subs	r3, r6, r0
 8003866:	4698      	mov	r8, r3
  tmp_tickstart = HAL_GetTick();
 8003868:	f7fe fa98 	bl	8001d9c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800386c:	464b      	mov	r3, r9
 800386e:	681b      	ldr	r3, [r3, #0]
  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);

  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003870:	26c0      	movs	r6, #192	; 0xc0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003872:	469a      	mov	sl, r3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003874:	4b34      	ldr	r3, [pc, #208]	; (8003948 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
  tmp_tickstart = HAL_GetTick();
 8003876:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003878:	681b      	ldr	r3, [r3, #0]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800387a:	00f6      	lsls	r6, r6, #3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800387c:	009a      	lsls	r2, r3, #2
 800387e:	18d2      	adds	r2, r2, r3
 8003880:	00d3      	lsls	r3, r2, #3
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	4642      	mov	r2, r8
 8003886:	0d1b      	lsrs	r3, r3, #20
 8003888:	4353      	muls	r3, r2
  while ((hspi->Instance->SR & Fifo) != State)
 800388a:	4652      	mov	r2, sl
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800388c:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800388e:	e001      	b.n	8003894 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8003890:	1c6b      	adds	r3, r5, #1
 8003892:	d10b      	bne.n	80038ac <SPI_WaitFifoStateUntilTimeout.constprop.0+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8003894:	6893      	ldr	r3, [r2, #8]
 8003896:	4223      	tst	r3, r4
 8003898:	d01d      	beq.n	80038d6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x96>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800389a:	42b4      	cmp	r4, r6
 800389c:	d1f8      	bne.n	8003890 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x50>
      tmpreg8 = *ptmpreg8;
 800389e:	4653      	mov	r3, sl
 80038a0:	7b1b      	ldrb	r3, [r3, #12]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	703b      	strb	r3, [r7, #0]
      UNUSED(tmpreg8);
 80038a6:	783b      	ldrb	r3, [r7, #0]
    if (Timeout != HAL_MAX_DELAY)
 80038a8:	1c6b      	adds	r3, r5, #1
 80038aa:	d0f3      	beq.n	8003894 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038ac:	f7fe fa76 	bl	8001d9c <HAL_GetTick>
 80038b0:	465b      	mov	r3, fp
 80038b2:	1ac0      	subs	r0, r0, r3
 80038b4:	4540      	cmp	r0, r8
 80038b6:	d216      	bcs.n	80038e6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038b8:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 80038ba:	1e5a      	subs	r2, r3, #1
 80038bc:	4193      	sbcs	r3, r2
 80038be:	4642      	mov	r2, r8
 80038c0:	425b      	negs	r3, r3
 80038c2:	401a      	ands	r2, r3
      }
      count--;
 80038c4:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80038c6:	4690      	mov	r8, r2
      count--;
 80038c8:	3b01      	subs	r3, #1
 80038ca:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038cc:	464b      	mov	r3, r9
 80038ce:	681a      	ldr	r2, [r3, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80038d0:	6893      	ldr	r3, [r2, #8]
 80038d2:	4223      	tst	r3, r4
 80038d4:	d1e1      	bne.n	800389a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
    }
  }

  return HAL_OK;
 80038d6:	2000      	movs	r0, #0
}
 80038d8:	b003      	add	sp, #12
 80038da:	bcf0      	pop	{r4, r5, r6, r7}
 80038dc:	46bb      	mov	fp, r7
 80038de:	46b2      	mov	sl, r6
 80038e0:	46a9      	mov	r9, r5
 80038e2:	46a0      	mov	r8, r4
 80038e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038e6:	464b      	mov	r3, r9
 80038e8:	21e0      	movs	r1, #224	; 0xe0
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038f0:	4649      	mov	r1, r9
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038f2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038f4:	2282      	movs	r2, #130	; 0x82
 80038f6:	6849      	ldr	r1, [r1, #4]
 80038f8:	0052      	lsls	r2, r2, #1
 80038fa:	4291      	cmp	r1, r2
 80038fc:	d015      	beq.n	800392a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038fe:	464a      	mov	r2, r9
 8003900:	2180      	movs	r1, #128	; 0x80
 8003902:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003904:	0189      	lsls	r1, r1, #6
 8003906:	428a      	cmp	r2, r1
 8003908:	d106      	bne.n	8003918 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
          SPI_RESET_CRC(hspi);
 800390a:	6819      	ldr	r1, [r3, #0]
 800390c:	480f      	ldr	r0, [pc, #60]	; (800394c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x10c>)
 800390e:	4001      	ands	r1, r0
 8003910:	6019      	str	r1, [r3, #0]
 8003912:	6819      	ldr	r1, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003918:	235d      	movs	r3, #93	; 0x5d
 800391a:	2201      	movs	r2, #1
 800391c:	4649      	mov	r1, r9
 800391e:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 8003920:	2200      	movs	r2, #0
 8003922:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8003924:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8003926:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8003928:	e7d6      	b.n	80038d8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800392a:	464a      	mov	r2, r9
 800392c:	2180      	movs	r1, #128	; 0x80
 800392e:	6892      	ldr	r2, [r2, #8]
 8003930:	0209      	lsls	r1, r1, #8
 8003932:	428a      	cmp	r2, r1
 8003934:	d003      	beq.n	800393e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003936:	2180      	movs	r1, #128	; 0x80
 8003938:	00c9      	lsls	r1, r1, #3
 800393a:	428a      	cmp	r2, r1
 800393c:	d1df      	bne.n	80038fe <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          __HAL_SPI_DISABLE(hspi);
 800393e:	2140      	movs	r1, #64	; 0x40
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	438a      	bics	r2, r1
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	e7da      	b.n	80038fe <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
 8003948:	20000004 	.word	0x20000004
 800394c:	ffffdfff 	.word	0xffffdfff

08003950 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003952:	46c6      	mov	lr, r8
 8003954:	b500      	push	{lr}
 8003956:	000c      	movs	r4, r1
 8003958:	0016      	movs	r6, r2
 800395a:	b082      	sub	sp, #8
 800395c:	0007      	movs	r7, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800395e:	f7fe fa1d 	bl	8001d9c <HAL_GetTick>
 8003962:	1936      	adds	r6, r6, r4
 8003964:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8003966:	f7fe fa19 	bl	8001d9c <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800396a:	2580      	movs	r5, #128	; 0x80
  tmp_tickstart = HAL_GetTick();
 800396c:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800396e:	4b26      	ldr	r3, [pc, #152]	; (8003a08 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	015b      	lsls	r3, r3, #5
 8003974:	0d1b      	lsrs	r3, r3, #20
 8003976:	4373      	muls	r3, r6
 8003978:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	e001      	b.n	8003982 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
    if (Timeout != HAL_MAX_DELAY)
 800397e:	1c63      	adds	r3, r4, #1
 8003980:	d107      	bne.n	8003992 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003982:	6893      	ldr	r3, [r2, #8]
 8003984:	421d      	tst	r5, r3
 8003986:	d1fa      	bne.n	800397e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  return HAL_OK;
 8003988:	2000      	movs	r0, #0
}
 800398a:	b002      	add	sp, #8
 800398c:	bc80      	pop	{r7}
 800398e:	46b8      	mov	r8, r7
 8003990:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003992:	f7fe fa03 	bl	8001d9c <HAL_GetTick>
 8003996:	4643      	mov	r3, r8
 8003998:	1ac0      	subs	r0, r0, r3
 800399a:	42b0      	cmp	r0, r6
 800399c:	d208      	bcs.n	80039b0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
      if (count == 0U)
 800399e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80039a0:	1e5a      	subs	r2, r3, #1
 80039a2:	4193      	sbcs	r3, r2
 80039a4:	425b      	negs	r3, r3
 80039a6:	401e      	ands	r6, r3
      count--;
 80039a8:	9b01      	ldr	r3, [sp, #4]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	e7e4      	b.n	800397a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039b0:	21e0      	movs	r1, #224	; 0xe0
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	438a      	bics	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ba:	2282      	movs	r2, #130	; 0x82
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	0052      	lsls	r2, r2, #1
 80039c0:	4291      	cmp	r1, r2
 80039c2:	d013      	beq.n	80039ec <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039c4:	2180      	movs	r1, #128	; 0x80
 80039c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039c8:	0189      	lsls	r1, r1, #6
 80039ca:	428a      	cmp	r2, r1
 80039cc:	d106      	bne.n	80039dc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
          SPI_RESET_CRC(hspi);
 80039ce:	6819      	ldr	r1, [r3, #0]
 80039d0:	480e      	ldr	r0, [pc, #56]	; (8003a0c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 80039d2:	4001      	ands	r1, r0
 80039d4:	6019      	str	r1, [r3, #0]
 80039d6:	6819      	ldr	r1, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80039dc:	235d      	movs	r3, #93	; 0x5d
 80039de:	2201      	movs	r2, #1
 80039e0:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 80039e2:	2200      	movs	r2, #0
 80039e4:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 80039e6:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80039e8:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 80039ea:	e7ce      	b.n	800398a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ec:	2180      	movs	r1, #128	; 0x80
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	0209      	lsls	r1, r1, #8
 80039f2:	428a      	cmp	r2, r1
 80039f4:	d003      	beq.n	80039fe <SPI_WaitFlagStateUntilTimeout.constprop.0+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039f6:	2180      	movs	r1, #128	; 0x80
 80039f8:	00c9      	lsls	r1, r1, #3
 80039fa:	428a      	cmp	r2, r1
 80039fc:	d1e2      	bne.n	80039c4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
          __HAL_SPI_DISABLE(hspi);
 80039fe:	2140      	movs	r1, #64	; 0x40
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	438a      	bics	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e7dd      	b.n	80039c4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
 8003a08:	20000004 	.word	0x20000004
 8003a0c:	ffffdfff 	.word	0xffffdfff

08003a10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a10:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a12:	0013      	movs	r3, r2
{
 8003a14:	000d      	movs	r5, r1
 8003a16:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a18:	000a      	movs	r2, r1
 8003a1a:	21c0      	movs	r1, #192	; 0xc0
 8003a1c:	0149      	lsls	r1, r1, #5
{
 8003a1e:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a20:	f7ff ff0e 	bl	8003840 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	d10f      	bne.n	8003a48 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a28:	0032      	movs	r2, r6
 8003a2a:	0029      	movs	r1, r5
 8003a2c:	0020      	movs	r0, r4
 8003a2e:	f7ff ff8f 	bl	8003950 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d108      	bne.n	8003a48 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a36:	21c0      	movs	r1, #192	; 0xc0
 8003a38:	0033      	movs	r3, r6
 8003a3a:	002a      	movs	r2, r5
 8003a3c:	0020      	movs	r0, r4
 8003a3e:	00c9      	lsls	r1, r1, #3
 8003a40:	f7ff fefe 	bl	8003840 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d004      	beq.n	8003a52 <SPI_EndRxTxTransaction+0x42>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a48:	2220      	movs	r2, #32
    return HAL_TIMEOUT;
 8003a4a:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a4c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	6623      	str	r3, [r4, #96]	; 0x60
  }

  return HAL_OK;
}
 8003a52:	bd70      	pop	{r4, r5, r6, pc}

08003a54 <HAL_SPI_Init>:
{
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a56:	46de      	mov	lr, fp
 8003a58:	4657      	mov	r7, sl
 8003a5a:	464e      	mov	r6, r9
 8003a5c:	4645      	mov	r5, r8
 8003a5e:	0004      	movs	r4, r0
 8003a60:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 8003a62:	2800      	cmp	r0, #0
 8003a64:	d100      	bne.n	8003a68 <HAL_SPI_Init+0x14>
 8003a66:	e094      	b.n	8003b92 <HAL_SPI_Init+0x13e>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a68:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003a6a:	2d00      	cmp	r5, #0
 8003a6c:	d06b      	beq.n	8003b46 <HAL_SPI_Init+0xf2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a72:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a78:	335d      	adds	r3, #93	; 0x5d
 8003a7a:	5ce3      	ldrb	r3, [r4, r3]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d06e      	beq.n	8003b60 <HAL_SPI_Init+0x10c>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003a82:	235d      	movs	r3, #93	; 0x5d
 8003a84:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 8003a86:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8003a88:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8003a8a:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a8c:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8003a8e:	6813      	ldr	r3, [r2, #0]
 8003a90:	438b      	bics	r3, r1
 8003a92:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a94:	23e0      	movs	r3, #224	; 0xe0
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4298      	cmp	r0, r3
 8003a9a:	d968      	bls.n	8003b6e <HAL_SPI_Init+0x11a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a9c:	23f0      	movs	r3, #240	; 0xf0
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	4298      	cmp	r0, r3
 8003aa2:	d000      	beq.n	8003aa6 <HAL_SPI_Init+0x52>
 8003aa4:	e077      	b.n	8003b96 <HAL_SPI_Init+0x142>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003aaa:	019b      	lsls	r3, r3, #6
 8003aac:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003aae:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ab0:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ab2:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ab4:	2682      	movs	r6, #130	; 0x82
 8003ab6:	2784      	movs	r7, #132	; 0x84
 8003ab8:	6863      	ldr	r3, [r4, #4]
 8003aba:	0076      	lsls	r6, r6, #1
 8003abc:	4033      	ands	r3, r6
 8003abe:	68a6      	ldr	r6, [r4, #8]
 8003ac0:	023f      	lsls	r7, r7, #8
 8003ac2:	403e      	ands	r6, r7
 8003ac4:	2702      	movs	r7, #2
 8003ac6:	4333      	orrs	r3, r6
 8003ac8:	6926      	ldr	r6, [r4, #16]
 8003aca:	69a1      	ldr	r1, [r4, #24]
 8003acc:	403e      	ands	r6, r7
 8003ace:	4333      	orrs	r3, r6
 8003ad0:	2601      	movs	r6, #1
 8003ad2:	6967      	ldr	r7, [r4, #20]
 8003ad4:	46b2      	mov	sl, r6
 8003ad6:	4037      	ands	r7, r6
 8003ad8:	433b      	orrs	r3, r7
 8003ada:	2780      	movs	r7, #128	; 0x80
 8003adc:	00bf      	lsls	r7, r7, #2
 8003ade:	400f      	ands	r7, r1
 8003ae0:	433b      	orrs	r3, r7
 8003ae2:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ae4:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ae6:	46b8      	mov	r8, r7
 8003ae8:	2738      	movs	r7, #56	; 0x38
 8003aea:	46b9      	mov	r9, r7
 8003aec:	4647      	mov	r7, r8
 8003aee:	464e      	mov	r6, r9
 8003af0:	4037      	ands	r7, r6
 8003af2:	6a26      	ldr	r6, [r4, #32]
 8003af4:	433b      	orrs	r3, r7
 8003af6:	46b0      	mov	r8, r6
 8003af8:	2680      	movs	r6, #128	; 0x80
 8003afa:	4647      	mov	r7, r8
 8003afc:	4037      	ands	r7, r6
 8003afe:	4666      	mov	r6, ip
 8003b00:	433b      	orrs	r3, r7
 8003b02:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b04:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b06:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b0a:	4033      	ands	r3, r6
 8003b0c:	26f0      	movs	r6, #240	; 0xf0
 8003b0e:	0136      	lsls	r6, r6, #4
 8003b10:	4030      	ands	r0, r6
 8003b12:	4303      	orrs	r3, r0
 8003b14:	2004      	movs	r0, #4
 8003b16:	4001      	ands	r1, r0
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	2110      	movs	r1, #16
 8003b1c:	4029      	ands	r1, r5
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	4659      	mov	r1, fp
 8003b22:	430b      	orrs	r3, r1
 8003b24:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b26:	69d3      	ldr	r3, [r2, #28]
 8003b28:	491c      	ldr	r1, [pc, #112]	; (8003b9c <HAL_SPI_Init+0x148>)
  return HAL_OK;
 8003b2a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b2c:	400b      	ands	r3, r1
 8003b2e:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b30:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003b32:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b34:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b36:	335d      	adds	r3, #93	; 0x5d
 8003b38:	54e2      	strb	r2, [r4, r3]
}
 8003b3a:	bcf0      	pop	{r4, r5, r6, r7}
 8003b3c:	46bb      	mov	fp, r7
 8003b3e:	46b2      	mov	sl, r6
 8003b40:	46a9      	mov	r9, r5
 8003b42:	46a0      	mov	r8, r4
 8003b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b46:	2382      	movs	r3, #130	; 0x82
 8003b48:	6842      	ldr	r2, [r0, #4]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d091      	beq.n	8003a74 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b50:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b52:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b54:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b56:	335d      	adds	r3, #93	; 0x5d
 8003b58:	5ce3      	ldrb	r3, [r4, r3]
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d190      	bne.n	8003a82 <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 8003b60:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003b62:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003b64:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8003b66:	f7fd fe9f 	bl	80018a8 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b6a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003b6c:	e789      	b.n	8003a82 <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b6e:	4298      	cmp	r0, r3
 8003b70:	d006      	beq.n	8003b80 <HAL_SPI_Init+0x12c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	015b      	lsls	r3, r3, #5
 8003b76:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	469c      	mov	ip, r3
 8003b7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b7e:	e799      	b.n	8003ab4 <HAL_SPI_Init+0x60>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003b84:	019b      	lsls	r3, r3, #6
 8003b86:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b8c:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b8e:	469b      	mov	fp, r3
 8003b90:	e790      	b.n	8003ab4 <HAL_SPI_Init+0x60>
    return HAL_ERROR;
 8003b92:	2001      	movs	r0, #1
 8003b94:	e7d1      	b.n	8003b3a <HAL_SPI_Init+0xe6>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b96:	2300      	movs	r3, #0
 8003b98:	469b      	mov	fp, r3
 8003b9a:	e7ed      	b.n	8003b78 <HAL_SPI_Init+0x124>
 8003b9c:	fffff7ff 	.word	0xfffff7ff

08003ba0 <HAL_SPI_TransmitReceive>:
{
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	4647      	mov	r7, r8
 8003ba4:	46ce      	mov	lr, r9
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8003baa:	235c      	movs	r3, #92	; 0x5c
{
 8003bac:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8003bae:	5cc2      	ldrb	r2, [r0, r3]
{
 8003bb0:	0004      	movs	r4, r0
 8003bb2:	4688      	mov	r8, r1
 8003bb4:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8003bb6:	2a01      	cmp	r2, #1
 8003bb8:	d100      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x1c>
 8003bba:	e0a7      	b.n	8003d0c <HAL_SPI_TransmitReceive+0x16c>
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8003bc0:	f7fe f8ec 	bl	8001d9c <HAL_GetTick>
  tmp_state           = hspi->State;
 8003bc4:	235d      	movs	r3, #93	; 0x5d
 8003bc6:	5ce3      	ldrb	r3, [r4, r3]
  tickstart = HAL_GetTick();
 8003bc8:	0006      	movs	r6, r0
  tmp_mode            = hspi->Init.Mode;
 8003bca:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8003bcc:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d010      	beq.n	8003bf4 <HAL_SPI_TransmitReceive+0x54>
 8003bd2:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8003bd4:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d006      	beq.n	8003bea <HAL_SPI_TransmitReceive+0x4a>
  __HAL_UNLOCK(hspi);
 8003bdc:	235c      	movs	r3, #92	; 0x5c
 8003bde:	2200      	movs	r2, #0
 8003be0:	54e2      	strb	r2, [r4, r3]
}
 8003be2:	bcc0      	pop	{r6, r7}
 8003be4:	46b9      	mov	r9, r7
 8003be6:	46b0      	mov	r8, r6
 8003be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bea:	68a3      	ldr	r3, [r4, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f5      	bne.n	8003bdc <HAL_SPI_TransmitReceive+0x3c>
 8003bf0:	2904      	cmp	r1, #4
 8003bf2:	d1f3      	bne.n	8003bdc <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bf4:	4643      	mov	r3, r8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d100      	bne.n	8003bfc <HAL_SPI_TransmitReceive+0x5c>
 8003bfa:	e085      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x168>
 8003bfc:	464b      	mov	r3, r9
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d100      	bne.n	8003c04 <HAL_SPI_TransmitReceive+0x64>
 8003c02:	e081      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x168>
 8003c04:	2f00      	cmp	r7, #0
 8003c06:	d100      	bne.n	8003c0a <HAL_SPI_TransmitReceive+0x6a>
 8003c08:	e07e      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x168>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c0a:	235d      	movs	r3, #93	; 0x5d
 8003c0c:	5ce1      	ldrb	r1, [r4, r3]
 8003c0e:	2904      	cmp	r1, #4
 8003c10:	d001      	beq.n	8003c16 <HAL_SPI_TransmitReceive+0x76>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c12:	2105      	movs	r1, #5
 8003c14:	54e1      	strb	r1, [r4, r3]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c16:	4649      	mov	r1, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c18:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c1a:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003c1c:	2146      	movs	r1, #70	; 0x46
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c1e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8003c20:	5267      	strh	r7, [r4, r1]
  hspi->RxXferSize  = Size;
 8003c22:	3902      	subs	r1, #2
 8003c24:	5267      	strh	r7, [r4, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c26:	4641      	mov	r1, r8
  hspi->RxISR       = NULL;
 8003c28:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003c2a:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c2c:	23e0      	movs	r3, #224	; 0xe0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c2e:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c30:	68e1      	ldr	r1, [r4, #12]
  hspi->TxXferCount = Size;
 8003c32:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003c34:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4299      	cmp	r1, r3
 8003c3a:	d969      	bls.n	8003d10 <HAL_SPI_TransmitReceive+0x170>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	4866      	ldr	r0, [pc, #408]	; (8003dd8 <HAL_SPI_TransmitReceive+0x238>)
 8003c40:	6859      	ldr	r1, [r3, #4]
 8003c42:	4001      	ands	r1, r0
 8003c44:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c46:	2140      	movs	r1, #64	; 0x40
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	4201      	tst	r1, r0
 8003c4c:	d102      	bne.n	8003c54 <HAL_SPI_TransmitReceive+0xb4>
    __HAL_SPI_ENABLE(hspi);
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	4301      	orrs	r1, r0
 8003c52:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c54:	2a00      	cmp	r2, #0
 8003c56:	d000      	beq.n	8003c5a <HAL_SPI_TransmitReceive+0xba>
 8003c58:	e0b6      	b.n	8003dc8 <HAL_SPI_TransmitReceive+0x228>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c5a:	4642      	mov	r2, r8
 8003c5c:	8812      	ldrh	r2, [r2, #0]
 8003c5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c60:	4643      	mov	r3, r8
 8003c62:	3302      	adds	r3, #2
 8003c64:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003c66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c72:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c74:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c76:	4698      	mov	r8, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c78:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <HAL_SPI_TransmitReceive+0xe4>
 8003c7e:	5be3      	ldrh	r3, [r4, r7]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d034      	beq.n	8003cee <HAL_SPI_TransmitReceive+0x14e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c84:	4641      	mov	r1, r8
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	4211      	tst	r1, r2
 8003c8c:	d010      	beq.n	8003cb0 <HAL_SPI_TransmitReceive+0x110>
 8003c8e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003c90:	2a00      	cmp	r2, #0
 8003c92:	d00d      	beq.n	8003cb0 <HAL_SPI_TransmitReceive+0x110>
 8003c94:	464a      	mov	r2, r9
 8003c96:	2a01      	cmp	r2, #1
 8003c98:	d10a      	bne.n	8003cb0 <HAL_SPI_TransmitReceive+0x110>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003c9c:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c9e:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ca0:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca2:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003ca4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003ca6:	3a01      	subs	r2, #1
 8003ca8:	b292      	uxth	r2, r2
 8003caa:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003cac:	2200      	movs	r2, #0
 8003cae:	4691      	mov	r9, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	0008      	movs	r0, r1
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	4010      	ands	r0, r2
 8003cb8:	4211      	tst	r1, r2
 8003cba:	d00c      	beq.n	8003cd6 <HAL_SPI_TransmitReceive+0x136>
 8003cbc:	5be2      	ldrh	r2, [r4, r7]
 8003cbe:	2a00      	cmp	r2, #0
 8003cc0:	d009      	beq.n	8003cd6 <HAL_SPI_TransmitReceive+0x136>
        txallowed = 1U;
 8003cc2:	4681      	mov	r9, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cca:	3302      	adds	r3, #2
 8003ccc:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003cce:	5be3      	ldrh	r3, [r4, r7]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	53e3      	strh	r3, [r4, r7]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cd6:	f7fe f861 	bl	8001d9c <HAL_GetTick>
 8003cda:	1b80      	subs	r0, r0, r6
 8003cdc:	42a8      	cmp	r0, r5
 8003cde:	d3cb      	bcc.n	8003c78 <HAL_SPI_TransmitReceive+0xd8>
 8003ce0:	1c6b      	adds	r3, r5, #1
 8003ce2:	d0c9      	beq.n	8003c78 <HAL_SPI_TransmitReceive+0xd8>
        hspi->State = HAL_SPI_STATE_READY;
 8003ce4:	235d      	movs	r3, #93	; 0x5d
 8003ce6:	2201      	movs	r2, #1
        errorcode = HAL_TIMEOUT;
 8003ce8:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8003cea:	54e2      	strb	r2, [r4, r3]
        goto error;
 8003cec:	e776      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x3c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cee:	0032      	movs	r2, r6
 8003cf0:	0029      	movs	r1, r5
 8003cf2:	0020      	movs	r0, r4
 8003cf4:	f7ff fe8c 	bl	8003a10 <SPI_EndRxTxTransaction>
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d002      	beq.n	8003d02 <HAL_SPI_TransmitReceive+0x162>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cfc:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8003cfe:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d00:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d02:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d05b      	beq.n	8003dc0 <HAL_SPI_TransmitReceive+0x220>
    errorcode = HAL_ERROR;
 8003d08:	2001      	movs	r0, #1
 8003d0a:	e767      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8003d0c:	2002      	movs	r0, #2
 8003d0e:	e768      	b.n	8003be2 <HAL_SPI_TransmitReceive+0x42>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d10:	2180      	movs	r1, #128	; 0x80
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	0149      	lsls	r1, r1, #5
 8003d16:	6858      	ldr	r0, [r3, #4]
 8003d18:	4301      	orrs	r1, r0
 8003d1a:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d1c:	2140      	movs	r1, #64	; 0x40
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	4201      	tst	r1, r0
 8003d22:	d102      	bne.n	8003d2a <HAL_SPI_TransmitReceive+0x18a>
    __HAL_SPI_ENABLE(hspi);
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	4301      	orrs	r1, r0
 8003d28:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d2a:	2a00      	cmp	r2, #0
 8003d2c:	d150      	bne.n	8003dd0 <HAL_SPI_TransmitReceive+0x230>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d2e:	4642      	mov	r2, r8
 8003d30:	7812      	ldrb	r2, [r2, #0]
 8003d32:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d36:	3301      	adds	r3, #1
 8003d38:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003d3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003d42:	2301      	movs	r3, #1
 8003d44:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d46:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d48:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d4a:	4698      	mov	r8, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d4c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <HAL_SPI_TransmitReceive+0x1b8>
 8003d52:	5be3      	ldrh	r3, [r4, r7]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0ca      	beq.n	8003cee <HAL_SPI_TransmitReceive+0x14e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d58:	4641      	mov	r1, r8
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	4211      	tst	r1, r2
 8003d60:	d012      	beq.n	8003d88 <HAL_SPI_TransmitReceive+0x1e8>
 8003d62:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003d64:	2a00      	cmp	r2, #0
 8003d66:	d00f      	beq.n	8003d88 <HAL_SPI_TransmitReceive+0x1e8>
 8003d68:	464a      	mov	r2, r9
 8003d6a:	2a01      	cmp	r2, #1
 8003d6c:	d10c      	bne.n	8003d88 <HAL_SPI_TransmitReceive+0x1e8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003d70:	7812      	ldrb	r2, [r2, #0]
 8003d72:	731a      	strb	r2, [r3, #12]
        txallowed = 0U;
 8003d74:	2200      	movs	r2, #0
 8003d76:	4691      	mov	r9, r2
        hspi->pTxBuffPtr++;
 8003d78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003d7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	2101      	movs	r1, #1
 8003d8a:	0008      	movs	r0, r1
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	4010      	ands	r0, r2
 8003d90:	4211      	tst	r1, r2
 8003d92:	d00d      	beq.n	8003db0 <HAL_SPI_TransmitReceive+0x210>
 8003d94:	5be2      	ldrh	r2, [r4, r7]
 8003d96:	2a00      	cmp	r2, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_SPI_TransmitReceive+0x210>
        txallowed = 1U;
 8003d9a:	4681      	mov	r9, r0
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d9c:	7b1b      	ldrb	r3, [r3, #12]
 8003d9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003da0:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8003da2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003da4:	3301      	adds	r3, #1
 8003da6:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003da8:	5be3      	ldrh	r3, [r4, r7]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	53e3      	strh	r3, [r4, r7]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003db0:	f7fd fff4 	bl	8001d9c <HAL_GetTick>
 8003db4:	1b80      	subs	r0, r0, r6
 8003db6:	42a8      	cmp	r0, r5
 8003db8:	d3c8      	bcc.n	8003d4c <HAL_SPI_TransmitReceive+0x1ac>
 8003dba:	1c6b      	adds	r3, r5, #1
 8003dbc:	d0c6      	beq.n	8003d4c <HAL_SPI_TransmitReceive+0x1ac>
 8003dbe:	e791      	b.n	8003ce4 <HAL_SPI_TransmitReceive+0x144>
    hspi->State = HAL_SPI_STATE_READY;
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	335d      	adds	r3, #93	; 0x5d
 8003dc4:	54e2      	strb	r2, [r4, r3]
 8003dc6:	e709      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x3c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dc8:	2f01      	cmp	r7, #1
 8003dca:	d000      	beq.n	8003dce <HAL_SPI_TransmitReceive+0x22e>
 8003dcc:	e74f      	b.n	8003c6e <HAL_SPI_TransmitReceive+0xce>
 8003dce:	e744      	b.n	8003c5a <HAL_SPI_TransmitReceive+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dd0:	2f01      	cmp	r7, #1
 8003dd2:	d1b6      	bne.n	8003d42 <HAL_SPI_TransmitReceive+0x1a2>
 8003dd4:	e7ab      	b.n	8003d2e <HAL_SPI_TransmitReceive+0x18e>
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	ffffefff 	.word	0xffffefff

08003ddc <HAL_SPI_ErrorCallback>:
 8003ddc:	4770      	bx	lr
 8003dde:	46c0      	nop			; (mov r8, r8)

08003de0 <HAL_SPI_IRQHandler>:
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003de0:	2241      	movs	r2, #65	; 0x41
{
 8003de2:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8003de4:	6801      	ldr	r1, [r0, #0]
{
 8003de6:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8003de8:	6848      	ldr	r0, [r1, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003dea:	688b      	ldr	r3, [r1, #8]
{
 8003dec:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003dee:	401a      	ands	r2, r3
 8003df0:	2a01      	cmp	r2, #1
 8003df2:	d060      	beq.n	8003eb6 <HAL_SPI_IRQHandler+0xd6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003df4:	079a      	lsls	r2, r3, #30
 8003df6:	d501      	bpl.n	8003dfc <HAL_SPI_IRQHandler+0x1c>
 8003df8:	0602      	lsls	r2, r0, #24
 8003dfa:	d462      	bmi.n	8003ec2 <HAL_SPI_IRQHandler+0xe2>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003dfc:	22b0      	movs	r2, #176	; 0xb0
 8003dfe:	0052      	lsls	r2, r2, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e00:	4213      	tst	r3, r2
 8003e02:	d056      	beq.n	8003eb2 <HAL_SPI_IRQHandler+0xd2>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003e04:	0682      	lsls	r2, r0, #26
 8003e06:	d554      	bpl.n	8003eb2 <HAL_SPI_IRQHandler+0xd2>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e08:	065a      	lsls	r2, r3, #25
 8003e0a:	d50e      	bpl.n	8003e2a <HAL_SPI_IRQHandler+0x4a>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003e0c:	225d      	movs	r2, #93	; 0x5d
 8003e0e:	5ca2      	ldrb	r2, [r4, r2]
 8003e10:	2a03      	cmp	r2, #3
 8003e12:	d05e      	beq.n	8003ed2 <HAL_SPI_IRQHandler+0xf2>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003e14:	2504      	movs	r5, #4
 8003e16:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003e18:	432a      	orrs	r2, r5
 8003e1a:	6622      	str	r2, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	9200      	str	r2, [sp, #0]
 8003e20:	68ca      	ldr	r2, [r1, #12]
 8003e22:	9200      	str	r2, [sp, #0]
 8003e24:	688a      	ldr	r2, [r1, #8]
 8003e26:	9200      	str	r2, [sp, #0]
 8003e28:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003e2a:	069a      	lsls	r2, r3, #26
 8003e2c:	d50c      	bpl.n	8003e48 <HAL_SPI_IRQHandler+0x68>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003e2e:	2501      	movs	r5, #1
 8003e30:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003e32:	432a      	orrs	r2, r5
 8003e34:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003e36:	2200      	movs	r2, #0
 8003e38:	9202      	str	r2, [sp, #8]
 8003e3a:	688a      	ldr	r2, [r1, #8]
 8003e3c:	353f      	adds	r5, #63	; 0x3f
 8003e3e:	9202      	str	r2, [sp, #8]
 8003e40:	680a      	ldr	r2, [r1, #0]
 8003e42:	43aa      	bics	r2, r5
 8003e44:	600a      	str	r2, [r1, #0]
 8003e46:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003e48:	05db      	lsls	r3, r3, #23
 8003e4a:	d508      	bpl.n	8003e5e <HAL_SPI_IRQHandler+0x7e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003e4c:	2208      	movs	r2, #8
 8003e4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e50:	4313      	orrs	r3, r2
 8003e52:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003e54:	2300      	movs	r3, #0
 8003e56:	9303      	str	r3, [sp, #12]
 8003e58:	688b      	ldr	r3, [r1, #8]
 8003e5a:	9303      	str	r3, [sp, #12]
 8003e5c:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e5e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d026      	beq.n	8003eb2 <HAL_SPI_IRQHandler+0xd2>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003e64:	22e0      	movs	r2, #224	; 0xe0
 8003e66:	684b      	ldr	r3, [r1, #4]
 8003e68:	4393      	bics	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003e6c:	235d      	movs	r3, #93	; 0x5d
 8003e6e:	3adf      	subs	r2, #223	; 0xdf
 8003e70:	54e2      	strb	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003e72:	3b5a      	subs	r3, #90	; 0x5a
 8003e74:	4203      	tst	r3, r0
 8003e76:	d028      	beq.n	8003eca <HAL_SPI_IRQHandler+0xea>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e78:	684a      	ldr	r2, [r1, #4]
        if (hspi->hdmarx != NULL)
 8003e7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e7c:	439a      	bics	r2, r3
 8003e7e:	604a      	str	r2, [r1, #4]
        if (hspi->hdmarx != NULL)
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d009      	beq.n	8003e98 <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e84:	4b17      	ldr	r3, [pc, #92]	; (8003ee4 <HAL_SPI_IRQHandler+0x104>)
 8003e86:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e88:	f7fe fbaa 	bl	80025e0 <HAL_DMA_Abort_IT>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e90:	2240      	movs	r2, #64	; 0x40
 8003e92:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e94:	4313      	orrs	r3, r2
 8003e96:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003e98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	d009      	beq.n	8003eb2 <HAL_SPI_IRQHandler+0xd2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e9e:	4b11      	ldr	r3, [pc, #68]	; (8003ee4 <HAL_SPI_IRQHandler+0x104>)
 8003ea0:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003ea2:	f7fe fb9d 	bl	80025e0 <HAL_DMA_Abort_IT>
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_SPI_IRQHandler+0xd2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003eaa:	2240      	movs	r2, #64	; 0x40
 8003eac:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	6623      	str	r3, [r4, #96]	; 0x60
}
 8003eb2:	b005      	add	sp, #20
 8003eb4:	bd30      	pop	{r4, r5, pc}
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003eb6:	0642      	lsls	r2, r0, #25
 8003eb8:	d59c      	bpl.n	8003df4 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8003eba:	0020      	movs	r0, r4
 8003ebc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003ebe:	4798      	blx	r3
    return;
 8003ec0:	e7f7      	b.n	8003eb2 <HAL_SPI_IRQHandler+0xd2>
    hspi->TxISR(hspi);
 8003ec2:	0020      	movs	r0, r4
 8003ec4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003ec6:	4798      	blx	r3
    return;
 8003ec8:	e7f3      	b.n	8003eb2 <HAL_SPI_IRQHandler+0xd2>
        HAL_SPI_ErrorCallback(hspi);
 8003eca:	0020      	movs	r0, r4
 8003ecc:	f7ff ff86 	bl	8003ddc <HAL_SPI_ErrorCallback>
 8003ed0:	e7ef      	b.n	8003eb2 <HAL_SPI_IRQHandler+0xd2>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	68cb      	ldr	r3, [r1, #12]
 8003ed8:	9301      	str	r3, [sp, #4]
 8003eda:	688b      	ldr	r3, [r1, #8]
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	9b01      	ldr	r3, [sp, #4]
        return;
 8003ee0:	e7e7      	b.n	8003eb2 <HAL_SPI_IRQHandler+0xd2>
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	08003ee9 	.word	0x08003ee9

08003ee8 <SPI_DMAAbortOnError>:
  hspi->RxXferCount = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	2246      	movs	r2, #70	; 0x46
{
 8003eec:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003eee:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8003ef0:	5283      	strh	r3, [r0, r2]
  hspi->TxXferCount = 0U;
 8003ef2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8003ef4:	f7ff ff72 	bl	8003ddc <HAL_SPI_ErrorCallback>
}
 8003ef8:	bd10      	pop	{r4, pc}
 8003efa:	46c0      	nop			; (mov r8, r8)

08003efc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003efc:	2201      	movs	r2, #1
{
 8003efe:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f00:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f02:	6a03      	ldr	r3, [r0, #32]
 8003f04:	4393      	bics	r3, r2
 8003f06:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003f08:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003f0a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003f0c:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f0e:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f10:	680d      	ldr	r5, [r1, #0]
 8003f12:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f14:	2502      	movs	r5, #2
 8003f16:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f18:	688d      	ldr	r5, [r1, #8]
 8003f1a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f1c:	4d0d      	ldr	r5, [pc, #52]	; (8003f54 <TIM_OC1_SetConfig+0x58>)
 8003f1e:	42a8      	cmp	r0, r5
 8003f20:	d005      	beq.n	8003f2e <TIM_OC1_SetConfig+0x32>
 8003f22:	4d0d      	ldr	r5, [pc, #52]	; (8003f58 <TIM_OC1_SetConfig+0x5c>)
 8003f24:	42a8      	cmp	r0, r5
 8003f26:	d002      	beq.n	8003f2e <TIM_OC1_SetConfig+0x32>
 8003f28:	4d0c      	ldr	r5, [pc, #48]	; (8003f5c <TIM_OC1_SetConfig+0x60>)
 8003f2a:	42a8      	cmp	r0, r5
 8003f2c:	d10b      	bne.n	8003f46 <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f2e:	2508      	movs	r5, #8
 8003f30:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f32:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f34:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8003f36:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f38:	2504      	movs	r5, #4
 8003f3a:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f3c:	4d08      	ldr	r5, [pc, #32]	; (8003f60 <TIM_OC1_SetConfig+0x64>)
 8003f3e:	4025      	ands	r5, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f40:	694c      	ldr	r4, [r1, #20]
 8003f42:	4334      	orrs	r4, r6
 8003f44:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f46:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f48:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f4a:	684a      	ldr	r2, [r1, #4]
 8003f4c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4e:	6203      	str	r3, [r0, #32]
}
 8003f50:	bd70      	pop	{r4, r5, r6, pc}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40014400 	.word	0x40014400
 8003f5c:	40014800 	.word	0x40014800
 8003f60:	fffffcff 	.word	0xfffffcff

08003f64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f64:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f66:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f68:	6a03      	ldr	r3, [r0, #32]
 8003f6a:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <TIM_OC3_SetConfig+0x60>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003f70:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003f72:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003f74:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f76:	43ab      	bics	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f78:	680d      	ldr	r5, [r1, #0]
 8003f7a:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f7c:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <TIM_OC3_SetConfig+0x64>)
 8003f7e:	401a      	ands	r2, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f80:	688b      	ldr	r3, [r1, #8]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f86:	4a11      	ldr	r2, [pc, #68]	; (8003fcc <TIM_OC3_SetConfig+0x68>)
 8003f88:	4290      	cmp	r0, r2
 8003f8a:	d012      	beq.n	8003fb2 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8c:	4a10      	ldr	r2, [pc, #64]	; (8003fd0 <TIM_OC3_SetConfig+0x6c>)
 8003f8e:	4290      	cmp	r0, r2
 8003f90:	d002      	beq.n	8003f98 <TIM_OC3_SetConfig+0x34>
 8003f92:	4a10      	ldr	r2, [pc, #64]	; (8003fd4 <TIM_OC3_SetConfig+0x70>)
 8003f94:	4290      	cmp	r0, r2
 8003f96:	d106      	bne.n	8003fa6 <TIM_OC3_SetConfig+0x42>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f98:	4a0f      	ldr	r2, [pc, #60]	; (8003fd8 <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f9a:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f9c:	4022      	ands	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f9e:	698c      	ldr	r4, [r1, #24]
 8003fa0:	4334      	orrs	r4, r6
 8003fa2:	0124      	lsls	r4, r4, #4
 8003fa4:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fa6:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003fa8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003faa:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003fac:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fae:	6203      	str	r3, [r0, #32]
}
 8003fb0:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <TIM_OC3_SetConfig+0x78>)
 8003fb4:	401a      	ands	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fb6:	68cb      	ldr	r3, [r1, #12]
 8003fb8:	021b      	lsls	r3, r3, #8
 8003fba:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fbc:	4a08      	ldr	r2, [pc, #32]	; (8003fe0 <TIM_OC3_SetConfig+0x7c>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	e7ea      	b.n	8003f98 <TIM_OC3_SetConfig+0x34>
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	fffffeff 	.word	0xfffffeff
 8003fc8:	fffffdff 	.word	0xfffffdff
 8003fcc:	40012c00 	.word	0x40012c00
 8003fd0:	40014400 	.word	0x40014400
 8003fd4:	40014800 	.word	0x40014800
 8003fd8:	ffffcfff 	.word	0xffffcfff
 8003fdc:	fffff7ff 	.word	0xfffff7ff
 8003fe0:	fffffbff 	.word	0xfffffbff

08003fe4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fe4:	6a03      	ldr	r3, [r0, #32]
 8003fe6:	4a12      	ldr	r2, [pc, #72]	; (8004030 <TIM_OC4_SetConfig+0x4c>)
{
 8003fe8:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fea:	4013      	ands	r3, r2
 8003fec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fee:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ff0:	4a10      	ldr	r2, [pc, #64]	; (8004034 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8003ff2:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003ff4:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ff6:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ff8:	680a      	ldr	r2, [r1, #0]
 8003ffa:	0212      	lsls	r2, r2, #8
 8003ffc:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <TIM_OC4_SetConfig+0x54>)
 8004000:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004002:	688b      	ldr	r3, [r1, #8]
 8004004:	031b      	lsls	r3, r3, #12
 8004006:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004008:	4c0c      	ldr	r4, [pc, #48]	; (800403c <TIM_OC4_SetConfig+0x58>)
 800400a:	42a0      	cmp	r0, r4
 800400c:	d005      	beq.n	800401a <TIM_OC4_SetConfig+0x36>
 800400e:	4c0c      	ldr	r4, [pc, #48]	; (8004040 <TIM_OC4_SetConfig+0x5c>)
 8004010:	42a0      	cmp	r0, r4
 8004012:	d002      	beq.n	800401a <TIM_OC4_SetConfig+0x36>
 8004014:	4c0b      	ldr	r4, [pc, #44]	; (8004044 <TIM_OC4_SetConfig+0x60>)
 8004016:	42a0      	cmp	r0, r4
 8004018:	d104      	bne.n	8004024 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800401a:	4c0b      	ldr	r4, [pc, #44]	; (8004048 <TIM_OC4_SetConfig+0x64>)
 800401c:	402c      	ands	r4, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800401e:	694d      	ldr	r5, [r1, #20]
 8004020:	01ad      	lsls	r5, r5, #6
 8004022:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004024:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004026:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004028:	684a      	ldr	r2, [r1, #4]
 800402a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402c:	6203      	str	r3, [r0, #32]
}
 800402e:	bd30      	pop	{r4, r5, pc}
 8004030:	ffffefff 	.word	0xffffefff
 8004034:	ffff8cff 	.word	0xffff8cff
 8004038:	ffffdfff 	.word	0xffffdfff
 800403c:	40012c00 	.word	0x40012c00
 8004040:	40014400 	.word	0x40014400
 8004044:	40014800 	.word	0x40014800
 8004048:	ffffbfff 	.word	0xffffbfff

0800404c <TIM_SlaveTimer_SetConfig.constprop.0>:

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800404c:	2370      	movs	r3, #112	; 0x70
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
 800404e:	b530      	push	{r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 8004050:	6804      	ldr	r4, [r0, #0]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004052:	2007      	movs	r0, #7
  tmpsmcr = htim->Instance->SMCR;
 8004054:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004056:	439a      	bics	r2, r3
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004058:	684b      	ldr	r3, [r1, #4]
 800405a:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 800405c:	4382      	bics	r2, r0
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800405e:	6808      	ldr	r0, [r1, #0]
 8004060:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004062:	60a2      	str	r2, [r4, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004064:	2b50      	cmp	r3, #80	; 0x50
 8004066:	d026      	beq.n	80040b6 <TIM_SlaveTimer_SetConfig.constprop.0+0x6a>
 8004068:	d910      	bls.n	800408c <TIM_SlaveTimer_SetConfig.constprop.0+0x40>
 800406a:	2b60      	cmp	r3, #96	; 0x60
 800406c:	d036      	beq.n	80040dc <TIM_SlaveTimer_SetConfig.constprop.0+0x90>
 800406e:	2b70      	cmp	r3, #112	; 0x70
 8004070:	d159      	bne.n	8004126 <TIM_SlaveTimer_SetConfig.constprop.0+0xda>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004072:	68a2      	ldr	r2, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004074:	4b2d      	ldr	r3, [pc, #180]	; (800412c <TIM_SlaveTimer_SetConfig.constprop.0+0xe0>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004076:	6888      	ldr	r0, [r1, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004078:	401a      	ands	r2, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800407a:	68cb      	ldr	r3, [r1, #12]
 800407c:	6909      	ldr	r1, [r1, #16]
 800407e:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 8004080:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004082:	0209      	lsls	r1, r1, #8
 8004084:	430b      	orrs	r3, r1
 8004086:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004088:	60a3      	str	r3, [r4, #8]
}
 800408a:	bd30      	pop	{r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 800408c:	2b40      	cmp	r3, #64	; 0x40
 800408e:	d039      	beq.n	8004104 <TIM_SlaveTimer_SetConfig.constprop.0+0xb8>
 8004090:	2001      	movs	r0, #1
 8004092:	2b40      	cmp	r3, #64	; 0x40
 8004094:	d8f9      	bhi.n	800408a <TIM_SlaveTimer_SetConfig.constprop.0+0x3e>
 8004096:	2b20      	cmp	r3, #32
 8004098:	d00b      	beq.n	80040b2 <TIM_SlaveTimer_SetConfig.constprop.0+0x66>
 800409a:	d904      	bls.n	80040a6 <TIM_SlaveTimer_SetConfig.constprop.0+0x5a>
 800409c:	3b30      	subs	r3, #48	; 0x30
 800409e:	1e5a      	subs	r2, r3, #1
 80040a0:	4193      	sbcs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;
 80040a2:	b2d8      	uxtb	r0, r3
 80040a4:	e7f1      	b.n	800408a <TIM_SlaveTimer_SetConfig.constprop.0+0x3e>
  switch (sSlaveConfig->InputTrigger)
 80040a6:	2210      	movs	r2, #16
 80040a8:	4393      	bics	r3, r2
 80040aa:	1e5a      	subs	r2, r3, #1
 80040ac:	4193      	sbcs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;
 80040ae:	b2d8      	uxtb	r0, r3
 80040b0:	e7eb      	b.n	800408a <TIM_SlaveTimer_SetConfig.constprop.0+0x3e>
 80040b2:	2000      	movs	r0, #0
 80040b4:	e7e9      	b.n	800408a <TIM_SlaveTimer_SetConfig.constprop.0+0x3e>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b6:	2501      	movs	r5, #1
                               sSlaveConfig->TriggerPolarity,
 80040b8:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 80040ba:	690b      	ldr	r3, [r1, #16]
  tmpccer = TIMx->CCER;
 80040bc:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040be:	6a20      	ldr	r0, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040c0:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040c2:	43a8      	bics	r0, r5
 80040c4:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c6:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040c8:	35ef      	adds	r5, #239	; 0xef
 80040ca:	43a8      	bics	r0, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040cc:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ce:	200a      	movs	r0, #10
 80040d0:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 80040d2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80040d4:	61a3      	str	r3, [r4, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80040d6:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 80040d8:	6222      	str	r2, [r4, #32]
}
 80040da:	e7d6      	b.n	800408a <TIM_SlaveTimer_SetConfig.constprop.0+0x3e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040dc:	2010      	movs	r0, #16
                               sSlaveConfig->TriggerPolarity,
 80040de:	688b      	ldr	r3, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 80040e0:	690a      	ldr	r2, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e2:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040e4:	4d12      	ldr	r5, [pc, #72]	; (8004130 <TIM_SlaveTimer_SetConfig.constprop.0+0xe4>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e6:	4381      	bics	r1, r0
 80040e8:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ea:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040ec:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ee:	4028      	ands	r0, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040f0:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040f2:	20a0      	movs	r0, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80040f4:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040f6:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040f8:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 80040fa:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 80040fc:	61a2      	str	r2, [r4, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8004100:	6223      	str	r3, [r4, #32]
}
 8004102:	e7c2      	b.n	800408a <TIM_SlaveTimer_SetConfig.constprop.0+0x3e>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004104:	2805      	cmp	r0, #5
 8004106:	d00e      	beq.n	8004126 <TIM_SlaveTimer_SetConfig.constprop.0+0xda>
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004108:	2201      	movs	r2, #1
      tmpccer = htim->Instance->CCER;
 800410a:	6a20      	ldr	r0, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800410c:	6a23      	ldr	r3, [r4, #32]
 800410e:	4393      	bics	r3, r2
 8004110:	6223      	str	r3, [r4, #32]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004112:	23f0      	movs	r3, #240	; 0xf0
      tmpccmr1 = htim->Instance->CCMR1;
 8004114:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004116:	439a      	bics	r2, r3
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004118:	690b      	ldr	r3, [r1, #16]
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 = tmpccmr1;
 800411e:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8004120:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8004122:	2000      	movs	r0, #0
      break;
 8004124:	e7b1      	b.n	800408a <TIM_SlaveTimer_SetConfig.constprop.0+0x3e>
        return HAL_ERROR;
 8004126:	2001      	movs	r0, #1
 8004128:	e7af      	b.n	800408a <TIM_SlaveTimer_SetConfig.constprop.0+0x3e>
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	ffff00ff 	.word	0xffff00ff
 8004130:	ffff0fff 	.word	0xffff0fff

08004134 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004134:	223d      	movs	r2, #61	; 0x3d
 8004136:	5c81      	ldrb	r1, [r0, r2]
{
 8004138:	0003      	movs	r3, r0
    return HAL_ERROR;
 800413a:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 800413c:	2901      	cmp	r1, #1
 800413e:	d110      	bne.n	8004162 <HAL_TIM_Base_Start+0x2e>
  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	3101      	adds	r1, #1
 8004142:	5499      	strb	r1, [r3, r2]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a0e      	ldr	r2, [pc, #56]	; (8004180 <HAL_TIM_Base_Start+0x4c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00b      	beq.n	8004164 <HAL_TIM_Base_Start+0x30>
 800414c:	2280      	movs	r2, #128	; 0x80
 800414e:	05d2      	lsls	r2, r2, #23
 8004150:	4293      	cmp	r3, r2
 8004152:	d007      	beq.n	8004164 <HAL_TIM_Base_Start+0x30>
 8004154:	4a0b      	ldr	r2, [pc, #44]	; (8004184 <HAL_TIM_Base_Start+0x50>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <HAL_TIM_Base_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	4302      	orrs	r2, r0
  return HAL_OK;
 800415e:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004160:	601a      	str	r2, [r3, #0]
}
 8004162:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004164:	2207      	movs	r2, #7
 8004166:	6899      	ldr	r1, [r3, #8]
 8004168:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416a:	2a06      	cmp	r2, #6
 800416c:	d005      	beq.n	800417a <HAL_TIM_Base_Start+0x46>
      __HAL_TIM_ENABLE(htim);
 800416e:	2101      	movs	r1, #1
 8004170:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8004172:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	e7f3      	b.n	8004162 <HAL_TIM_Base_Start+0x2e>
  return HAL_OK;
 800417a:	2000      	movs	r0, #0
 800417c:	e7f1      	b.n	8004162 <HAL_TIM_Base_Start+0x2e>
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	40012c00 	.word	0x40012c00
 8004184:	40000400 	.word	0x40000400

08004188 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004188:	223d      	movs	r2, #61	; 0x3d
 800418a:	5c81      	ldrb	r1, [r0, r2]
{
 800418c:	0003      	movs	r3, r0
    return HAL_ERROR;
 800418e:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004190:	2901      	cmp	r1, #1
 8004192:	d113      	bne.n	80041bc <HAL_TIM_Base_Start_IT+0x34>
  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	3101      	adds	r1, #1
 8004196:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	4302      	orrs	r2, r0
 800419e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a0:	4a0d      	ldr	r2, [pc, #52]	; (80041d8 <HAL_TIM_Base_Start_IT+0x50>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00b      	beq.n	80041be <HAL_TIM_Base_Start_IT+0x36>
 80041a6:	2280      	movs	r2, #128	; 0x80
 80041a8:	05d2      	lsls	r2, r2, #23
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d007      	beq.n	80041be <HAL_TIM_Base_Start_IT+0x36>
 80041ae:	4a0b      	ldr	r2, [pc, #44]	; (80041dc <HAL_TIM_Base_Start_IT+0x54>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d004      	beq.n	80041be <HAL_TIM_Base_Start_IT+0x36>
    __HAL_TIM_ENABLE(htim);
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	4302      	orrs	r2, r0
  return HAL_OK;
 80041b8:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80041ba:	601a      	str	r2, [r3, #0]
}
 80041bc:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041be:	2207      	movs	r2, #7
 80041c0:	6899      	ldr	r1, [r3, #8]
 80041c2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c4:	2a06      	cmp	r2, #6
 80041c6:	d005      	beq.n	80041d4 <HAL_TIM_Base_Start_IT+0x4c>
      __HAL_TIM_ENABLE(htim);
 80041c8:	2101      	movs	r1, #1
 80041ca:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80041cc:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80041ce:	430a      	orrs	r2, r1
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	e7f3      	b.n	80041bc <HAL_TIM_Base_Start_IT+0x34>
  return HAL_OK;
 80041d4:	2000      	movs	r0, #0
 80041d6:	e7f1      	b.n	80041bc <HAL_TIM_Base_Start_IT+0x34>
 80041d8:	40012c00 	.word	0x40012c00
 80041dc:	40000400 	.word	0x40000400

080041e0 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041e0:	2900      	cmp	r1, #0
 80041e2:	d126      	bne.n	8004232 <HAL_TIM_OC_Start+0x52>
 80041e4:	233e      	movs	r3, #62	; 0x3e
 80041e6:	5cc2      	ldrb	r2, [r0, r3]
 80041e8:	2a01      	cmp	r2, #1
 80041ea:	d12a      	bne.n	8004242 <HAL_TIM_OC_Start+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ec:	2202      	movs	r2, #2
 80041ee:	54c2      	strb	r2, [r0, r3]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041f0:	221f      	movs	r2, #31
 80041f2:	4011      	ands	r1, r2
 80041f4:	3a1e      	subs	r2, #30
 80041f6:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041f8:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041fa:	6a19      	ldr	r1, [r3, #32]
 80041fc:	4391      	bics	r1, r2
 80041fe:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004200:	6a19      	ldr	r1, [r3, #32]
 8004202:	430a      	orrs	r2, r1
 8004204:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004206:	4a23      	ldr	r2, [pc, #140]	; (8004294 <HAL_TIM_OC_Start+0xb4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d024      	beq.n	8004256 <HAL_TIM_OC_Start+0x76>
 800420c:	4a22      	ldr	r2, [pc, #136]	; (8004298 <HAL_TIM_OC_Start+0xb8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d02d      	beq.n	800426e <HAL_TIM_OC_Start+0x8e>
 8004212:	4a22      	ldr	r2, [pc, #136]	; (800429c <HAL_TIM_OC_Start+0xbc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d02a      	beq.n	800426e <HAL_TIM_OC_Start+0x8e>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004218:	2280      	movs	r2, #128	; 0x80
 800421a:	05d2      	lsls	r2, r2, #23
 800421c:	4293      	cmp	r3, r2
 800421e:	d01f      	beq.n	8004260 <HAL_TIM_OC_Start+0x80>
 8004220:	4a1f      	ldr	r2, [pc, #124]	; (80042a0 <HAL_TIM_OC_Start+0xc0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d01c      	beq.n	8004260 <HAL_TIM_OC_Start+0x80>
    __HAL_TIM_ENABLE(htim);
 8004226:	2101      	movs	r1, #1
  return HAL_OK;
 8004228:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	601a      	str	r2, [r3, #0]
}
 8004230:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004232:	2904      	cmp	r1, #4
 8004234:	d021      	beq.n	800427a <HAL_TIM_OC_Start+0x9a>
 8004236:	2908      	cmp	r1, #8
 8004238:	d027      	beq.n	800428a <HAL_TIM_OC_Start+0xaa>
 800423a:	2341      	movs	r3, #65	; 0x41
 800423c:	5cc2      	ldrb	r2, [r0, r3]
 800423e:	2a01      	cmp	r2, #1
 8004240:	d001      	beq.n	8004246 <HAL_TIM_OC_Start+0x66>
    return HAL_ERROR;
 8004242:	2001      	movs	r0, #1
 8004244:	e7f4      	b.n	8004230 <HAL_TIM_OC_Start+0x50>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004246:	2904      	cmp	r1, #4
 8004248:	d01b      	beq.n	8004282 <HAL_TIM_OC_Start+0xa2>
 800424a:	2908      	cmp	r1, #8
 800424c:	d1ce      	bne.n	80041ec <HAL_TIM_OC_Start+0xc>
 800424e:	2340      	movs	r3, #64	; 0x40
 8004250:	2202      	movs	r2, #2
 8004252:	54c2      	strb	r2, [r0, r3]
 8004254:	e7cc      	b.n	80041f0 <HAL_TIM_OC_Start+0x10>
    __HAL_TIM_MOE_ENABLE(htim);
 8004256:	2280      	movs	r2, #128	; 0x80
 8004258:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800425a:	0212      	lsls	r2, r2, #8
 800425c:	430a      	orrs	r2, r1
 800425e:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004260:	2207      	movs	r2, #7
 8004262:	6899      	ldr	r1, [r3, #8]
 8004264:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004266:	2a06      	cmp	r2, #6
 8004268:	d1dd      	bne.n	8004226 <HAL_TIM_OC_Start+0x46>
  return HAL_OK;
 800426a:	2000      	movs	r0, #0
 800426c:	e7e0      	b.n	8004230 <HAL_TIM_OC_Start+0x50>
    __HAL_TIM_MOE_ENABLE(htim);
 800426e:	2280      	movs	r2, #128	; 0x80
 8004270:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004272:	0212      	lsls	r2, r2, #8
 8004274:	430a      	orrs	r2, r1
 8004276:	645a      	str	r2, [r3, #68]	; 0x44
 8004278:	e7ce      	b.n	8004218 <HAL_TIM_OC_Start+0x38>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800427a:	233f      	movs	r3, #63	; 0x3f
 800427c:	5cc3      	ldrb	r3, [r0, r3]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d1df      	bne.n	8004242 <HAL_TIM_OC_Start+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004282:	233f      	movs	r3, #63	; 0x3f
 8004284:	2202      	movs	r2, #2
 8004286:	54c2      	strb	r2, [r0, r3]
 8004288:	e7b2      	b.n	80041f0 <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800428a:	2340      	movs	r3, #64	; 0x40
 800428c:	5cc3      	ldrb	r3, [r0, r3]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d0dd      	beq.n	800424e <HAL_TIM_OC_Start+0x6e>
 8004292:	e7d6      	b.n	8004242 <HAL_TIM_OC_Start+0x62>
 8004294:	40012c00 	.word	0x40012c00
 8004298:	40014400 	.word	0x40014400
 800429c:	40014800 	.word	0x40014800
 80042a0:	40000400 	.word	0x40000400

080042a4 <HAL_TIM_PWM_MspInit>:
 80042a4:	4770      	bx	lr
 80042a6:	46c0      	nop			; (mov r8, r8)

080042a8 <HAL_TIM_PWM_Start>:
 80042a8:	b510      	push	{r4, lr}
 80042aa:	f7ff ff99 	bl	80041e0 <HAL_TIM_OC_Start>
 80042ae:	bd10      	pop	{r4, pc}

080042b0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80042b0:	233c      	movs	r3, #60	; 0x3c
{
 80042b2:	b570      	push	{r4, r5, r6, lr}
 80042b4:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80042b6:	5cc0      	ldrb	r0, [r0, r3]
 80042b8:	2801      	cmp	r0, #1
 80042ba:	d100      	bne.n	80042be <HAL_TIM_ConfigClockSource+0xe>
 80042bc:	e075      	b.n	80043aa <HAL_TIM_ConfigClockSource+0xfa>
 80042be:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80042c0:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80042c2:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80042c4:	3301      	adds	r3, #1
 80042c6:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 80042c8:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ca:	4d52      	ldr	r5, [pc, #328]	; (8004414 <HAL_TIM_ConfigClockSource+0x164>)
  tmpsmcr = htim->Instance->SMCR;
 80042cc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ce:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80042d0:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80042d2:	680b      	ldr	r3, [r1, #0]
 80042d4:	2b60      	cmp	r3, #96	; 0x60
 80042d6:	d100      	bne.n	80042da <HAL_TIM_ConfigClockSource+0x2a>
 80042d8:	e069      	b.n	80043ae <HAL_TIM_ConfigClockSource+0xfe>
 80042da:	d823      	bhi.n	8004324 <HAL_TIM_ConfigClockSource+0x74>
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	d100      	bne.n	80042e2 <HAL_TIM_ConfigClockSource+0x32>
 80042e0:	e07f      	b.n	80043e2 <HAL_TIM_ConfigClockSource+0x132>
 80042e2:	d952      	bls.n	800438a <HAL_TIM_ConfigClockSource+0xda>
 80042e4:	2b50      	cmp	r3, #80	; 0x50
 80042e6:	d13b      	bne.n	8004360 <HAL_TIM_ConfigClockSource+0xb0>
                               sClockSourceConfig->ClockPolarity,
 80042e8:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80042ea:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80042ec:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ee:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042f0:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f2:	43a6      	bics	r6, r4
 80042f4:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042f6:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80042f8:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042fa:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042fc:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042fe:	240a      	movs	r4, #10
 8004300:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8004302:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8004304:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004306:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004308:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800430a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800430c:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800430e:	3919      	subs	r1, #25
 8004310:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004312:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004314:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004316:	233d      	movs	r3, #61	; 0x3d
 8004318:	2101      	movs	r1, #1
 800431a:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 800431c:	2100      	movs	r1, #0
 800431e:	3b01      	subs	r3, #1
 8004320:	54d1      	strb	r1, [r2, r3]
}
 8004322:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004324:	2480      	movs	r4, #128	; 0x80
 8004326:	0164      	lsls	r4, r4, #5
 8004328:	42a3      	cmp	r3, r4
 800432a:	d03c      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0xf6>
 800432c:	2480      	movs	r4, #128	; 0x80
 800432e:	01a4      	lsls	r4, r4, #6
 8004330:	42a3      	cmp	r3, r4
 8004332:	d117      	bne.n	8004364 <HAL_TIM_ConfigClockSource+0xb4>
  tmpsmcr = TIMx->SMCR;
 8004334:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004336:	4b38      	ldr	r3, [pc, #224]	; (8004418 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004338:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800433a:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800433c:	688b      	ldr	r3, [r1, #8]
 800433e:	68c9      	ldr	r1, [r1, #12]
 8004340:	432b      	orrs	r3, r5
 8004342:	0209      	lsls	r1, r1, #8
 8004344:	430b      	orrs	r3, r1
 8004346:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8004348:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800434a:	2380      	movs	r3, #128	; 0x80
 800434c:	6881      	ldr	r1, [r0, #8]
 800434e:	01db      	lsls	r3, r3, #7
 8004350:	430b      	orrs	r3, r1
 8004352:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004354:	2000      	movs	r0, #0
      break;
 8004356:	e7de      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8004358:	2110      	movs	r1, #16
 800435a:	001c      	movs	r4, r3
 800435c:	438c      	bics	r4, r1
 800435e:	d019      	beq.n	8004394 <HAL_TIM_ConfigClockSource+0xe4>
 8004360:	2001      	movs	r0, #1
 8004362:	e7d8      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x66>
 8004364:	2b70      	cmp	r3, #112	; 0x70
 8004366:	d1fb      	bne.n	8004360 <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr = TIMx->SMCR;
 8004368:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800436a:	4b2b      	ldr	r3, [pc, #172]	; (8004418 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800436c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800436e:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004370:	688b      	ldr	r3, [r1, #8]
 8004372:	68c9      	ldr	r1, [r1, #12]
 8004374:	432b      	orrs	r3, r5
 8004376:	0209      	lsls	r1, r1, #8
 8004378:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800437a:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800437c:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 800437e:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004380:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004382:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8004384:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004386:	2000      	movs	r0, #0
      break;
 8004388:	e7c5      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800438a:	2b20      	cmp	r3, #32
 800438c:	d002      	beq.n	8004394 <HAL_TIM_ConfigClockSource+0xe4>
 800438e:	d9e3      	bls.n	8004358 <HAL_TIM_ConfigClockSource+0xa8>
 8004390:	2b30      	cmp	r3, #48	; 0x30
 8004392:	d1e5      	bne.n	8004360 <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr &= ~TIM_SMCR_TS;
 8004394:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004396:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004398:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800439a:	430b      	orrs	r3, r1
 800439c:	2107      	movs	r1, #7
 800439e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80043a0:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80043a2:	2000      	movs	r0, #0
}
 80043a4:	e7b7      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 80043a6:	2000      	movs	r0, #0
 80043a8:	e7b5      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 80043aa:	2002      	movs	r0, #2
 80043ac:	e7b9      	b.n	8004322 <HAL_TIM_ConfigClockSource+0x72>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ae:	2510      	movs	r5, #16
 80043b0:	6a04      	ldr	r4, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80043b2:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b4:	43ac      	bics	r4, r5
                               sClockSourceConfig->ClockFilter);
 80043b6:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ba:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043bc:	4e17      	ldr	r6, [pc, #92]	; (800441c <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043be:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043c0:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043c2:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043c4:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80043c6:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80043c8:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ca:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043cc:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	4323      	orrs	r3, r4
  TIMx->CCER = tmpccer;
 80043d2:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80043d4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80043d6:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043d8:	3909      	subs	r1, #9
 80043da:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80043dc:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80043de:	2000      	movs	r0, #0
}
 80043e0:	e799      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 80043e2:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80043e4:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80043e6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e8:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043ea:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ec:	43a6      	bics	r6, r4
 80043ee:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043f0:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80043f2:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043f4:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043f6:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043f8:	240a      	movs	r4, #10
 80043fa:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80043fc:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004400:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004402:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004404:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004406:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004408:	3929      	subs	r1, #41	; 0x29
 800440a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800440c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800440e:	2000      	movs	r0, #0
}
 8004410:	e781      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x66>
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	ffff0088 	.word	0xffff0088
 8004418:	ffff00ff 	.word	0xffff00ff
 800441c:	ffff0fff 	.word	0xffff0fff

08004420 <HAL_TIM_SlaveConfigSynchro>:
{
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004422:	253c      	movs	r5, #60	; 0x3c
 8004424:	5d43      	ldrb	r3, [r0, r5]
{
 8004426:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8004428:	2b01      	cmp	r3, #1
 800442a:	d019      	beq.n	8004460 <HAL_TIM_SlaveConfigSynchro+0x40>
 800442c:	2701      	movs	r7, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800442e:	263d      	movs	r6, #61	; 0x3d
 8004430:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8004432:	5547      	strb	r7, [r0, r5]
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	5583      	strb	r3, [r0, r6]
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004436:	f7ff fe09 	bl	800404c <TIM_SlaveTimer_SetConfig.constprop.0>
 800443a:	2800      	cmp	r0, #0
 800443c:	d10b      	bne.n	8004456 <HAL_TIM_SlaveConfigSynchro+0x36>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800443e:	2140      	movs	r1, #64	; 0x40
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	438a      	bics	r2, r1
 8004446:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	4906      	ldr	r1, [pc, #24]	; (8004464 <HAL_TIM_SlaveConfigSynchro+0x44>)
 800444c:	400a      	ands	r2, r1
 800444e:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004450:	55a7      	strb	r7, [r4, r6]
  __HAL_UNLOCK(htim);
 8004452:	5560      	strb	r0, [r4, r5]
}
 8004454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(htim);
 8004456:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8004458:	55a7      	strb	r7, [r4, r6]
    return HAL_ERROR;
 800445a:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 800445c:	5563      	strb	r3, [r4, r5]
    return HAL_ERROR;
 800445e:	e7f9      	b.n	8004454 <HAL_TIM_SlaveConfigSynchro+0x34>
  __HAL_LOCK(htim);
 8004460:	2002      	movs	r0, #2
 8004462:	e7f7      	b.n	8004454 <HAL_TIM_SlaveConfigSynchro+0x34>
 8004464:	ffffbfff 	.word	0xffffbfff

08004468 <HAL_TIM_OC_DelayElapsedCallback>:
 8004468:	4770      	bx	lr
 800446a:	46c0      	nop			; (mov r8, r8)

0800446c <HAL_TIM_IC_CaptureCallback>:
 800446c:	4770      	bx	lr
 800446e:	46c0      	nop			; (mov r8, r8)

08004470 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004470:	4770      	bx	lr
 8004472:	46c0      	nop			; (mov r8, r8)

08004474 <HAL_TIM_TriggerCallback>:
 8004474:	4770      	bx	lr
 8004476:	46c0      	nop			; (mov r8, r8)

08004478 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004478:	2202      	movs	r2, #2
 800447a:	6803      	ldr	r3, [r0, #0]
{
 800447c:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800447e:	6919      	ldr	r1, [r3, #16]
{
 8004480:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004482:	420a      	tst	r2, r1
 8004484:	d002      	beq.n	800448c <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004486:	68d9      	ldr	r1, [r3, #12]
 8004488:	420a      	tst	r2, r1
 800448a:	d165      	bne.n	8004558 <HAL_TIM_IRQHandler+0xe0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800448c:	2204      	movs	r2, #4
 800448e:	6919      	ldr	r1, [r3, #16]
 8004490:	420a      	tst	r2, r1
 8004492:	d002      	beq.n	800449a <HAL_TIM_IRQHandler+0x22>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004494:	68d9      	ldr	r1, [r3, #12]
 8004496:	420a      	tst	r2, r1
 8004498:	d14b      	bne.n	8004532 <HAL_TIM_IRQHandler+0xba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800449a:	2208      	movs	r2, #8
 800449c:	6919      	ldr	r1, [r3, #16]
 800449e:	420a      	tst	r2, r1
 80044a0:	d002      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x30>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044a2:	68d9      	ldr	r1, [r3, #12]
 80044a4:	420a      	tst	r2, r1
 80044a6:	d133      	bne.n	8004510 <HAL_TIM_IRQHandler+0x98>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044a8:	2210      	movs	r2, #16
 80044aa:	6919      	ldr	r1, [r3, #16]
 80044ac:	420a      	tst	r2, r1
 80044ae:	d002      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x3e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044b0:	68d9      	ldr	r1, [r3, #12]
 80044b2:	420a      	tst	r2, r1
 80044b4:	d11c      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x78>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044b6:	2201      	movs	r2, #1
 80044b8:	6919      	ldr	r1, [r3, #16]
 80044ba:	420a      	tst	r2, r1
 80044bc:	d002      	beq.n	80044c4 <HAL_TIM_IRQHandler+0x4c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044be:	68d9      	ldr	r1, [r3, #12]
 80044c0:	420a      	tst	r2, r1
 80044c2:	d15c      	bne.n	800457e <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044c4:	2280      	movs	r2, #128	; 0x80
 80044c6:	6919      	ldr	r1, [r3, #16]
 80044c8:	420a      	tst	r2, r1
 80044ca:	d002      	beq.n	80044d2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044cc:	68d9      	ldr	r1, [r3, #12]
 80044ce:	420a      	tst	r2, r1
 80044d0:	d15c      	bne.n	800458c <HAL_TIM_IRQHandler+0x114>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044d2:	2240      	movs	r2, #64	; 0x40
 80044d4:	6919      	ldr	r1, [r3, #16]
 80044d6:	420a      	tst	r2, r1
 80044d8:	d002      	beq.n	80044e0 <HAL_TIM_IRQHandler+0x68>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044da:	68d9      	ldr	r1, [r3, #12]
 80044dc:	420a      	tst	r2, r1
 80044de:	d15d      	bne.n	800459c <HAL_TIM_IRQHandler+0x124>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044e0:	2220      	movs	r2, #32
 80044e2:	6919      	ldr	r1, [r3, #16]
 80044e4:	420a      	tst	r2, r1
 80044e6:	d002      	beq.n	80044ee <HAL_TIM_IRQHandler+0x76>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044e8:	68d9      	ldr	r1, [r3, #12]
 80044ea:	420a      	tst	r2, r1
 80044ec:	d141      	bne.n	8004572 <HAL_TIM_IRQHandler+0xfa>
}
 80044ee:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044f0:	3a21      	subs	r2, #33	; 0x21
 80044f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044f4:	3219      	adds	r2, #25
 80044f6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044f8:	69da      	ldr	r2, [r3, #28]
 80044fa:	23c0      	movs	r3, #192	; 0xc0
 80044fc:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80044fe:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004500:	421a      	tst	r2, r3
 8004502:	d05e      	beq.n	80045c2 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004504:	f7ff ffb2 	bl	800446c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004508:	2300      	movs	r3, #0
 800450a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	e7d2      	b.n	80044b6 <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004510:	3a11      	subs	r2, #17
 8004512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004514:	320d      	adds	r2, #13
 8004516:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004518:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800451a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800451c:	079b      	lsls	r3, r3, #30
 800451e:	d14d      	bne.n	80045bc <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004520:	f7ff ffa2 	bl	8004468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004524:	0020      	movs	r0, r4
 8004526:	f7ff ffa3 	bl	8004470 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452a:	2300      	movs	r3, #0
 800452c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	e7ba      	b.n	80044a8 <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004532:	3a09      	subs	r2, #9
 8004534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004536:	3207      	adds	r2, #7
 8004538:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800453a:	699a      	ldr	r2, [r3, #24]
 800453c:	23c0      	movs	r3, #192	; 0xc0
 800453e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004540:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004542:	421a      	tst	r2, r3
 8004544:	d137      	bne.n	80045b6 <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004546:	f7ff ff8f 	bl	8004468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454a:	0020      	movs	r0, r4
 800454c:	f7ff ff90 	bl	8004470 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004550:	2300      	movs	r3, #0
 8004552:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	e7a0      	b.n	800449a <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004558:	3a05      	subs	r2, #5
 800455a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800455c:	3204      	adds	r2, #4
 800455e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	079b      	lsls	r3, r3, #30
 8004564:	d021      	beq.n	80045aa <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 8004566:	f7ff ff81 	bl	800446c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456a:	2300      	movs	r3, #0
 800456c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	e78c      	b.n	800448c <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004572:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 8004574:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004576:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004578:	f000 fa1c 	bl	80049b4 <HAL_TIMEx_CommutCallback>
}
 800457c:	e7b7      	b.n	80044ee <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800457e:	3a03      	subs	r2, #3
 8004580:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004582:	0020      	movs	r0, r4
 8004584:	f7fc fe04 	bl	8001190 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	e79b      	b.n	80044c4 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800458c:	3a02      	subs	r2, #2
 800458e:	3aff      	subs	r2, #255	; 0xff
 8004590:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004592:	0020      	movs	r0, r4
 8004594:	f000 fa10 	bl	80049b8 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	e79a      	b.n	80044d2 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800459c:	3a81      	subs	r2, #129	; 0x81
 800459e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80045a0:	0020      	movs	r0, r4
 80045a2:	f7ff ff67 	bl	8004474 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	e79a      	b.n	80044e0 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	f7ff ff5d 	bl	8004468 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ae:	0020      	movs	r0, r4
 80045b0:	f7ff ff5e 	bl	8004470 <HAL_TIM_PWM_PulseFinishedCallback>
 80045b4:	e7d9      	b.n	800456a <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80045b6:	f7ff ff59 	bl	800446c <HAL_TIM_IC_CaptureCallback>
 80045ba:	e7c9      	b.n	8004550 <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 80045bc:	f7ff ff56 	bl	800446c <HAL_TIM_IC_CaptureCallback>
 80045c0:	e7b3      	b.n	800452a <HAL_TIM_IRQHandler+0xb2>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c2:	f7ff ff51 	bl	8004468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c6:	0020      	movs	r0, r4
 80045c8:	f7ff ff52 	bl	8004470 <HAL_TIM_PWM_PulseFinishedCallback>
 80045cc:	e79c      	b.n	8004508 <HAL_TIM_IRQHandler+0x90>
 80045ce:	46c0      	nop			; (mov r8, r8)

080045d0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d0:	4a1e      	ldr	r2, [pc, #120]	; (800464c <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 80045d2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d4:	4290      	cmp	r0, r2
 80045d6:	d033      	beq.n	8004640 <TIM_Base_SetConfig+0x70>
 80045d8:	2280      	movs	r2, #128	; 0x80
 80045da:	05d2      	lsls	r2, r2, #23
 80045dc:	4290      	cmp	r0, r2
 80045de:	d01b      	beq.n	8004618 <TIM_Base_SetConfig+0x48>
 80045e0:	4a1b      	ldr	r2, [pc, #108]	; (8004650 <TIM_Base_SetConfig+0x80>)
 80045e2:	4290      	cmp	r0, r2
 80045e4:	d018      	beq.n	8004618 <TIM_Base_SetConfig+0x48>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045e6:	4a1b      	ldr	r2, [pc, #108]	; (8004654 <TIM_Base_SetConfig+0x84>)
 80045e8:	4290      	cmp	r0, r2
 80045ea:	d019      	beq.n	8004620 <TIM_Base_SetConfig+0x50>
 80045ec:	4a1a      	ldr	r2, [pc, #104]	; (8004658 <TIM_Base_SetConfig+0x88>)
 80045ee:	4290      	cmp	r0, r2
 80045f0:	d002      	beq.n	80045f8 <TIM_Base_SetConfig+0x28>
 80045f2:	4a1a      	ldr	r2, [pc, #104]	; (800465c <TIM_Base_SetConfig+0x8c>)
 80045f4:	4290      	cmp	r0, r2
 80045f6:	d117      	bne.n	8004628 <TIM_Base_SetConfig+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 80045f8:	4a19      	ldr	r2, [pc, #100]	; (8004660 <TIM_Base_SetConfig+0x90>)
 80045fa:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045fc:	68ca      	ldr	r2, [r1, #12]
 80045fe:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004600:	2280      	movs	r2, #128	; 0x80
 8004602:	4393      	bics	r3, r2
 8004604:	694a      	ldr	r2, [r1, #20]
 8004606:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004608:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800460a:	688b      	ldr	r3, [r1, #8]
 800460c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800460e:	680b      	ldr	r3, [r1, #0]
 8004610:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004612:	690b      	ldr	r3, [r1, #16]
 8004614:	6303      	str	r3, [r0, #48]	; 0x30
 8004616:	e010      	b.n	800463a <TIM_Base_SetConfig+0x6a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004618:	2270      	movs	r2, #112	; 0x70
 800461a:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800461c:	684a      	ldr	r2, [r1, #4]
 800461e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004620:	4a0f      	ldr	r2, [pc, #60]	; (8004660 <TIM_Base_SetConfig+0x90>)
 8004622:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004624:	68ca      	ldr	r2, [r1, #12]
 8004626:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004628:	2280      	movs	r2, #128	; 0x80
 800462a:	4393      	bics	r3, r2
 800462c:	694a      	ldr	r2, [r1, #20]
 800462e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004630:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004632:	688b      	ldr	r3, [r1, #8]
 8004634:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004636:	680b      	ldr	r3, [r1, #0]
 8004638:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800463a:	2301      	movs	r3, #1
 800463c:	6143      	str	r3, [r0, #20]
}
 800463e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004640:	2270      	movs	r2, #112	; 0x70
 8004642:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004644:	684a      	ldr	r2, [r1, #4]
 8004646:	4313      	orrs	r3, r2
 8004648:	e7d6      	b.n	80045f8 <TIM_Base_SetConfig+0x28>
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	40012c00 	.word	0x40012c00
 8004650:	40000400 	.word	0x40000400
 8004654:	40002000 	.word	0x40002000
 8004658:	40014400 	.word	0x40014400
 800465c:	40014800 	.word	0x40014800
 8004660:	fffffcff 	.word	0xfffffcff

08004664 <HAL_TIM_Base_Init>:
{
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004668:	d026      	beq.n	80046b8 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800466a:	233d      	movs	r3, #61	; 0x3d
 800466c:	5cc3      	ldrb	r3, [r0, r3]
 800466e:	b2da      	uxtb	r2, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01c      	beq.n	80046ae <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	2302      	movs	r3, #2
 8004676:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004678:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800467a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800467c:	c901      	ldmia	r1!, {r0}
 800467e:	f7ff ffa7 	bl	80045d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004682:	2301      	movs	r3, #1
 8004684:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8004686:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004688:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800468a:	3a08      	subs	r2, #8
 800468c:	54a3      	strb	r3, [r4, r2]
 800468e:	3201      	adds	r2, #1
 8004690:	54a3      	strb	r3, [r4, r2]
 8004692:	3201      	adds	r2, #1
 8004694:	54a3      	strb	r3, [r4, r2]
 8004696:	3201      	adds	r2, #1
 8004698:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469a:	3201      	adds	r2, #1
 800469c:	54a3      	strb	r3, [r4, r2]
 800469e:	3201      	adds	r2, #1
 80046a0:	54a3      	strb	r3, [r4, r2]
 80046a2:	3201      	adds	r2, #1
 80046a4:	54a3      	strb	r3, [r4, r2]
 80046a6:	3201      	adds	r2, #1
 80046a8:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80046aa:	5563      	strb	r3, [r4, r5]
}
 80046ac:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80046ae:	333c      	adds	r3, #60	; 0x3c
 80046b0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80046b2:	f7fd f933 	bl	800191c <HAL_TIM_Base_MspInit>
 80046b6:	e7dd      	b.n	8004674 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80046b8:	2001      	movs	r0, #1
 80046ba:	e7f7      	b.n	80046ac <HAL_TIM_Base_Init+0x48>

080046bc <HAL_TIM_PWM_Init>:
{
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80046c0:	d026      	beq.n	8004710 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80046c2:	233d      	movs	r3, #61	; 0x3d
 80046c4:	5cc3      	ldrb	r3, [r0, r3]
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01c      	beq.n	8004706 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80046cc:	2302      	movs	r3, #2
 80046ce:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d0:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80046d2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d4:	c901      	ldmia	r1!, {r0}
 80046d6:	f7ff ff7b 	bl	80045d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046da:	2301      	movs	r3, #1
 80046dc:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 80046de:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	3a08      	subs	r2, #8
 80046e4:	54a3      	strb	r3, [r4, r2]
 80046e6:	3201      	adds	r2, #1
 80046e8:	54a3      	strb	r3, [r4, r2]
 80046ea:	3201      	adds	r2, #1
 80046ec:	54a3      	strb	r3, [r4, r2]
 80046ee:	3201      	adds	r2, #1
 80046f0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f2:	3201      	adds	r2, #1
 80046f4:	54a3      	strb	r3, [r4, r2]
 80046f6:	3201      	adds	r2, #1
 80046f8:	54a3      	strb	r3, [r4, r2]
 80046fa:	3201      	adds	r2, #1
 80046fc:	54a3      	strb	r3, [r4, r2]
 80046fe:	3201      	adds	r2, #1
 8004700:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004702:	5563      	strb	r3, [r4, r5]
}
 8004704:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004706:	333c      	adds	r3, #60	; 0x3c
 8004708:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 800470a:	f7ff fdcb 	bl	80042a4 <HAL_TIM_PWM_MspInit>
 800470e:	e7dd      	b.n	80046cc <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8004710:	2001      	movs	r0, #1
 8004712:	e7f7      	b.n	8004704 <HAL_TIM_PWM_Init+0x48>

08004714 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004714:	2210      	movs	r2, #16
 8004716:	6a03      	ldr	r3, [r0, #32]
{
 8004718:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800471a:	4393      	bics	r3, r2
 800471c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800471e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004720:	4d15      	ldr	r5, [pc, #84]	; (8004778 <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 8004722:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004724:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004726:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004728:	680d      	ldr	r5, [r1, #0]
 800472a:	022d      	lsls	r5, r5, #8
 800472c:	4315      	orrs	r5, r2
  tmpccer &= ~TIM_CCER_CC2P;
 800472e:	2220      	movs	r2, #32
 8004730:	4394      	bics	r4, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004732:	688a      	ldr	r2, [r1, #8]
 8004734:	0112      	lsls	r2, r2, #4
 8004736:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004738:	4c10      	ldr	r4, [pc, #64]	; (800477c <TIM_OC2_SetConfig+0x68>)
 800473a:	42a0      	cmp	r0, r4
 800473c:	d012      	beq.n	8004764 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473e:	4c10      	ldr	r4, [pc, #64]	; (8004780 <TIM_OC2_SetConfig+0x6c>)
 8004740:	42a0      	cmp	r0, r4
 8004742:	d002      	beq.n	800474a <TIM_OC2_SetConfig+0x36>
 8004744:	4c0f      	ldr	r4, [pc, #60]	; (8004784 <TIM_OC2_SetConfig+0x70>)
 8004746:	42a0      	cmp	r0, r4
 8004748:	d106      	bne.n	8004758 <TIM_OC2_SetConfig+0x44>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800474a:	4c0f      	ldr	r4, [pc, #60]	; (8004788 <TIM_OC2_SetConfig+0x74>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800474c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800474e:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004750:	698b      	ldr	r3, [r1, #24]
 8004752:	4333      	orrs	r3, r6
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 8004758:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800475a:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800475c:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800475e:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004760:	6202      	str	r2, [r0, #32]
}
 8004762:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8004764:	2480      	movs	r4, #128	; 0x80
 8004766:	43a2      	bics	r2, r4
 8004768:	0016      	movs	r6, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800476a:	68ca      	ldr	r2, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 800476c:	3c40      	subs	r4, #64	; 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800476e:	0112      	lsls	r2, r2, #4
 8004770:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004772:	43a2      	bics	r2, r4
 8004774:	e7e9      	b.n	800474a <TIM_OC2_SetConfig+0x36>
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	ffff8cff 	.word	0xffff8cff
 800477c:	40012c00 	.word	0x40012c00
 8004780:	40014400 	.word	0x40014400
 8004784:	40014800 	.word	0x40014800
 8004788:	fffff3ff 	.word	0xfffff3ff

0800478c <HAL_TIM_PWM_ConfigChannel>:
{
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800478e:	233c      	movs	r3, #60	; 0x3c
{
 8004790:	0014      	movs	r4, r2
  __HAL_LOCK(htim);
 8004792:	5cc2      	ldrb	r2, [r0, r3]
{
 8004794:	0005      	movs	r5, r0
 8004796:	000e      	movs	r6, r1
  __HAL_LOCK(htim);
 8004798:	2a01      	cmp	r2, #1
 800479a:	d05a      	beq.n	8004852 <HAL_TIM_PWM_ConfigChannel+0xc6>
 800479c:	2201      	movs	r2, #1
 800479e:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 80047a0:	2c08      	cmp	r4, #8
 80047a2:	d045      	beq.n	8004830 <HAL_TIM_PWM_ConfigChannel+0xa4>
 80047a4:	d81a      	bhi.n	80047dc <HAL_TIM_PWM_ConfigChannel+0x50>
 80047a6:	2c00      	cmp	r4, #0
 80047a8:	d030      	beq.n	800480c <HAL_TIM_PWM_ConfigChannel+0x80>
 80047aa:	2c04      	cmp	r4, #4
 80047ac:	d12c      	bne.n	8004808 <HAL_TIM_PWM_ConfigChannel+0x7c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047ae:	6804      	ldr	r4, [r0, #0]
 80047b0:	0020      	movs	r0, r4
 80047b2:	f7ff ffaf 	bl	8004714 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047b6:	2380      	movs	r3, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 80047b8:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047ba:	69a2      	ldr	r2, [r4, #24]
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	4313      	orrs	r3, r2
 80047c0:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047c2:	69a3      	ldr	r3, [r4, #24]
 80047c4:	4a24      	ldr	r2, [pc, #144]	; (8004858 <HAL_TIM_PWM_ConfigChannel+0xcc>)
 80047c6:	4013      	ands	r3, r2
 80047c8:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047ca:	6933      	ldr	r3, [r6, #16]
 80047cc:	69a2      	ldr	r2, [r4, #24]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	4313      	orrs	r3, r2
 80047d2:	61a3      	str	r3, [r4, #24]
  __HAL_UNLOCK(htim);
 80047d4:	233c      	movs	r3, #60	; 0x3c
 80047d6:	2200      	movs	r2, #0
 80047d8:	54ea      	strb	r2, [r5, r3]
}
 80047da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 80047dc:	2c0c      	cmp	r4, #12
 80047de:	d113      	bne.n	8004808 <HAL_TIM_PWM_ConfigChannel+0x7c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047e0:	6804      	ldr	r4, [r0, #0]
 80047e2:	0020      	movs	r0, r4
 80047e4:	f7ff fbfe 	bl	8003fe4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	69e2      	ldr	r2, [r4, #28]
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	4313      	orrs	r3, r2
 80047f0:	61e3      	str	r3, [r4, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047f2:	69e3      	ldr	r3, [r4, #28]
 80047f4:	4a18      	ldr	r2, [pc, #96]	; (8004858 <HAL_TIM_PWM_ConfigChannel+0xcc>)
  HAL_StatusTypeDef status = HAL_OK;
 80047f6:	2000      	movs	r0, #0
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047f8:	4013      	ands	r3, r2
 80047fa:	61e3      	str	r3, [r4, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047fc:	6933      	ldr	r3, [r6, #16]
 80047fe:	69e2      	ldr	r2, [r4, #28]
 8004800:	021b      	lsls	r3, r3, #8
 8004802:	4313      	orrs	r3, r2
 8004804:	61e3      	str	r3, [r4, #28]
      break;
 8004806:	e7e5      	b.n	80047d4 <HAL_TIM_PWM_ConfigChannel+0x48>
  switch (Channel)
 8004808:	2001      	movs	r0, #1
 800480a:	e7e3      	b.n	80047d4 <HAL_TIM_PWM_ConfigChannel+0x48>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800480c:	6804      	ldr	r4, [r0, #0]
 800480e:	0020      	movs	r0, r4
 8004810:	f7ff fb74 	bl	8003efc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004814:	2208      	movs	r2, #8
 8004816:	69a3      	ldr	r3, [r4, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004818:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800481a:	4313      	orrs	r3, r2
 800481c:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800481e:	69a3      	ldr	r3, [r4, #24]
 8004820:	3a04      	subs	r2, #4
 8004822:	4393      	bics	r3, r2
 8004824:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004826:	69a3      	ldr	r3, [r4, #24]
 8004828:	6932      	ldr	r2, [r6, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	61a3      	str	r3, [r4, #24]
      break;
 800482e:	e7d1      	b.n	80047d4 <HAL_TIM_PWM_ConfigChannel+0x48>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004830:	6807      	ldr	r7, [r0, #0]
 8004832:	0038      	movs	r0, r7
 8004834:	f7ff fb96 	bl	8003f64 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004838:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800483a:	69fb      	ldr	r3, [r7, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800483c:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800483e:	4323      	orrs	r3, r4
 8004840:	61fb      	str	r3, [r7, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	4393      	bics	r3, r2
 8004846:	61fb      	str	r3, [r7, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	6932      	ldr	r2, [r6, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	61fb      	str	r3, [r7, #28]
      break;
 8004850:	e7c0      	b.n	80047d4 <HAL_TIM_PWM_ConfigChannel+0x48>
  __HAL_LOCK(htim);
 8004852:	2002      	movs	r0, #2
 8004854:	e7c1      	b.n	80047da <HAL_TIM_PWM_ConfigChannel+0x4e>
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	fffffbff 	.word	0xfffffbff

0800485c <HAL_TIMEx_OCN_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800485c:	2900      	cmp	r1, #0
 800485e:	d12c      	bne.n	80048ba <HAL_TIMEx_OCN_Start+0x5e>
 8004860:	2342      	movs	r3, #66	; 0x42
 8004862:	5cc2      	ldrb	r2, [r0, r3]
 8004864:	2a01      	cmp	r2, #1
 8004866:	d130      	bne.n	80048ca <HAL_TIMEx_OCN_Start+0x6e>
  {
    return HAL_ERROR;
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004868:	2202      	movs	r2, #2
 800486a:	54c2      	strb	r2, [r0, r3]
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800486c:	221f      	movs	r2, #31
 800486e:	4011      	ands	r1, r2
 8004870:	3a1b      	subs	r2, #27
 8004872:	408a      	lsls	r2, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004874:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004876:	6a19      	ldr	r1, [r3, #32]
 8004878:	4391      	bics	r1, r2
 800487a:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800487c:	6a19      	ldr	r1, [r3, #32]
 800487e:	430a      	orrs	r2, r1
 8004880:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 8004882:	2280      	movs	r2, #128	; 0x80
 8004884:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004886:	0212      	lsls	r2, r2, #8
 8004888:	430a      	orrs	r2, r1
 800488a:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488c:	4a15      	ldr	r2, [pc, #84]	; (80048e4 <HAL_TIMEx_OCN_Start+0x88>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00c      	beq.n	80048ac <HAL_TIMEx_OCN_Start+0x50>
 8004892:	2280      	movs	r2, #128	; 0x80
 8004894:	05d2      	lsls	r2, r2, #23
 8004896:	4293      	cmp	r3, r2
 8004898:	d008      	beq.n	80048ac <HAL_TIMEx_OCN_Start+0x50>
 800489a:	4a13      	ldr	r2, [pc, #76]	; (80048e8 <HAL_TIMEx_OCN_Start+0x8c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d005      	beq.n	80048ac <HAL_TIMEx_OCN_Start+0x50>
    __HAL_TIM_ENABLE(htim);
 80048a0:	2101      	movs	r1, #1
  return HAL_OK;
 80048a2:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	601a      	str	r2, [r3, #0]
}
 80048aa:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ac:	2207      	movs	r2, #7
 80048ae:	6899      	ldr	r1, [r3, #8]
 80048b0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b2:	2a06      	cmp	r2, #6
 80048b4:	d1f4      	bne.n	80048a0 <HAL_TIMEx_OCN_Start+0x44>
  return HAL_OK;
 80048b6:	2000      	movs	r0, #0
 80048b8:	e7f7      	b.n	80048aa <HAL_TIMEx_OCN_Start+0x4e>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ba:	2904      	cmp	r1, #4
 80048bc:	d007      	beq.n	80048ce <HAL_TIMEx_OCN_Start+0x72>
 80048be:	2908      	cmp	r1, #8
 80048c0:	d00a      	beq.n	80048d8 <HAL_TIMEx_OCN_Start+0x7c>
 80048c2:	2345      	movs	r3, #69	; 0x45
 80048c4:	5cc2      	ldrb	r2, [r0, r3]
 80048c6:	2a01      	cmp	r2, #1
 80048c8:	d0ce      	beq.n	8004868 <HAL_TIMEx_OCN_Start+0xc>
    return HAL_ERROR;
 80048ca:	2001      	movs	r0, #1
 80048cc:	e7ed      	b.n	80048aa <HAL_TIMEx_OCN_Start+0x4e>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ce:	2343      	movs	r3, #67	; 0x43
 80048d0:	5cc2      	ldrb	r2, [r0, r3]
 80048d2:	2a01      	cmp	r2, #1
 80048d4:	d0c8      	beq.n	8004868 <HAL_TIMEx_OCN_Start+0xc>
 80048d6:	e7f8      	b.n	80048ca <HAL_TIMEx_OCN_Start+0x6e>
 80048d8:	2344      	movs	r3, #68	; 0x44
 80048da:	5cc2      	ldrb	r2, [r0, r3]
 80048dc:	2a01      	cmp	r2, #1
 80048de:	d0c3      	beq.n	8004868 <HAL_TIMEx_OCN_Start+0xc>
 80048e0:	e7f3      	b.n	80048ca <HAL_TIMEx_OCN_Start+0x6e>
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	40012c00 	.word	0x40012c00
 80048e8:	40000400 	.word	0x40000400

080048ec <HAL_TIMEx_PWMN_Start>:
 80048ec:	b510      	push	{r4, lr}
 80048ee:	f7ff ffb5 	bl	800485c <HAL_TIMEx_OCN_Start>
 80048f2:	bd10      	pop	{r4, pc}

080048f4 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80048f4:	233c      	movs	r3, #60	; 0x3c
{
 80048f6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80048f8:	5cc3      	ldrb	r3, [r0, r3]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d021      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 80048fe:	233d      	movs	r3, #61	; 0x3d
 8004900:	2202      	movs	r2, #2
  tmpcr2 &= ~TIM_CR2_MMS;
 8004902:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8004904:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8004906:	6803      	ldr	r3, [r0, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800490a:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800490c:	43aa      	bics	r2, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800490e:	680d      	ldr	r5, [r1, #0]
 8004910:	432a      	orrs	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8004912:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004914:	4a0c      	ldr	r2, [pc, #48]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d006      	beq.n	8004928 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 800491a:	2280      	movs	r2, #128	; 0x80
 800491c:	05d2      	lsls	r2, r2, #23
 800491e:	4293      	cmp	r3, r2
 8004920:	d002      	beq.n	8004928 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8004922:	4a0a      	ldr	r2, [pc, #40]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d104      	bne.n	8004932 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004928:	2280      	movs	r2, #128	; 0x80
 800492a:	4394      	bics	r4, r2
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800492c:	684a      	ldr	r2, [r1, #4]
 800492e:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 8004930:	609c      	str	r4, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004932:	233d      	movs	r3, #61	; 0x3d
 8004934:	2201      	movs	r2, #1
 8004936:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8004938:	2200      	movs	r2, #0
 800493a:	3b01      	subs	r3, #1
 800493c:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 800493e:	2000      	movs	r0, #0
}
 8004940:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8004942:	2002      	movs	r0, #2
 8004944:	e7fc      	b.n	8004940 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	40012c00 	.word	0x40012c00
 800494c:	40000400 	.word	0x40000400

08004950 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8004950:	223c      	movs	r2, #60	; 0x3c
{
 8004952:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8004954:	5c83      	ldrb	r3, [r0, r2]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d01e      	beq.n	8004998 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800495a:	68cb      	ldr	r3, [r1, #12]
 800495c:	4c0f      	ldr	r4, [pc, #60]	; (800499c <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 800495e:	4023      	ands	r3, r4
 8004960:	688c      	ldr	r4, [r1, #8]
 8004962:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004964:	4c0e      	ldr	r4, [pc, #56]	; (80049a0 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8004966:	4023      	ands	r3, r4
 8004968:	684c      	ldr	r4, [r1, #4]
 800496a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800496c:	4c0d      	ldr	r4, [pc, #52]	; (80049a4 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 800496e:	4023      	ands	r3, r4
 8004970:	680c      	ldr	r4, [r1, #0]
 8004972:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004974:	4c0c      	ldr	r4, [pc, #48]	; (80049a8 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8004976:	4023      	ands	r3, r4
 8004978:	690c      	ldr	r4, [r1, #16]
 800497a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800497c:	4c0b      	ldr	r4, [pc, #44]	; (80049ac <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 800497e:	4023      	ands	r3, r4
 8004980:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004982:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004984:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004986:	4c0a      	ldr	r4, [pc, #40]	; (80049b0 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8004988:	4023      	ands	r3, r4
 800498a:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 800498c:	6801      	ldr	r1, [r0, #0]
 800498e:	644b      	str	r3, [r1, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8004990:	2300      	movs	r3, #0
 8004992:	5483      	strb	r3, [r0, r2]
  return HAL_OK;
 8004994:	2000      	movs	r0, #0
}
 8004996:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8004998:	2002      	movs	r0, #2
 800499a:	e7fc      	b.n	8004996 <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 800499c:	fffffcff 	.word	0xfffffcff
 80049a0:	fffffbff 	.word	0xfffffbff
 80049a4:	fffff7ff 	.word	0xfffff7ff
 80049a8:	ffffefff 	.word	0xffffefff
 80049ac:	ffffdfff 	.word	0xffffdfff
 80049b0:	ffffbfff 	.word	0xffffbfff

080049b4 <HAL_TIMEx_CommutCallback>:
 80049b4:	4770      	bx	lr
 80049b6:	46c0      	nop			; (mov r8, r8)

080049b8 <HAL_TIMEx_BreakCallback>:
 80049b8:	4770      	bx	lr
 80049ba:	46c0      	nop			; (mov r8, r8)

080049bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049bc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049be:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c2:	2201      	movs	r2, #1
 80049c4:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049c8:	6801      	ldr	r1, [r0, #0]
 80049ca:	4c13      	ldr	r4, [pc, #76]	; (8004a18 <UART_EndRxTransfer+0x5c>)
 80049cc:	680b      	ldr	r3, [r1, #0]
 80049ce:	4023      	ands	r3, r4
 80049d0:	600b      	str	r3, [r1, #0]
 80049d2:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d6:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049da:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049de:	6801      	ldr	r1, [r0, #0]
 80049e0:	688b      	ldr	r3, [r1, #8]
 80049e2:	4393      	bics	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
 80049e6:	f38c 8810 	msr	PRIMASK, ip

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ea:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d10b      	bne.n	8004a08 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049f0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f4:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f8:	6802      	ldr	r2, [r0, #0]
 80049fa:	3432      	adds	r4, #50	; 0x32
 80049fc:	6813      	ldr	r3, [r2, #0]
 80049fe:	34ff      	adds	r4, #255	; 0xff
 8004a00:	43a3      	bics	r3, r4
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a12:	6683      	str	r3, [r0, #104]	; 0x68
}
 8004a14:	bd10      	pop	{r4, pc}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	fffffedf 	.word	0xfffffedf

08004a1c <HAL_UART_Transmit_DMA>:
{
 8004a1c:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004a1e:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	0004      	movs	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004a24:	2a20      	cmp	r2, #32
 8004a26:	d140      	bne.n	8004aaa <HAL_UART_Transmit_DMA+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8004a28:	2900      	cmp	r1, #0
 8004a2a:	d02b      	beq.n	8004a84 <HAL_UART_Transmit_DMA+0x68>
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d029      	beq.n	8004a84 <HAL_UART_Transmit_DMA+0x68>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a30:	2280      	movs	r2, #128	; 0x80
 8004a32:	6880      	ldr	r0, [r0, #8]
 8004a34:	0152      	lsls	r2, r2, #5
 8004a36:	4290      	cmp	r0, r2
 8004a38:	d01f      	beq.n	8004a7a <HAL_UART_Transmit_DMA+0x5e>
    huart->TxXferSize  = Size;
 8004a3a:	2250      	movs	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 8004a3c:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004a3e:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 8004a40:	3202      	adds	r2, #2
 8004a42:	52a3      	strh	r3, [r4, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a44:	2021      	movs	r0, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a46:	2584      	movs	r5, #132	; 0x84
 8004a48:	2200      	movs	r2, #0
 8004a4a:	5162      	str	r2, [r4, r5]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a4c:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (huart->hdmatx != NULL)
 8004a4e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d019      	beq.n	8004a88 <HAL_UART_Transmit_DMA+0x6c>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004a54:	4e16      	ldr	r6, [pc, #88]	; (8004ab0 <HAL_UART_Transmit_DMA+0x94>)
      huart->hdmatx->XferAbortCallback = NULL;
 8004a56:	6342      	str	r2, [r0, #52]	; 0x34
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004a58:	6286      	str	r6, [r0, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004a5a:	4e16      	ldr	r6, [pc, #88]	; (8004ab4 <HAL_UART_Transmit_DMA+0x98>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004a5c:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004a5e:	62c6      	str	r6, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004a60:	4e15      	ldr	r6, [pc, #84]	; (8004ab8 <HAL_UART_Transmit_DMA+0x9c>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004a62:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004a64:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004a66:	f7fd fd5d 	bl	8002524 <HAL_DMA_Start_IT>
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	d00c      	beq.n	8004a88 <HAL_UART_Transmit_DMA+0x6c>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a6e:	2310      	movs	r3, #16
 8004a70:	5163      	str	r3, [r4, r5]
        huart->gState = HAL_UART_STATE_READY;
 8004a72:	3310      	adds	r3, #16
        return HAL_ERROR;
 8004a74:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 8004a76:	67e3      	str	r3, [r4, #124]	; 0x7c
        return HAL_ERROR;
 8004a78:	e005      	b.n	8004a86 <HAL_UART_Transmit_DMA+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a7a:	6922      	ldr	r2, [r4, #16]
 8004a7c:	2a00      	cmp	r2, #0
 8004a7e:	d1dc      	bne.n	8004a3a <HAL_UART_Transmit_DMA+0x1e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a80:	07ca      	lsls	r2, r1, #31
 8004a82:	d5da      	bpl.n	8004a3a <HAL_UART_Transmit_DMA+0x1e>
      return HAL_ERROR;
 8004a84:	2001      	movs	r0, #1
}
 8004a86:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004a88:	2240      	movs	r2, #64	; 0x40
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a8e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a92:	2301      	movs	r3, #1
 8004a94:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a98:	2080      	movs	r0, #128	; 0x80
 8004a9a:	6822      	ldr	r2, [r4, #0]
 8004a9c:	6893      	ldr	r3, [r2, #8]
 8004a9e:	4303      	orrs	r3, r0
 8004aa0:	6093      	str	r3, [r2, #8]
 8004aa2:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	e7ed      	b.n	8004a86 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_BUSY;
 8004aaa:	2002      	movs	r0, #2
 8004aac:	e7eb      	b.n	8004a86 <HAL_UART_Transmit_DMA+0x6a>
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	08004abd 	.word	0x08004abd
 8004ab4:	08004b09 	.word	0x08004b09
 8004ab8:	08004b15 	.word	0x08004b15

08004abc <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004abc:	6982      	ldr	r2, [r0, #24]
{
 8004abe:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ac0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004ac2:	2a20      	cmp	r2, #32
 8004ac4:	d01a      	beq.n	8004afc <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8004ac6:	2252      	movs	r2, #82	; 0x52
 8004ac8:	2100      	movs	r1, #0
 8004aca:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004acc:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad0:	3101      	adds	r1, #1
 8004ad2:	f381 8810 	msr	PRIMASK, r1

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ad6:	2480      	movs	r4, #128	; 0x80
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	6882      	ldr	r2, [r0, #8]
 8004adc:	43a2      	bics	r2, r4
 8004ade:	6082      	str	r2, [r0, #8]
 8004ae0:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae8:	f381 8810 	msr	PRIMASK, r1

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	313f      	adds	r1, #63	; 0x3f
 8004af0:	6813      	ldr	r3, [r2, #0]
 8004af2:	430b      	orrs	r3, r1
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	f380 8810 	msr	PRIMASK, r0
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004afa:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8004afc:	0018      	movs	r0, r3
 8004afe:	f7fc fb5d 	bl	80011bc <HAL_UART_TxCpltCallback>
}
 8004b02:	e7fa      	b.n	8004afa <UART_DMATransmitCplt+0x3e>

08004b04 <HAL_UART_TxHalfCpltCallback>:
 8004b04:	4770      	bx	lr
 8004b06:	46c0      	nop			; (mov r8, r8)

08004b08 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b08:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004b0a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004b0c:	f7ff fffa 	bl	8004b04 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b10:	bd10      	pop	{r4, pc}
 8004b12:	46c0      	nop			; (mov r8, r8)

08004b14 <UART_DMAError>:
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004b14:	2280      	movs	r2, #128	; 0x80
{
 8004b16:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b18:	6a44      	ldr	r4, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004b1a:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004b1c:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004b1e:	58a0      	ldr	r0, [r4, r2]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004b20:	6899      	ldr	r1, [r3, #8]
 8004b22:	420a      	tst	r2, r1
 8004b24:	d001      	beq.n	8004b2a <UART_DMAError+0x16>
 8004b26:	2d21      	cmp	r5, #33	; 0x21
 8004b28:	d00d      	beq.n	8004b46 <UART_DMAError+0x32>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	065b      	lsls	r3, r3, #25
 8004b2e:	d501      	bpl.n	8004b34 <UART_DMAError+0x20>
 8004b30:	2822      	cmp	r0, #34	; 0x22
 8004b32:	d01b      	beq.n	8004b6c <UART_DMAError+0x58>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b34:	2284      	movs	r2, #132	; 0x84
 8004b36:	2110      	movs	r1, #16
 8004b38:	58a3      	ldr	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b3a:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	50a3      	str	r3, [r4, r2]
  HAL_UART_ErrorCallback(huart);
 8004b40:	f7fc fb4e 	bl	80011e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b44:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8004b46:	2352      	movs	r3, #82	; 0x52
 8004b48:	2200      	movs	r2, #0
 8004b4a:	52e2      	strh	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b4c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b50:	3b51      	subs	r3, #81	; 0x51
 8004b52:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b56:	6822      	ldr	r2, [r4, #0]
 8004b58:	359f      	adds	r5, #159	; 0x9f
 8004b5a:	6813      	ldr	r3, [r2, #0]
 8004b5c:	43ab      	bics	r3, r5
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	f381 8810 	msr	PRIMASK, r1
  huart->gState = HAL_UART_STATE_READY;
 8004b64:	2320      	movs	r3, #32
 8004b66:	67e3      	str	r3, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004b68:	6823      	ldr	r3, [r4, #0]
}
 8004b6a:	e7de      	b.n	8004b2a <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 8004b6c:	235a      	movs	r3, #90	; 0x5a
 8004b6e:	2200      	movs	r2, #0
    UART_EndRxTransfer(huart);
 8004b70:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8004b72:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8004b74:	f7ff ff22 	bl	80049bc <UART_EndRxTransfer>
 8004b78:	e7dc      	b.n	8004b34 <UART_DMAError+0x20>
 8004b7a:	46c0      	nop			; (mov r8, r8)

08004b7c <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	225a      	movs	r2, #90	; 0x5a
{
 8004b80:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b82:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8004b84:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8004b86:	3a08      	subs	r2, #8
 8004b88:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b8a:	f7fc fb29 	bl	80011e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b8e:	bd10      	pop	{r4, pc}

08004b90 <HAL_UARTEx_RxEventCallback>:
}
 8004b90:	4770      	bx	lr
 8004b92:	46c0      	nop			; (mov r8, r8)

08004b94 <HAL_UART_IRQHandler>:
{
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	46ce      	mov	lr, r9
 8004b98:	4647      	mov	r7, r8
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b9a:	6802      	ldr	r2, [r0, #0]
{
 8004b9c:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b9e:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ba0:	48b0      	ldr	r0, [pc, #704]	; (8004e64 <HAL_UART_IRQHandler+0x2d0>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ba2:	6811      	ldr	r1, [r2, #0]
{
 8004ba4:	b580      	push	{r7, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ba6:	6895      	ldr	r5, [r2, #8]
  if (errorflags == 0U)
 8004ba8:	4203      	tst	r3, r0
 8004baa:	d000      	beq.n	8004bae <HAL_UART_IRQHandler+0x1a>
 8004bac:	e07e      	b.n	8004cac <HAL_UART_IRQHandler+0x118>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bae:	2020      	movs	r0, #32
 8004bb0:	4218      	tst	r0, r3
 8004bb2:	d002      	beq.n	8004bba <HAL_UART_IRQHandler+0x26>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bb4:	4208      	tst	r0, r1
 8004bb6:	d000      	beq.n	8004bba <HAL_UART_IRQHandler+0x26>
 8004bb8:	e0ee      	b.n	8004d98 <HAL_UART_IRQHandler+0x204>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bba:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004bbc:	2801      	cmp	r0, #1
 8004bbe:	d01b      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x64>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bc0:	2080      	movs	r0, #128	; 0x80
 8004bc2:	0340      	lsls	r0, r0, #13
 8004bc4:	4203      	tst	r3, r0
 8004bc6:	d002      	beq.n	8004bce <HAL_UART_IRQHandler+0x3a>
 8004bc8:	026d      	lsls	r5, r5, #9
 8004bca:	d500      	bpl.n	8004bce <HAL_UART_IRQHandler+0x3a>
 8004bcc:	e0e9      	b.n	8004da2 <HAL_UART_IRQHandler+0x20e>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bce:	2280      	movs	r2, #128	; 0x80
 8004bd0:	421a      	tst	r2, r3
 8004bd2:	d109      	bne.n	8004be8 <HAL_UART_IRQHandler+0x54>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bd4:	2240      	movs	r2, #64	; 0x40
 8004bd6:	421a      	tst	r2, r3
 8004bd8:	d002      	beq.n	8004be0 <HAL_UART_IRQHandler+0x4c>
 8004bda:	420a      	tst	r2, r1
 8004bdc:	d000      	beq.n	8004be0 <HAL_UART_IRQHandler+0x4c>
 8004bde:	e0e9      	b.n	8004db4 <HAL_UART_IRQHandler+0x220>
}
 8004be0:	bcc0      	pop	{r6, r7}
 8004be2:	46b9      	mov	r9, r7
 8004be4:	46b0      	mov	r8, r6
 8004be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004be8:	420a      	tst	r2, r1
 8004bea:	d0f3      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x40>
    if (huart->TxISR != NULL)
 8004bec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f6      	beq.n	8004be0 <HAL_UART_IRQHandler+0x4c>
      huart->TxISR(huart);
 8004bf2:	0020      	movs	r0, r4
 8004bf4:	4798      	blx	r3
 8004bf6:	e7f3      	b.n	8004be0 <HAL_UART_IRQHandler+0x4c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004bf8:	2610      	movs	r6, #16
 8004bfa:	421e      	tst	r6, r3
 8004bfc:	d0e0      	beq.n	8004bc0 <HAL_UART_IRQHandler+0x2c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bfe:	420e      	tst	r6, r1
 8004c00:	d0de      	beq.n	8004bc0 <HAL_UART_IRQHandler+0x2c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c02:	2340      	movs	r3, #64	; 0x40
 8004c04:	001d      	movs	r5, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c06:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c08:	6892      	ldr	r2, [r2, #8]
 8004c0a:	4015      	ands	r5, r2
 8004c0c:	4213      	tst	r3, r2
 8004c0e:	d100      	bne.n	8004c12 <HAL_UART_IRQHandler+0x7e>
 8004c10:	e0ea      	b.n	8004de8 <HAL_UART_IRQHandler+0x254>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c12:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8004c14:	682a      	ldr	r2, [r5, #0]
 8004c16:	6852      	ldr	r2, [r2, #4]
 8004c18:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004c1a:	2a00      	cmp	r2, #0
 8004c1c:	d0e0      	beq.n	8004be0 <HAL_UART_IRQHandler+0x4c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c1e:	2158      	movs	r1, #88	; 0x58
 8004c20:	4688      	mov	r8, r1
 8004c22:	5a61      	ldrh	r1, [r4, r1]
 8004c24:	4291      	cmp	r1, r2
 8004c26:	d9db      	bls.n	8004be0 <HAL_UART_IRQHandler+0x4c>
        huart->RxXferCount = nb_remaining_rx_data;
 8004c28:	275a      	movs	r7, #90	; 0x5a
 8004c2a:	53e2      	strh	r2, [r4, r7]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c2c:	69aa      	ldr	r2, [r5, #24]
 8004c2e:	2a20      	cmp	r2, #32
 8004c30:	d032      	beq.n	8004c98 <HAL_UART_IRQHandler+0x104>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c32:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c36:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c3a:	6821      	ldr	r1, [r4, #0]
 8004c3c:	4f8a      	ldr	r7, [pc, #552]	; (8004e68 <HAL_UART_IRQHandler+0x2d4>)
 8004c3e:	680a      	ldr	r2, [r1, #0]
 8004c40:	403a      	ands	r2, r7
 8004c42:	600a      	str	r2, [r1, #0]
 8004c44:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c48:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4c:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c50:	6821      	ldr	r1, [r4, #0]
 8004c52:	688a      	ldr	r2, [r1, #8]
 8004c54:	4382      	bics	r2, r0
 8004c56:	608a      	str	r2, [r1, #8]
 8004c58:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c5c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c60:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c64:	6821      	ldr	r1, [r4, #0]
 8004c66:	688a      	ldr	r2, [r1, #8]
 8004c68:	439a      	bics	r2, r3
 8004c6a:	608a      	str	r2, [r1, #8]
 8004c6c:	f385 8810 	msr	PRIMASK, r5
          huart->RxState = HAL_UART_STATE_READY;
 8004c70:	2220      	movs	r2, #32
 8004c72:	3340      	adds	r3, #64	; 0x40
 8004c74:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c76:	2300      	movs	r3, #0
 8004c78:	6623      	str	r3, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c7a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7e:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c82:	6822      	ldr	r2, [r4, #0]
 8004c84:	6813      	ldr	r3, [r2, #0]
 8004c86:	43b3      	bics	r3, r6
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c8e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004c90:	f7fd fc88 	bl	80025a4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c94:	4643      	mov	r3, r8
 8004c96:	5ae1      	ldrh	r1, [r4, r3]
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c98:	2302      	movs	r3, #2
 8004c9a:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c9c:	3358      	adds	r3, #88	; 0x58
 8004c9e:	5ae3      	ldrh	r3, [r4, r3]
 8004ca0:	0020      	movs	r0, r4
 8004ca2:	1ac9      	subs	r1, r1, r3
 8004ca4:	b289      	uxth	r1, r1
 8004ca6:	f7ff ff73 	bl	8004b90 <HAL_UARTEx_RxEventCallback>
 8004caa:	e799      	b.n	8004be0 <HAL_UART_IRQHandler+0x4c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004cac:	2601      	movs	r6, #1
 8004cae:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004cb0:	486e      	ldr	r0, [pc, #440]	; (8004e6c <HAL_UART_IRQHandler+0x2d8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004cb2:	402f      	ands	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004cb4:	4008      	ands	r0, r1
 8004cb6:	4338      	orrs	r0, r7
 8004cb8:	d100      	bne.n	8004cbc <HAL_UART_IRQHandler+0x128>
 8004cba:	e77e      	b.n	8004bba <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cbc:	421e      	tst	r6, r3
 8004cbe:	d006      	beq.n	8004cce <HAL_UART_IRQHandler+0x13a>
 8004cc0:	05c8      	lsls	r0, r1, #23
 8004cc2:	d504      	bpl.n	8004cce <HAL_UART_IRQHandler+0x13a>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cc4:	2584      	movs	r5, #132	; 0x84
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cc6:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cc8:	5960      	ldr	r0, [r4, r5]
 8004cca:	4330      	orrs	r0, r6
 8004ccc:	5160      	str	r0, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cce:	2002      	movs	r0, #2
 8004cd0:	4218      	tst	r0, r3
 8004cd2:	d05c      	beq.n	8004d8e <HAL_UART_IRQHandler+0x1fa>
 8004cd4:	2f00      	cmp	r7, #0
 8004cd6:	d00e      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x162>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cd8:	2684      	movs	r6, #132	; 0x84
 8004cda:	2504      	movs	r5, #4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004cdc:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cde:	59a0      	ldr	r0, [r4, r6]
 8004ce0:	4328      	orrs	r0, r5
 8004ce2:	51a0      	str	r0, [r4, r6]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ce4:	421d      	tst	r5, r3
 8004ce6:	d006      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x162>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ce8:	2004      	movs	r0, #4
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cea:	2584      	movs	r5, #132	; 0x84
 8004cec:	2602      	movs	r6, #2
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004cee:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cf0:	5960      	ldr	r0, [r4, r5]
 8004cf2:	4330      	orrs	r0, r6
 8004cf4:	5160      	str	r0, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004cf6:	2508      	movs	r5, #8
 8004cf8:	421d      	tst	r5, r3
 8004cfa:	d008      	beq.n	8004d0e <HAL_UART_IRQHandler+0x17a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004cfc:	2020      	movs	r0, #32
 8004cfe:	4008      	ands	r0, r1
 8004d00:	4338      	orrs	r0, r7
 8004d02:	d004      	beq.n	8004d0e <HAL_UART_IRQHandler+0x17a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d04:	2684      	movs	r6, #132	; 0x84
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d06:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d08:	59a0      	ldr	r0, [r4, r6]
 8004d0a:	4328      	orrs	r0, r5
 8004d0c:	51a0      	str	r0, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d0e:	2080      	movs	r0, #128	; 0x80
 8004d10:	0100      	lsls	r0, r0, #4
 8004d12:	4203      	tst	r3, r0
 8004d14:	d007      	beq.n	8004d26 <HAL_UART_IRQHandler+0x192>
 8004d16:	014d      	lsls	r5, r1, #5
 8004d18:	d505      	bpl.n	8004d26 <HAL_UART_IRQHandler+0x192>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d1a:	2584      	movs	r5, #132	; 0x84
 8004d1c:	2620      	movs	r6, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d1e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d20:	5960      	ldr	r0, [r4, r5]
 8004d22:	4330      	orrs	r0, r6
 8004d24:	5160      	str	r0, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d26:	2084      	movs	r0, #132	; 0x84
 8004d28:	5820      	ldr	r0, [r4, r0]
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d100      	bne.n	8004d30 <HAL_UART_IRQHandler+0x19c>
 8004d2e:	e757      	b.n	8004be0 <HAL_UART_IRQHandler+0x4c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d30:	2020      	movs	r0, #32
 8004d32:	4218      	tst	r0, r3
 8004d34:	d001      	beq.n	8004d3a <HAL_UART_IRQHandler+0x1a6>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d36:	4208      	tst	r0, r1
 8004d38:	d14f      	bne.n	8004dda <HAL_UART_IRQHandler+0x246>
      errorcode = huart->ErrorCode;
 8004d3a:	2684      	movs	r6, #132	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d3c:	2740      	movs	r7, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d3e:	2328      	movs	r3, #40	; 0x28
      errorcode = huart->ErrorCode;
 8004d40:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d42:	6895      	ldr	r5, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d44:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d46:	403d      	ands	r5, r7
        UART_EndRxTransfer(huart);
 8004d48:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d4a:	431d      	orrs	r5, r3
 8004d4c:	d100      	bne.n	8004d50 <HAL_UART_IRQHandler+0x1bc>
 8004d4e:	e085      	b.n	8004e5c <HAL_UART_IRQHandler+0x2c8>
        UART_EndRxTransfer(huart);
 8004d50:	f7ff fe34 	bl	80049bc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	421f      	tst	r7, r3
 8004d5a:	d027      	beq.n	8004dac <HAL_UART_IRQHandler+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d60:	2301      	movs	r3, #1
 8004d62:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d66:	6822      	ldr	r2, [r4, #0]
 8004d68:	6893      	ldr	r3, [r2, #8]
 8004d6a:	43bb      	bics	r3, r7
 8004d6c:	6093      	str	r3, [r2, #8]
 8004d6e:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8004d72:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d019      	beq.n	8004dac <HAL_UART_IRQHandler+0x218>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d78:	4b3d      	ldr	r3, [pc, #244]	; (8004e70 <HAL_UART_IRQHandler+0x2dc>)
 8004d7a:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d7c:	f7fd fc30 	bl	80025e0 <HAL_DMA_Abort_IT>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d100      	bne.n	8004d86 <HAL_UART_IRQHandler+0x1f2>
 8004d84:	e72c      	b.n	8004be0 <HAL_UART_IRQHandler+0x4c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d86:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004d88:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d8a:	4798      	blx	r3
 8004d8c:	e728      	b.n	8004be0 <HAL_UART_IRQHandler+0x4c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d8e:	0758      	lsls	r0, r3, #29
 8004d90:	d5b1      	bpl.n	8004cf6 <HAL_UART_IRQHandler+0x162>
 8004d92:	2f00      	cmp	r7, #0
 8004d94:	d1a8      	bne.n	8004ce8 <HAL_UART_IRQHandler+0x154>
 8004d96:	e7ae      	b.n	8004cf6 <HAL_UART_IRQHandler+0x162>
      if (huart->RxISR != NULL)
 8004d98:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d000      	beq.n	8004da0 <HAL_UART_IRQHandler+0x20c>
 8004d9e:	e728      	b.n	8004bf2 <HAL_UART_IRQHandler+0x5e>
 8004da0:	e71e      	b.n	8004be0 <HAL_UART_IRQHandler+0x4c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004da2:	6210      	str	r0, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004da4:	0020      	movs	r0, r4
 8004da6:	f000 fd21 	bl	80057ec <HAL_UARTEx_WakeupCallback>
    return;
 8004daa:	e719      	b.n	8004be0 <HAL_UART_IRQHandler+0x4c>
            HAL_UART_ErrorCallback(huart);
 8004dac:	0020      	movs	r0, r4
 8004dae:	f7fc fa17 	bl	80011e0 <HAL_UART_ErrorCallback>
 8004db2:	e715      	b.n	8004be0 <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db8:	2301      	movs	r3, #1
 8004dba:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dbe:	6821      	ldr	r1, [r4, #0]
 8004dc0:	680b      	ldr	r3, [r1, #0]
 8004dc2:	4393      	bics	r3, r2
 8004dc4:	600b      	str	r3, [r1, #0]
 8004dc6:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dca:	2320      	movs	r3, #32
 8004dcc:	67e3      	str	r3, [r4, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004dce:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dd0:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8004dd2:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_TxCpltCallback(huart);
 8004dd4:	f7fc f9f2 	bl	80011bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dd8:	e702      	b.n	8004be0 <HAL_UART_IRQHandler+0x4c>
        if (huart->RxISR != NULL)
 8004dda:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0ac      	beq.n	8004d3a <HAL_UART_IRQHandler+0x1a6>
          huart->RxISR(huart);
 8004de0:	0020      	movs	r0, r4
 8004de2:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004de4:	6822      	ldr	r2, [r4, #0]
 8004de6:	e7a8      	b.n	8004d3a <HAL_UART_IRQHandler+0x1a6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004de8:	2358      	movs	r3, #88	; 0x58
 8004dea:	225a      	movs	r2, #90	; 0x5a
 8004dec:	5ae1      	ldrh	r1, [r4, r3]
 8004dee:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 8004df0:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004df2:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8004df4:	2a00      	cmp	r2, #0
 8004df6:	d100      	bne.n	8004dfa <HAL_UART_IRQHandler+0x266>
 8004df8:	e6f2      	b.n	8004be0 <HAL_UART_IRQHandler+0x4c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dfa:	1ac9      	subs	r1, r1, r3
 8004dfc:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004dfe:	2900      	cmp	r1, #0
 8004e00:	d100      	bne.n	8004e04 <HAL_UART_IRQHandler+0x270>
 8004e02:	e6ed      	b.n	8004be0 <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e04:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e08:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e0c:	6822      	ldr	r2, [r4, #0]
 8004e0e:	6813      	ldr	r3, [r2, #0]
 8004e10:	4698      	mov	r8, r3
 8004e12:	4647      	mov	r7, r8
 8004e14:	4b17      	ldr	r3, [pc, #92]	; (8004e74 <HAL_UART_IRQHandler+0x2e0>)
 8004e16:	401f      	ands	r7, r3
 8004e18:	6017      	str	r7, [r2, #0]
 8004e1a:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e1e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e22:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e26:	6822      	ldr	r2, [r4, #0]
 8004e28:	6893      	ldr	r3, [r2, #8]
 8004e2a:	4383      	bics	r3, r0
 8004e2c:	6093      	str	r3, [r2, #8]
 8004e2e:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8004e32:	2380      	movs	r3, #128	; 0x80
 8004e34:	2220      	movs	r2, #32
 8004e36:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e38:	6625      	str	r5, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8004e3a:	66a5      	str	r5, [r4, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e3c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e40:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e44:	6822      	ldr	r2, [r4, #0]
 8004e46:	6813      	ldr	r3, [r2, #0]
 8004e48:	43b3      	bics	r3, r6
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	f385 8810 	msr	PRIMASK, r5
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e50:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e52:	0020      	movs	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e54:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e56:	f7ff fe9b 	bl	8004b90 <HAL_UARTEx_RxEventCallback>
 8004e5a:	e6c1      	b.n	8004be0 <HAL_UART_IRQHandler+0x4c>
        HAL_UART_ErrorCallback(huart);
 8004e5c:	f7fc f9c0 	bl	80011e0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e60:	51a5      	str	r5, [r4, r6]
 8004e62:	e6bd      	b.n	8004be0 <HAL_UART_IRQHandler+0x4c>
 8004e64:	0000080f 	.word	0x0000080f
 8004e68:	fffffeff 	.word	0xfffffeff
 8004e6c:	04000120 	.word	0x04000120
 8004e70:	08004b7d 	.word	0x08004b7d
 8004e74:	fffffedf 	.word	0xfffffedf

08004e78 <UART_RxISR_8BIT>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
  uint16_t uhMask = huart->Mask;
 8004e78:	235c      	movs	r3, #92	; 0x5c
 8004e7a:	5ac2      	ldrh	r2, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e7c:	3324      	adds	r3, #36	; 0x24
 8004e7e:	58c1      	ldr	r1, [r0, r3]
{
 8004e80:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e82:	2922      	cmp	r1, #34	; 0x22
 8004e84:	d005      	beq.n	8004e92 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e86:	2108      	movs	r1, #8
 8004e88:	6802      	ldr	r2, [r0, #0]
 8004e8a:	6993      	ldr	r3, [r2, #24]
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	6193      	str	r3, [r2, #24]
  }
}
 8004e90:	bd70      	pop	{r4, r5, r6, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e92:	6801      	ldr	r1, [r0, #0]
 8004e94:	8c8c      	ldrh	r4, [r1, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e96:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8004e98:	4022      	ands	r2, r4
 8004e9a:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8004e9c:	215a      	movs	r1, #90	; 0x5a
    huart->pRxBuffPtr++;
 8004e9e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004ea0:	3201      	adds	r2, #1
 8004ea2:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8004ea4:	5a42      	ldrh	r2, [r0, r1]
 8004ea6:	3a01      	subs	r2, #1
 8004ea8:	b292      	uxth	r2, r2
 8004eaa:	5242      	strh	r2, [r0, r1]
    if (huart->RxXferCount == 0U)
 8004eac:	5a42      	ldrh	r2, [r0, r1]
 8004eae:	b291      	uxth	r1, r2
 8004eb0:	2a00      	cmp	r2, #0
 8004eb2:	d1ed      	bne.n	8004e90 <UART_RxISR_8BIT+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb4:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb8:	3201      	adds	r2, #1
 8004eba:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ebe:	6805      	ldr	r5, [r0, #0]
 8004ec0:	4e1f      	ldr	r6, [pc, #124]	; (8004f40 <UART_RxISR_8BIT+0xc8>)
 8004ec2:	682c      	ldr	r4, [r5, #0]
 8004ec4:	4034      	ands	r4, r6
 8004ec6:	602c      	str	r4, [r5, #0]
 8004ec8:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ecc:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed4:	6805      	ldr	r5, [r0, #0]
 8004ed6:	68ac      	ldr	r4, [r5, #8]
 8004ed8:	4394      	bics	r4, r2
 8004eda:	60ac      	str	r4, [r5, #8]
 8004edc:	f38c 8810 	msr	PRIMASK, ip
      huart->RxState = HAL_UART_STATE_READY;
 8004ee0:	2420      	movs	r4, #32
 8004ee2:	50c4      	str	r4, [r0, r3]
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ee4:	6803      	ldr	r3, [r0, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ee6:	6641      	str	r1, [r0, #100]	; 0x64
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ee8:	685b      	ldr	r3, [r3, #4]
      huart->RxISR = NULL;
 8004eea:	6681      	str	r1, [r0, #104]	; 0x68
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	d50a      	bpl.n	8004f06 <UART_RxISR_8BIT+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef4:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ef8:	6802      	ldr	r2, [r0, #0]
 8004efa:	4c12      	ldr	r4, [pc, #72]	; (8004f44 <UART_RxISR_8BIT+0xcc>)
 8004efc:	6813      	ldr	r3, [r2, #0]
 8004efe:	4023      	ands	r3, r4
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	f381 8810 	msr	PRIMASK, r1
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f06:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d116      	bne.n	8004f3a <UART_RxISR_8BIT+0xc2>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	6602      	str	r2, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f10:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f14:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f18:	6801      	ldr	r1, [r0, #0]
 8004f1a:	3210      	adds	r2, #16
 8004f1c:	680b      	ldr	r3, [r1, #0]
 8004f1e:	4393      	bics	r3, r2
 8004f20:	600b      	str	r3, [r1, #0]
 8004f22:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f26:	6803      	ldr	r3, [r0, #0]
 8004f28:	69d9      	ldr	r1, [r3, #28]
 8004f2a:	420a      	tst	r2, r1
 8004f2c:	d000      	beq.n	8004f30 <UART_RxISR_8BIT+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f2e:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f30:	2358      	movs	r3, #88	; 0x58
 8004f32:	5ac1      	ldrh	r1, [r0, r3]
 8004f34:	f7ff fe2c 	bl	8004b90 <HAL_UARTEx_RxEventCallback>
 8004f38:	e7aa      	b.n	8004e90 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8004f3a:	f7fc f937 	bl	80011ac <HAL_UART_RxCpltCallback>
 8004f3e:	e7a7      	b.n	8004e90 <UART_RxISR_8BIT+0x18>
 8004f40:	fffffedf 	.word	0xfffffedf
 8004f44:	fbffffff 	.word	0xfbffffff

08004f48 <UART_RxISR_16BIT>:
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f48:	235c      	movs	r3, #92	; 0x5c
{
 8004f4a:	b570      	push	{r4, r5, r6, lr}
  uint16_t uhMask = huart->Mask;
 8004f4c:	5ac4      	ldrh	r4, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f4e:	3324      	adds	r3, #36	; 0x24
 8004f50:	58c2      	ldr	r2, [r0, r3]
 8004f52:	2a22      	cmp	r2, #34	; 0x22
 8004f54:	d005      	beq.n	8004f62 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f56:	2108      	movs	r1, #8
 8004f58:	6802      	ldr	r2, [r0, #0]
 8004f5a:	6993      	ldr	r3, [r2, #24]
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	6193      	str	r3, [r2, #24]
  }
}
 8004f60:	bd70      	pop	{r4, r5, r6, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f62:	6802      	ldr	r2, [r0, #0]
 8004f64:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f66:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f68:	4021      	ands	r1, r4
 8004f6a:	8011      	strh	r1, [r2, #0]
    huart->RxXferCount--;
 8004f6c:	215a      	movs	r1, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 8004f6e:	3202      	adds	r2, #2
 8004f70:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8004f72:	5a42      	ldrh	r2, [r0, r1]
 8004f74:	3a01      	subs	r2, #1
 8004f76:	b292      	uxth	r2, r2
 8004f78:	5242      	strh	r2, [r0, r1]
    if (huart->RxXferCount == 0U)
 8004f7a:	5a42      	ldrh	r2, [r0, r1]
 8004f7c:	b291      	uxth	r1, r2
 8004f7e:	2a00      	cmp	r2, #0
 8004f80:	d1ee      	bne.n	8004f60 <UART_RxISR_16BIT+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f82:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f86:	3201      	adds	r2, #1
 8004f88:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f8c:	6805      	ldr	r5, [r0, #0]
 8004f8e:	4e20      	ldr	r6, [pc, #128]	; (8005010 <UART_RxISR_16BIT+0xc8>)
 8004f90:	682c      	ldr	r4, [r5, #0]
 8004f92:	4034      	ands	r4, r6
 8004f94:	602c      	str	r4, [r5, #0]
 8004f96:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f9a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa2:	6805      	ldr	r5, [r0, #0]
 8004fa4:	68ac      	ldr	r4, [r5, #8]
 8004fa6:	4394      	bics	r4, r2
 8004fa8:	60ac      	str	r4, [r5, #8]
 8004faa:	f38c 8810 	msr	PRIMASK, ip
      huart->RxState = HAL_UART_STATE_READY;
 8004fae:	2420      	movs	r4, #32
 8004fb0:	50c4      	str	r4, [r0, r3]
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fb2:	6803      	ldr	r3, [r0, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fb4:	6641      	str	r1, [r0, #100]	; 0x64
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fb6:	685b      	ldr	r3, [r3, #4]
      huart->RxISR = NULL;
 8004fb8:	6681      	str	r1, [r0, #104]	; 0x68
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	d50a      	bpl.n	8004fd4 <UART_RxISR_16BIT+0x8c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fbe:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc2:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fc6:	6802      	ldr	r2, [r0, #0]
 8004fc8:	4c12      	ldr	r4, [pc, #72]	; (8005014 <UART_RxISR_16BIT+0xcc>)
 8004fca:	6813      	ldr	r3, [r2, #0]
 8004fcc:	4023      	ands	r3, r4
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	f381 8810 	msr	PRIMASK, r1
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d116      	bne.n	8005008 <UART_RxISR_16BIT+0xc0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fda:	2200      	movs	r2, #0
 8004fdc:	6602      	str	r2, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fde:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe2:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe6:	6801      	ldr	r1, [r0, #0]
 8004fe8:	3210      	adds	r2, #16
 8004fea:	680b      	ldr	r3, [r1, #0]
 8004fec:	4393      	bics	r3, r2
 8004fee:	600b      	str	r3, [r1, #0]
 8004ff0:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ff4:	6803      	ldr	r3, [r0, #0]
 8004ff6:	69d9      	ldr	r1, [r3, #28]
 8004ff8:	420a      	tst	r2, r1
 8004ffa:	d000      	beq.n	8004ffe <UART_RxISR_16BIT+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ffc:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ffe:	2358      	movs	r3, #88	; 0x58
 8005000:	5ac1      	ldrh	r1, [r0, r3]
 8005002:	f7ff fdc5 	bl	8004b90 <HAL_UARTEx_RxEventCallback>
 8005006:	e7ab      	b.n	8004f60 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8005008:	f7fc f8d0 	bl	80011ac <HAL_UART_RxCpltCallback>
 800500c:	e7a8      	b.n	8004f60 <UART_RxISR_16BIT+0x18>
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	fffffedf 	.word	0xfffffedf
 8005014:	fbffffff 	.word	0xfbffffff

08005018 <HAL_MultiProcessor_EnterMuteMode>:
  __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 8005018:	2104      	movs	r1, #4
 800501a:	6802      	ldr	r2, [r0, #0]
 800501c:	6993      	ldr	r3, [r2, #24]
 800501e:	430b      	orrs	r3, r1
 8005020:	6193      	str	r3, [r2, #24]
}
 8005022:	4770      	bx	lr

08005024 <UART_SetConfig>:
{
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005028:	6925      	ldr	r5, [r4, #16]
 800502a:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800502c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800502e:	432b      	orrs	r3, r5
 8005030:	6965      	ldr	r5, [r4, #20]
 8005032:	69c1      	ldr	r1, [r0, #28]
 8005034:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005036:	6810      	ldr	r0, [r2, #0]
 8005038:	4d39      	ldr	r5, [pc, #228]	; (8005120 <UART_SetConfig+0xfc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800503a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800503c:	4028      	ands	r0, r5
 800503e:	4303      	orrs	r3, r0
 8005040:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005042:	6853      	ldr	r3, [r2, #4]
 8005044:	4837      	ldr	r0, [pc, #220]	; (8005124 <UART_SetConfig+0x100>)
  tmpreg |= huart->Init.OneBitSampling;
 8005046:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005048:	4003      	ands	r3, r0
 800504a:	68e0      	ldr	r0, [r4, #12]
 800504c:	4303      	orrs	r3, r0
 800504e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005050:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005052:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8005054:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005056:	4d34      	ldr	r5, [pc, #208]	; (8005128 <UART_SetConfig+0x104>)
 8005058:	4028      	ands	r0, r5
 800505a:	4303      	orrs	r3, r0
 800505c:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800505e:	4b33      	ldr	r3, [pc, #204]	; (800512c <UART_SetConfig+0x108>)
 8005060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005062:	2303      	movs	r3, #3
 8005064:	4013      	ands	r3, r2
 8005066:	3b01      	subs	r3, #1
 8005068:	2b02      	cmp	r3, #2
 800506a:	d909      	bls.n	8005080 <UART_SetConfig+0x5c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800506c:	2380      	movs	r3, #128	; 0x80
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	4299      	cmp	r1, r3
 8005072:	d029      	beq.n	80050c8 <UART_SetConfig+0xa4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005074:	f7fe fb36 	bl	80036e4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005078:	2800      	cmp	r0, #0
 800507a:	d10f      	bne.n	800509c <UART_SetConfig+0x78>
 800507c:	2000      	movs	r0, #0
 800507e:	e018      	b.n	80050b2 <UART_SetConfig+0x8e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005080:	2080      	movs	r0, #128	; 0x80
 8005082:	4a2b      	ldr	r2, [pc, #172]	; (8005130 <UART_SetConfig+0x10c>)
 8005084:	0200      	lsls	r0, r0, #8
 8005086:	5cd3      	ldrb	r3, [r2, r3]
 8005088:	4281      	cmp	r1, r0
 800508a:	d035      	beq.n	80050f8 <UART_SetConfig+0xd4>
    switch (clocksource)
 800508c:	2b04      	cmp	r3, #4
 800508e:	d041      	beq.n	8005114 <UART_SetConfig+0xf0>
 8005090:	d813      	bhi.n	80050ba <UART_SetConfig+0x96>
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0ee      	beq.n	8005074 <UART_SetConfig+0x50>
 8005096:	2b02      	cmp	r3, #2
 8005098:	d10a      	bne.n	80050b0 <UART_SetConfig+0x8c>
        pclk = (uint32_t) HSI_VALUE;
 800509a:	4826      	ldr	r0, [pc, #152]	; (8005134 <UART_SetConfig+0x110>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800509c:	6861      	ldr	r1, [r4, #4]
 800509e:	084b      	lsrs	r3, r1, #1
 80050a0:	1818      	adds	r0, r3, r0
 80050a2:	f7fb f831 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050a6:	0002      	movs	r2, r0
 80050a8:	4b23      	ldr	r3, [pc, #140]	; (8005138 <UART_SetConfig+0x114>)
 80050aa:	3a10      	subs	r2, #16
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d907      	bls.n	80050c0 <UART_SetConfig+0x9c>
    switch (clocksource)
 80050b0:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80050b6:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80050b8:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d0ee      	beq.n	800509c <UART_SetConfig+0x78>
 80050be:	e7f7      	b.n	80050b0 <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	60d8      	str	r0, [r3, #12]
 80050c4:	2000      	movs	r0, #0
 80050c6:	e7f4      	b.n	80050b2 <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c8:	f7fe fb0c 	bl	80036e4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80050cc:	2800      	cmp	r0, #0
 80050ce:	d0d5      	beq.n	800507c <UART_SetConfig+0x58>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050d0:	0043      	lsls	r3, r0, #1
 80050d2:	6861      	ldr	r1, [r4, #4]
 80050d4:	0848      	lsrs	r0, r1, #1
 80050d6:	18c0      	adds	r0, r0, r3
 80050d8:	f7fb f816 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050dc:	0002      	movs	r2, r0
 80050de:	4b16      	ldr	r3, [pc, #88]	; (8005138 <UART_SetConfig+0x114>)
 80050e0:	3a10      	subs	r2, #16
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d8e4      	bhi.n	80050b0 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050e6:	4b15      	ldr	r3, [pc, #84]	; (800513c <UART_SetConfig+0x118>)
        huart->Instance->BRR = brrtemp;
 80050e8:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050ea:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050ec:	0700      	lsls	r0, r0, #28
 80050ee:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80050f0:	4303      	orrs	r3, r0
 80050f2:	60d3      	str	r3, [r2, #12]
 80050f4:	2000      	movs	r0, #0
 80050f6:	e7dc      	b.n	80050b2 <UART_SetConfig+0x8e>
    switch (clocksource)
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d00e      	beq.n	800511a <UART_SetConfig+0xf6>
 80050fc:	d805      	bhi.n	800510a <UART_SetConfig+0xe6>
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0e2      	beq.n	80050c8 <UART_SetConfig+0xa4>
 8005102:	2b02      	cmp	r3, #2
 8005104:	d1d4      	bne.n	80050b0 <UART_SetConfig+0x8c>
 8005106:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <UART_SetConfig+0x11c>)
 8005108:	e7e3      	b.n	80050d2 <UART_SetConfig+0xae>
 800510a:	2b08      	cmp	r3, #8
 800510c:	d1d0      	bne.n	80050b0 <UART_SetConfig+0x8c>
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	025b      	lsls	r3, r3, #9
 8005112:	e7de      	b.n	80050d2 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8005114:	f7fe fa30 	bl	8003578 <HAL_RCC_GetSysClockFreq>
        break;
 8005118:	e7ae      	b.n	8005078 <UART_SetConfig+0x54>
        pclk = HAL_RCC_GetSysClockFreq();
 800511a:	f7fe fa2d 	bl	8003578 <HAL_RCC_GetSysClockFreq>
        break;
 800511e:	e7d5      	b.n	80050cc <UART_SetConfig+0xa8>
 8005120:	ffff69f3 	.word	0xffff69f3
 8005124:	ffffcfff 	.word	0xffffcfff
 8005128:	fffff4ff 	.word	0xfffff4ff
 800512c:	40021000 	.word	0x40021000
 8005130:	0800642c 	.word	0x0800642c
 8005134:	007a1200 	.word	0x007a1200
 8005138:	0000ffef 	.word	0x0000ffef
 800513c:	0000fff0 	.word	0x0000fff0
 8005140:	00f42400 	.word	0x00f42400

08005144 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005144:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8005146:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005148:	07da      	lsls	r2, r3, #31
 800514a:	d506      	bpl.n	800515a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800514c:	6801      	ldr	r1, [r0, #0]
 800514e:	4c28      	ldr	r4, [pc, #160]	; (80051f0 <UART_AdvFeatureConfig+0xac>)
 8005150:	684a      	ldr	r2, [r1, #4]
 8005152:	4022      	ands	r2, r4
 8005154:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005156:	4322      	orrs	r2, r4
 8005158:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800515a:	079a      	lsls	r2, r3, #30
 800515c:	d506      	bpl.n	800516c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800515e:	6801      	ldr	r1, [r0, #0]
 8005160:	4c24      	ldr	r4, [pc, #144]	; (80051f4 <UART_AdvFeatureConfig+0xb0>)
 8005162:	684a      	ldr	r2, [r1, #4]
 8005164:	4022      	ands	r2, r4
 8005166:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005168:	4322      	orrs	r2, r4
 800516a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800516c:	075a      	lsls	r2, r3, #29
 800516e:	d506      	bpl.n	800517e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005170:	6801      	ldr	r1, [r0, #0]
 8005172:	4c21      	ldr	r4, [pc, #132]	; (80051f8 <UART_AdvFeatureConfig+0xb4>)
 8005174:	684a      	ldr	r2, [r1, #4]
 8005176:	4022      	ands	r2, r4
 8005178:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800517a:	4322      	orrs	r2, r4
 800517c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800517e:	071a      	lsls	r2, r3, #28
 8005180:	d506      	bpl.n	8005190 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005182:	6801      	ldr	r1, [r0, #0]
 8005184:	4c1d      	ldr	r4, [pc, #116]	; (80051fc <UART_AdvFeatureConfig+0xb8>)
 8005186:	684a      	ldr	r2, [r1, #4]
 8005188:	4022      	ands	r2, r4
 800518a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800518c:	4322      	orrs	r2, r4
 800518e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005190:	06da      	lsls	r2, r3, #27
 8005192:	d506      	bpl.n	80051a2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005194:	6801      	ldr	r1, [r0, #0]
 8005196:	4c1a      	ldr	r4, [pc, #104]	; (8005200 <UART_AdvFeatureConfig+0xbc>)
 8005198:	688a      	ldr	r2, [r1, #8]
 800519a:	4022      	ands	r2, r4
 800519c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800519e:	4322      	orrs	r2, r4
 80051a0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051a2:	069a      	lsls	r2, r3, #26
 80051a4:	d506      	bpl.n	80051b4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051a6:	6801      	ldr	r1, [r0, #0]
 80051a8:	4c16      	ldr	r4, [pc, #88]	; (8005204 <UART_AdvFeatureConfig+0xc0>)
 80051aa:	688a      	ldr	r2, [r1, #8]
 80051ac:	4022      	ands	r2, r4
 80051ae:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80051b0:	4322      	orrs	r2, r4
 80051b2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051b4:	065a      	lsls	r2, r3, #25
 80051b6:	d50a      	bpl.n	80051ce <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051b8:	6801      	ldr	r1, [r0, #0]
 80051ba:	4d13      	ldr	r5, [pc, #76]	; (8005208 <UART_AdvFeatureConfig+0xc4>)
 80051bc:	684a      	ldr	r2, [r1, #4]
 80051be:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80051c0:	402a      	ands	r2, r5
 80051c2:	4322      	orrs	r2, r4
 80051c4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051c6:	2280      	movs	r2, #128	; 0x80
 80051c8:	0352      	lsls	r2, r2, #13
 80051ca:	4294      	cmp	r4, r2
 80051cc:	d009      	beq.n	80051e2 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051ce:	061b      	lsls	r3, r3, #24
 80051d0:	d506      	bpl.n	80051e0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051d2:	6802      	ldr	r2, [r0, #0]
 80051d4:	490d      	ldr	r1, [pc, #52]	; (800520c <UART_AdvFeatureConfig+0xc8>)
 80051d6:	6853      	ldr	r3, [r2, #4]
 80051d8:	400b      	ands	r3, r1
 80051da:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80051dc:	430b      	orrs	r3, r1
 80051de:	6053      	str	r3, [r2, #4]
}
 80051e0:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051e2:	684a      	ldr	r2, [r1, #4]
 80051e4:	4c0a      	ldr	r4, [pc, #40]	; (8005210 <UART_AdvFeatureConfig+0xcc>)
 80051e6:	4022      	ands	r2, r4
 80051e8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80051ea:	4322      	orrs	r2, r4
 80051ec:	604a      	str	r2, [r1, #4]
 80051ee:	e7ee      	b.n	80051ce <UART_AdvFeatureConfig+0x8a>
 80051f0:	fffdffff 	.word	0xfffdffff
 80051f4:	fffeffff 	.word	0xfffeffff
 80051f8:	fffbffff 	.word	0xfffbffff
 80051fc:	ffff7fff 	.word	0xffff7fff
 8005200:	ffffefff 	.word	0xffffefff
 8005204:	ffffdfff 	.word	0xffffdfff
 8005208:	ffefffff 	.word	0xffefffff
 800520c:	fff7ffff 	.word	0xfff7ffff
 8005210:	ff9fffff 	.word	0xff9fffff

08005214 <UART_WaitOnFlagUntilTimeout>:
{
 8005214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005216:	4645      	mov	r5, r8
 8005218:	4698      	mov	r8, r3
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800521a:	2304      	movs	r3, #4
{
 800521c:	4657      	mov	r7, sl
 800521e:	464e      	mov	r6, r9
 8005220:	46de      	mov	lr, fp
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005222:	469a      	mov	sl, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005224:	3304      	adds	r3, #4
 8005226:	4699      	mov	r9, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005228:	2380      	movs	r3, #128	; 0x80
{
 800522a:	b5e0      	push	{r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800522c:	011b      	lsls	r3, r3, #4
{
 800522e:	b083      	sub	sp, #12
 8005230:	0015      	movs	r5, r2
 8005232:	0007      	movs	r7, r0
 8005234:	000c      	movs	r4, r1
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005236:	469b      	mov	fp, r3
{
 8005238:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523a:	6802      	ldr	r2, [r0, #0]
 800523c:	e001      	b.n	8005242 <UART_WaitOnFlagUntilTimeout+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 800523e:	1c73      	adds	r3, r6, #1
 8005240:	d10e      	bne.n	8005260 <UART_WaitOnFlagUntilTimeout+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005242:	69d3      	ldr	r3, [r2, #28]
 8005244:	4023      	ands	r3, r4
 8005246:	1b1b      	subs	r3, r3, r4
 8005248:	4259      	negs	r1, r3
 800524a:	414b      	adcs	r3, r1
 800524c:	42ab      	cmp	r3, r5
 800524e:	d0f6      	beq.n	800523e <UART_WaitOnFlagUntilTimeout+0x2a>
  return HAL_OK;
 8005250:	2000      	movs	r0, #0
}
 8005252:	b003      	add	sp, #12
 8005254:	bcf0      	pop	{r4, r5, r6, r7}
 8005256:	46bb      	mov	fp, r7
 8005258:	46b2      	mov	sl, r6
 800525a:	46a9      	mov	r9, r5
 800525c:	46a0      	mov	r8, r4
 800525e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005260:	f7fc fd9c 	bl	8001d9c <HAL_GetTick>
 8005264:	4643      	mov	r3, r8
 8005266:	1ac0      	subs	r0, r0, r3
 8005268:	42b0      	cmp	r0, r6
 800526a:	d81d      	bhi.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x94>
 800526c:	2e00      	cmp	r6, #0
 800526e:	d01b      	beq.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005270:	4651      	mov	r1, sl
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	6813      	ldr	r3, [r2, #0]
 8005276:	4219      	tst	r1, r3
 8005278:	d0e3      	beq.n	8005242 <UART_WaitOnFlagUntilTimeout+0x2e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800527a:	4649      	mov	r1, r9
 800527c:	69d3      	ldr	r3, [r2, #28]
 800527e:	4019      	ands	r1, r3
 8005280:	9101      	str	r1, [sp, #4]
 8005282:	4649      	mov	r1, r9
 8005284:	4219      	tst	r1, r3
 8005286:	d111      	bne.n	80052ac <UART_WaitOnFlagUntilTimeout+0x98>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005288:	4659      	mov	r1, fp
 800528a:	69d3      	ldr	r3, [r2, #28]
 800528c:	420b      	tst	r3, r1
 800528e:	d0d8      	beq.n	8005242 <UART_WaitOnFlagUntilTimeout+0x2e>
          UART_EndRxTransfer(huart);
 8005290:	0038      	movs	r0, r7
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005292:	6211      	str	r1, [r2, #32]
          UART_EndRxTransfer(huart);
 8005294:	f7ff fb92 	bl	80049bc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005298:	2384      	movs	r3, #132	; 0x84
 800529a:	2220      	movs	r2, #32
 800529c:	50fa      	str	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 800529e:	9a01      	ldr	r2, [sp, #4]
 80052a0:	3b0c      	subs	r3, #12
          return HAL_TIMEOUT;
 80052a2:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80052a4:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 80052a6:	e7d4      	b.n	8005252 <UART_WaitOnFlagUntilTimeout+0x3e>
        return HAL_TIMEOUT;
 80052a8:	2003      	movs	r0, #3
 80052aa:	e7d2      	b.n	8005252 <UART_WaitOnFlagUntilTimeout+0x3e>
           UART_EndRxTransfer(huart);
 80052ac:	0038      	movs	r0, r7
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052ae:	6211      	str	r1, [r2, #32]
           UART_EndRxTransfer(huart);
 80052b0:	f7ff fb84 	bl	80049bc <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052b4:	2384      	movs	r3, #132	; 0x84
 80052b6:	464a      	mov	r2, r9
 80052b8:	50fa      	str	r2, [r7, r3]
           __HAL_UNLOCK(huart);
 80052ba:	2200      	movs	r2, #0
 80052bc:	3b0c      	subs	r3, #12
           return HAL_ERROR;
 80052be:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 80052c0:	54fa      	strb	r2, [r7, r3]
           return HAL_ERROR;
 80052c2:	e7c6      	b.n	8005252 <UART_WaitOnFlagUntilTimeout+0x3e>

080052c4 <HAL_UART_Transmit>:
{
 80052c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c6:	4647      	mov	r7, r8
 80052c8:	46ce      	mov	lr, r9
 80052ca:	b580      	push	{r7, lr}
 80052cc:	001f      	movs	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80052ce:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 80052d0:	0004      	movs	r4, r0
 80052d2:	000d      	movs	r5, r1
 80052d4:	0016      	movs	r6, r2
 80052d6:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d14c      	bne.n	8005376 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 80052dc:	2900      	cmp	r1, #0
 80052de:	d044      	beq.n	800536a <HAL_UART_Transmit+0xa6>
 80052e0:	2a00      	cmp	r2, #0
 80052e2:	d042      	beq.n	800536a <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e4:	2380      	movs	r3, #128	; 0x80
 80052e6:	6882      	ldr	r2, [r0, #8]
 80052e8:	015b      	lsls	r3, r3, #5
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d104      	bne.n	80052f8 <HAL_UART_Transmit+0x34>
 80052ee:	6903      	ldr	r3, [r0, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 80052f4:	07cb      	lsls	r3, r1, #31
 80052f6:	d438      	bmi.n	800536a <HAL_UART_Transmit+0xa6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f8:	2200      	movs	r2, #0
 80052fa:	2384      	movs	r3, #132	; 0x84
 80052fc:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052fe:	3b63      	subs	r3, #99	; 0x63
 8005300:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8005302:	f7fc fd4b 	bl	8001d9c <HAL_GetTick>
    huart->TxXferSize  = Size;
 8005306:	2350      	movs	r3, #80	; 0x50
 8005308:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 800530a:	3302      	adds	r3, #2
      pdata16bits = NULL;
 800530c:	2100      	movs	r1, #0
    huart->TxXferCount = Size;
 800530e:	52e6      	strh	r6, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005310:	2380      	movs	r3, #128	; 0x80
 8005312:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8005314:	4680      	mov	r8, r0
      pdata16bits = NULL;
 8005316:	4689      	mov	r9, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005318:	015b      	lsls	r3, r3, #5
 800531a:	429a      	cmp	r2, r3
 800531c:	d03e      	beq.n	800539c <HAL_UART_Transmit+0xd8>
    while (huart->TxXferCount > 0U)
 800531e:	2352      	movs	r3, #82	; 0x52
 8005320:	5ae3      	ldrh	r3, [r4, r3]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d029      	beq.n	800537a <HAL_UART_Transmit+0xb6>
      huart->TxXferCount--;
 8005326:	2652      	movs	r6, #82	; 0x52
 8005328:	e00a      	b.n	8005340 <HAL_UART_Transmit+0x7c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800532a:	782a      	ldrb	r2, [r5, #0]
 800532c:	6823      	ldr	r3, [r4, #0]
        pdata8bits++;
 800532e:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005330:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8005332:	5ba2      	ldrh	r2, [r4, r6]
 8005334:	3a01      	subs	r2, #1
 8005336:	b292      	uxth	r2, r2
 8005338:	53a2      	strh	r2, [r4, r6]
    while (huart->TxXferCount > 0U)
 800533a:	5ba3      	ldrh	r3, [r4, r6]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01c      	beq.n	800537a <HAL_UART_Transmit+0xb6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005340:	4643      	mov	r3, r8
 8005342:	2200      	movs	r2, #0
 8005344:	2180      	movs	r1, #128	; 0x80
 8005346:	0020      	movs	r0, r4
 8005348:	9700      	str	r7, [sp, #0]
 800534a:	f7ff ff63 	bl	8005214 <UART_WaitOnFlagUntilTimeout>
 800534e:	2800      	cmp	r0, #0
 8005350:	d120      	bne.n	8005394 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8005352:	2d00      	cmp	r5, #0
 8005354:	d1e9      	bne.n	800532a <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005356:	464b      	mov	r3, r9
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	05db      	lsls	r3, r3, #23
 800535e:	0ddb      	lsrs	r3, r3, #23
 8005360:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8005362:	2302      	movs	r3, #2
 8005364:	469c      	mov	ip, r3
 8005366:	44e1      	add	r9, ip
 8005368:	e7e3      	b.n	8005332 <HAL_UART_Transmit+0x6e>
      return  HAL_ERROR;
 800536a:	2001      	movs	r0, #1
}
 800536c:	b003      	add	sp, #12
 800536e:	bcc0      	pop	{r6, r7}
 8005370:	46b9      	mov	r9, r7
 8005372:	46b0      	mov	r8, r6
 8005374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005376:	2002      	movs	r0, #2
 8005378:	e7f8      	b.n	800536c <HAL_UART_Transmit+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800537a:	4643      	mov	r3, r8
 800537c:	2200      	movs	r2, #0
 800537e:	2140      	movs	r1, #64	; 0x40
 8005380:	0020      	movs	r0, r4
 8005382:	9700      	str	r7, [sp, #0]
 8005384:	f7ff ff46 	bl	8005214 <UART_WaitOnFlagUntilTimeout>
      huart->gState = HAL_UART_STATE_READY;
 8005388:	2320      	movs	r3, #32
 800538a:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800538c:	2800      	cmp	r0, #0
 800538e:	d0ed      	beq.n	800536c <HAL_UART_Transmit+0xa8>
      return HAL_TIMEOUT;
 8005390:	2003      	movs	r0, #3
 8005392:	e7eb      	b.n	800536c <HAL_UART_Transmit+0xa8>
        huart->gState = HAL_UART_STATE_READY;
 8005394:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8005396:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8005398:	67e3      	str	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 800539a:	e7e7      	b.n	800536c <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800539c:	6923      	ldr	r3, [r4, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1bd      	bne.n	800531e <HAL_UART_Transmit+0x5a>
 80053a2:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80053a4:	2500      	movs	r5, #0
 80053a6:	e7ba      	b.n	800531e <HAL_UART_Transmit+0x5a>

080053a8 <HAL_UART_Receive>:
{
 80053a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053aa:	464f      	mov	r7, r9
 80053ac:	4646      	mov	r6, r8
 80053ae:	46d6      	mov	lr, sl
 80053b0:	b5c0      	push	{r6, r7, lr}
 80053b2:	001f      	movs	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80053b4:	2380      	movs	r3, #128	; 0x80
 80053b6:	58c3      	ldr	r3, [r0, r3]
{
 80053b8:	0004      	movs	r4, r0
 80053ba:	000d      	movs	r5, r1
 80053bc:	0016      	movs	r6, r2
 80053be:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	d154      	bne.n	800546e <HAL_UART_Receive+0xc6>
    if ((pData == NULL) || (Size == 0U))
 80053c4:	2900      	cmp	r1, #0
 80053c6:	d04b      	beq.n	8005460 <HAL_UART_Receive+0xb8>
 80053c8:	2a00      	cmp	r2, #0
 80053ca:	d049      	beq.n	8005460 <HAL_UART_Receive+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053cc:	2380      	movs	r3, #128	; 0x80
 80053ce:	6882      	ldr	r2, [r0, #8]
 80053d0:	015b      	lsls	r3, r3, #5
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d104      	bne.n	80053e0 <HAL_UART_Receive+0x38>
 80053d6:	6903      	ldr	r3, [r0, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_UART_Receive+0x38>
      if ((((uint32_t)pData) & 1U) != 0U)
 80053dc:	07cb      	lsls	r3, r1, #31
 80053de:	d43f      	bmi.n	8005460 <HAL_UART_Receive+0xb8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e0:	2300      	movs	r3, #0
 80053e2:	2284      	movs	r2, #132	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053e4:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e6:	50a3      	str	r3, [r4, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053e8:	3a04      	subs	r2, #4
 80053ea:	50a1      	str	r1, [r4, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ec:	6623      	str	r3, [r4, #96]	; 0x60
    tickstart = HAL_GetTick();
 80053ee:	f7fc fcd5 	bl	8001d9c <HAL_GetTick>
    huart->RxXferSize  = Size;
 80053f2:	2358      	movs	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 80053f4:	2280      	movs	r2, #128	; 0x80
    huart->RxXferSize  = Size;
 80053f6:	52e6      	strh	r6, [r4, r3]
    huart->RxXferCount = Size;
 80053f8:	3302      	adds	r3, #2
 80053fa:	52e6      	strh	r6, [r4, r3]
    UART_MASK_COMPUTATION(huart);
 80053fc:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80053fe:	4681      	mov	r9, r0
    UART_MASK_COMPUTATION(huart);
 8005400:	0152      	lsls	r2, r2, #5
 8005402:	4293      	cmp	r3, r2
 8005404:	d04a      	beq.n	800549c <HAL_UART_Receive+0xf4>
 8005406:	2200      	movs	r2, #0
 8005408:	4690      	mov	r8, r2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d031      	beq.n	8005472 <HAL_UART_Receive+0xca>
 800540e:	235c      	movs	r3, #92	; 0x5c
 8005410:	4642      	mov	r2, r8
 8005412:	52e2      	strh	r2, [r4, r3]
      pdata16bits = NULL;
 8005414:	2300      	movs	r3, #0
 8005416:	469a      	mov	sl, r3
    while (huart->RxXferCount > 0U)
 8005418:	235a      	movs	r3, #90	; 0x5a
 800541a:	5ae3      	ldrh	r3, [r4, r3]
      huart->RxXferCount--;
 800541c:	265a      	movs	r6, #90	; 0x5a
    while (huart->RxXferCount > 0U)
 800541e:	2b00      	cmp	r3, #0
 8005420:	d109      	bne.n	8005436 <HAL_UART_Receive+0x8e>
 8005422:	e031      	b.n	8005488 <HAL_UART_Receive+0xe0>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005424:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8005426:	3501      	adds	r5, #1
      huart->RxXferCount--;
 8005428:	5ba2      	ldrh	r2, [r4, r6]
 800542a:	3a01      	subs	r2, #1
 800542c:	b292      	uxth	r2, r2
 800542e:	53a2      	strh	r2, [r4, r6]
    while (huart->RxXferCount > 0U)
 8005430:	5ba3      	ldrh	r3, [r4, r6]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d028      	beq.n	8005488 <HAL_UART_Receive+0xe0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005436:	464b      	mov	r3, r9
 8005438:	2200      	movs	r2, #0
 800543a:	2120      	movs	r1, #32
 800543c:	0020      	movs	r0, r4
 800543e:	9700      	str	r7, [sp, #0]
 8005440:	f7ff fee8 	bl	8005214 <UART_WaitOnFlagUntilTimeout>
 8005444:	2800      	cmp	r0, #0
 8005446:	d124      	bne.n	8005492 <HAL_UART_Receive+0xea>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005448:	4642      	mov	r2, r8
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800544e:	4013      	ands	r3, r2
      if (pdata8bits == NULL)
 8005450:	2d00      	cmp	r5, #0
 8005452:	d1e7      	bne.n	8005424 <HAL_UART_Receive+0x7c>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005454:	4652      	mov	r2, sl
 8005456:	8013      	strh	r3, [r2, #0]
        pdata16bits++;
 8005458:	2302      	movs	r3, #2
 800545a:	469c      	mov	ip, r3
 800545c:	44e2      	add	sl, ip
 800545e:	e7e3      	b.n	8005428 <HAL_UART_Receive+0x80>
      return  HAL_ERROR;
 8005460:	2001      	movs	r0, #1
}
 8005462:	b002      	add	sp, #8
 8005464:	bce0      	pop	{r5, r6, r7}
 8005466:	46ba      	mov	sl, r7
 8005468:	46b1      	mov	r9, r6
 800546a:	46a8      	mov	r8, r5
 800546c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800546e:	2002      	movs	r0, #2
 8005470:	e7f7      	b.n	8005462 <HAL_UART_Receive+0xba>
    UART_MASK_COMPUTATION(huart);
 8005472:	6923      	ldr	r3, [r4, #16]
 8005474:	1e5a      	subs	r2, r3, #1
 8005476:	4193      	sbcs	r3, r2
 8005478:	227f      	movs	r2, #127	; 0x7f
 800547a:	425b      	negs	r3, r3
 800547c:	4393      	bics	r3, r2
 800547e:	4698      	mov	r8, r3
 8005480:	23ff      	movs	r3, #255	; 0xff
 8005482:	469c      	mov	ip, r3
 8005484:	44e0      	add	r8, ip
 8005486:	e7c2      	b.n	800540e <HAL_UART_Receive+0x66>
    huart->RxState = HAL_UART_STATE_READY;
 8005488:	2380      	movs	r3, #128	; 0x80
 800548a:	2220      	movs	r2, #32
    return HAL_OK;
 800548c:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 800548e:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8005490:	e7e7      	b.n	8005462 <HAL_UART_Receive+0xba>
        huart->RxState = HAL_UART_STATE_READY;
 8005492:	2380      	movs	r3, #128	; 0x80
 8005494:	2220      	movs	r2, #32
        return HAL_TIMEOUT;
 8005496:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8005498:	50e2      	str	r2, [r4, r3]
        return HAL_TIMEOUT;
 800549a:	e7e2      	b.n	8005462 <HAL_UART_Receive+0xba>
    UART_MASK_COMPUTATION(huart);
 800549c:	6923      	ldr	r3, [r4, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_UART_Receive+0x108>
 80054a2:	225c      	movs	r2, #92	; 0x5c
 80054a4:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <HAL_UART_Receive+0x118>)
 80054a6:	46aa      	mov	sl, r5
 80054a8:	4698      	mov	r8, r3
      pdata8bits  = NULL;
 80054aa:	2500      	movs	r5, #0
 80054ac:	52a3      	strh	r3, [r4, r2]
 80054ae:	e7b3      	b.n	8005418 <HAL_UART_Receive+0x70>
 80054b0:	235c      	movs	r3, #92	; 0x5c
 80054b2:	22ff      	movs	r2, #255	; 0xff
 80054b4:	52e2      	strh	r2, [r4, r3]
    UART_MASK_COMPUTATION(huart);
 80054b6:	33a3      	adds	r3, #163	; 0xa3
 80054b8:	4698      	mov	r8, r3
      pdata16bits = NULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	469a      	mov	sl, r3
 80054be:	e7ab      	b.n	8005418 <HAL_UART_Receive+0x70>
 80054c0:	000001ff 	.word	0x000001ff

080054c4 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c4:	2200      	movs	r2, #0
 80054c6:	2384      	movs	r3, #132	; 0x84
{
 80054c8:	b530      	push	{r4, r5, lr}
 80054ca:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054cc:	50c2      	str	r2, [r0, r3]
{
 80054ce:	b083      	sub	sp, #12
  tickstart = HAL_GetTick();
 80054d0:	f7fc fc64 	bl	8001d9c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054d4:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80054d6:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054d8:	6811      	ldr	r1, [r2, #0]
 80054da:	0709      	lsls	r1, r1, #28
 80054dc:	d40f      	bmi.n	80054fe <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054de:	6812      	ldr	r2, [r2, #0]
 80054e0:	0752      	lsls	r2, r2, #29
 80054e2:	d41b      	bmi.n	800551c <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80054e4:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 80054e6:	2280      	movs	r2, #128	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80054e8:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054ea:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ec:	2300      	movs	r3, #0
  return HAL_OK;
 80054ee:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f0:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054f2:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 80054f4:	2378      	movs	r3, #120	; 0x78
 80054f6:	2200      	movs	r2, #0
 80054f8:	54e2      	strb	r2, [r4, r3]
}
 80054fa:	b003      	add	sp, #12
 80054fc:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054fe:	2180      	movs	r1, #128	; 0x80
 8005500:	4b21      	ldr	r3, [pc, #132]	; (8005588 <UART_CheckIdleState+0xc4>)
 8005502:	2200      	movs	r2, #0
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	0389      	lsls	r1, r1, #14
 8005508:	0003      	movs	r3, r0
 800550a:	0020      	movs	r0, r4
 800550c:	f7ff fe82 	bl	8005214 <UART_WaitOnFlagUntilTimeout>
 8005510:	2800      	cmp	r0, #0
 8005512:	d129      	bne.n	8005568 <UART_CheckIdleState+0xa4>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005514:	6822      	ldr	r2, [r4, #0]
 8005516:	6812      	ldr	r2, [r2, #0]
 8005518:	0752      	lsls	r2, r2, #29
 800551a:	d5e3      	bpl.n	80054e4 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800551c:	2180      	movs	r1, #128	; 0x80
 800551e:	4b1a      	ldr	r3, [pc, #104]	; (8005588 <UART_CheckIdleState+0xc4>)
 8005520:	2200      	movs	r2, #0
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	0020      	movs	r0, r4
 8005526:	002b      	movs	r3, r5
 8005528:	03c9      	lsls	r1, r1, #15
 800552a:	f7ff fe73 	bl	8005214 <UART_WaitOnFlagUntilTimeout>
 800552e:	2800      	cmp	r0, #0
 8005530:	d0d8      	beq.n	80054e4 <UART_CheckIdleState+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005532:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005536:	2201      	movs	r2, #1
 8005538:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800553c:	6821      	ldr	r1, [r4, #0]
 800553e:	4d13      	ldr	r5, [pc, #76]	; (800558c <UART_CheckIdleState+0xc8>)
 8005540:	680b      	ldr	r3, [r1, #0]
 8005542:	402b      	ands	r3, r5
 8005544:	600b      	str	r3, [r1, #0]
 8005546:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800554a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005552:	6821      	ldr	r1, [r4, #0]
 8005554:	688b      	ldr	r3, [r1, #8]
 8005556:	4393      	bics	r3, r2
 8005558:	608b      	str	r3, [r1, #8]
 800555a:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800555e:	2380      	movs	r3, #128	; 0x80
 8005560:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 8005562:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 8005564:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8005566:	e7c5      	b.n	80054f4 <UART_CheckIdleState+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005568:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800556c:	2301      	movs	r3, #1
 800556e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005572:	2080      	movs	r0, #128	; 0x80
 8005574:	6822      	ldr	r2, [r4, #0]
 8005576:	6813      	ldr	r3, [r2, #0]
 8005578:	4383      	bics	r3, r0
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8005580:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8005582:	387d      	subs	r0, #125	; 0x7d
      huart->gState = HAL_UART_STATE_READY;
 8005584:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8005586:	e7b5      	b.n	80054f4 <UART_CheckIdleState+0x30>
 8005588:	01ffffff 	.word	0x01ffffff
 800558c:	fffffedf 	.word	0xfffffedf

08005590 <HAL_UART_Init>:
{
 8005590:	b510      	push	{r4, lr}
 8005592:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005594:	d026      	beq.n	80055e4 <HAL_UART_Init+0x54>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005596:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005598:	2b00      	cmp	r3, #0
 800559a:	d025      	beq.n	80055e8 <HAL_UART_Init+0x58>
  huart->gState = HAL_UART_STATE_BUSY;
 800559c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800559e:	2101      	movs	r1, #1
 80055a0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80055a2:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80055a4:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055a6:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80055a8:	438b      	bics	r3, r1
 80055aa:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055ac:	f7ff fd3a 	bl	8005024 <UART_SetConfig>
 80055b0:	2801      	cmp	r0, #1
 80055b2:	d017      	beq.n	80055e4 <HAL_UART_Init+0x54>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d110      	bne.n	80055dc <HAL_UART_Init+0x4c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	490d      	ldr	r1, [pc, #52]	; (80055f4 <HAL_UART_Init+0x64>)
 80055be:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80055c0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055c2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055c4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	438a      	bics	r2, r1
 80055cc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	3929      	subs	r1, #41	; 0x29
 80055d2:	430a      	orrs	r2, r1
 80055d4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80055d6:	f7ff ff75 	bl	80054c4 <UART_CheckIdleState>
}
 80055da:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 80055dc:	0020      	movs	r0, r4
 80055de:	f7ff fdb1 	bl	8005144 <UART_AdvFeatureConfig>
 80055e2:	e7ea      	b.n	80055ba <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80055e4:	2001      	movs	r0, #1
 80055e6:	e7f8      	b.n	80055da <HAL_UART_Init+0x4a>
    huart->Lock = HAL_UNLOCKED;
 80055e8:	2278      	movs	r2, #120	; 0x78
 80055ea:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 80055ec:	f7fc fa32 	bl	8001a54 <HAL_UART_MspInit>
 80055f0:	e7d4      	b.n	800559c <HAL_UART_Init+0xc>
 80055f2:	46c0      	nop			; (mov r8, r8)
 80055f4:	ffffb7ff 	.word	0xffffb7ff

080055f8 <HAL_MultiProcessor_Init>:
{
 80055f8:	b570      	push	{r4, r5, r6, lr}
 80055fa:	0004      	movs	r4, r0
 80055fc:	000e      	movs	r6, r1
 80055fe:	0015      	movs	r5, r2
  if (huart == NULL)
 8005600:	2800      	cmp	r0, #0
 8005602:	d036      	beq.n	8005672 <HAL_MultiProcessor_Init+0x7a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005604:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d035      	beq.n	8005676 <HAL_MultiProcessor_Init+0x7e>
  huart->gState = HAL_UART_STATE_BUSY;
 800560a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800560c:	2101      	movs	r1, #1
 800560e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005610:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8005612:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005614:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8005616:	438b      	bics	r3, r1
 8005618:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800561a:	f7ff fd03 	bl	8005024 <UART_SetConfig>
 800561e:	2801      	cmp	r0, #1
 8005620:	d027      	beq.n	8005672 <HAL_MultiProcessor_Init+0x7a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005624:	2b00      	cmp	r3, #0
 8005626:	d120      	bne.n	800566a <HAL_MultiProcessor_Init+0x72>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	4915      	ldr	r1, [pc, #84]	; (8005680 <HAL_MultiProcessor_Init+0x88>)
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005630:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	438a      	bics	r2, r1
 8005638:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800563a:	2280      	movs	r2, #128	; 0x80
 800563c:	0112      	lsls	r2, r2, #4
 800563e:	4295      	cmp	r5, r2
 8005640:	d00c      	beq.n	800565c <HAL_MultiProcessor_Init+0x64>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	490f      	ldr	r1, [pc, #60]	; (8005684 <HAL_MultiProcessor_Init+0x8c>)
  return (UART_CheckIdleState(huart));
 8005646:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8005648:	400a      	ands	r2, r1
  __HAL_UART_ENABLE(huart);
 800564a:	2101      	movs	r1, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800564c:	432a      	orrs	r2, r5
 800564e:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005656:	f7ff ff35 	bl	80054c4 <UART_CheckIdleState>
}
 800565a:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	0636      	lsls	r6, r6, #24
 8005660:	0212      	lsls	r2, r2, #8
 8005662:	0a12      	lsrs	r2, r2, #8
 8005664:	4316      	orrs	r6, r2
 8005666:	605e      	str	r6, [r3, #4]
 8005668:	e7eb      	b.n	8005642 <HAL_MultiProcessor_Init+0x4a>
    UART_AdvFeatureConfig(huart);
 800566a:	0020      	movs	r0, r4
 800566c:	f7ff fd6a 	bl	8005144 <UART_AdvFeatureConfig>
 8005670:	e7da      	b.n	8005628 <HAL_MultiProcessor_Init+0x30>
    return HAL_ERROR;
 8005672:	2001      	movs	r0, #1
 8005674:	e7f1      	b.n	800565a <HAL_MultiProcessor_Init+0x62>
    huart->Lock = HAL_UNLOCKED;
 8005676:	2278      	movs	r2, #120	; 0x78
 8005678:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 800567a:	f7fc f9eb 	bl	8001a54 <HAL_UART_MspInit>
 800567e:	e7c4      	b.n	800560a <HAL_MultiProcessor_Init+0x12>
 8005680:	ffffb7ff 	.word	0xffffb7ff
 8005684:	fffff7ff 	.word	0xfffff7ff

08005688 <HAL_MultiProcessor_EnableMuteMode>:
  __HAL_LOCK(huart);
 8005688:	2378      	movs	r3, #120	; 0x78
{
 800568a:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 800568c:	5cc2      	ldrb	r2, [r0, r3]
 800568e:	2a01      	cmp	r2, #1
 8005690:	d014      	beq.n	80056bc <HAL_MultiProcessor_EnableMuteMode+0x34>
 8005692:	2201      	movs	r2, #1
 8005694:	54c2      	strb	r2, [r0, r3]
  huart->gState = HAL_UART_STATE_BUSY;
 8005696:	3b54      	subs	r3, #84	; 0x54
 8005698:	67c3      	str	r3, [r0, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800569a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_MME);
 80056a2:	2380      	movs	r3, #128	; 0x80
 80056a4:	6802      	ldr	r2, [r0, #0]
 80056a6:	019b      	lsls	r3, r3, #6
 80056a8:	6814      	ldr	r4, [r2, #0]
 80056aa:	4323      	orrs	r3, r4
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	f381 8810 	msr	PRIMASK, r1
  huart->gState = HAL_UART_STATE_READY;
 80056b2:	2320      	movs	r3, #32
 80056b4:	67c3      	str	r3, [r0, #124]	; 0x7c
  return (UART_CheckIdleState(huart));
 80056b6:	f7ff ff05 	bl	80054c4 <UART_CheckIdleState>
}
 80056ba:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80056bc:	2002      	movs	r0, #2
 80056be:	e7fc      	b.n	80056ba <HAL_MultiProcessor_EnableMuteMode+0x32>

080056c0 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 80056c0:	2358      	movs	r3, #88	; 0x58
  huart->pRxBuffPtr  = pData;
 80056c2:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 80056c4:	52c2      	strh	r2, [r0, r3]
  huart->RxXferCount = Size;
 80056c6:	3302      	adds	r3, #2
 80056c8:	52c2      	strh	r2, [r0, r3]
  huart->RxISR       = NULL;
 80056ca:	2300      	movs	r3, #0
 80056cc:	6683      	str	r3, [r0, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	6882      	ldr	r2, [r0, #8]
 80056d2:	015b      	lsls	r3, r3, #5
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d046      	beq.n	8005766 <UART_Start_Receive_IT+0xa6>
 80056d8:	2300      	movs	r3, #0
 80056da:	2a00      	cmp	r2, #0
 80056dc:	d03d      	beq.n	800575a <UART_Start_Receive_IT+0x9a>
 80056de:	225c      	movs	r2, #92	; 0x5c
 80056e0:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e2:	2384      	movs	r3, #132	; 0x84
 80056e4:	2200      	movs	r2, #0
 80056e6:	50c2      	str	r2, [r0, r3]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056e8:	3b04      	subs	r3, #4
 80056ea:	3222      	adds	r2, #34	; 0x22
 80056ec:	50c2      	str	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ee:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f2:	2101      	movs	r1, #1
 80056f4:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f8:	6802      	ldr	r2, [r0, #0]
 80056fa:	6893      	ldr	r3, [r2, #8]
 80056fc:	430b      	orrs	r3, r1
 80056fe:	6093      	str	r3, [r2, #8]
 8005700:	f38c 8810 	msr	PRIMASK, ip
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	6882      	ldr	r2, [r0, #8]
 8005708:	015b      	lsls	r3, r3, #5
 800570a:	429a      	cmp	r2, r3
 800570c:	d012      	beq.n	8005734 <UART_Start_Receive_IT+0x74>
 800570e:	4a1c      	ldr	r2, [pc, #112]	; (8005780 <UART_Start_Receive_IT+0xc0>)
 8005710:	6903      	ldr	r3, [r0, #16]
 8005712:	6682      	str	r2, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005714:	2b00      	cmp	r3, #0
 8005716:	d112      	bne.n	800573e <UART_Start_Receive_IT+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005718:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800571c:	2301      	movs	r3, #1
 800571e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005722:	6802      	ldr	r2, [r0, #0]
 8005724:	2020      	movs	r0, #32
 8005726:	6813      	ldr	r3, [r2, #0]
 8005728:	4303      	orrs	r3, r0
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	f381 8810 	msr	PRIMASK, r1
}
 8005730:	2000      	movs	r0, #0
 8005732:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005734:	6903      	ldr	r3, [r0, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d01f      	beq.n	800577a <UART_Start_Receive_IT+0xba>
 800573a:	4b11      	ldr	r3, [pc, #68]	; (8005780 <UART_Start_Receive_IT+0xc0>)
 800573c:	6683      	str	r3, [r0, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800573e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005742:	2301      	movs	r3, #1
 8005744:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005748:	6802      	ldr	r2, [r0, #0]
 800574a:	3320      	adds	r3, #32
 800574c:	6810      	ldr	r0, [r2, #0]
 800574e:	33ff      	adds	r3, #255	; 0xff
 8005750:	4303      	orrs	r3, r0
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	f381 8810 	msr	PRIMASK, r1
}
 8005758:	e7ea      	b.n	8005730 <UART_Start_Receive_IT+0x70>
  UART_MASK_COMPUTATION(huart);
 800575a:	6903      	ldr	r3, [r0, #16]
 800575c:	425a      	negs	r2, r3
 800575e:	4153      	adcs	r3, r2
 8005760:	01db      	lsls	r3, r3, #7
 8005762:	337f      	adds	r3, #127	; 0x7f
 8005764:	e7bb      	b.n	80056de <UART_Start_Receive_IT+0x1e>
 8005766:	6903      	ldr	r3, [r0, #16]
 8005768:	1e5a      	subs	r2, r3, #1
 800576a:	4193      	sbcs	r3, r2
 800576c:	22ff      	movs	r2, #255	; 0xff
 800576e:	425b      	negs	r3, r3
 8005770:	4393      	bics	r3, r2
 8005772:	4a04      	ldr	r2, [pc, #16]	; (8005784 <UART_Start_Receive_IT+0xc4>)
 8005774:	4694      	mov	ip, r2
 8005776:	4463      	add	r3, ip
 8005778:	e7b1      	b.n	80056de <UART_Start_Receive_IT+0x1e>
 800577a:	4b03      	ldr	r3, [pc, #12]	; (8005788 <UART_Start_Receive_IT+0xc8>)
 800577c:	6683      	str	r3, [r0, #104]	; 0x68
 800577e:	e7cb      	b.n	8005718 <UART_Start_Receive_IT+0x58>
 8005780:	08004e79 	.word	0x08004e79
 8005784:	000001ff 	.word	0x000001ff
 8005788:	08004f49 	.word	0x08004f49

0800578c <HAL_UART_Receive_IT>:
{
 800578c:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800578e:	2080      	movs	r0, #128	; 0x80
 8005790:	5818      	ldr	r0, [r3, r0]
{
 8005792:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005794:	2820      	cmp	r0, #32
 8005796:	d127      	bne.n	80057e8 <HAL_UART_Receive_IT+0x5c>
    if ((pData == NULL) || (Size == 0U))
 8005798:	2900      	cmp	r1, #0
 800579a:	d023      	beq.n	80057e4 <HAL_UART_Receive_IT+0x58>
 800579c:	2a00      	cmp	r2, #0
 800579e:	d021      	beq.n	80057e4 <HAL_UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a0:	2080      	movs	r0, #128	; 0x80
 80057a2:	689c      	ldr	r4, [r3, #8]
 80057a4:	0140      	lsls	r0, r0, #5
 80057a6:	4284      	cmp	r4, r0
 80057a8:	d105      	bne.n	80057b6 <HAL_UART_Receive_IT+0x2a>
 80057aa:	6918      	ldr	r0, [r3, #16]
 80057ac:	2800      	cmp	r0, #0
 80057ae:	d102      	bne.n	80057b6 <HAL_UART_Receive_IT+0x2a>
      return HAL_ERROR;
 80057b0:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 80057b2:	07cc      	lsls	r4, r1, #31
 80057b4:	d417      	bmi.n	80057e6 <HAL_UART_Receive_IT+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b6:	2000      	movs	r0, #0
 80057b8:	6618      	str	r0, [r3, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	6840      	ldr	r0, [r0, #4]
 80057be:	0200      	lsls	r0, r0, #8
 80057c0:	d50c      	bpl.n	80057dc <HAL_UART_Receive_IT+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057c2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c6:	2001      	movs	r0, #1
 80057c8:	f380 8810 	msr	PRIMASK, r0
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057cc:	2080      	movs	r0, #128	; 0x80
 80057ce:	681c      	ldr	r4, [r3, #0]
 80057d0:	04c0      	lsls	r0, r0, #19
 80057d2:	6825      	ldr	r5, [r4, #0]
 80057d4:	4328      	orrs	r0, r5
 80057d6:	6020      	str	r0, [r4, #0]
 80057d8:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_IT(huart, pData, Size));
 80057dc:	0018      	movs	r0, r3
 80057de:	f7ff ff6f 	bl	80056c0 <UART_Start_Receive_IT>
 80057e2:	e000      	b.n	80057e6 <HAL_UART_Receive_IT+0x5a>
      return HAL_ERROR;
 80057e4:	2001      	movs	r0, #1
}
 80057e6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80057e8:	2002      	movs	r0, #2
 80057ea:	e7fc      	b.n	80057e6 <HAL_UART_Receive_IT+0x5a>

080057ec <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80057ec:	4770      	bx	lr
 80057ee:	46c0      	nop			; (mov r8, r8)

080057f0 <HAL_MultiProcessorEx_AddressLength_Set>:
  *          @arg @ref UART_ADDRESS_DETECT_4B 4-bit long address
  *          @arg @ref UART_ADDRESS_DETECT_7B 6-, 7- or 8-bit long address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength)
{
 80057f0:	000a      	movs	r2, r1
 80057f2:	b570      	push	{r4, r5, r6, lr}
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d011      	beq.n	800581c <HAL_MultiProcessorEx_AddressLength_Set+0x2c>
  }

  /* Check the address length parameter */
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));

  huart->gState = HAL_UART_STATE_BUSY;
 80057f8:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80057fa:	2401      	movs	r4, #1

  /* Set the address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 80057fc:	2510      	movs	r5, #16
  huart->gState = HAL_UART_STATE_BUSY;
 80057fe:	67c3      	str	r3, [r0, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8005800:	6803      	ldr	r3, [r0, #0]
 8005802:	6819      	ldr	r1, [r3, #0]
 8005804:	43a1      	bics	r1, r4
 8005806:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 8005808:	6859      	ldr	r1, [r3, #4]
 800580a:	43a9      	bics	r1, r5
 800580c:	4311      	orrs	r1, r2
 800580e:	6059      	str	r1, [r3, #4]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4322      	orrs	r2, r4
 8005814:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState to Ready */
  return (UART_CheckIdleState(huart));
 8005816:	f7ff fe55 	bl	80054c4 <UART_CheckIdleState>
}
 800581a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800581c:	2001      	movs	r0, #1
 800581e:	e7fc      	b.n	800581a <HAL_MultiProcessorEx_AddressLength_Set+0x2a>

08005820 <std>:
 8005820:	2300      	movs	r3, #0
 8005822:	b510      	push	{r4, lr}
 8005824:	0004      	movs	r4, r0
 8005826:	6003      	str	r3, [r0, #0]
 8005828:	6043      	str	r3, [r0, #4]
 800582a:	6083      	str	r3, [r0, #8]
 800582c:	8181      	strh	r1, [r0, #12]
 800582e:	6643      	str	r3, [r0, #100]	; 0x64
 8005830:	0019      	movs	r1, r3
 8005832:	81c2      	strh	r2, [r0, #14]
 8005834:	6103      	str	r3, [r0, #16]
 8005836:	6143      	str	r3, [r0, #20]
 8005838:	6183      	str	r3, [r0, #24]
 800583a:	2208      	movs	r2, #8
 800583c:	305c      	adds	r0, #92	; 0x5c
 800583e:	f000 f901 	bl	8005a44 <memset>
 8005842:	4b05      	ldr	r3, [pc, #20]	; (8005858 <std+0x38>)
 8005844:	6224      	str	r4, [r4, #32]
 8005846:	6263      	str	r3, [r4, #36]	; 0x24
 8005848:	4b04      	ldr	r3, [pc, #16]	; (800585c <std+0x3c>)
 800584a:	62a3      	str	r3, [r4, #40]	; 0x28
 800584c:	4b04      	ldr	r3, [pc, #16]	; (8005860 <std+0x40>)
 800584e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005850:	4b04      	ldr	r3, [pc, #16]	; (8005864 <std+0x44>)
 8005852:	6323      	str	r3, [r4, #48]	; 0x30
 8005854:	bd10      	pop	{r4, pc}
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	08005d81 	.word	0x08005d81
 800585c:	08005da9 	.word	0x08005da9
 8005860:	08005de1 	.word	0x08005de1
 8005864:	08005e0d 	.word	0x08005e0d

08005868 <stdio_exit_handler>:
 8005868:	b510      	push	{r4, lr}
 800586a:	4a03      	ldr	r2, [pc, #12]	; (8005878 <stdio_exit_handler+0x10>)
 800586c:	4903      	ldr	r1, [pc, #12]	; (800587c <stdio_exit_handler+0x14>)
 800586e:	4804      	ldr	r0, [pc, #16]	; (8005880 <stdio_exit_handler+0x18>)
 8005870:	f000 f86c 	bl	800594c <_fwalk_sglue>
 8005874:	bd10      	pop	{r4, pc}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	20000010 	.word	0x20000010
 800587c:	08005d09 	.word	0x08005d09
 8005880:	2000001c 	.word	0x2000001c

08005884 <cleanup_stdio>:
 8005884:	6841      	ldr	r1, [r0, #4]
 8005886:	4b0b      	ldr	r3, [pc, #44]	; (80058b4 <cleanup_stdio+0x30>)
 8005888:	b510      	push	{r4, lr}
 800588a:	0004      	movs	r4, r0
 800588c:	4299      	cmp	r1, r3
 800588e:	d001      	beq.n	8005894 <cleanup_stdio+0x10>
 8005890:	f000 fa3a 	bl	8005d08 <_fflush_r>
 8005894:	68a1      	ldr	r1, [r4, #8]
 8005896:	4b08      	ldr	r3, [pc, #32]	; (80058b8 <cleanup_stdio+0x34>)
 8005898:	4299      	cmp	r1, r3
 800589a:	d002      	beq.n	80058a2 <cleanup_stdio+0x1e>
 800589c:	0020      	movs	r0, r4
 800589e:	f000 fa33 	bl	8005d08 <_fflush_r>
 80058a2:	68e1      	ldr	r1, [r4, #12]
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <cleanup_stdio+0x38>)
 80058a6:	4299      	cmp	r1, r3
 80058a8:	d002      	beq.n	80058b0 <cleanup_stdio+0x2c>
 80058aa:	0020      	movs	r0, r4
 80058ac:	f000 fa2c 	bl	8005d08 <_fflush_r>
 80058b0:	bd10      	pop	{r4, pc}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	200003d0 	.word	0x200003d0
 80058b8:	20000438 	.word	0x20000438
 80058bc:	200004a0 	.word	0x200004a0

080058c0 <global_stdio_init.part.0>:
 80058c0:	b510      	push	{r4, lr}
 80058c2:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <global_stdio_init.part.0+0x28>)
 80058c4:	4a09      	ldr	r2, [pc, #36]	; (80058ec <global_stdio_init.part.0+0x2c>)
 80058c6:	2104      	movs	r1, #4
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	4809      	ldr	r0, [pc, #36]	; (80058f0 <global_stdio_init.part.0+0x30>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	f7ff ffa7 	bl	8005820 <std>
 80058d2:	2201      	movs	r2, #1
 80058d4:	2109      	movs	r1, #9
 80058d6:	4807      	ldr	r0, [pc, #28]	; (80058f4 <global_stdio_init.part.0+0x34>)
 80058d8:	f7ff ffa2 	bl	8005820 <std>
 80058dc:	2202      	movs	r2, #2
 80058de:	2112      	movs	r1, #18
 80058e0:	4805      	ldr	r0, [pc, #20]	; (80058f8 <global_stdio_init.part.0+0x38>)
 80058e2:	f7ff ff9d 	bl	8005820 <std>
 80058e6:	bd10      	pop	{r4, pc}
 80058e8:	20000508 	.word	0x20000508
 80058ec:	08005869 	.word	0x08005869
 80058f0:	200003d0 	.word	0x200003d0
 80058f4:	20000438 	.word	0x20000438
 80058f8:	200004a0 	.word	0x200004a0

080058fc <__sfp_lock_acquire>:
 80058fc:	b510      	push	{r4, lr}
 80058fe:	4802      	ldr	r0, [pc, #8]	; (8005908 <__sfp_lock_acquire+0xc>)
 8005900:	f000 f8d2 	bl	8005aa8 <__retarget_lock_acquire_recursive>
 8005904:	bd10      	pop	{r4, pc}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	2000050d 	.word	0x2000050d

0800590c <__sfp_lock_release>:
 800590c:	b510      	push	{r4, lr}
 800590e:	4802      	ldr	r0, [pc, #8]	; (8005918 <__sfp_lock_release+0xc>)
 8005910:	f000 f8cb 	bl	8005aaa <__retarget_lock_release_recursive>
 8005914:	bd10      	pop	{r4, pc}
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	2000050d 	.word	0x2000050d

0800591c <__sinit>:
 800591c:	b510      	push	{r4, lr}
 800591e:	0004      	movs	r4, r0
 8005920:	f7ff ffec 	bl	80058fc <__sfp_lock_acquire>
 8005924:	6a23      	ldr	r3, [r4, #32]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <__sinit+0x14>
 800592a:	f7ff ffef 	bl	800590c <__sfp_lock_release>
 800592e:	bd10      	pop	{r4, pc}
 8005930:	4b04      	ldr	r3, [pc, #16]	; (8005944 <__sinit+0x28>)
 8005932:	6223      	str	r3, [r4, #32]
 8005934:	4b04      	ldr	r3, [pc, #16]	; (8005948 <__sinit+0x2c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f6      	bne.n	800592a <__sinit+0xe>
 800593c:	f7ff ffc0 	bl	80058c0 <global_stdio_init.part.0>
 8005940:	e7f3      	b.n	800592a <__sinit+0xe>
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	08005885 	.word	0x08005885
 8005948:	20000508 	.word	0x20000508

0800594c <_fwalk_sglue>:
 800594c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800594e:	0014      	movs	r4, r2
 8005950:	2600      	movs	r6, #0
 8005952:	9000      	str	r0, [sp, #0]
 8005954:	9101      	str	r1, [sp, #4]
 8005956:	68a5      	ldr	r5, [r4, #8]
 8005958:	6867      	ldr	r7, [r4, #4]
 800595a:	3f01      	subs	r7, #1
 800595c:	d504      	bpl.n	8005968 <_fwalk_sglue+0x1c>
 800595e:	6824      	ldr	r4, [r4, #0]
 8005960:	2c00      	cmp	r4, #0
 8005962:	d1f8      	bne.n	8005956 <_fwalk_sglue+0xa>
 8005964:	0030      	movs	r0, r6
 8005966:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005968:	89ab      	ldrh	r3, [r5, #12]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d908      	bls.n	8005980 <_fwalk_sglue+0x34>
 800596e:	220e      	movs	r2, #14
 8005970:	5eab      	ldrsh	r3, [r5, r2]
 8005972:	3301      	adds	r3, #1
 8005974:	d004      	beq.n	8005980 <_fwalk_sglue+0x34>
 8005976:	0029      	movs	r1, r5
 8005978:	9800      	ldr	r0, [sp, #0]
 800597a:	9b01      	ldr	r3, [sp, #4]
 800597c:	4798      	blx	r3
 800597e:	4306      	orrs	r6, r0
 8005980:	3568      	adds	r5, #104	; 0x68
 8005982:	e7ea      	b.n	800595a <_fwalk_sglue+0xe>

08005984 <_puts_r>:
 8005984:	6a03      	ldr	r3, [r0, #32]
 8005986:	b570      	push	{r4, r5, r6, lr}
 8005988:	0005      	movs	r5, r0
 800598a:	000e      	movs	r6, r1
 800598c:	6884      	ldr	r4, [r0, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <_puts_r+0x12>
 8005992:	f7ff ffc3 	bl	800591c <__sinit>
 8005996:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005998:	07db      	lsls	r3, r3, #31
 800599a:	d405      	bmi.n	80059a8 <_puts_r+0x24>
 800599c:	89a3      	ldrh	r3, [r4, #12]
 800599e:	059b      	lsls	r3, r3, #22
 80059a0:	d402      	bmi.n	80059a8 <_puts_r+0x24>
 80059a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059a4:	f000 f880 	bl	8005aa8 <__retarget_lock_acquire_recursive>
 80059a8:	89a3      	ldrh	r3, [r4, #12]
 80059aa:	071b      	lsls	r3, r3, #28
 80059ac:	d502      	bpl.n	80059b4 <_puts_r+0x30>
 80059ae:	6923      	ldr	r3, [r4, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d11f      	bne.n	80059f4 <_puts_r+0x70>
 80059b4:	0021      	movs	r1, r4
 80059b6:	0028      	movs	r0, r5
 80059b8:	f000 fa70 	bl	8005e9c <__swsetup_r>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d019      	beq.n	80059f4 <_puts_r+0x70>
 80059c0:	2501      	movs	r5, #1
 80059c2:	426d      	negs	r5, r5
 80059c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059c6:	07db      	lsls	r3, r3, #31
 80059c8:	d405      	bmi.n	80059d6 <_puts_r+0x52>
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	059b      	lsls	r3, r3, #22
 80059ce:	d402      	bmi.n	80059d6 <_puts_r+0x52>
 80059d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059d2:	f000 f86a 	bl	8005aaa <__retarget_lock_release_recursive>
 80059d6:	0028      	movs	r0, r5
 80059d8:	bd70      	pop	{r4, r5, r6, pc}
 80059da:	3601      	adds	r6, #1
 80059dc:	60a3      	str	r3, [r4, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	da04      	bge.n	80059ec <_puts_r+0x68>
 80059e2:	69a2      	ldr	r2, [r4, #24]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	dc16      	bgt.n	8005a16 <_puts_r+0x92>
 80059e8:	290a      	cmp	r1, #10
 80059ea:	d014      	beq.n	8005a16 <_puts_r+0x92>
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	6022      	str	r2, [r4, #0]
 80059f2:	7019      	strb	r1, [r3, #0]
 80059f4:	68a3      	ldr	r3, [r4, #8]
 80059f6:	7831      	ldrb	r1, [r6, #0]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	2900      	cmp	r1, #0
 80059fc:	d1ed      	bne.n	80059da <_puts_r+0x56>
 80059fe:	60a3      	str	r3, [r4, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	da0f      	bge.n	8005a24 <_puts_r+0xa0>
 8005a04:	0028      	movs	r0, r5
 8005a06:	0022      	movs	r2, r4
 8005a08:	310a      	adds	r1, #10
 8005a0a:	f000 fa05 	bl	8005e18 <__swbuf_r>
 8005a0e:	250a      	movs	r5, #10
 8005a10:	3001      	adds	r0, #1
 8005a12:	d1d7      	bne.n	80059c4 <_puts_r+0x40>
 8005a14:	e7d4      	b.n	80059c0 <_puts_r+0x3c>
 8005a16:	0022      	movs	r2, r4
 8005a18:	0028      	movs	r0, r5
 8005a1a:	f000 f9fd 	bl	8005e18 <__swbuf_r>
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d1e8      	bne.n	80059f4 <_puts_r+0x70>
 8005a22:	e7cd      	b.n	80059c0 <_puts_r+0x3c>
 8005a24:	250a      	movs	r5, #10
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	6022      	str	r2, [r4, #0]
 8005a2c:	701d      	strb	r5, [r3, #0]
 8005a2e:	e7c9      	b.n	80059c4 <_puts_r+0x40>

08005a30 <puts>:
 8005a30:	b510      	push	{r4, lr}
 8005a32:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <puts+0x10>)
 8005a34:	0001      	movs	r1, r0
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	f7ff ffa4 	bl	8005984 <_puts_r>
 8005a3c:	bd10      	pop	{r4, pc}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	20000068 	.word	0x20000068

08005a44 <memset>:
 8005a44:	0003      	movs	r3, r0
 8005a46:	1882      	adds	r2, r0, r2
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d100      	bne.n	8005a4e <memset+0xa>
 8005a4c:	4770      	bx	lr
 8005a4e:	7019      	strb	r1, [r3, #0]
 8005a50:	3301      	adds	r3, #1
 8005a52:	e7f9      	b.n	8005a48 <memset+0x4>

08005a54 <__errno>:
 8005a54:	4b01      	ldr	r3, [pc, #4]	; (8005a5c <__errno+0x8>)
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	4770      	bx	lr
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	20000068 	.word	0x20000068

08005a60 <__libc_init_array>:
 8005a60:	b570      	push	{r4, r5, r6, lr}
 8005a62:	2600      	movs	r6, #0
 8005a64:	4c0c      	ldr	r4, [pc, #48]	; (8005a98 <__libc_init_array+0x38>)
 8005a66:	4d0d      	ldr	r5, [pc, #52]	; (8005a9c <__libc_init_array+0x3c>)
 8005a68:	1b64      	subs	r4, r4, r5
 8005a6a:	10a4      	asrs	r4, r4, #2
 8005a6c:	42a6      	cmp	r6, r4
 8005a6e:	d109      	bne.n	8005a84 <__libc_init_array+0x24>
 8005a70:	2600      	movs	r6, #0
 8005a72:	f000 fbab 	bl	80061cc <_init>
 8005a76:	4c0a      	ldr	r4, [pc, #40]	; (8005aa0 <__libc_init_array+0x40>)
 8005a78:	4d0a      	ldr	r5, [pc, #40]	; (8005aa4 <__libc_init_array+0x44>)
 8005a7a:	1b64      	subs	r4, r4, r5
 8005a7c:	10a4      	asrs	r4, r4, #2
 8005a7e:	42a6      	cmp	r6, r4
 8005a80:	d105      	bne.n	8005a8e <__libc_init_array+0x2e>
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
 8005a84:	00b3      	lsls	r3, r6, #2
 8005a86:	58eb      	ldr	r3, [r5, r3]
 8005a88:	4798      	blx	r3
 8005a8a:	3601      	adds	r6, #1
 8005a8c:	e7ee      	b.n	8005a6c <__libc_init_array+0xc>
 8005a8e:	00b3      	lsls	r3, r6, #2
 8005a90:	58eb      	ldr	r3, [r5, r3]
 8005a92:	4798      	blx	r3
 8005a94:	3601      	adds	r6, #1
 8005a96:	e7f2      	b.n	8005a7e <__libc_init_array+0x1e>
 8005a98:	08006430 	.word	0x08006430
 8005a9c:	08006430 	.word	0x08006430
 8005aa0:	08006434 	.word	0x08006434
 8005aa4:	08006430 	.word	0x08006430

08005aa8 <__retarget_lock_acquire_recursive>:
 8005aa8:	4770      	bx	lr

08005aaa <__retarget_lock_release_recursive>:
 8005aaa:	4770      	bx	lr

08005aac <sbrk_aligned>:
 8005aac:	b570      	push	{r4, r5, r6, lr}
 8005aae:	4e0f      	ldr	r6, [pc, #60]	; (8005aec <sbrk_aligned+0x40>)
 8005ab0:	000d      	movs	r5, r1
 8005ab2:	6831      	ldr	r1, [r6, #0]
 8005ab4:	0004      	movs	r4, r0
 8005ab6:	2900      	cmp	r1, #0
 8005ab8:	d102      	bne.n	8005ac0 <sbrk_aligned+0x14>
 8005aba:	f000 fb17 	bl	80060ec <_sbrk_r>
 8005abe:	6030      	str	r0, [r6, #0]
 8005ac0:	0029      	movs	r1, r5
 8005ac2:	0020      	movs	r0, r4
 8005ac4:	f000 fb12 	bl	80060ec <_sbrk_r>
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	d00a      	beq.n	8005ae2 <sbrk_aligned+0x36>
 8005acc:	2303      	movs	r3, #3
 8005ace:	1cc5      	adds	r5, r0, #3
 8005ad0:	439d      	bics	r5, r3
 8005ad2:	42a8      	cmp	r0, r5
 8005ad4:	d007      	beq.n	8005ae6 <sbrk_aligned+0x3a>
 8005ad6:	1a29      	subs	r1, r5, r0
 8005ad8:	0020      	movs	r0, r4
 8005ada:	f000 fb07 	bl	80060ec <_sbrk_r>
 8005ade:	3001      	adds	r0, #1
 8005ae0:	d101      	bne.n	8005ae6 <sbrk_aligned+0x3a>
 8005ae2:	2501      	movs	r5, #1
 8005ae4:	426d      	negs	r5, r5
 8005ae6:	0028      	movs	r0, r5
 8005ae8:	bd70      	pop	{r4, r5, r6, pc}
 8005aea:	46c0      	nop			; (mov r8, r8)
 8005aec:	20000514 	.word	0x20000514

08005af0 <_malloc_r>:
 8005af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005af2:	2203      	movs	r2, #3
 8005af4:	1ccb      	adds	r3, r1, #3
 8005af6:	4393      	bics	r3, r2
 8005af8:	3308      	adds	r3, #8
 8005afa:	0006      	movs	r6, r0
 8005afc:	001f      	movs	r7, r3
 8005afe:	2b0c      	cmp	r3, #12
 8005b00:	d238      	bcs.n	8005b74 <_malloc_r+0x84>
 8005b02:	270c      	movs	r7, #12
 8005b04:	42b9      	cmp	r1, r7
 8005b06:	d837      	bhi.n	8005b78 <_malloc_r+0x88>
 8005b08:	0030      	movs	r0, r6
 8005b0a:	f000 f929 	bl	8005d60 <__malloc_lock>
 8005b0e:	4b38      	ldr	r3, [pc, #224]	; (8005bf0 <_malloc_r+0x100>)
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	001c      	movs	r4, r3
 8005b16:	2c00      	cmp	r4, #0
 8005b18:	d133      	bne.n	8005b82 <_malloc_r+0x92>
 8005b1a:	0039      	movs	r1, r7
 8005b1c:	0030      	movs	r0, r6
 8005b1e:	f7ff ffc5 	bl	8005aac <sbrk_aligned>
 8005b22:	0004      	movs	r4, r0
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d15e      	bne.n	8005be6 <_malloc_r+0xf6>
 8005b28:	9b00      	ldr	r3, [sp, #0]
 8005b2a:	681c      	ldr	r4, [r3, #0]
 8005b2c:	0025      	movs	r5, r4
 8005b2e:	2d00      	cmp	r5, #0
 8005b30:	d14e      	bne.n	8005bd0 <_malloc_r+0xe0>
 8005b32:	2c00      	cmp	r4, #0
 8005b34:	d051      	beq.n	8005bda <_malloc_r+0xea>
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	0029      	movs	r1, r5
 8005b3a:	18e3      	adds	r3, r4, r3
 8005b3c:	0030      	movs	r0, r6
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	f000 fad4 	bl	80060ec <_sbrk_r>
 8005b44:	9b01      	ldr	r3, [sp, #4]
 8005b46:	4283      	cmp	r3, r0
 8005b48:	d147      	bne.n	8005bda <_malloc_r+0xea>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	0030      	movs	r0, r6
 8005b4e:	1aff      	subs	r7, r7, r3
 8005b50:	0039      	movs	r1, r7
 8005b52:	f7ff ffab 	bl	8005aac <sbrk_aligned>
 8005b56:	3001      	adds	r0, #1
 8005b58:	d03f      	beq.n	8005bda <_malloc_r+0xea>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	19db      	adds	r3, r3, r7
 8005b5e:	6023      	str	r3, [r4, #0]
 8005b60:	9b00      	ldr	r3, [sp, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d040      	beq.n	8005bea <_malloc_r+0xfa>
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	42a2      	cmp	r2, r4
 8005b6c:	d133      	bne.n	8005bd6 <_malloc_r+0xe6>
 8005b6e:	2200      	movs	r2, #0
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	e014      	b.n	8005b9e <_malloc_r+0xae>
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	dac5      	bge.n	8005b04 <_malloc_r+0x14>
 8005b78:	230c      	movs	r3, #12
 8005b7a:	2500      	movs	r5, #0
 8005b7c:	6033      	str	r3, [r6, #0]
 8005b7e:	0028      	movs	r0, r5
 8005b80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b82:	6821      	ldr	r1, [r4, #0]
 8005b84:	1bc9      	subs	r1, r1, r7
 8005b86:	d420      	bmi.n	8005bca <_malloc_r+0xda>
 8005b88:	290b      	cmp	r1, #11
 8005b8a:	d918      	bls.n	8005bbe <_malloc_r+0xce>
 8005b8c:	19e2      	adds	r2, r4, r7
 8005b8e:	6027      	str	r7, [r4, #0]
 8005b90:	42a3      	cmp	r3, r4
 8005b92:	d112      	bne.n	8005bba <_malloc_r+0xca>
 8005b94:	9b00      	ldr	r3, [sp, #0]
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	6863      	ldr	r3, [r4, #4]
 8005b9a:	6011      	str	r1, [r2, #0]
 8005b9c:	6053      	str	r3, [r2, #4]
 8005b9e:	0030      	movs	r0, r6
 8005ba0:	0025      	movs	r5, r4
 8005ba2:	f000 f8e5 	bl	8005d70 <__malloc_unlock>
 8005ba6:	2207      	movs	r2, #7
 8005ba8:	350b      	adds	r5, #11
 8005baa:	1d23      	adds	r3, r4, #4
 8005bac:	4395      	bics	r5, r2
 8005bae:	1aea      	subs	r2, r5, r3
 8005bb0:	429d      	cmp	r5, r3
 8005bb2:	d0e4      	beq.n	8005b7e <_malloc_r+0x8e>
 8005bb4:	1b5b      	subs	r3, r3, r5
 8005bb6:	50a3      	str	r3, [r4, r2]
 8005bb8:	e7e1      	b.n	8005b7e <_malloc_r+0x8e>
 8005bba:	605a      	str	r2, [r3, #4]
 8005bbc:	e7ec      	b.n	8005b98 <_malloc_r+0xa8>
 8005bbe:	6862      	ldr	r2, [r4, #4]
 8005bc0:	42a3      	cmp	r3, r4
 8005bc2:	d1d5      	bne.n	8005b70 <_malloc_r+0x80>
 8005bc4:	9b00      	ldr	r3, [sp, #0]
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	e7e9      	b.n	8005b9e <_malloc_r+0xae>
 8005bca:	0023      	movs	r3, r4
 8005bcc:	6864      	ldr	r4, [r4, #4]
 8005bce:	e7a2      	b.n	8005b16 <_malloc_r+0x26>
 8005bd0:	002c      	movs	r4, r5
 8005bd2:	686d      	ldr	r5, [r5, #4]
 8005bd4:	e7ab      	b.n	8005b2e <_malloc_r+0x3e>
 8005bd6:	0013      	movs	r3, r2
 8005bd8:	e7c4      	b.n	8005b64 <_malloc_r+0x74>
 8005bda:	230c      	movs	r3, #12
 8005bdc:	0030      	movs	r0, r6
 8005bde:	6033      	str	r3, [r6, #0]
 8005be0:	f000 f8c6 	bl	8005d70 <__malloc_unlock>
 8005be4:	e7cb      	b.n	8005b7e <_malloc_r+0x8e>
 8005be6:	6027      	str	r7, [r4, #0]
 8005be8:	e7d9      	b.n	8005b9e <_malloc_r+0xae>
 8005bea:	605b      	str	r3, [r3, #4]
 8005bec:	deff      	udf	#255	; 0xff
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	20000510 	.word	0x20000510

08005bf4 <__sflush_r>:
 8005bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bf6:	898b      	ldrh	r3, [r1, #12]
 8005bf8:	0005      	movs	r5, r0
 8005bfa:	000c      	movs	r4, r1
 8005bfc:	071a      	lsls	r2, r3, #28
 8005bfe:	d45c      	bmi.n	8005cba <__sflush_r+0xc6>
 8005c00:	684a      	ldr	r2, [r1, #4]
 8005c02:	2a00      	cmp	r2, #0
 8005c04:	dc04      	bgt.n	8005c10 <__sflush_r+0x1c>
 8005c06:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005c08:	2a00      	cmp	r2, #0
 8005c0a:	dc01      	bgt.n	8005c10 <__sflush_r+0x1c>
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c10:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005c12:	2f00      	cmp	r7, #0
 8005c14:	d0fa      	beq.n	8005c0c <__sflush_r+0x18>
 8005c16:	2200      	movs	r2, #0
 8005c18:	2080      	movs	r0, #128	; 0x80
 8005c1a:	682e      	ldr	r6, [r5, #0]
 8005c1c:	602a      	str	r2, [r5, #0]
 8005c1e:	001a      	movs	r2, r3
 8005c20:	0140      	lsls	r0, r0, #5
 8005c22:	6a21      	ldr	r1, [r4, #32]
 8005c24:	4002      	ands	r2, r0
 8005c26:	4203      	tst	r3, r0
 8005c28:	d034      	beq.n	8005c94 <__sflush_r+0xa0>
 8005c2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	075b      	lsls	r3, r3, #29
 8005c30:	d506      	bpl.n	8005c40 <__sflush_r+0x4c>
 8005c32:	6863      	ldr	r3, [r4, #4]
 8005c34:	1ac0      	subs	r0, r0, r3
 8005c36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <__sflush_r+0x4c>
 8005c3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c3e:	1ac0      	subs	r0, r0, r3
 8005c40:	0002      	movs	r2, r0
 8005c42:	2300      	movs	r3, #0
 8005c44:	0028      	movs	r0, r5
 8005c46:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005c48:	6a21      	ldr	r1, [r4, #32]
 8005c4a:	47b8      	blx	r7
 8005c4c:	89a2      	ldrh	r2, [r4, #12]
 8005c4e:	1c43      	adds	r3, r0, #1
 8005c50:	d106      	bne.n	8005c60 <__sflush_r+0x6c>
 8005c52:	6829      	ldr	r1, [r5, #0]
 8005c54:	291d      	cmp	r1, #29
 8005c56:	d82c      	bhi.n	8005cb2 <__sflush_r+0xbe>
 8005c58:	4b2a      	ldr	r3, [pc, #168]	; (8005d04 <__sflush_r+0x110>)
 8005c5a:	410b      	asrs	r3, r1
 8005c5c:	07db      	lsls	r3, r3, #31
 8005c5e:	d428      	bmi.n	8005cb2 <__sflush_r+0xbe>
 8005c60:	2300      	movs	r3, #0
 8005c62:	6063      	str	r3, [r4, #4]
 8005c64:	6923      	ldr	r3, [r4, #16]
 8005c66:	6023      	str	r3, [r4, #0]
 8005c68:	04d2      	lsls	r2, r2, #19
 8005c6a:	d505      	bpl.n	8005c78 <__sflush_r+0x84>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d102      	bne.n	8005c76 <__sflush_r+0x82>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d100      	bne.n	8005c78 <__sflush_r+0x84>
 8005c76:	6560      	str	r0, [r4, #84]	; 0x54
 8005c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c7a:	602e      	str	r6, [r5, #0]
 8005c7c:	2900      	cmp	r1, #0
 8005c7e:	d0c5      	beq.n	8005c0c <__sflush_r+0x18>
 8005c80:	0023      	movs	r3, r4
 8005c82:	3344      	adds	r3, #68	; 0x44
 8005c84:	4299      	cmp	r1, r3
 8005c86:	d002      	beq.n	8005c8e <__sflush_r+0x9a>
 8005c88:	0028      	movs	r0, r5
 8005c8a:	f000 fa55 	bl	8006138 <_free_r>
 8005c8e:	2000      	movs	r0, #0
 8005c90:	6360      	str	r0, [r4, #52]	; 0x34
 8005c92:	e7bc      	b.n	8005c0e <__sflush_r+0x1a>
 8005c94:	2301      	movs	r3, #1
 8005c96:	0028      	movs	r0, r5
 8005c98:	47b8      	blx	r7
 8005c9a:	1c43      	adds	r3, r0, #1
 8005c9c:	d1c6      	bne.n	8005c2c <__sflush_r+0x38>
 8005c9e:	682b      	ldr	r3, [r5, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0c3      	beq.n	8005c2c <__sflush_r+0x38>
 8005ca4:	2b1d      	cmp	r3, #29
 8005ca6:	d001      	beq.n	8005cac <__sflush_r+0xb8>
 8005ca8:	2b16      	cmp	r3, #22
 8005caa:	d101      	bne.n	8005cb0 <__sflush_r+0xbc>
 8005cac:	602e      	str	r6, [r5, #0]
 8005cae:	e7ad      	b.n	8005c0c <__sflush_r+0x18>
 8005cb0:	89a2      	ldrh	r2, [r4, #12]
 8005cb2:	2340      	movs	r3, #64	; 0x40
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	81a3      	strh	r3, [r4, #12]
 8005cb8:	e7a9      	b.n	8005c0e <__sflush_r+0x1a>
 8005cba:	690e      	ldr	r6, [r1, #16]
 8005cbc:	2e00      	cmp	r6, #0
 8005cbe:	d0a5      	beq.n	8005c0c <__sflush_r+0x18>
 8005cc0:	680f      	ldr	r7, [r1, #0]
 8005cc2:	600e      	str	r6, [r1, #0]
 8005cc4:	1bba      	subs	r2, r7, r6
 8005cc6:	9201      	str	r2, [sp, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	079b      	lsls	r3, r3, #30
 8005ccc:	d100      	bne.n	8005cd0 <__sflush_r+0xdc>
 8005cce:	694a      	ldr	r2, [r1, #20]
 8005cd0:	60a2      	str	r2, [r4, #8]
 8005cd2:	9b01      	ldr	r3, [sp, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	dd99      	ble.n	8005c0c <__sflush_r+0x18>
 8005cd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005cda:	0032      	movs	r2, r6
 8005cdc:	001f      	movs	r7, r3
 8005cde:	0028      	movs	r0, r5
 8005ce0:	9b01      	ldr	r3, [sp, #4]
 8005ce2:	6a21      	ldr	r1, [r4, #32]
 8005ce4:	47b8      	blx	r7
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	dc06      	bgt.n	8005cf8 <__sflush_r+0x104>
 8005cea:	2340      	movs	r3, #64	; 0x40
 8005cec:	2001      	movs	r0, #1
 8005cee:	89a2      	ldrh	r2, [r4, #12]
 8005cf0:	4240      	negs	r0, r0
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	81a3      	strh	r3, [r4, #12]
 8005cf6:	e78a      	b.n	8005c0e <__sflush_r+0x1a>
 8005cf8:	9b01      	ldr	r3, [sp, #4]
 8005cfa:	1836      	adds	r6, r6, r0
 8005cfc:	1a1b      	subs	r3, r3, r0
 8005cfe:	9301      	str	r3, [sp, #4]
 8005d00:	e7e7      	b.n	8005cd2 <__sflush_r+0xde>
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	dfbffffe 	.word	0xdfbffffe

08005d08 <_fflush_r>:
 8005d08:	690b      	ldr	r3, [r1, #16]
 8005d0a:	b570      	push	{r4, r5, r6, lr}
 8005d0c:	0005      	movs	r5, r0
 8005d0e:	000c      	movs	r4, r1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d102      	bne.n	8005d1a <_fflush_r+0x12>
 8005d14:	2500      	movs	r5, #0
 8005d16:	0028      	movs	r0, r5
 8005d18:	bd70      	pop	{r4, r5, r6, pc}
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	d004      	beq.n	8005d28 <_fflush_r+0x20>
 8005d1e:	6a03      	ldr	r3, [r0, #32]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <_fflush_r+0x20>
 8005d24:	f7ff fdfa 	bl	800591c <__sinit>
 8005d28:	220c      	movs	r2, #12
 8005d2a:	5ea3      	ldrsh	r3, [r4, r2]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0f1      	beq.n	8005d14 <_fflush_r+0xc>
 8005d30:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d32:	07d2      	lsls	r2, r2, #31
 8005d34:	d404      	bmi.n	8005d40 <_fflush_r+0x38>
 8005d36:	059b      	lsls	r3, r3, #22
 8005d38:	d402      	bmi.n	8005d40 <_fflush_r+0x38>
 8005d3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d3c:	f7ff feb4 	bl	8005aa8 <__retarget_lock_acquire_recursive>
 8005d40:	0028      	movs	r0, r5
 8005d42:	0021      	movs	r1, r4
 8005d44:	f7ff ff56 	bl	8005bf4 <__sflush_r>
 8005d48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d4a:	0005      	movs	r5, r0
 8005d4c:	07db      	lsls	r3, r3, #31
 8005d4e:	d4e2      	bmi.n	8005d16 <_fflush_r+0xe>
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	059b      	lsls	r3, r3, #22
 8005d54:	d4df      	bmi.n	8005d16 <_fflush_r+0xe>
 8005d56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d58:	f7ff fea7 	bl	8005aaa <__retarget_lock_release_recursive>
 8005d5c:	e7db      	b.n	8005d16 <_fflush_r+0xe>
	...

08005d60 <__malloc_lock>:
 8005d60:	b510      	push	{r4, lr}
 8005d62:	4802      	ldr	r0, [pc, #8]	; (8005d6c <__malloc_lock+0xc>)
 8005d64:	f7ff fea0 	bl	8005aa8 <__retarget_lock_acquire_recursive>
 8005d68:	bd10      	pop	{r4, pc}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	2000050c 	.word	0x2000050c

08005d70 <__malloc_unlock>:
 8005d70:	b510      	push	{r4, lr}
 8005d72:	4802      	ldr	r0, [pc, #8]	; (8005d7c <__malloc_unlock+0xc>)
 8005d74:	f7ff fe99 	bl	8005aaa <__retarget_lock_release_recursive>
 8005d78:	bd10      	pop	{r4, pc}
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	2000050c 	.word	0x2000050c

08005d80 <__sread>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	000c      	movs	r4, r1
 8005d84:	250e      	movs	r5, #14
 8005d86:	5f49      	ldrsh	r1, [r1, r5]
 8005d88:	f000 f99c 	bl	80060c4 <_read_r>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	db03      	blt.n	8005d98 <__sread+0x18>
 8005d90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d92:	181b      	adds	r3, r3, r0
 8005d94:	6563      	str	r3, [r4, #84]	; 0x54
 8005d96:	bd70      	pop	{r4, r5, r6, pc}
 8005d98:	89a3      	ldrh	r3, [r4, #12]
 8005d9a:	4a02      	ldr	r2, [pc, #8]	; (8005da4 <__sread+0x24>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	81a3      	strh	r3, [r4, #12]
 8005da0:	e7f9      	b.n	8005d96 <__sread+0x16>
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	ffffefff 	.word	0xffffefff

08005da8 <__swrite>:
 8005da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005daa:	001f      	movs	r7, r3
 8005dac:	898b      	ldrh	r3, [r1, #12]
 8005dae:	0005      	movs	r5, r0
 8005db0:	000c      	movs	r4, r1
 8005db2:	0016      	movs	r6, r2
 8005db4:	05db      	lsls	r3, r3, #23
 8005db6:	d505      	bpl.n	8005dc4 <__swrite+0x1c>
 8005db8:	230e      	movs	r3, #14
 8005dba:	5ec9      	ldrsh	r1, [r1, r3]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	f000 f96c 	bl	800609c <_lseek_r>
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	4a05      	ldr	r2, [pc, #20]	; (8005ddc <__swrite+0x34>)
 8005dc8:	0028      	movs	r0, r5
 8005dca:	4013      	ands	r3, r2
 8005dcc:	81a3      	strh	r3, [r4, #12]
 8005dce:	0032      	movs	r2, r6
 8005dd0:	230e      	movs	r3, #14
 8005dd2:	5ee1      	ldrsh	r1, [r4, r3]
 8005dd4:	003b      	movs	r3, r7
 8005dd6:	f000 f99b 	bl	8006110 <_write_r>
 8005dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ddc:	ffffefff 	.word	0xffffefff

08005de0 <__sseek>:
 8005de0:	b570      	push	{r4, r5, r6, lr}
 8005de2:	000c      	movs	r4, r1
 8005de4:	250e      	movs	r5, #14
 8005de6:	5f49      	ldrsh	r1, [r1, r5]
 8005de8:	f000 f958 	bl	800609c <_lseek_r>
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	1c42      	adds	r2, r0, #1
 8005df0:	d103      	bne.n	8005dfa <__sseek+0x1a>
 8005df2:	4a05      	ldr	r2, [pc, #20]	; (8005e08 <__sseek+0x28>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	81a3      	strh	r3, [r4, #12]
 8005df8:	bd70      	pop	{r4, r5, r6, pc}
 8005dfa:	2280      	movs	r2, #128	; 0x80
 8005dfc:	0152      	lsls	r2, r2, #5
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	81a3      	strh	r3, [r4, #12]
 8005e02:	6560      	str	r0, [r4, #84]	; 0x54
 8005e04:	e7f8      	b.n	8005df8 <__sseek+0x18>
 8005e06:	46c0      	nop			; (mov r8, r8)
 8005e08:	ffffefff 	.word	0xffffefff

08005e0c <__sclose>:
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	230e      	movs	r3, #14
 8005e10:	5ec9      	ldrsh	r1, [r1, r3]
 8005e12:	f000 f90d 	bl	8006030 <_close_r>
 8005e16:	bd10      	pop	{r4, pc}

08005e18 <__swbuf_r>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	0006      	movs	r6, r0
 8005e1c:	000d      	movs	r5, r1
 8005e1e:	0014      	movs	r4, r2
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d004      	beq.n	8005e2e <__swbuf_r+0x16>
 8005e24:	6a03      	ldr	r3, [r0, #32]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <__swbuf_r+0x16>
 8005e2a:	f7ff fd77 	bl	800591c <__sinit>
 8005e2e:	69a3      	ldr	r3, [r4, #24]
 8005e30:	60a3      	str	r3, [r4, #8]
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	071b      	lsls	r3, r3, #28
 8005e36:	d528      	bpl.n	8005e8a <__swbuf_r+0x72>
 8005e38:	6923      	ldr	r3, [r4, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d025      	beq.n	8005e8a <__swbuf_r+0x72>
 8005e3e:	6923      	ldr	r3, [r4, #16]
 8005e40:	6820      	ldr	r0, [r4, #0]
 8005e42:	b2ef      	uxtb	r7, r5
 8005e44:	1ac0      	subs	r0, r0, r3
 8005e46:	6963      	ldr	r3, [r4, #20]
 8005e48:	b2ed      	uxtb	r5, r5
 8005e4a:	4283      	cmp	r3, r0
 8005e4c:	dc05      	bgt.n	8005e5a <__swbuf_r+0x42>
 8005e4e:	0021      	movs	r1, r4
 8005e50:	0030      	movs	r0, r6
 8005e52:	f7ff ff59 	bl	8005d08 <_fflush_r>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d11d      	bne.n	8005e96 <__swbuf_r+0x7e>
 8005e5a:	68a3      	ldr	r3, [r4, #8]
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	60a3      	str	r3, [r4, #8]
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	6022      	str	r2, [r4, #0]
 8005e68:	701f      	strb	r7, [r3, #0]
 8005e6a:	6963      	ldr	r3, [r4, #20]
 8005e6c:	4283      	cmp	r3, r0
 8005e6e:	d004      	beq.n	8005e7a <__swbuf_r+0x62>
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	07db      	lsls	r3, r3, #31
 8005e74:	d507      	bpl.n	8005e86 <__swbuf_r+0x6e>
 8005e76:	2d0a      	cmp	r5, #10
 8005e78:	d105      	bne.n	8005e86 <__swbuf_r+0x6e>
 8005e7a:	0021      	movs	r1, r4
 8005e7c:	0030      	movs	r0, r6
 8005e7e:	f7ff ff43 	bl	8005d08 <_fflush_r>
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d107      	bne.n	8005e96 <__swbuf_r+0x7e>
 8005e86:	0028      	movs	r0, r5
 8005e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e8a:	0021      	movs	r1, r4
 8005e8c:	0030      	movs	r0, r6
 8005e8e:	f000 f805 	bl	8005e9c <__swsetup_r>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	d0d3      	beq.n	8005e3e <__swbuf_r+0x26>
 8005e96:	2501      	movs	r5, #1
 8005e98:	426d      	negs	r5, r5
 8005e9a:	e7f4      	b.n	8005e86 <__swbuf_r+0x6e>

08005e9c <__swsetup_r>:
 8005e9c:	4b30      	ldr	r3, [pc, #192]	; (8005f60 <__swsetup_r+0xc4>)
 8005e9e:	b570      	push	{r4, r5, r6, lr}
 8005ea0:	0005      	movs	r5, r0
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	000c      	movs	r4, r1
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d004      	beq.n	8005eb4 <__swsetup_r+0x18>
 8005eaa:	6a03      	ldr	r3, [r0, #32]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <__swsetup_r+0x18>
 8005eb0:	f7ff fd34 	bl	800591c <__sinit>
 8005eb4:	230c      	movs	r3, #12
 8005eb6:	5ee2      	ldrsh	r2, [r4, r3]
 8005eb8:	b293      	uxth	r3, r2
 8005eba:	0711      	lsls	r1, r2, #28
 8005ebc:	d423      	bmi.n	8005f06 <__swsetup_r+0x6a>
 8005ebe:	06d9      	lsls	r1, r3, #27
 8005ec0:	d407      	bmi.n	8005ed2 <__swsetup_r+0x36>
 8005ec2:	2309      	movs	r3, #9
 8005ec4:	2001      	movs	r0, #1
 8005ec6:	602b      	str	r3, [r5, #0]
 8005ec8:	3337      	adds	r3, #55	; 0x37
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	81a3      	strh	r3, [r4, #12]
 8005ece:	4240      	negs	r0, r0
 8005ed0:	bd70      	pop	{r4, r5, r6, pc}
 8005ed2:	075b      	lsls	r3, r3, #29
 8005ed4:	d513      	bpl.n	8005efe <__swsetup_r+0x62>
 8005ed6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ed8:	2900      	cmp	r1, #0
 8005eda:	d008      	beq.n	8005eee <__swsetup_r+0x52>
 8005edc:	0023      	movs	r3, r4
 8005ede:	3344      	adds	r3, #68	; 0x44
 8005ee0:	4299      	cmp	r1, r3
 8005ee2:	d002      	beq.n	8005eea <__swsetup_r+0x4e>
 8005ee4:	0028      	movs	r0, r5
 8005ee6:	f000 f927 	bl	8006138 <_free_r>
 8005eea:	2300      	movs	r3, #0
 8005eec:	6363      	str	r3, [r4, #52]	; 0x34
 8005eee:	2224      	movs	r2, #36	; 0x24
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	4393      	bics	r3, r2
 8005ef4:	81a3      	strh	r3, [r4, #12]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	6063      	str	r3, [r4, #4]
 8005efa:	6923      	ldr	r3, [r4, #16]
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	2308      	movs	r3, #8
 8005f00:	89a2      	ldrh	r2, [r4, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	81a3      	strh	r3, [r4, #12]
 8005f06:	6923      	ldr	r3, [r4, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10b      	bne.n	8005f24 <__swsetup_r+0x88>
 8005f0c:	21a0      	movs	r1, #160	; 0xa0
 8005f0e:	2280      	movs	r2, #128	; 0x80
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	0089      	lsls	r1, r1, #2
 8005f14:	0092      	lsls	r2, r2, #2
 8005f16:	400b      	ands	r3, r1
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d003      	beq.n	8005f24 <__swsetup_r+0x88>
 8005f1c:	0021      	movs	r1, r4
 8005f1e:	0028      	movs	r0, r5
 8005f20:	f000 f848 	bl	8005fb4 <__smakebuf_r>
 8005f24:	220c      	movs	r2, #12
 8005f26:	5ea3      	ldrsh	r3, [r4, r2]
 8005f28:	2001      	movs	r0, #1
 8005f2a:	001a      	movs	r2, r3
 8005f2c:	b299      	uxth	r1, r3
 8005f2e:	4002      	ands	r2, r0
 8005f30:	4203      	tst	r3, r0
 8005f32:	d00f      	beq.n	8005f54 <__swsetup_r+0xb8>
 8005f34:	2200      	movs	r2, #0
 8005f36:	60a2      	str	r2, [r4, #8]
 8005f38:	6962      	ldr	r2, [r4, #20]
 8005f3a:	4252      	negs	r2, r2
 8005f3c:	61a2      	str	r2, [r4, #24]
 8005f3e:	2000      	movs	r0, #0
 8005f40:	6922      	ldr	r2, [r4, #16]
 8005f42:	4282      	cmp	r2, r0
 8005f44:	d1c4      	bne.n	8005ed0 <__swsetup_r+0x34>
 8005f46:	0609      	lsls	r1, r1, #24
 8005f48:	d5c2      	bpl.n	8005ed0 <__swsetup_r+0x34>
 8005f4a:	2240      	movs	r2, #64	; 0x40
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	81a3      	strh	r3, [r4, #12]
 8005f50:	3801      	subs	r0, #1
 8005f52:	e7bd      	b.n	8005ed0 <__swsetup_r+0x34>
 8005f54:	0788      	lsls	r0, r1, #30
 8005f56:	d400      	bmi.n	8005f5a <__swsetup_r+0xbe>
 8005f58:	6962      	ldr	r2, [r4, #20]
 8005f5a:	60a2      	str	r2, [r4, #8]
 8005f5c:	e7ef      	b.n	8005f3e <__swsetup_r+0xa2>
 8005f5e:	46c0      	nop			; (mov r8, r8)
 8005f60:	20000068 	.word	0x20000068

08005f64 <__swhatbuf_r>:
 8005f64:	b570      	push	{r4, r5, r6, lr}
 8005f66:	000e      	movs	r6, r1
 8005f68:	001d      	movs	r5, r3
 8005f6a:	230e      	movs	r3, #14
 8005f6c:	5ec9      	ldrsh	r1, [r1, r3]
 8005f6e:	0014      	movs	r4, r2
 8005f70:	b096      	sub	sp, #88	; 0x58
 8005f72:	2900      	cmp	r1, #0
 8005f74:	da0c      	bge.n	8005f90 <__swhatbuf_r+0x2c>
 8005f76:	89b2      	ldrh	r2, [r6, #12]
 8005f78:	2380      	movs	r3, #128	; 0x80
 8005f7a:	0011      	movs	r1, r2
 8005f7c:	4019      	ands	r1, r3
 8005f7e:	421a      	tst	r2, r3
 8005f80:	d013      	beq.n	8005faa <__swhatbuf_r+0x46>
 8005f82:	2100      	movs	r1, #0
 8005f84:	3b40      	subs	r3, #64	; 0x40
 8005f86:	2000      	movs	r0, #0
 8005f88:	6029      	str	r1, [r5, #0]
 8005f8a:	6023      	str	r3, [r4, #0]
 8005f8c:	b016      	add	sp, #88	; 0x58
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	466a      	mov	r2, sp
 8005f92:	f000 f85f 	bl	8006054 <_fstat_r>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	dbed      	blt.n	8005f76 <__swhatbuf_r+0x12>
 8005f9a:	23f0      	movs	r3, #240	; 0xf0
 8005f9c:	9901      	ldr	r1, [sp, #4]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	4019      	ands	r1, r3
 8005fa2:	4b03      	ldr	r3, [pc, #12]	; (8005fb0 <__swhatbuf_r+0x4c>)
 8005fa4:	18c9      	adds	r1, r1, r3
 8005fa6:	424b      	negs	r3, r1
 8005fa8:	4159      	adcs	r1, r3
 8005faa:	2380      	movs	r3, #128	; 0x80
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	e7ea      	b.n	8005f86 <__swhatbuf_r+0x22>
 8005fb0:	ffffe000 	.word	0xffffe000

08005fb4 <__smakebuf_r>:
 8005fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fb6:	2602      	movs	r6, #2
 8005fb8:	898b      	ldrh	r3, [r1, #12]
 8005fba:	0005      	movs	r5, r0
 8005fbc:	000c      	movs	r4, r1
 8005fbe:	4233      	tst	r3, r6
 8005fc0:	d006      	beq.n	8005fd0 <__smakebuf_r+0x1c>
 8005fc2:	0023      	movs	r3, r4
 8005fc4:	3347      	adds	r3, #71	; 0x47
 8005fc6:	6023      	str	r3, [r4, #0]
 8005fc8:	6123      	str	r3, [r4, #16]
 8005fca:	2301      	movs	r3, #1
 8005fcc:	6163      	str	r3, [r4, #20]
 8005fce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005fd0:	466a      	mov	r2, sp
 8005fd2:	ab01      	add	r3, sp, #4
 8005fd4:	f7ff ffc6 	bl	8005f64 <__swhatbuf_r>
 8005fd8:	9900      	ldr	r1, [sp, #0]
 8005fda:	0007      	movs	r7, r0
 8005fdc:	0028      	movs	r0, r5
 8005fde:	f7ff fd87 	bl	8005af0 <_malloc_r>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d108      	bne.n	8005ff8 <__smakebuf_r+0x44>
 8005fe6:	220c      	movs	r2, #12
 8005fe8:	5ea3      	ldrsh	r3, [r4, r2]
 8005fea:	059a      	lsls	r2, r3, #22
 8005fec:	d4ef      	bmi.n	8005fce <__smakebuf_r+0x1a>
 8005fee:	2203      	movs	r2, #3
 8005ff0:	4393      	bics	r3, r2
 8005ff2:	431e      	orrs	r6, r3
 8005ff4:	81a6      	strh	r6, [r4, #12]
 8005ff6:	e7e4      	b.n	8005fc2 <__smakebuf_r+0xe>
 8005ff8:	2380      	movs	r3, #128	; 0x80
 8005ffa:	89a2      	ldrh	r2, [r4, #12]
 8005ffc:	6020      	str	r0, [r4, #0]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	81a3      	strh	r3, [r4, #12]
 8006002:	9b00      	ldr	r3, [sp, #0]
 8006004:	6120      	str	r0, [r4, #16]
 8006006:	6163      	str	r3, [r4, #20]
 8006008:	9b01      	ldr	r3, [sp, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00c      	beq.n	8006028 <__smakebuf_r+0x74>
 800600e:	0028      	movs	r0, r5
 8006010:	230e      	movs	r3, #14
 8006012:	5ee1      	ldrsh	r1, [r4, r3]
 8006014:	f000 f830 	bl	8006078 <_isatty_r>
 8006018:	2800      	cmp	r0, #0
 800601a:	d005      	beq.n	8006028 <__smakebuf_r+0x74>
 800601c:	2303      	movs	r3, #3
 800601e:	89a2      	ldrh	r2, [r4, #12]
 8006020:	439a      	bics	r2, r3
 8006022:	3b02      	subs	r3, #2
 8006024:	4313      	orrs	r3, r2
 8006026:	81a3      	strh	r3, [r4, #12]
 8006028:	89a3      	ldrh	r3, [r4, #12]
 800602a:	433b      	orrs	r3, r7
 800602c:	81a3      	strh	r3, [r4, #12]
 800602e:	e7ce      	b.n	8005fce <__smakebuf_r+0x1a>

08006030 <_close_r>:
 8006030:	2300      	movs	r3, #0
 8006032:	b570      	push	{r4, r5, r6, lr}
 8006034:	4d06      	ldr	r5, [pc, #24]	; (8006050 <_close_r+0x20>)
 8006036:	0004      	movs	r4, r0
 8006038:	0008      	movs	r0, r1
 800603a:	602b      	str	r3, [r5, #0]
 800603c:	f7fb fde6 	bl	8001c0c <_close>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d103      	bne.n	800604c <_close_r+0x1c>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d000      	beq.n	800604c <_close_r+0x1c>
 800604a:	6023      	str	r3, [r4, #0]
 800604c:	bd70      	pop	{r4, r5, r6, pc}
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	20000518 	.word	0x20000518

08006054 <_fstat_r>:
 8006054:	2300      	movs	r3, #0
 8006056:	b570      	push	{r4, r5, r6, lr}
 8006058:	4d06      	ldr	r5, [pc, #24]	; (8006074 <_fstat_r+0x20>)
 800605a:	0004      	movs	r4, r0
 800605c:	0008      	movs	r0, r1
 800605e:	0011      	movs	r1, r2
 8006060:	602b      	str	r3, [r5, #0]
 8006062:	f7fb fdd7 	bl	8001c14 <_fstat>
 8006066:	1c43      	adds	r3, r0, #1
 8006068:	d103      	bne.n	8006072 <_fstat_r+0x1e>
 800606a:	682b      	ldr	r3, [r5, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d000      	beq.n	8006072 <_fstat_r+0x1e>
 8006070:	6023      	str	r3, [r4, #0]
 8006072:	bd70      	pop	{r4, r5, r6, pc}
 8006074:	20000518 	.word	0x20000518

08006078 <_isatty_r>:
 8006078:	2300      	movs	r3, #0
 800607a:	b570      	push	{r4, r5, r6, lr}
 800607c:	4d06      	ldr	r5, [pc, #24]	; (8006098 <_isatty_r+0x20>)
 800607e:	0004      	movs	r4, r0
 8006080:	0008      	movs	r0, r1
 8006082:	602b      	str	r3, [r5, #0]
 8006084:	f7fb fdcc 	bl	8001c20 <_isatty>
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	d103      	bne.n	8006094 <_isatty_r+0x1c>
 800608c:	682b      	ldr	r3, [r5, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d000      	beq.n	8006094 <_isatty_r+0x1c>
 8006092:	6023      	str	r3, [r4, #0]
 8006094:	bd70      	pop	{r4, r5, r6, pc}
 8006096:	46c0      	nop			; (mov r8, r8)
 8006098:	20000518 	.word	0x20000518

0800609c <_lseek_r>:
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	0004      	movs	r4, r0
 80060a0:	0008      	movs	r0, r1
 80060a2:	0011      	movs	r1, r2
 80060a4:	001a      	movs	r2, r3
 80060a6:	2300      	movs	r3, #0
 80060a8:	4d05      	ldr	r5, [pc, #20]	; (80060c0 <_lseek_r+0x24>)
 80060aa:	602b      	str	r3, [r5, #0]
 80060ac:	f7fb fdba 	bl	8001c24 <_lseek>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d103      	bne.n	80060bc <_lseek_r+0x20>
 80060b4:	682b      	ldr	r3, [r5, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d000      	beq.n	80060bc <_lseek_r+0x20>
 80060ba:	6023      	str	r3, [r4, #0]
 80060bc:	bd70      	pop	{r4, r5, r6, pc}
 80060be:	46c0      	nop			; (mov r8, r8)
 80060c0:	20000518 	.word	0x20000518

080060c4 <_read_r>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	0004      	movs	r4, r0
 80060c8:	0008      	movs	r0, r1
 80060ca:	0011      	movs	r1, r2
 80060cc:	001a      	movs	r2, r3
 80060ce:	2300      	movs	r3, #0
 80060d0:	4d05      	ldr	r5, [pc, #20]	; (80060e8 <_read_r+0x24>)
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	f7fb fd7e 	bl	8001bd4 <_read>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d103      	bne.n	80060e4 <_read_r+0x20>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d000      	beq.n	80060e4 <_read_r+0x20>
 80060e2:	6023      	str	r3, [r4, #0]
 80060e4:	bd70      	pop	{r4, r5, r6, pc}
 80060e6:	46c0      	nop			; (mov r8, r8)
 80060e8:	20000518 	.word	0x20000518

080060ec <_sbrk_r>:
 80060ec:	2300      	movs	r3, #0
 80060ee:	b570      	push	{r4, r5, r6, lr}
 80060f0:	4d06      	ldr	r5, [pc, #24]	; (800610c <_sbrk_r+0x20>)
 80060f2:	0004      	movs	r4, r0
 80060f4:	0008      	movs	r0, r1
 80060f6:	602b      	str	r3, [r5, #0]
 80060f8:	f7fb fd96 	bl	8001c28 <_sbrk>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d103      	bne.n	8006108 <_sbrk_r+0x1c>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d000      	beq.n	8006108 <_sbrk_r+0x1c>
 8006106:	6023      	str	r3, [r4, #0]
 8006108:	bd70      	pop	{r4, r5, r6, pc}
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	20000518 	.word	0x20000518

08006110 <_write_r>:
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	0004      	movs	r4, r0
 8006114:	0008      	movs	r0, r1
 8006116:	0011      	movs	r1, r2
 8006118:	001a      	movs	r2, r3
 800611a:	2300      	movs	r3, #0
 800611c:	4d05      	ldr	r5, [pc, #20]	; (8006134 <_write_r+0x24>)
 800611e:	602b      	str	r3, [r5, #0]
 8006120:	f7fb fd66 	bl	8001bf0 <_write>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d103      	bne.n	8006130 <_write_r+0x20>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d000      	beq.n	8006130 <_write_r+0x20>
 800612e:	6023      	str	r3, [r4, #0]
 8006130:	bd70      	pop	{r4, r5, r6, pc}
 8006132:	46c0      	nop			; (mov r8, r8)
 8006134:	20000518 	.word	0x20000518

08006138 <_free_r>:
 8006138:	b570      	push	{r4, r5, r6, lr}
 800613a:	0005      	movs	r5, r0
 800613c:	2900      	cmp	r1, #0
 800613e:	d010      	beq.n	8006162 <_free_r+0x2a>
 8006140:	1f0c      	subs	r4, r1, #4
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	da00      	bge.n	800614a <_free_r+0x12>
 8006148:	18e4      	adds	r4, r4, r3
 800614a:	0028      	movs	r0, r5
 800614c:	f7ff fe08 	bl	8005d60 <__malloc_lock>
 8006150:	4a1d      	ldr	r2, [pc, #116]	; (80061c8 <_free_r+0x90>)
 8006152:	6813      	ldr	r3, [r2, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d105      	bne.n	8006164 <_free_r+0x2c>
 8006158:	6063      	str	r3, [r4, #4]
 800615a:	6014      	str	r4, [r2, #0]
 800615c:	0028      	movs	r0, r5
 800615e:	f7ff fe07 	bl	8005d70 <__malloc_unlock>
 8006162:	bd70      	pop	{r4, r5, r6, pc}
 8006164:	42a3      	cmp	r3, r4
 8006166:	d908      	bls.n	800617a <_free_r+0x42>
 8006168:	6820      	ldr	r0, [r4, #0]
 800616a:	1821      	adds	r1, r4, r0
 800616c:	428b      	cmp	r3, r1
 800616e:	d1f3      	bne.n	8006158 <_free_r+0x20>
 8006170:	6819      	ldr	r1, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	1809      	adds	r1, r1, r0
 8006176:	6021      	str	r1, [r4, #0]
 8006178:	e7ee      	b.n	8006158 <_free_r+0x20>
 800617a:	001a      	movs	r2, r3
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <_free_r+0x4e>
 8006182:	42a3      	cmp	r3, r4
 8006184:	d9f9      	bls.n	800617a <_free_r+0x42>
 8006186:	6811      	ldr	r1, [r2, #0]
 8006188:	1850      	adds	r0, r2, r1
 800618a:	42a0      	cmp	r0, r4
 800618c:	d10b      	bne.n	80061a6 <_free_r+0x6e>
 800618e:	6820      	ldr	r0, [r4, #0]
 8006190:	1809      	adds	r1, r1, r0
 8006192:	1850      	adds	r0, r2, r1
 8006194:	6011      	str	r1, [r2, #0]
 8006196:	4283      	cmp	r3, r0
 8006198:	d1e0      	bne.n	800615c <_free_r+0x24>
 800619a:	6818      	ldr	r0, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	1841      	adds	r1, r0, r1
 80061a0:	6011      	str	r1, [r2, #0]
 80061a2:	6053      	str	r3, [r2, #4]
 80061a4:	e7da      	b.n	800615c <_free_r+0x24>
 80061a6:	42a0      	cmp	r0, r4
 80061a8:	d902      	bls.n	80061b0 <_free_r+0x78>
 80061aa:	230c      	movs	r3, #12
 80061ac:	602b      	str	r3, [r5, #0]
 80061ae:	e7d5      	b.n	800615c <_free_r+0x24>
 80061b0:	6820      	ldr	r0, [r4, #0]
 80061b2:	1821      	adds	r1, r4, r0
 80061b4:	428b      	cmp	r3, r1
 80061b6:	d103      	bne.n	80061c0 <_free_r+0x88>
 80061b8:	6819      	ldr	r1, [r3, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	1809      	adds	r1, r1, r0
 80061be:	6021      	str	r1, [r4, #0]
 80061c0:	6063      	str	r3, [r4, #4]
 80061c2:	6054      	str	r4, [r2, #4]
 80061c4:	e7ca      	b.n	800615c <_free_r+0x24>
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	20000510 	.word	0x20000510

080061cc <_init>:
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	46c0      	nop			; (mov r8, r8)
 80061d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061d2:	bc08      	pop	{r3}
 80061d4:	469e      	mov	lr, r3
 80061d6:	4770      	bx	lr

080061d8 <_fini>:
 80061d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061da:	46c0      	nop			; (mov r8, r8)
 80061dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061de:	bc08      	pop	{r3}
 80061e0:	469e      	mov	lr, r3
 80061e2:	4770      	bx	lr
