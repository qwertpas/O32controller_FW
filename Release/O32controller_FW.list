
O32controller_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a1c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08005adc  08005adc  00015adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d28  08005d28  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005d28  08005d28  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d28  08005d28  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d28  08005d28  00015d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d2c  08005d2c  00015d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000068  08005d98  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08005d98  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000061bb  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001290  00000000  00000000  0002628e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f88  00000000  00000000  0002751e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c2a  00000000  00000000  000284a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e03  00000000  00000000  0002a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003281  00000000  00000000  0003bed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00003a18  00000000  00000000  0003f154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005ac4 	.word	0x08005ac4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08005ac4 	.word	0x08005ac4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <foc_startup>:
    	return x;
    }
}


void foc_startup() {
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	46ce      	mov	lr, r9
 80003f8:	4647      	mov	r7, r8
 80003fa:	b580      	push	{r7, lr}

	DISABLE_DRIVE;
 80003fc:	2200      	movs	r2, #0
void foc_startup() {
 80003fe:	b083      	sub	sp, #12
	DISABLE_DRIVE;
 8000400:	2180      	movs	r1, #128	; 0x80
 8000402:	484f      	ldr	r0, [pc, #316]	; (8000540 <foc_startup+0x14c>)
 8000404:	f001 fd90 	bl	8001f28 <HAL_GPIO_WritePin>
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	484c      	ldr	r0, [pc, #304]	; (8000540 <foc_startup+0x14c>)
 800040e:	f001 fd8b 	bl	8001f28 <HAL_GPIO_WritePin>

	//disable RS485 tranceiver driver
	RS485_SET_RX;
 8000412:	2090      	movs	r0, #144	; 0x90
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // turn on complementary channel

	HAL_TIM_Base_Start_IT(&htim2); //100Hz timer for printing

	TIM1->CCR1 = 0;
 8000414:	2500      	movs	r5, #0
	RS485_SET_RX;
 8000416:	2200      	movs	r2, #0
 8000418:	2102      	movs	r1, #2
 800041a:	05c0      	lsls	r0, r0, #23
 800041c:	f001 fd84 	bl	8001f28 <HAL_GPIO_WritePin>
	HAL_ADC_Stop(&hadc); //stop adc before calibration
 8000420:	4e48      	ldr	r6, [pc, #288]	; (8000544 <foc_startup+0x150>)

	HAL_Delay(1000);

	for (int i = 0; i < 10; i++) { //take some measurements to let the sensors settle
		HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 0);
		HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 8000422:	2701      	movs	r7, #1
	HAL_ADC_Stop(&hadc); //stop adc before calibration
 8000424:	0030      	movs	r0, r6
 8000426:	f001 f977 	bl	8001718 <HAL_ADC_Stop>
	HAL_Delay(1);
 800042a:	2001      	movs	r0, #1
 800042c:	f000 ffea 	bl	8001404 <HAL_Delay>
	HAL_ADCEx_Calibration_Start(&hadc); //seems like this uses VREFINT_CAL
 8000430:	0030      	movs	r0, r6
 8000432:	f001 fac1 	bl	80019b8 <HAL_ADCEx_Calibration_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000436:	4c44      	ldr	r4, [pc, #272]	; (8000548 <foc_startup+0x154>)
 8000438:	2100      	movs	r1, #0
 800043a:	0020      	movs	r0, r4
 800043c:	f003 fb5a 	bl	8003af4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); // turn on complementary channel
 8000440:	2100      	movs	r1, #0
 8000442:	0020      	movs	r0, r4
 8000444:	f003 fed2 	bl	80041ec <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000448:	2104      	movs	r1, #4
 800044a:	0020      	movs	r0, r4
 800044c:	f003 fb52 	bl	8003af4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); // turn on complementary channel
 8000450:	2104      	movs	r1, #4
 8000452:	0020      	movs	r0, r4
 8000454:	f003 feca 	bl	80041ec <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000458:	2108      	movs	r1, #8
 800045a:	0020      	movs	r0, r4
 800045c:	f003 fb4a 	bl	8003af4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // turn on complementary channel
 8000460:	2108      	movs	r1, #8
 8000462:	0020      	movs	r0, r4
	TIM1->CCR1 = 0;
 8000464:	4c39      	ldr	r4, [pc, #228]	; (800054c <foc_startup+0x158>)
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // turn on complementary channel
 8000466:	f003 fec1 	bl	80041ec <HAL_TIMEx_PWMN_Start>
	HAL_TIM_Base_Start_IT(&htim2); //100Hz timer for printing
 800046a:	4839      	ldr	r0, [pc, #228]	; (8000550 <foc_startup+0x15c>)
 800046c:	f003 fa9c 	bl	80039a8 <HAL_TIM_Base_Start_IT>
	TIM1->CCR1 = 0;
 8000470:	6365      	str	r5, [r4, #52]	; 0x34
	LED_RED;
 8000472:	2201      	movs	r2, #1
	TIM1->CCR2 = 0;
 8000474:	63a5      	str	r5, [r4, #56]	; 0x38
	LED_RED;
 8000476:	2101      	movs	r1, #1
	TIM1->CCR3 = 0;
 8000478:	63e5      	str	r5, [r4, #60]	; 0x3c
	LED_RED;
 800047a:	4831      	ldr	r0, [pc, #196]	; (8000540 <foc_startup+0x14c>)
 800047c:	f001 fd54 	bl	8001f28 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000480:	20fa      	movs	r0, #250	; 0xfa
 8000482:	00c0      	lsls	r0, r0, #3
 8000484:	f000 ffbe 	bl	8001404 <HAL_Delay>
	LED_GREEN;
 8000488:	2200      	movs	r2, #0
 800048a:	2101      	movs	r1, #1
 800048c:	482c      	ldr	r0, [pc, #176]	; (8000540 <foc_startup+0x14c>)
 800048e:	f001 fd4b 	bl	8001f28 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000492:	2064      	movs	r0, #100	; 0x64
 8000494:	f000 ffb6 	bl	8001404 <HAL_Delay>
	ENABLE_DRIVE;
 8000498:	2201      	movs	r2, #1
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	4828      	ldr	r0, [pc, #160]	; (8000540 <foc_startup+0x14c>)
 800049e:	f001 fd43 	bl	8001f28 <HAL_GPIO_WritePin>
 80004a2:	2201      	movs	r2, #1
 80004a4:	2140      	movs	r1, #64	; 0x40
 80004a6:	4826      	ldr	r0, [pc, #152]	; (8000540 <foc_startup+0x14c>)
 80004a8:	f001 fd3e 	bl	8001f28 <HAL_GPIO_WritePin>
	TIM1->CCR1 = 20;
 80004ac:	2314      	movs	r3, #20
	HAL_Delay(1000);
 80004ae:	20fa      	movs	r0, #250	; 0xfa
	TIM1->CCR1 = 20;
 80004b0:	6363      	str	r3, [r4, #52]	; 0x34
	HAL_Delay(1000);
 80004b2:	0080      	lsls	r0, r0, #2
	TIM1->CCR2 = 0;
 80004b4:	63a5      	str	r5, [r4, #56]	; 0x38
	TIM1->CCR3 = 0;
 80004b6:	63e5      	str	r5, [r4, #60]	; 0x3c
	HAL_Delay(1000);
 80004b8:	f000 ffa4 	bl	8001404 <HAL_Delay>
 80004bc:	4b25      	ldr	r3, [pc, #148]	; (8000554 <foc_startup+0x160>)
 80004be:	4d26      	ldr	r5, [pc, #152]	; (8000558 <foc_startup+0x164>)
 80004c0:	4699      	mov	r9, r3
		HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 80004c2:	1eab      	subs	r3, r5, #2
	HAL_Delay(1000);
 80004c4:	240a      	movs	r4, #10
		HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 80004c6:	4698      	mov	r8, r3
 80004c8:	427f      	negs	r7, r7
		HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2102      	movs	r1, #2
 80004ce:	481c      	ldr	r0, [pc, #112]	; (8000540 <foc_startup+0x14c>)
 80004d0:	f001 fd2a 	bl	8001f28 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 80004d4:	2302      	movs	r3, #2
 80004d6:	002a      	movs	r2, r5
 80004d8:	4641      	mov	r1, r8
 80004da:	4648      	mov	r0, r9
 80004dc:	9700      	str	r7, [sp, #0]
 80004de:	f002 ffd1 	bl	8003484 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 1);
 80004e2:	2201      	movs	r2, #1
 80004e4:	2102      	movs	r1, #2
 80004e6:	4816      	ldr	r0, [pc, #88]	; (8000540 <foc_startup+0x14c>)
 80004e8:	f001 fd1e 	bl	8001f28 <HAL_GPIO_WritePin>

		HAL_ADC_Start_DMA(&hadc, (uint32_t*) p.adc_vals, NBR_ADC);  // start the adc in dma mode
 80004ec:	0029      	movs	r1, r5
 80004ee:	2206      	movs	r2, #6
 80004f0:	0030      	movs	r0, r6
 80004f2:	390e      	subs	r1, #14
	for (int i = 0; i < 10; i++) { //take some measurements to let the sensors settle
 80004f4:	3c01      	subs	r4, #1
		HAL_ADC_Start_DMA(&hadc, (uint32_t*) p.adc_vals, NBR_ADC);  // start the adc in dma mode
 80004f6:	f001 f92f 	bl	8001758 <HAL_ADC_Start_DMA>
	for (int i = 0; i < 10; i++) { //take some measurements to let the sensors settle
 80004fa:	2c00      	cmp	r4, #0
 80004fc:	d1e5      	bne.n	80004ca <foc_startup+0xd6>
	}
	// 780.19 angle counts per 1/6th of an electrical cycle
	// 4681.14 angle counts per electrical cycle
	// 90º out of phase would be 1/4th of an electrical cycle, so 1170.285 angle counts
	m_angle = (uint16_t) ((p.spi_RX[0] << 8) + p.spi_RX[1] + 16384); // 0 to 32767
 80004fe:	2180      	movs	r1, #128	; 0x80
 8000500:	01c9      	lsls	r1, r1, #7
 8000502:	468c      	mov	ip, r1
 8000504:	782b      	ldrb	r3, [r5, #0]
 8000506:	786a      	ldrb	r2, [r5, #1]
 8000508:	021b      	lsls	r3, r3, #8
 800050a:	4462      	add	r2, ip
	e_offset = (m_angle * PPAIRS - e_offset) & (32768 - 1); //convert to electrical angle, modulo 32768
 800050c:	4913      	ldr	r1, [pc, #76]	; (800055c <foc_startup+0x168>)
	m_angle = (uint16_t) ((p.spi_RX[0] << 8) + p.spi_RX[1] + 16384); // 0 to 32767
 800050e:	189b      	adds	r3, r3, r2
 8000510:	b29b      	uxth	r3, r3
	e_offset = (m_angle * PPAIRS - e_offset) & (32768 - 1); //convert to electrical angle, modulo 32768
 8000512:	8808      	ldrh	r0, [r1, #0]
 8000514:	00da      	lsls	r2, r3, #3
 8000516:	1ad2      	subs	r2, r2, r3
 8000518:	1a12      	subs	r2, r2, r0
 800051a:	0452      	lsls	r2, r2, #17
 800051c:	0c52      	lsrs	r2, r2, #17
 800051e:	800a      	strh	r2, [r1, #0]
	e_angle = 0;
 8000520:	4a0f      	ldr	r2, [pc, #60]	; (8000560 <foc_startup+0x16c>)
 8000522:	8014      	strh	r4, [r2, #0]

	step = 0;
	mag = 20;

	m_angle_prev = m_angle;
 8000524:	4a0f      	ldr	r2, [pc, #60]	; (8000564 <foc_startup+0x170>)
 8000526:	8013      	strh	r3, [r2, #0]
	revs = 0;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <foc_startup+0x174>)
 800052a:	601c      	str	r4, [r3, #0]
	cont_angle = 0;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <foc_startup+0x178>)
 800052e:	601c      	str	r4, [r3, #0]
	cont_angle_prev = 0;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <foc_startup+0x17c>)
 8000532:	601c      	str	r4, [r3, #0]
	rpm = 0;

}
 8000534:	b003      	add	sp, #12
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	48001400 	.word	0x48001400
 8000544:	200000b8 	.word	0x200000b8
 8000548:	2000027c 	.word	0x2000027c
 800054c:	40012c00 	.word	0x40012c00
 8000550:	200002c4 	.word	0x200002c4
 8000554:	20000218 	.word	0x20000218
 8000558:	2000040e 	.word	0x2000040e
 800055c:	200000ae 	.word	0x200000ae
 8000560:	200000ac 	.word	0x200000ac
 8000564:	200000b0 	.word	0x200000b0
 8000568:	200000b4 	.word	0x200000b4
 800056c:	200000a0 	.word	0x200000a0
 8000570:	200000a4 	.word	0x200000a4

08000574 <foc_loop>:

void foc_loop() {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	46de      	mov	lr, fp
 8000578:	4645      	mov	r5, r8
 800057a:	4657      	mov	r7, sl
 800057c:	464e      	mov	r6, r9
 800057e:	b5e0      	push	{r5, r6, r7, lr}
	//read MA702 magnetic angle
	HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 0);
 8000580:	2200      	movs	r2, #0
void foc_loop() {
 8000582:	b083      	sub	sp, #12
	HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 0);
 8000584:	2102      	movs	r1, #2
 8000586:	48a5      	ldr	r0, [pc, #660]	; (800081c <foc_loop+0x2a8>)
 8000588:	f001 fcce 	bl	8001f28 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 800058c:	2301      	movs	r3, #1
 800058e:	4ca4      	ldr	r4, [pc, #656]	; (8000820 <foc_loop+0x2ac>)
 8000590:	425b      	negs	r3, r3
 8000592:	0022      	movs	r2, r4
 8000594:	1ea1      	subs	r1, r4, #2
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	48a2      	ldr	r0, [pc, #648]	; (8000824 <foc_loop+0x2b0>)
 800059a:	3303      	adds	r3, #3
 800059c:	f002 ff72 	bl	8003484 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 1);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2102      	movs	r1, #2
 80005a4:	489d      	ldr	r0, [pc, #628]	; (800081c <foc_loop+0x2a8>)
 80005a6:	f001 fcbf 	bl	8001f28 <HAL_GPIO_WritePin>

	//angles represented in [0,32767] (~91 per degree)
	m_angle = ((uint16_t) (p.spi_RX[0]) << 8) + p.spi_RX[1] + 16384;
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	01c9      	lsls	r1, r1, #7
 80005ae:	468c      	mov	ip, r1
 80005b0:	7823      	ldrb	r3, [r4, #0]
 80005b2:	7862      	ldrb	r2, [r4, #1]
 80005b4:	021b      	lsls	r3, r3, #8
 80005b6:	4462      	add	r2, ip
 80005b8:	189b      	adds	r3, r3, r2
	e_angle = (m_angle * PPAIRS - e_offset) & (32768 - 1); //convert to electrical angle and modulo
 80005ba:	499b      	ldr	r1, [pc, #620]	; (8000828 <foc_loop+0x2b4>)
	m_angle = ((uint16_t) (p.spi_RX[0]) << 8) + p.spi_RX[1] + 16384;
 80005bc:	b29b      	uxth	r3, r3
	e_angle = (m_angle * PPAIRS - e_offset) & (32768 - 1); //convert to electrical angle and modulo
 80005be:	8809      	ldrh	r1, [r1, #0]
 80005c0:	00da      	lsls	r2, r3, #3
 80005c2:	1ad2      	subs	r2, r2, r3
 80005c4:	1a52      	subs	r2, r2, r1
 80005c6:	4d99      	ldr	r5, [pc, #612]	; (800082c <foc_loop+0x2b8>)
 80005c8:	0452      	lsls	r2, r2, #17
 80005ca:	0c52      	lsrs	r2, r2, #17
 80005cc:	802a      	strh	r2, [r5, #0]

	if (m_angle_prev < 8192 && m_angle > 24576) { //detect angle wraparound and increment a revolution
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	4997      	ldr	r1, [pc, #604]	; (8000830 <foc_loop+0x2bc>)
 80005d2:	0192      	lsls	r2, r2, #6
 80005d4:	8808      	ldrh	r0, [r1, #0]
 80005d6:	4290      	cmp	r0, r2
 80005d8:	d300      	bcc.n	80005dc <foc_loop+0x68>
 80005da:	e0c3      	b.n	8000764 <foc_loop+0x1f0>
 80005dc:	22c0      	movs	r2, #192	; 0xc0
 80005de:	01d2      	lsls	r2, r2, #7
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d900      	bls.n	80005e6 <foc_loop+0x72>
 80005e4:	e0ce      	b.n	8000784 <foc_loop+0x210>
		revs -= 32768;
 80005e6:	4a93      	ldr	r2, [pc, #588]	; (8000834 <foc_loop+0x2c0>)
 80005e8:	6812      	ldr	r2, [r2, #0]
	} else if (m_angle < 8192 && m_angle_prev > 24576) {
		revs += 32768;
	}
	cont_angle = m_angle + revs;
 80005ea:	189a      	adds	r2, r3, r2
	m_angle_prev = m_angle;
 80005ec:	800b      	strh	r3, [r1, #0]



	//read ADCs
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) p.adc_vals, NBR_ADC);
 80005ee:	4b92      	ldr	r3, [pc, #584]	; (8000838 <foc_loop+0x2c4>)
	cont_angle = m_angle + revs;
 80005f0:	4892      	ldr	r0, [pc, #584]	; (800083c <foc_loop+0x2c8>)
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) p.adc_vals, NBR_ADC);
 80005f2:	4698      	mov	r8, r3
 80005f4:	0019      	movs	r1, r3
	cont_angle = m_angle + revs;
 80005f6:	6002      	str	r2, [r0, #0]
 80005f8:	4683      	mov	fp, r0
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) p.adc_vals, NBR_ADC);
 80005fa:	2206      	movs	r2, #6
 80005fc:	4890      	ldr	r0, [pc, #576]	; (8000840 <foc_loop+0x2cc>)
 80005fe:	f001 f8ab 	bl	8001758 <HAL_ADC_Start_DMA>

	//filter ADC values (https://stackoverflow.com/questions/38918530/simple-low-pass-filter-in-fixed-point)
	//phase currents are in adc units [-2048, 2047] (1 bit sign, 11 bit value)
	//to get current in milliamps, multiply by UAMP_PER_ADC then divide by 1000
	I_u = I_u_accum >> ADC_FILT_LVL;
	I_u_accum = I_u_accum - I_u + (p.adc_vals[3] - adc_U_offset);
 8000602:	4643      	mov	r3, r8
 8000604:	488f      	ldr	r0, [pc, #572]	; (8000844 <foc_loop+0x2d0>)
	I_u = I_u_accum >> ADC_FILT_LVL;
 8000606:	4990      	ldr	r1, [pc, #576]	; (8000848 <foc_loop+0x2d4>)
	I_u_accum = I_u_accum - I_u + (p.adc_vals[3] - adc_U_offset);
 8000608:	4684      	mov	ip, r0
	I_u = I_u_accum >> ADC_FILT_LVL;
 800060a:	680a      	ldr	r2, [r1, #0]
	I_u_accum = I_u_accum - I_u + (p.adc_vals[3] - adc_U_offset);
 800060c:	88db      	ldrh	r3, [r3, #6]
 800060e:	b217      	sxth	r7, r2
 8000610:	4463      	add	r3, ip
 8000612:	1bd2      	subs	r2, r2, r7
 8000614:	189b      	adds	r3, r3, r2
 8000616:	600b      	str	r3, [r1, #0]

	I_v = I_v_accum >> ADC_FILT_LVL;
	I_v_accum = I_v_accum - I_v + (p.adc_vals[0] - adc_V_offset);
 8000618:	4e8c      	ldr	r6, [pc, #560]	; (800084c <foc_loop+0x2d8>)
 800061a:	4643      	mov	r3, r8
 800061c:	46b4      	mov	ip, r6
	I_v = I_v_accum >> ADC_FILT_LVL;
 800061e:	488c      	ldr	r0, [pc, #560]	; (8000850 <foc_loop+0x2dc>)
	I_v_accum = I_v_accum - I_v + (p.adc_vals[0] - adc_V_offset);
 8000620:	881b      	ldrh	r3, [r3, #0]
	I_v = I_v_accum >> ADC_FILT_LVL;
 8000622:	6801      	ldr	r1, [r0, #0]
	I_v_accum = I_v_accum - I_v + (p.adc_vals[0] - adc_V_offset);
 8000624:	4463      	add	r3, ip
 8000626:	b20a      	sxth	r2, r1
 8000628:	1a89      	subs	r1, r1, r2
 800062a:	185b      	adds	r3, r3, r1
 800062c:	6003      	str	r3, [r0, #0]

	I_w = I_w_accum >> ADC_FILT_LVL;
	I_w_accum = I_w_accum - I_w + (p.adc_vals[1] - adc_W_offset);
 800062e:	4c89      	ldr	r4, [pc, #548]	; (8000854 <foc_loop+0x2e0>)
 8000630:	4643      	mov	r3, r8
 8000632:	46a4      	mov	ip, r4
	I_w = I_w_accum >> ADC_FILT_LVL;
 8000634:	4888      	ldr	r0, [pc, #544]	; (8000858 <foc_loop+0x2e4>)
	I_w_accum = I_w_accum - I_w + (p.adc_vals[1] - adc_W_offset);
 8000636:	885b      	ldrh	r3, [r3, #2]
	I_w = I_w_accum >> ADC_FILT_LVL;
 8000638:	6801      	ldr	r1, [r0, #0]
	I_w_accum = I_w_accum - I_w + (p.adc_vals[1] - adc_W_offset);
 800063a:	4463      	add	r3, ip
 800063c:	b20e      	sxth	r6, r1
 800063e:	1b89      	subs	r1, r1, r6
 8000640:	185b      	adds	r3, r3, r1
 8000642:	6003      	str	r3, [r0, #0]



	//Convert phase currents to DQ currents (DQ0 transform):
	uint8_t angle_lut = e_angle >> 7; //scale e_angle [0,32767] to [0,255] for lookup table
 8000644:	8828      	ldrh	r0, [r5, #0]

    //each term below has 15 fractional bits and is signed, floating point equilvalent < 1
    int16_t Q16_sin_t = sin_lut[angle_lut];
 8000646:	4985      	ldr	r1, [pc, #532]	; (800085c <foc_loop+0x2e8>)
	uint8_t angle_lut = e_angle >> 7; //scale e_angle [0,32767] to [0,255] for lookup table
 8000648:	09c3      	lsrs	r3, r0, #7
 800064a:	b2db      	uxtb	r3, r3
    int16_t Q16_sin_t = sin_lut[angle_lut];
 800064c:	005d      	lsls	r5, r3, #1
 800064e:	5e6c      	ldrsh	r4, [r5, r1]
    int16_t Q16_cos_t;
	if(angle_lut < 64){
		Q16_cos_t = sin_lut[(64 - angle_lut) & (256 - 1)]; ///64 out of 256 is the equilvalent of 90º/360º. &255 is mod256.
 8000650:	2540      	movs	r5, #64	; 0x40
    int16_t Q16_sin_t = sin_lut[angle_lut];
 8000652:	46a0      	mov	r8, r4
	if(angle_lut < 64){
 8000654:	2b3f      	cmp	r3, #63	; 0x3f
 8000656:	d900      	bls.n	800065a <foc_loop+0xe6>
	}else{
		Q16_cos_t = sin_lut[(63 - angle_lut) & (256 - 1)];
 8000658:	253f      	movs	r5, #63	; 0x3f
 800065a:	1aed      	subs	r5, r5, r3
 800065c:	23ff      	movs	r3, #255	; 0xff
 800065e:	402b      	ands	r3, r5
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	5e59      	ldrsh	r1, [r3, r1]
	}

    //some intermediate rounding, avg errors in Iq and Id are around 0.1%
    int16_t Q16_SQRT3_2_sin_t = (Q16_SQRT3_2*Q16_sin_t) >> 16;
 8000664:	4643      	mov	r3, r8
 8000666:	4d7e      	ldr	r5, [pc, #504]	; (8000860 <foc_loop+0x2ec>)
 8000668:	436b      	muls	r3, r5
 800066a:	141b      	asrs	r3, r3, #16
 800066c:	4699      	mov	r9, r3
    int16_t Q16_SQRT3_2_cos_t = (Q16_SQRT3_2*Q16_cos_t) >> 16;
    int16_t Q16_1_2_sin_t = (Q16_1_2*Q16_sin_t) >> 16;
 800066e:	4643      	mov	r3, r8
 8000670:	105b      	asrs	r3, r3, #1
 8000672:	469c      	mov	ip, r3
    int16_t Q16_1_2_cos_t = (Q16_1_2*Q16_cos_t) >> 16;
 8000674:	104b      	asrs	r3, r1, #1
 8000676:	469a      	mov	sl, r3

    I_d = ( Q16_cos_t*I_u + ( Q16_SQRT3_2_sin_t - Q16_1_2_cos_t)*I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t)*I_w) >> 16;
 8000678:	464b      	mov	r3, r9
 800067a:	4654      	mov	r4, sl
 800067c:	1b1b      	subs	r3, r3, r4
 800067e:	4353      	muls	r3, r2
    int16_t Q16_SQRT3_2_cos_t = (Q16_SQRT3_2*Q16_cos_t) >> 16;
 8000680:	434d      	muls	r5, r1
    I_d = ( Q16_cos_t*I_u + ( Q16_SQRT3_2_sin_t - Q16_1_2_cos_t)*I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t)*I_w) >> 16;
 8000682:	4379      	muls	r1, r7
 8000684:	1859      	adds	r1, r3, r1
 8000686:	464b      	mov	r3, r9
 8000688:	425b      	negs	r3, r3
 800068a:	1b1b      	subs	r3, r3, r4
    I_q = ( Q16_sin_t*I_u + (-Q16_SQRT3_2_cos_t - Q16_1_2_sin_t)*I_v + ( Q16_SQRT3_2_cos_t - Q16_1_2_sin_t)*I_w) >> 16;
 800068c:	4664      	mov	r4, ip
    I_d = ( Q16_cos_t*I_u + ( Q16_SQRT3_2_sin_t - Q16_1_2_cos_t)*I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t)*I_w) >> 16;
 800068e:	4373      	muls	r3, r6
 8000690:	18cb      	adds	r3, r1, r3
    I_d = (I_d * Q16_2_3) >> 15;
 8000692:	4974      	ldr	r1, [pc, #464]	; (8000864 <foc_loop+0x2f0>)
    int16_t Q16_SQRT3_2_cos_t = (Q16_SQRT3_2*Q16_cos_t) >> 16;
 8000694:	142d      	asrs	r5, r5, #16
    I_d = ( Q16_cos_t*I_u + ( Q16_SQRT3_2_sin_t - Q16_1_2_cos_t)*I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t)*I_w) >> 16;
 8000696:	141b      	asrs	r3, r3, #16
    I_d = (I_d * Q16_2_3) >> 15;
 8000698:	4359      	muls	r1, r3
    I_q = ( Q16_sin_t*I_u + (-Q16_SQRT3_2_cos_t - Q16_1_2_sin_t)*I_v + ( Q16_SQRT3_2_cos_t - Q16_1_2_sin_t)*I_w) >> 16;
 800069a:	426b      	negs	r3, r5
 800069c:	1b1b      	subs	r3, r3, r4
 800069e:	435a      	muls	r2, r3
 80006a0:	4643      	mov	r3, r8
 80006a2:	1b2d      	subs	r5, r5, r4
 80006a4:	435f      	muls	r7, r3
 80006a6:	436e      	muls	r6, r5
 80006a8:	19d2      	adds	r2, r2, r7
 80006aa:	1992      	adds	r2, r2, r6
 80006ac:	1412      	asrs	r2, r2, #16
    I_q = (I_q * -Q16_2_3) >> 15;
 80006ae:	0113      	lsls	r3, r2, #4
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	039b      	lsls	r3, r3, #14
 80006b4:	189b      	adds	r3, r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	189b      	adds	r3, r3, r2
 80006ba:	011a      	lsls	r2, r3, #4

	I_d_filt = I_d_accum >> DQ_FILT_LVL;
 80006bc:	4e6a      	ldr	r6, [pc, #424]	; (8000868 <foc_loop+0x2f4>)
    I_q = (I_q * -Q16_2_3) >> 15;
 80006be:	189b      	adds	r3, r3, r2
 80006c0:	021a      	lsls	r2, r3, #8
 80006c2:	189b      	adds	r3, r3, r2
	I_d_filt = I_d_accum >> DQ_FILT_LVL;
 80006c4:	6832      	ldr	r2, [r6, #0]
    I_d = (I_d * Q16_2_3) >> 15;
 80006c6:	13c9      	asrs	r1, r1, #15
	I_d_filt = I_d_accum >> DQ_FILT_LVL;
 80006c8:	1215      	asrs	r5, r2, #8
	I_d_accum = I_d_accum - I_d_filt + I_d;
 80006ca:	b22d      	sxth	r5, r5
 80006cc:	1b52      	subs	r2, r2, r5
 80006ce:	b20d      	sxth	r5, r1
 80006d0:	1952      	adds	r2, r2, r5
 80006d2:	6032      	str	r2, [r6, #0]

	I_q_filt = I_q_accum >> DQ_FILT_LVL;
 80006d4:	4e65      	ldr	r6, [pc, #404]	; (800086c <foc_loop+0x2f8>)
    I_q = (I_q * -Q16_2_3) >> 15;
 80006d6:	13db      	asrs	r3, r3, #15
	I_q_filt = I_q_accum >> DQ_FILT_LVL;
 80006d8:	6832      	ldr	r2, [r6, #0]
 80006da:	1215      	asrs	r5, r2, #8
	I_q_accum = I_q_accum - I_q_filt + I_q;
 80006dc:	b22d      	sxth	r5, r5
 80006de:	1b52      	subs	r2, r2, r5
 80006e0:	b21d      	sxth	r5, r3
 80006e2:	1952      	adds	r2, r2, r5


	I_d_error = I_d_des - I_d;
	I_q_error = I_q_des - I_q;

	I_d_error_int = clip(I_d_error_int + I_d_error, -32, 32);
 80006e4:	4d62      	ldr	r5, [pc, #392]	; (8000870 <foc_loop+0x2fc>)
	I_q_accum = I_q_accum - I_q_filt + I_q;
 80006e6:	6032      	str	r2, [r6, #0]
	I_d_error_int = clip(I_d_error_int + I_d_error, -32, 32);
 80006e8:	682a      	ldr	r2, [r5, #0]
 80006ea:	1a52      	subs	r2, r2, r1
 80006ec:	1c11      	adds	r1, r2, #0
 80006ee:	b212      	sxth	r2, r2
 80006f0:	3220      	adds	r2, #32
 80006f2:	da02      	bge.n	80006fa <foc_loop+0x186>
 80006f4:	2220      	movs	r2, #32
 80006f6:	4252      	negs	r2, r2
 80006f8:	1c11      	adds	r1, r2, #0
 80006fa:	b209      	sxth	r1, r1
 80006fc:	2920      	cmp	r1, #32
 80006fe:	dd00      	ble.n	8000702 <foc_loop+0x18e>
 8000700:	2120      	movs	r1, #32
 8000702:	6029      	str	r1, [r5, #0]
	I_q_error_int = clip(I_q_error_int + I_q_error, -32, 32);
 8000704:	495b      	ldr	r1, [pc, #364]	; (8000874 <foc_loop+0x300>)
 8000706:	680a      	ldr	r2, [r1, #0]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	1c1a      	adds	r2, r3, #0
 800070c:	b21b      	sxth	r3, r3
 800070e:	3320      	adds	r3, #32
 8000710:	da02      	bge.n	8000718 <foc_loop+0x1a4>
 8000712:	2320      	movs	r3, #32
 8000714:	425b      	negs	r3, r3
 8000716:	1c1a      	adds	r2, r3, #0
 8000718:	b212      	sxth	r2, r2
 800071a:	2a20      	cmp	r2, #32
 800071c:	dd00      	ble.n	8000720 <foc_loop+0x1ac>
 800071e:	2220      	movs	r2, #32



    //Handle i2c commands
//    int cmd = p.i2c_RX[0];
    int cmd = p.uart_RX[1];
 8000720:	236b      	movs	r3, #107	; 0x6b
 8000722:	4e55      	ldr	r6, [pc, #340]	; (8000878 <foc_loop+0x304>)
	I_q_error_int = clip(I_q_error_int + I_q_error, -32, 32);
 8000724:	600a      	str	r2, [r1, #0]
    int cmd = p.uart_RX[1];
 8000726:	5cf5      	ldrb	r5, [r6, r3]
//	} else if (cmd == 9) {
//		step = ((e_angle + 10923) & (32768-1)) / 5461; //six step
//	}

    mag = cmd/2;
    step = ((e_angle + 27307) & (32768-1)) / 5461;
 8000728:	4b54      	ldr	r3, [pc, #336]	; (800087c <foc_loop+0x308>)
 800072a:	4955      	ldr	r1, [pc, #340]	; (8000880 <foc_loop+0x30c>)
 800072c:	469c      	mov	ip, r3
 800072e:	4460      	add	r0, ip
 8000730:	0440      	lsls	r0, r0, #17
 8000732:	0c40      	lsrs	r0, r0, #17
    mag = cmd/2;
 8000734:	106d      	asrs	r5, r5, #1
    step = ((e_angle + 27307) & (32768-1)) / 5461;
 8000736:	f7ff fd71 	bl	800021c <__divsi3>

	//six-step commutation
	if (step == 0) {
 800073a:	2800      	cmp	r0, #0
 800073c:	d129      	bne.n	8000792 <foc_loop+0x21e>
		TIM1->CCR1 = mag;
 800073e:	4b51      	ldr	r3, [pc, #324]	; (8000884 <foc_loop+0x310>)
 8000740:	635d      	str	r5, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000742:	6398      	str	r0, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000744:	63d8      	str	r0, [r3, #60]	; 0x3c



	count++;

	if (p.print_flag) { //100Hz clock
 8000746:	257c      	movs	r5, #124	; 0x7c
	count++;
 8000748:	4a4f      	ldr	r2, [pc, #316]	; (8000888 <foc_loop+0x314>)
 800074a:	6813      	ldr	r3, [r2, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	6013      	str	r3, [r2, #0]
	if (p.print_flag) { //100Hz clock
 8000750:	5d73      	ldrb	r3, [r6, r5]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d12c      	bne.n	80007b0 <foc_loop+0x23c>



		p.print_flag = 0;
	}
}
 8000756:	b003      	add	sp, #12
 8000758:	bcf0      	pop	{r4, r5, r6, r7}
 800075a:	46bb      	mov	fp, r7
 800075c:	46b2      	mov	sl, r6
 800075e:	46a9      	mov	r9, r5
 8000760:	46a0      	mov	r8, r4
 8000762:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (m_angle < 8192 && m_angle_prev > 24576) {
 8000764:	4293      	cmp	r3, r2
 8000766:	d300      	bcc.n	800076a <foc_loop+0x1f6>
 8000768:	e73d      	b.n	80005e6 <foc_loop+0x72>
 800076a:	22c0      	movs	r2, #192	; 0xc0
 800076c:	01d2      	lsls	r2, r2, #7
 800076e:	4290      	cmp	r0, r2
 8000770:	d800      	bhi.n	8000774 <foc_loop+0x200>
 8000772:	e738      	b.n	80005e6 <foc_loop+0x72>
		revs += 32768;
 8000774:	2480      	movs	r4, #128	; 0x80
 8000776:	0224      	lsls	r4, r4, #8
 8000778:	46a4      	mov	ip, r4
 800077a:	482e      	ldr	r0, [pc, #184]	; (8000834 <foc_loop+0x2c0>)
 800077c:	6802      	ldr	r2, [r0, #0]
 800077e:	4462      	add	r2, ip
 8000780:	6002      	str	r2, [r0, #0]
 8000782:	e732      	b.n	80005ea <foc_loop+0x76>
		revs -= 32768;
 8000784:	4c41      	ldr	r4, [pc, #260]	; (800088c <foc_loop+0x318>)
 8000786:	482b      	ldr	r0, [pc, #172]	; (8000834 <foc_loop+0x2c0>)
 8000788:	46a4      	mov	ip, r4
 800078a:	6802      	ldr	r2, [r0, #0]
 800078c:	4462      	add	r2, ip
 800078e:	6002      	str	r2, [r0, #0]
 8000790:	e72b      	b.n	80005ea <foc_loop+0x76>
	if (step == 1) {
 8000792:	2801      	cmp	r0, #1
 8000794:	d122      	bne.n	80007dc <foc_loop+0x268>
		TIM1->CCR3 = 0;
 8000796:	2200      	movs	r2, #0
		TIM1->CCR1 = mag;
 8000798:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <foc_loop+0x310>)
 800079a:	635d      	str	r5, [r3, #52]	; 0x34
		TIM1->CCR2 = mag;
 800079c:	639d      	str	r5, [r3, #56]	; 0x38
	if (p.print_flag) { //100Hz clock
 800079e:	257c      	movs	r5, #124	; 0x7c
		TIM1->CCR3 = 0;
 80007a0:	63da      	str	r2, [r3, #60]	; 0x3c
	count++;
 80007a2:	4a39      	ldr	r2, [pc, #228]	; (8000888 <foc_loop+0x314>)
 80007a4:	6813      	ldr	r3, [r2, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	6013      	str	r3, [r2, #0]
	if (p.print_flag) { //100Hz clock
 80007aa:	5d73      	ldrb	r3, [r6, r5]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d0d2      	beq.n	8000756 <foc_loop+0x1e2>
		cont_angle_prev = cont_angle;
 80007b0:	4659      	mov	r1, fp
 80007b2:	4b37      	ldr	r3, [pc, #220]	; (8000890 <foc_loop+0x31c>)
 80007b4:	6809      	ldr	r1, [r1, #0]
		count = 0;
 80007b6:	2700      	movs	r7, #0
		cont_angle_prev = cont_angle;
 80007b8:	6019      	str	r1, [r3, #0]
		HAL_UART_Transmit_DMA(&huart1, p.uart_RX, 2);
 80007ba:	236a      	movs	r3, #106	; 0x6a
 80007bc:	4698      	mov	r8, r3
 80007be:	4c35      	ldr	r4, [pc, #212]	; (8000894 <foc_loop+0x320>)
 80007c0:	44b0      	add	r8, r6
 80007c2:	4641      	mov	r1, r8
		count = 0;
 80007c4:	6017      	str	r7, [r2, #0]
		HAL_UART_Transmit_DMA(&huart1, p.uart_RX, 2);
 80007c6:	0020      	movs	r0, r4
 80007c8:	2202      	movs	r2, #2
 80007ca:	f003 fecd 	bl	8004568 <HAL_UART_Transmit_DMA>
	    HAL_UART_Receive_DMA(&huart1, p.uart_RX, 2);
 80007ce:	2202      	movs	r2, #2
 80007d0:	4641      	mov	r1, r8
 80007d2:	0020      	movs	r0, r4
 80007d4:	f003 ff18 	bl	8004608 <HAL_UART_Receive_DMA>
		p.print_flag = 0;
 80007d8:	5577      	strb	r7, [r6, r5]
}
 80007da:	e7bc      	b.n	8000756 <foc_loop+0x1e2>
	if (step == 2) {
 80007dc:	2802      	cmp	r0, #2
 80007de:	d105      	bne.n	80007ec <foc_loop+0x278>
		TIM1->CCR1 = 0;
 80007e0:	2200      	movs	r2, #0
 80007e2:	4b28      	ldr	r3, [pc, #160]	; (8000884 <foc_loop+0x310>)
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = mag;
 80007e6:	639d      	str	r5, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80007e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80007ea:	e7ac      	b.n	8000746 <foc_loop+0x1d2>
	if (step == 3) {
 80007ec:	2803      	cmp	r0, #3
 80007ee:	d105      	bne.n	80007fc <foc_loop+0x288>
		TIM1->CCR1 = 0;
 80007f0:	2200      	movs	r2, #0
 80007f2:	4b24      	ldr	r3, [pc, #144]	; (8000884 <foc_loop+0x310>)
 80007f4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = mag;
 80007f6:	639d      	str	r5, [r3, #56]	; 0x38
		TIM1->CCR3 = mag;
 80007f8:	63dd      	str	r5, [r3, #60]	; 0x3c
 80007fa:	e7a4      	b.n	8000746 <foc_loop+0x1d2>
	if (step == 4) {
 80007fc:	2804      	cmp	r0, #4
 80007fe:	d105      	bne.n	800080c <foc_loop+0x298>
		TIM1->CCR1 = 0;
 8000800:	2200      	movs	r2, #0
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <foc_loop+0x310>)
 8000804:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000806:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = mag;
 8000808:	63dd      	str	r5, [r3, #60]	; 0x3c
 800080a:	e79c      	b.n	8000746 <foc_loop+0x1d2>
	if (step == 5) {
 800080c:	2805      	cmp	r0, #5
 800080e:	d19a      	bne.n	8000746 <foc_loop+0x1d2>
		TIM1->CCR2 = 0;
 8000810:	2200      	movs	r2, #0
		TIM1->CCR1 = mag;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <foc_loop+0x310>)
 8000814:	635d      	str	r5, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000816:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = mag;
 8000818:	63dd      	str	r5, [r3, #60]	; 0x3c
 800081a:	e794      	b.n	8000746 <foc_loop+0x1d2>
 800081c:	48001400 	.word	0x48001400
 8000820:	2000040e 	.word	0x2000040e
 8000824:	20000218 	.word	0x20000218
 8000828:	200000ae 	.word	0x200000ae
 800082c:	200000ac 	.word	0x200000ac
 8000830:	200000b0 	.word	0x200000b0
 8000834:	200000b4 	.word	0x200000b4
 8000838:	20000400 	.word	0x20000400
 800083c:	200000a0 	.word	0x200000a0
 8000840:	200000b8 	.word	0x200000b8
 8000844:	fffff7fd 	.word	0xfffff7fd
 8000848:	20000094 	.word	0x20000094
 800084c:	fffff80a 	.word	0xfffff80a
 8000850:	20000098 	.word	0x20000098
 8000854:	fffff804 	.word	0xfffff804
 8000858:	2000009c 	.word	0x2000009c
 800085c:	08005adc 	.word	0x08005adc
 8000860:	0000ddb4 	.word	0x0000ddb4
 8000864:	0000aaab 	.word	0x0000aaab
 8000868:	20000084 	.word	0x20000084
 800086c:	2000008c 	.word	0x2000008c
 8000870:	20000088 	.word	0x20000088
 8000874:	20000090 	.word	0x20000090
 8000878:	20000394 	.word	0x20000394
 800087c:	00006aab 	.word	0x00006aab
 8000880:	00001555 	.word	0x00001555
 8000884:	40012c00 	.word	0x40012c00
 8000888:	200000a8 	.word	0x200000a8
 800088c:	ffff8000 	.word	0xffff8000
 8000890:	200000a4 	.word	0x200000a4
 8000894:	2000030c 	.word	0x2000030c

08000898 <__io_putchar>:
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

//overrides printf
int __io_putchar(int ch) {
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000898:	2301      	movs	r3, #1
int __io_putchar(int ch) {
 800089a:	b500      	push	{lr}
 800089c:	b083      	sub	sp, #12
 800089e:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80008a0:	2201      	movs	r2, #1
 80008a2:	425b      	negs	r3, r3
 80008a4:	a901      	add	r1, sp, #4
 80008a6:	4803      	ldr	r0, [pc, #12]	; (80008b4 <__io_putchar+0x1c>)
 80008a8:	f003 fd4c 	bl	8004344 <HAL_UART_Transmit>
	return ch;
 80008ac:	9801      	ldr	r0, [sp, #4]
}
 80008ae:	b003      	add	sp, #12
 80008b0:	bd00      	pop	{pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	2000030c 	.word	0x2000030c

080008b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//Callback whenever a timer rolls over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim == &htim2) { //100Hz
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0x14>)
 80008ba:	4283      	cmp	r3, r0
 80008bc:	d000      	beq.n	80008c0 <HAL_TIM_PeriodElapsedCallback+0x8>
		p.print_flag = 1;
	}
}
 80008be:	4770      	bx	lr
		p.print_flag = 1;
 80008c0:	227c      	movs	r2, #124	; 0x7c
 80008c2:	2101      	movs	r1, #1
 80008c4:	4b02      	ldr	r3, [pc, #8]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80008c6:	5499      	strb	r1, [r3, r2]
}
 80008c8:	e7f9      	b.n	80008be <HAL_TIM_PeriodElapsedCallback+0x6>
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	200002c4 	.word	0x200002c4
 80008d0:	20000394 	.word	0x20000394

080008d4 <HAL_I2C_SlaveTxCpltCallback>:
 *         you can add your own implementation.
 * @retval None
 */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
	p.i2c_complete_flag = 1;
 80008d4:	227d      	movs	r2, #125	; 0x7d
 80008d6:	2101      	movs	r1, #1
 80008d8:	4b01      	ldr	r3, [pc, #4]	; (80008e0 <HAL_I2C_SlaveTxCpltCallback+0xc>)
 80008da:	5499      	strb	r1, [r3, r2]
}
 80008dc:	4770      	bx	lr
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	20000394 	.word	0x20000394

080008e4 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
//	RS485_SET_RX;
//	LED_GREEN;

}
 80008e4:	4770      	bx	lr
 80008e6:	46c0      	nop			; (mov r8, r8)

080008e8 <Error_Handler>:
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	LED_RED;
 80008e8:	2201      	movs	r2, #1
 80008ea:	2101      	movs	r1, #1
{
 80008ec:	b510      	push	{r4, lr}
	LED_RED;
 80008ee:	4808      	ldr	r0, [pc, #32]	; (8000910 <Error_Handler+0x28>)
 80008f0:	f001 fb1a 	bl	8001f28 <HAL_GPIO_WritePin>
	printf("ERROR HANDLER \n");
 80008f4:	4807      	ldr	r0, [pc, #28]	; (8000914 <Error_Handler+0x2c>)
 80008f6:	f004 fd17 	bl	8005328 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fa:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008fc:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <Error_Handler+0x30>)
 8000902:	4a06      	ldr	r2, [pc, #24]	; (800091c <Error_Handler+0x34>)
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	e7fd      	b.n	800090a <Error_Handler+0x22>
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	48001400 	.word	0x48001400
 8000914:	08005cdc 	.word	0x08005cdc
 8000918:	e000ed00 	.word	0xe000ed00
 800091c:	05fa0004 	.word	0x05fa0004

08000920 <SystemClock_Config>:
{
 8000920:	b510      	push	{r4, lr}
 8000922:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000924:	222c      	movs	r2, #44	; 0x2c
 8000926:	2100      	movs	r1, #0
 8000928:	a809      	add	r0, sp, #36	; 0x24
 800092a:	f004 fd07 	bl	800533c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092e:	2210      	movs	r2, #16
 8000930:	2100      	movs	r1, #0
 8000932:	a804      	add	r0, sp, #16
 8000934:	f004 fd02 	bl	800533c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000938:	2210      	movs	r2, #16
 800093a:	2100      	movs	r1, #0
 800093c:	4668      	mov	r0, sp
 800093e:	f004 fcfd 	bl	800533c <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000942:	2312      	movs	r3, #18
 8000944:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000946:	3b11      	subs	r3, #17
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	2410      	movs	r4, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800094a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800094c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800094e:	23e0      	movs	r3, #224	; 0xe0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000950:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000952:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000954:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000956:	3c0e      	subs	r4, #14
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800095c:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095e:	f001 ffdb 	bl	8002918 <HAL_RCC_OscConfig>
 8000962:	2800      	cmp	r0, #0
 8000964:	d117      	bne.n	8000996 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000966:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800096a:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800096c:	2101      	movs	r1, #1
 800096e:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000970:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000972:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000974:	f002 fa2a 	bl	8002dcc <HAL_RCC_ClockConfig>
 8000978:	2800      	cmp	r0, #0
 800097a:	d10c      	bne.n	8000996 <SystemClock_Config+0x76>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800097c:	2321      	movs	r3, #33	; 0x21
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800097e:	2200      	movs	r2, #0
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000980:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000982:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000984:	4668      	mov	r0, sp
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000986:	9202      	str	r2, [sp, #8]
 8000988:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098a:	f002 fb09 	bl	8002fa0 <HAL_RCCEx_PeriphCLKConfig>
 800098e:	2800      	cmp	r0, #0
 8000990:	d101      	bne.n	8000996 <SystemClock_Config+0x76>
}
 8000992:	b014      	add	sp, #80	; 0x50
 8000994:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000996:	f7ff ffa7 	bl	80008e8 <Error_Handler>
 800099a:	46c0      	nop			; (mov r8, r8)

0800099c <main>:
{
 800099c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800099e:	b0a9      	sub	sp, #164	; 0xa4
  HAL_Init();
 80009a0:	f000 fd0e 	bl	80013c0 <HAL_Init>
  SystemClock_Config();
 80009a4:	f7ff ffbc 	bl	8000920 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	2214      	movs	r2, #20
 80009aa:	2100      	movs	r1, #0
 80009ac:	a820      	add	r0, sp, #128	; 0x80
 80009ae:	f004 fcc5 	bl	800533c <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	4ce3      	ldr	r4, [pc, #908]	; (8000d44 <main+0x3a8>)
 80009b6:	03d2      	lsls	r2, r2, #15
 80009b8:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin|MAG_NCS_Pin|OC_TH_STBY2_Pin|OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 80009ba:	21c3      	movs	r1, #195	; 0xc3
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009bc:	4313      	orrs	r3, r2
 80009be:	6163      	str	r3, [r4, #20]
 80009c0:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin|MAG_NCS_Pin|OC_TH_STBY2_Pin|OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 80009c2:	48e1      	ldr	r0, [pc, #900]	; (8000d48 <main+0x3ac>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c4:	4013      	ands	r3, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c8:	9302      	str	r3, [sp, #8]
 80009ca:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	6963      	ldr	r3, [r4, #20]
 80009ce:	0292      	lsls	r2, r2, #10
 80009d0:	4313      	orrs	r3, r2
 80009d2:	6163      	str	r3, [r4, #20]
 80009d4:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	9303      	str	r3, [sp, #12]
 80009de:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e0:	6963      	ldr	r3, [r4, #20]
 80009e2:	02d2      	lsls	r2, r2, #11
 80009e4:	4313      	orrs	r3, r2
 80009e6:	6163      	str	r3, [r4, #20]
 80009e8:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ec:	4013      	ands	r3, r2
 80009ee:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin|MAG_NCS_Pin|OC_TH_STBY2_Pin|OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin|MAG_NCS_Pin|OC_TH_STBY2_Pin|OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 80009f4:	f001 fa98 	bl	8001f28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USART_DE_GPIO_Port, USART_DE_Pin, GPIO_PIN_RESET);
 80009f8:	2090      	movs	r0, #144	; 0x90
 80009fa:	2200      	movs	r2, #0
 80009fc:	2102      	movs	r1, #2
 80009fe:	05c0      	lsls	r0, r0, #23
 8000a00:	f001 fa92 	bl	8001f28 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_STATUS_Pin|MAG_NCS_Pin|OC_TH_STBY2_Pin|OC_TH_STBY1_Pin;
 8000a04:	23c3      	movs	r3, #195	; 0xc3
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a06:	48d0      	ldr	r0, [pc, #832]	; (8000d48 <main+0x3ac>)
 8000a08:	a920      	add	r1, sp, #128	; 0x80
  GPIO_InitStruct.Pin = LED_STATUS_Pin|MAG_NCS_Pin|OC_TH_STBY2_Pin|OC_TH_STBY1_Pin;
 8000a0a:	9320      	str	r3, [sp, #128]	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	9621      	str	r6, [sp, #132]	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	9522      	str	r5, [sp, #136]	; 0x88
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	9523      	str	r5, [sp, #140]	; 0x8c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a12:	f001 f98b 	bl	8001d2c <HAL_GPIO_Init>
  HAL_GPIO_Init(USART_DE_GPIO_Port, &GPIO_InitStruct);
 8000a16:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = USART_DE_Pin;
 8000a18:	2302      	movs	r3, #2
  HAL_GPIO_Init(USART_DE_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	a920      	add	r1, sp, #128	; 0x80
 8000a1c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = USART_DE_Pin;
 8000a1e:	9320      	str	r3, [sp, #128]	; 0x80
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a20:	9322      	str	r3, [sp, #136]	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	9621      	str	r6, [sp, #132]	; 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	9523      	str	r5, [sp, #140]	; 0x8c
  HAL_GPIO_Init(USART_DE_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f001 f981 	bl	8001d2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OC_SEL_Pin;
 8000a2a:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = OC_SEL_Pin;
 8000a2e:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8000a30:	a920      	add	r1, sp, #128	; 0x80
 8000a32:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = OC_SEL_Pin;
 8000a34:	9320      	str	r3, [sp, #128]	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	9521      	str	r5, [sp, #132]	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	9522      	str	r5, [sp, #136]	; 0x88
  HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f001 f977 	bl	8001d2c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a3e:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a40:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a42:	4333      	orrs	r3, r6
 8000a44:	6163      	str	r3, [r4, #20]
 8000a46:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a48:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a4a:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a4c:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a52:	f001 f80b 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a56:	2009      	movs	r0, #9
 8000a58:	f001 f83a 	bl	8001ad0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	200a      	movs	r0, #10
 8000a62:	f001 f803 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000a66:	200a      	movs	r0, #10
 8000a68:	f001 f832 	bl	8001ad0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	200b      	movs	r0, #11
 8000a72:	f000 fffb 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000a76:	200b      	movs	r0, #11
 8000a78:	f001 f82a 	bl	8001ad0 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8000a7c:	4cb3      	ldr	r4, [pc, #716]	; (8000d4c <main+0x3b0>)
 8000a7e:	4bb4      	ldr	r3, [pc, #720]	; (8000d50 <main+0x3b4>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a80:	0020      	movs	r0, r4
  hi2c1.Instance = I2C1;
 8000a82:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000a84:	4bb3      	ldr	r3, [pc, #716]	; (8000d54 <main+0x3b8>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a86:	60e6      	str	r6, [r4, #12]
  hi2c1.Init.Timing = 0x2000090E;
 8000a88:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 18;
 8000a8a:	2312      	movs	r3, #18
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress1 = 18;
 8000a8e:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8000a90:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a92:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a94:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a96:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a98:	f001 fa4c 	bl	8001f34 <HAL_I2C_Init>
 8000a9c:	2800      	cmp	r0, #0
 8000a9e:	d000      	beq.n	8000aa2 <main+0x106>
 8000aa0:	e14d      	b.n	8000d3e <main+0x3a2>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	0020      	movs	r0, r4
 8000aa6:	f001 fee3 	bl	8002870 <HAL_I2CEx_ConfigAnalogFilter>
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	d000      	beq.n	8000ab0 <main+0x114>
 8000aae:	e146      	b.n	8000d3e <main+0x3a2>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	0020      	movs	r0, r4
 8000ab4:	f001 ff02 	bl	80028bc <HAL_I2CEx_ConfigDigitalFilter>
 8000ab8:	1e05      	subs	r5, r0, #0
 8000aba:	d000      	beq.n	8000abe <main+0x122>
 8000abc:	e13f      	b.n	8000d3e <main+0x3a2>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000abe:	220c      	movs	r2, #12
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	a809      	add	r0, sp, #36	; 0x24
 8000ac4:	f004 fc3a 	bl	800533c <memset>
  hadc.Instance = ADC1;
 8000ac8:	4ca3      	ldr	r4, [pc, #652]	; (8000d58 <main+0x3bc>)
 8000aca:	4ba4      	ldr	r3, [pc, #656]	; (8000d5c <main+0x3c0>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000acc:	2704      	movs	r7, #4
  hadc.Instance = ADC1;
 8000ace:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad0:	23c2      	movs	r3, #194	; 0xc2
 8000ad2:	33ff      	adds	r3, #255	; 0xff
 8000ad4:	61e3      	str	r3, [r4, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ad6:	3b9e      	subs	r3, #158	; 0x9e
 8000ad8:	3bff      	subs	r3, #255	; 0xff
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ada:	0020      	movs	r0, r4
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000adc:	61a5      	str	r5, [r4, #24]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ade:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ae0:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ae2:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000ae4:	6126      	str	r6, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae6:	6167      	str	r7, [r4, #20]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ae8:	6225      	str	r5, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000aea:	54e5      	strb	r5, [r4, r3]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aec:	62a6      	str	r6, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000aee:	f000 fd6b 	bl	80015c8 <HAL_ADC_Init>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	d000      	beq.n	8000af8 <main+0x15c>
 8000af6:	e122      	b.n	8000d3e <main+0x3a2>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	015b      	lsls	r3, r3, #5
 8000afc:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000afe:	2380      	movs	r3, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_0;
 8000b00:	9009      	str	r0, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b02:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b04:	0020      	movs	r0, r4
 8000b06:	a909      	add	r1, sp, #36	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b08:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b0a:	f000 fec1 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	d000      	beq.n	8000b14 <main+0x178>
 8000b12:	e114      	b.n	8000d3e <main+0x3a2>
  sConfig.Channel = ADC_CHANNEL_3;
 8000b14:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b16:	0020      	movs	r0, r4
 8000b18:	a909      	add	r1, sp, #36	; 0x24
  sConfig.Channel = ADC_CHANNEL_3;
 8000b1a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b1c:	f000 feb8 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000b20:	2800      	cmp	r0, #0
 8000b22:	d000      	beq.n	8000b26 <main+0x18a>
 8000b24:	e10b      	b.n	8000d3e <main+0x3a2>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b26:	0020      	movs	r0, r4
 8000b28:	a909      	add	r1, sp, #36	; 0x24
  sConfig.Channel = ADC_CHANNEL_4;
 8000b2a:	9709      	str	r7, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b2c:	f000 feb0 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d000      	beq.n	8000b36 <main+0x19a>
 8000b34:	e103      	b.n	8000d3e <main+0x3a2>
  sConfig.Channel = ADC_CHANNEL_9;
 8000b36:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b38:	0020      	movs	r0, r4
 8000b3a:	a909      	add	r1, sp, #36	; 0x24
  sConfig.Channel = ADC_CHANNEL_9;
 8000b3c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b3e:	f000 fea7 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000b42:	2800      	cmp	r0, #0
 8000b44:	d000      	beq.n	8000b48 <main+0x1ac>
 8000b46:	e0fa      	b.n	8000d3e <main+0x3a2>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b48:	2310      	movs	r3, #16
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b4a:	0020      	movs	r0, r4
 8000b4c:	a909      	add	r1, sp, #36	; 0x24
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b4e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b50:	f000 fe9e 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000b54:	2800      	cmp	r0, #0
 8000b56:	d000      	beq.n	8000b5a <main+0x1be>
 8000b58:	e0f1      	b.n	8000d3e <main+0x3a2>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000b5a:	2311      	movs	r3, #17
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b5c:	0020      	movs	r0, r4
 8000b5e:	a909      	add	r1, sp, #36	; 0x24
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000b60:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b62:	f000 fe95 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000b66:	2800      	cmp	r0, #0
 8000b68:	d000      	beq.n	8000b6c <main+0x1d0>
 8000b6a:	e0e8      	b.n	8000d3e <main+0x3a2>
  hspi1.Instance = SPI1;
 8000b6c:	487c      	ldr	r0, [pc, #496]	; (8000d60 <main+0x3c4>)
 8000b6e:	4b7d      	ldr	r3, [pc, #500]	; (8000d64 <main+0x3c8>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b70:	22e0      	movs	r2, #224	; 0xe0
  hspi1.Instance = SPI1;
 8000b72:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b74:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b76:	00d2      	lsls	r2, r2, #3
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b78:	005b      	lsls	r3, r3, #1
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b7a:	2680      	movs	r6, #128	; 0x80
  hspi1.Init.CRCPolynomial = 7;
 8000b7c:	2107      	movs	r1, #7
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b7e:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b80:	60c2      	str	r2, [r0, #12]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b82:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b84:	2208      	movs	r2, #8
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b86:	3f02      	subs	r7, #2
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b88:	00b6      	lsls	r6, r6, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b8a:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b8c:	6107      	str	r7, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b8e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b90:	6186      	str	r6, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b92:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b94:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b96:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b98:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b9a:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b9c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b9e:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ba0:	f002 fbca 	bl	8003338 <HAL_SPI_Init>
 8000ba4:	1e05      	subs	r5, r0, #0
 8000ba6:	d000      	beq.n	8000baa <main+0x20e>
 8000ba8:	e0c9      	b.n	8000d3e <main+0x3a2>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	2210      	movs	r2, #16
 8000bac:	2100      	movs	r1, #0
 8000bae:	a810      	add	r0, sp, #64	; 0x40
 8000bb0:	f004 fbc4 	bl	800533c <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bb4:	2214      	movs	r2, #20
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	a814      	add	r0, sp, #80	; 0x50
 8000bba:	f004 fbbf 	bl	800533c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbe:	2208      	movs	r2, #8
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	a807      	add	r0, sp, #28
 8000bc4:	f004 fbba 	bl	800533c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc8:	221c      	movs	r2, #28
 8000bca:	2100      	movs	r1, #0
 8000bcc:	a819      	add	r0, sp, #100	; 0x64
 8000bce:	f004 fbb5 	bl	800533c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	a820      	add	r0, sp, #128	; 0x80
 8000bd8:	f004 fbb0 	bl	800533c <memset>
  htim1.Instance = TIM1;
 8000bdc:	4c62      	ldr	r4, [pc, #392]	; (8000d68 <main+0x3cc>)
 8000bde:	4b63      	ldr	r3, [pc, #396]	; (8000d6c <main+0x3d0>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000be0:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 8000be2:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 2;
 8000be4:	6067      	str	r7, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be6:	60a5      	str	r5, [r4, #8]
  htim1.Init.Period = 512;
 8000be8:	60e6      	str	r6, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bea:	6125      	str	r5, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bec:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bee:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bf0:	f002 fe62 	bl	80038b8 <HAL_TIM_Base_Init>
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	d000      	beq.n	8000bfa <main+0x25e>
 8000bf8:	e0a1      	b.n	8000d3e <main+0x3a2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfa:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bfc:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfe:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c00:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c02:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c04:	f003 f8f8 	bl	8003df8 <HAL_TIM_ConfigClockSource>
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	d000      	beq.n	8000c0e <main+0x272>
 8000c0c:	e097      	b.n	8000d3e <main+0x3a2>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c0e:	0020      	movs	r0, r4
 8000c10:	f002 fef8 	bl	8003a04 <HAL_TIM_PWM_Init>
 8000c14:	2800      	cmp	r0, #0
 8000c16:	d000      	beq.n	8000c1a <main+0x27e>
 8000c18:	e091      	b.n	8000d3e <main+0x3a2>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	9314      	str	r3, [sp, #80]	; 0x50
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000c1e:	336b      	adds	r3, #107	; 0x6b
 8000c20:	9315      	str	r3, [sp, #84]	; 0x54
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 8000c22:	2380      	movs	r3, #128	; 0x80
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000c24:	9017      	str	r0, [sp, #92]	; 0x5c
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 8000c26:	021b      	lsls	r3, r3, #8
  sSlaveConfig.TriggerFilter = 0;
 8000c28:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000c2a:	a914      	add	r1, sp, #80	; 0x50
 8000c2c:	0020      	movs	r0, r4
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 8000c2e:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000c30:	f003 f99a 	bl	8003f68 <HAL_TIM_SlaveConfigSynchro>
 8000c34:	2800      	cmp	r0, #0
 8000c36:	d000      	beq.n	8000c3a <main+0x29e>
 8000c38:	e081      	b.n	8000d3e <main+0x3a2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3a:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3c:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c3e:	a907      	add	r1, sp, #28
 8000c40:	0020      	movs	r0, r4
 8000c42:	f003 fb1b 	bl	800427c <HAL_TIMEx_MasterConfigSynchronization>
 8000c46:	2800      	cmp	r0, #0
 8000c48:	d179      	bne.n	8000d3e <main+0x3a2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c4a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8000c4c:	901a      	str	r0, [sp, #104]	; 0x68
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4e:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c50:	901c      	str	r0, [sp, #112]	; 0x70
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c52:	901d      	str	r0, [sp, #116]	; 0x74
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c54:	901e      	str	r0, [sp, #120]	; 0x78
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c56:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	0020      	movs	r0, r4
 8000c5c:	a919      	add	r1, sp, #100	; 0x64
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c5e:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c60:	f002 ffaa 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
 8000c64:	2800      	cmp	r0, #0
 8000c66:	d16a      	bne.n	8000d3e <main+0x3a2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c68:	2204      	movs	r2, #4
 8000c6a:	0020      	movs	r0, r4
 8000c6c:	a919      	add	r1, sp, #100	; 0x64
 8000c6e:	f002 ffa3 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d163      	bne.n	8000d3e <main+0x3a2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c76:	2208      	movs	r2, #8
 8000c78:	0020      	movs	r0, r4
 8000c7a:	a919      	add	r1, sp, #100	; 0x64
 8000c7c:	f002 ff9c 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
 8000c80:	2800      	cmp	r0, #0
 8000c82:	d15c      	bne.n	8000d3e <main+0x3a2>
  sBreakDeadTimeConfig.DeadTime = 10;
 8000c84:	230a      	movs	r3, #10
 8000c86:	9323      	str	r3, [sp, #140]	; 0x8c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c88:	2380      	movs	r3, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c8a:	9020      	str	r0, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c8c:	9021      	str	r0, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c8e:	9022      	str	r0, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c90:	9024      	str	r0, [sp, #144]	; 0x90
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c92:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c94:	9027      	str	r0, [sp, #156]	; 0x9c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c96:	a920      	add	r1, sp, #128	; 0x80
 8000c98:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c9a:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c9c:	f003 fb1c 	bl	80042d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d14c      	bne.n	8000d3e <main+0x3a2>
  HAL_TIM_MspPostInit(&htim1);
 8000ca4:	0020      	movs	r0, r4
 8000ca6:	f000 f9e7 	bl	8001078 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 8000caa:	4831      	ldr	r0, [pc, #196]	; (8000d70 <main+0x3d4>)
 8000cac:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <main+0x3d8>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cae:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 8000cb0:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000cb2:	23e1      	movs	r3, #225	; 0xe1
 8000cb4:	025b      	lsls	r3, r3, #9
 8000cb6:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb8:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cba:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cbc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cbe:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cc0:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cca:	f004 f967 	bl	8004f9c <HAL_UART_Init>
 8000cce:	1e05      	subs	r5, r0, #0
 8000cd0:	d135      	bne.n	8000d3e <main+0x3a2>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	2210      	movs	r2, #16
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	a80c      	add	r0, sp, #48	; 0x30
 8000cd8:	f004 fb30 	bl	800533c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cdc:	2208      	movs	r2, #8
 8000cde:	2100      	movs	r1, #0
 8000ce0:	a805      	add	r0, sp, #20
 8000ce2:	f004 fb2b 	bl	800533c <memset>
  htim2.Instance = TIM2;
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	4c23      	ldr	r4, [pc, #140]	; (8000d78 <main+0x3dc>)
 8000cea:	05db      	lsls	r3, r3, #23
 8000cec:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 47;
 8000cee:	232f      	movs	r3, #47	; 0x2f
 8000cf0:	6063      	str	r3, [r4, #4]
  htim2.Init.Period = 10000;
 8000cf2:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <main+0x3e0>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cf4:	0020      	movs	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 10000;
 8000cf8:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfa:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfc:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cfe:	f002 fddb 	bl	80038b8 <HAL_TIM_Base_Init>
 8000d02:	2800      	cmp	r0, #0
 8000d04:	d11b      	bne.n	8000d3e <main+0x3a2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d06:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d08:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0a:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d0c:	a90c      	add	r1, sp, #48	; 0x30
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0e:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d10:	f003 f872 	bl	8003df8 <HAL_TIM_ConfigClockSource>
 8000d14:	2800      	cmp	r0, #0
 8000d16:	d112      	bne.n	8000d3e <main+0x3a2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d18:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1a:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d1c:	a905      	add	r1, sp, #20
 8000d1e:	0020      	movs	r0, r4
 8000d20:	f003 faac 	bl	800427c <HAL_TIMEx_MasterConfigSynchronization>
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d10a      	bne.n	8000d3e <main+0x3a2>
  RS485_SET_RX;
 8000d28:	2090      	movs	r0, #144	; 0x90
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	05c0      	lsls	r0, r0, #23
 8000d30:	f001 f8fa 	bl	8001f28 <HAL_GPIO_WritePin>
	foc_startup();
 8000d34:	f7ff fb5e 	bl	80003f4 <foc_startup>
		foc_loop();
 8000d38:	f7ff fc1c 	bl	8000574 <foc_loop>
 8000d3c:	e7fc      	b.n	8000d38 <main+0x39c>
    Error_Handler();
 8000d3e:	f7ff fdd3 	bl	80008e8 <Error_Handler>
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	40021000 	.word	0x40021000
 8000d48:	48001400 	.word	0x48001400
 8000d4c:	200001c4 	.word	0x200001c4
 8000d50:	40005400 	.word	0x40005400
 8000d54:	2000090e 	.word	0x2000090e
 8000d58:	200000b8 	.word	0x200000b8
 8000d5c:	40012400 	.word	0x40012400
 8000d60:	20000218 	.word	0x20000218
 8000d64:	40013000 	.word	0x40013000
 8000d68:	2000027c 	.word	0x2000027c
 8000d6c:	40012c00 	.word	0x40012c00
 8000d70:	2000030c 	.word	0x2000030c
 8000d74:	40013800 	.word	0x40013800
 8000d78:	200002c4 	.word	0x200002c4
 8000d7c:	00002710 	.word	0x00002710

08000d80 <HAL_I2C_AddrCallback>:
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8000d80:	b510      	push	{r4, lr}
	if (TransferDirection != 0) {
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d009      	beq.n	8000d9a <HAL_I2C_AddrCallback+0x1a>
		status = HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t*) p.i2c_TX, I2CSIZE, I2C_FIRST_AND_LAST_FRAME);
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	2202      	movs	r2, #2
 8000d8a:	490c      	ldr	r1, [pc, #48]	; (8000dbc <HAL_I2C_AddrCallback+0x3c>)
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <HAL_I2C_AddrCallback+0x40>)
 8000d8e:	049b      	lsls	r3, r3, #18
 8000d90:	f001 f92a 	bl	8001fe8 <HAL_I2C_Slave_Seq_Transmit_IT>
	if (status != HAL_OK) {
 8000d94:	2800      	cmp	r0, #0
 8000d96:	d10f      	bne.n	8000db8 <HAL_I2C_AddrCallback+0x38>
}
 8000d98:	bd10      	pop	{r4, pc}
		status = HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t*) p.i2c_RX, I2CSIZE, I2C_FIRST_AND_LAST_FRAME);
 8000d9a:	2380      	movs	r3, #128	; 0x80
 8000d9c:	4c07      	ldr	r4, [pc, #28]	; (8000dbc <HAL_I2C_AddrCallback+0x3c>)
 8000d9e:	049b      	lsls	r3, r3, #18
 8000da0:	2202      	movs	r2, #2
 8000da2:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <HAL_I2C_AddrCallback+0x40>)
 8000da4:	1ca1      	adds	r1, r4, #2
 8000da6:	f001 f99b 	bl	80020e0 <HAL_I2C_Slave_Seq_Receive_IT>
		p.i2c_TX[0] = p.i2c_RX[0] + 1;
 8000daa:	78a3      	ldrb	r3, [r4, #2]
 8000dac:	3301      	adds	r3, #1
 8000dae:	7023      	strb	r3, [r4, #0]
		p.i2c_TX[1] = p.i2c_RX[1] + 1;
 8000db0:	78e3      	ldrb	r3, [r4, #3]
 8000db2:	3301      	adds	r3, #1
 8000db4:	7063      	strb	r3, [r4, #1]
 8000db6:	e7ed      	b.n	8000d94 <HAL_I2C_AddrCallback+0x14>
		Error_Handler();
 8000db8:	f7ff fd96 	bl	80008e8 <Error_Handler>
 8000dbc:	20000394 	.word	0x20000394
 8000dc0:	200001c4 	.word	0x200001c4

08000dc4 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle) {
 8000dc4:	b510      	push	{r4, lr}
	if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF) {
 8000dc6:	f001 fd51 	bl	800286c <HAL_I2C_GetError>
 8000dca:	2804      	cmp	r0, #4
 8000dcc:	d100      	bne.n	8000dd0 <HAL_I2C_ErrorCallback+0xc>
}
 8000dce:	bd10      	pop	{r4, pc}
		Error_Handler();
 8000dd0:	f7ff fd8a 	bl	80008e8 <Error_Handler>

08000dd4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_MspInit+0x2c>)
{
 8000dd8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	6999      	ldr	r1, [r3, #24]
 8000ddc:	4311      	orrs	r1, r2
 8000dde:	6199      	str	r1, [r3, #24]
 8000de0:	6999      	ldr	r1, [r3, #24]
 8000de2:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	9200      	str	r2, [sp, #0]
 8000de8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	69da      	ldr	r2, [r3, #28]
 8000dec:	0549      	lsls	r1, r1, #21
 8000dee:	430a      	orrs	r2, r1
 8000df0:	61da      	str	r2, [r3, #28]
 8000df2:	69db      	ldr	r3, [r3, #28]
 8000df4:	400b      	ands	r3, r1
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	b002      	add	sp, #8
 8000dfc:	4770      	bx	lr
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	40021000 	.word	0x40021000

08000e04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e04:	b570      	push	{r4, r5, r6, lr}
 8000e06:	0004      	movs	r4, r0
 8000e08:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	2214      	movs	r2, #20
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	a804      	add	r0, sp, #16
 8000e10:	f004 fa94 	bl	800533c <memset>
  if(hadc->Instance==ADC1)
 8000e14:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_ADC_MspInit+0xb4>)
 8000e16:	6822      	ldr	r2, [r4, #0]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d001      	beq.n	8000e20 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e1c:	b00a      	add	sp, #40	; 0x28
 8000e1e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <HAL_ADC_MspInit+0xb8>)
 8000e24:	0089      	lsls	r1, r1, #2
 8000e26:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	619a      	str	r2, [r3, #24]
 8000e2e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e32:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e36:	9201      	str	r2, [sp, #4]
 8000e38:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	695a      	ldr	r2, [r3, #20]
 8000e3c:	0289      	lsls	r1, r1, #10
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	615a      	str	r2, [r3, #20]
 8000e42:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	9202      	str	r2, [sp, #8]
 8000e4c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	695a      	ldr	r2, [r3, #20]
 8000e50:	02c9      	lsls	r1, r1, #11
 8000e52:	430a      	orrs	r2, r1
 8000e54:	615a      	str	r2, [r3, #20]
 8000e56:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = OP_V_O_Pin|OP_W_O_Pin|GPIO_PIN_4;
 8000e58:	2219      	movs	r2, #25
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	400b      	ands	r3, r1
 8000e5c:	9303      	str	r3, [sp, #12]
 8000e5e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = OP_V_O_Pin|OP_W_O_Pin|GPIO_PIN_4;
 8000e60:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = OP_V_O_Pin|OP_W_O_Pin|GPIO_PIN_4;
 8000e64:	9204      	str	r2, [sp, #16]
 8000e66:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f000 ff60 	bl	8001d2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OP_U_O_Pin;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	2202      	movs	r2, #2
    HAL_GPIO_Init(OP_U_O_GPIO_Port, &GPIO_InitStruct);
 8000e70:	4813      	ldr	r0, [pc, #76]	; (8000ec0 <HAL_ADC_MspInit+0xbc>)
 8000e72:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = OP_U_O_Pin;
 8000e74:	9204      	str	r2, [sp, #16]
 8000e76:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(OP_U_O_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f000 ff57 	bl	8001d2c <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8000e7e:	4d11      	ldr	r5, [pc, #68]	; (8000ec4 <HAL_ADC_MspInit+0xc0>)
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_ADC_MspInit+0xc4>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000e82:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 8000e84:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e8a:	3380      	adds	r3, #128	; 0x80
 8000e8c:	612b      	str	r3, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000e94:	2320      	movs	r3, #32
 8000e96:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	015b      	lsls	r3, r3, #5
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e9c:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9e:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ea0:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000ea2:	f000 fe3b 	bl	8001b1c <HAL_DMA_Init>
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	d102      	bne.n	8000eb0 <HAL_ADC_MspInit+0xac>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000eaa:	6325      	str	r5, [r4, #48]	; 0x30
 8000eac:	626c      	str	r4, [r5, #36]	; 0x24
}
 8000eae:	e7b5      	b.n	8000e1c <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8000eb0:	f7ff fd1a 	bl	80008e8 <Error_Handler>
 8000eb4:	e7f9      	b.n	8000eaa <HAL_ADC_MspInit+0xa6>
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	40012400 	.word	0x40012400
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	48000400 	.word	0x48000400
 8000ec4:	200000f8 	.word	0x200000f8
 8000ec8:	40020008 	.word	0x40020008

08000ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ecc:	b510      	push	{r4, lr}
 8000ece:	0004      	movs	r4, r0
 8000ed0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	2214      	movs	r2, #20
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	a802      	add	r0, sp, #8
 8000ed8:	f004 fa30 	bl	800533c <memset>
  if(hi2c->Instance==I2C1)
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_I2C_MspInit+0x6c>)
 8000ede:	6822      	ldr	r2, [r4, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d001      	beq.n	8000ee8 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ee4:	b008      	add	sp, #32
 8000ee6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	4c14      	ldr	r4, [pc, #80]	; (8000f3c <HAL_I2C_MspInit+0x70>)
 8000eec:	02d2      	lsls	r2, r2, #11
 8000eee:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	6163      	str	r3, [r4, #20]
 8000ef6:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	4811      	ldr	r0, [pc, #68]	; (8000f40 <HAL_I2C_MspInit+0x74>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	4013      	ands	r3, r2
 8000efc:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000efe:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f02:	2312      	movs	r3, #18
 8000f04:	9202      	str	r2, [sp, #8]
 8000f06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000f0c:	3b02      	subs	r3, #2
 8000f0e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f000 ff0c 	bl	8001d2c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	69e3      	ldr	r3, [r4, #28]
 8000f18:	0392      	lsls	r2, r2, #14
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61e3      	str	r3, [r4, #28]
 8000f1e:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000f20:	2100      	movs	r1, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f22:	4013      	ands	r3, r2
 8000f24:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2017      	movs	r0, #23
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f2a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000f2c:	f000 fd9e 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000f30:	2017      	movs	r0, #23
 8000f32:	f000 fdcd 	bl	8001ad0 <HAL_NVIC_EnableIRQ>
}
 8000f36:	e7d5      	b.n	8000ee4 <HAL_I2C_MspInit+0x18>
 8000f38:	40005400 	.word	0x40005400
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	48000400 	.word	0x48000400

08000f44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f44:	b510      	push	{r4, lr}
 8000f46:	0004      	movs	r4, r0
 8000f48:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	2214      	movs	r2, #20
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	a802      	add	r0, sp, #8
 8000f50:	f004 f9f4 	bl	800533c <memset>
  if(hspi->Instance==SPI1)
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_SPI_MspInit+0x6c>)
 8000f56:	6822      	ldr	r2, [r4, #0]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d001      	beq.n	8000f60 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f5c:	b008      	add	sp, #32
 8000f5e:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f60:	2180      	movs	r1, #128	; 0x80
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_SPI_MspInit+0x70>)
 8000f64:	0149      	lsls	r1, r1, #5
 8000f66:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	619a      	str	r2, [r3, #24]
 8000f6e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f72:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f76:	9200      	str	r2, [sp, #0]
 8000f78:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	695a      	ldr	r2, [r3, #20]
 8000f7c:	0289      	lsls	r1, r1, #10
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	615a      	str	r2, [r3, #20]
 8000f82:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f84:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	400b      	ands	r3, r1
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	9202      	str	r2, [sp, #8]
 8000f90:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f92:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f96:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f000 fec8 	bl	8001d2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2019      	movs	r0, #25
 8000fa2:	f000 fd63 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000fa6:	2019      	movs	r0, #25
 8000fa8:	f000 fd92 	bl	8001ad0 <HAL_NVIC_EnableIRQ>
}
 8000fac:	e7d6      	b.n	8000f5c <HAL_SPI_MspInit+0x18>
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	40013000 	.word	0x40013000
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb8:	b510      	push	{r4, lr}
 8000fba:	0004      	movs	r4, r0
 8000fbc:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	2214      	movs	r2, #20
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	a804      	add	r0, sp, #16
 8000fc4:	f004 f9ba 	bl	800533c <memset>
  if(htim_base->Instance==TIM1)
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	4a28      	ldr	r2, [pc, #160]	; (800106c <HAL_TIM_Base_MspInit+0xb4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d005      	beq.n	8000fdc <HAL_TIM_Base_MspInit+0x24>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	05d2      	lsls	r2, r2, #23
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d036      	beq.n	8001046 <HAL_TIM_Base_MspInit+0x8e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fd8:	b00a      	add	sp, #40	; 0x28
 8000fda:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fdc:	2180      	movs	r1, #128	; 0x80
 8000fde:	4b24      	ldr	r3, [pc, #144]	; (8001070 <HAL_TIM_Base_MspInit+0xb8>)
 8000fe0:	0109      	lsls	r1, r1, #4
 8000fe2:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000fe4:	2402      	movs	r4, #2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	619a      	str	r2, [r3, #24]
 8000fea:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(OC_COMP_INT_GPIO_Port, &GPIO_InitStruct);
 8000fec:	4821      	ldr	r0, [pc, #132]	; (8001074 <HAL_TIM_Base_MspInit+0xbc>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fee:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ff2:	9200      	str	r2, [sp, #0]
 8000ff4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	695a      	ldr	r2, [r3, #20]
 8000ff8:	02c9      	lsls	r1, r1, #11
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	695a      	ldr	r2, [r3, #20]
 8001000:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001004:	9201      	str	r2, [sp, #4]
 8001006:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	695a      	ldr	r2, [r3, #20]
 800100a:	0289      	lsls	r1, r1, #10
 800100c:	430a      	orrs	r2, r1
 800100e:	615a      	str	r2, [r3, #20]
 8001010:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 8001012:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	400b      	ands	r3, r1
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 800101a:	2302      	movs	r3, #2
 800101c:	0152      	lsls	r2, r2, #5
    HAL_GPIO_Init(OC_COMP_INT_GPIO_Port, &GPIO_InitStruct);
 800101e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 8001020:	9204      	str	r2, [sp, #16]
 8001022:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001024:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(OC_COMP_INT_GPIO_Port, &GPIO_InitStruct);
 8001026:	f000 fe81 	bl	8001d2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OC_COMP_INT2_Pin;
 800102a:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(OC_COMP_INT2_GPIO_Port, &GPIO_InitStruct);
 800102c:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = OC_COMP_INT2_Pin;
 800102e:	015b      	lsls	r3, r3, #5
 8001030:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
    HAL_GPIO_Init(OC_COMP_INT2_GPIO_Port, &GPIO_InitStruct);
 8001034:	a904      	add	r1, sp, #16
 8001036:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800103e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(OC_COMP_INT2_GPIO_Port, &GPIO_InitStruct);
 8001040:	f000 fe74 	bl	8001d2c <HAL_GPIO_Init>
 8001044:	e7c8      	b.n	8000fd8 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001046:	2301      	movs	r3, #1
 8001048:	4a09      	ldr	r2, [pc, #36]	; (8001070 <HAL_TIM_Base_MspInit+0xb8>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800104a:	200f      	movs	r0, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 800104c:	69d1      	ldr	r1, [r2, #28]
 800104e:	4319      	orrs	r1, r3
 8001050:	61d1      	str	r1, [r2, #28]
 8001052:	69d2      	ldr	r2, [r2, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001054:	2100      	movs	r1, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001056:	4013      	ands	r3, r2
 8001058:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800105c:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800105e:	f000 fd05 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001062:	200f      	movs	r0, #15
 8001064:	f000 fd34 	bl	8001ad0 <HAL_NVIC_EnableIRQ>
}
 8001068:	e7b6      	b.n	8000fd8 <HAL_TIM_Base_MspInit+0x20>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	40012c00 	.word	0x40012c00
 8001070:	40021000 	.word	0x40021000
 8001074:	48000400 	.word	0x48000400

08001078 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001078:	b510      	push	{r4, lr}
 800107a:	0004      	movs	r4, r0
 800107c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	2214      	movs	r2, #20
 8001080:	2100      	movs	r1, #0
 8001082:	a802      	add	r0, sp, #8
 8001084:	f004 f95a 	bl	800533c <memset>
  if(htim->Instance==TIM1)
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <HAL_TIM_MspPostInit+0x74>)
 800108a:	6822      	ldr	r2, [r4, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d001      	beq.n	8001094 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001090:	b008      	add	sp, #32
 8001092:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_TIM_MspPostInit+0x78>)
 8001098:	02c9      	lsls	r1, r1, #11
 800109a:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800109c:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	430a      	orrs	r2, r1
 80010a0:	615a      	str	r2, [r3, #20]
 80010a2:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	4813      	ldr	r0, [pc, #76]	; (80010f4 <HAL_TIM_MspPostInit+0x7c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	9200      	str	r2, [sp, #0]
 80010ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	695a      	ldr	r2, [r3, #20]
 80010b0:	0289      	lsls	r1, r1, #10
 80010b2:	430a      	orrs	r2, r1
 80010b4:	615a      	str	r2, [r3, #20]
 80010b6:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|GPIO_PIN_15;
 80010b8:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	400b      	ands	r3, r1
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|GPIO_PIN_15;
 80010c0:	2302      	movs	r3, #2
 80010c2:	0212      	lsls	r2, r2, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|GPIO_PIN_15;
 80010c6:	9202      	str	r2, [sp, #8]
 80010c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80010ca:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f000 fe2e 	bl	8001d2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HSU_Pin|HSV_Pin|GPIO_PIN_10;
 80010d0:	23e0      	movs	r3, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = HSU_Pin|HSV_Pin|GPIO_PIN_10;
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	a902      	add	r1, sp, #8
 80010dc:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80010e4:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f000 fe21 	bl	8001d2c <HAL_GPIO_Init>
}
 80010ea:	e7d1      	b.n	8001090 <HAL_TIM_MspPostInit+0x18>
 80010ec:	40012c00 	.word	0x40012c00
 80010f0:	40021000 	.word	0x40021000
 80010f4:	48000400 	.word	0x48000400

080010f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f8:	b530      	push	{r4, r5, lr}
 80010fa:	0004      	movs	r4, r0
 80010fc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	2214      	movs	r2, #20
 8001100:	2100      	movs	r1, #0
 8001102:	a802      	add	r0, sp, #8
 8001104:	f004 f91a 	bl	800533c <memset>
  if(huart->Instance==USART1)
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_UART_MspInit+0xd4>)
 800110a:	6822      	ldr	r2, [r4, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d001      	beq.n	8001114 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001110:	b009      	add	sp, #36	; 0x24
 8001112:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <HAL_UART_MspInit+0xd8>)
 8001118:	01c9      	lsls	r1, r1, #7
 800111a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 800111e:	430a      	orrs	r2, r1
 8001120:	619a      	str	r2, [r3, #24]
 8001122:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 8001126:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 800112a:	9200      	str	r2, [sp, #0]
 800112c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	695a      	ldr	r2, [r3, #20]
 8001130:	0289      	lsls	r1, r1, #10
 8001132:	430a      	orrs	r2, r1
 8001134:	615a      	str	r2, [r3, #20]
 8001136:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001138:	4a26      	ldr	r2, [pc, #152]	; (80011d4 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	400b      	ands	r3, r1
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001140:	2302      	movs	r3, #2
 8001142:	9202      	str	r2, [sp, #8]
 8001144:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001146:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800114c:	3b02      	subs	r3, #2
 800114e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f000 fdec 	bl	8001d2c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001154:	4d20      	ldr	r5, [pc, #128]	; (80011d8 <HAL_UART_MspInit+0xe0>)
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <HAL_UART_MspInit+0xe4>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001158:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800115a:	602b      	str	r3, [r5, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800115c:	2310      	movs	r3, #16
 800115e:	606b      	str	r3, [r5, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001160:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001162:	0028      	movs	r0, r5
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001164:	60ab      	str	r3, [r5, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001166:	60ea      	str	r2, [r5, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001168:	612b      	str	r3, [r5, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800116a:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800116c:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800116e:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001170:	f000 fcd4 	bl	8001b1c <HAL_DMA_Init>
 8001174:	2800      	cmp	r0, #0
 8001176:	d123      	bne.n	80011c0 <HAL_UART_MspInit+0xc8>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <HAL_UART_MspInit+0xe8>)
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	6811      	ldr	r1, [r2, #0]
 8001180:	430b      	orrs	r3, r1
 8001182:	6013      	str	r3, [r2, #0]
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <HAL_UART_MspInit+0xec>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001186:	6725      	str	r5, [r4, #112]	; 0x70
 8001188:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800118a:	4d17      	ldr	r5, [pc, #92]	; (80011e8 <HAL_UART_MspInit+0xf0>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800118c:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800118e:	602b      	str	r3, [r5, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001190:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001192:	0028      	movs	r0, r5
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001194:	606b      	str	r3, [r5, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001196:	60ab      	str	r3, [r5, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001198:	60ea      	str	r2, [r5, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119a:	612b      	str	r3, [r5, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800119c:	616b      	str	r3, [r5, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800119e:	61ab      	str	r3, [r5, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011a0:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011a2:	f000 fcbb 	bl	8001b1c <HAL_DMA_Init>
 80011a6:	2800      	cmp	r0, #0
 80011a8:	d10d      	bne.n	80011c6 <HAL_UART_MspInit+0xce>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	201b      	movs	r0, #27
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80011b0:	6765      	str	r5, [r4, #116]	; 0x74
 80011b2:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011b4:	f000 fc5a 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011b8:	201b      	movs	r0, #27
 80011ba:	f000 fc89 	bl	8001ad0 <HAL_NVIC_EnableIRQ>
}
 80011be:	e7a7      	b.n	8001110 <HAL_UART_MspInit+0x18>
      Error_Handler();
 80011c0:	f7ff fb92 	bl	80008e8 <Error_Handler>
 80011c4:	e7d8      	b.n	8001178 <HAL_UART_MspInit+0x80>
      Error_Handler();
 80011c6:	f7ff fb8f 	bl	80008e8 <Error_Handler>
 80011ca:	e7ee      	b.n	80011aa <HAL_UART_MspInit+0xb2>
 80011cc:	40013800 	.word	0x40013800
 80011d0:	40021000 	.word	0x40021000
 80011d4:	00008004 	.word	0x00008004
 80011d8:	20000180 	.word	0x20000180
 80011dc:	40020044 	.word	0x40020044
 80011e0:	40010000 	.word	0x40010000
 80011e4:	40020030 	.word	0x40020030
 80011e8:	2000013c 	.word	0x2000013c

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	e7fe      	b.n	80011ec <NMI_Handler>
 80011ee:	46c0      	nop			; (mov r8, r8)

080011f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f0:	e7fe      	b.n	80011f0 <HardFault_Handler>
 80011f2:	46c0      	nop			; (mov r8, r8)

080011f4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011f4:	4770      	bx	lr
 80011f6:	46c0      	nop			; (mov r8, r8)

080011f8 <PendSV_Handler>:
 80011f8:	4770      	bx	lr
 80011fa:	46c0      	nop			; (mov r8, r8)

080011fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fe:	f000 f8ef 	bl	80013e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001202:	bd10      	pop	{r4, pc}

08001204 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001204:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001206:	4802      	ldr	r0, [pc, #8]	; (8001210 <DMA1_Channel1_IRQHandler+0xc>)
 8001208:	f000 fd3e 	bl	8001c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800120c:	bd10      	pop	{r4, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	200000f8 	.word	0x200000f8

08001214 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001214:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001216:	4802      	ldr	r0, [pc, #8]	; (8001220 <DMA1_Channel2_3_IRQHandler+0xc>)
 8001218:	f000 fd36 	bl	8001c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800121c:	bd10      	pop	{r4, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	2000013c 	.word	0x2000013c

08001224 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001224:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001226:	4802      	ldr	r0, [pc, #8]	; (8001230 <DMA1_Channel4_5_IRQHandler+0xc>)
 8001228:	f000 fd2e 	bl	8001c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 800122c:	bd10      	pop	{r4, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	20000180 	.word	0x20000180

08001234 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001234:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001236:	4802      	ldr	r0, [pc, #8]	; (8001240 <TIM2_IRQHandler+0xc>)
 8001238:	f002 ff2c 	bl	8004094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800123c:	bd10      	pop	{r4, pc}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	200002c4 	.word	0x200002c4

08001244 <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001244:	4806      	ldr	r0, [pc, #24]	; (8001260 <I2C1_IRQHandler+0x1c>)
{
 8001246:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001248:	6803      	ldr	r3, [r0, #0]
 800124a:	699a      	ldr	r2, [r3, #24]
 800124c:	23e0      	movs	r3, #224	; 0xe0
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	421a      	tst	r2, r3
 8001252:	d002      	beq.n	800125a <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001254:	f001 f93a 	bl	80024cc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001258:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800125a:	f000 ffbf 	bl	80021dc <HAL_I2C_EV_IRQHandler>
}
 800125e:	e7fb      	b.n	8001258 <I2C1_IRQHandler+0x14>
 8001260:	200001c4 	.word	0x200001c4

08001264 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001264:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001266:	4802      	ldr	r0, [pc, #8]	; (8001270 <SPI1_IRQHandler+0xc>)
 8001268:	f002 fa98 	bl	800379c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800126c:	bd10      	pop	{r4, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	20000218 	.word	0x20000218

08001274 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001274:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001276:	4802      	ldr	r0, [pc, #8]	; (8001280 <USART1_IRQHandler+0xc>)
 8001278:	f003 fadc 	bl	8004834 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800127c:	bd10      	pop	{r4, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	2000030c 	.word	0x2000030c

08001284 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001284:	b570      	push	{r4, r5, r6, lr}
 8001286:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001288:	dd07      	ble.n	800129a <_read+0x16>
 800128a:	000c      	movs	r4, r1
 800128c:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 800128e:	e000      	b.n	8001292 <_read+0xe>
 8001290:	bf00      	nop
 8001292:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001294:	3401      	adds	r4, #1
 8001296:	42ac      	cmp	r4, r5
 8001298:	d1f9      	bne.n	800128e <_read+0xa>
  }

  return len;
}
 800129a:	0030      	movs	r0, r6
 800129c:	bd70      	pop	{r4, r5, r6, pc}
 800129e:	46c0      	nop			; (mov r8, r8)

080012a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012a0:	b570      	push	{r4, r5, r6, lr}
 80012a2:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a4:	dd07      	ble.n	80012b6 <_write+0x16>
 80012a6:	000c      	movs	r4, r1
 80012a8:	188d      	adds	r5, r1, r2
  {
    __io_putchar(*ptr++);
 80012aa:	7820      	ldrb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ac:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 80012ae:	f7ff faf3 	bl	8000898 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b2:	42ac      	cmp	r4, r5
 80012b4:	d1f9      	bne.n	80012aa <_write+0xa>
  }
  return len;
}
 80012b6:	0030      	movs	r0, r6
 80012b8:	bd70      	pop	{r4, r5, r6, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)

080012bc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 80012bc:	2001      	movs	r0, #1
}
 80012be:	4240      	negs	r0, r0
 80012c0:	4770      	bx	lr
 80012c2:	46c0      	nop			; (mov r8, r8)

080012c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	019b      	lsls	r3, r3, #6
  return 0;
}
 80012c8:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80012ca:	604b      	str	r3, [r1, #4]
}
 80012cc:	4770      	bx	lr
 80012ce:	46c0      	nop			; (mov r8, r8)

080012d0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80012d0:	2001      	movs	r0, #1
 80012d2:	4770      	bx	lr

080012d4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80012d4:	2000      	movs	r0, #0
 80012d6:	4770      	bx	lr

080012d8 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <_sbrk+0x34>)
 80012da:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <_sbrk+0x38>)
{
 80012dc:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012de:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e0:	490c      	ldr	r1, [pc, #48]	; (8001314 <_sbrk+0x3c>)
{
 80012e2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80012e4:	6808      	ldr	r0, [r1, #0]
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d004      	beq.n	80012f4 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ea:	18c3      	adds	r3, r0, r3
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d806      	bhi.n	80012fe <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80012f0:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80012f2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80012f4:	4808      	ldr	r0, [pc, #32]	; (8001318 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 80012f6:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 80012f8:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d9f8      	bls.n	80012f0 <_sbrk+0x18>
    errno = ENOMEM;
 80012fe:	f004 f825 	bl	800534c <__errno>
 8001302:	230c      	movs	r3, #12
 8001304:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001306:	2001      	movs	r0, #1
 8001308:	4240      	negs	r0, r0
 800130a:	e7f2      	b.n	80012f2 <_sbrk+0x1a>
 800130c:	00000400 	.word	0x00000400
 8001310:	20001000 	.word	0x20001000
 8001314:	20000414 	.word	0x20000414
 8001318:	20000568 	.word	0x20000568

0800131c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800131c:	4770      	bx	lr
 800131e:	46c0      	nop			; (mov r8, r8)

08001320 <Reset_Handler>:
 8001320:	480d      	ldr	r0, [pc, #52]	; (8001358 <LoopForever+0x2>)
 8001322:	4685      	mov	sp, r0
 8001324:	f7ff fffa 	bl	800131c <SystemInit>
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <LoopForever+0x6>)
 800132a:	490d      	ldr	r1, [pc, #52]	; (8001360 <LoopForever+0xa>)
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <LoopForever+0xe>)
 800132e:	2300      	movs	r3, #0
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:
 8001332:	58d4      	ldr	r4, [r2, r3]
 8001334:	50c4      	str	r4, [r0, r3]
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:
 8001338:	18c4      	adds	r4, r0, r3
 800133a:	428c      	cmp	r4, r1
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <LoopForever+0x12>)
 8001340:	4c0a      	ldr	r4, [pc, #40]	; (800136c <LoopForever+0x16>)
 8001342:	2300      	movs	r3, #0
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:
 800134a:	42a2      	cmp	r2, r4
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>
 800134e:	f004 f803 	bl	8005358 <__libc_init_array>
 8001352:	f7ff fb23 	bl	800099c <main>

08001356 <LoopForever>:
 8001356:	e7fe      	b.n	8001356 <LoopForever>
 8001358:	20001000 	.word	0x20001000
 800135c:	20000000 	.word	0x20000000
 8001360:	20000068 	.word	0x20000068
 8001364:	08005d30 	.word	0x08005d30
 8001368:	20000068 	.word	0x20000068
 800136c:	20000568 	.word	0x20000568

08001370 <ADC1_IRQHandler>:
 8001370:	e7fe      	b.n	8001370 <ADC1_IRQHandler>
	...

08001374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b570      	push	{r4, r5, r6, lr}
 8001376:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001378:	20fa      	movs	r0, #250	; 0xfa
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_InitTick+0x40>)
 800137c:	0080      	lsls	r0, r0, #2
 800137e:	7819      	ldrb	r1, [r3, #0]
 8001380:	f7fe fec2 	bl	8000108 <__udivsi3>
 8001384:	4d0c      	ldr	r5, [pc, #48]	; (80013b8 <HAL_InitTick+0x44>)
 8001386:	0001      	movs	r1, r0
 8001388:	6828      	ldr	r0, [r5, #0]
 800138a:	f7fe febd 	bl	8000108 <__udivsi3>
 800138e:	f000 fbab 	bl	8001ae8 <HAL_SYSTICK_Config>
 8001392:	2800      	cmp	r0, #0
 8001394:	d10c      	bne.n	80013b0 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8001396:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001398:	2c03      	cmp	r4, #3
 800139a:	d900      	bls.n	800139e <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800139c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139e:	3802      	subs	r0, #2
 80013a0:	2200      	movs	r2, #0
 80013a2:	0021      	movs	r1, r4
 80013a4:	f000 fb62 	bl	8001a6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <HAL_InitTick+0x48>)
 80013aa:	2000      	movs	r0, #0
 80013ac:	601c      	str	r4, [r3, #0]
 80013ae:	e7f5      	b.n	800139c <HAL_InitTick+0x28>
    return HAL_ERROR;
 80013b0:	2001      	movs	r0, #1
 80013b2:	e7f3      	b.n	800139c <HAL_InitTick+0x28>
 80013b4:	20000004 	.word	0x20000004
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000008 	.word	0x20000008

080013c0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	2110      	movs	r1, #16
 80013c2:	4a06      	ldr	r2, [pc, #24]	; (80013dc <HAL_Init+0x1c>)
{
 80013c4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c6:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c8:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ca:	430b      	orrs	r3, r1
 80013cc:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ce:	f7ff ffd1 	bl	8001374 <HAL_InitTick>
  HAL_MspInit();
 80013d2:	f7ff fcff 	bl	8000dd4 <HAL_MspInit>
}
 80013d6:	2000      	movs	r0, #0
 80013d8:	bd10      	pop	{r4, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	40022000 	.word	0x40022000

080013e0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80013e0:	4a03      	ldr	r2, [pc, #12]	; (80013f0 <HAL_IncTick+0x10>)
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <HAL_IncTick+0x14>)
 80013e4:	6811      	ldr	r1, [r2, #0]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	185b      	adds	r3, r3, r1
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	4770      	bx	lr
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	20000418 	.word	0x20000418
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013f8:	4b01      	ldr	r3, [pc, #4]	; (8001400 <HAL_GetTick+0x8>)
 80013fa:	6818      	ldr	r0, [r3, #0]
}
 80013fc:	4770      	bx	lr
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	20000418 	.word	0x20000418

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b570      	push	{r4, r5, r6, lr}
 8001406:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001408:	f7ff fff6 	bl	80013f8 <HAL_GetTick>
 800140c:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140e:	1c63      	adds	r3, r4, #1
 8001410:	d002      	beq.n	8001418 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <HAL_Delay+0x20>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001418:	f7ff ffee 	bl	80013f8 <HAL_GetTick>
 800141c:	1b40      	subs	r0, r0, r5
 800141e:	42a0      	cmp	r0, r4
 8001420:	d3fa      	bcc.n	8001418 <HAL_Delay+0x14>
  {
  }
}
 8001422:	bd70      	pop	{r4, r5, r6, pc}
 8001424:	20000004 	.word	0x20000004

08001428 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800142a:	2303      	movs	r3, #3
 800142c:	6802      	ldr	r2, [r0, #0]
{
 800142e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001430:	6891      	ldr	r1, [r2, #8]
 8001432:	400b      	ands	r3, r1
 8001434:	2b01      	cmp	r3, #1
 8001436:	d001      	beq.n	800143c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001438:	2000      	movs	r0, #0
}
 800143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800143c:	6811      	ldr	r1, [r2, #0]
 800143e:	420b      	tst	r3, r1
 8001440:	d00e      	beq.n	8001460 <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001442:	2705      	movs	r7, #5
 8001444:	6893      	ldr	r3, [r2, #8]
 8001446:	401f      	ands	r7, r3
 8001448:	2f01      	cmp	r7, #1
 800144a:	d00d      	beq.n	8001468 <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144c:	2210      	movs	r2, #16
 800144e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8001450:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001452:	4313      	orrs	r3, r2
 8001454:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001456:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001458:	3a0f      	subs	r2, #15
 800145a:	4313      	orrs	r3, r2
 800145c:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 800145e:	e7ec      	b.n	800143a <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001460:	68d3      	ldr	r3, [r2, #12]
 8001462:	041b      	lsls	r3, r3, #16
 8001464:	d5e8      	bpl.n	8001438 <ADC_Disable+0x10>
 8001466:	e7ec      	b.n	8001442 <ADC_Disable+0x1a>
      __HAL_ADC_DISABLE(hadc);
 8001468:	2102      	movs	r1, #2
 800146a:	6893      	ldr	r3, [r2, #8]
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800146c:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 800146e:	430b      	orrs	r3, r1
 8001470:	6093      	str	r3, [r2, #8]
 8001472:	2303      	movs	r3, #3
 8001474:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001476:	f7ff ffbf 	bl	80013f8 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800147a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800147c:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	421f      	tst	r7, r3
 8001482:	d0d9      	beq.n	8001438 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001484:	f7ff ffb8 	bl	80013f8 <HAL_GetTick>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001488:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800148a:	1b80      	subs	r0, r0, r6
 800148c:	2802      	cmp	r0, #2
 800148e:	d902      	bls.n	8001496 <ADC_Disable+0x6e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	4215      	tst	r5, r2
 8001494:	d103      	bne.n	800149e <ADC_Disable+0x76>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	421d      	tst	r5, r3
 800149a:	d1f3      	bne.n	8001484 <ADC_Disable+0x5c>
 800149c:	e7cc      	b.n	8001438 <ADC_Disable+0x10>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800149e:	2210      	movs	r2, #16
 80014a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          return HAL_ERROR;
 80014a2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a4:	4313      	orrs	r3, r2
 80014a6:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014aa:	432b      	orrs	r3, r5
 80014ac:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80014ae:	e7c4      	b.n	800143a <ADC_Disable+0x12>

080014b0 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80014b0:	2204      	movs	r2, #4
 80014b2:	6803      	ldr	r3, [r0, #0]
{
 80014b4:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80014b6:	6899      	ldr	r1, [r3, #8]
{
 80014b8:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80014ba:	420a      	tst	r2, r1
 80014bc:	d01d      	beq.n	80014fa <ADC_ConversionStop+0x4a>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014be:	6899      	ldr	r1, [r3, #8]
 80014c0:	420a      	tst	r2, r1
 80014c2:	d006      	beq.n	80014d2 <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80014c4:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014c6:	0792      	lsls	r2, r2, #30
 80014c8:	d403      	bmi.n	80014d2 <ADC_ConversionStop+0x22>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80014ca:	2110      	movs	r1, #16
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014d2:	f7ff ff91 	bl	80013f8 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014d6:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80014d8:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	075b      	lsls	r3, r3, #29
 80014de:	d50c      	bpl.n	80014fa <ADC_ConversionStop+0x4a>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014e0:	2504      	movs	r5, #4
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80014e2:	f7ff ff89 	bl	80013f8 <HAL_GetTick>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014e6:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80014e8:	1b80      	subs	r0, r0, r6
 80014ea:	2802      	cmp	r0, #2
 80014ec:	d902      	bls.n	80014f4 <ADC_ConversionStop+0x44>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	4215      	tst	r5, r2
 80014f2:	d104      	bne.n	80014fe <ADC_ConversionStop+0x4e>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	421d      	tst	r5, r3
 80014f8:	d1f3      	bne.n	80014e2 <ADC_ConversionStop+0x32>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014fa:	2000      	movs	r0, #0
}
 80014fc:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014fe:	2210      	movs	r2, #16
 8001500:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001502:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001504:	4313      	orrs	r3, r2
 8001506:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001508:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800150a:	3a0f      	subs	r2, #15
 800150c:	4313      	orrs	r3, r2
 800150e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001510:	e7f4      	b.n	80014fc <ADC_ConversionStop+0x4c>
 8001512:	46c0      	nop			; (mov r8, r8)

08001514 <ADC_Enable.constprop.0>:
  __IO uint32_t wait_loop_index = 0U;
 8001514:	2300      	movs	r3, #0
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8001516:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001518:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 800151a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 800151c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800151e:	6891      	ldr	r1, [r2, #8]
 8001520:	3303      	adds	r3, #3
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8001522:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001524:	400b      	ands	r3, r1
 8001526:	2b01      	cmp	r3, #1
 8001528:	d037      	beq.n	800159a <ADC_Enable.constprop.0+0x86>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800152a:	6891      	ldr	r1, [r2, #8]
 800152c:	4b23      	ldr	r3, [pc, #140]	; (80015bc <ADC_Enable.constprop.0+0xa8>)
 800152e:	4219      	tst	r1, r3
 8001530:	d129      	bne.n	8001586 <ADC_Enable.constprop.0+0x72>
    __HAL_ADC_ENABLE(hadc);
 8001532:	2101      	movs	r1, #1
 8001534:	6893      	ldr	r3, [r2, #8]
 8001536:	430b      	orrs	r3, r1
 8001538:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800153a:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <ADC_Enable.constprop.0+0xac>)
 800153c:	4921      	ldr	r1, [pc, #132]	; (80015c4 <ADC_Enable.constprop.0+0xb0>)
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	f7fe fde2 	bl	8000108 <__udivsi3>
 8001544:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8001546:	9b01      	ldr	r3, [sp, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <ADC_Enable.constprop.0+0x44>
      wait_loop_index--;
 800154c:	9b01      	ldr	r3, [sp, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001552:	9b01      	ldr	r3, [sp, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f9      	bne.n	800154c <ADC_Enable.constprop.0+0x38>
    tickstart = HAL_GetTick();
 8001558:	f7ff ff4e 	bl	80013f8 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800155c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800155e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001560:	681b      	ldr	r3, [r3, #0]
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001562:	2501      	movs	r5, #1
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001564:	07db      	lsls	r3, r3, #31
 8001566:	d40b      	bmi.n	8001580 <ADC_Enable.constprop.0+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001568:	f7ff ff46 	bl	80013f8 <HAL_GetTick>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800156c:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800156e:	1b80      	subs	r0, r0, r6
 8001570:	2802      	cmp	r0, #2
 8001572:	d902      	bls.n	800157a <ADC_Enable.constprop.0+0x66>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4215      	tst	r5, r2
 8001578:	d016      	beq.n	80015a8 <ADC_Enable.constprop.0+0x94>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	421d      	tst	r5, r3
 800157e:	d0f3      	beq.n	8001568 <ADC_Enable.constprop.0+0x54>
  return HAL_OK;
 8001580:	2000      	movs	r0, #0
}
 8001582:	b002      	add	sp, #8
 8001584:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001586:	2210      	movs	r2, #16
 8001588:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800158a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800158c:	4313      	orrs	r3, r2
 800158e:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001590:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001592:	3a0f      	subs	r2, #15
 8001594:	4313      	orrs	r3, r2
 8001596:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001598:	e7f3      	b.n	8001582 <ADC_Enable.constprop.0+0x6e>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800159a:	6811      	ldr	r1, [r2, #0]
 800159c:	420b      	tst	r3, r1
 800159e:	d1ef      	bne.n	8001580 <ADC_Enable.constprop.0+0x6c>
 80015a0:	68d3      	ldr	r3, [r2, #12]
 80015a2:	041b      	lsls	r3, r3, #16
 80015a4:	d4ec      	bmi.n	8001580 <ADC_Enable.constprop.0+0x6c>
 80015a6:	e7c0      	b.n	800152a <ADC_Enable.constprop.0+0x16>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a8:	2210      	movs	r2, #16
 80015aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          return HAL_ERROR;
 80015ac:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ae:	4313      	orrs	r3, r2
 80015b0:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015b4:	432b      	orrs	r3, r5
 80015b6:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80015b8:	e7e3      	b.n	8001582 <ADC_Enable.constprop.0+0x6e>
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	80000017 	.word	0x80000017
 80015c0:	20000000 	.word	0x20000000
 80015c4:	000f4240 	.word	0x000f4240

080015c8 <HAL_ADC_Init>:
{
 80015c8:	b570      	push	{r4, r5, r6, lr}
 80015ca:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80015cc:	d100      	bne.n	80015d0 <HAL_ADC_Init+0x8>
 80015ce:	e082      	b.n	80016d6 <HAL_ADC_Init+0x10e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d069      	beq.n	80016aa <HAL_ADC_Init+0xe2>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015d8:	06db      	lsls	r3, r3, #27
 80015da:	d460      	bmi.n	800169e <HAL_ADC_Init+0xd6>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80015dc:	6822      	ldr	r2, [r4, #0]
 80015de:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80015e0:	075b      	lsls	r3, r3, #29
 80015e2:	d45c      	bmi.n	800169e <HAL_ADC_Init+0xd6>
    ADC_STATE_CLR_SET(hadc->State,
 80015e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015e6:	4949      	ldr	r1, [pc, #292]	; (800170c <HAL_ADC_Init+0x144>)
 80015e8:	400b      	ands	r3, r1
 80015ea:	3106      	adds	r1, #6
 80015ec:	31ff      	adds	r1, #255	; 0xff
 80015ee:	430b      	orrs	r3, r1
 80015f0:	63a3      	str	r3, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 80015f2:	2303      	movs	r3, #3
 80015f4:	6891      	ldr	r1, [r2, #8]
 80015f6:	400b      	ands	r3, r1
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d05c      	beq.n	80016b6 <HAL_ADC_Init+0xee>
      MODIFY_REG(hadc->Instance->CFGR1,
 80015fc:	2118      	movs	r1, #24
 80015fe:	68d3      	ldr	r3, [r2, #12]
 8001600:	438b      	bics	r3, r1
 8001602:	68a1      	ldr	r1, [r4, #8]
 8001604:	430b      	orrs	r3, r1
 8001606:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001608:	6913      	ldr	r3, [r2, #16]
 800160a:	6861      	ldr	r1, [r4, #4]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	430b      	orrs	r3, r1
 8001612:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001614:	68d3      	ldr	r3, [r2, #12]
 8001616:	493e      	ldr	r1, [pc, #248]	; (8001710 <HAL_ADC_Init+0x148>)
 8001618:	400b      	ands	r3, r1
 800161a:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800161c:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800161e:	7e61      	ldrb	r1, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001620:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001622:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001624:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001626:	7ea0      	ldrb	r0, [r4, #26]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001628:	68e1      	ldr	r1, [r4, #12]
 800162a:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800162c:	0341      	lsls	r1, r0, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800162e:	430b      	orrs	r3, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001630:	2124      	movs	r1, #36	; 0x24
 8001632:	5c61      	ldrb	r1, [r4, r1]
 8001634:	0049      	lsls	r1, r1, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001636:	430b      	orrs	r3, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001638:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800163a:	3901      	subs	r1, #1
 800163c:	1e4d      	subs	r5, r1, #1
 800163e:	41a9      	sbcs	r1, r5
 8001640:	0309      	lsls	r1, r1, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001642:	430b      	orrs	r3, r1
 8001644:	6921      	ldr	r1, [r4, #16]
 8001646:	3902      	subs	r1, #2
 8001648:	424d      	negs	r5, r1
 800164a:	4169      	adcs	r1, r5
 800164c:	0089      	lsls	r1, r1, #2
 800164e:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001650:	7ee1      	ldrb	r1, [r4, #27]
 8001652:	2901      	cmp	r1, #1
 8001654:	d04b      	beq.n	80016ee <HAL_ADC_Init+0x126>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001656:	20c2      	movs	r0, #194	; 0xc2
 8001658:	69e1      	ldr	r1, [r4, #28]
 800165a:	30ff      	adds	r0, #255	; 0xff
 800165c:	4281      	cmp	r1, r0
 800165e:	d002      	beq.n	8001666 <HAL_ADC_Init+0x9e>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001660:	6a20      	ldr	r0, [r4, #32]
 8001662:	4301      	orrs	r1, r0
 8001664:	430b      	orrs	r3, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001666:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001668:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800166a:	4319      	orrs	r1, r3
 800166c:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800166e:	2180      	movs	r1, #128	; 0x80
 8001670:	0549      	lsls	r1, r1, #21
 8001672:	428d      	cmp	r5, r1
 8001674:	d026      	beq.n	80016c4 <HAL_ADC_Init+0xfc>
 8001676:	1e69      	subs	r1, r5, #1
 8001678:	2906      	cmp	r1, #6
 800167a:	d923      	bls.n	80016c4 <HAL_ADC_Init+0xfc>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800167c:	68d2      	ldr	r2, [r2, #12]
 800167e:	4925      	ldr	r1, [pc, #148]	; (8001714 <HAL_ADC_Init+0x14c>)
 8001680:	400a      	ands	r2, r1
 8001682:	429a      	cmp	r2, r3
 8001684:	d029      	beq.n	80016da <HAL_ADC_Init+0x112>
      ADC_STATE_CLR_SET(hadc->State,
 8001686:	2212      	movs	r2, #18
 8001688:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      tmp_hal_status = HAL_ERROR;
 800168a:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800168c:	4393      	bics	r3, r2
 800168e:	3a02      	subs	r2, #2
 8001690:	4313      	orrs	r3, r2
 8001692:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001694:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001696:	3a0f      	subs	r2, #15
 8001698:	4313      	orrs	r3, r2
 800169a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800169c:	e004      	b.n	80016a8 <HAL_ADC_Init+0xe0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800169e:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 80016a0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016a4:	4313      	orrs	r3, r2
 80016a6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80016a8:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Lock = HAL_UNLOCKED;
 80016aa:	2234      	movs	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80016ac:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 80016ae:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80016b0:	f7ff fba8 	bl	8000e04 <HAL_ADC_MspInit>
 80016b4:	e78f      	b.n	80015d6 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80016b6:	6811      	ldr	r1, [r2, #0]
 80016b8:	420b      	tst	r3, r1
 80016ba:	d1ab      	bne.n	8001614 <HAL_ADC_Init+0x4c>
 80016bc:	68d3      	ldr	r3, [r2, #12]
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	d4a8      	bmi.n	8001614 <HAL_ADC_Init+0x4c>
 80016c2:	e79b      	b.n	80015fc <HAL_ADC_Init+0x34>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80016c4:	2107      	movs	r1, #7
 80016c6:	6950      	ldr	r0, [r2, #20]
 80016c8:	4388      	bics	r0, r1
 80016ca:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80016cc:	6950      	ldr	r0, [r2, #20]
 80016ce:	4029      	ands	r1, r5
 80016d0:	4301      	orrs	r1, r0
 80016d2:	6151      	str	r1, [r2, #20]
 80016d4:	e7d2      	b.n	800167c <HAL_ADC_Init+0xb4>
    return HAL_ERROR;
 80016d6:	2001      	movs	r0, #1
 80016d8:	e7e6      	b.n	80016a8 <HAL_ADC_Init+0xe0>
      ADC_CLEAR_ERRORCODE(hadc);
 80016da:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 80016dc:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80016de:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80016e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e2:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80016e4:	4393      	bics	r3, r2
 80016e6:	3a02      	subs	r2, #2
 80016e8:	4313      	orrs	r3, r2
 80016ea:	63a3      	str	r3, [r4, #56]	; 0x38
 80016ec:	e7dc      	b.n	80016a8 <HAL_ADC_Init+0xe0>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016ee:	2800      	cmp	r0, #0
 80016f0:	d103      	bne.n	80016fa <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	0249      	lsls	r1, r1, #9
 80016f6:	430b      	orrs	r3, r1
 80016f8:	e7ad      	b.n	8001656 <HAL_ADC_Init+0x8e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016fa:	2520      	movs	r5, #32
 80016fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016fe:	4328      	orrs	r0, r5
 8001700:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001702:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001704:	4301      	orrs	r1, r0
 8001706:	63e1      	str	r1, [r4, #60]	; 0x3c
 8001708:	e7a5      	b.n	8001656 <HAL_ADC_Init+0x8e>
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	fffffefd 	.word	0xfffffefd
 8001710:	fffe0219 	.word	0xfffe0219
 8001714:	833fffe7 	.word	0x833fffe7

08001718 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8001718:	2334      	movs	r3, #52	; 0x34
{ 
 800171a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800171c:	5cc2      	ldrb	r2, [r0, r3]
{ 
 800171e:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001720:	2a01      	cmp	r2, #1
 8001722:	d014      	beq.n	800174e <HAL_ADC_Stop+0x36>
 8001724:	2501      	movs	r5, #1
 8001726:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001728:	f7ff fec2 	bl	80014b0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800172c:	2800      	cmp	r0, #0
 800172e:	d003      	beq.n	8001738 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8001730:	2334      	movs	r3, #52	; 0x34
 8001732:	2200      	movs	r2, #0
 8001734:	54e2      	strb	r2, [r4, r3]
}
 8001736:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8001738:	0020      	movs	r0, r4
 800173a:	f7ff fe75 	bl	8001428 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800173e:	2800      	cmp	r0, #0
 8001740:	d1f6      	bne.n	8001730 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8001742:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001744:	4a03      	ldr	r2, [pc, #12]	; (8001754 <HAL_ADC_Stop+0x3c>)
 8001746:	4013      	ands	r3, r2
 8001748:	432b      	orrs	r3, r5
 800174a:	63a3      	str	r3, [r4, #56]	; 0x38
 800174c:	e7f0      	b.n	8001730 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800174e:	2002      	movs	r0, #2
 8001750:	e7f1      	b.n	8001736 <HAL_ADC_Stop+0x1e>
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	fffffefe 	.word	0xfffffefe

08001758 <HAL_ADC_Start_DMA>:
{
 8001758:	b5d0      	push	{r4, r6, r7, lr}
 800175a:	000e      	movs	r6, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800175c:	6801      	ldr	r1, [r0, #0]
{
 800175e:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001760:	688b      	ldr	r3, [r1, #8]
{
 8001762:	0017      	movs	r7, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001764:	075b      	lsls	r3, r3, #29
 8001766:	d435      	bmi.n	80017d4 <HAL_ADC_Start_DMA+0x7c>
    __HAL_LOCK(hadc);
 8001768:	2334      	movs	r3, #52	; 0x34
 800176a:	5cc2      	ldrb	r2, [r0, r3]
 800176c:	2a01      	cmp	r2, #1
 800176e:	d031      	beq.n	80017d4 <HAL_ADC_Start_DMA+0x7c>
 8001770:	2201      	movs	r2, #1
 8001772:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001774:	7e43      	ldrb	r3, [r0, #25]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d004      	beq.n	8001784 <HAL_ADC_Start_DMA+0x2c>
      tmp_hal_status = ADC_Enable(hadc);
 800177a:	f7ff fecb 	bl	8001514 <ADC_Enable.constprop.0>
    if (tmp_hal_status == HAL_OK)
 800177e:	2800      	cmp	r0, #0
 8001780:	d127      	bne.n	80017d2 <HAL_ADC_Start_DMA+0x7a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001782:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8001784:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_ADC_Start_DMA+0x80>)
 8001788:	401a      	ands	r2, r3
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4313      	orrs	r3, r2
 8001790:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 8001792:	2234      	movs	r2, #52	; 0x34
      ADC_CLEAR_ERRORCODE(hadc);
 8001794:	2300      	movs	r3, #0
 8001796:	63e3      	str	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8001798:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800179a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_ADC_Start_DMA+0x84>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800179e:	3a24      	subs	r2, #36	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017a0:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_ADC_Start_DMA+0x88>)
 80017a4:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_ADC_Start_DMA+0x8c>)
 80017a8:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017aa:	231c      	movs	r3, #28
 80017ac:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017ae:	684b      	ldr	r3, [r1, #4]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80017b4:	68cb      	ldr	r3, [r1, #12]
 80017b6:	3a0f      	subs	r2, #15
 80017b8:	4313      	orrs	r3, r2
 80017ba:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017bc:	0032      	movs	r2, r6
 80017be:	003b      	movs	r3, r7
 80017c0:	3140      	adds	r1, #64	; 0x40
 80017c2:	f000 f9df 	bl	8001b84 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80017c6:	2104      	movs	r1, #4
 80017c8:	2000      	movs	r0, #0
 80017ca:	6822      	ldr	r2, [r4, #0]
 80017cc:	6893      	ldr	r3, [r2, #8]
 80017ce:	430b      	orrs	r3, r1
 80017d0:	6093      	str	r3, [r2, #8]
}
 80017d2:	bdd0      	pop	{r4, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 80017d4:	2002      	movs	r0, #2
 80017d6:	e7fc      	b.n	80017d2 <HAL_ADC_Start_DMA+0x7a>
 80017d8:	fffff0fe 	.word	0xfffff0fe
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	08001865 	.word	0x08001865
 80017e4:	08001875 	.word	0x08001875

080017e8 <HAL_ADC_ConvCpltCallback>:
 80017e8:	4770      	bx	lr
 80017ea:	46c0      	nop			; (mov r8, r8)

080017ec <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017ec:	2150      	movs	r1, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80017f0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017f4:	4211      	tst	r1, r2
 80017f6:	d10e      	bne.n	8001816 <ADC_DMAConvCplt+0x2a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017fc:	0092      	lsls	r2, r2, #2
 80017fe:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001800:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001802:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	0109      	lsls	r1, r1, #4
 8001808:	68d0      	ldr	r0, [r2, #12]
 800180a:	4208      	tst	r0, r1
 800180c:	d007      	beq.n	800181e <ADC_DMAConvCplt+0x32>

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800180e:	0018      	movs	r0, r3
 8001810:	f7ff ffea 	bl	80017e8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001814:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4798      	blx	r3
}
 800181c:	e7fa      	b.n	8001814 <ADC_DMAConvCplt+0x28>
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800181e:	7e99      	ldrb	r1, [r3, #26]
 8001820:	2900      	cmp	r1, #0
 8001822:	d1f4      	bne.n	800180e <ADC_DMAConvCplt+0x22>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001824:	6811      	ldr	r1, [r2, #0]
 8001826:	0709      	lsls	r1, r1, #28
 8001828:	d5f1      	bpl.n	800180e <ADC_DMAConvCplt+0x22>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800182a:	6891      	ldr	r1, [r2, #8]
 800182c:	0749      	lsls	r1, r1, #29
 800182e:	d40b      	bmi.n	8001848 <ADC_DMAConvCplt+0x5c>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001830:	200c      	movs	r0, #12
 8001832:	6851      	ldr	r1, [r2, #4]
 8001834:	4381      	bics	r1, r0
 8001836:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800183a:	4908      	ldr	r1, [pc, #32]	; (800185c <ADC_DMAConvCplt+0x70>)
 800183c:	400a      	ands	r2, r1
 800183e:	3104      	adds	r1, #4
 8001840:	31ff      	adds	r1, #255	; 0xff
 8001842:	430a      	orrs	r2, r1
 8001844:	639a      	str	r2, [r3, #56]	; 0x38
 8001846:	e7e2      	b.n	800180e <ADC_DMAConvCplt+0x22>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001848:	2120      	movs	r1, #32
 800184a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800184c:	430a      	orrs	r2, r1
 800184e:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001852:	391f      	subs	r1, #31
 8001854:	430a      	orrs	r2, r1
 8001856:	63da      	str	r2, [r3, #60]	; 0x3c
 8001858:	e7d9      	b.n	800180e <ADC_DMAConvCplt+0x22>
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	fffffefe 	.word	0xfffffefe

08001860 <HAL_ADC_ConvHalfCpltCallback>:
 8001860:	4770      	bx	lr
 8001862:	46c0      	nop			; (mov r8, r8)

08001864 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001864:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001866:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001868:	f7ff fffa 	bl	8001860 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800186c:	bd10      	pop	{r4, pc}
 800186e:	46c0      	nop			; (mov r8, r8)

08001870 <HAL_ADC_ErrorCallback>:
 8001870:	4770      	bx	lr
 8001872:	46c0      	nop			; (mov r8, r8)

08001874 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001874:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001876:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001878:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800187a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800187c:	4313      	orrs	r3, r2
 800187e:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001880:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001882:	3a3c      	subs	r2, #60	; 0x3c
 8001884:	4313      	orrs	r3, r2
 8001886:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001888:	f7ff fff2 	bl	8001870 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800188c:	bd10      	pop	{r4, pc}
 800188e:	46c0      	nop			; (mov r8, r8)

08001890 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001890:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8001892:	2234      	movs	r2, #52	; 0x34
{
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001896:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001898:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800189a:	5c83      	ldrb	r3, [r0, r2]
{
 800189c:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800189e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d060      	beq.n	8001966 <HAL_ADC_ConfigChannel+0xd6>
 80018a4:	2301      	movs	r3, #1
 80018a6:	5483      	strb	r3, [r0, r2]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018a8:	6805      	ldr	r5, [r0, #0]
 80018aa:	68aa      	ldr	r2, [r5, #8]
 80018ac:	0752      	lsls	r2, r2, #29
 80018ae:	d509      	bpl.n	80018c4 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b0:	2220      	movs	r2, #32
 80018b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80018b4:	4313      	orrs	r3, r2
 80018b6:	6383      	str	r3, [r0, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 80018b8:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80018ba:	2334      	movs	r3, #52	; 0x34
 80018bc:	2200      	movs	r2, #0
 80018be:	54e2      	strb	r2, [r4, r3]
}
 80018c0:	b003      	add	sp, #12
 80018c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 80018c4:	4a36      	ldr	r2, [pc, #216]	; (80019a0 <HAL_ADC_ConfigChannel+0x110>)
 80018c6:	6848      	ldr	r0, [r1, #4]
 80018c8:	4290      	cmp	r0, r2
 80018ca:	d030      	beq.n	800192e <HAL_ADC_ConfigChannel+0x9e>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80018cc:	680a      	ldr	r2, [r1, #0]
 80018ce:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80018d0:	4093      	lsls	r3, r2
 80018d2:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018d4:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80018d6:	4338      	orrs	r0, r7
 80018d8:	62a8      	str	r0, [r5, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018da:	055b      	lsls	r3, r3, #21
 80018dc:	429e      	cmp	r6, r3
 80018de:	d00f      	beq.n	8001900 <HAL_ADC_ConfigChannel+0x70>
 80018e0:	3e01      	subs	r6, #1
 80018e2:	2e06      	cmp	r6, #6
 80018e4:	d90c      	bls.n	8001900 <HAL_ADC_ConfigChannel+0x70>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80018e6:	2307      	movs	r3, #7
 80018e8:	6888      	ldr	r0, [r1, #8]
 80018ea:	6969      	ldr	r1, [r5, #20]
 80018ec:	4019      	ands	r1, r3
 80018ee:	4288      	cmp	r0, r1
 80018f0:	d006      	beq.n	8001900 <HAL_ADC_ConfigChannel+0x70>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80018f2:	6969      	ldr	r1, [r5, #20]
 80018f4:	4399      	bics	r1, r3
 80018f6:	6169      	str	r1, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80018f8:	6969      	ldr	r1, [r5, #20]
 80018fa:	4003      	ands	r3, r0
 80018fc:	430b      	orrs	r3, r1
 80018fe:	616b      	str	r3, [r5, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001900:	0013      	movs	r3, r2
 8001902:	3b10      	subs	r3, #16
 8001904:	2b02      	cmp	r3, #2
 8001906:	d810      	bhi.n	800192a <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001908:	4926      	ldr	r1, [pc, #152]	; (80019a4 <HAL_ADC_ConfigChannel+0x114>)
 800190a:	680b      	ldr	r3, [r1, #0]
 800190c:	2a10      	cmp	r2, #16
 800190e:	d02e      	beq.n	800196e <HAL_ADC_ConfigChannel+0xde>
 8001910:	3a11      	subs	r2, #17
 8001912:	1e50      	subs	r0, r2, #1
 8001914:	4182      	sbcs	r2, r0
 8001916:	20c0      	movs	r0, #192	; 0xc0
 8001918:	4252      	negs	r2, r2
 800191a:	0400      	lsls	r0, r0, #16
 800191c:	4002      	ands	r2, r0
 800191e:	2080      	movs	r0, #128	; 0x80
 8001920:	03c0      	lsls	r0, r0, #15
 8001922:	4684      	mov	ip, r0
 8001924:	4462      	add	r2, ip
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800192a:	2000      	movs	r0, #0
 800192c:	e7c5      	b.n	80018ba <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800192e:	680a      	ldr	r2, [r1, #0]
 8001930:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001932:	4093      	lsls	r3, r2
 8001934:	4398      	bics	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001936:	0013      	movs	r3, r2
 8001938:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800193a:	62a8      	str	r0, [r5, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800193c:	2b02      	cmp	r3, #2
 800193e:	d8f4      	bhi.n	800192a <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001940:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_ADC_ConfigChannel+0x114>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2a10      	cmp	r2, #16
 8001946:	d010      	beq.n	800196a <HAL_ADC_ConfigChannel+0xda>
 8001948:	3a11      	subs	r2, #17
 800194a:	4251      	negs	r1, r2
 800194c:	414a      	adcs	r2, r1
 800194e:	21c0      	movs	r1, #192	; 0xc0
 8001950:	4252      	negs	r2, r2
 8001952:	0409      	lsls	r1, r1, #16
 8001954:	400a      	ands	r2, r1
 8001956:	4914      	ldr	r1, [pc, #80]	; (80019a8 <HAL_ADC_ConfigChannel+0x118>)
 8001958:	468c      	mov	ip, r1
 800195a:	4462      	add	r2, ip
 800195c:	401a      	ands	r2, r3
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_ADC_ConfigChannel+0x114>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001960:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	e7a9      	b.n	80018ba <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 8001966:	2002      	movs	r0, #2
 8001968:	e7aa      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <HAL_ADC_ConfigChannel+0x11c>)
 800196c:	e7f6      	b.n	800195c <HAL_ADC_ConfigChannel+0xcc>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	0412      	lsls	r2, r2, #16
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_ADC_ConfigChannel+0x120>)
 8001978:	490e      	ldr	r1, [pc, #56]	; (80019b4 <HAL_ADC_ConfigChannel+0x124>)
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	f7fe fbc4 	bl	8000108 <__udivsi3>
 8001980:	0083      	lsls	r3, r0, #2
 8001982:	181b      	adds	r3, r3, r0
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001988:	9b01      	ldr	r3, [sp, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0cd      	beq.n	800192a <HAL_ADC_ConfigChannel+0x9a>
            wait_loop_index--;
 800198e:	9b01      	ldr	r3, [sp, #4]
 8001990:	3b01      	subs	r3, #1
 8001992:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001994:	9b01      	ldr	r3, [sp, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f9      	bne.n	800198e <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800199a:	2000      	movs	r0, #0
 800199c:	e78d      	b.n	80018ba <HAL_ADC_ConfigChannel+0x2a>
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	00001001 	.word	0x00001001
 80019a4:	40012708 	.word	0x40012708
 80019a8:	feffffff 	.word	0xfeffffff
 80019ac:	ff7fffff 	.word	0xff7fffff
 80019b0:	20000000 	.word	0x20000000
 80019b4:	000f4240 	.word	0x000f4240

080019b8 <HAL_ADCEx_Calibration_Start>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019b8:	2334      	movs	r3, #52	; 0x34
{
 80019ba:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80019bc:	5cc2      	ldrb	r2, [r0, r3]
{
 80019be:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80019c0:	2a01      	cmp	r2, #1
 80019c2:	d04e      	beq.n	8001a62 <HAL_ADCEx_Calibration_Start+0xaa>
 80019c4:	2201      	movs	r2, #1
 80019c6:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019c8:	6803      	ldr	r3, [r0, #0]
 80019ca:	3202      	adds	r2, #2
 80019cc:	6899      	ldr	r1, [r3, #8]
 80019ce:	400a      	ands	r2, r1
 80019d0:	2a01      	cmp	r2, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_ADCEx_Calibration_Start+0x28>
 80019d4:	6819      	ldr	r1, [r3, #0]
 80019d6:	420a      	tst	r2, r1
 80019d8:	d12e      	bne.n	8001a38 <HAL_ADCEx_Calibration_Start+0x80>
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	0412      	lsls	r2, r2, #16
 80019de:	d42b      	bmi.n	8001a38 <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80019e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80019e2:	4921      	ldr	r1, [pc, #132]	; (8001a68 <HAL_ADCEx_Calibration_Start+0xb0>)
 80019e4:	400a      	ands	r2, r1
 80019e6:	3106      	adds	r1, #6
 80019e8:	31ff      	adds	r1, #255	; 0xff
 80019ea:	430a      	orrs	r2, r1
 80019ec:	63a2      	str	r2, [r4, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80019ee:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	3101      	adds	r1, #1
 80019f4:	438a      	bics	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80019f8:	2280      	movs	r2, #128	; 0x80
 80019fa:	6899      	ldr	r1, [r3, #8]
 80019fc:	0612      	lsls	r2, r2, #24
 80019fe:	430a      	orrs	r2, r1
 8001a00:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001a02:	f7ff fcf9 	bl	80013f8 <HAL_GetTick>
 8001a06:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	2a00      	cmp	r2, #0
 8001a0e:	da1c      	bge.n	8001a4a <HAL_ADCEx_Calibration_Start+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a10:	f7ff fcf2 	bl	80013f8 <HAL_GetTick>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a14:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a16:	1b40      	subs	r0, r0, r5
 8001a18:	2802      	cmp	r0, #2
 8001a1a:	d9f6      	bls.n	8001a0a <HAL_ADCEx_Calibration_Start+0x52>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	2a00      	cmp	r2, #0
 8001a20:	daf3      	bge.n	8001a0a <HAL_ADCEx_Calibration_Start+0x52>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001a22:	2212      	movs	r2, #18
 8001a24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);

          return HAL_ERROR;
 8001a26:	2001      	movs	r0, #1
          ADC_STATE_CLR_SET(hadc->State,
 8001a28:	4393      	bics	r3, r2
 8001a2a:	3a02      	subs	r2, #2
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	63a3      	str	r3, [r4, #56]	; 0x38
          __HAL_UNLOCK(hadc);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2334      	movs	r3, #52	; 0x34
 8001a34:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8001a36:	e007      	b.n	8001a48 <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a38:	2220      	movs	r2, #32
    
    tmp_hal_status = HAL_ERROR;
 8001a3a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a42:	2334      	movs	r3, #52	; 0x34
 8001a44:	2200      	movs	r2, #0
 8001a46:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8001a48:	bd70      	pop	{r4, r5, r6, pc}
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001a4a:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001a4c:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001a4e:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001a50:	430e      	orrs	r6, r1
 8001a52:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8001a54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a56:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8001a58:	4393      	bics	r3, r2
 8001a5a:	3a02      	subs	r2, #2
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	63a3      	str	r3, [r4, #56]	; 0x38
 8001a60:	e7ef      	b.n	8001a42 <HAL_ADCEx_Calibration_Start+0x8a>
  __HAL_LOCK(hadc);
 8001a62:	2002      	movs	r0, #2
 8001a64:	e7f0      	b.n	8001a48 <HAL_ADCEx_Calibration_Start+0x90>
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	fffffefd 	.word	0xfffffefd

08001a6c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	db14      	blt.n	8001a9c <HAL_NVIC_SetPriority+0x30>
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a74:	2203      	movs	r2, #3
 8001a76:	469c      	mov	ip, r3
 8001a78:	23ff      	movs	r3, #255	; 0xff
 8001a7a:	0884      	lsrs	r4, r0, #2
 8001a7c:	4002      	ands	r2, r0
 8001a7e:	0018      	movs	r0, r3
 8001a80:	26c0      	movs	r6, #192	; 0xc0
 8001a82:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a84:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a86:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a88:	400b      	ands	r3, r1
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	00a4      	lsls	r4, r4, #2
 8001a8e:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a90:	00b6      	lsls	r6, r6, #2
 8001a92:	59a5      	ldr	r5, [r4, r6]
 8001a94:	4385      	bics	r5, r0
 8001a96:	432b      	orrs	r3, r5
 8001a98:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001a9a:	bd70      	pop	{r4, r5, r6, pc}
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <HAL_NVIC_SetPriority+0x60>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	4694      	mov	ip, r2
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	4003      	ands	r3, r0
 8001aa6:	4010      	ands	r0, r2
 8001aa8:	32fc      	adds	r2, #252	; 0xfc
 8001aaa:	0015      	movs	r5, r2
 8001aac:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001aae:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ab0:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ab2:	400a      	ands	r2, r1
 8001ab4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ab6:	3b08      	subs	r3, #8
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4463      	add	r3, ip
 8001abe:	69dc      	ldr	r4, [r3, #28]
 8001ac0:	43ac      	bics	r4, r5
 8001ac2:	4322      	orrs	r2, r4
 8001ac4:	61da      	str	r2, [r3, #28]
 8001ac6:	e7e8      	b.n	8001a9a <HAL_NVIC_SetPriority+0x2e>
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	db05      	blt.n	8001ae0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad4:	221f      	movs	r2, #31
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	4002      	ands	r2, r0
 8001ada:	4093      	lsls	r3, r2
 8001adc:	4a01      	ldr	r2, [pc, #4]	; (8001ae4 <HAL_NVIC_EnableIRQ+0x14>)
 8001ade:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ae0:	4770      	bx	lr
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	2280      	movs	r2, #128	; 0x80
 8001aea:	1e43      	subs	r3, r0, #1
 8001aec:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aee:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d20e      	bcs.n	8001b12 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af4:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af8:	4807      	ldr	r0, [pc, #28]	; (8001b18 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001afc:	6a03      	ldr	r3, [r0, #32]
 8001afe:	0609      	lsls	r1, r1, #24
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	430b      	orrs	r3, r1
 8001b06:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0a:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	3307      	adds	r3, #7
 8001b10:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001b12:	4770      	bx	lr
 8001b14:	e000e010 	.word	0xe000e010
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b570      	push	{r4, r5, r6, lr}
 8001b1e:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001b20:	d027      	beq.n	8001b72 <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b22:	2521      	movs	r5, #33	; 0x21
 8001b24:	2302      	movs	r3, #2
 8001b26:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b28:	6800      	ldr	r0, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8001b2c:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b2e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b30:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8001b32:	6863      	ldr	r3, [r4, #4]
 8001b34:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b36:	68e1      	ldr	r1, [r4, #12]
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	6921      	ldr	r1, [r4, #16]
 8001b3c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b3e:	6961      	ldr	r1, [r4, #20]
 8001b40:	430b      	orrs	r3, r1
 8001b42:	69a1      	ldr	r1, [r4, #24]
 8001b44:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b46:	69e1      	ldr	r1, [r4, #28]
 8001b48:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8001b4a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b4c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_DMA_Init+0x60>)
 8001b50:	2114      	movs	r1, #20
 8001b52:	469c      	mov	ip, r3
 8001b54:	4460      	add	r0, ip
 8001b56:	f7fe fad7 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8001b5c:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8001b5e:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b60:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b62:	0080      	lsls	r0, r0, #2
 8001b64:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8001b66:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b68:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8001b6c:	321f      	adds	r2, #31
 8001b6e:	54a3      	strb	r3, [r4, r2]
}
 8001b70:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001b72:	2001      	movs	r0, #1
 8001b74:	e7fc      	b.n	8001b70 <HAL_DMA_Init+0x54>
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	ffffc00f 	.word	0xffffc00f
 8001b7c:	bffdfff8 	.word	0xbffdfff8
 8001b80:	40020000 	.word	0x40020000

08001b84 <HAL_DMA_Start_IT>:
{
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001b86:	2420      	movs	r4, #32
 8001b88:	5d05      	ldrb	r5, [r0, r4]
 8001b8a:	2d01      	cmp	r5, #1
 8001b8c:	d037      	beq.n	8001bfe <HAL_DMA_Start_IT+0x7a>
 8001b8e:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8001b90:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 8001b92:	5505      	strb	r5, [r0, r4]
  if (HAL_DMA_STATE_READY == hdma->State)
 8001b94:	5dc5      	ldrb	r5, [r0, r7]
 8001b96:	b2ee      	uxtb	r6, r5
 8001b98:	2d01      	cmp	r5, #1
 8001b9a:	d003      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x20>
    __HAL_UNLOCK(hdma);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	5503      	strb	r3, [r0, r4]
    status = HAL_BUSY;
 8001ba0:	2002      	movs	r0, #2
}
 8001ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ba4:	3c1e      	subs	r4, #30
 8001ba6:	55c4      	strb	r4, [r0, r7]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba8:	2400      	movs	r4, #0
 8001baa:	6384      	str	r4, [r0, #56]	; 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bac:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bae:	6c07      	ldr	r7, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bb0:	6825      	ldr	r5, [r4, #0]
 8001bb2:	43b5      	bics	r5, r6
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bb4:	40be      	lsls	r6, r7
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bb6:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bb8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001bba:	606e      	str	r6, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 8001bbc:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bbe:	6843      	ldr	r3, [r0, #4]
 8001bc0:	2b10      	cmp	r3, #16
 8001bc2:	d00e      	beq.n	8001be2 <HAL_DMA_Start_IT+0x5e>
    if (NULL != hdma->XferHalfCpltCallback)
 8001bc4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = SrcAddress;
 8001bc6:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bc8:	60e2      	str	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00e      	beq.n	8001bec <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bce:	220e      	movs	r2, #14
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bda:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	6023      	str	r3, [r4, #0]
 8001be0:	e7df      	b.n	8001ba2 <HAL_DMA_Start_IT+0x1e>
    if (NULL != hdma->XferHalfCpltCallback)
 8001be2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8001be4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001be6:	60e1      	str	r1, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f0      	bne.n	8001bce <HAL_DMA_Start_IT+0x4a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001bec:	220a      	movs	r2, #10
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	3a06      	subs	r2, #6
 8001bf8:	4393      	bics	r3, r2
 8001bfa:	6023      	str	r3, [r4, #0]
 8001bfc:	e7eb      	b.n	8001bd6 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8001bfe:	2002      	movs	r0, #2
 8001c00:	e7cf      	b.n	8001ba2 <HAL_DMA_Start_IT+0x1e>
 8001c02:	46c0      	nop			; (mov r8, r8)

08001c04 <HAL_DMA_Abort>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c04:	2221      	movs	r2, #33	; 0x21
{
 8001c06:	b530      	push	{r4, r5, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c08:	5c81      	ldrb	r1, [r0, r2]
{
 8001c0a:	0003      	movs	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c0c:	2902      	cmp	r1, #2
 8001c0e:	d006      	beq.n	8001c1e <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c10:	3a1d      	subs	r2, #29
 8001c12:	6382      	str	r2, [r0, #56]	; 0x38
    return HAL_ERROR;
 8001c14:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001c16:	2220      	movs	r2, #32
 8001c18:	2100      	movs	r1, #0
 8001c1a:	5499      	strb	r1, [r3, r2]
}
 8001c1c:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c1e:	240e      	movs	r4, #14
 8001c20:	6801      	ldr	r1, [r0, #0]
 8001c22:	6808      	ldr	r0, [r1, #0]
 8001c24:	43a0      	bics	r0, r4
 8001c26:	6008      	str	r0, [r1, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c28:	2001      	movs	r0, #1
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c2a:	0005      	movs	r5, r0
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c2c:	680c      	ldr	r4, [r1, #0]
 8001c2e:	4384      	bics	r4, r0
 8001c30:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c32:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001c34:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001c36:	40a5      	lsls	r5, r4
 8001c38:	604d      	str	r5, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8001c3a:	5498      	strb	r0, [r3, r2]
  return HAL_OK;
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	e7ea      	b.n	8001c16 <HAL_DMA_Abort+0x12>

08001c40 <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c40:	2321      	movs	r3, #33	; 0x21
{
 8001c42:	b570      	push	{r4, r5, r6, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c44:	5cc2      	ldrb	r2, [r0, r3]
 8001c46:	2a02      	cmp	r2, #2
 8001c48:	d003      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4a:	3b1d      	subs	r3, #29
 8001c4c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001c4e:	2001      	movs	r0, #1
}
 8001c50:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c52:	240e      	movs	r4, #14
 8001c54:	6802      	ldr	r2, [r0, #0]
 8001c56:	6811      	ldr	r1, [r2, #0]
 8001c58:	43a1      	bics	r1, r4
 8001c5a:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c5c:	2101      	movs	r1, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c5e:	000d      	movs	r5, r1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c60:	6814      	ldr	r4, [r2, #0]
 8001c62:	438c      	bics	r4, r1
 8001c64:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c66:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001c68:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001c6a:	40a5      	lsls	r5, r4
 8001c6c:	6055      	str	r5, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001c6e:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2320      	movs	r3, #32
 8001c74:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8001c76:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 8001c7c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001c7e:	2000      	movs	r0, #0
 8001c80:	e7e6      	b.n	8001c50 <HAL_DMA_Abort_IT+0x10>
 8001c82:	2000      	movs	r0, #0
 8001c84:	e7e4      	b.n	8001c50 <HAL_DMA_Abort_IT+0x10>
 8001c86:	46c0      	nop			; (mov r8, r8)

08001c88 <HAL_DMA_IRQHandler>:
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c88:	2104      	movs	r1, #4
{
 8001c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c8c:	000c      	movs	r4, r1
 8001c8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c90:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c92:	409c      	lsls	r4, r3
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c94:	683a      	ldr	r2, [r7, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001c96:	6806      	ldr	r6, [r0, #0]
 8001c98:	6835      	ldr	r5, [r6, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c9a:	4222      	tst	r2, r4
 8001c9c:	d00d      	beq.n	8001cba <HAL_DMA_IRQHandler+0x32>
 8001c9e:	4229      	tst	r1, r5
 8001ca0:	d00b      	beq.n	8001cba <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ca2:	6833      	ldr	r3, [r6, #0]
 8001ca4:	069b      	lsls	r3, r3, #26
 8001ca6:	d402      	bmi.n	8001cae <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ca8:	6833      	ldr	r3, [r6, #0]
 8001caa:	438b      	bics	r3, r1
 8001cac:	6033      	str	r3, [r6, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8001cae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001cb0:	607c      	str	r4, [r7, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d000      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 8001cb6:	4798      	blx	r3
}
 8001cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001cba:	2102      	movs	r1, #2
 8001cbc:	000c      	movs	r4, r1
 8001cbe:	409c      	lsls	r4, r3
 8001cc0:	4222      	tst	r2, r4
 8001cc2:	d014      	beq.n	8001cee <HAL_DMA_IRQHandler+0x66>
 8001cc4:	4229      	tst	r1, r5
 8001cc6:	d012      	beq.n	8001cee <HAL_DMA_IRQHandler+0x66>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cc8:	6833      	ldr	r3, [r6, #0]
 8001cca:	069b      	lsls	r3, r3, #26
 8001ccc:	d406      	bmi.n	8001cdc <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001cce:	220a      	movs	r2, #10
 8001cd0:	6833      	ldr	r3, [r6, #0]
 8001cd2:	4393      	bics	r3, r2
 8001cd4:	6033      	str	r3, [r6, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	2321      	movs	r3, #33	; 0x21
 8001cd8:	3a09      	subs	r2, #9
 8001cda:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001cdc:	2320      	movs	r3, #32
 8001cde:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001ce0:	607c      	str	r4, [r7, #4]
    __HAL_UNLOCK(hdma);
 8001ce2:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 8001ce4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0e6      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 8001cea:	4798      	blx	r3
 8001cec:	e7e4      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x30>
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001cee:	2108      	movs	r1, #8
 8001cf0:	000c      	movs	r4, r1
 8001cf2:	409c      	lsls	r4, r3
 8001cf4:	4222      	tst	r2, r4
 8001cf6:	d0df      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x30>
 8001cf8:	4229      	tst	r1, r5
 8001cfa:	d0dd      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cfc:	6832      	ldr	r2, [r6, #0]
 8001cfe:	3106      	adds	r1, #6
 8001d00:	438a      	bics	r2, r1
 8001d02:	6032      	str	r2, [r6, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d04:	2201      	movs	r2, #1
 8001d06:	0011      	movs	r1, r2
 8001d08:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d0c:	6079      	str	r1, [r7, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d0e:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001d10:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001d12:	2200      	movs	r2, #0
 8001d14:	3b01      	subs	r3, #1
 8001d16:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8001d18:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0cc      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 8001d1e:	4798      	blx	r3
 8001d20:	e7ca      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x30>
 8001d22:	46c0      	nop			; (mov r8, r8)

08001d24 <HAL_DMA_GetState>:
  return hdma->State;
 8001d24:	2321      	movs	r3, #33	; 0x21
 8001d26:	5cc0      	ldrb	r0, [r0, r3]
 8001d28:	b2c0      	uxtb	r0, r0
}
 8001d2a:	4770      	bx	lr

08001d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	46de      	mov	lr, fp
 8001d30:	4657      	mov	r7, sl
 8001d32:	464e      	mov	r6, r9
 8001d34:	4645      	mov	r5, r8
 8001d36:	b5e0      	push	{r5, r6, r7, lr}
 8001d38:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3a:	6809      	ldr	r1, [r1, #0]
 8001d3c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001d3e:	2300      	movs	r3, #0
{
 8001d40:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d42:	2900      	cmp	r1, #0
 8001d44:	d100      	bne.n	8001d48 <HAL_GPIO_Init+0x1c>
 8001d46:	e0d0      	b.n	8001eea <HAL_GPIO_Init+0x1be>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d48:	4c72      	ldr	r4, [pc, #456]	; (8001f14 <HAL_GPIO_Init+0x1e8>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d4a:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4c:	46a3      	mov	fp, r4
 8001d4e:	e064      	b.n	8001e1a <HAL_GPIO_Init+0xee>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d50:	4665      	mov	r5, ip
 8001d52:	2d03      	cmp	r5, #3
 8001d54:	d000      	beq.n	8001d58 <HAL_GPIO_Init+0x2c>
 8001d56:	e0b6      	b.n	8001ec6 <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d58:	4666      	mov	r6, ip
 8001d5a:	4096      	lsls	r6, r2
 8001d5c:	43f5      	mvns	r5, r6
 8001d5e:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 8001d60:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d62:	9d02      	ldr	r5, [sp, #8]
 8001d64:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d66:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d68:	25c0      	movs	r5, #192	; 0xc0
 8001d6a:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 8001d6c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d6e:	422c      	tst	r4, r5
 8001d70:	d04d      	beq.n	8001e0e <HAL_GPIO_Init+0xe2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	465d      	mov	r5, fp
 8001d74:	2601      	movs	r6, #1
 8001d76:	465f      	mov	r7, fp
 8001d78:	69ad      	ldr	r5, [r5, #24]
 8001d7a:	4335      	orrs	r5, r6
 8001d7c:	61bd      	str	r5, [r7, #24]
 8001d7e:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d80:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	4035      	ands	r5, r6
 8001d84:	4e64      	ldr	r6, [pc, #400]	; (8001f18 <HAL_GPIO_Init+0x1ec>)
 8001d86:	9505      	str	r5, [sp, #20]
 8001d88:	46b4      	mov	ip, r6
 8001d8a:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d8c:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d8e:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d90:	00bf      	lsls	r7, r7, #2
 8001d92:	00ad      	lsls	r5, r5, #2
 8001d94:	4465      	add	r5, ip
 8001d96:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d98:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d9a:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d9c:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d9e:	4666      	mov	r6, ip
 8001da0:	40b7      	lsls	r7, r6
 8001da2:	003e      	movs	r6, r7
 8001da4:	464f      	mov	r7, r9
 8001da6:	43b7      	bics	r7, r6
 8001da8:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001daa:	2790      	movs	r7, #144	; 0x90
 8001dac:	05ff      	lsls	r7, r7, #23
 8001dae:	42b8      	cmp	r0, r7
 8001db0:	d00e      	beq.n	8001dd0 <HAL_GPIO_Init+0xa4>
 8001db2:	4f5a      	ldr	r7, [pc, #360]	; (8001f1c <HAL_GPIO_Init+0x1f0>)
 8001db4:	42b8      	cmp	r0, r7
 8001db6:	d100      	bne.n	8001dba <HAL_GPIO_Init+0x8e>
 8001db8:	e09e      	b.n	8001ef8 <HAL_GPIO_Init+0x1cc>
 8001dba:	4f59      	ldr	r7, [pc, #356]	; (8001f20 <HAL_GPIO_Init+0x1f4>)
 8001dbc:	42b8      	cmp	r0, r7
 8001dbe:	d100      	bne.n	8001dc2 <HAL_GPIO_Init+0x96>
 8001dc0:	e0a1      	b.n	8001f06 <HAL_GPIO_Init+0x1da>
 8001dc2:	4666      	mov	r6, ip
 8001dc4:	2705      	movs	r7, #5
 8001dc6:	40b7      	lsls	r7, r6
 8001dc8:	003e      	movs	r6, r7
 8001dca:	464f      	mov	r7, r9
 8001dcc:	4337      	orrs	r7, r6
 8001dce:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dd0:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dd2:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dd4:	60ae      	str	r6, [r5, #8]
        temp = EXTI->RTSR;
 8001dd6:	4d53      	ldr	r5, [pc, #332]	; (8001f24 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8001dd8:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dda:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8001ddc:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 8001dde:	68ad      	ldr	r5, [r5, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001de0:	423c      	tst	r4, r7
 8001de2:	d17f      	bne.n	8001ee4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(iocurrent);
 8001de4:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001de6:	4f4f      	ldr	r7, [pc, #316]	; (8001f24 <HAL_GPIO_Init+0x1f8>)
 8001de8:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 8001dea:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dec:	02a7      	lsls	r7, r4, #10
 8001dee:	d476      	bmi.n	8001ede <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 8001df0:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001df2:	4f4c      	ldr	r7, [pc, #304]	; (8001f24 <HAL_GPIO_Init+0x1f8>)
 8001df4:	60fd      	str	r5, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001df6:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001df8:	03a7      	lsls	r7, r4, #14
 8001dfa:	d46d      	bmi.n	8001ed8 <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 8001dfc:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001dfe:	4f49      	ldr	r7, [pc, #292]	; (8001f24 <HAL_GPIO_Init+0x1f8>)
 8001e00:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
 8001e02:	683d      	ldr	r5, [r7, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e04:	03e4      	lsls	r4, r4, #15
 8001e06:	d463      	bmi.n	8001ed0 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 8001e08:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001e0a:	4c46      	ldr	r4, [pc, #280]	; (8001f24 <HAL_GPIO_Init+0x1f8>)
 8001e0c:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0e:	000c      	movs	r4, r1
      }
    }

    position++;
 8001e10:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e12:	40dc      	lsrs	r4, r3
 8001e14:	3202      	adds	r2, #2
 8001e16:	2c00      	cmp	r4, #0
 8001e18:	d067      	beq.n	8001eea <HAL_GPIO_Init+0x1be>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e1a:	2601      	movs	r6, #1
 8001e1c:	000c      	movs	r4, r1
 8001e1e:	409e      	lsls	r6, r3
 8001e20:	4034      	ands	r4, r6
 8001e22:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8001e24:	4231      	tst	r1, r6
 8001e26:	d0f2      	beq.n	8001e0e <HAL_GPIO_Init+0xe2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e28:	4654      	mov	r4, sl
 8001e2a:	2503      	movs	r5, #3
 8001e2c:	6864      	ldr	r4, [r4, #4]
 8001e2e:	4025      	ands	r5, r4
 8001e30:	46ac      	mov	ip, r5
 8001e32:	3d01      	subs	r5, #1
 8001e34:	2d01      	cmp	r5, #1
 8001e36:	d88b      	bhi.n	8001d50 <HAL_GPIO_Init+0x24>
        temp = GPIOx->OSPEEDR;
 8001e38:	6885      	ldr	r5, [r0, #8]
 8001e3a:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e3c:	2503      	movs	r5, #3
 8001e3e:	4095      	lsls	r5, r2
 8001e40:	46a8      	mov	r8, r5
 8001e42:	43ed      	mvns	r5, r5
 8001e44:	464f      	mov	r7, r9
 8001e46:	9502      	str	r5, [sp, #8]
 8001e48:	4645      	mov	r5, r8
 8001e4a:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e4c:	4655      	mov	r5, sl
 8001e4e:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e50:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e52:	002f      	movs	r7, r5
 8001e54:	4097      	lsls	r7, r2
 8001e56:	46b8      	mov	r8, r7
 8001e58:	464f      	mov	r7, r9
 8001e5a:	4645      	mov	r5, r8
 8001e5c:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8001e5e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e60:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e62:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e64:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e66:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e68:	0926      	lsrs	r6, r4, #4
 8001e6a:	402e      	ands	r6, r5
 8001e6c:	409e      	lsls	r6, r3
 8001e6e:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8001e70:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8001e72:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e74:	9d02      	ldr	r5, [sp, #8]
 8001e76:	402e      	ands	r6, r5
 8001e78:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e7a:	4656      	mov	r6, sl
 8001e7c:	68b6      	ldr	r6, [r6, #8]
 8001e7e:	4647      	mov	r7, r8
 8001e80:	4096      	lsls	r6, r2
 8001e82:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8001e84:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e86:	4667      	mov	r7, ip
 8001e88:	4666      	mov	r6, ip
 8001e8a:	4096      	lsls	r6, r2
 8001e8c:	2f02      	cmp	r7, #2
 8001e8e:	d000      	beq.n	8001e92 <HAL_GPIO_Init+0x166>
 8001e90:	e766      	b.n	8001d60 <HAL_GPIO_Init+0x34>
        temp = GPIOx->AFR[position >> 3u];
 8001e92:	08dd      	lsrs	r5, r3, #3
 8001e94:	00ad      	lsls	r5, r5, #2
 8001e96:	46ac      	mov	ip, r5
 8001e98:	4484      	add	ip, r0
 8001e9a:	4665      	mov	r5, ip
 8001e9c:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e9e:	2507      	movs	r5, #7
 8001ea0:	401d      	ands	r5, r3
 8001ea2:	00ad      	lsls	r5, r5, #2
 8001ea4:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 8001ea6:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ea8:	250f      	movs	r5, #15
 8001eaa:	4647      	mov	r7, r8
 8001eac:	40bd      	lsls	r5, r7
 8001eae:	9f03      	ldr	r7, [sp, #12]
 8001eb0:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eb2:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eb4:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eb6:	4647      	mov	r7, r8
 8001eb8:	692d      	ldr	r5, [r5, #16]
 8001eba:	40bd      	lsls	r5, r7
 8001ebc:	9f03      	ldr	r7, [sp, #12]
 8001ebe:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8001ec0:	4665      	mov	r5, ip
 8001ec2:	622f      	str	r7, [r5, #32]
 8001ec4:	e74c      	b.n	8001d60 <HAL_GPIO_Init+0x34>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ec6:	2503      	movs	r5, #3
 8001ec8:	4095      	lsls	r5, r2
 8001eca:	43ed      	mvns	r5, r5
 8001ecc:	9502      	str	r5, [sp, #8]
 8001ece:	e7d0      	b.n	8001e72 <HAL_GPIO_Init+0x146>
          temp |= iocurrent;
 8001ed0:	9c01      	ldr	r4, [sp, #4]
 8001ed2:	432c      	orrs	r4, r5
 8001ed4:	0025      	movs	r5, r4
 8001ed6:	e798      	b.n	8001e0a <HAL_GPIO_Init+0xde>
          temp |= iocurrent;
 8001ed8:	9f01      	ldr	r7, [sp, #4]
 8001eda:	433d      	orrs	r5, r7
 8001edc:	e78f      	b.n	8001dfe <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 8001ede:	9f01      	ldr	r7, [sp, #4]
 8001ee0:	433d      	orrs	r5, r7
 8001ee2:	e786      	b.n	8001df2 <HAL_GPIO_Init+0xc6>
          temp |= iocurrent;
 8001ee4:	9f01      	ldr	r7, [sp, #4]
 8001ee6:	433d      	orrs	r5, r7
 8001ee8:	e77d      	b.n	8001de6 <HAL_GPIO_Init+0xba>
  } 
}
 8001eea:	b007      	add	sp, #28
 8001eec:	bcf0      	pop	{r4, r5, r6, r7}
 8001eee:	46bb      	mov	fp, r7
 8001ef0:	46b2      	mov	sl, r6
 8001ef2:	46a9      	mov	r9, r5
 8001ef4:	46a0      	mov	r8, r4
 8001ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ef8:	4667      	mov	r7, ip
 8001efa:	2601      	movs	r6, #1
 8001efc:	40be      	lsls	r6, r7
 8001efe:	464f      	mov	r7, r9
 8001f00:	4337      	orrs	r7, r6
 8001f02:	46b9      	mov	r9, r7
 8001f04:	e764      	b.n	8001dd0 <HAL_GPIO_Init+0xa4>
 8001f06:	4667      	mov	r7, ip
 8001f08:	2602      	movs	r6, #2
 8001f0a:	40be      	lsls	r6, r7
 8001f0c:	464f      	mov	r7, r9
 8001f0e:	4337      	orrs	r7, r6
 8001f10:	46b9      	mov	r9, r7
 8001f12:	e75d      	b.n	8001dd0 <HAL_GPIO_Init+0xa4>
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	48000400 	.word	0x48000400
 8001f20:	48000800 	.word	0x48000800
 8001f24:	40010400 	.word	0x40010400

08001f28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f28:	2a00      	cmp	r2, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f2c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f2e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f30:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001f32:	e7fc      	b.n	8001f2e <HAL_GPIO_WritePin+0x6>

08001f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f34:	b510      	push	{r4, lr}
 8001f36:	1e04      	subs	r4, r0, #0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f38:	d04d      	beq.n	8001fd6 <HAL_I2C_Init+0xa2>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f3a:	2341      	movs	r3, #65	; 0x41
 8001f3c:	5cc3      	ldrb	r3, [r0, r3]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d043      	beq.n	8001fcc <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f44:	2341      	movs	r3, #65	; 0x41
 8001f46:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f48:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f4a:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8001f4c:	6823      	ldr	r3, [r4, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	438a      	bics	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f54:	4921      	ldr	r1, [pc, #132]	; (8001fdc <HAL_I2C_Init+0xa8>)
 8001f56:	6862      	ldr	r2, [r4, #4]
 8001f58:	400a      	ands	r2, r1
 8001f5a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	4920      	ldr	r1, [pc, #128]	; (8001fe0 <HAL_I2C_Init+0xac>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f64:	68e2      	ldr	r2, [r4, #12]
 8001f66:	2a01      	cmp	r2, #1
 8001f68:	d02a      	beq.n	8001fc0 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f6a:	2184      	movs	r1, #132	; 0x84
 8001f6c:	68a0      	ldr	r0, [r4, #8]
 8001f6e:	0209      	lsls	r1, r1, #8
 8001f70:	4301      	orrs	r1, r0
 8001f72:	6099      	str	r1, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f74:	2a02      	cmp	r2, #2
 8001f76:	d102      	bne.n	8001f7e <HAL_I2C_Init+0x4a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f78:	2280      	movs	r2, #128	; 0x80
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	4a18      	ldr	r2, [pc, #96]	; (8001fe4 <HAL_I2C_Init+0xb0>)
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8001f82:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f84:	430a      	orrs	r2, r1
 8001f86:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	4915      	ldr	r1, [pc, #84]	; (8001fe0 <HAL_I2C_Init+0xac>)
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f90:	6961      	ldr	r1, [r4, #20]
 8001f92:	6922      	ldr	r2, [r4, #16]
 8001f94:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f96:	69a1      	ldr	r1, [r4, #24]
 8001f98:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f9e:	6a21      	ldr	r1, [r4, #32]
 8001fa0:	69e2      	ldr	r2, [r4, #28]
 8001fa2:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 8001fa4:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fa6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fae:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb0:	2241      	movs	r2, #65	; 0x41
 8001fb2:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb8:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fba:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fbc:	54a3      	strb	r3, [r4, r2]
}
 8001fbe:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fc0:	2280      	movs	r2, #128	; 0x80
 8001fc2:	68a1      	ldr	r1, [r4, #8]
 8001fc4:	0212      	lsls	r2, r2, #8
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	e7d8      	b.n	8001f7e <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 8001fcc:	3340      	adds	r3, #64	; 0x40
 8001fce:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8001fd0:	f7fe ff7c 	bl	8000ecc <HAL_I2C_MspInit>
 8001fd4:	e7b6      	b.n	8001f44 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	e7f1      	b.n	8001fbe <HAL_I2C_Init+0x8a>
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	f0ffffff 	.word	0xf0ffffff
 8001fe0:	ffff7fff 	.word	0xffff7fff
 8001fe4:	02008000 	.word	0x02008000

08001fe8 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fea:	4647      	mov	r7, r8
 8001fec:	46ce      	mov	lr, r9
 8001fee:	4698      	mov	r8, r3
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ff0:	2341      	movs	r3, #65	; 0x41
 8001ff2:	2528      	movs	r5, #40	; 0x28
{
 8001ff4:	b580      	push	{r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ff6:	4699      	mov	r9, r3
 8001ff8:	5cc3      	ldrb	r3, [r0, r3]
{
 8001ffa:	0004      	movs	r4, r0
 8001ffc:	000e      	movs	r6, r1
 8001ffe:	0017      	movs	r7, r2

    return HAL_OK;
  }
  else
  {
    return HAL_ERROR;
 8002000:	2001      	movs	r0, #1
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002002:	401d      	ands	r5, r3
 8002004:	2d28      	cmp	r5, #40	; 0x28
 8002006:	d137      	bne.n	8002078 <HAL_I2C_Slave_Seq_Transmit_IT+0x90>
    if ((pData == NULL) || (Size == 0U))
 8002008:	2900      	cmp	r1, #0
 800200a:	d039      	beq.n	8002080 <HAL_I2C_Slave_Seq_Transmit_IT+0x98>
 800200c:	2a00      	cmp	r2, #0
 800200e:	d037      	beq.n	8002080 <HAL_I2C_Slave_Seq_Transmit_IT+0x98>
  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002010:	464b      	mov	r3, r9
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002012:	22fa      	movs	r2, #250	; 0xfa
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002014:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002016:	6823      	ldr	r3, [r4, #0]
 8002018:	6819      	ldr	r1, [r3, #0]
 800201a:	4391      	bics	r1, r2
 800201c:	6019      	str	r1, [r3, #0]
    __HAL_LOCK(hi2c);
 800201e:	2140      	movs	r1, #64	; 0x40
 8002020:	5c62      	ldrb	r2, [r4, r1]
 8002022:	2a01      	cmp	r2, #1
 8002024:	d053      	beq.n	80020ce <HAL_I2C_Slave_Seq_Transmit_IT+0xe6>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002026:	464a      	mov	r2, r9
    __HAL_LOCK(hi2c);
 8002028:	5460      	strb	r0, [r4, r1]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800202a:	5ca1      	ldrb	r1, [r4, r2]
 800202c:	292a      	cmp	r1, #42	; 0x2a
 800202e:	d02c      	beq.n	800208a <HAL_I2C_Slave_Seq_Transmit_IT+0xa2>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002030:	2241      	movs	r2, #65	; 0x41
 8002032:	2129      	movs	r1, #41	; 0x29
 8002034:	54a1      	strb	r1, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002036:	3201      	adds	r2, #1
 8002038:	3909      	subs	r1, #9
 800203a:	54a1      	strb	r1, [r4, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800203c:	2200      	movs	r2, #0
 800203e:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	4924      	ldr	r1, [pc, #144]	; (80020d4 <HAL_I2C_Slave_Seq_Transmit_IT+0xec>)
 8002044:	400a      	ands	r2, r1
 8002046:	605a      	str	r2, [r3, #4]
    hi2c->XferCount   = Size;
 8002048:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800204a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800204c:	6266      	str	r6, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800204e:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002050:	4642      	mov	r2, r8
 8002052:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002054:	4a20      	ldr	r2, [pc, #128]	; (80020d8 <HAL_I2C_Slave_Seq_Transmit_IT+0xf0>)
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002056:	6999      	ldr	r1, [r3, #24]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002058:	6362      	str	r2, [r4, #52]	; 0x34
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 800205a:	699a      	ldr	r2, [r3, #24]
 800205c:	03d2      	lsls	r2, r2, #15
 800205e:	d503      	bpl.n	8002068 <HAL_I2C_Slave_Seq_Transmit_IT+0x80>
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002060:	2208      	movs	r2, #8
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8002062:	420a      	tst	r2, r1
 8002064:	d000      	beq.n	8002068 <HAL_I2C_Slave_Seq_Transmit_IT+0x80>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002066:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002068:	2240      	movs	r2, #64	; 0x40
 800206a:	2100      	movs	r1, #0
    return HAL_OK;
 800206c:	2000      	movs	r0, #0
    __HAL_UNLOCK(hi2c);
 800206e:	54a1      	strb	r1, [r4, r2]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	31fa      	adds	r1, #250	; 0xfa
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
}
 8002078:	bcc0      	pop	{r6, r7}
 800207a:	46b9      	mov	r9, r7
 800207c:	46b0      	mov	r8, r6
 800207e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	009b      	lsls	r3, r3, #2
      return  HAL_ERROR;
 8002084:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002086:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8002088:	e7f6      	b.n	8002078 <HAL_I2C_Slave_Seq_Transmit_IT+0x90>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800208a:	5ca2      	ldrb	r2, [r4, r2]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800208c:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800208e:	4015      	ands	r5, r2
 8002090:	0028      	movs	r0, r5
 8002092:	3828      	subs	r0, #40	; 0x28
 8002094:	4242      	negs	r2, r0
 8002096:	4150      	adcs	r0, r2
 8002098:	22b0      	movs	r2, #176	; 0xb0
 800209a:	4240      	negs	r0, r0
 800209c:	4002      	ands	r2, r0
 800209e:	3af5      	subs	r2, #245	; 0xf5
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80020a0:	400a      	ands	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	0412      	lsls	r2, r2, #16
 80020a8:	d5c2      	bpl.n	8002030 <HAL_I2C_Slave_Seq_Transmit_IT+0x48>
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4909      	ldr	r1, [pc, #36]	; (80020d4 <HAL_I2C_Slave_Seq_Transmit_IT+0xec>)
        if (hi2c->hdmarx != NULL)
 80020ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80020b0:	400a      	ands	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmarx != NULL)
 80020b4:	2800      	cmp	r0, #0
 80020b6:	d0bb      	beq.n	8002030 <HAL_I2C_Slave_Seq_Transmit_IT+0x48>
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <HAL_I2C_Slave_Seq_Transmit_IT+0xf4>)
 80020ba:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80020bc:	f7ff fdc0 	bl	8001c40 <HAL_DMA_Abort_IT>
 80020c0:	2800      	cmp	r0, #0
 80020c2:	d002      	beq.n	80020ca <HAL_I2C_Slave_Seq_Transmit_IT+0xe2>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80020c4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80020c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80020c8:	4798      	blx	r3
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	e7b0      	b.n	8002030 <HAL_I2C_Slave_Seq_Transmit_IT+0x48>
    __HAL_LOCK(hi2c);
 80020ce:	2002      	movs	r0, #2
 80020d0:	e7d2      	b.n	8002078 <HAL_I2C_Slave_Seq_Transmit_IT+0x90>
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	ffff7fff 	.word	0xffff7fff
 80020d8:	080026b5 	.word	0x080026b5
 80020dc:	08002325 	.word	0x08002325

080020e0 <HAL_I2C_Slave_Seq_Receive_IT>:
{
 80020e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e2:	4647      	mov	r7, r8
 80020e4:	46ce      	mov	lr, r9
 80020e6:	4698      	mov	r8, r3
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80020e8:	2341      	movs	r3, #65	; 0x41
 80020ea:	2528      	movs	r5, #40	; 0x28
{
 80020ec:	b580      	push	{r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80020ee:	4699      	mov	r9, r3
 80020f0:	5cc3      	ldrb	r3, [r0, r3]
{
 80020f2:	0004      	movs	r4, r0
 80020f4:	000e      	movs	r6, r1
 80020f6:	0017      	movs	r7, r2
    return HAL_ERROR;
 80020f8:	2001      	movs	r0, #1
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80020fa:	401d      	ands	r5, r3
 80020fc:	2d28      	cmp	r5, #40	; 0x28
 80020fe:	d137      	bne.n	8002170 <HAL_I2C_Slave_Seq_Receive_IT+0x90>
    if ((pData == NULL) || (Size == 0U))
 8002100:	2900      	cmp	r1, #0
 8002102:	d039      	beq.n	8002178 <HAL_I2C_Slave_Seq_Receive_IT+0x98>
 8002104:	2a00      	cmp	r2, #0
 8002106:	d037      	beq.n	8002178 <HAL_I2C_Slave_Seq_Receive_IT+0x98>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002108:	464b      	mov	r3, r9
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800210a:	22fc      	movs	r2, #252	; 0xfc
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800210c:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	6819      	ldr	r1, [r3, #0]
 8002112:	4391      	bics	r1, r2
 8002114:	6019      	str	r1, [r3, #0]
    __HAL_LOCK(hi2c);
 8002116:	2140      	movs	r1, #64	; 0x40
 8002118:	5c62      	ldrb	r2, [r4, r1]
 800211a:	2a01      	cmp	r2, #1
 800211c:	d053      	beq.n	80021c6 <HAL_I2C_Slave_Seq_Receive_IT+0xe6>
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800211e:	464a      	mov	r2, r9
    __HAL_LOCK(hi2c);
 8002120:	5460      	strb	r0, [r4, r1]
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002122:	5ca1      	ldrb	r1, [r4, r2]
 8002124:	2929      	cmp	r1, #41	; 0x29
 8002126:	d02c      	beq.n	8002182 <HAL_I2C_Slave_Seq_Receive_IT+0xa2>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002128:	2241      	movs	r2, #65	; 0x41
 800212a:	212a      	movs	r1, #42	; 0x2a
 800212c:	54a1      	strb	r1, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800212e:	3201      	adds	r2, #1
 8002130:	390a      	subs	r1, #10
 8002132:	54a1      	strb	r1, [r4, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002134:	2200      	movs	r2, #0
 8002136:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4924      	ldr	r1, [pc, #144]	; (80021cc <HAL_I2C_Slave_Seq_Receive_IT+0xec>)
 800213c:	400a      	ands	r2, r1
 800213e:	605a      	str	r2, [r3, #4]
    hi2c->XferCount   = Size;
 8002140:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002142:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002144:	6266      	str	r6, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8002146:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002148:	4642      	mov	r2, r8
 800214a:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800214c:	4a20      	ldr	r2, [pc, #128]	; (80021d0 <HAL_I2C_Slave_Seq_Receive_IT+0xf0>)
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800214e:	6999      	ldr	r1, [r3, #24]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002150:	6362      	str	r2, [r4, #52]	; 0x34
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8002152:	699a      	ldr	r2, [r3, #24]
 8002154:	03d2      	lsls	r2, r2, #15
 8002156:	d403      	bmi.n	8002160 <HAL_I2C_Slave_Seq_Receive_IT+0x80>
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002158:	2208      	movs	r2, #8
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 800215a:	420a      	tst	r2, r1
 800215c:	d000      	beq.n	8002160 <HAL_I2C_Slave_Seq_Receive_IT+0x80>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800215e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002160:	2240      	movs	r2, #64	; 0x40
 8002162:	2100      	movs	r1, #0
    return HAL_OK;
 8002164:	2000      	movs	r0, #0
    __HAL_UNLOCK(hi2c);
 8002166:	54a1      	strb	r1, [r4, r2]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	31fc      	adds	r1, #252	; 0xfc
 800216c:	430a      	orrs	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
}
 8002170:	bcc0      	pop	{r6, r7}
 8002172:	46b9      	mov	r9, r7
 8002174:	46b0      	mov	r8, r6
 8002176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	009b      	lsls	r3, r3, #2
      return  HAL_ERROR;
 800217c:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800217e:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8002180:	e7f6      	b.n	8002170 <HAL_I2C_Slave_Seq_Receive_IT+0x90>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002182:	5ca2      	ldrb	r2, [r4, r2]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002184:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002186:	4015      	ands	r5, r2
 8002188:	0028      	movs	r0, r5
 800218a:	3828      	subs	r0, #40	; 0x28
 800218c:	4242      	negs	r2, r0
 800218e:	4150      	adcs	r0, r2
 8002190:	22b0      	movs	r2, #176	; 0xb0
 8002192:	4240      	negs	r0, r0
 8002194:	4002      	ands	r2, r0
 8002196:	3af3      	subs	r2, #243	; 0xf3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002198:	400a      	ands	r2, r1
 800219a:	601a      	str	r2, [r3, #0]
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	0452      	lsls	r2, r2, #17
 80021a0:	d5c2      	bpl.n	8002128 <HAL_I2C_Slave_Seq_Receive_IT+0x48>
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	490b      	ldr	r1, [pc, #44]	; (80021d4 <HAL_I2C_Slave_Seq_Receive_IT+0xf4>)
        if (hi2c->hdmatx != NULL)
 80021a6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80021a8:	400a      	ands	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmatx != NULL)
 80021ac:	2800      	cmp	r0, #0
 80021ae:	d0bb      	beq.n	8002128 <HAL_I2C_Slave_Seq_Receive_IT+0x48>
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_I2C_Slave_Seq_Receive_IT+0xf8>)
 80021b2:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80021b4:	f7ff fd44 	bl	8001c40 <HAL_DMA_Abort_IT>
 80021b8:	2800      	cmp	r0, #0
 80021ba:	d002      	beq.n	80021c2 <HAL_I2C_Slave_Seq_Receive_IT+0xe2>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80021bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80021be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80021c0:	4798      	blx	r3
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	e7b0      	b.n	8002128 <HAL_I2C_Slave_Seq_Receive_IT+0x48>
    __HAL_LOCK(hi2c);
 80021c6:	2002      	movs	r0, #2
 80021c8:	e7d2      	b.n	8002170 <HAL_I2C_Slave_Seq_Receive_IT+0x90>
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	ffff7fff 	.word	0xffff7fff
 80021d0:	080026b5 	.word	0x080026b5
 80021d4:	ffffbfff 	.word	0xffffbfff
 80021d8:	08002325 	.word	0x08002325

080021dc <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80021dc:	6803      	ldr	r3, [r0, #0]
{
 80021de:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80021e0:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80021e2:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80021e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d000      	beq.n	80021ec <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 80021ea:	4798      	blx	r3
}
 80021ec:	bd10      	pop	{r4, pc}
 80021ee:	46c0      	nop			; (mov r8, r8)

080021f0 <HAL_I2C_SlaveRxCpltCallback>:
 80021f0:	4770      	bx	lr
 80021f2:	46c0      	nop			; (mov r8, r8)

080021f4 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f4:	2142      	movs	r1, #66	; 0x42
{
 80021f6:	b510      	push	{r4, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f8:	2400      	movs	r4, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80021fa:	6803      	ldr	r3, [r0, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fe:	5444      	strb	r4, [r0, r1]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002200:	0451      	lsls	r1, r2, #17
 8002202:	d521      	bpl.n	8002248 <I2C_ITSlaveSeqCplt+0x54>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4920      	ldr	r1, [pc, #128]	; (8002288 <I2C_ITSlaveSeqCplt+0x94>)
 8002208:	400a      	ands	r2, r1
 800220a:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800220c:	2241      	movs	r2, #65	; 0x41
 800220e:	5c81      	ldrb	r1, [r0, r2]
 8002210:	2929      	cmp	r1, #41	; 0x29
 8002212:	d023      	beq.n	800225c <I2C_ITSlaveSeqCplt+0x68>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002214:	5c81      	ldrb	r1, [r0, r2]
 8002216:	292a      	cmp	r1, #42	; 0x2a
 8002218:	d000      	beq.n	800221c <I2C_ITSlaveSeqCplt+0x28>
}
 800221a:	bd10      	pop	{r4, pc}
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800221c:	2422      	movs	r4, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800221e:	3902      	subs	r1, #2
 8002220:	5481      	strb	r1, [r0, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002222:	6304      	str	r4, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002224:	5c82      	ldrb	r2, [r0, r2]
 8002226:	4011      	ands	r1, r2
 8002228:	3928      	subs	r1, #40	; 0x28
 800222a:	424a      	negs	r2, r1
 800222c:	4151      	adcs	r1, r2
 800222e:	22b0      	movs	r2, #176	; 0xb0
 8002230:	4249      	negs	r1, r1
 8002232:	400a      	ands	r2, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002234:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002236:	3af5      	subs	r2, #245	; 0xf5
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002238:	400a      	ands	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800223c:	2340      	movs	r3, #64	; 0x40
 800223e:	2200      	movs	r2, #0
 8002240:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002242:	f7ff ffd5 	bl	80021f0 <HAL_I2C_SlaveRxCpltCallback>
}
 8002246:	e7e8      	b.n	800221a <I2C_ITSlaveSeqCplt+0x26>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002248:	0412      	lsls	r2, r2, #16
 800224a:	d5df      	bpl.n	800220c <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	490f      	ldr	r1, [pc, #60]	; (800228c <I2C_ITSlaveSeqCplt+0x98>)
 8002250:	400a      	ands	r2, r1
 8002252:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002254:	2241      	movs	r2, #65	; 0x41
 8002256:	5c81      	ldrb	r1, [r0, r2]
 8002258:	2929      	cmp	r1, #41	; 0x29
 800225a:	d1db      	bne.n	8002214 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800225c:	2421      	movs	r4, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800225e:	3901      	subs	r1, #1
 8002260:	5481      	strb	r1, [r0, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002262:	6304      	str	r4, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002264:	5c82      	ldrb	r2, [r0, r2]
 8002266:	4011      	ands	r1, r2
 8002268:	3928      	subs	r1, #40	; 0x28
 800226a:	424a      	negs	r2, r1
 800226c:	4151      	adcs	r1, r2
 800226e:	22b0      	movs	r2, #176	; 0xb0
 8002270:	4249      	negs	r1, r1
 8002272:	400a      	ands	r2, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002274:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002276:	3af3      	subs	r2, #243	; 0xf3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002278:	400a      	ands	r2, r1
 800227a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800227c:	2340      	movs	r3, #64	; 0x40
 800227e:	2200      	movs	r2, #0
 8002280:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002282:	f7fe fb27 	bl	80008d4 <HAL_I2C_SlaveTxCpltCallback>
 8002286:	e7c8      	b.n	800221a <I2C_ITSlaveSeqCplt+0x26>
 8002288:	ffffbfff 	.word	0xffffbfff
 800228c:	ffff7fff 	.word	0xffff7fff

08002290 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002292:	46c6      	mov	lr, r8
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002294:	25fe      	movs	r5, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 8002296:	6803      	ldr	r3, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002298:	68c6      	ldr	r6, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 800229a:	6999      	ldr	r1, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800229c:	699a      	ldr	r2, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 800229e:	03c9      	lsls	r1, r1, #15
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80022a0:	0c12      	lsrs	r2, r2, #16
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80022a2:	689c      	ldr	r4, [r3, #8]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80022a4:	b500      	push	{lr}
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80022a6:	68df      	ldr	r7, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 80022a8:	0fc9      	lsrs	r1, r1, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80022aa:	402a      	ands	r2, r5
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022ac:	2e02      	cmp	r6, #2
 80022ae:	d113      	bne.n	80022d8 <I2C_ITAddrCplt.part.0+0x48>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80022b0:	05a4      	lsls	r4, r4, #22
 80022b2:	0da6      	lsrs	r6, r4, #22
 80022b4:	46b4      	mov	ip, r6
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80022b6:	2606      	movs	r6, #6
 80022b8:	0f64      	lsrs	r4, r4, #29
 80022ba:	4054      	eors	r4, r2
 80022bc:	0032      	movs	r2, r6
 80022be:	4022      	ands	r2, r4
 80022c0:	4690      	mov	r8, r2
 80022c2:	4226      	tst	r6, r4
 80022c4:	d112      	bne.n	80022ec <I2C_ITAddrCplt.part.0+0x5c>
        hi2c->AddrEventCount++;
 80022c6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80022c8:	3401      	adds	r4, #1
 80022ca:	6484      	str	r4, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80022cc:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80022ce:	2a02      	cmp	r2, #2
 80022d0:	d018      	beq.n	8002304 <I2C_ITAddrCplt.part.0+0x74>
}
 80022d2:	bc80      	pop	{r7}
 80022d4:	46b8      	mov	r8, r7
 80022d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80022d8:	25b8      	movs	r5, #184	; 0xb8
 80022da:	681c      	ldr	r4, [r3, #0]
 80022dc:	43ac      	bics	r4, r5
 80022de:	601c      	str	r4, [r3, #0]
      __HAL_UNLOCK(hi2c);
 80022e0:	2340      	movs	r3, #64	; 0x40
 80022e2:	2400      	movs	r4, #0
 80022e4:	54c4      	strb	r4, [r0, r3]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80022e6:	f7fe fd4b 	bl	8000d80 <HAL_I2C_AddrCallback>
}
 80022ea:	e7f2      	b.n	80022d2 <I2C_ITAddrCplt.part.0+0x42>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80022ec:	24b8      	movs	r4, #184	; 0xb8
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	43a2      	bics	r2, r4
 80022f2:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
 80022f4:	2340      	movs	r3, #64	; 0x40
 80022f6:	2200      	movs	r2, #0
 80022f8:	54c2      	strb	r2, [r0, r3]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80022fa:	002a      	movs	r2, r5
 80022fc:	403a      	ands	r2, r7
 80022fe:	f7fe fd3f 	bl	8000d80 <HAL_I2C_AddrCallback>
 8002302:	e7e6      	b.n	80022d2 <I2C_ITAddrCplt.part.0+0x42>
          hi2c->AddrEventCount = 0U;
 8002304:	4642      	mov	r2, r8
 8002306:	6482      	str	r2, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002308:	2208      	movs	r2, #8
 800230a:	61da      	str	r2, [r3, #28]
          __HAL_UNLOCK(hi2c);
 800230c:	4642      	mov	r2, r8
 800230e:	2340      	movs	r3, #64	; 0x40
 8002310:	54c2      	strb	r2, [r0, r3]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002312:	4662      	mov	r2, ip
 8002314:	f7fe fd34 	bl	8000d80 <HAL_I2C_AddrCallback>
 8002318:	e7db      	b.n	80022d2 <I2C_ITAddrCplt.part.0+0x42>
 800231a:	46c0      	nop			; (mov r8, r8)

0800231c <HAL_I2C_ListenCpltCallback>:
 800231c:	4770      	bx	lr
 800231e:	46c0      	nop			; (mov r8, r8)

08002320 <HAL_I2C_AbortCpltCallback>:
 8002320:	4770      	bx	lr
 8002322:	46c0      	nop			; (mov r8, r8)

08002324 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002324:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002326:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 8002328:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800232e:	2200      	movs	r2, #0
 8002330:	635a      	str	r2, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8002332:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002338:	2200      	movs	r2, #0
 800233a:	635a      	str	r2, [r3, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800233c:	2341      	movs	r3, #65	; 0x41
 800233e:	5cc2      	ldrb	r2, [r0, r3]
 8002340:	2a60      	cmp	r2, #96	; 0x60
 8002342:	d006      	beq.n	8002352 <I2C_DMAAbort+0x2e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002344:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8002346:	2240      	movs	r2, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8002348:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800234a:	5483      	strb	r3, [r0, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800234c:	f7fe fd3a 	bl	8000dc4 <HAL_I2C_ErrorCallback>
}
 8002350:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8002352:	3a40      	subs	r2, #64	; 0x40
 8002354:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002356:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8002358:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800235a:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800235c:	5483      	strb	r3, [r0, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 800235e:	f7ff ffdf 	bl	8002320 <HAL_I2C_AbortCpltCallback>
}
 8002362:	e7f5      	b.n	8002350 <I2C_DMAAbort+0x2c>

08002364 <I2C_ITError>:
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002364:	2241      	movs	r2, #65	; 0x41
{
 8002366:	b570      	push	{r4, r5, r6, lr}
 8002368:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800236a:	5c83      	ldrb	r3, [r0, r2]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800236c:	2500      	movs	r5, #0
 800236e:	2042      	movs	r0, #66	; 0x42
 8002370:	5425      	strb	r5, [r4, r0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002372:	4851      	ldr	r0, [pc, #324]	; (80024b8 <I2C_ITError+0x154>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002374:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002376:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002378:	8565      	strh	r5, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800237a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800237c:	4308      	orrs	r0, r1
 800237e:	6460      	str	r0, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002380:	2b02      	cmp	r3, #2
 8002382:	d834      	bhi.n	80023ee <I2C_ITError+0x8a>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002384:	2028      	movs	r0, #40	; 0x28
 8002386:	5ca3      	ldrb	r3, [r4, r2]
 8002388:	4003      	ands	r3, r0
 800238a:	3b28      	subs	r3, #40	; 0x28
 800238c:	4259      	negs	r1, r3
 800238e:	414b      	adcs	r3, r1
 8002390:	21b0      	movs	r1, #176	; 0xb0
 8002392:	425b      	negs	r3, r3
 8002394:	4019      	ands	r1, r3
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002396:	5ca3      	ldrb	r3, [r4, r2]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002398:	39f7      	subs	r1, #247	; 0xf7
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800239a:	4018      	ands	r0, r3
 800239c:	2828      	cmp	r0, #40	; 0x28
 800239e:	d001      	beq.n	80023a4 <I2C_ITError+0x40>
 80023a0:	21f7      	movs	r1, #247	; 0xf7
 80023a2:	4249      	negs	r1, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	400a      	ands	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80023ac:	2128      	movs	r1, #40	; 0x28
 80023ae:	2241      	movs	r2, #65	; 0x41
 80023b0:	54a1      	strb	r1, [r4, r2]
 80023b2:	4a42      	ldr	r2, [pc, #264]	; (80024bc <I2C_ITError+0x158>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80023b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80023b6:	6362      	str	r2, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 80023b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80023ba:	2800      	cmp	r0, #0
 80023bc:	d004      	beq.n	80023c8 <I2C_ITError+0x64>
 80023be:	0011      	movs	r1, r2
 80023c0:	2510      	movs	r5, #16
 80023c2:	3911      	subs	r1, #17
 80023c4:	43a9      	bics	r1, r5
 80023c6:	d03a      	beq.n	800243e <I2C_ITError+0xda>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80023c8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80023ca:	2800      	cmp	r0, #0
 80023cc:	d003      	beq.n	80023d6 <I2C_ITError+0x72>
 80023ce:	2110      	movs	r1, #16
 80023d0:	3a12      	subs	r2, #18
 80023d2:	438a      	bics	r2, r1
 80023d4:	d048      	beq.n	8002468 <I2C_ITError+0x104>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80023d6:	2341      	movs	r3, #65	; 0x41
 80023d8:	5ce2      	ldrb	r2, [r4, r3]
 80023da:	2a60      	cmp	r2, #96	; 0x60
 80023dc:	d062      	beq.n	80024a4 <I2C_ITError+0x140>
    hi2c->PreviousState = I2C_STATE_NONE;
 80023de:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 80023e0:	2240      	movs	r2, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80023e2:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ErrorCallback(hi2c);
 80023e4:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80023e6:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80023e8:	f7fe fcec 	bl	8000dc4 <HAL_I2C_ErrorCallback>
}
 80023ec:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80023ee:	21fe      	movs	r1, #254	; 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80023f0:	5ca3      	ldrb	r3, [r4, r2]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80023f2:	5ca3      	ldrb	r3, [r4, r2]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80023f4:	6823      	ldr	r3, [r4, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	438a      	bics	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	0792      	lsls	r2, r2, #30
 8002400:	d500      	bpl.n	8002404 <I2C_ITError+0xa0>
    hi2c->Instance->TXDR = 0x00U;
 8002402:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002404:	2201      	movs	r2, #1
 8002406:	6999      	ldr	r1, [r3, #24]
 8002408:	420a      	tst	r2, r1
 800240a:	d102      	bne.n	8002412 <I2C_ITError+0xae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800240c:	6999      	ldr	r1, [r3, #24]
 800240e:	430a      	orrs	r2, r1
 8002410:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002412:	2241      	movs	r2, #65	; 0x41
 8002414:	5ca1      	ldrb	r1, [r4, r2]
 8002416:	2960      	cmp	r1, #96	; 0x60
 8002418:	d00f      	beq.n	800243a <I2C_ITError+0xd6>
      hi2c->State         = HAL_I2C_STATE_READY;
 800241a:	2120      	movs	r1, #32
 800241c:	54a1      	strb	r1, [r4, r2]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800241e:	699a      	ldr	r2, [r3, #24]
 8002420:	4211      	tst	r1, r2
 8002422:	d00a      	beq.n	800243a <I2C_ITError+0xd6>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002424:	2210      	movs	r2, #16
 8002426:	6999      	ldr	r1, [r3, #24]
 8002428:	420a      	tst	r2, r1
 800242a:	d004      	beq.n	8002436 <I2C_ITError+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800242c:	2104      	movs	r1, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800242e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002430:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002432:	430a      	orrs	r2, r1
 8002434:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002436:	2220      	movs	r2, #32
 8002438:	61da      	str	r2, [r3, #28]
 800243a:	2200      	movs	r2, #0
 800243c:	e7ba      	b.n	80023b4 <I2C_ITError+0x50>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	0452      	lsls	r2, r2, #17
 8002442:	d42a      	bmi.n	800249a <I2C_ITError+0x136>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002444:	f7ff fc6e 	bl	8001d24 <HAL_DMA_GetState>
 8002448:	2801      	cmp	r0, #1
 800244a:	d0c4      	beq.n	80023d6 <I2C_ITError+0x72>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800244c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <I2C_ITError+0x15c>)
      __HAL_UNLOCK(hi2c);
 8002450:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002452:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8002454:	2340      	movs	r3, #64	; 0x40
 8002456:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002458:	f7ff fbf2 	bl	8001c40 <HAL_DMA_Abort_IT>
 800245c:	2800      	cmp	r0, #0
 800245e:	d0c5      	beq.n	80023ec <I2C_ITError+0x88>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002460:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002462:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002464:	4798      	blx	r3
 8002466:	e7c1      	b.n	80023ec <I2C_ITError+0x88>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	0412      	lsls	r2, r2, #16
 800246c:	d503      	bpl.n	8002476 <I2C_ITError+0x112>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4914      	ldr	r1, [pc, #80]	; (80024c4 <I2C_ITError+0x160>)
 8002472:	400a      	ands	r2, r1
 8002474:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002476:	f7ff fc55 	bl	8001d24 <HAL_DMA_GetState>
 800247a:	2801      	cmp	r0, #1
 800247c:	d0ab      	beq.n	80023d6 <I2C_ITError+0x72>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800247e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002480:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <I2C_ITError+0x15c>)
      __HAL_UNLOCK(hi2c);
 8002482:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002484:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8002486:	2340      	movs	r3, #64	; 0x40
 8002488:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800248a:	f7ff fbd9 	bl	8001c40 <HAL_DMA_Abort_IT>
 800248e:	2800      	cmp	r0, #0
 8002490:	d0ac      	beq.n	80023ec <I2C_ITError+0x88>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002492:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002494:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002496:	4798      	blx	r3
 8002498:	e7a8      	b.n	80023ec <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	490a      	ldr	r1, [pc, #40]	; (80024c8 <I2C_ITError+0x164>)
 800249e:	400a      	ands	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	e7cf      	b.n	8002444 <I2C_ITError+0xe0>
    hi2c->State = HAL_I2C_STATE_READY;
 80024a4:	3a40      	subs	r2, #64	; 0x40
 80024a6:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 80024a8:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 80024aa:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80024ac:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 80024ae:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80024b0:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 80024b2:	f7ff ff35 	bl	8002320 <HAL_I2C_AbortCpltCallback>
}
 80024b6:	e799      	b.n	80023ec <I2C_ITError+0x88>
 80024b8:	ffff0000 	.word	0xffff0000
 80024bc:	080026b5 	.word	0x080026b5
 80024c0:	08002325 	.word	0x08002325
 80024c4:	ffff7fff 	.word	0xffff7fff
 80024c8:	ffffbfff 	.word	0xffffbfff

080024cc <HAL_I2C_ER_IRQHandler>:
{
 80024cc:	b570      	push	{r4, r5, r6, lr}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80024ce:	2480      	movs	r4, #128	; 0x80
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80024d0:	6802      	ldr	r2, [r0, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80024d2:	0064      	lsls	r4, r4, #1
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80024d4:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80024d6:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80024d8:	4223      	tst	r3, r4
 80024da:	d02a      	beq.n	8002532 <HAL_I2C_ER_IRQHandler+0x66>
 80024dc:	060d      	lsls	r5, r1, #24
 80024de:	d51b      	bpl.n	8002518 <HAL_I2C_ER_IRQHandler+0x4c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80024e0:	2501      	movs	r5, #1
 80024e2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80024e4:	4329      	orrs	r1, r5
 80024e6:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024e8:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80024ea:	0559      	lsls	r1, r3, #21
 80024ec:	d526      	bpl.n	800253c <HAL_I2C_ER_IRQHandler+0x70>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80024ee:	2408      	movs	r4, #8
 80024f0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80024f2:	4321      	orrs	r1, r4
 80024f4:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024f6:	2180      	movs	r1, #128	; 0x80
 80024f8:	00c9      	lsls	r1, r1, #3
 80024fa:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80024fc:	059b      	lsls	r3, r3, #22
 80024fe:	d506      	bpl.n	800250e <HAL_I2C_ER_IRQHandler+0x42>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002500:	2102      	movs	r1, #2
 8002502:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002504:	430b      	orrs	r3, r1
 8002506:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	61d3      	str	r3, [r2, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800250e:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8002510:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002512:	420b      	tst	r3, r1
 8002514:	d10a      	bne.n	800252c <HAL_I2C_ER_IRQHandler+0x60>
}
 8002516:	bd70      	pop	{r4, r5, r6, pc}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002518:	055c      	lsls	r4, r3, #21
 800251a:	d4f8      	bmi.n	800250e <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800251c:	059b      	lsls	r3, r3, #22
 800251e:	d5f6      	bpl.n	800250e <HAL_I2C_ER_IRQHandler+0x42>
 8002520:	0609      	lsls	r1, r1, #24
 8002522:	d4ed      	bmi.n	8002500 <HAL_I2C_ER_IRQHandler+0x34>
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002524:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8002526:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002528:	420b      	tst	r3, r1
 800252a:	d0f4      	beq.n	8002516 <HAL_I2C_ER_IRQHandler+0x4a>
    I2C_ITError(hi2c, tmperror);
 800252c:	f7ff ff1a 	bl	8002364 <I2C_ITError>
}
 8002530:	e7f1      	b.n	8002516 <HAL_I2C_ER_IRQHandler+0x4a>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002532:	055c      	lsls	r4, r3, #21
 8002534:	d5f2      	bpl.n	800251c <HAL_I2C_ER_IRQHandler+0x50>
 8002536:	0609      	lsls	r1, r1, #24
 8002538:	d4d9      	bmi.n	80024ee <HAL_I2C_ER_IRQHandler+0x22>
 800253a:	e7e8      	b.n	800250e <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800253c:	059b      	lsls	r3, r3, #22
 800253e:	d4df      	bmi.n	8002500 <HAL_I2C_ER_IRQHandler+0x34>
 8002540:	e7e5      	b.n	800250e <HAL_I2C_ER_IRQHandler+0x42>
 8002542:	46c0      	nop			; (mov r8, r8)

08002544 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002546:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002548:	2541      	movs	r5, #65	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800254a:	2620      	movs	r6, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800254c:	6803      	ldr	r3, [r0, #0]
 800254e:	6818      	ldr	r0, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002550:	5d62      	ldrb	r2, [r4, r5]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002552:	61de      	str	r6, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002554:	3e18      	subs	r6, #24
 8002556:	43b2      	bics	r2, r6
 8002558:	2a21      	cmp	r2, #33	; 0x21
 800255a:	d04e      	beq.n	80025fa <I2C_ITSlaveCplt.constprop.0+0xb6>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800255c:	2a22      	cmp	r2, #34	; 0x22
 800255e:	d100      	bne.n	8002562 <I2C_ITSlaveCplt.constprop.0+0x1e>
 8002560:	e071      	b.n	8002646 <I2C_ITSlaveCplt.constprop.0+0x102>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002562:	2280      	movs	r2, #128	; 0x80
 8002564:	685d      	ldr	r5, [r3, #4]
 8002566:	0212      	lsls	r2, r2, #8
 8002568:	432a      	orrs	r2, r5
 800256a:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	4d4d      	ldr	r5, [pc, #308]	; (80026a4 <I2C_ITSlaveCplt.constprop.0+0x160>)
 8002570:	402a      	ands	r2, r5
 8002572:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002574:	699a      	ldr	r2, [r3, #24]
 8002576:	0792      	lsls	r2, r2, #30
 8002578:	d501      	bpl.n	800257e <I2C_ITSlaveCplt.constprop.0+0x3a>
    hi2c->Instance->TXDR = 0x00U;
 800257a:	2200      	movs	r2, #0
 800257c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800257e:	2201      	movs	r2, #1
 8002580:	699d      	ldr	r5, [r3, #24]
 8002582:	422a      	tst	r2, r5
 8002584:	d102      	bne.n	800258c <I2C_ITSlaveCplt.constprop.0+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002586:	699d      	ldr	r5, [r3, #24]
 8002588:	432a      	orrs	r2, r5
 800258a:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800258c:	0442      	lsls	r2, r0, #17
 800258e:	d53b      	bpl.n	8002608 <I2C_ITSlaveCplt.constprop.0+0xc4>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4845      	ldr	r0, [pc, #276]	; (80026a8 <I2C_ITSlaveCplt.constprop.0+0x164>)
 8002594:	4002      	ands	r2, r0
 8002596:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8002598:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800259a:	2a00      	cmp	r2, #0
 800259c:	d003      	beq.n	80025a6 <I2C_ITSlaveCplt.constprop.0+0x62>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	6852      	ldr	r2, [r2, #4]
 80025a2:	b292      	uxth	r2, r2
 80025a4:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80025a6:	0749      	lsls	r1, r1, #29
 80025a8:	d508      	bpl.n	80025bc <I2C_ITSlaveCplt.constprop.0+0x78>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025b2:	3301      	adds	r3, #1
 80025b4:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80025b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d13d      	bne.n	8002638 <I2C_ITSlaveCplt.constprop.0+0xf4>
  if (hi2c->XferCount != 0U)
 80025bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <I2C_ITSlaveCplt.constprop.0+0x86>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025c2:	2204      	movs	r2, #4
 80025c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025c6:	4313      	orrs	r3, r2
 80025c8:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ca:	2700      	movs	r7, #0
 80025cc:	2542      	movs	r5, #66	; 0x42
 80025ce:	5567      	strb	r7, [r4, r5]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025d0:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 80025d2:	6367      	str	r7, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025d4:	2e00      	cmp	r6, #0
 80025d6:	d13d      	bne.n	8002654 <I2C_ITSlaveCplt.constprop.0+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80025d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025da:	4d34      	ldr	r5, [pc, #208]	; (80026ac <I2C_ITSlaveCplt.constprop.0+0x168>)
 80025dc:	42ab      	cmp	r3, r5
 80025de:	d11d      	bne.n	800261c <I2C_ITSlaveCplt.constprop.0+0xd8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025e0:	2341      	movs	r3, #65	; 0x41
 80025e2:	5ce2      	ldrb	r2, [r4, r3]
 80025e4:	2a22      	cmp	r2, #34	; 0x22
 80025e6:	d053      	beq.n	8002690 <I2C_ITSlaveCplt.constprop.0+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 80025e8:	2220      	movs	r2, #32
 80025ea:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 80025ec:	2340      	movs	r3, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80025ee:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80025f0:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80025f2:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80025f4:	f7fe f96e 	bl	80008d4 <HAL_I2C_SlaveTxCpltCallback>
}
 80025f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80025fa:	5d65      	ldrb	r5, [r4, r5]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80025fc:	681d      	ldr	r5, [r3, #0]
 80025fe:	36f2      	adds	r6, #242	; 0xf2
 8002600:	43b5      	bics	r5, r6
 8002602:	601d      	str	r5, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002604:	6322      	str	r2, [r4, #48]	; 0x30
 8002606:	e7ac      	b.n	8002562 <I2C_ITSlaveCplt.constprop.0+0x1e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002608:	0400      	lsls	r0, r0, #16
 800260a:	d5cc      	bpl.n	80025a6 <I2C_ITSlaveCplt.constprop.0+0x62>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4828      	ldr	r0, [pc, #160]	; (80026b0 <I2C_ITSlaveCplt.constprop.0+0x16c>)
 8002610:	4002      	ands	r2, r0
 8002612:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002614:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002616:	2a00      	cmp	r2, #0
 8002618:	d1c1      	bne.n	800259e <I2C_ITSlaveCplt.constprop.0+0x5a>
 800261a:	e7c4      	b.n	80025a6 <I2C_ITSlaveCplt.constprop.0+0x62>
    I2C_ITSlaveSeqCplt(hi2c);
 800261c:	0020      	movs	r0, r4
 800261e:	f7ff fde9 	bl	80021f4 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8002622:	2341      	movs	r3, #65	; 0x41
 8002624:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002626:	62e5      	str	r5, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002628:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 800262a:	3b01      	subs	r3, #1
    hi2c->PreviousState = I2C_STATE_NONE;
 800262c:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800262e:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8002630:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002632:	f7ff fe73 	bl	800231c <HAL_I2C_ListenCpltCallback>
 8002636:	e7df      	b.n	80025f8 <I2C_ITSlaveCplt.constprop.0+0xb4>
      hi2c->XferSize--;
 8002638:	3b01      	subs	r3, #1
 800263a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800263c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800263e:	3b01      	subs	r3, #1
 8002640:	b29b      	uxth	r3, r3
 8002642:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002644:	e7ba      	b.n	80025bc <I2C_ITSlaveCplt.constprop.0+0x78>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002646:	26fc      	movs	r6, #252	; 0xfc
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002648:	5d65      	ldrb	r5, [r4, r5]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800264a:	681d      	ldr	r5, [r3, #0]
 800264c:	43b5      	bics	r5, r6
 800264e:	601d      	str	r5, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002650:	6322      	str	r2, [r4, #48]	; 0x30
 8002652:	e786      	b.n	8002562 <I2C_ITSlaveCplt.constprop.0+0x1e>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002654:	0020      	movs	r0, r4
 8002656:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002658:	f7ff fe84 	bl	8002364 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800265c:	2341      	movs	r3, #65	; 0x41
 800265e:	5ce2      	ldrb	r2, [r4, r3]
 8002660:	2a28      	cmp	r2, #40	; 0x28
 8002662:	d1c9      	bne.n	80025f8 <I2C_ITSlaveCplt.constprop.0+0xb4>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002664:	4a11      	ldr	r2, [pc, #68]	; (80026ac <I2C_ITSlaveCplt.constprop.0+0x168>)
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002666:	21fe      	movs	r1, #254	; 0xfe
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002668:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 800266a:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 800266c:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800266e:	54e2      	strb	r2, [r4, r3]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002670:	5567      	strb	r7, [r4, r5]
  hi2c->XferISR = NULL;
 8002672:	6367      	str	r7, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002674:	5ce2      	ldrb	r2, [r4, r3]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002676:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002678:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800267a:	0020      	movs	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	438a      	bics	r2, r1
 8002680:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002682:	2210      	movs	r2, #16
 8002684:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002686:	2340      	movs	r3, #64	; 0x40
 8002688:	54e7      	strb	r7, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 800268a:	f7ff fe47 	bl	800231c <HAL_I2C_ListenCpltCallback>
}
 800268e:	e7b3      	b.n	80025f8 <I2C_ITSlaveCplt.constprop.0+0xb4>
    hi2c->State = HAL_I2C_STATE_READY;
 8002690:	3a02      	subs	r2, #2
 8002692:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8002694:	3b01      	subs	r3, #1
    hi2c->PreviousState = I2C_STATE_NONE;
 8002696:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002698:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 800269a:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800269c:	f7ff fda8 	bl	80021f0 <HAL_I2C_SlaveRxCpltCallback>
 80026a0:	e7aa      	b.n	80025f8 <I2C_ITSlaveCplt.constprop.0+0xb4>
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	fe00e800 	.word	0xfe00e800
 80026a8:	ffffbfff 	.word	0xffffbfff
 80026ac:	ffff0000 	.word	0xffff0000
 80026b0:	ffff7fff 	.word	0xffff7fff

080026b4 <I2C_Slave_ISR_IT>:
{
 80026b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80026b6:	2340      	movs	r3, #64	; 0x40
{
 80026b8:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 80026ba:	5cc2      	ldrb	r2, [r0, r3]
{
 80026bc:	0004      	movs	r4, r0
 80026be:	000d      	movs	r5, r1
  uint32_t tmpoptions = hi2c->XferOptions;
 80026c0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80026c2:	2a01      	cmp	r2, #1
 80026c4:	d100      	bne.n	80026c8 <I2C_Slave_ISR_IT+0x14>
 80026c6:	e079      	b.n	80027bc <I2C_Slave_ISR_IT+0x108>
 80026c8:	2201      	movs	r2, #1
 80026ca:	54c2      	strb	r2, [r0, r3]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026cc:	3b20      	subs	r3, #32
 80026ce:	420b      	tst	r3, r1
 80026d0:	d001      	beq.n	80026d6 <I2C_Slave_ISR_IT+0x22>
 80026d2:	4233      	tst	r3, r6
 80026d4:	d15e      	bne.n	8002794 <I2C_Slave_ISR_IT+0xe0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80026d6:	2310      	movs	r3, #16
 80026d8:	422b      	tst	r3, r5
 80026da:	d017      	beq.n	800270c <I2C_Slave_ISR_IT+0x58>
 80026dc:	4233      	tst	r3, r6
 80026de:	d015      	beq.n	800270c <I2C_Slave_ISR_IT+0x58>
    if (hi2c->XferCount == 0U)
 80026e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80026e2:	b291      	uxth	r1, r2
 80026e4:	2a00      	cmp	r2, #0
 80026e6:	d15b      	bne.n	80027a0 <I2C_Slave_ISR_IT+0xec>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80026e8:	3331      	adds	r3, #49	; 0x31
 80026ea:	5ce2      	ldrb	r2, [r4, r3]
 80026ec:	2a28      	cmp	r2, #40	; 0x28
 80026ee:	d100      	bne.n	80026f2 <I2C_Slave_ISR_IT+0x3e>
 80026f0:	e06e      	b.n	80027d0 <I2C_Slave_ISR_IT+0x11c>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80026f2:	2341      	movs	r3, #65	; 0x41
 80026f4:	5ce3      	ldrb	r3, [r4, r3]
 80026f6:	2b29      	cmp	r3, #41	; 0x29
 80026f8:	d100      	bne.n	80026fc <I2C_Slave_ISR_IT+0x48>
 80026fa:	e09d      	b.n	8002838 <I2C_Slave_ISR_IT+0x184>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026fc:	2210      	movs	r2, #16
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002702:	2340      	movs	r3, #64	; 0x40
 8002704:	2200      	movs	r2, #0
  return HAL_OK;
 8002706:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 8002708:	54e2      	strb	r2, [r4, r3]
}
 800270a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800270c:	2304      	movs	r3, #4
 800270e:	422b      	tst	r3, r5
 8002710:	d10d      	bne.n	800272e <I2C_Slave_ISR_IT+0x7a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002712:	2308      	movs	r3, #8
 8002714:	422b      	tst	r3, r5
 8002716:	d027      	beq.n	8002768 <I2C_Slave_ISR_IT+0xb4>
 8002718:	4233      	tst	r3, r6
 800271a:	d025      	beq.n	8002768 <I2C_Slave_ISR_IT+0xb4>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800271c:	2241      	movs	r2, #65	; 0x41
 800271e:	5ca1      	ldrb	r1, [r4, r2]
 8002720:	3a19      	subs	r2, #25
 8002722:	400a      	ands	r2, r1
 8002724:	2a28      	cmp	r2, #40	; 0x28
 8002726:	d04f      	beq.n	80027c8 <I2C_Slave_ISR_IT+0x114>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002728:	6822      	ldr	r2, [r4, #0]
 800272a:	61d3      	str	r3, [r2, #28]
 800272c:	e7e9      	b.n	8002702 <I2C_Slave_ISR_IT+0x4e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800272e:	4233      	tst	r3, r6
 8002730:	d0ef      	beq.n	8002712 <I2C_Slave_ISR_IT+0x5e>
    if (hi2c->XferCount > 0U)
 8002732:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00d      	beq.n	8002754 <I2C_Slave_ISR_IT+0xa0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800273c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800273e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002740:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002742:	3301      	adds	r3, #1
 8002744:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002746:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002748:	3b01      	subs	r3, #1
 800274a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800274c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800274e:	3b01      	subs	r3, #1
 8002750:	b29b      	uxth	r3, r3
 8002752:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8002754:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1d3      	bne.n	8002702 <I2C_Slave_ISR_IT+0x4e>
 800275a:	4b42      	ldr	r3, [pc, #264]	; (8002864 <I2C_Slave_ISR_IT+0x1b0>)
 800275c:	429f      	cmp	r7, r3
 800275e:	d0d0      	beq.n	8002702 <I2C_Slave_ISR_IT+0x4e>
        I2C_ITSlaveSeqCplt(hi2c);
 8002760:	0020      	movs	r0, r4
 8002762:	f7ff fd47 	bl	80021f4 <I2C_ITSlaveSeqCplt>
 8002766:	e7cc      	b.n	8002702 <I2C_Slave_ISR_IT+0x4e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002768:	2302      	movs	r3, #2
 800276a:	422b      	tst	r3, r5
 800276c:	d0c9      	beq.n	8002702 <I2C_Slave_ISR_IT+0x4e>
 800276e:	4233      	tst	r3, r6
 8002770:	d0c7      	beq.n	8002702 <I2C_Slave_ISR_IT+0x4e>
    if (hi2c->XferCount > 0U)
 8002772:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002774:	2b00      	cmp	r3, #0
 8002776:	d023      	beq.n	80027c0 <I2C_Slave_ISR_IT+0x10c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800277a:	6822      	ldr	r2, [r4, #0]
 800277c:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800277e:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002780:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002782:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002784:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002786:	3b01      	subs	r3, #1
 8002788:	b29b      	uxth	r3, r3
 800278a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800278c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800278e:	3b01      	subs	r3, #1
 8002790:	8523      	strh	r3, [r4, #40]	; 0x28
 8002792:	e7b6      	b.n	8002702 <I2C_Slave_ISR_IT+0x4e>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002794:	f7ff fed6 	bl	8002544 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002798:	2310      	movs	r3, #16
 800279a:	422b      	tst	r3, r5
 800279c:	d0b6      	beq.n	800270c <I2C_Slave_ISR_IT+0x58>
 800279e:	e79d      	b.n	80026dc <I2C_Slave_ISR_IT+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a0:	6822      	ldr	r2, [r4, #0]
 80027a2:	61d3      	str	r3, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027a4:	2204      	movs	r2, #4
 80027a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027a8:	4313      	orrs	r3, r2
 80027aa:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80027ac:	4b2e      	ldr	r3, [pc, #184]	; (8002868 <I2C_Slave_ISR_IT+0x1b4>)
 80027ae:	421f      	tst	r7, r3
 80027b0:	d1a7      	bne.n	8002702 <I2C_Slave_ISR_IT+0x4e>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80027b2:	0020      	movs	r0, r4
 80027b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80027b6:	f7ff fdd5 	bl	8002364 <I2C_ITError>
 80027ba:	e7a2      	b.n	8002702 <I2C_Slave_ISR_IT+0x4e>
  __HAL_LOCK(hi2c);
 80027bc:	2002      	movs	r0, #2
 80027be:	e7a4      	b.n	800270a <I2C_Slave_ISR_IT+0x56>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80027c0:	4b29      	ldr	r3, [pc, #164]	; (8002868 <I2C_Slave_ISR_IT+0x1b4>)
 80027c2:	421f      	tst	r7, r3
 80027c4:	d0cc      	beq.n	8002760 <I2C_Slave_ISR_IT+0xac>
 80027c6:	e79c      	b.n	8002702 <I2C_Slave_ISR_IT+0x4e>
 80027c8:	0020      	movs	r0, r4
 80027ca:	f7ff fd61 	bl	8002290 <I2C_ITAddrCplt.part.0>
 80027ce:	e798      	b.n	8002702 <I2C_Slave_ISR_IT+0x4e>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80027d0:	2280      	movs	r2, #128	; 0x80
 80027d2:	0492      	lsls	r2, r2, #18
 80027d4:	4297      	cmp	r7, r2
 80027d6:	d000      	beq.n	80027da <I2C_Slave_ISR_IT+0x126>
 80027d8:	e78b      	b.n	80026f2 <I2C_Slave_ISR_IT+0x3e>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027da:	4a22      	ldr	r2, [pc, #136]	; (8002864 <I2C_Slave_ISR_IT+0x1b0>)
 80027dc:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 80027de:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 80027e0:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80027e2:	54e2      	strb	r2, [r4, r3]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	3301      	adds	r3, #1
 80027e6:	54e1      	strb	r1, [r4, r3]
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80027e8:	3b3e      	subs	r3, #62	; 0x3e
  hi2c->XferISR = NULL;
 80027ea:	6361      	str	r1, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80027ec:	422b      	tst	r3, r5
 80027ee:	d012      	beq.n	8002816 <I2C_Slave_ISR_IT+0x162>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027f0:	6822      	ldr	r2, [r4, #0]
 80027f2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80027f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027f6:	7011      	strb	r1, [r2, #0]
    hi2c->pBuffPtr++;
 80027f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027fa:	3201      	adds	r2, #1
 80027fc:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80027fe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002800:	2a00      	cmp	r2, #0
 8002802:	d008      	beq.n	8002816 <I2C_Slave_ISR_IT+0x162>
      hi2c->XferSize--;
 8002804:	3a01      	subs	r2, #1
 8002806:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002808:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800280a:	3a01      	subs	r2, #1
 800280c:	b292      	uxth	r2, r2
 800280e:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002810:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002812:	4313      	orrs	r3, r2
 8002814:	6463      	str	r3, [r4, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002816:	2341      	movs	r3, #65	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002818:	21fe      	movs	r1, #254	; 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800281a:	5ce2      	ldrb	r2, [r4, r3]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800281c:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800281e:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8002820:	0020      	movs	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	438a      	bics	r2, r1
 8002826:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002828:	2210      	movs	r2, #16
 800282a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800282c:	2340      	movs	r3, #64	; 0x40
 800282e:	2200      	movs	r2, #0
 8002830:	54e2      	strb	r2, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 8002832:	f7ff fd73 	bl	800231c <HAL_I2C_ListenCpltCallback>
}
 8002836:	e764      	b.n	8002702 <I2C_Slave_ISR_IT+0x4e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <I2C_Slave_ISR_IT+0x1b0>)
 800283a:	429f      	cmp	r7, r3
 800283c:	d100      	bne.n	8002840 <I2C_Slave_ISR_IT+0x18c>
 800283e:	e75d      	b.n	80026fc <I2C_Slave_ISR_IT+0x48>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002840:	2210      	movs	r2, #16
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	0792      	lsls	r2, r2, #30
 800284a:	d501      	bpl.n	8002850 <I2C_Slave_ISR_IT+0x19c>
    hi2c->Instance->TXDR = 0x00U;
 800284c:	2200      	movs	r2, #0
 800284e:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002850:	2201      	movs	r2, #1
 8002852:	6999      	ldr	r1, [r3, #24]
 8002854:	420a      	tst	r2, r1
 8002856:	d000      	beq.n	800285a <I2C_Slave_ISR_IT+0x1a6>
 8002858:	e782      	b.n	8002760 <I2C_Slave_ISR_IT+0xac>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800285a:	6999      	ldr	r1, [r3, #24]
 800285c:	430a      	orrs	r2, r1
 800285e:	619a      	str	r2, [r3, #24]
 8002860:	e77e      	b.n	8002760 <I2C_Slave_ISR_IT+0xac>
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	ffff0000 	.word	0xffff0000
 8002868:	feffffff 	.word	0xfeffffff

0800286c <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800286c:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800286e:	4770      	bx	lr

08002870 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002870:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002872:	2441      	movs	r4, #65	; 0x41
 8002874:	5d03      	ldrb	r3, [r0, r4]
{
 8002876:	468c      	mov	ip, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002878:	b2dd      	uxtb	r5, r3
 800287a:	2b20      	cmp	r3, #32
 800287c:	d11a      	bne.n	80028b4 <HAL_I2CEx_ConfigAnalogFilter+0x44>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287e:	2640      	movs	r6, #64	; 0x40
 8002880:	5d83      	ldrb	r3, [r0, r6]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d016      	beq.n	80028b4 <HAL_I2CEx_ConfigAnalogFilter+0x44>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002886:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002888:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 800288a:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 800288c:	6803      	ldr	r3, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800288e:	490a      	ldr	r1, [pc, #40]	; (80028b8 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	43ba      	bics	r2, r7
 8002894:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	400a      	ands	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800289c:	4662      	mov	r2, ip
 800289e:	6819      	ldr	r1, [r3, #0]
 80028a0:	4311      	orrs	r1, r2
 80028a2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	433a      	orrs	r2, r7
 80028a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028aa:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 80028ae:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 80028b0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80028b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80028b4:	2002      	movs	r0, #2
 80028b6:	e7fc      	b.n	80028b2 <HAL_I2CEx_ConfigAnalogFilter+0x42>
 80028b8:	ffffefff 	.word	0xffffefff

080028bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028be:	46ce      	mov	lr, r9
 80028c0:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c2:	2441      	movs	r4, #65	; 0x41
{
 80028c4:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c6:	5d03      	ldrb	r3, [r0, r4]
 80028c8:	b2dd      	uxtb	r5, r3
 80028ca:	2b20      	cmp	r3, #32
 80028cc:	d11f      	bne.n	800290e <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ce:	2640      	movs	r6, #64	; 0x40
 80028d0:	5d83      	ldrb	r3, [r0, r6]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d01b      	beq.n	800290e <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028d6:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028d8:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80028da:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 80028dc:	6802      	ldr	r2, [r0, #0]
 80028de:	46b9      	mov	r9, r7
 80028e0:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028e2:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 80028e4:	43bb      	bics	r3, r7
 80028e6:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 80028e8:	6813      	ldr	r3, [r2, #0]
 80028ea:	4698      	mov	r8, r3
    tmpreg &= ~(I2C_CR1_DNF);
 80028ec:	4647      	mov	r7, r8
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_I2CEx_ConfigDigitalFilter+0x58>)
 80028f0:	401f      	ands	r7, r3
    tmpreg |= DigitalFilter << 8U;
 80028f2:	4339      	orrs	r1, r7

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028f4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f6:	4649      	mov	r1, r9
 80028f8:	6813      	ldr	r3, [r2, #0]
 80028fa:	430b      	orrs	r3, r1
 80028fc:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fe:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002900:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 8002902:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 8002904:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002906:	bcc0      	pop	{r6, r7}
 8002908:	46b9      	mov	r9, r7
 800290a:	46b0      	mov	r8, r6
 800290c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800290e:	2002      	movs	r0, #2
 8002910:	e7f9      	b.n	8002906 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	fffff0ff 	.word	0xfffff0ff

08002918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800291a:	46ce      	mov	lr, r9
 800291c:	4647      	mov	r7, r8
 800291e:	b580      	push	{r7, lr}
 8002920:	0004      	movs	r4, r0
 8002922:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002924:	2800      	cmp	r0, #0
 8002926:	d100      	bne.n	800292a <HAL_RCC_OscConfig+0x12>
 8002928:	e0ee      	b.n	8002b08 <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292a:	6803      	ldr	r3, [r0, #0]
 800292c:	07da      	lsls	r2, r3, #31
 800292e:	d535      	bpl.n	800299c <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002930:	210c      	movs	r1, #12
 8002932:	48c3      	ldr	r0, [pc, #780]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
 8002934:	6842      	ldr	r2, [r0, #4]
 8002936:	400a      	ands	r2, r1
 8002938:	2a04      	cmp	r2, #4
 800293a:	d100      	bne.n	800293e <HAL_RCC_OscConfig+0x26>
 800293c:	e101      	b.n	8002b42 <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800293e:	6842      	ldr	r2, [r0, #4]
 8002940:	4011      	ands	r1, r2
 8002942:	2908      	cmp	r1, #8
 8002944:	d100      	bne.n	8002948 <HAL_RCC_OscConfig+0x30>
 8002946:	e0f8      	b.n	8002b3a <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002948:	6863      	ldr	r3, [r4, #4]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d00f      	beq.n	800296e <HAL_RCC_OscConfig+0x56>
 800294e:	2b00      	cmp	r3, #0
 8002950:	d100      	bne.n	8002954 <HAL_RCC_OscConfig+0x3c>
 8002952:	e11e      	b.n	8002b92 <HAL_RCC_OscConfig+0x27a>
 8002954:	2b05      	cmp	r3, #5
 8002956:	d100      	bne.n	800295a <HAL_RCC_OscConfig+0x42>
 8002958:	e1a7      	b.n	8002caa <HAL_RCC_OscConfig+0x392>
 800295a:	4bb9      	ldr	r3, [pc, #740]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
 800295c:	49b9      	ldr	r1, [pc, #740]	; (8002c44 <HAL_RCC_OscConfig+0x32c>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	400a      	ands	r2, r1
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	49b8      	ldr	r1, [pc, #736]	; (8002c48 <HAL_RCC_OscConfig+0x330>)
 8002968:	400a      	ands	r2, r1
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e005      	b.n	800297a <HAL_RCC_OscConfig+0x62>
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	4ab3      	ldr	r2, [pc, #716]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
 8002972:	025b      	lsls	r3, r3, #9
 8002974:	6811      	ldr	r1, [r2, #0]
 8002976:	430b      	orrs	r3, r1
 8002978:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7fe fd3d 	bl	80013f8 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002980:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4faf      	ldr	r7, [pc, #700]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
 8002984:	02b6      	lsls	r6, r6, #10
 8002986:	e005      	b.n	8002994 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002988:	f7fe fd36 	bl	80013f8 <HAL_GetTick>
 800298c:	1b40      	subs	r0, r0, r5
 800298e:	2864      	cmp	r0, #100	; 0x64
 8002990:	d900      	bls.n	8002994 <HAL_RCC_OscConfig+0x7c>
 8002992:	e0fc      	b.n	8002b8e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	4233      	tst	r3, r6
 8002998:	d0f6      	beq.n	8002988 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	079a      	lsls	r2, r3, #30
 800299e:	d529      	bpl.n	80029f4 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029a0:	220c      	movs	r2, #12
 80029a2:	49a7      	ldr	r1, [pc, #668]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
 80029a4:	6848      	ldr	r0, [r1, #4]
 80029a6:	4202      	tst	r2, r0
 80029a8:	d100      	bne.n	80029ac <HAL_RCC_OscConfig+0x94>
 80029aa:	e0a6      	b.n	8002afa <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029ac:	6848      	ldr	r0, [r1, #4]
 80029ae:	4002      	ands	r2, r0
 80029b0:	2a08      	cmp	r2, #8
 80029b2:	d100      	bne.n	80029b6 <HAL_RCC_OscConfig+0x9e>
 80029b4:	e09d      	b.n	8002af2 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029b6:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b8:	4da1      	ldr	r5, [pc, #644]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d100      	bne.n	80029c0 <HAL_RCC_OscConfig+0xa8>
 80029be:	e11f      	b.n	8002c00 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 80029c0:	2201      	movs	r2, #1
 80029c2:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c4:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 80029c6:	4313      	orrs	r3, r2
 80029c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80029ca:	f7fe fd15 	bl	80013f8 <HAL_GetTick>
 80029ce:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d0:	e005      	b.n	80029de <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d2:	f7fe fd11 	bl	80013f8 <HAL_GetTick>
 80029d6:	1b80      	subs	r0, r0, r6
 80029d8:	2802      	cmp	r0, #2
 80029da:	d900      	bls.n	80029de <HAL_RCC_OscConfig+0xc6>
 80029dc:	e0d7      	b.n	8002b8e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029de:	682b      	ldr	r3, [r5, #0]
 80029e0:	421f      	tst	r7, r3
 80029e2:	d0f6      	beq.n	80029d2 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e4:	21f8      	movs	r1, #248	; 0xf8
 80029e6:	682a      	ldr	r2, [r5, #0]
 80029e8:	6923      	ldr	r3, [r4, #16]
 80029ea:	438a      	bics	r2, r1
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4313      	orrs	r3, r2
 80029f0:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	071a      	lsls	r2, r3, #28
 80029f6:	d42d      	bmi.n	8002a54 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f8:	075a      	lsls	r2, r3, #29
 80029fa:	d544      	bpl.n	8002a86 <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fc:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80029fe:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a00:	4b8f      	ldr	r3, [pc, #572]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
 8002a02:	0552      	lsls	r2, r2, #21
 8002a04:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002a06:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a08:	4211      	tst	r1, r2
 8002a0a:	d108      	bne.n	8002a1e <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0c:	69d9      	ldr	r1, [r3, #28]
 8002a0e:	4311      	orrs	r1, r2
 8002a10:	61d9      	str	r1, [r3, #28]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	4013      	ands	r3, r2
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1e:	2780      	movs	r7, #128	; 0x80
 8002a20:	4e8a      	ldr	r6, [pc, #552]	; (8002c4c <HAL_RCC_OscConfig+0x334>)
 8002a22:	007f      	lsls	r7, r7, #1
 8002a24:	6833      	ldr	r3, [r6, #0]
 8002a26:	423b      	tst	r3, r7
 8002a28:	d100      	bne.n	8002a2c <HAL_RCC_OscConfig+0x114>
 8002a2a:	e094      	b.n	8002b56 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a2c:	68a3      	ldr	r3, [r4, #8]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d100      	bne.n	8002a34 <HAL_RCC_OscConfig+0x11c>
 8002a32:	e0f8      	b.n	8002c26 <HAL_RCC_OscConfig+0x30e>
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d100      	bne.n	8002a3a <HAL_RCC_OscConfig+0x122>
 8002a38:	e0c4      	b.n	8002bc4 <HAL_RCC_OscConfig+0x2ac>
 8002a3a:	2b05      	cmp	r3, #5
 8002a3c:	d100      	bne.n	8002a40 <HAL_RCC_OscConfig+0x128>
 8002a3e:	e140      	b.n	8002cc2 <HAL_RCC_OscConfig+0x3aa>
 8002a40:	2101      	movs	r1, #1
 8002a42:	4b7f      	ldr	r3, [pc, #508]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
 8002a44:	6a1a      	ldr	r2, [r3, #32]
 8002a46:	438a      	bics	r2, r1
 8002a48:	621a      	str	r2, [r3, #32]
 8002a4a:	6a1a      	ldr	r2, [r3, #32]
 8002a4c:	3103      	adds	r1, #3
 8002a4e:	438a      	bics	r2, r1
 8002a50:	621a      	str	r2, [r3, #32]
 8002a52:	e0ec      	b.n	8002c2e <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a54:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8002a56:	4d7a      	ldr	r5, [pc, #488]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d05b      	beq.n	8002b14 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a60:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8002a62:	4313      	orrs	r3, r2
 8002a64:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002a66:	f7fe fcc7 	bl	80013f8 <HAL_GetTick>
 8002a6a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6c:	e005      	b.n	8002a7a <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6e:	f7fe fcc3 	bl	80013f8 <HAL_GetTick>
 8002a72:	1b80      	subs	r0, r0, r6
 8002a74:	2802      	cmp	r0, #2
 8002a76:	d900      	bls.n	8002a7a <HAL_RCC_OscConfig+0x162>
 8002a78:	e089      	b.n	8002b8e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002a7c:	421f      	tst	r7, r3
 8002a7e:	d0f6      	beq.n	8002a6e <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	075a      	lsls	r2, r3, #29
 8002a84:	d4ba      	bmi.n	80029fc <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002a86:	06db      	lsls	r3, r3, #27
 8002a88:	d512      	bpl.n	8002ab0 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002a8a:	6963      	ldr	r3, [r4, #20]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d100      	bne.n	8002a92 <HAL_RCC_OscConfig+0x17a>
 8002a90:	e13d      	b.n	8002d0e <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a92:	3305      	adds	r3, #5
 8002a94:	d000      	beq.n	8002a98 <HAL_RCC_OscConfig+0x180>
 8002a96:	e0e9      	b.n	8002c6c <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a98:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a9a:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a9c:	4a68      	ldr	r2, [pc, #416]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
 8002a9e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002aa0:	438b      	bics	r3, r1
 8002aa2:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002aa4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002aa6:	69a3      	ldr	r3, [r4, #24]
 8002aa8:	4381      	bics	r1, r0
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	430b      	orrs	r3, r1
 8002aae:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab0:	6a23      	ldr	r3, [r4, #32]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d01b      	beq.n	8002aee <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab6:	220c      	movs	r2, #12
 8002ab8:	4d61      	ldr	r5, [pc, #388]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
 8002aba:	6869      	ldr	r1, [r5, #4]
 8002abc:	400a      	ands	r2, r1
 8002abe:	2a08      	cmp	r2, #8
 8002ac0:	d100      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x1ac>
 8002ac2:	e108      	b.n	8002cd6 <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d100      	bne.n	8002aca <HAL_RCC_OscConfig+0x1b2>
 8002ac8:	e13f      	b.n	8002d4a <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aca:	682b      	ldr	r3, [r5, #0]
 8002acc:	4a60      	ldr	r2, [pc, #384]	; (8002c50 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ace:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fc90 	bl	80013f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad8:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8002ada:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002adc:	e004      	b.n	8002ae8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ade:	f7fe fc8b 	bl	80013f8 <HAL_GetTick>
 8002ae2:	1b00      	subs	r0, r0, r4
 8002ae4:	2802      	cmp	r0, #2
 8002ae6:	d852      	bhi.n	8002b8e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae8:	682b      	ldr	r3, [r5, #0]
 8002aea:	4233      	tst	r3, r6
 8002aec:	d1f7      	bne.n	8002ade <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 8002aee:	2000      	movs	r0, #0
 8002af0:	e00b      	b.n	8002b0a <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002af2:	684a      	ldr	r2, [r1, #4]
 8002af4:	03d2      	lsls	r2, r2, #15
 8002af6:	d500      	bpl.n	8002afa <HAL_RCC_OscConfig+0x1e2>
 8002af8:	e75d      	b.n	80029b6 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afa:	4a51      	ldr	r2, [pc, #324]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	0792      	lsls	r2, r2, #30
 8002b00:	d539      	bpl.n	8002b76 <HAL_RCC_OscConfig+0x25e>
 8002b02:	68e2      	ldr	r2, [r4, #12]
 8002b04:	2a01      	cmp	r2, #1
 8002b06:	d036      	beq.n	8002b76 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8002b08:	2001      	movs	r0, #1
}
 8002b0a:	b003      	add	sp, #12
 8002b0c:	bcc0      	pop	{r6, r7}
 8002b0e:	46b9      	mov	r9, r7
 8002b10:	46b0      	mov	r8, r6
 8002b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8002b14:	2201      	movs	r2, #1
 8002b16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b18:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8002b1a:	4393      	bics	r3, r2
 8002b1c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002b1e:	f7fe fc6b 	bl	80013f8 <HAL_GetTick>
 8002b22:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b24:	e004      	b.n	8002b30 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b26:	f7fe fc67 	bl	80013f8 <HAL_GetTick>
 8002b2a:	1b80      	subs	r0, r0, r6
 8002b2c:	2802      	cmp	r0, #2
 8002b2e:	d82e      	bhi.n	8002b8e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b30:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002b32:	421f      	tst	r7, r3
 8002b34:	d1f7      	bne.n	8002b26 <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	e7a3      	b.n	8002a82 <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b3a:	6842      	ldr	r2, [r0, #4]
 8002b3c:	03d2      	lsls	r2, r2, #15
 8002b3e:	d400      	bmi.n	8002b42 <HAL_RCC_OscConfig+0x22a>
 8002b40:	e702      	b.n	8002948 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b42:	4a3f      	ldr	r2, [pc, #252]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	0392      	lsls	r2, r2, #14
 8002b48:	d400      	bmi.n	8002b4c <HAL_RCC_OscConfig+0x234>
 8002b4a:	e727      	b.n	800299c <HAL_RCC_OscConfig+0x84>
 8002b4c:	6862      	ldr	r2, [r4, #4]
 8002b4e:	2a00      	cmp	r2, #0
 8002b50:	d000      	beq.n	8002b54 <HAL_RCC_OscConfig+0x23c>
 8002b52:	e723      	b.n	800299c <HAL_RCC_OscConfig+0x84>
 8002b54:	e7d8      	b.n	8002b08 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b56:	6833      	ldr	r3, [r6, #0]
 8002b58:	433b      	orrs	r3, r7
 8002b5a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002b5c:	f7fe fc4c 	bl	80013f8 <HAL_GetTick>
 8002b60:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b62:	e004      	b.n	8002b6e <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b64:	f7fe fc48 	bl	80013f8 <HAL_GetTick>
 8002b68:	1b40      	subs	r0, r0, r5
 8002b6a:	2864      	cmp	r0, #100	; 0x64
 8002b6c:	d80f      	bhi.n	8002b8e <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6e:	6833      	ldr	r3, [r6, #0]
 8002b70:	423b      	tst	r3, r7
 8002b72:	d0f7      	beq.n	8002b64 <HAL_RCC_OscConfig+0x24c>
 8002b74:	e75a      	b.n	8002a2c <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b76:	25f8      	movs	r5, #248	; 0xf8
 8002b78:	4831      	ldr	r0, [pc, #196]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
 8002b7a:	6922      	ldr	r2, [r4, #16]
 8002b7c:	6801      	ldr	r1, [r0, #0]
 8002b7e:	00d2      	lsls	r2, r2, #3
 8002b80:	43a9      	bics	r1, r5
 8002b82:	430a      	orrs	r2, r1
 8002b84:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b86:	071a      	lsls	r2, r3, #28
 8002b88:	d400      	bmi.n	8002b8c <HAL_RCC_OscConfig+0x274>
 8002b8a:	e735      	b.n	80029f8 <HAL_RCC_OscConfig+0xe0>
 8002b8c:	e762      	b.n	8002a54 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 8002b8e:	2003      	movs	r0, #3
 8002b90:	e7bb      	b.n	8002b0a <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b92:	4d2b      	ldr	r5, [pc, #172]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
 8002b94:	4a2b      	ldr	r2, [pc, #172]	; (8002c44 <HAL_RCC_OscConfig+0x32c>)
 8002b96:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b98:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	602b      	str	r3, [r5, #0]
 8002b9e:	682b      	ldr	r3, [r5, #0]
 8002ba0:	4a29      	ldr	r2, [pc, #164]	; (8002c48 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba2:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fc26 	bl	80013f8 <HAL_GetTick>
 8002bac:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bae:	e004      	b.n	8002bba <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7fe fc22 	bl	80013f8 <HAL_GetTick>
 8002bb4:	1b80      	subs	r0, r0, r6
 8002bb6:	2864      	cmp	r0, #100	; 0x64
 8002bb8:	d8e9      	bhi.n	8002b8e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	682b      	ldr	r3, [r5, #0]
 8002bbc:	423b      	tst	r3, r7
 8002bbe:	d1f7      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc0:	6823      	ldr	r3, [r4, #0]
 8002bc2:	e6eb      	b.n	800299c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	4e1e      	ldr	r6, [pc, #120]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	4d22      	ldr	r5, [pc, #136]	; (8002c54 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bca:	6a33      	ldr	r3, [r6, #32]
 8002bcc:	4393      	bics	r3, r2
 8002bce:	6233      	str	r3, [r6, #32]
 8002bd0:	6a33      	ldr	r3, [r6, #32]
 8002bd2:	3203      	adds	r2, #3
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8002bd8:	f7fe fc0e 	bl	80013f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bdc:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8002bde:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be0:	4698      	mov	r8, r3
 8002be2:	e004      	b.n	8002bee <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7fe fc08 	bl	80013f8 <HAL_GetTick>
 8002be8:	1bc0      	subs	r0, r0, r7
 8002bea:	42a8      	cmp	r0, r5
 8002bec:	d8cf      	bhi.n	8002b8e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bee:	4642      	mov	r2, r8
 8002bf0:	6a33      	ldr	r3, [r6, #32]
 8002bf2:	421a      	tst	r2, r3
 8002bf4:	d1f6      	bne.n	8002be4 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d04f      	beq.n	8002c9c <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	e742      	b.n	8002a86 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8002c00:	2201      	movs	r2, #1
 8002c02:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c04:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8002c06:	4393      	bics	r3, r2
 8002c08:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c0a:	f7fe fbf5 	bl	80013f8 <HAL_GetTick>
 8002c0e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c10:	e004      	b.n	8002c1c <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c12:	f7fe fbf1 	bl	80013f8 <HAL_GetTick>
 8002c16:	1b80      	subs	r0, r0, r6
 8002c18:	2802      	cmp	r0, #2
 8002c1a:	d8b8      	bhi.n	8002b8e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1c:	682b      	ldr	r3, [r5, #0]
 8002c1e:	421f      	tst	r7, r3
 8002c20:	d1f7      	bne.n	8002c12 <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	e6e6      	b.n	80029f4 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c26:	4906      	ldr	r1, [pc, #24]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
 8002c28:	6a0a      	ldr	r2, [r1, #32]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8002c2e:	f7fe fbe3 	bl	80013f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c32:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8002c34:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c36:	4698      	mov	r8, r3
 8002c38:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3a:	4d06      	ldr	r5, [pc, #24]	; (8002c54 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3c:	e011      	b.n	8002c62 <HAL_RCC_OscConfig+0x34a>
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	40021000 	.word	0x40021000
 8002c44:	fffeffff 	.word	0xfffeffff
 8002c48:	fffbffff 	.word	0xfffbffff
 8002c4c:	40007000 	.word	0x40007000
 8002c50:	feffffff 	.word	0xfeffffff
 8002c54:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c58:	f7fe fbce 	bl	80013f8 <HAL_GetTick>
 8002c5c:	1b80      	subs	r0, r0, r6
 8002c5e:	42a8      	cmp	r0, r5
 8002c60:	d895      	bhi.n	8002b8e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c62:	4643      	mov	r3, r8
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	421f      	tst	r7, r3
 8002c68:	d0f6      	beq.n	8002c58 <HAL_RCC_OscConfig+0x340>
 8002c6a:	e7c4      	b.n	8002bf6 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	4d53      	ldr	r5, [pc, #332]	; (8002dbc <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c70:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c72:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002c74:	4313      	orrs	r3, r2
 8002c76:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002c78:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002c7a:	3a03      	subs	r2, #3
 8002c7c:	4393      	bics	r3, r2
 8002c7e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002c80:	f7fe fbba 	bl	80013f8 <HAL_GetTick>
 8002c84:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c86:	e005      	b.n	8002c94 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c88:	f7fe fbb6 	bl	80013f8 <HAL_GetTick>
 8002c8c:	1b80      	subs	r0, r0, r6
 8002c8e:	2802      	cmp	r0, #2
 8002c90:	d900      	bls.n	8002c94 <HAL_RCC_OscConfig+0x37c>
 8002c92:	e77c      	b.n	8002b8e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c94:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002c96:	421f      	tst	r7, r3
 8002c98:	d1f6      	bne.n	8002c88 <HAL_RCC_OscConfig+0x370>
 8002c9a:	e709      	b.n	8002ab0 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9c:	4a47      	ldr	r2, [pc, #284]	; (8002dbc <HAL_RCC_OscConfig+0x4a4>)
 8002c9e:	4948      	ldr	r1, [pc, #288]	; (8002dc0 <HAL_RCC_OscConfig+0x4a8>)
 8002ca0:	69d3      	ldr	r3, [r2, #28]
 8002ca2:	400b      	ands	r3, r1
 8002ca4:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	e6ed      	b.n	8002a86 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002caa:	2280      	movs	r2, #128	; 0x80
 8002cac:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <HAL_RCC_OscConfig+0x4a4>)
 8002cae:	02d2      	lsls	r2, r2, #11
 8002cb0:	6819      	ldr	r1, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	6819      	ldr	r1, [r3, #0]
 8002cba:	0252      	lsls	r2, r2, #9
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e65b      	b.n	800297a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc2:	2104      	movs	r1, #4
 8002cc4:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <HAL_RCC_OscConfig+0x4a4>)
 8002cc6:	6a1a      	ldr	r2, [r3, #32]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	621a      	str	r2, [r3, #32]
 8002ccc:	6a1a      	ldr	r2, [r3, #32]
 8002cce:	3903      	subs	r1, #3
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	621a      	str	r2, [r3, #32]
 8002cd4:	e7ab      	b.n	8002c2e <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d100      	bne.n	8002cdc <HAL_RCC_OscConfig+0x3c4>
 8002cda:	e715      	b.n	8002b08 <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cdc:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8002cde:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002ce2:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8002ce4:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 8002ce6:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce8:	4013      	ands	r3, r2
 8002cea:	428b      	cmp	r3, r1
 8002cec:	d000      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x3d8>
 8002cee:	e70c      	b.n	8002b0a <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002cf0:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002cf4:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	428b      	cmp	r3, r1
 8002cf8:	d000      	beq.n	8002cfc <HAL_RCC_OscConfig+0x3e4>
 8002cfa:	e706      	b.n	8002b0a <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002cfc:	23f0      	movs	r3, #240	; 0xf0
 8002cfe:	039b      	lsls	r3, r3, #14
 8002d00:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d04:	1ad2      	subs	r2, r2, r3
 8002d06:	1e53      	subs	r3, r2, #1
 8002d08:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 8002d0a:	b2d0      	uxtb	r0, r2
 8002d0c:	e6fd      	b.n	8002b0a <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d0e:	2104      	movs	r1, #4
 8002d10:	4d2a      	ldr	r5, [pc, #168]	; (8002dbc <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002d12:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d14:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002d16:	430a      	orrs	r2, r1
 8002d18:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8002d1a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002d20:	f7fe fb6a 	bl	80013f8 <HAL_GetTick>
 8002d24:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002d26:	e005      	b.n	8002d34 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d28:	f7fe fb66 	bl	80013f8 <HAL_GetTick>
 8002d2c:	1b80      	subs	r0, r0, r6
 8002d2e:	2802      	cmp	r0, #2
 8002d30:	d900      	bls.n	8002d34 <HAL_RCC_OscConfig+0x41c>
 8002d32:	e72c      	b.n	8002b8e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002d34:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002d36:	421f      	tst	r7, r3
 8002d38:	d0f6      	beq.n	8002d28 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d3a:	21f8      	movs	r1, #248	; 0xf8
 8002d3c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002d3e:	69a3      	ldr	r3, [r4, #24]
 8002d40:	438a      	bics	r2, r1
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4313      	orrs	r3, r2
 8002d46:	636b      	str	r3, [r5, #52]	; 0x34
 8002d48:	e6b2      	b.n	8002ab0 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8002d4a:	682b      	ldr	r3, [r5, #0]
 8002d4c:	4a1d      	ldr	r2, [pc, #116]	; (8002dc4 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d4e:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002d50:	4013      	ands	r3, r2
 8002d52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d54:	f7fe fb50 	bl	80013f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d58:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8002d5a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5c:	e005      	b.n	8002d6a <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5e:	f7fe fb4b 	bl	80013f8 <HAL_GetTick>
 8002d62:	1b80      	subs	r0, r0, r6
 8002d64:	2802      	cmp	r0, #2
 8002d66:	d900      	bls.n	8002d6a <HAL_RCC_OscConfig+0x452>
 8002d68:	e711      	b.n	8002b8e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6a:	682b      	ldr	r3, [r5, #0]
 8002d6c:	423b      	tst	r3, r7
 8002d6e:	d1f6      	bne.n	8002d5e <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d70:	220f      	movs	r2, #15
 8002d72:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d74:	4e11      	ldr	r6, [pc, #68]	; (8002dbc <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d76:	4393      	bics	r3, r2
 8002d78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002d7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002d80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d82:	686a      	ldr	r2, [r5, #4]
 8002d84:	430b      	orrs	r3, r1
 8002d86:	4910      	ldr	r1, [pc, #64]	; (8002dc8 <HAL_RCC_OscConfig+0x4b0>)
 8002d88:	400a      	ands	r2, r1
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	682a      	ldr	r2, [r5, #0]
 8002d92:	045b      	lsls	r3, r3, #17
 8002d94:	4313      	orrs	r3, r2
 8002d96:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d98:	f7fe fb2e 	bl	80013f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d9c:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8002d9e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da0:	04ad      	lsls	r5, r5, #18
 8002da2:	e005      	b.n	8002db0 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da4:	f7fe fb28 	bl	80013f8 <HAL_GetTick>
 8002da8:	1b00      	subs	r0, r0, r4
 8002daa:	2802      	cmp	r0, #2
 8002dac:	d900      	bls.n	8002db0 <HAL_RCC_OscConfig+0x498>
 8002dae:	e6ee      	b.n	8002b8e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002db0:	6833      	ldr	r3, [r6, #0]
 8002db2:	422b      	tst	r3, r5
 8002db4:	d0f6      	beq.n	8002da4 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 8002db6:	2000      	movs	r0, #0
 8002db8:	e6a7      	b.n	8002b0a <HAL_RCC_OscConfig+0x1f2>
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	efffffff 	.word	0xefffffff
 8002dc4:	feffffff 	.word	0xfeffffff
 8002dc8:	ffc2ffff 	.word	0xffc2ffff

08002dcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dce:	46ce      	mov	lr, r9
 8002dd0:	4647      	mov	r7, r8
 8002dd2:	0004      	movs	r4, r0
 8002dd4:	000d      	movs	r5, r1
 8002dd6:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd8:	2800      	cmp	r0, #0
 8002dda:	d00d      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	2301      	movs	r3, #1
 8002dde:	494a      	ldr	r1, [pc, #296]	; (8002f08 <HAL_RCC_ClockConfig+0x13c>)
 8002de0:	680a      	ldr	r2, [r1, #0]
 8002de2:	401a      	ands	r2, r3
 8002de4:	42aa      	cmp	r2, r5
 8002de6:	d20c      	bcs.n	8002e02 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de8:	680a      	ldr	r2, [r1, #0]
 8002dea:	439a      	bics	r2, r3
 8002dec:	432a      	orrs	r2, r5
 8002dee:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df0:	680a      	ldr	r2, [r1, #0]
 8002df2:	4013      	ands	r3, r2
 8002df4:	42ab      	cmp	r3, r5
 8002df6:	d004      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8002df8:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8002dfa:	bcc0      	pop	{r6, r7}
 8002dfc:	46b9      	mov	r9, r7
 8002dfe:	46b0      	mov	r8, r6
 8002e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	079a      	lsls	r2, r3, #30
 8002e06:	d50e      	bpl.n	8002e26 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	075a      	lsls	r2, r3, #29
 8002e0a:	d505      	bpl.n	8002e18 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e0c:	22e0      	movs	r2, #224	; 0xe0
 8002e0e:	493f      	ldr	r1, [pc, #252]	; (8002f0c <HAL_RCC_ClockConfig+0x140>)
 8002e10:	00d2      	lsls	r2, r2, #3
 8002e12:	6848      	ldr	r0, [r1, #4]
 8002e14:	4302      	orrs	r2, r0
 8002e16:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e18:	20f0      	movs	r0, #240	; 0xf0
 8002e1a:	493c      	ldr	r1, [pc, #240]	; (8002f0c <HAL_RCC_ClockConfig+0x140>)
 8002e1c:	684a      	ldr	r2, [r1, #4]
 8002e1e:	4382      	bics	r2, r0
 8002e20:	68a0      	ldr	r0, [r4, #8]
 8002e22:	4302      	orrs	r2, r0
 8002e24:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e26:	07db      	lsls	r3, r3, #31
 8002e28:	d522      	bpl.n	8002e70 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	4b38      	ldr	r3, [pc, #224]	; (8002f0c <HAL_RCC_ClockConfig+0x140>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e2c:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e30:	2a01      	cmp	r2, #1
 8002e32:	d05b      	beq.n	8002eec <HAL_RCC_ClockConfig+0x120>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e34:	2a02      	cmp	r2, #2
 8002e36:	d056      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x11a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	079b      	lsls	r3, r3, #30
 8002e3a:	d5dd      	bpl.n	8002df8 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e3c:	2103      	movs	r1, #3
 8002e3e:	4e33      	ldr	r6, [pc, #204]	; (8002f0c <HAL_RCC_ClockConfig+0x140>)
 8002e40:	6873      	ldr	r3, [r6, #4]
 8002e42:	438b      	bics	r3, r1
 8002e44:	4313      	orrs	r3, r2
 8002e46:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002e48:	f7fe fad6 	bl	80013f8 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4c:	230c      	movs	r3, #12
 8002e4e:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	4b2f      	ldr	r3, [pc, #188]	; (8002f10 <HAL_RCC_ClockConfig+0x144>)
    tickstart = HAL_GetTick();
 8002e52:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e54:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e56:	e004      	b.n	8002e62 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e58:	f7fe face 	bl	80013f8 <HAL_GetTick>
 8002e5c:	1bc0      	subs	r0, r0, r7
 8002e5e:	4548      	cmp	r0, r9
 8002e60:	d847      	bhi.n	8002ef2 <HAL_RCC_ClockConfig+0x126>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	4643      	mov	r3, r8
 8002e64:	6872      	ldr	r2, [r6, #4]
 8002e66:	401a      	ands	r2, r3
 8002e68:	6863      	ldr	r3, [r4, #4]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d1f3      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e70:	2101      	movs	r1, #1
 8002e72:	4a25      	ldr	r2, [pc, #148]	; (8002f08 <HAL_RCC_ClockConfig+0x13c>)
 8002e74:	6813      	ldr	r3, [r2, #0]
 8002e76:	400b      	ands	r3, r1
 8002e78:	42ab      	cmp	r3, r5
 8002e7a:	d905      	bls.n	8002e88 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7c:	6813      	ldr	r3, [r2, #0]
 8002e7e:	438b      	bics	r3, r1
 8002e80:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	6813      	ldr	r3, [r2, #0]
 8002e84:	4219      	tst	r1, r3
 8002e86:	d1b7      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e88:	6823      	ldr	r3, [r4, #0]
 8002e8a:	075b      	lsls	r3, r3, #29
 8002e8c:	d506      	bpl.n	8002e9c <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e8e:	4a1f      	ldr	r2, [pc, #124]	; (8002f0c <HAL_RCC_ClockConfig+0x140>)
 8002e90:	4920      	ldr	r1, [pc, #128]	; (8002f14 <HAL_RCC_ClockConfig+0x148>)
 8002e92:	6853      	ldr	r3, [r2, #4]
 8002e94:	400b      	ands	r3, r1
 8002e96:	68e1      	ldr	r1, [r4, #12]
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	6053      	str	r3, [r2, #4]
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e9c:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8002e9e:	491b      	ldr	r1, [pc, #108]	; (8002f0c <HAL_RCC_ClockConfig+0x140>)
 8002ea0:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d00e      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0xfa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ea8:	481b      	ldr	r0, [pc, #108]	; (8002f18 <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002eaa:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_RCC_ClockConfig+0x140>)
 8002eac:	4a1b      	ldr	r2, [pc, #108]	; (8002f1c <HAL_RCC_ClockConfig+0x150>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	491b      	ldr	r1, [pc, #108]	; (8002f20 <HAL_RCC_ClockConfig+0x154>)
 8002eb2:	061b      	lsls	r3, r3, #24
 8002eb4:	0f1b      	lsrs	r3, r3, #28
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
 8002eb8:	40d8      	lsrs	r0, r3
 8002eba:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002ebc:	2003      	movs	r0, #3
 8002ebe:	f7fe fa59 	bl	8001374 <HAL_InitTick>
  return HAL_OK;
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	e799      	b.n	8002dfa <HAL_RCC_ClockConfig+0x2e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002ec6:	250f      	movs	r5, #15
 8002ec8:	4816      	ldr	r0, [pc, #88]	; (8002f24 <HAL_RCC_ClockConfig+0x158>)
 8002eca:	0c93      	lsrs	r3, r2, #18
 8002ecc:	402b      	ands	r3, r5
 8002ece:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002ed0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ed2:	03d2      	lsls	r2, r2, #15
 8002ed4:	d50f      	bpl.n	8002ef6 <HAL_RCC_ClockConfig+0x12a>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002ed6:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <HAL_RCC_ClockConfig+0x15c>)
 8002ed8:	400d      	ands	r5, r1
 8002eda:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002edc:	480e      	ldr	r0, [pc, #56]	; (8002f18 <HAL_RCC_ClockConfig+0x14c>)
 8002ede:	f7fd f913 	bl	8000108 <__udivsi3>
 8002ee2:	4360      	muls	r0, r4
 8002ee4:	e7e1      	b.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee6:	019b      	lsls	r3, r3, #6
 8002ee8:	d4a8      	bmi.n	8002e3c <HAL_RCC_ClockConfig+0x70>
 8002eea:	e785      	b.n	8002df8 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eec:	039b      	lsls	r3, r3, #14
 8002eee:	d4a5      	bmi.n	8002e3c <HAL_RCC_ClockConfig+0x70>
 8002ef0:	e782      	b.n	8002df8 <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8002ef2:	2003      	movs	r0, #3
 8002ef4:	e781      	b.n	8002dfa <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ef6:	0163      	lsls	r3, r4, #5
 8002ef8:	1b1b      	subs	r3, r3, r4
 8002efa:	0198      	lsls	r0, r3, #6
 8002efc:	1ac0      	subs	r0, r0, r3
 8002efe:	00c0      	lsls	r0, r0, #3
 8002f00:	1900      	adds	r0, r0, r4
 8002f02:	0200      	lsls	r0, r0, #8
 8002f04:	e7d1      	b.n	8002eaa <HAL_RCC_ClockConfig+0xde>
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	40022000 	.word	0x40022000
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	00001388 	.word	0x00001388
 8002f14:	fffff8ff 	.word	0xfffff8ff
 8002f18:	007a1200 	.word	0x007a1200
 8002f1c:	08005cec 	.word	0x08005cec
 8002f20:	20000000 	.word	0x20000000
 8002f24:	08005d04 	.word	0x08005d04
 8002f28:	08005d14 	.word	0x08005d14

08002f2c <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8002f2c:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8002f2e:	4910      	ldr	r1, [pc, #64]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x44>)
{
 8002f30:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8002f32:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d001      	beq.n	8002f3e <HAL_RCC_GetSysClockFreq+0x12>
      sysclockfreq = HSE_VALUE;
 8002f3a:	480e      	ldr	r0, [pc, #56]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002f3c:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002f3e:	250f      	movs	r5, #15
 8002f40:	480d      	ldr	r0, [pc, #52]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x4c>)
 8002f42:	0c93      	lsrs	r3, r2, #18
 8002f44:	402b      	ands	r3, r5
 8002f46:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002f48:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f4a:	03d2      	lsls	r2, r2, #15
 8002f4c:	d507      	bpl.n	8002f5e <HAL_RCC_GetSysClockFreq+0x32>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x50>)
 8002f50:	400d      	ands	r5, r1
 8002f52:	5d59      	ldrb	r1, [r3, r5]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f54:	4807      	ldr	r0, [pc, #28]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x48>)
 8002f56:	f7fd f8d7 	bl	8000108 <__udivsi3>
 8002f5a:	4360      	muls	r0, r4
 8002f5c:	e7ee      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x10>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f5e:	0162      	lsls	r2, r4, #5
 8002f60:	1b12      	subs	r2, r2, r4
 8002f62:	0193      	lsls	r3, r2, #6
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	191b      	adds	r3, r3, r4
 8002f6a:	0218      	lsls	r0, r3, #8
 8002f6c:	e7e6      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x10>
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	40021000 	.word	0x40021000
 8002f74:	007a1200 	.word	0x007a1200
 8002f78:	08005d04 	.word	0x08005d04
 8002f7c:	08005d14 	.word	0x08005d14

08002f80 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8002f82:	4a05      	ldr	r2, [pc, #20]	; (8002f98 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4905      	ldr	r1, [pc, #20]	; (8002f9c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002f88:	055b      	lsls	r3, r3, #21
 8002f8a:	0f5b      	lsrs	r3, r3, #29
 8002f8c:	5ccb      	ldrb	r3, [r1, r3]
 8002f8e:	6810      	ldr	r0, [r2, #0]
 8002f90:	40d8      	lsrs	r0, r3
}    
 8002f92:	4770      	bx	lr
 8002f94:	40021000 	.word	0x40021000
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	08005cfc 	.word	0x08005cfc

08002fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa2:	46ce      	mov	lr, r9
 8002fa4:	4647      	mov	r7, r8
 8002fa6:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fa8:	6803      	ldr	r3, [r0, #0]
{
 8002faa:	0004      	movs	r4, r0
 8002fac:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fae:	03da      	lsls	r2, r3, #15
 8002fb0:	d530      	bpl.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb2:	2280      	movs	r2, #128	; 0x80
 8002fb4:	4b43      	ldr	r3, [pc, #268]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002fb6:	0552      	lsls	r2, r2, #21
 8002fb8:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002fba:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fbc:	4211      	tst	r1, r2
 8002fbe:	d041      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc0:	2680      	movs	r6, #128	; 0x80
 8002fc2:	4d41      	ldr	r5, [pc, #260]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8002fc4:	0076      	lsls	r6, r6, #1
 8002fc6:	682b      	ldr	r3, [r5, #0]
 8002fc8:	4233      	tst	r3, r6
 8002fca:	d049      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fcc:	4d3d      	ldr	r5, [pc, #244]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002fce:	23c0      	movs	r3, #192	; 0xc0
 8002fd0:	6a2a      	ldr	r2, [r5, #32]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	0010      	movs	r0, r2
 8002fd6:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fd8:	421a      	tst	r2, r3
 8002fda:	d063      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002fdc:	6861      	ldr	r1, [r4, #4]
 8002fde:	400b      	ands	r3, r1
 8002fe0:	4283      	cmp	r3, r0
 8002fe2:	d00e      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fe4:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fe6:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fe8:	6a2e      	ldr	r6, [r5, #32]
 8002fea:	0240      	lsls	r0, r0, #9
 8002fec:	4330      	orrs	r0, r6
 8002fee:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff0:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ff2:	4a36      	ldr	r2, [pc, #216]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff4:	4e36      	ldr	r6, [pc, #216]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ff6:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff8:	4030      	ands	r0, r6
 8002ffa:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ffc:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ffe:	07db      	lsls	r3, r3, #31
 8003000:	d43f      	bmi.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003002:	4a30      	ldr	r2, [pc, #192]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003004:	4831      	ldr	r0, [pc, #196]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003006:	6a13      	ldr	r3, [r2, #32]
 8003008:	4003      	ands	r3, r0
 800300a:	430b      	orrs	r3, r1
 800300c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800300e:	2f01      	cmp	r7, #1
 8003010:	d051      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	07da      	lsls	r2, r3, #31
 8003016:	d506      	bpl.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003018:	2003      	movs	r0, #3
 800301a:	492a      	ldr	r1, [pc, #168]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800301c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800301e:	4382      	bics	r2, r0
 8003020:	68a0      	ldr	r0, [r4, #8]
 8003022:	4302      	orrs	r2, r0
 8003024:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003026:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003028:	069b      	lsls	r3, r3, #26
 800302a:	d506      	bpl.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800302c:	2110      	movs	r1, #16
 800302e:	4a25      	ldr	r2, [pc, #148]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003030:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003032:	438b      	bics	r3, r1
 8003034:	68e1      	ldr	r1, [r4, #12]
 8003036:	430b      	orrs	r3, r1
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
}
 800303a:	b003      	add	sp, #12
 800303c:	bcc0      	pop	{r6, r7}
 800303e:	46b9      	mov	r9, r7
 8003040:	46b0      	mov	r8, r6
 8003042:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003044:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003048:	4d1f      	ldr	r5, [pc, #124]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800304a:	4311      	orrs	r1, r2
 800304c:	61d9      	str	r1, [r3, #28]
 800304e:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003050:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8003052:	4013      	ands	r3, r2
 8003054:	9301      	str	r3, [sp, #4]
 8003056:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003058:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 800305a:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305c:	4233      	tst	r3, r6
 800305e:	d1b5      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003060:	682b      	ldr	r3, [r5, #0]
 8003062:	4333      	orrs	r3, r6
 8003064:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003066:	f7fe f9c7 	bl	80013f8 <HAL_GetTick>
 800306a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306c:	682b      	ldr	r3, [r5, #0]
 800306e:	4233      	tst	r3, r6
 8003070:	d1ac      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003072:	f7fe f9c1 	bl	80013f8 <HAL_GetTick>
 8003076:	4643      	mov	r3, r8
 8003078:	1ac0      	subs	r0, r0, r3
 800307a:	2864      	cmp	r0, #100	; 0x64
 800307c:	d9f6      	bls.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 800307e:	2003      	movs	r0, #3
 8003080:	e7db      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8003082:	f7fe f9b9 	bl	80013f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003086:	2302      	movs	r3, #2
 8003088:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 800308c:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003090:	e004      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fe f9b1 	bl	80013f8 <HAL_GetTick>
 8003096:	1b80      	subs	r0, r0, r6
 8003098:	4548      	cmp	r0, r9
 800309a:	d8f0      	bhi.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309c:	4642      	mov	r2, r8
 800309e:	6a2b      	ldr	r3, [r5, #32]
 80030a0:	421a      	tst	r2, r3
 80030a2:	d0f6      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a4:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80030a6:	4809      	ldr	r0, [pc, #36]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80030a8:	6a13      	ldr	r3, [r2, #32]
 80030aa:	6861      	ldr	r1, [r4, #4]
 80030ac:	4003      	ands	r3, r0
 80030ae:	430b      	orrs	r3, r1
 80030b0:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 80030b2:	2f01      	cmp	r7, #1
 80030b4:	d1ad      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b6:	69d3      	ldr	r3, [r2, #28]
 80030b8:	4907      	ldr	r1, [pc, #28]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80030ba:	400b      	ands	r3, r1
 80030bc:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	e7a8      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40007000 	.word	0x40007000
 80030cc:	fffffcff 	.word	0xfffffcff
 80030d0:	fffeffff 	.word	0xfffeffff
 80030d4:	00001388 	.word	0x00001388
 80030d8:	efffffff 	.word	0xefffffff

080030dc <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80030dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030de:	46d6      	mov	lr, sl
 80030e0:	464f      	mov	r7, r9
 80030e2:	4646      	mov	r6, r8
 80030e4:	b5c0      	push	{r6, r7, lr}
 80030e6:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80030e8:	466b      	mov	r3, sp
 80030ea:	1cdc      	adds	r4, r3, #3
 80030ec:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80030ee:	0016      	movs	r6, r2
 80030f0:	000f      	movs	r7, r1
  __IO uint8_t  tmpreg8 = 0;
 80030f2:	7023      	strb	r3, [r4, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80030f4:	4680      	mov	r8, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80030f6:	f7fe f97f 	bl	80013f8 <HAL_GetTick>
 80030fa:	19f6      	adds	r6, r6, r7
 80030fc:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 80030fe:	f7fe f97b 	bl	80013f8 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003102:	4643      	mov	r3, r8
 8003104:	681d      	ldr	r5, [r3, #0]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003106:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x104>)
  tmp_tickstart = HAL_GetTick();
 8003108:	4681      	mov	r9, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	009a      	lsls	r2, r3, #2
 800310e:	18d2      	adds	r2, r2, r3
 8003110:	00d3      	lsls	r3, r2, #3
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	0d1b      	lsrs	r3, r3, #20
 8003116:	4373      	muls	r3, r6
 8003118:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800311a:	23c0      	movs	r3, #192	; 0xc0
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	002a      	movs	r2, r5
 8003120:	469a      	mov	sl, r3
 8003122:	1c7b      	adds	r3, r7, #1
 8003124:	d112      	bne.n	800314c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x70>
 8003126:	21c0      	movs	r1, #192	; 0xc0
 8003128:	6893      	ldr	r3, [r2, #8]
 800312a:	00c9      	lsls	r1, r1, #3
 800312c:	420b      	tst	r3, r1
 800312e:	d006      	beq.n	800313e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003130:	7b2b      	ldrb	r3, [r5, #12]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	7023      	strb	r3, [r4, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003136:	7823      	ldrb	r3, [r4, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003138:	6893      	ldr	r3, [r2, #8]
 800313a:	420b      	tst	r3, r1
 800313c:	d1f8      	bne.n	8003130 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      }
      count--;
    }
  }

  return HAL_OK;
 800313e:	2000      	movs	r0, #0
}
 8003140:	b002      	add	sp, #8
 8003142:	bce0      	pop	{r5, r6, r7}
 8003144:	46ba      	mov	sl, r7
 8003146:	46b1      	mov	r9, r6
 8003148:	46a8      	mov	r8, r5
 800314a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 800314c:	6893      	ldr	r3, [r2, #8]
 800314e:	4652      	mov	r2, sl
 8003150:	4213      	tst	r3, r2
 8003152:	d0f4      	beq.n	800313e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
      tmpreg8 = *ptmpreg8;
 8003154:	7b2b      	ldrb	r3, [r5, #12]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	7023      	strb	r3, [r4, #0]
      UNUSED(tmpreg8);
 800315a:	7823      	ldrb	r3, [r4, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800315c:	f7fe f94c 	bl	80013f8 <HAL_GetTick>
 8003160:	464b      	mov	r3, r9
 8003162:	1ac0      	subs	r0, r0, r3
 8003164:	42b0      	cmp	r0, r6
 8003166:	d20a      	bcs.n	800317e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa2>
      if (count == 0U)
 8003168:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800316a:	1e5a      	subs	r2, r3, #1
 800316c:	4193      	sbcs	r3, r2
 800316e:	425b      	negs	r3, r3
 8003170:	401e      	ands	r6, r3
      count--;
 8003172:	9b01      	ldr	r3, [sp, #4]
 8003174:	3b01      	subs	r3, #1
 8003176:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003178:	4643      	mov	r3, r8
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	e7d1      	b.n	8003122 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x46>
 800317e:	4643      	mov	r3, r8
 8003180:	21e0      	movs	r1, #224	; 0xe0
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003188:	4641      	mov	r1, r8
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800318a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800318c:	2282      	movs	r2, #130	; 0x82
 800318e:	6849      	ldr	r1, [r1, #4]
 8003190:	0052      	lsls	r2, r2, #1
 8003192:	4291      	cmp	r1, r2
 8003194:	d015      	beq.n	80031c2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003196:	4642      	mov	r2, r8
 8003198:	2180      	movs	r1, #128	; 0x80
 800319a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800319c:	0189      	lsls	r1, r1, #6
 800319e:	428a      	cmp	r2, r1
 80031a0:	d106      	bne.n	80031b0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>
          SPI_RESET_CRC(hspi);
 80031a2:	6819      	ldr	r1, [r3, #0]
 80031a4:	480f      	ldr	r0, [pc, #60]	; (80031e4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
 80031a6:	4001      	ands	r1, r0
 80031a8:	6019      	str	r1, [r3, #0]
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80031b0:	235d      	movs	r3, #93	; 0x5d
 80031b2:	2201      	movs	r2, #1
 80031b4:	4641      	mov	r1, r8
 80031b6:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 80031b8:	2200      	movs	r2, #0
 80031ba:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 80031bc:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80031be:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 80031c0:	e7be      	b.n	8003140 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x64>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031c2:	4642      	mov	r2, r8
 80031c4:	2180      	movs	r1, #128	; 0x80
 80031c6:	6892      	ldr	r2, [r2, #8]
 80031c8:	0209      	lsls	r1, r1, #8
 80031ca:	428a      	cmp	r2, r1
 80031cc:	d003      	beq.n	80031d6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfa>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031ce:	2180      	movs	r1, #128	; 0x80
 80031d0:	00c9      	lsls	r1, r1, #3
 80031d2:	428a      	cmp	r2, r1
 80031d4:	d1df      	bne.n	8003196 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
          __HAL_SPI_DISABLE(hspi);
 80031d6:	2140      	movs	r1, #64	; 0x40
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	438a      	bics	r2, r1
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	e7da      	b.n	8003196 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
 80031e0:	20000000 	.word	0x20000000
 80031e4:	ffffdfff 	.word	0xffffdfff

080031e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ea:	46de      	mov	lr, fp
 80031ec:	4657      	mov	r7, sl
 80031ee:	464e      	mov	r6, r9
 80031f0:	4645      	mov	r5, r8
 80031f2:	b5e0      	push	{r5, r6, r7, lr}
 80031f4:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 80031f6:	466b      	mov	r3, sp
{
 80031f8:	0017      	movs	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 80031fa:	2200      	movs	r2, #0
{
 80031fc:	000d      	movs	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 80031fe:	71da      	strb	r2, [r3, #7]
{
 8003200:	0004      	movs	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003202:	f7fe f8f9 	bl	80013f8 <HAL_GetTick>
 8003206:	19eb      	adds	r3, r5, r7
 8003208:	1a1e      	subs	r6, r3, r0
 800320a:	469a      	mov	sl, r3
  tmp_tickstart = HAL_GetTick();
 800320c:	f7fe f8f4 	bl	80013f8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003210:	4b47      	ldr	r3, [pc, #284]	; (8003330 <SPI_EndRxTxTransaction+0x148>)
  tmp_tickstart = HAL_GetTick();
 8003212:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003214:	4699      	mov	r9, r3
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	009a      	lsls	r2, r3, #2
 800321a:	18d2      	adds	r2, r2, r3
 800321c:	00d3      	lsls	r3, r2, #3
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	0d1b      	lsrs	r3, r3, #20
 8003222:	4373      	muls	r3, r6
 8003224:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8003226:	23c0      	movs	r3, #192	; 0xc0
 8003228:	015b      	lsls	r3, r3, #5
 800322a:	469b      	mov	fp, r3
 800322c:	6822      	ldr	r2, [r4, #0]
 800322e:	1c6b      	adds	r3, r5, #1
 8003230:	d14a      	bne.n	80032c8 <SPI_EndRxTxTransaction+0xe0>
 8003232:	21c0      	movs	r1, #192	; 0xc0
 8003234:	0149      	lsls	r1, r1, #5
 8003236:	6893      	ldr	r3, [r2, #8]
 8003238:	420b      	tst	r3, r1
 800323a:	d1fc      	bne.n	8003236 <SPI_EndRxTxTransaction+0x4e>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800323c:	f7fe f8dc 	bl	80013f8 <HAL_GetTick>
 8003240:	4653      	mov	r3, sl
 8003242:	1a1e      	subs	r6, r3, r0
  tmp_tickstart = HAL_GetTick();
 8003244:	f7fe f8d8 	bl	80013f8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003248:	464b      	mov	r3, r9
 800324a:	681b      	ldr	r3, [r3, #0]
  tmp_tickstart = HAL_GetTick();
 800324c:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800324e:	015b      	lsls	r3, r3, #5
 8003250:	0d1b      	lsrs	r3, r3, #20
 8003252:	4373      	muls	r3, r6
 8003254:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003256:	2380      	movs	r3, #128	; 0x80
 8003258:	4699      	mov	r9, r3
 800325a:	6822      	ldr	r2, [r4, #0]
 800325c:	1c6b      	adds	r3, r5, #1
 800325e:	d146      	bne.n	80032ee <SPI_EndRxTxTransaction+0x106>
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	6893      	ldr	r3, [r2, #8]
 8003264:	4219      	tst	r1, r3
 8003266:	d1fc      	bne.n	8003262 <SPI_EndRxTxTransaction+0x7a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003268:	003a      	movs	r2, r7
 800326a:	0029      	movs	r1, r5
 800326c:	0020      	movs	r0, r4
 800326e:	f7ff ff35 	bl	80030dc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003272:	2800      	cmp	r0, #0
 8003274:	d122      	bne.n	80032bc <SPI_EndRxTxTransaction+0xd4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8003276:	b005      	add	sp, #20
 8003278:	bcf0      	pop	{r4, r5, r6, r7}
 800327a:	46bb      	mov	fp, r7
 800327c:	46b2      	mov	sl, r6
 800327e:	46a9      	mov	r9, r5
 8003280:	46a0      	mov	r8, r4
 8003282:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003284:	21e0      	movs	r1, #224	; 0xe0
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	438a      	bics	r2, r1
 800328c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800328e:	2282      	movs	r2, #130	; 0x82
 8003290:	6861      	ldr	r1, [r4, #4]
 8003292:	0052      	lsls	r2, r2, #1
 8003294:	4291      	cmp	r1, r2
 8003296:	d03d      	beq.n	8003314 <SPI_EndRxTxTransaction+0x12c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800329c:	0189      	lsls	r1, r1, #6
 800329e:	428a      	cmp	r2, r1
 80032a0:	d106      	bne.n	80032b0 <SPI_EndRxTxTransaction+0xc8>
          SPI_RESET_CRC(hspi);
 80032a2:	6819      	ldr	r1, [r3, #0]
 80032a4:	4823      	ldr	r0, [pc, #140]	; (8003334 <SPI_EndRxTxTransaction+0x14c>)
 80032a6:	4001      	ands	r1, r0
 80032a8:	6019      	str	r1, [r3, #0]
 80032aa:	6819      	ldr	r1, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80032b0:	235d      	movs	r3, #93	; 0x5d
 80032b2:	2201      	movs	r2, #1
 80032b4:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hspi);
 80032b6:	2200      	movs	r2, #0
 80032b8:	3b01      	subs	r3, #1
 80032ba:	54e2      	strb	r2, [r4, r3]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032bc:	2220      	movs	r2, #32
 80032be:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80032c0:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032c2:	4313      	orrs	r3, r2
 80032c4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80032c6:	e7d6      	b.n	8003276 <SPI_EndRxTxTransaction+0x8e>
  while ((hspi->Instance->SR & Fifo) != State)
 80032c8:	6893      	ldr	r3, [r2, #8]
 80032ca:	465a      	mov	r2, fp
 80032cc:	4213      	tst	r3, r2
 80032ce:	d0b5      	beq.n	800323c <SPI_EndRxTxTransaction+0x54>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032d0:	f7fe f892 	bl	80013f8 <HAL_GetTick>
 80032d4:	4643      	mov	r3, r8
 80032d6:	1ac0      	subs	r0, r0, r3
 80032d8:	42b0      	cmp	r0, r6
 80032da:	d2d3      	bcs.n	8003284 <SPI_EndRxTxTransaction+0x9c>
      if (count == 0U)
 80032dc:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 80032de:	1e5a      	subs	r2, r3, #1
 80032e0:	4193      	sbcs	r3, r2
 80032e2:	425b      	negs	r3, r3
 80032e4:	401e      	ands	r6, r3
      count--;
 80032e6:	9b02      	ldr	r3, [sp, #8]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	9302      	str	r3, [sp, #8]
 80032ec:	e79e      	b.n	800322c <SPI_EndRxTxTransaction+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032ee:	6893      	ldr	r3, [r2, #8]
 80032f0:	464a      	mov	r2, r9
 80032f2:	421a      	tst	r2, r3
 80032f4:	d0b8      	beq.n	8003268 <SPI_EndRxTxTransaction+0x80>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032f6:	f7fe f87f 	bl	80013f8 <HAL_GetTick>
 80032fa:	4643      	mov	r3, r8
 80032fc:	1ac0      	subs	r0, r0, r3
 80032fe:	42b0      	cmp	r0, r6
 8003300:	d2c0      	bcs.n	8003284 <SPI_EndRxTxTransaction+0x9c>
      if (count == 0U)
 8003302:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8003304:	1e5a      	subs	r2, r3, #1
 8003306:	4193      	sbcs	r3, r2
 8003308:	425b      	negs	r3, r3
 800330a:	401e      	ands	r6, r3
      count--;
 800330c:	9b03      	ldr	r3, [sp, #12]
 800330e:	3b01      	subs	r3, #1
 8003310:	9303      	str	r3, [sp, #12]
 8003312:	e7a2      	b.n	800325a <SPI_EndRxTxTransaction+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003314:	2180      	movs	r1, #128	; 0x80
 8003316:	68a2      	ldr	r2, [r4, #8]
 8003318:	0209      	lsls	r1, r1, #8
 800331a:	428a      	cmp	r2, r1
 800331c:	d003      	beq.n	8003326 <SPI_EndRxTxTransaction+0x13e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800331e:	2180      	movs	r1, #128	; 0x80
 8003320:	00c9      	lsls	r1, r1, #3
 8003322:	428a      	cmp	r2, r1
 8003324:	d1b8      	bne.n	8003298 <SPI_EndRxTxTransaction+0xb0>
          __HAL_SPI_DISABLE(hspi);
 8003326:	2140      	movs	r1, #64	; 0x40
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	438a      	bics	r2, r1
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	e7b3      	b.n	8003298 <SPI_EndRxTxTransaction+0xb0>
 8003330:	20000000 	.word	0x20000000
 8003334:	ffffdfff 	.word	0xffffdfff

08003338 <HAL_SPI_Init>:
{
 8003338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333a:	46de      	mov	lr, fp
 800333c:	4657      	mov	r7, sl
 800333e:	464e      	mov	r6, r9
 8003340:	4645      	mov	r5, r8
 8003342:	0004      	movs	r4, r0
 8003344:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 8003346:	2800      	cmp	r0, #0
 8003348:	d100      	bne.n	800334c <HAL_SPI_Init+0x14>
 800334a:	e094      	b.n	8003476 <HAL_SPI_Init+0x13e>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800334c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800334e:	2d00      	cmp	r5, #0
 8003350:	d06b      	beq.n	800342a <HAL_SPI_Init+0xf2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003352:	2300      	movs	r3, #0
 8003354:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003356:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003358:	2300      	movs	r3, #0
 800335a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800335c:	335d      	adds	r3, #93	; 0x5d
 800335e:	5ce3      	ldrb	r3, [r4, r3]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d06e      	beq.n	8003444 <HAL_SPI_Init+0x10c>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003366:	235d      	movs	r3, #93	; 0x5d
 8003368:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 800336a:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 800336c:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 800336e:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003370:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8003372:	6813      	ldr	r3, [r2, #0]
 8003374:	438b      	bics	r3, r1
 8003376:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003378:	23e0      	movs	r3, #224	; 0xe0
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4298      	cmp	r0, r3
 800337e:	d968      	bls.n	8003452 <HAL_SPI_Init+0x11a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003380:	23f0      	movs	r3, #240	; 0xf0
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	4298      	cmp	r0, r3
 8003386:	d000      	beq.n	800338a <HAL_SPI_Init+0x52>
 8003388:	e077      	b.n	800347a <HAL_SPI_Init+0x142>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800338e:	019b      	lsls	r3, r3, #6
 8003390:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003392:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003394:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003396:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003398:	2682      	movs	r6, #130	; 0x82
 800339a:	2784      	movs	r7, #132	; 0x84
 800339c:	6863      	ldr	r3, [r4, #4]
 800339e:	0076      	lsls	r6, r6, #1
 80033a0:	4033      	ands	r3, r6
 80033a2:	68a6      	ldr	r6, [r4, #8]
 80033a4:	023f      	lsls	r7, r7, #8
 80033a6:	403e      	ands	r6, r7
 80033a8:	2702      	movs	r7, #2
 80033aa:	4333      	orrs	r3, r6
 80033ac:	6926      	ldr	r6, [r4, #16]
 80033ae:	69a1      	ldr	r1, [r4, #24]
 80033b0:	403e      	ands	r6, r7
 80033b2:	4333      	orrs	r3, r6
 80033b4:	2601      	movs	r6, #1
 80033b6:	6967      	ldr	r7, [r4, #20]
 80033b8:	46b2      	mov	sl, r6
 80033ba:	4037      	ands	r7, r6
 80033bc:	433b      	orrs	r3, r7
 80033be:	2780      	movs	r7, #128	; 0x80
 80033c0:	00bf      	lsls	r7, r7, #2
 80033c2:	400f      	ands	r7, r1
 80033c4:	433b      	orrs	r3, r7
 80033c6:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033c8:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033ca:	46b8      	mov	r8, r7
 80033cc:	2738      	movs	r7, #56	; 0x38
 80033ce:	46b9      	mov	r9, r7
 80033d0:	4647      	mov	r7, r8
 80033d2:	464e      	mov	r6, r9
 80033d4:	4037      	ands	r7, r6
 80033d6:	6a26      	ldr	r6, [r4, #32]
 80033d8:	433b      	orrs	r3, r7
 80033da:	46b0      	mov	r8, r6
 80033dc:	2680      	movs	r6, #128	; 0x80
 80033de:	4647      	mov	r7, r8
 80033e0:	4037      	ands	r7, r6
 80033e2:	4666      	mov	r6, ip
 80033e4:	433b      	orrs	r3, r7
 80033e6:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033e8:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033ea:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033ee:	4033      	ands	r3, r6
 80033f0:	26f0      	movs	r6, #240	; 0xf0
 80033f2:	0136      	lsls	r6, r6, #4
 80033f4:	4030      	ands	r0, r6
 80033f6:	4303      	orrs	r3, r0
 80033f8:	2004      	movs	r0, #4
 80033fa:	4001      	ands	r1, r0
 80033fc:	430b      	orrs	r3, r1
 80033fe:	2110      	movs	r1, #16
 8003400:	4029      	ands	r1, r5
 8003402:	430b      	orrs	r3, r1
 8003404:	4659      	mov	r1, fp
 8003406:	430b      	orrs	r3, r1
 8003408:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800340a:	69d3      	ldr	r3, [r2, #28]
 800340c:	491c      	ldr	r1, [pc, #112]	; (8003480 <HAL_SPI_Init+0x148>)
  return HAL_OK;
 800340e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003410:	400b      	ands	r3, r1
 8003412:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003414:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003416:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003418:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800341a:	335d      	adds	r3, #93	; 0x5d
 800341c:	54e2      	strb	r2, [r4, r3]
}
 800341e:	bcf0      	pop	{r4, r5, r6, r7}
 8003420:	46bb      	mov	fp, r7
 8003422:	46b2      	mov	sl, r6
 8003424:	46a9      	mov	r9, r5
 8003426:	46a0      	mov	r8, r4
 8003428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800342a:	2382      	movs	r3, #130	; 0x82
 800342c:	6842      	ldr	r2, [r0, #4]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	429a      	cmp	r2, r3
 8003432:	d091      	beq.n	8003358 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003434:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003436:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003438:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800343a:	335d      	adds	r3, #93	; 0x5d
 800343c:	5ce3      	ldrb	r3, [r4, r3]
 800343e:	b2da      	uxtb	r2, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d190      	bne.n	8003366 <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 8003444:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003446:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003448:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 800344a:	f7fd fd7b 	bl	8000f44 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800344e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003450:	e789      	b.n	8003366 <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003452:	4298      	cmp	r0, r3
 8003454:	d006      	beq.n	8003464 <HAL_SPI_Init+0x12c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003456:	2380      	movs	r3, #128	; 0x80
 8003458:	015b      	lsls	r3, r3, #5
 800345a:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800345c:	2300      	movs	r3, #0
 800345e:	469c      	mov	ip, r3
 8003460:	62a3      	str	r3, [r4, #40]	; 0x28
 8003462:	e799      	b.n	8003398 <HAL_SPI_Init+0x60>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003464:	2380      	movs	r3, #128	; 0x80
 8003466:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003468:	019b      	lsls	r3, r3, #6
 800346a:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800346c:	2380      	movs	r3, #128	; 0x80
 800346e:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003470:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003472:	469b      	mov	fp, r3
 8003474:	e790      	b.n	8003398 <HAL_SPI_Init+0x60>
    return HAL_ERROR;
 8003476:	2001      	movs	r0, #1
 8003478:	e7d1      	b.n	800341e <HAL_SPI_Init+0xe6>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800347a:	2300      	movs	r3, #0
 800347c:	469b      	mov	fp, r3
 800347e:	e7ed      	b.n	800345c <HAL_SPI_Init+0x124>
 8003480:	fffff7ff 	.word	0xfffff7ff

08003484 <HAL_SPI_TransmitReceive>:
{
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	4647      	mov	r7, r8
 8003488:	46ce      	mov	lr, r9
 800348a:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 800348c:	235c      	movs	r3, #92	; 0x5c
{
 800348e:	b580      	push	{r7, lr}
 8003490:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8003492:	5cc2      	ldrb	r2, [r0, r3]
{
 8003494:	0004      	movs	r4, r0
 8003496:	000f      	movs	r7, r1
  __HAL_LOCK(hspi);
 8003498:	2a01      	cmp	r2, #1
 800349a:	d100      	bne.n	800349e <HAL_SPI_TransmitReceive+0x1a>
 800349c:	e09a      	b.n	80035d4 <HAL_SPI_TransmitReceive+0x150>
 800349e:	2201      	movs	r2, #1
 80034a0:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80034a2:	f7fd ffa9 	bl	80013f8 <HAL_GetTick>
  tmp_state           = hspi->State;
 80034a6:	235d      	movs	r3, #93	; 0x5d
 80034a8:	5ce3      	ldrb	r3, [r4, r3]
  tickstart = HAL_GetTick();
 80034aa:	0006      	movs	r6, r0
  tmp_mode            = hspi->Init.Mode;
 80034ac:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 80034ae:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d010      	beq.n	80034d6 <HAL_SPI_TransmitReceive+0x52>
 80034b4:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 80034b6:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d006      	beq.n	80034cc <HAL_SPI_TransmitReceive+0x48>
  __HAL_UNLOCK(hspi);
 80034be:	235c      	movs	r3, #92	; 0x5c
 80034c0:	2200      	movs	r2, #0
 80034c2:	54e2      	strb	r2, [r4, r3]
}
 80034c4:	bcc0      	pop	{r6, r7}
 80034c6:	46b9      	mov	r9, r7
 80034c8:	46b0      	mov	r8, r6
 80034ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034cc:	68a3      	ldr	r3, [r4, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f5      	bne.n	80034be <HAL_SPI_TransmitReceive+0x3a>
 80034d2:	2904      	cmp	r1, #4
 80034d4:	d1f3      	bne.n	80034be <HAL_SPI_TransmitReceive+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034d6:	2f00      	cmp	r7, #0
 80034d8:	d100      	bne.n	80034dc <HAL_SPI_TransmitReceive+0x58>
 80034da:	e079      	b.n	80035d0 <HAL_SPI_TransmitReceive+0x14c>
 80034dc:	4643      	mov	r3, r8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d076      	beq.n	80035d0 <HAL_SPI_TransmitReceive+0x14c>
 80034e2:	2d00      	cmp	r5, #0
 80034e4:	d074      	beq.n	80035d0 <HAL_SPI_TransmitReceive+0x14c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034e6:	235d      	movs	r3, #93	; 0x5d
 80034e8:	5ce1      	ldrb	r1, [r4, r3]
 80034ea:	2904      	cmp	r1, #4
 80034ec:	d001      	beq.n	80034f2 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034ee:	2105      	movs	r1, #5
 80034f0:	54e1      	strb	r1, [r4, r3]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034f2:	4641      	mov	r1, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034f4:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034f6:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80034f8:	2146      	movs	r1, #70	; 0x46
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034fa:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 80034fc:	5265      	strh	r5, [r4, r1]
  hspi->RxXferSize  = Size;
 80034fe:	3902      	subs	r1, #2
 8003500:	5265      	strh	r5, [r4, r1]
  hspi->RxISR       = NULL;
 8003502:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003504:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003506:	23e0      	movs	r3, #224	; 0xe0
 8003508:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800350a:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800350c:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800350e:	87a5      	strh	r5, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4299      	cmp	r1, r3
 8003514:	d960      	bls.n	80035d8 <HAL_SPI_TransmitReceive+0x154>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003516:	6821      	ldr	r1, [r4, #0]
 8003518:	489e      	ldr	r0, [pc, #632]	; (8003794 <HAL_SPI_TransmitReceive+0x310>)
 800351a:	684b      	ldr	r3, [r1, #4]
 800351c:	4003      	ands	r3, r0
 800351e:	604b      	str	r3, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003520:	2340      	movs	r3, #64	; 0x40
 8003522:	6808      	ldr	r0, [r1, #0]
 8003524:	4203      	tst	r3, r0
 8003526:	d102      	bne.n	800352e <HAL_SPI_TransmitReceive+0xaa>
    __HAL_SPI_ENABLE(hspi);
 8003528:	6808      	ldr	r0, [r1, #0]
 800352a:	4303      	orrs	r3, r0
 800352c:	600b      	str	r3, [r1, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800352e:	2a00      	cmp	r2, #0
 8003530:	d000      	beq.n	8003534 <HAL_SPI_TransmitReceive+0xb0>
 8003532:	e0ac      	b.n	800368e <HAL_SPI_TransmitReceive+0x20a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003534:	883b      	ldrh	r3, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003536:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003538:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 800353a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800353c:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800353e:	3b01      	subs	r3, #1
 8003540:	b29b      	uxth	r3, r3
 8003542:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003544:	9b08      	ldr	r3, [sp, #32]
 8003546:	3301      	adds	r3, #1
 8003548:	d000      	beq.n	800354c <HAL_SPI_TransmitReceive+0xc8>
 800354a:	e0a7      	b.n	800369c <HAL_SPI_TransmitReceive+0x218>
{
 800354c:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800354e:	2546      	movs	r5, #70	; 0x46
{
 8003550:	4698      	mov	r8, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003552:	2702      	movs	r7, #2
 8003554:	e029      	b.n	80035aa <HAL_SPI_TransmitReceive+0x126>
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	4217      	tst	r7, r2
 800355c:	d010      	beq.n	8003580 <HAL_SPI_TransmitReceive+0xfc>
 800355e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003560:	2a00      	cmp	r2, #0
 8003562:	d00d      	beq.n	8003580 <HAL_SPI_TransmitReceive+0xfc>
 8003564:	4642      	mov	r2, r8
 8003566:	2a01      	cmp	r2, #1
 8003568:	d10a      	bne.n	8003580 <HAL_SPI_TransmitReceive+0xfc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800356a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800356c:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800356e:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003570:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003572:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003574:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003576:	3a01      	subs	r2, #1
 8003578:	b292      	uxth	r2, r2
 800357a:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 800357c:	2200      	movs	r2, #0
 800357e:	4690      	mov	r8, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003580:	2201      	movs	r2, #1
 8003582:	0010      	movs	r0, r2
 8003584:	6899      	ldr	r1, [r3, #8]
 8003586:	4008      	ands	r0, r1
 8003588:	420a      	tst	r2, r1
 800358a:	d00c      	beq.n	80035a6 <HAL_SPI_TransmitReceive+0x122>
 800358c:	5b62      	ldrh	r2, [r4, r5]
 800358e:	2a00      	cmp	r2, #0
 8003590:	d009      	beq.n	80035a6 <HAL_SPI_TransmitReceive+0x122>
        txallowed = 1U;
 8003592:	4680      	mov	r8, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003598:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800359a:	3302      	adds	r3, #2
 800359c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800359e:	5b63      	ldrh	r3, [r4, r5]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	5363      	strh	r3, [r4, r5]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035a6:	f7fd ff27 	bl	80013f8 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1d2      	bne.n	8003556 <HAL_SPI_TransmitReceive+0xd2>
 80035b0:	5b63      	ldrh	r3, [r4, r5]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1cf      	bne.n	8003556 <HAL_SPI_TransmitReceive+0xd2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035b6:	0032      	movs	r2, r6
 80035b8:	0020      	movs	r0, r4
 80035ba:	9908      	ldr	r1, [sp, #32]
 80035bc:	f7ff fe14 	bl	80031e8 <SPI_EndRxTxTransaction>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d002      	beq.n	80035ca <HAL_SPI_TransmitReceive+0x146>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035c4:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 80035c6:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035c8:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d05a      	beq.n	8003686 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 80035d0:	2001      	movs	r0, #1
 80035d2:	e774      	b.n	80034be <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 80035d4:	2002      	movs	r0, #2
 80035d6:	e775      	b.n	80034c4 <HAL_SPI_TransmitReceive+0x40>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	6821      	ldr	r1, [r4, #0]
 80035dc:	015b      	lsls	r3, r3, #5
 80035de:	6848      	ldr	r0, [r1, #4]
 80035e0:	4303      	orrs	r3, r0
 80035e2:	604b      	str	r3, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035e4:	2340      	movs	r3, #64	; 0x40
 80035e6:	6808      	ldr	r0, [r1, #0]
 80035e8:	4203      	tst	r3, r0
 80035ea:	d102      	bne.n	80035f2 <HAL_SPI_TransmitReceive+0x16e>
    __HAL_SPI_ENABLE(hspi);
 80035ec:	6808      	ldr	r0, [r1, #0]
 80035ee:	4303      	orrs	r3, r0
 80035f0:	600b      	str	r3, [r1, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035f2:	2a00      	cmp	r2, #0
 80035f4:	d14f      	bne.n	8003696 <HAL_SPI_TransmitReceive+0x212>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035f6:	783b      	ldrb	r3, [r7, #0]
 80035f8:	730b      	strb	r3, [r1, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035fc:	3301      	adds	r3, #1
 80035fe:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003600:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003602:	3b01      	subs	r3, #1
 8003604:	b29b      	uxth	r3, r3
 8003606:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003608:	9b08      	ldr	r3, [sp, #32]
 800360a:	3301      	adds	r3, #1
 800360c:	d000      	beq.n	8003610 <HAL_SPI_TransmitReceive+0x18c>
 800360e:	e083      	b.n	8003718 <HAL_SPI_TransmitReceive+0x294>
        txallowed = 1U;
 8003610:	2301      	movs	r3, #1
 8003612:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003614:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003616:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003618:	4698      	mov	r8, r3
 800361a:	e02d      	b.n	8003678 <HAL_SPI_TransmitReceive+0x1f4>
 800361c:	4641      	mov	r1, r8
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	4211      	tst	r1, r2
 8003624:	d012      	beq.n	800364c <HAL_SPI_TransmitReceive+0x1c8>
 8003626:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003628:	2a00      	cmp	r2, #0
 800362a:	d00f      	beq.n	800364c <HAL_SPI_TransmitReceive+0x1c8>
 800362c:	464a      	mov	r2, r9
 800362e:	2a01      	cmp	r2, #1
 8003630:	d10c      	bne.n	800364c <HAL_SPI_TransmitReceive+0x1c8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003632:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003634:	7812      	ldrb	r2, [r2, #0]
 8003636:	731a      	strb	r2, [r3, #12]
        txallowed = 0U;
 8003638:	2200      	movs	r2, #0
 800363a:	4691      	mov	r9, r2
        hspi->pTxBuffPtr++;
 800363c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800363e:	3301      	adds	r3, #1
 8003640:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003642:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003644:	3b01      	subs	r3, #1
 8003646:	b29b      	uxth	r3, r3
 8003648:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	2501      	movs	r5, #1
 800364e:	002a      	movs	r2, r5
 8003650:	6899      	ldr	r1, [r3, #8]
 8003652:	400a      	ands	r2, r1
 8003654:	420d      	tst	r5, r1
 8003656:	d00d      	beq.n	8003674 <HAL_SPI_TransmitReceive+0x1f0>
 8003658:	5be1      	ldrh	r1, [r4, r7]
 800365a:	2900      	cmp	r1, #0
 800365c:	d00a      	beq.n	8003674 <HAL_SPI_TransmitReceive+0x1f0>
        txallowed = 1U;
 800365e:	4691      	mov	r9, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003660:	7b1b      	ldrb	r3, [r3, #12]
 8003662:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003664:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 8003666:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003668:	3301      	adds	r3, #1
 800366a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800366c:	5be3      	ldrh	r3, [r4, r7]
 800366e:	3b01      	subs	r3, #1
 8003670:	b29b      	uxth	r3, r3
 8003672:	53e3      	strh	r3, [r4, r7]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003674:	f7fd fec0 	bl	80013f8 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003678:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1ce      	bne.n	800361c <HAL_SPI_TransmitReceive+0x198>
 800367e:	5be3      	ldrh	r3, [r4, r7]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1cb      	bne.n	800361c <HAL_SPI_TransmitReceive+0x198>
 8003684:	e797      	b.n	80035b6 <HAL_SPI_TransmitReceive+0x132>
    hspi->State = HAL_SPI_STATE_READY;
 8003686:	2201      	movs	r2, #1
 8003688:	335d      	adds	r3, #93	; 0x5d
 800368a:	54e2      	strb	r2, [r4, r3]
 800368c:	e717      	b.n	80034be <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800368e:	2d01      	cmp	r5, #1
 8003690:	d000      	beq.n	8003694 <HAL_SPI_TransmitReceive+0x210>
 8003692:	e757      	b.n	8003544 <HAL_SPI_TransmitReceive+0xc0>
 8003694:	e74e      	b.n	8003534 <HAL_SPI_TransmitReceive+0xb0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003696:	2d01      	cmp	r5, #1
 8003698:	d1b6      	bne.n	8003608 <HAL_SPI_TransmitReceive+0x184>
 800369a:	e7ac      	b.n	80035f6 <HAL_SPI_TransmitReceive+0x172>
        txallowed = 1U;
 800369c:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800369e:	2546      	movs	r5, #70	; 0x46
        txallowed = 1U;
 80036a0:	4698      	mov	r8, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036a2:	2702      	movs	r7, #2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d103      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x22e>
 80036aa:	5b63      	ldrh	r3, [r4, r5]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d100      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x22e>
 80036b0:	e781      	b.n	80035b6 <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	4217      	tst	r7, r2
 80036b8:	d010      	beq.n	80036dc <HAL_SPI_TransmitReceive+0x258>
 80036ba:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80036bc:	2a00      	cmp	r2, #0
 80036be:	d00d      	beq.n	80036dc <HAL_SPI_TransmitReceive+0x258>
 80036c0:	4642      	mov	r2, r8
 80036c2:	2a01      	cmp	r2, #1
 80036c4:	d10a      	bne.n	80036dc <HAL_SPI_TransmitReceive+0x258>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80036c8:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ca:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036cc:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ce:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80036d0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80036d2:	3a01      	subs	r2, #1
 80036d4:	b292      	uxth	r2, r2
 80036d6:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 80036d8:	2200      	movs	r2, #0
 80036da:	4690      	mov	r8, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036dc:	2101      	movs	r1, #1
 80036de:	0008      	movs	r0, r1
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	4010      	ands	r0, r2
 80036e4:	4211      	tst	r1, r2
 80036e6:	d00c      	beq.n	8003702 <HAL_SPI_TransmitReceive+0x27e>
 80036e8:	5b62      	ldrh	r2, [r4, r5]
 80036ea:	2a00      	cmp	r2, #0
 80036ec:	d009      	beq.n	8003702 <HAL_SPI_TransmitReceive+0x27e>
        txallowed = 1U;
 80036ee:	4680      	mov	r8, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036f6:	3302      	adds	r3, #2
 80036f8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80036fa:	5b63      	ldrh	r3, [r4, r5]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29b      	uxth	r3, r3
 8003700:	5363      	strh	r3, [r4, r5]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003702:	f7fd fe79 	bl	80013f8 <HAL_GetTick>
 8003706:	9b08      	ldr	r3, [sp, #32]
 8003708:	1b80      	subs	r0, r0, r6
 800370a:	4298      	cmp	r0, r3
 800370c:	d3ca      	bcc.n	80036a4 <HAL_SPI_TransmitReceive+0x220>
        hspi->State = HAL_SPI_STATE_READY;
 800370e:	235d      	movs	r3, #93	; 0x5d
 8003710:	2201      	movs	r2, #1
        errorcode = HAL_TIMEOUT;
 8003712:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8003714:	54e2      	strb	r2, [r4, r3]
        goto error;
 8003716:	e6d2      	b.n	80034be <HAL_SPI_TransmitReceive+0x3a>
        txallowed = 1U;
 8003718:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800371a:	2546      	movs	r5, #70	; 0x46
        txallowed = 1U;
 800371c:	4698      	mov	r8, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800371e:	2702      	movs	r7, #2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003720:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003722:	2b00      	cmp	r3, #0
 8003724:	d103      	bne.n	800372e <HAL_SPI_TransmitReceive+0x2aa>
 8003726:	5b63      	ldrh	r3, [r4, r5]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d100      	bne.n	800372e <HAL_SPI_TransmitReceive+0x2aa>
 800372c:	e743      	b.n	80035b6 <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	4217      	tst	r7, r2
 8003734:	d012      	beq.n	800375c <HAL_SPI_TransmitReceive+0x2d8>
 8003736:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003738:	2a00      	cmp	r2, #0
 800373a:	d00f      	beq.n	800375c <HAL_SPI_TransmitReceive+0x2d8>
 800373c:	4642      	mov	r2, r8
 800373e:	2a01      	cmp	r2, #1
 8003740:	d10c      	bne.n	800375c <HAL_SPI_TransmitReceive+0x2d8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003742:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003744:	7812      	ldrb	r2, [r2, #0]
 8003746:	731a      	strb	r2, [r3, #12]
        txallowed = 0U;
 8003748:	2200      	movs	r2, #0
 800374a:	4690      	mov	r8, r2
        hspi->pTxBuffPtr++;
 800374c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800374e:	3301      	adds	r3, #1
 8003750:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003752:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003754:	3b01      	subs	r3, #1
 8003756:	b29b      	uxth	r3, r3
 8003758:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	2101      	movs	r1, #1
 800375e:	0008      	movs	r0, r1
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	4010      	ands	r0, r2
 8003764:	4211      	tst	r1, r2
 8003766:	d00d      	beq.n	8003784 <HAL_SPI_TransmitReceive+0x300>
 8003768:	5b62      	ldrh	r2, [r4, r5]
 800376a:	2a00      	cmp	r2, #0
 800376c:	d00a      	beq.n	8003784 <HAL_SPI_TransmitReceive+0x300>
        txallowed = 1U;
 800376e:	4680      	mov	r8, r0
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003770:	7b1b      	ldrb	r3, [r3, #12]
 8003772:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003774:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8003776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003778:	3301      	adds	r3, #1
 800377a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800377c:	5b63      	ldrh	r3, [r4, r5]
 800377e:	3b01      	subs	r3, #1
 8003780:	b29b      	uxth	r3, r3
 8003782:	5363      	strh	r3, [r4, r5]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003784:	f7fd fe38 	bl	80013f8 <HAL_GetTick>
 8003788:	9b08      	ldr	r3, [sp, #32]
 800378a:	1b80      	subs	r0, r0, r6
 800378c:	4298      	cmp	r0, r3
 800378e:	d3c7      	bcc.n	8003720 <HAL_SPI_TransmitReceive+0x29c>
 8003790:	e7bd      	b.n	800370e <HAL_SPI_TransmitReceive+0x28a>
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	ffffefff 	.word	0xffffefff

08003798 <HAL_SPI_ErrorCallback>:
 8003798:	4770      	bx	lr
 800379a:	46c0      	nop			; (mov r8, r8)

0800379c <HAL_SPI_IRQHandler>:
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800379c:	2241      	movs	r2, #65	; 0x41
{
 800379e:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80037a0:	6801      	ldr	r1, [r0, #0]
{
 80037a2:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80037a4:	6848      	ldr	r0, [r1, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80037a6:	688b      	ldr	r3, [r1, #8]
{
 80037a8:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80037aa:	401a      	ands	r2, r3
 80037ac:	2a01      	cmp	r2, #1
 80037ae:	d060      	beq.n	8003872 <HAL_SPI_IRQHandler+0xd6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80037b0:	079a      	lsls	r2, r3, #30
 80037b2:	d501      	bpl.n	80037b8 <HAL_SPI_IRQHandler+0x1c>
 80037b4:	0602      	lsls	r2, r0, #24
 80037b6:	d462      	bmi.n	800387e <HAL_SPI_IRQHandler+0xe2>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80037b8:	22b0      	movs	r2, #176	; 0xb0
 80037ba:	0052      	lsls	r2, r2, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037bc:	4213      	tst	r3, r2
 80037be:	d056      	beq.n	800386e <HAL_SPI_IRQHandler+0xd2>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80037c0:	0682      	lsls	r2, r0, #26
 80037c2:	d554      	bpl.n	800386e <HAL_SPI_IRQHandler+0xd2>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037c4:	065a      	lsls	r2, r3, #25
 80037c6:	d50e      	bpl.n	80037e6 <HAL_SPI_IRQHandler+0x4a>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80037c8:	225d      	movs	r2, #93	; 0x5d
 80037ca:	5ca2      	ldrb	r2, [r4, r2]
 80037cc:	2a03      	cmp	r2, #3
 80037ce:	d05e      	beq.n	800388e <HAL_SPI_IRQHandler+0xf2>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80037d0:	2504      	movs	r5, #4
 80037d2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80037d4:	432a      	orrs	r2, r5
 80037d6:	6622      	str	r2, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037d8:	2200      	movs	r2, #0
 80037da:	9200      	str	r2, [sp, #0]
 80037dc:	68ca      	ldr	r2, [r1, #12]
 80037de:	9200      	str	r2, [sp, #0]
 80037e0:	688a      	ldr	r2, [r1, #8]
 80037e2:	9200      	str	r2, [sp, #0]
 80037e4:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80037e6:	069a      	lsls	r2, r3, #26
 80037e8:	d50c      	bpl.n	8003804 <HAL_SPI_IRQHandler+0x68>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80037ea:	2501      	movs	r5, #1
 80037ec:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80037ee:	432a      	orrs	r2, r5
 80037f0:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80037f2:	2200      	movs	r2, #0
 80037f4:	9202      	str	r2, [sp, #8]
 80037f6:	688a      	ldr	r2, [r1, #8]
 80037f8:	353f      	adds	r5, #63	; 0x3f
 80037fa:	9202      	str	r2, [sp, #8]
 80037fc:	680a      	ldr	r2, [r1, #0]
 80037fe:	43aa      	bics	r2, r5
 8003800:	600a      	str	r2, [r1, #0]
 8003802:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003804:	05db      	lsls	r3, r3, #23
 8003806:	d508      	bpl.n	800381a <HAL_SPI_IRQHandler+0x7e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003808:	2208      	movs	r2, #8
 800380a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800380c:	4313      	orrs	r3, r2
 800380e:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003810:	2300      	movs	r3, #0
 8003812:	9303      	str	r3, [sp, #12]
 8003814:	688b      	ldr	r3, [r1, #8]
 8003816:	9303      	str	r3, [sp, #12]
 8003818:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800381a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800381c:	2b00      	cmp	r3, #0
 800381e:	d026      	beq.n	800386e <HAL_SPI_IRQHandler+0xd2>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003820:	22e0      	movs	r2, #224	; 0xe0
 8003822:	684b      	ldr	r3, [r1, #4]
 8003824:	4393      	bics	r3, r2
 8003826:	604b      	str	r3, [r1, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003828:	235d      	movs	r3, #93	; 0x5d
 800382a:	3adf      	subs	r2, #223	; 0xdf
 800382c:	54e2      	strb	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800382e:	3b5a      	subs	r3, #90	; 0x5a
 8003830:	4203      	tst	r3, r0
 8003832:	d028      	beq.n	8003886 <HAL_SPI_IRQHandler+0xea>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003834:	684a      	ldr	r2, [r1, #4]
        if (hspi->hdmarx != NULL)
 8003836:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003838:	439a      	bics	r2, r3
 800383a:	604a      	str	r2, [r1, #4]
        if (hspi->hdmarx != NULL)
 800383c:	2800      	cmp	r0, #0
 800383e:	d009      	beq.n	8003854 <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <HAL_SPI_IRQHandler+0x104>)
 8003842:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003844:	f7fe f9fc 	bl	8001c40 <HAL_DMA_Abort_IT>
 8003848:	2800      	cmp	r0, #0
 800384a:	d003      	beq.n	8003854 <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800384c:	2240      	movs	r2, #64	; 0x40
 800384e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003850:	4313      	orrs	r3, r2
 8003852:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003854:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003856:	2800      	cmp	r0, #0
 8003858:	d009      	beq.n	800386e <HAL_SPI_IRQHandler+0xd2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800385a:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <HAL_SPI_IRQHandler+0x104>)
 800385c:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800385e:	f7fe f9ef 	bl	8001c40 <HAL_DMA_Abort_IT>
 8003862:	2800      	cmp	r0, #0
 8003864:	d003      	beq.n	800386e <HAL_SPI_IRQHandler+0xd2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003866:	2240      	movs	r2, #64	; 0x40
 8003868:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800386a:	4313      	orrs	r3, r2
 800386c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800386e:	b005      	add	sp, #20
 8003870:	bd30      	pop	{r4, r5, pc}
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003872:	0642      	lsls	r2, r0, #25
 8003874:	d59c      	bpl.n	80037b0 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8003876:	0020      	movs	r0, r4
 8003878:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800387a:	4798      	blx	r3
    return;
 800387c:	e7f7      	b.n	800386e <HAL_SPI_IRQHandler+0xd2>
    hspi->TxISR(hspi);
 800387e:	0020      	movs	r0, r4
 8003880:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003882:	4798      	blx	r3
    return;
 8003884:	e7f3      	b.n	800386e <HAL_SPI_IRQHandler+0xd2>
        HAL_SPI_ErrorCallback(hspi);
 8003886:	0020      	movs	r0, r4
 8003888:	f7ff ff86 	bl	8003798 <HAL_SPI_ErrorCallback>
 800388c:	e7ef      	b.n	800386e <HAL_SPI_IRQHandler+0xd2>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800388e:	2300      	movs	r3, #0
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	68cb      	ldr	r3, [r1, #12]
 8003894:	9301      	str	r3, [sp, #4]
 8003896:	688b      	ldr	r3, [r1, #8]
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	9b01      	ldr	r3, [sp, #4]
        return;
 800389c:	e7e7      	b.n	800386e <HAL_SPI_IRQHandler+0xd2>
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	080038a5 	.word	0x080038a5

080038a4 <SPI_DMAAbortOnError>:
  hspi->RxXferCount = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	2246      	movs	r2, #70	; 0x46
{
 80038a8:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038aa:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 80038ac:	5283      	strh	r3, [r0, r2]
  hspi->TxXferCount = 0U;
 80038ae:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80038b0:	f7ff ff72 	bl	8003798 <HAL_SPI_ErrorCallback>
}
 80038b4:	bd10      	pop	{r4, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)

080038b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038b8:	b510      	push	{r4, lr}
 80038ba:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038bc:	d066      	beq.n	800398c <HAL_TIM_Base_Init+0xd4>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038be:	233d      	movs	r3, #61	; 0x3d
 80038c0:	5cc3      	ldrb	r3, [r0, r3]
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d041      	beq.n	800394c <HAL_TIM_Base_Init+0x94>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	233d      	movs	r3, #61	; 0x3d
 80038ca:	2202      	movs	r2, #2
 80038cc:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ce:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d0:	492f      	ldr	r1, [pc, #188]	; (8003990 <HAL_TIM_Base_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 80038d2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d4:	428a      	cmp	r2, r1
 80038d6:	d045      	beq.n	8003964 <HAL_TIM_Base_Init+0xac>
 80038d8:	2180      	movs	r1, #128	; 0x80
 80038da:	05c9      	lsls	r1, r1, #23
 80038dc:	428a      	cmp	r2, r1
 80038de:	d02c      	beq.n	800393a <HAL_TIM_Base_Init+0x82>
 80038e0:	492c      	ldr	r1, [pc, #176]	; (8003994 <HAL_TIM_Base_Init+0xdc>)
 80038e2:	428a      	cmp	r2, r1
 80038e4:	d029      	beq.n	800393a <HAL_TIM_Base_Init+0x82>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038e6:	492c      	ldr	r1, [pc, #176]	; (8003998 <HAL_TIM_Base_Init+0xe0>)
 80038e8:	428a      	cmp	r2, r1
 80038ea:	d02a      	beq.n	8003942 <HAL_TIM_Base_Init+0x8a>
 80038ec:	492b      	ldr	r1, [pc, #172]	; (800399c <HAL_TIM_Base_Init+0xe4>)
 80038ee:	428a      	cmp	r2, r1
 80038f0:	d03c      	beq.n	800396c <HAL_TIM_Base_Init+0xb4>
 80038f2:	492b      	ldr	r1, [pc, #172]	; (80039a0 <HAL_TIM_Base_Init+0xe8>)
 80038f4:	428a      	cmp	r2, r1
 80038f6:	d039      	beq.n	800396c <HAL_TIM_Base_Init+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f8:	2180      	movs	r1, #128	; 0x80
 80038fa:	438b      	bics	r3, r1
 80038fc:	69a1      	ldr	r1, [r4, #24]
 80038fe:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8003900:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003902:	68e3      	ldr	r3, [r4, #12]
 8003904:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003906:	6863      	ldr	r3, [r4, #4]
 8003908:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800390a:	2301      	movs	r3, #1
 800390c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800390e:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8003910:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003912:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003914:	3a08      	subs	r2, #8
 8003916:	54a3      	strb	r3, [r4, r2]
 8003918:	3201      	adds	r2, #1
 800391a:	54a3      	strb	r3, [r4, r2]
 800391c:	3201      	adds	r2, #1
 800391e:	54a3      	strb	r3, [r4, r2]
 8003920:	3201      	adds	r2, #1
 8003922:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003924:	3201      	adds	r2, #1
 8003926:	54a3      	strb	r3, [r4, r2]
 8003928:	3201      	adds	r2, #1
 800392a:	54a3      	strb	r3, [r4, r2]
 800392c:	3201      	adds	r2, #1
 800392e:	54a3      	strb	r3, [r4, r2]
 8003930:	3201      	adds	r2, #1
 8003932:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003934:	3a08      	subs	r2, #8
 8003936:	54a3      	strb	r3, [r4, r2]
}
 8003938:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800393a:	2170      	movs	r1, #112	; 0x70
 800393c:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 800393e:	68a1      	ldr	r1, [r4, #8]
 8003940:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003942:	4918      	ldr	r1, [pc, #96]	; (80039a4 <HAL_TIM_Base_Init+0xec>)
 8003944:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003946:	6921      	ldr	r1, [r4, #16]
 8003948:	430b      	orrs	r3, r1
 800394a:	e7d5      	b.n	80038f8 <HAL_TIM_Base_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 800394c:	333c      	adds	r3, #60	; 0x3c
 800394e:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8003950:	f7fd fb32 	bl	8000fb8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003954:	233d      	movs	r3, #61	; 0x3d
 8003956:	2202      	movs	r2, #2
 8003958:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800395a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800395c:	490c      	ldr	r1, [pc, #48]	; (8003990 <HAL_TIM_Base_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 800395e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003960:	428a      	cmp	r2, r1
 8003962:	d1b9      	bne.n	80038d8 <HAL_TIM_Base_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003964:	2170      	movs	r1, #112	; 0x70
 8003966:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8003968:	68a1      	ldr	r1, [r4, #8]
 800396a:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800396c:	490d      	ldr	r1, [pc, #52]	; (80039a4 <HAL_TIM_Base_Init+0xec>)
 800396e:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003970:	6921      	ldr	r1, [r4, #16]
 8003972:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003974:	2180      	movs	r1, #128	; 0x80
 8003976:	438b      	bics	r3, r1
 8003978:	69a1      	ldr	r1, [r4, #24]
 800397a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800397c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800397e:	68e3      	ldr	r3, [r4, #12]
 8003980:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003982:	6863      	ldr	r3, [r4, #4]
 8003984:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003986:	6963      	ldr	r3, [r4, #20]
 8003988:	6313      	str	r3, [r2, #48]	; 0x30
 800398a:	e7be      	b.n	800390a <HAL_TIM_Base_Init+0x52>
    return HAL_ERROR;
 800398c:	2001      	movs	r0, #1
 800398e:	e7d3      	b.n	8003938 <HAL_TIM_Base_Init+0x80>
 8003990:	40012c00 	.word	0x40012c00
 8003994:	40000400 	.word	0x40000400
 8003998:	40002000 	.word	0x40002000
 800399c:	40014400 	.word	0x40014400
 80039a0:	40014800 	.word	0x40014800
 80039a4:	fffffcff 	.word	0xfffffcff

080039a8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80039a8:	223d      	movs	r2, #61	; 0x3d
 80039aa:	5c81      	ldrb	r1, [r0, r2]
{
 80039ac:	0003      	movs	r3, r0
    return HAL_ERROR;
 80039ae:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80039b0:	2901      	cmp	r1, #1
 80039b2:	d113      	bne.n	80039dc <HAL_TIM_Base_Start_IT+0x34>
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	3101      	adds	r1, #1
 80039b6:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	4302      	orrs	r2, r0
 80039be:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c0:	4a0d      	ldr	r2, [pc, #52]	; (80039f8 <HAL_TIM_Base_Start_IT+0x50>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00b      	beq.n	80039de <HAL_TIM_Base_Start_IT+0x36>
 80039c6:	2280      	movs	r2, #128	; 0x80
 80039c8:	05d2      	lsls	r2, r2, #23
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <HAL_TIM_Base_Start_IT+0x36>
 80039ce:	4a0b      	ldr	r2, [pc, #44]	; (80039fc <HAL_TIM_Base_Start_IT+0x54>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_TIM_Base_Start_IT+0x36>
    __HAL_TIM_ENABLE(htim);
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4302      	orrs	r2, r0
  return HAL_OK;
 80039d8:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80039da:	601a      	str	r2, [r3, #0]
}
 80039dc:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039de:	2207      	movs	r2, #7
 80039e0:	6899      	ldr	r1, [r3, #8]
 80039e2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e4:	2a06      	cmp	r2, #6
 80039e6:	d005      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x4c>
      __HAL_TIM_ENABLE(htim);
 80039e8:	2101      	movs	r1, #1
 80039ea:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80039ec:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80039ee:	430a      	orrs	r2, r1
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	e7f3      	b.n	80039dc <HAL_TIM_Base_Start_IT+0x34>
  return HAL_OK;
 80039f4:	2000      	movs	r0, #0
 80039f6:	e7f1      	b.n	80039dc <HAL_TIM_Base_Start_IT+0x34>
 80039f8:	40012c00 	.word	0x40012c00
 80039fc:	40000400 	.word	0x40000400

08003a00 <HAL_TIM_PWM_MspInit>:
 8003a00:	4770      	bx	lr
 8003a02:	46c0      	nop			; (mov r8, r8)

08003a04 <HAL_TIM_PWM_Init>:
{
 8003a04:	b510      	push	{r4, lr}
 8003a06:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003a08:	d066      	beq.n	8003ad8 <HAL_TIM_PWM_Init+0xd4>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0a:	233d      	movs	r3, #61	; 0x3d
 8003a0c:	5cc3      	ldrb	r3, [r0, r3]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d041      	beq.n	8003a98 <HAL_TIM_PWM_Init+0x94>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	233d      	movs	r3, #61	; 0x3d
 8003a16:	2202      	movs	r2, #2
 8003a18:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a1a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a1c:	492f      	ldr	r1, [pc, #188]	; (8003adc <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8003a1e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a20:	428a      	cmp	r2, r1
 8003a22:	d045      	beq.n	8003ab0 <HAL_TIM_PWM_Init+0xac>
 8003a24:	2180      	movs	r1, #128	; 0x80
 8003a26:	05c9      	lsls	r1, r1, #23
 8003a28:	428a      	cmp	r2, r1
 8003a2a:	d02c      	beq.n	8003a86 <HAL_TIM_PWM_Init+0x82>
 8003a2c:	492c      	ldr	r1, [pc, #176]	; (8003ae0 <HAL_TIM_PWM_Init+0xdc>)
 8003a2e:	428a      	cmp	r2, r1
 8003a30:	d029      	beq.n	8003a86 <HAL_TIM_PWM_Init+0x82>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a32:	492c      	ldr	r1, [pc, #176]	; (8003ae4 <HAL_TIM_PWM_Init+0xe0>)
 8003a34:	428a      	cmp	r2, r1
 8003a36:	d02a      	beq.n	8003a8e <HAL_TIM_PWM_Init+0x8a>
 8003a38:	492b      	ldr	r1, [pc, #172]	; (8003ae8 <HAL_TIM_PWM_Init+0xe4>)
 8003a3a:	428a      	cmp	r2, r1
 8003a3c:	d03c      	beq.n	8003ab8 <HAL_TIM_PWM_Init+0xb4>
 8003a3e:	492b      	ldr	r1, [pc, #172]	; (8003aec <HAL_TIM_PWM_Init+0xe8>)
 8003a40:	428a      	cmp	r2, r1
 8003a42:	d039      	beq.n	8003ab8 <HAL_TIM_PWM_Init+0xb4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a44:	2180      	movs	r1, #128	; 0x80
 8003a46:	438b      	bics	r3, r1
 8003a48:	69a1      	ldr	r1, [r4, #24]
 8003a4a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003a4c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a4e:	68e3      	ldr	r3, [r4, #12]
 8003a50:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a52:	6863      	ldr	r3, [r4, #4]
 8003a54:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003a56:	2301      	movs	r3, #1
 8003a58:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a5a:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8003a5c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a5e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a60:	3a08      	subs	r2, #8
 8003a62:	54a3      	strb	r3, [r4, r2]
 8003a64:	3201      	adds	r2, #1
 8003a66:	54a3      	strb	r3, [r4, r2]
 8003a68:	3201      	adds	r2, #1
 8003a6a:	54a3      	strb	r3, [r4, r2]
 8003a6c:	3201      	adds	r2, #1
 8003a6e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a70:	3201      	adds	r2, #1
 8003a72:	54a3      	strb	r3, [r4, r2]
 8003a74:	3201      	adds	r2, #1
 8003a76:	54a3      	strb	r3, [r4, r2]
 8003a78:	3201      	adds	r2, #1
 8003a7a:	54a3      	strb	r3, [r4, r2]
 8003a7c:	3201      	adds	r2, #1
 8003a7e:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003a80:	3a08      	subs	r2, #8
 8003a82:	54a3      	strb	r3, [r4, r2]
}
 8003a84:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a86:	2170      	movs	r1, #112	; 0x70
 8003a88:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8003a8a:	68a1      	ldr	r1, [r4, #8]
 8003a8c:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a8e:	4918      	ldr	r1, [pc, #96]	; (8003af0 <HAL_TIM_PWM_Init+0xec>)
 8003a90:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a92:	6921      	ldr	r1, [r4, #16]
 8003a94:	430b      	orrs	r3, r1
 8003a96:	e7d5      	b.n	8003a44 <HAL_TIM_PWM_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 8003a98:	333c      	adds	r3, #60	; 0x3c
 8003a9a:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8003a9c:	f7ff ffb0 	bl	8003a00 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	233d      	movs	r3, #61	; 0x3d
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa8:	490c      	ldr	r1, [pc, #48]	; (8003adc <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8003aaa:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aac:	428a      	cmp	r2, r1
 8003aae:	d1b9      	bne.n	8003a24 <HAL_TIM_PWM_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab0:	2170      	movs	r1, #112	; 0x70
 8003ab2:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8003ab4:	68a1      	ldr	r1, [r4, #8]
 8003ab6:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ab8:	490d      	ldr	r1, [pc, #52]	; (8003af0 <HAL_TIM_PWM_Init+0xec>)
 8003aba:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003abc:	6921      	ldr	r1, [r4, #16]
 8003abe:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac0:	2180      	movs	r1, #128	; 0x80
 8003ac2:	438b      	bics	r3, r1
 8003ac4:	69a1      	ldr	r1, [r4, #24]
 8003ac6:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003ac8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aca:	68e3      	ldr	r3, [r4, #12]
 8003acc:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ace:	6863      	ldr	r3, [r4, #4]
 8003ad0:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003ad2:	6963      	ldr	r3, [r4, #20]
 8003ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad6:	e7be      	b.n	8003a56 <HAL_TIM_PWM_Init+0x52>
    return HAL_ERROR;
 8003ad8:	2001      	movs	r0, #1
 8003ada:	e7d3      	b.n	8003a84 <HAL_TIM_PWM_Init+0x80>
 8003adc:	40012c00 	.word	0x40012c00
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40002000 	.word	0x40002000
 8003ae8:	40014400 	.word	0x40014400
 8003aec:	40014800 	.word	0x40014800
 8003af0:	fffffcff 	.word	0xfffffcff

08003af4 <HAL_TIM_PWM_Start>:
 8003af4:	2900      	cmp	r1, #0
 8003af6:	d126      	bne.n	8003b46 <HAL_TIM_PWM_Start+0x52>
 8003af8:	233e      	movs	r3, #62	; 0x3e
 8003afa:	5cc2      	ldrb	r2, [r0, r3]
 8003afc:	2a01      	cmp	r2, #1
 8003afe:	d136      	bne.n	8003b6e <HAL_TIM_PWM_Start+0x7a>
 8003b00:	2202      	movs	r2, #2
 8003b02:	54c2      	strb	r2, [r0, r3]
 8003b04:	221f      	movs	r2, #31
 8003b06:	4011      	ands	r1, r2
 8003b08:	3a1e      	subs	r2, #30
 8003b0a:	408a      	lsls	r2, r1
 8003b0c:	6803      	ldr	r3, [r0, #0]
 8003b0e:	6a19      	ldr	r1, [r3, #32]
 8003b10:	4391      	bics	r1, r2
 8003b12:	6219      	str	r1, [r3, #32]
 8003b14:	6a19      	ldr	r1, [r3, #32]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	621a      	str	r2, [r3, #32]
 8003b1a:	4a23      	ldr	r2, [pc, #140]	; (8003ba8 <HAL_TIM_PWM_Start+0xb4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d028      	beq.n	8003b72 <HAL_TIM_PWM_Start+0x7e>
 8003b20:	4a22      	ldr	r2, [pc, #136]	; (8003bac <HAL_TIM_PWM_Start+0xb8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d031      	beq.n	8003b8a <HAL_TIM_PWM_Start+0x96>
 8003b26:	4a22      	ldr	r2, [pc, #136]	; (8003bb0 <HAL_TIM_PWM_Start+0xbc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d02e      	beq.n	8003b8a <HAL_TIM_PWM_Start+0x96>
 8003b2c:	2280      	movs	r2, #128	; 0x80
 8003b2e:	05d2      	lsls	r2, r2, #23
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d023      	beq.n	8003b7c <HAL_TIM_PWM_Start+0x88>
 8003b34:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <HAL_TIM_PWM_Start+0xc0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d020      	beq.n	8003b7c <HAL_TIM_PWM_Start+0x88>
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	4770      	bx	lr
 8003b46:	2904      	cmp	r1, #4
 8003b48:	d025      	beq.n	8003b96 <HAL_TIM_PWM_Start+0xa2>
 8003b4a:	2908      	cmp	r1, #8
 8003b4c:	d00b      	beq.n	8003b66 <HAL_TIM_PWM_Start+0x72>
 8003b4e:	2341      	movs	r3, #65	; 0x41
 8003b50:	5cc2      	ldrb	r2, [r0, r3]
 8003b52:	2a01      	cmp	r2, #1
 8003b54:	d10b      	bne.n	8003b6e <HAL_TIM_PWM_Start+0x7a>
 8003b56:	2904      	cmp	r1, #4
 8003b58:	d021      	beq.n	8003b9e <HAL_TIM_PWM_Start+0xaa>
 8003b5a:	2908      	cmp	r1, #8
 8003b5c:	d1d0      	bne.n	8003b00 <HAL_TIM_PWM_Start+0xc>
 8003b5e:	2340      	movs	r3, #64	; 0x40
 8003b60:	2202      	movs	r2, #2
 8003b62:	54c2      	strb	r2, [r0, r3]
 8003b64:	e7ce      	b.n	8003b04 <HAL_TIM_PWM_Start+0x10>
 8003b66:	2340      	movs	r3, #64	; 0x40
 8003b68:	5cc3      	ldrb	r3, [r0, r3]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d0f7      	beq.n	8003b5e <HAL_TIM_PWM_Start+0x6a>
 8003b6e:	2001      	movs	r0, #1
 8003b70:	e7e8      	b.n	8003b44 <HAL_TIM_PWM_Start+0x50>
 8003b72:	2280      	movs	r2, #128	; 0x80
 8003b74:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003b76:	0212      	lsls	r2, r2, #8
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	645a      	str	r2, [r3, #68]	; 0x44
 8003b7c:	2207      	movs	r2, #7
 8003b7e:	6899      	ldr	r1, [r3, #8]
 8003b80:	400a      	ands	r2, r1
 8003b82:	2a06      	cmp	r2, #6
 8003b84:	d1d9      	bne.n	8003b3a <HAL_TIM_PWM_Start+0x46>
 8003b86:	2000      	movs	r0, #0
 8003b88:	e7dc      	b.n	8003b44 <HAL_TIM_PWM_Start+0x50>
 8003b8a:	2280      	movs	r2, #128	; 0x80
 8003b8c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003b8e:	0212      	lsls	r2, r2, #8
 8003b90:	430a      	orrs	r2, r1
 8003b92:	645a      	str	r2, [r3, #68]	; 0x44
 8003b94:	e7ca      	b.n	8003b2c <HAL_TIM_PWM_Start+0x38>
 8003b96:	233f      	movs	r3, #63	; 0x3f
 8003b98:	5cc3      	ldrb	r3, [r0, r3]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d1e7      	bne.n	8003b6e <HAL_TIM_PWM_Start+0x7a>
 8003b9e:	233f      	movs	r3, #63	; 0x3f
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	54c2      	strb	r2, [r0, r3]
 8003ba4:	e7ae      	b.n	8003b04 <HAL_TIM_PWM_Start+0x10>
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	40012c00 	.word	0x40012c00
 8003bac:	40014400 	.word	0x40014400
 8003bb0:	40014800 	.word	0x40014800
 8003bb4:	40000400 	.word	0x40000400

08003bb8 <HAL_TIM_PWM_ConfigChannel>:
{
 8003bb8:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003bba:	203c      	movs	r0, #60	; 0x3c
{
 8003bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003bbe:	5c1c      	ldrb	r4, [r3, r0]
 8003bc0:	2c01      	cmp	r4, #1
 8003bc2:	d100      	bne.n	8003bc6 <HAL_TIM_PWM_ConfigChannel+0xe>
 8003bc4:	e0de      	b.n	8003d84 <HAL_TIM_PWM_ConfigChannel+0x1cc>
 8003bc6:	2401      	movs	r4, #1
 8003bc8:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 8003bca:	2a08      	cmp	r2, #8
 8003bcc:	d100      	bne.n	8003bd0 <HAL_TIM_PWM_ConfigChannel+0x18>
 8003bce:	e0ac      	b.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x172>
 8003bd0:	d834      	bhi.n	8003c3c <HAL_TIM_PWM_ConfigChannel+0x84>
 8003bd2:	2a00      	cmp	r2, #0
 8003bd4:	d100      	bne.n	8003bd8 <HAL_TIM_PWM_ConfigChannel+0x20>
 8003bd6:	e07d      	b.n	8003cd4 <HAL_TIM_PWM_ConfigChannel+0x11c>
 8003bd8:	2a04      	cmp	r2, #4
 8003bda:	d161      	bne.n	8003ca0 <HAL_TIM_PWM_ConfigChannel+0xe8>
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bdc:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bde:	681a      	ldr	r2, [r3, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003be0:	4d77      	ldr	r5, [pc, #476]	; (8003dc0 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be2:	6a10      	ldr	r0, [r2, #32]
 8003be4:	43a0      	bics	r0, r4
 8003be6:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003be8:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003bea:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8003bec:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bee:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf0:	680d      	ldr	r5, [r1, #0]
 8003bf2:	022d      	lsls	r5, r5, #8
 8003bf4:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bf6:	2420      	movs	r4, #32
 8003bf8:	43a0      	bics	r0, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bfa:	688c      	ldr	r4, [r1, #8]
 8003bfc:	0124      	lsls	r4, r4, #4
 8003bfe:	4304      	orrs	r4, r0

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c00:	4870      	ldr	r0, [pc, #448]	; (8003dc4 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8003c02:	4282      	cmp	r2, r0
 8003c04:	d057      	beq.n	8003cb6 <HAL_TIM_PWM_ConfigChannel+0xfe>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c06:	4870      	ldr	r0, [pc, #448]	; (8003dc8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003c08:	4282      	cmp	r2, r0
 8003c0a:	d05b      	beq.n	8003cc4 <HAL_TIM_PWM_ConfigChannel+0x10c>
 8003c0c:	486f      	ldr	r0, [pc, #444]	; (8003dcc <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003c0e:	4282      	cmp	r2, r0
 8003c10:	d058      	beq.n	8003cc4 <HAL_TIM_PWM_ConfigChannel+0x10c>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c12:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003c14:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003c16:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003c18:	6390      	str	r0, [r2, #56]	; 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c1a:	2080      	movs	r0, #128	; 0x80

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c1c:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c1e:	6994      	ldr	r4, [r2, #24]
 8003c20:	0100      	lsls	r0, r0, #4
 8003c22:	4320      	orrs	r0, r4
 8003c24:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c26:	6990      	ldr	r0, [r2, #24]
 8003c28:	4c69      	ldr	r4, [pc, #420]	; (8003dd0 <HAL_TIM_PWM_ConfigChannel+0x218>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c2a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c2c:	4020      	ands	r0, r4
 8003c2e:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c30:	6990      	ldr	r0, [r2, #24]
 8003c32:	0209      	lsls	r1, r1, #8
 8003c34:	4301      	orrs	r1, r0
 8003c36:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003c38:	2000      	movs	r0, #0
      break;
 8003c3a:	e032      	b.n	8003ca2 <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 8003c3c:	2a0c      	cmp	r2, #12
 8003c3e:	d12f      	bne.n	8003ca0 <HAL_TIM_PWM_ConfigChannel+0xe8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c40:	681a      	ldr	r2, [r3, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c42:	4c64      	ldr	r4, [pc, #400]	; (8003dd4 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8003c44:	6a10      	ldr	r0, [r2, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c46:	4d5e      	ldr	r5, [pc, #376]	; (8003dc0 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c48:	4020      	ands	r0, r4
 8003c4a:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003c4c:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003c4e:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8003c50:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c52:	4028      	ands	r0, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c54:	680d      	ldr	r5, [r1, #0]
 8003c56:	022d      	lsls	r5, r5, #8
 8003c58:	4305      	orrs	r5, r0

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c5a:	485f      	ldr	r0, [pc, #380]	; (8003dd8 <HAL_TIM_PWM_ConfigChannel+0x220>)
 8003c5c:	4004      	ands	r4, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c5e:	6888      	ldr	r0, [r1, #8]
 8003c60:	0300      	lsls	r0, r0, #12
 8003c62:	4320      	orrs	r0, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c64:	4c57      	ldr	r4, [pc, #348]	; (8003dc4 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8003c66:	42a2      	cmp	r2, r4
 8003c68:	d01f      	beq.n	8003caa <HAL_TIM_PWM_ConfigChannel+0xf2>
 8003c6a:	4c57      	ldr	r4, [pc, #348]	; (8003dc8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003c6c:	42a2      	cmp	r2, r4
 8003c6e:	d01c      	beq.n	8003caa <HAL_TIM_PWM_ConfigChannel+0xf2>
 8003c70:	4c56      	ldr	r4, [pc, #344]	; (8003dcc <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003c72:	42a2      	cmp	r2, r4
 8003c74:	d019      	beq.n	8003caa <HAL_TIM_PWM_ConfigChannel+0xf2>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c76:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003c78:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003c7a:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003c7c:	6414      	str	r4, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7e:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c80:	2080      	movs	r0, #128	; 0x80
 8003c82:	69d4      	ldr	r4, [r2, #28]
 8003c84:	0100      	lsls	r0, r0, #4
 8003c86:	4320      	orrs	r0, r4
 8003c88:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c8a:	69d0      	ldr	r0, [r2, #28]
 8003c8c:	4c50      	ldr	r4, [pc, #320]	; (8003dd0 <HAL_TIM_PWM_ConfigChannel+0x218>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c8e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c90:	4020      	ands	r0, r4
 8003c92:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c94:	69d0      	ldr	r0, [r2, #28]
 8003c96:	0209      	lsls	r1, r1, #8
 8003c98:	4301      	orrs	r1, r0
 8003c9a:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9c:	2000      	movs	r0, #0
      break;
 8003c9e:	e000      	b.n	8003ca2 <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 8003ca0:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003ca2:	223c      	movs	r2, #60	; 0x3c
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	5499      	strb	r1, [r3, r2]
}
 8003ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003caa:	4c4c      	ldr	r4, [pc, #304]	; (8003ddc <HAL_TIM_PWM_ConfigChannel+0x224>)
 8003cac:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cae:	694e      	ldr	r6, [r1, #20]
 8003cb0:	01b6      	lsls	r6, r6, #6
 8003cb2:	4326      	orrs	r6, r4
 8003cb4:	e7df      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0xbe>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cb6:	2080      	movs	r0, #128	; 0x80
 8003cb8:	4384      	bics	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cba:	68c8      	ldr	r0, [r1, #12]
 8003cbc:	0100      	lsls	r0, r0, #4
 8003cbe:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cc0:	2040      	movs	r0, #64	; 0x40
 8003cc2:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cc4:	4846      	ldr	r0, [pc, #280]	; (8003de0 <HAL_TIM_PWM_ConfigChannel+0x228>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cc6:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cc8:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cca:	698e      	ldr	r6, [r1, #24]
 8003ccc:	433e      	orrs	r6, r7
 8003cce:	00b6      	lsls	r6, r6, #2
 8003cd0:	4306      	orrs	r6, r0
 8003cd2:	e79e      	b.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x5a>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cd4:	2673      	movs	r6, #115	; 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cd6:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cd8:	6a10      	ldr	r0, [r2, #32]
 8003cda:	43a0      	bics	r0, r4
 8003cdc:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003cde:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003ce0:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8003ce2:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ce4:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8003ce6:	680e      	ldr	r6, [r1, #0]
 8003ce8:	4334      	orrs	r4, r6
  tmpccer &= ~TIM_CCER_CC1P;
 8003cea:	2602      	movs	r6, #2
 8003cec:	43b0      	bics	r0, r6
  tmpccer |= OC_Config->OCPolarity;
 8003cee:	688e      	ldr	r6, [r1, #8]
 8003cf0:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cf2:	4e34      	ldr	r6, [pc, #208]	; (8003dc4 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8003cf4:	42b2      	cmp	r2, r6
 8003cf6:	d047      	beq.n	8003d88 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8003cf8:	4e33      	ldr	r6, [pc, #204]	; (8003dc8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003cfa:	42b2      	cmp	r2, r6
 8003cfc:	d044      	beq.n	8003d88 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8003cfe:	4e33      	ldr	r6, [pc, #204]	; (8003dcc <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003d00:	42b2      	cmp	r2, r6
 8003d02:	d041      	beq.n	8003d88 <HAL_TIM_PWM_ConfigChannel+0x1d0>
  TIMx->CR2 = tmpcr2;
 8003d04:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003d06:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003d08:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d0a:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8003d0c:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d0e:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8003d10:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d12:	6990      	ldr	r0, [r2, #24]
 8003d14:	4320      	orrs	r0, r4
 8003d16:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d18:	6990      	ldr	r0, [r2, #24]
 8003d1a:	3c04      	subs	r4, #4
 8003d1c:	43a0      	bics	r0, r4
 8003d1e:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d20:	6990      	ldr	r0, [r2, #24]
 8003d22:	4301      	orrs	r1, r0
 8003d24:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003d26:	2000      	movs	r0, #0
      break;
 8003d28:	e7bb      	b.n	8003ca2 <HAL_TIM_PWM_ConfigChannel+0xea>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d2a:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d2c:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d2e:	4c2d      	ldr	r4, [pc, #180]	; (8003de4 <HAL_TIM_PWM_ConfigChannel+0x22c>)
 8003d30:	6a10      	ldr	r0, [r2, #32]
 8003d32:	4020      	ands	r0, r4
 8003d34:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003d36:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003d38:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8003d3a:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d3c:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8003d3e:	680e      	ldr	r6, [r1, #0]
 8003d40:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8003d42:	4c29      	ldr	r4, [pc, #164]	; (8003de8 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8003d44:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d46:	688c      	ldr	r4, [r1, #8]
 8003d48:	0224      	lsls	r4, r4, #8
 8003d4a:	4320      	orrs	r0, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d4c:	4c1d      	ldr	r4, [pc, #116]	; (8003dc4 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8003d4e:	42a2      	cmp	r2, r4
 8003d50:	d027      	beq.n	8003da2 <HAL_TIM_PWM_ConfigChannel+0x1ea>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d52:	4c1d      	ldr	r4, [pc, #116]	; (8003dc8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003d54:	42a2      	cmp	r2, r4
 8003d56:	d02b      	beq.n	8003db0 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8003d58:	4c1c      	ldr	r4, [pc, #112]	; (8003dcc <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003d5a:	42a2      	cmp	r2, r4
 8003d5c:	d028      	beq.n	8003db0 <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCR3 = OC_Config->Pulse;
 8003d5e:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003d60:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003d62:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003d64:	63d4      	str	r4, [r2, #60]	; 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d66:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8003d68:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d6a:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d6c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d6e:	4320      	orrs	r0, r4
 8003d70:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d72:	69d0      	ldr	r0, [r2, #28]
 8003d74:	3c04      	subs	r4, #4
 8003d76:	43a0      	bics	r0, r4
 8003d78:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d7a:	69d0      	ldr	r0, [r2, #28]
 8003d7c:	4301      	orrs	r1, r0
 8003d7e:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003d80:	2000      	movs	r0, #0
      break;
 8003d82:	e78e      	b.n	8003ca2 <HAL_TIM_PWM_ConfigChannel+0xea>
  __HAL_LOCK(htim);
 8003d84:	2002      	movs	r0, #2
 8003d86:	e78f      	b.n	8003ca8 <HAL_TIM_PWM_ConfigChannel+0xf0>
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d88:	2608      	movs	r6, #8
 8003d8a:	43b0      	bics	r0, r6
    tmpccer |= OC_Config->OCNPolarity;
 8003d8c:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d8e:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8003d90:	4330      	orrs	r0, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d92:	2604      	movs	r6, #4
 8003d94:	43b0      	bics	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d96:	4e15      	ldr	r6, [pc, #84]	; (8003dec <HAL_TIM_PWM_ConfigChannel+0x234>)
 8003d98:	402e      	ands	r6, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d9a:	694d      	ldr	r5, [r1, #20]
 8003d9c:	433d      	orrs	r5, r7
 8003d9e:	4335      	orrs	r5, r6
 8003da0:	e7b0      	b.n	8003d04 <HAL_TIM_PWM_ConfigChannel+0x14c>
    tmpccer &= ~TIM_CCER_CC3NP;
 8003da2:	4c13      	ldr	r4, [pc, #76]	; (8003df0 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8003da4:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003da6:	68cc      	ldr	r4, [r1, #12]
 8003da8:	0224      	lsls	r4, r4, #8
 8003daa:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dac:	4808      	ldr	r0, [pc, #32]	; (8003dd0 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8003dae:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003db0:	4c10      	ldr	r4, [pc, #64]	; (8003df4 <HAL_TIM_PWM_ConfigChannel+0x23c>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003db2:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003db4:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003db6:	698d      	ldr	r5, [r1, #24]
 8003db8:	433d      	orrs	r5, r7
 8003dba:	012d      	lsls	r5, r5, #4
 8003dbc:	4325      	orrs	r5, r4
 8003dbe:	e7ce      	b.n	8003d5e <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8003dc0:	ffff8cff 	.word	0xffff8cff
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40014400 	.word	0x40014400
 8003dcc:	40014800 	.word	0x40014800
 8003dd0:	fffffbff 	.word	0xfffffbff
 8003dd4:	ffffefff 	.word	0xffffefff
 8003dd8:	ffffdfff 	.word	0xffffdfff
 8003ddc:	ffffbfff 	.word	0xffffbfff
 8003de0:	fffff3ff 	.word	0xfffff3ff
 8003de4:	fffffeff 	.word	0xfffffeff
 8003de8:	fffffdff 	.word	0xfffffdff
 8003dec:	fffffcff 	.word	0xfffffcff
 8003df0:	fffff7ff 	.word	0xfffff7ff
 8003df4:	ffffcfff 	.word	0xffffcfff

08003df8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003df8:	233c      	movs	r3, #60	; 0x3c
{
 8003dfa:	b570      	push	{r4, r5, r6, lr}
 8003dfc:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8003dfe:	5cc0      	ldrb	r0, [r0, r3]
 8003e00:	2801      	cmp	r0, #1
 8003e02:	d100      	bne.n	8003e06 <HAL_TIM_ConfigClockSource+0xe>
 8003e04:	e075      	b.n	8003ef2 <HAL_TIM_ConfigClockSource+0xfa>
 8003e06:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003e0a:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8003e10:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e12:	4d52      	ldr	r5, [pc, #328]	; (8003f5c <HAL_TIM_ConfigClockSource+0x164>)
  tmpsmcr = htim->Instance->SMCR;
 8003e14:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e16:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8003e18:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003e1a:	680b      	ldr	r3, [r1, #0]
 8003e1c:	2b60      	cmp	r3, #96	; 0x60
 8003e1e:	d100      	bne.n	8003e22 <HAL_TIM_ConfigClockSource+0x2a>
 8003e20:	e069      	b.n	8003ef6 <HAL_TIM_ConfigClockSource+0xfe>
 8003e22:	d823      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x74>
 8003e24:	2b40      	cmp	r3, #64	; 0x40
 8003e26:	d100      	bne.n	8003e2a <HAL_TIM_ConfigClockSource+0x32>
 8003e28:	e07f      	b.n	8003f2a <HAL_TIM_ConfigClockSource+0x132>
 8003e2a:	d952      	bls.n	8003ed2 <HAL_TIM_ConfigClockSource+0xda>
 8003e2c:	2b50      	cmp	r3, #80	; 0x50
 8003e2e:	d13b      	bne.n	8003ea8 <HAL_TIM_ConfigClockSource+0xb0>
                               sClockSourceConfig->ClockPolarity,
 8003e30:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003e32:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e34:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e36:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e38:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3a:	43a6      	bics	r6, r4
 8003e3c:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e3e:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8003e40:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e42:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e44:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e46:	240a      	movs	r4, #10
 8003e48:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8003e4a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e4c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e4e:	6201      	str	r1, [r0, #32]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e50:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003e52:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e54:	438b      	bics	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e56:	3919      	subs	r1, #25
 8003e58:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e5a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e5e:	233d      	movs	r3, #61	; 0x3d
 8003e60:	2101      	movs	r1, #1
 8003e62:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8003e64:	2100      	movs	r1, #0
 8003e66:	3b01      	subs	r3, #1
 8003e68:	54d1      	strb	r1, [r2, r3]
}
 8003e6a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003e6c:	2480      	movs	r4, #128	; 0x80
 8003e6e:	0164      	lsls	r4, r4, #5
 8003e70:	42a3      	cmp	r3, r4
 8003e72:	d03c      	beq.n	8003eee <HAL_TIM_ConfigClockSource+0xf6>
 8003e74:	2480      	movs	r4, #128	; 0x80
 8003e76:	01a4      	lsls	r4, r4, #6
 8003e78:	42a3      	cmp	r3, r4
 8003e7a:	d117      	bne.n	8003eac <HAL_TIM_ConfigClockSource+0xb4>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e7c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e7e:	4b38      	ldr	r3, [pc, #224]	; (8003f60 <HAL_TIM_ConfigClockSource+0x168>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e80:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e82:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e84:	688b      	ldr	r3, [r1, #8]
 8003e86:	68c9      	ldr	r1, [r1, #12]
 8003e88:	432b      	orrs	r3, r5
 8003e8a:	0209      	lsls	r1, r1, #8
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e90:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e92:	2380      	movs	r3, #128	; 0x80
 8003e94:	6881      	ldr	r1, [r0, #8]
 8003e96:	01db      	lsls	r3, r3, #7
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9c:	2000      	movs	r0, #0
      break;
 8003e9e:	e7de      	b.n	8003e5e <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003ea0:	2110      	movs	r1, #16
 8003ea2:	001c      	movs	r4, r3
 8003ea4:	438c      	bics	r4, r1
 8003ea6:	d019      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0xe4>
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	e7d8      	b.n	8003e5e <HAL_TIM_ConfigClockSource+0x66>
 8003eac:	2b70      	cmp	r3, #112	; 0x70
 8003eae:	d1fb      	bne.n	8003ea8 <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr = TIMx->SMCR;
 8003eb0:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb2:	4b2b      	ldr	r3, [pc, #172]	; (8003f60 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eb4:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb6:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eb8:	688b      	ldr	r3, [r1, #8]
 8003eba:	68c9      	ldr	r1, [r1, #12]
 8003ebc:	432b      	orrs	r3, r5
 8003ebe:	0209      	lsls	r1, r1, #8
 8003ec0:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ec2:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ec4:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8003ec6:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003ec8:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eca:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8003ecc:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ece:	2000      	movs	r0, #0
      break;
 8003ed0:	e7c5      	b.n	8003e5e <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d002      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0xe4>
 8003ed6:	d9e3      	bls.n	8003ea0 <HAL_TIM_ConfigClockSource+0xa8>
 8003ed8:	2b30      	cmp	r3, #48	; 0x30
 8003eda:	d1e5      	bne.n	8003ea8 <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr &= ~TIM_SMCR_TS;
 8003edc:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003ede:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ee0:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ee2:	430b      	orrs	r3, r1
 8003ee4:	2107      	movs	r1, #7
 8003ee6:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003ee8:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003eea:	2000      	movs	r0, #0
}
 8003eec:	e7b7      	b.n	8003e5e <HAL_TIM_ConfigClockSource+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8003eee:	2000      	movs	r0, #0
 8003ef0:	e7b5      	b.n	8003e5e <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8003ef2:	2002      	movs	r0, #2
 8003ef4:	e7b9      	b.n	8003e6a <HAL_TIM_ConfigClockSource+0x72>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef6:	2510      	movs	r5, #16
 8003ef8:	6a04      	ldr	r4, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8003efa:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003efc:	43ac      	bics	r4, r5
                               sClockSourceConfig->ClockFilter);
 8003efe:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f00:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f02:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f04:	4e17      	ldr	r6, [pc, #92]	; (8003f64 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f06:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f08:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f0a:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f0c:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8003f0e:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8003f10:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f12:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f14:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	4323      	orrs	r3, r4
  TIMx->CCER = tmpccer;
 8003f1a:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003f1c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f1e:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f20:	3909      	subs	r1, #9
 8003f22:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003f24:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003f26:	2000      	movs	r0, #0
}
 8003f28:	e799      	b.n	8003e5e <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 8003f2a:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003f2c:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8003f2e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f30:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f32:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f34:	43a6      	bics	r6, r4
 8003f36:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f38:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8003f3a:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f3c:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f3e:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f40:	240a      	movs	r4, #10
 8003f42:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8003f44:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8003f46:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003f48:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f4a:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003f4c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f4e:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f50:	3929      	subs	r1, #41	; 0x29
 8003f52:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003f54:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003f56:	2000      	movs	r0, #0
}
 8003f58:	e781      	b.n	8003e5e <HAL_TIM_ConfigClockSource+0x66>
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	ffff0088 	.word	0xffff0088
 8003f60:	ffff00ff 	.word	0xffff00ff
 8003f64:	ffff0fff 	.word	0xffff0fff

08003f68 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8003f68:	233c      	movs	r3, #60	; 0x3c
{
 8003f6a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003f6c:	5cc2      	ldrb	r2, [r0, r3]
 8003f6e:	2a01      	cmp	r2, #1
 8003f70:	d04d      	beq.n	800400e <HAL_TIM_SlaveConfigSynchro+0xa6>
 8003f72:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	2202      	movs	r2, #2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003f76:	2607      	movs	r6, #7
  __HAL_LOCK(htim);
 8003f78:	54c5      	strb	r5, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8003f7e:	6804      	ldr	r4, [r0, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f80:	3333      	adds	r3, #51	; 0x33
  tmpsmcr = htim->Instance->SMCR;
 8003f82:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f84:	439a      	bics	r2, r3
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003f86:	684b      	ldr	r3, [r1, #4]
 8003f88:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003f8a:	43b2      	bics	r2, r6
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003f8c:	680e      	ldr	r6, [r1, #0]
 8003f8e:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 8003f90:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8003f92:	2b50      	cmp	r3, #80	; 0x50
 8003f94:	d05f      	beq.n	8004056 <HAL_TIM_SlaveConfigSynchro+0xee>
 8003f96:	d90f      	bls.n	8003fb8 <HAL_TIM_SlaveConfigSynchro+0x50>
 8003f98:	2b60      	cmp	r3, #96	; 0x60
 8003f9a:	d03a      	beq.n	8004012 <HAL_TIM_SlaveConfigSynchro+0xaa>
 8003f9c:	2b70      	cmp	r3, #112	; 0x70
 8003f9e:	d10e      	bne.n	8003fbe <HAL_TIM_SlaveConfigSynchro+0x56>
  tmpsmcr = TIMx->SMCR;
 8003fa0:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa2:	4b35      	ldr	r3, [pc, #212]	; (8004078 <HAL_TIM_SlaveConfigSynchro+0x110>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fa4:	688d      	ldr	r5, [r1, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa6:	401a      	ands	r2, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fa8:	68cb      	ldr	r3, [r1, #12]
 8003faa:	6909      	ldr	r1, [r1, #16]
 8003fac:	432b      	orrs	r3, r5
 8003fae:	0209      	lsls	r1, r1, #8
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8003fb4:	60a3      	str	r3, [r4, #8]
 8003fb6:	e00f      	b.n	8003fd8 <HAL_TIM_SlaveConfigSynchro+0x70>
  switch (sSlaveConfig->InputTrigger)
 8003fb8:	2b40      	cmp	r3, #64	; 0x40
 8003fba:	d03d      	beq.n	8004038 <HAL_TIM_SlaveConfigSynchro+0xd0>
 8003fbc:	d907      	bls.n	8003fce <HAL_TIM_SlaveConfigSynchro+0x66>
    htim->State = HAL_TIM_STATE_READY;
 8003fbe:	233d      	movs	r3, #61	; 0x3d
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(htim);
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8003fca:	2001      	movs	r0, #1
 8003fcc:	e013      	b.n	8003ff6 <HAL_TIM_SlaveConfigSynchro+0x8e>
  switch (sSlaveConfig->InputTrigger)
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d002      	beq.n	8003fd8 <HAL_TIM_SlaveConfigSynchro+0x70>
 8003fd2:	d911      	bls.n	8003ff8 <HAL_TIM_SlaveConfigSynchro+0x90>
 8003fd4:	2b30      	cmp	r3, #48	; 0x30
 8003fd6:	d1f2      	bne.n	8003fbe <HAL_TIM_SlaveConfigSynchro+0x56>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003fd8:	2240      	movs	r2, #64	; 0x40
 8003fda:	68e3      	ldr	r3, [r4, #12]
 8003fdc:	4393      	bics	r3, r2
 8003fde:	60e3      	str	r3, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003fe0:	68e3      	ldr	r3, [r4, #12]
 8003fe2:	4a26      	ldr	r2, [pc, #152]	; (800407c <HAL_TIM_SlaveConfigSynchro+0x114>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60e3      	str	r3, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	2201      	movs	r2, #1
 8003fea:	233d      	movs	r3, #61	; 0x3d
 8003fec:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8003fee:	2200      	movs	r2, #0
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8003ff4:	2000      	movs	r0, #0
}
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	4393      	bics	r3, r2
 8003ffc:	d0ec      	beq.n	8003fd8 <HAL_TIM_SlaveConfigSynchro+0x70>
    htim->State = HAL_TIM_STATE_READY;
 8003ffe:	233d      	movs	r3, #61	; 0x3d
 8004000:	2201      	movs	r2, #1
 8004002:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(htim);
 8004004:	2200      	movs	r2, #0
 8004006:	3b01      	subs	r3, #1
 8004008:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 800400a:	2001      	movs	r0, #1
 800400c:	e7f3      	b.n	8003ff6 <HAL_TIM_SlaveConfigSynchro+0x8e>
  __HAL_LOCK(htim);
 800400e:	2002      	movs	r0, #2
 8004010:	e7f1      	b.n	8003ff6 <HAL_TIM_SlaveConfigSynchro+0x8e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004012:	2510      	movs	r5, #16
                               sSlaveConfig->TriggerPolarity,
 8004014:	688b      	ldr	r3, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8004016:	690a      	ldr	r2, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004018:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800401a:	4e19      	ldr	r6, [pc, #100]	; (8004080 <HAL_TIM_SlaveConfigSynchro+0x118>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800401c:	43a9      	bics	r1, r5
 800401e:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004020:	69a5      	ldr	r5, [r4, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004022:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004024:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004026:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004028:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 800402a:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 800402c:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800402e:	43a9      	bics	r1, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8004030:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8004032:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8004034:	6223      	str	r3, [r4, #32]
 8004036:	e7cf      	b.n	8003fd8 <HAL_TIM_SlaveConfigSynchro+0x70>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004038:	2e05      	cmp	r6, #5
 800403a:	d0c0      	beq.n	8003fbe <HAL_TIM_SlaveConfigSynchro+0x56>
      tmpccer = htim->Instance->CCER;
 800403c:	6a26      	ldr	r6, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800403e:	6a23      	ldr	r3, [r4, #32]
 8004040:	43ab      	bics	r3, r5
 8004042:	6223      	str	r3, [r4, #32]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004044:	23f0      	movs	r3, #240	; 0xf0
      tmpccmr1 = htim->Instance->CCMR1;
 8004046:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004048:	439a      	bics	r2, r3
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800404a:	690b      	ldr	r3, [r1, #16]
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 = tmpccmr1;
 8004050:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8004052:	6226      	str	r6, [r4, #32]
 8004054:	e7c0      	b.n	8003fd8 <HAL_TIM_SlaveConfigSynchro+0x70>
                               sSlaveConfig->TriggerPolarity,
 8004056:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8004058:	690b      	ldr	r3, [r1, #16]
  tmpccer = TIMx->CCER;
 800405a:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800405c:	6a26      	ldr	r6, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800405e:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004060:	43ae      	bics	r6, r5
 8004062:	6226      	str	r6, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004064:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8004066:	69a5      	ldr	r5, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004068:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800406a:	432b      	orrs	r3, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800406c:	250a      	movs	r5, #10
 800406e:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8004070:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004072:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004074:	6222      	str	r2, [r4, #32]
 8004076:	e7af      	b.n	8003fd8 <HAL_TIM_SlaveConfigSynchro+0x70>
 8004078:	ffff00ff 	.word	0xffff00ff
 800407c:	ffffbfff 	.word	0xffffbfff
 8004080:	ffff0fff 	.word	0xffff0fff

08004084 <HAL_TIM_OC_DelayElapsedCallback>:
 8004084:	4770      	bx	lr
 8004086:	46c0      	nop			; (mov r8, r8)

08004088 <HAL_TIM_IC_CaptureCallback>:
 8004088:	4770      	bx	lr
 800408a:	46c0      	nop			; (mov r8, r8)

0800408c <HAL_TIM_PWM_PulseFinishedCallback>:
 800408c:	4770      	bx	lr
 800408e:	46c0      	nop			; (mov r8, r8)

08004090 <HAL_TIM_TriggerCallback>:
 8004090:	4770      	bx	lr
 8004092:	46c0      	nop			; (mov r8, r8)

08004094 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004094:	2202      	movs	r2, #2
 8004096:	6803      	ldr	r3, [r0, #0]
{
 8004098:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800409a:	6919      	ldr	r1, [r3, #16]
{
 800409c:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800409e:	420a      	tst	r2, r1
 80040a0:	d002      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040a2:	68d9      	ldr	r1, [r3, #12]
 80040a4:	420a      	tst	r2, r1
 80040a6:	d165      	bne.n	8004174 <HAL_TIM_IRQHandler+0xe0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040a8:	2204      	movs	r2, #4
 80040aa:	6919      	ldr	r1, [r3, #16]
 80040ac:	420a      	tst	r2, r1
 80040ae:	d002      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x22>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040b0:	68d9      	ldr	r1, [r3, #12]
 80040b2:	420a      	tst	r2, r1
 80040b4:	d14b      	bne.n	800414e <HAL_TIM_IRQHandler+0xba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040b6:	2208      	movs	r2, #8
 80040b8:	6919      	ldr	r1, [r3, #16]
 80040ba:	420a      	tst	r2, r1
 80040bc:	d002      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x30>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040be:	68d9      	ldr	r1, [r3, #12]
 80040c0:	420a      	tst	r2, r1
 80040c2:	d133      	bne.n	800412c <HAL_TIM_IRQHandler+0x98>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040c4:	2210      	movs	r2, #16
 80040c6:	6919      	ldr	r1, [r3, #16]
 80040c8:	420a      	tst	r2, r1
 80040ca:	d002      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x3e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040cc:	68d9      	ldr	r1, [r3, #12]
 80040ce:	420a      	tst	r2, r1
 80040d0:	d11c      	bne.n	800410c <HAL_TIM_IRQHandler+0x78>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040d2:	2201      	movs	r2, #1
 80040d4:	6919      	ldr	r1, [r3, #16]
 80040d6:	420a      	tst	r2, r1
 80040d8:	d002      	beq.n	80040e0 <HAL_TIM_IRQHandler+0x4c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040da:	68d9      	ldr	r1, [r3, #12]
 80040dc:	420a      	tst	r2, r1
 80040de:	d15c      	bne.n	800419a <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040e0:	2280      	movs	r2, #128	; 0x80
 80040e2:	6919      	ldr	r1, [r3, #16]
 80040e4:	420a      	tst	r2, r1
 80040e6:	d002      	beq.n	80040ee <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040e8:	68d9      	ldr	r1, [r3, #12]
 80040ea:	420a      	tst	r2, r1
 80040ec:	d15c      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x114>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040ee:	2240      	movs	r2, #64	; 0x40
 80040f0:	6919      	ldr	r1, [r3, #16]
 80040f2:	420a      	tst	r2, r1
 80040f4:	d002      	beq.n	80040fc <HAL_TIM_IRQHandler+0x68>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040f6:	68d9      	ldr	r1, [r3, #12]
 80040f8:	420a      	tst	r2, r1
 80040fa:	d15d      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x124>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040fc:	2220      	movs	r2, #32
 80040fe:	6919      	ldr	r1, [r3, #16]
 8004100:	420a      	tst	r2, r1
 8004102:	d002      	beq.n	800410a <HAL_TIM_IRQHandler+0x76>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004104:	68d9      	ldr	r1, [r3, #12]
 8004106:	420a      	tst	r2, r1
 8004108:	d141      	bne.n	800418e <HAL_TIM_IRQHandler+0xfa>
}
 800410a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800410c:	3a21      	subs	r2, #33	; 0x21
 800410e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004110:	3219      	adds	r2, #25
 8004112:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004114:	69da      	ldr	r2, [r3, #28]
 8004116:	23c0      	movs	r3, #192	; 0xc0
 8004118:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800411a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800411c:	421a      	tst	r2, r3
 800411e:	d05e      	beq.n	80041de <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004120:	f7ff ffb2 	bl	8004088 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004124:	2300      	movs	r3, #0
 8004126:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	e7d2      	b.n	80040d2 <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800412c:	3a11      	subs	r2, #17
 800412e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004130:	320d      	adds	r2, #13
 8004132:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004134:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004136:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004138:	079b      	lsls	r3, r3, #30
 800413a:	d14d      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800413c:	f7ff ffa2 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004140:	0020      	movs	r0, r4
 8004142:	f7ff ffa3 	bl	800408c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004146:	2300      	movs	r3, #0
 8004148:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	e7ba      	b.n	80040c4 <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800414e:	3a09      	subs	r2, #9
 8004150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004152:	3207      	adds	r2, #7
 8004154:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004156:	699a      	ldr	r2, [r3, #24]
 8004158:	23c0      	movs	r3, #192	; 0xc0
 800415a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800415c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800415e:	421a      	tst	r2, r3
 8004160:	d137      	bne.n	80041d2 <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004162:	f7ff ff8f 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004166:	0020      	movs	r0, r4
 8004168:	f7ff ff90 	bl	800408c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416c:	2300      	movs	r3, #0
 800416e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	e7a0      	b.n	80040b6 <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004174:	3a05      	subs	r2, #5
 8004176:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004178:	3204      	adds	r2, #4
 800417a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	079b      	lsls	r3, r3, #30
 8004180:	d021      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 8004182:	f7ff ff81 	bl	8004088 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004186:	2300      	movs	r3, #0
 8004188:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	e78c      	b.n	80040a8 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800418e:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 8004190:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004192:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004194:	f000 f8d2 	bl	800433c <HAL_TIMEx_CommutCallback>
}
 8004198:	e7b7      	b.n	800410a <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800419a:	3a03      	subs	r2, #3
 800419c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800419e:	0020      	movs	r0, r4
 80041a0:	f7fc fb8a 	bl	80008b8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	e79b      	b.n	80040e0 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041a8:	3a02      	subs	r2, #2
 80041aa:	3aff      	subs	r2, #255	; 0xff
 80041ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80041ae:	0020      	movs	r0, r4
 80041b0:	f000 f8c6 	bl	8004340 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	e79a      	b.n	80040ee <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041b8:	3a81      	subs	r2, #129	; 0x81
 80041ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80041bc:	0020      	movs	r0, r4
 80041be:	f7ff ff67 	bl	8004090 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	e79a      	b.n	80040fc <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	f7ff ff5d 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ca:	0020      	movs	r0, r4
 80041cc:	f7ff ff5e 	bl	800408c <HAL_TIM_PWM_PulseFinishedCallback>
 80041d0:	e7d9      	b.n	8004186 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80041d2:	f7ff ff59 	bl	8004088 <HAL_TIM_IC_CaptureCallback>
 80041d6:	e7c9      	b.n	800416c <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 80041d8:	f7ff ff56 	bl	8004088 <HAL_TIM_IC_CaptureCallback>
 80041dc:	e7b3      	b.n	8004146 <HAL_TIM_IRQHandler+0xb2>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041de:	f7ff ff51 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e2:	0020      	movs	r0, r4
 80041e4:	f7ff ff52 	bl	800408c <HAL_TIM_PWM_PulseFinishedCallback>
 80041e8:	e79c      	b.n	8004124 <HAL_TIM_IRQHandler+0x90>
 80041ea:	46c0      	nop			; (mov r8, r8)

080041ec <HAL_TIMEx_PWMN_Start>:
 80041ec:	2900      	cmp	r1, #0
 80041ee:	d125      	bne.n	800423c <HAL_TIMEx_PWMN_Start+0x50>
 80041f0:	2342      	movs	r3, #66	; 0x42
 80041f2:	5cc2      	ldrb	r2, [r0, r3]
 80041f4:	2a01      	cmp	r2, #1
 80041f6:	d129      	bne.n	800424c <HAL_TIMEx_PWMN_Start+0x60>
 80041f8:	2202      	movs	r2, #2
 80041fa:	54c2      	strb	r2, [r0, r3]
 80041fc:	221f      	movs	r2, #31
 80041fe:	4011      	ands	r1, r2
 8004200:	3a1b      	subs	r2, #27
 8004202:	408a      	lsls	r2, r1
 8004204:	6803      	ldr	r3, [r0, #0]
 8004206:	6a19      	ldr	r1, [r3, #32]
 8004208:	4391      	bics	r1, r2
 800420a:	6219      	str	r1, [r3, #32]
 800420c:	6a19      	ldr	r1, [r3, #32]
 800420e:	430a      	orrs	r2, r1
 8004210:	621a      	str	r2, [r3, #32]
 8004212:	2280      	movs	r2, #128	; 0x80
 8004214:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004216:	0212      	lsls	r2, r2, #8
 8004218:	430a      	orrs	r2, r1
 800421a:	645a      	str	r2, [r3, #68]	; 0x44
 800421c:	4a15      	ldr	r2, [pc, #84]	; (8004274 <HAL_TIMEx_PWMN_Start+0x88>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d016      	beq.n	8004250 <HAL_TIMEx_PWMN_Start+0x64>
 8004222:	2280      	movs	r2, #128	; 0x80
 8004224:	05d2      	lsls	r2, r2, #23
 8004226:	4293      	cmp	r3, r2
 8004228:	d012      	beq.n	8004250 <HAL_TIMEx_PWMN_Start+0x64>
 800422a:	4a13      	ldr	r2, [pc, #76]	; (8004278 <HAL_TIMEx_PWMN_Start+0x8c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00f      	beq.n	8004250 <HAL_TIMEx_PWMN_Start+0x64>
 8004230:	2101      	movs	r1, #1
 8004232:	2000      	movs	r0, #0
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	4770      	bx	lr
 800423c:	2904      	cmp	r1, #4
 800423e:	d00e      	beq.n	800425e <HAL_TIMEx_PWMN_Start+0x72>
 8004240:	2908      	cmp	r1, #8
 8004242:	d011      	beq.n	8004268 <HAL_TIMEx_PWMN_Start+0x7c>
 8004244:	2345      	movs	r3, #69	; 0x45
 8004246:	5cc2      	ldrb	r2, [r0, r3]
 8004248:	2a01      	cmp	r2, #1
 800424a:	d0d5      	beq.n	80041f8 <HAL_TIMEx_PWMN_Start+0xc>
 800424c:	2001      	movs	r0, #1
 800424e:	e7f4      	b.n	800423a <HAL_TIMEx_PWMN_Start+0x4e>
 8004250:	2207      	movs	r2, #7
 8004252:	6899      	ldr	r1, [r3, #8]
 8004254:	400a      	ands	r2, r1
 8004256:	2a06      	cmp	r2, #6
 8004258:	d1ea      	bne.n	8004230 <HAL_TIMEx_PWMN_Start+0x44>
 800425a:	2000      	movs	r0, #0
 800425c:	e7ed      	b.n	800423a <HAL_TIMEx_PWMN_Start+0x4e>
 800425e:	2343      	movs	r3, #67	; 0x43
 8004260:	5cc2      	ldrb	r2, [r0, r3]
 8004262:	2a01      	cmp	r2, #1
 8004264:	d0c8      	beq.n	80041f8 <HAL_TIMEx_PWMN_Start+0xc>
 8004266:	e7f1      	b.n	800424c <HAL_TIMEx_PWMN_Start+0x60>
 8004268:	2344      	movs	r3, #68	; 0x44
 800426a:	5cc2      	ldrb	r2, [r0, r3]
 800426c:	2a01      	cmp	r2, #1
 800426e:	d0c3      	beq.n	80041f8 <HAL_TIMEx_PWMN_Start+0xc>
 8004270:	e7ec      	b.n	800424c <HAL_TIMEx_PWMN_Start+0x60>
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40000400 	.word	0x40000400

0800427c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800427c:	233c      	movs	r3, #60	; 0x3c
{
 800427e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8004280:	5cc3      	ldrb	r3, [r0, r3]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d021      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004286:	233d      	movs	r3, #61	; 0x3d
 8004288:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800428a:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 800428e:	6803      	ldr	r3, [r0, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004292:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004294:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004296:	680d      	ldr	r5, [r1, #0]
 8004298:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800429a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429c:	4a0c      	ldr	r2, [pc, #48]	; (80042d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d006      	beq.n	80042b0 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80042a2:	2280      	movs	r2, #128	; 0x80
 80042a4:	05d2      	lsls	r2, r2, #23
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d002      	beq.n	80042b0 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80042aa:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d104      	bne.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042b0:	2280      	movs	r2, #128	; 0x80
 80042b2:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042b4:	684a      	ldr	r2, [r1, #4]
 80042b6:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042b8:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042ba:	233d      	movs	r3, #61	; 0x3d
 80042bc:	2201      	movs	r2, #1
 80042be:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80042c0:	2200      	movs	r2, #0
 80042c2:	3b01      	subs	r3, #1
 80042c4:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80042c6:	2000      	movs	r0, #0
}
 80042c8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80042ca:	2002      	movs	r0, #2
 80042cc:	e7fc      	b.n	80042c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40000400 	.word	0x40000400

080042d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d8:	223c      	movs	r2, #60	; 0x3c
{
 80042da:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80042dc:	5c83      	ldrb	r3, [r0, r2]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d01e      	beq.n	8004320 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042e2:	68cb      	ldr	r3, [r1, #12]
 80042e4:	4c0f      	ldr	r4, [pc, #60]	; (8004324 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 80042e6:	4023      	ands	r3, r4
 80042e8:	688c      	ldr	r4, [r1, #8]
 80042ea:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042ec:	4c0e      	ldr	r4, [pc, #56]	; (8004328 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 80042ee:	4023      	ands	r3, r4
 80042f0:	684c      	ldr	r4, [r1, #4]
 80042f2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042f4:	4c0d      	ldr	r4, [pc, #52]	; (800432c <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 80042f6:	4023      	ands	r3, r4
 80042f8:	680c      	ldr	r4, [r1, #0]
 80042fa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042fc:	4c0c      	ldr	r4, [pc, #48]	; (8004330 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 80042fe:	4023      	ands	r3, r4
 8004300:	690c      	ldr	r4, [r1, #16]
 8004302:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004304:	4c0b      	ldr	r4, [pc, #44]	; (8004334 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8004306:	4023      	ands	r3, r4
 8004308:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800430a:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800430c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800430e:	4c0a      	ldr	r4, [pc, #40]	; (8004338 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8004310:	4023      	ands	r3, r4
 8004312:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004314:	6801      	ldr	r1, [r0, #0]
 8004316:	644b      	str	r3, [r1, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004318:	2300      	movs	r3, #0
 800431a:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 800431c:	2000      	movs	r0, #0
}
 800431e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8004320:	2002      	movs	r0, #2
 8004322:	e7fc      	b.n	800431e <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 8004324:	fffffcff 	.word	0xfffffcff
 8004328:	fffffbff 	.word	0xfffffbff
 800432c:	fffff7ff 	.word	0xfffff7ff
 8004330:	ffffefff 	.word	0xffffefff
 8004334:	ffffdfff 	.word	0xffffdfff
 8004338:	ffffbfff 	.word	0xffffbfff

0800433c <HAL_TIMEx_CommutCallback>:
 800433c:	4770      	bx	lr
 800433e:	46c0      	nop			; (mov r8, r8)

08004340 <HAL_TIMEx_BreakCallback>:
 8004340:	4770      	bx	lr
 8004342:	46c0      	nop			; (mov r8, r8)

08004344 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	4657      	mov	r7, sl
 8004348:	464e      	mov	r6, r9
 800434a:	4645      	mov	r5, r8
 800434c:	46de      	mov	lr, fp
 800434e:	b5e0      	push	{r5, r6, r7, lr}
 8004350:	001e      	movs	r6, r3
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004352:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8004354:	0005      	movs	r5, r0
 8004356:	000f      	movs	r7, r1
 8004358:	0014      	movs	r4, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800435a:	2b20      	cmp	r3, #32
 800435c:	d000      	beq.n	8004360 <HAL_UART_Transmit+0x1c>
 800435e:	e0a8      	b.n	80044b2 <HAL_UART_Transmit+0x16e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004360:	2900      	cmp	r1, #0
 8004362:	d04a      	beq.n	80043fa <HAL_UART_Transmit+0xb6>
 8004364:	2a00      	cmp	r2, #0
 8004366:	d048      	beq.n	80043fa <HAL_UART_Transmit+0xb6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004368:	2380      	movs	r3, #128	; 0x80
 800436a:	6882      	ldr	r2, [r0, #8]
 800436c:	015b      	lsls	r3, r3, #5
 800436e:	429a      	cmp	r2, r3
 8004370:	d104      	bne.n	800437c <HAL_UART_Transmit+0x38>
 8004372:	6903      	ldr	r3, [r0, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_UART_Transmit+0x38>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004378:	07cb      	lsls	r3, r1, #31
 800437a:	d43e      	bmi.n	80043fa <HAL_UART_Transmit+0xb6>
      {
        return  HAL_ERROR;
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437c:	2200      	movs	r2, #0
 800437e:	2384      	movs	r3, #132	; 0x84
 8004380:	50ea      	str	r2, [r5, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004382:	3b63      	subs	r3, #99	; 0x63
 8004384:	67eb      	str	r3, [r5, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004386:	f7fd f837 	bl	80013f8 <HAL_GetTick>

    huart->TxXferSize  = Size;
 800438a:	2350      	movs	r3, #80	; 0x50
 800438c:	52ec      	strh	r4, [r5, r3]
    huart->TxXferCount = Size;
 800438e:	3302      	adds	r3, #2
      pdata16bits = (const uint16_t *) pData;
    }
    else
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
 8004390:	2100      	movs	r1, #0
    huart->TxXferCount = Size;
 8004392:	52ec      	strh	r4, [r5, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004394:	2380      	movs	r3, #128	; 0x80
 8004396:	68aa      	ldr	r2, [r5, #8]
    tickstart = HAL_GetTick();
 8004398:	4680      	mov	r8, r0
      pdata16bits = NULL;
 800439a:	468a      	mov	sl, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800439c:	015b      	lsls	r3, r3, #5
 800439e:	429a      	cmp	r2, r3
 80043a0:	d100      	bne.n	80043a4 <HAL_UART_Transmit+0x60>
 80043a2:	e0a3      	b.n	80044ec <HAL_UART_Transmit+0x1a8>
    }

    while (huart->TxXferCount > 0U)
 80043a4:	2352      	movs	r3, #82	; 0x52
 80043a6:	5aeb      	ldrh	r3, [r5, r3]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d100      	bne.n	80043ae <HAL_UART_Transmit+0x6a>
 80043ac:	e0d6      	b.n	800455c <HAL_UART_Transmit+0x218>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043ae:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b0:	2480      	movs	r4, #128	; 0x80
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043b2:	4691      	mov	r9, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b4:	682b      	ldr	r3, [r5, #0]
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043b6:	2208      	movs	r2, #8
 80043b8:	4693      	mov	fp, r2
 80043ba:	1c72      	adds	r2, r6, #1
 80043bc:	d124      	bne.n	8004408 <HAL_UART_Transmit+0xc4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043be:	69da      	ldr	r2, [r3, #28]
 80043c0:	4214      	tst	r4, r2
 80043c2:	d0fc      	beq.n	80043be <HAL_UART_Transmit+0x7a>
      if (pdata8bits == NULL)
 80043c4:	2f00      	cmp	r7, #0
 80043c6:	d06b      	beq.n	80044a0 <HAL_UART_Transmit+0x15c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043c8:	783a      	ldrb	r2, [r7, #0]
        pdata8bits++;
 80043ca:	3701      	adds	r7, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043cc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 80043ce:	2152      	movs	r1, #82	; 0x52
 80043d0:	5a6a      	ldrh	r2, [r5, r1]
 80043d2:	3a01      	subs	r2, #1
 80043d4:	b292      	uxth	r2, r2
 80043d6:	526a      	strh	r2, [r5, r1]
    while (huart->TxXferCount > 0U)
 80043d8:	5a6a      	ldrh	r2, [r5, r1]
 80043da:	2a00      	cmp	r2, #0
 80043dc:	d1eb      	bne.n	80043b6 <HAL_UART_Transmit+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043de:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e0:	2440      	movs	r4, #64	; 0x40
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043e2:	4691      	mov	r9, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043e4:	2708      	movs	r7, #8
 80043e6:	1c72      	adds	r2, r6, #1
 80043e8:	d165      	bne.n	80044b6 <HAL_UART_Transmit+0x172>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ea:	2140      	movs	r1, #64	; 0x40
 80043ec:	69da      	ldr	r2, [r3, #28]
 80043ee:	4211      	tst	r1, r2
 80043f0:	d0fc      	beq.n	80043ec <HAL_UART_Transmit+0xa8>
    huart->gState = HAL_UART_STATE_READY;
 80043f2:	2320      	movs	r3, #32
    return HAL_OK;
 80043f4:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 80043f6:	67eb      	str	r3, [r5, #124]	; 0x7c
    return HAL_OK;
 80043f8:	e000      	b.n	80043fc <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 80043fa:	2001      	movs	r0, #1
}
 80043fc:	bcf0      	pop	{r4, r5, r6, r7}
 80043fe:	46bb      	mov	fp, r7
 8004400:	46b2      	mov	sl, r6
 8004402:	46a9      	mov	r9, r5
 8004404:	46a0      	mov	r8, r4
 8004406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004408:	69da      	ldr	r2, [r3, #28]
 800440a:	4214      	tst	r4, r2
 800440c:	d1da      	bne.n	80043c4 <HAL_UART_Transmit+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440e:	f7fc fff3 	bl	80013f8 <HAL_GetTick>
 8004412:	4643      	mov	r3, r8
 8004414:	1ac0      	subs	r0, r0, r3
 8004416:	4286      	cmp	r6, r0
 8004418:	d33e      	bcc.n	8004498 <HAL_UART_Transmit+0x154>
 800441a:	2e00      	cmp	r6, #0
 800441c:	d03c      	beq.n	8004498 <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800441e:	4649      	mov	r1, r9
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4211      	tst	r1, r2
 8004426:	d0c8      	beq.n	80043ba <HAL_UART_Transmit+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004428:	4659      	mov	r1, fp
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	4211      	tst	r1, r2
 800442e:	d164      	bne.n	80044fa <HAL_UART_Transmit+0x1b6>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004430:	2280      	movs	r2, #128	; 0x80
 8004432:	69d9      	ldr	r1, [r3, #28]
 8004434:	0112      	lsls	r2, r2, #4
 8004436:	4211      	tst	r1, r2
 8004438:	d0bf      	beq.n	80043ba <HAL_UART_Transmit+0x76>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800443a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800443c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004440:	2201      	movs	r2, #1
 8004442:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004446:	6829      	ldr	r1, [r5, #0]
 8004448:	4c46      	ldr	r4, [pc, #280]	; (8004564 <HAL_UART_Transmit+0x220>)
 800444a:	680b      	ldr	r3, [r1, #0]
 800444c:	4023      	ands	r3, r4
 800444e:	600b      	str	r3, [r1, #0]
 8004450:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004454:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004458:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445c:	6829      	ldr	r1, [r5, #0]
 800445e:	688b      	ldr	r3, [r1, #8]
 8004460:	4393      	bics	r3, r2
 8004462:	608b      	str	r3, [r1, #8]
 8004464:	f380 8810 	msr	PRIMASK, r0

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004468:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800446a:	2b01      	cmp	r3, #1
 800446c:	d10a      	bne.n	8004484 <HAL_UART_Transmit+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800446e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004472:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004476:	2010      	movs	r0, #16
 8004478:	682a      	ldr	r2, [r5, #0]
 800447a:	6813      	ldr	r3, [r2, #0]
 800447c:	4383      	bics	r3, r0
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004484:	2220      	movs	r2, #32
 8004486:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004488:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800448a:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448c:	2300      	movs	r3, #0
 800448e:	662b      	str	r3, [r5, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004490:	66ab      	str	r3, [r5, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004492:	506a      	str	r2, [r5, r1]
          __HAL_UNLOCK(huart);
 8004494:	3258      	adds	r2, #88	; 0x58
 8004496:	54ab      	strb	r3, [r5, r2]
      huart->gState = HAL_UART_STATE_READY;
 8004498:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800449a:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 800449c:	67eb      	str	r3, [r5, #124]	; 0x7c
      return HAL_TIMEOUT;
 800449e:	e7ad      	b.n	80043fc <HAL_UART_Transmit+0xb8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044a0:	4652      	mov	r2, sl
 80044a2:	8812      	ldrh	r2, [r2, #0]
 80044a4:	05d2      	lsls	r2, r2, #23
 80044a6:	0dd2      	lsrs	r2, r2, #23
 80044a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044aa:	2202      	movs	r2, #2
 80044ac:	4694      	mov	ip, r2
 80044ae:	44e2      	add	sl, ip
 80044b0:	e78d      	b.n	80043ce <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 80044b2:	2002      	movs	r0, #2
 80044b4:	e7a2      	b.n	80043fc <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	421c      	tst	r4, r3
 80044ba:	d19a      	bne.n	80043f2 <HAL_UART_Transmit+0xae>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044bc:	f7fc ff9c 	bl	80013f8 <HAL_GetTick>
 80044c0:	4643      	mov	r3, r8
 80044c2:	1ac0      	subs	r0, r0, r3
 80044c4:	4286      	cmp	r6, r0
 80044c6:	d3e7      	bcc.n	8004498 <HAL_UART_Transmit+0x154>
 80044c8:	2e00      	cmp	r6, #0
 80044ca:	d0e5      	beq.n	8004498 <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044cc:	4649      	mov	r1, r9
 80044ce:	682b      	ldr	r3, [r5, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	4211      	tst	r1, r2
 80044d4:	d100      	bne.n	80044d8 <HAL_UART_Transmit+0x194>
 80044d6:	e786      	b.n	80043e6 <HAL_UART_Transmit+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044d8:	69da      	ldr	r2, [r3, #28]
 80044da:	4217      	tst	r7, r2
 80044dc:	d140      	bne.n	8004560 <HAL_UART_Transmit+0x21c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044de:	2280      	movs	r2, #128	; 0x80
 80044e0:	69d9      	ldr	r1, [r3, #28]
 80044e2:	0112      	lsls	r2, r2, #4
 80044e4:	4211      	tst	r1, r2
 80044e6:	d100      	bne.n	80044ea <HAL_UART_Transmit+0x1a6>
 80044e8:	e77d      	b.n	80043e6 <HAL_UART_Transmit+0xa2>
 80044ea:	e7a6      	b.n	800443a <HAL_UART_Transmit+0xf6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ec:	692b      	ldr	r3, [r5, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d000      	beq.n	80044f4 <HAL_UART_Transmit+0x1b0>
 80044f2:	e757      	b.n	80043a4 <HAL_UART_Transmit+0x60>
 80044f4:	46ba      	mov	sl, r7
      pdata8bits  = NULL;
 80044f6:	2700      	movs	r7, #0
 80044f8:	e754      	b.n	80043a4 <HAL_UART_Transmit+0x60>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044fa:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044fc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004500:	2201      	movs	r2, #1
 8004502:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004506:	6829      	ldr	r1, [r5, #0]
 8004508:	4c16      	ldr	r4, [pc, #88]	; (8004564 <HAL_UART_Transmit+0x220>)
 800450a:	680b      	ldr	r3, [r1, #0]
 800450c:	4023      	ands	r3, r4
 800450e:	600b      	str	r3, [r1, #0]
 8004510:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004514:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004518:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451c:	6829      	ldr	r1, [r5, #0]
 800451e:	688b      	ldr	r3, [r1, #8]
 8004520:	4393      	bics	r3, r2
 8004522:	608b      	str	r3, [r1, #8]
 8004524:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004528:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800452a:	2b01      	cmp	r3, #1
 800452c:	d10a      	bne.n	8004544 <HAL_UART_Transmit+0x200>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800452e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004532:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004536:	2010      	movs	r0, #16
 8004538:	682a      	ldr	r2, [r5, #0]
 800453a:	6813      	ldr	r3, [r2, #0]
 800453c:	4383      	bics	r3, r0
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004544:	2380      	movs	r3, #128	; 0x80
 8004546:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004548:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800454a:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454c:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800454e:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004550:	662b      	str	r3, [r5, #96]	; 0x60
  huart->RxISR = NULL;
 8004552:	66ab      	str	r3, [r5, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004554:	50a9      	str	r1, [r5, r2]
           __HAL_UNLOCK(huart);
 8004556:	3a0c      	subs	r2, #12
 8004558:	54ab      	strb	r3, [r5, r2]
 800455a:	e79d      	b.n	8004498 <HAL_UART_Transmit+0x154>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	e73e      	b.n	80043de <HAL_UART_Transmit+0x9a>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004560:	621f      	str	r7, [r3, #32]
 8004562:	e7cb      	b.n	80044fc <HAL_UART_Transmit+0x1b8>
 8004564:	fffffedf 	.word	0xfffffedf

08004568 <HAL_UART_Transmit_DMA>:
{
 8004568:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800456a:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 800456c:	b570      	push	{r4, r5, r6, lr}
 800456e:	0004      	movs	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004570:	2a20      	cmp	r2, #32
 8004572:	d140      	bne.n	80045f6 <HAL_UART_Transmit_DMA+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8004574:	2900      	cmp	r1, #0
 8004576:	d02b      	beq.n	80045d0 <HAL_UART_Transmit_DMA+0x68>
 8004578:	2b00      	cmp	r3, #0
 800457a:	d029      	beq.n	80045d0 <HAL_UART_Transmit_DMA+0x68>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800457c:	2280      	movs	r2, #128	; 0x80
 800457e:	6880      	ldr	r0, [r0, #8]
 8004580:	0152      	lsls	r2, r2, #5
 8004582:	4290      	cmp	r0, r2
 8004584:	d01f      	beq.n	80045c6 <HAL_UART_Transmit_DMA+0x5e>
    huart->TxXferSize  = Size;
 8004586:	2250      	movs	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 8004588:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800458a:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 800458c:	3202      	adds	r2, #2
 800458e:	52a3      	strh	r3, [r4, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004590:	2021      	movs	r0, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004592:	2584      	movs	r5, #132	; 0x84
 8004594:	2200      	movs	r2, #0
 8004596:	5162      	str	r2, [r4, r5]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004598:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (huart->hdmatx != NULL)
 800459a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800459c:	2800      	cmp	r0, #0
 800459e:	d019      	beq.n	80045d4 <HAL_UART_Transmit_DMA+0x6c>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80045a0:	4e16      	ldr	r6, [pc, #88]	; (80045fc <HAL_UART_Transmit_DMA+0x94>)
      huart->hdmatx->XferAbortCallback = NULL;
 80045a2:	6342      	str	r2, [r0, #52]	; 0x34
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80045a4:	6286      	str	r6, [r0, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80045a6:	4e16      	ldr	r6, [pc, #88]	; (8004600 <HAL_UART_Transmit_DMA+0x98>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80045a8:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80045aa:	62c6      	str	r6, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80045ac:	4e15      	ldr	r6, [pc, #84]	; (8004604 <HAL_UART_Transmit_DMA+0x9c>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80045ae:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80045b0:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80045b2:	f7fd fae7 	bl	8001b84 <HAL_DMA_Start_IT>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d00c      	beq.n	80045d4 <HAL_UART_Transmit_DMA+0x6c>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80045ba:	2310      	movs	r3, #16
 80045bc:	5163      	str	r3, [r4, r5]
        huart->gState = HAL_UART_STATE_READY;
 80045be:	3310      	adds	r3, #16
        return HAL_ERROR;
 80045c0:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 80045c2:	67e3      	str	r3, [r4, #124]	; 0x7c
        return HAL_ERROR;
 80045c4:	e005      	b.n	80045d2 <HAL_UART_Transmit_DMA+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c6:	6922      	ldr	r2, [r4, #16]
 80045c8:	2a00      	cmp	r2, #0
 80045ca:	d1dc      	bne.n	8004586 <HAL_UART_Transmit_DMA+0x1e>
      if ((((uint32_t)pData) & 1U) != 0U)
 80045cc:	07ca      	lsls	r2, r1, #31
 80045ce:	d5da      	bpl.n	8004586 <HAL_UART_Transmit_DMA+0x1e>
      return HAL_ERROR;
 80045d0:	2001      	movs	r0, #1
}
 80045d2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80045d4:	2240      	movs	r2, #64	; 0x40
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045da:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045de:	2301      	movs	r3, #1
 80045e0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80045e4:	2080      	movs	r0, #128	; 0x80
 80045e6:	6822      	ldr	r2, [r4, #0]
 80045e8:	6893      	ldr	r3, [r2, #8]
 80045ea:	4303      	orrs	r3, r0
 80045ec:	6093      	str	r3, [r2, #8]
 80045ee:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 80045f2:	2000      	movs	r0, #0
 80045f4:	e7ed      	b.n	80045d2 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_BUSY;
 80045f6:	2002      	movs	r0, #2
 80045f8:	e7eb      	b.n	80045d2 <HAL_UART_Transmit_DMA+0x6a>
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	08004701 	.word	0x08004701
 8004600:	0800474d 	.word	0x0800474d
 8004604:	08004765 	.word	0x08004765

08004608 <HAL_UART_Receive_DMA>:
{
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	000d      	movs	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 800460c:	2180      	movs	r1, #128	; 0x80
 800460e:	5841      	ldr	r1, [r0, r1]
{
 8004610:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8004612:	2920      	cmp	r1, #32
 8004614:	d000      	beq.n	8004618 <HAL_UART_Receive_DMA+0x10>
 8004616:	e06b      	b.n	80046f0 <HAL_UART_Receive_DMA+0xe8>
    if ((pData == NULL) || (Size == 0U))
 8004618:	2d00      	cmp	r5, #0
 800461a:	d040      	beq.n	800469e <HAL_UART_Receive_DMA+0x96>
 800461c:	2a00      	cmp	r2, #0
 800461e:	d03e      	beq.n	800469e <HAL_UART_Receive_DMA+0x96>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	6881      	ldr	r1, [r0, #8]
 8004624:	015b      	lsls	r3, r3, #5
 8004626:	4299      	cmp	r1, r3
 8004628:	d105      	bne.n	8004636 <HAL_UART_Receive_DMA+0x2e>
 800462a:	6903      	ldr	r3, [r0, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <HAL_UART_Receive_DMA+0x2e>
      return HAL_ERROR;
 8004630:	2001      	movs	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8004632:	07eb      	lsls	r3, r5, #31
 8004634:	d434      	bmi.n	80046a0 <HAL_UART_Receive_DMA+0x98>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004636:	2300      	movs	r3, #0
 8004638:	6623      	str	r3, [r4, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	d50c      	bpl.n	800465c <HAL_UART_Receive_DMA+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004642:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004646:	2301      	movs	r3, #1
 8004648:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	6821      	ldr	r1, [r4, #0]
 8004650:	04db      	lsls	r3, r3, #19
 8004652:	680e      	ldr	r6, [r1, #0]
 8004654:	4333      	orrs	r3, r6
 8004656:	600b      	str	r3, [r1, #0]
 8004658:	f380 8810 	msr	PRIMASK, r0
  huart->RxXferSize = Size;
 800465c:	2358      	movs	r3, #88	; 0x58
  huart->pRxBuffPtr = pData;
 800465e:	6565      	str	r5, [r4, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	2784      	movs	r7, #132	; 0x84
  huart->RxXferSize = Size;
 8004662:	52e2      	strh	r2, [r4, r3]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004664:	2680      	movs	r6, #128	; 0x80
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004666:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004668:	2122      	movs	r1, #34	; 0x22
  if (huart->hdmarx != NULL)
 800466a:	6f60      	ldr	r0, [r4, #116]	; 0x74
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466c:	51e3      	str	r3, [r4, r7]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800466e:	51a1      	str	r1, [r4, r6]
  if (huart->hdmarx != NULL)
 8004670:	2800      	cmp	r0, #0
 8004672:	d016      	beq.n	80046a2 <HAL_UART_Receive_DMA+0x9a>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004674:	491f      	ldr	r1, [pc, #124]	; (80046f4 <HAL_UART_Receive_DMA+0xec>)
    huart->hdmarx->XferAbortCallback = NULL;
 8004676:	6343      	str	r3, [r0, #52]	; 0x34
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004678:	6281      	str	r1, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800467a:	491f      	ldr	r1, [pc, #124]	; (80046f8 <HAL_UART_Receive_DMA+0xf0>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800467c:	0013      	movs	r3, r2
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800467e:	62c1      	str	r1, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004680:	491e      	ldr	r1, [pc, #120]	; (80046fc <HAL_UART_Receive_DMA+0xf4>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004682:	002a      	movs	r2, r5
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004684:	6301      	str	r1, [r0, #48]	; 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004686:	6821      	ldr	r1, [r4, #0]
 8004688:	3124      	adds	r1, #36	; 0x24
 800468a:	f7fd fa7b 	bl	8001b84 <HAL_DMA_Start_IT>
 800468e:	2800      	cmp	r0, #0
 8004690:	d007      	beq.n	80046a2 <HAL_UART_Receive_DMA+0x9a>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004692:	2310      	movs	r3, #16
 8004694:	51e3      	str	r3, [r4, r7]
      huart->RxState = HAL_UART_STATE_READY;
 8004696:	3310      	adds	r3, #16
      return HAL_ERROR;
 8004698:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 800469a:	51a3      	str	r3, [r4, r6]
      return HAL_ERROR;
 800469c:	e000      	b.n	80046a0 <HAL_UART_Receive_DMA+0x98>
      return HAL_ERROR;
 800469e:	2001      	movs	r0, #1
}
 80046a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 80046a2:	6923      	ldr	r3, [r4, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00b      	beq.n	80046c0 <HAL_UART_Receive_DMA+0xb8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ac:	2301      	movs	r3, #1
 80046ae:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046b2:	6822      	ldr	r2, [r4, #0]
 80046b4:	33ff      	adds	r3, #255	; 0xff
 80046b6:	6810      	ldr	r0, [r2, #0]
 80046b8:	4303      	orrs	r3, r0
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c4:	2301      	movs	r3, #1
 80046c6:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ca:	6821      	ldr	r1, [r4, #0]
 80046cc:	688a      	ldr	r2, [r1, #8]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	608a      	str	r2, [r1, #8]
 80046d2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046da:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046de:	2040      	movs	r0, #64	; 0x40
 80046e0:	6822      	ldr	r2, [r4, #0]
 80046e2:	6893      	ldr	r3, [r2, #8]
 80046e4:	4303      	orrs	r3, r0
 80046e6:	6093      	str	r3, [r2, #8]
 80046e8:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 80046ec:	2000      	movs	r0, #0
 80046ee:	e7d7      	b.n	80046a0 <HAL_UART_Receive_DMA+0x98>
    return HAL_BUSY;
 80046f0:	2002      	movs	r0, #2
 80046f2:	e7d5      	b.n	80046a0 <HAL_UART_Receive_DMA+0x98>
 80046f4:	08004b91 	.word	0x08004b91
 80046f8:	08004b71 	.word	0x08004b71
 80046fc:	08004765 	.word	0x08004765

08004700 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004700:	6982      	ldr	r2, [r0, #24]
{
 8004702:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004704:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004706:	2a20      	cmp	r2, #32
 8004708:	d01a      	beq.n	8004740 <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 800470a:	2252      	movs	r2, #82	; 0x52
 800470c:	2100      	movs	r1, #0
 800470e:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004710:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004714:	3101      	adds	r1, #1
 8004716:	f381 8810 	msr	PRIMASK, r1

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800471a:	2480      	movs	r4, #128	; 0x80
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	6882      	ldr	r2, [r0, #8]
 8004720:	43a2      	bics	r2, r4
 8004722:	6082      	str	r2, [r0, #8]
 8004724:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004728:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800472c:	f381 8810 	msr	PRIMASK, r1

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	313f      	adds	r1, #63	; 0x3f
 8004734:	6813      	ldr	r3, [r2, #0]
 8004736:	430b      	orrs	r3, r1
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	f380 8810 	msr	PRIMASK, r0
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800473e:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8004740:	0018      	movs	r0, r3
 8004742:	f7fc f8cf 	bl	80008e4 <HAL_UART_TxCpltCallback>
}
 8004746:	e7fa      	b.n	800473e <UART_DMATransmitCplt+0x3e>

08004748 <HAL_UART_TxHalfCpltCallback>:
 8004748:	4770      	bx	lr
 800474a:	46c0      	nop			; (mov r8, r8)

0800474c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800474c:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800474e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004750:	f7ff fffa 	bl	8004748 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004754:	bd10      	pop	{r4, pc}
 8004756:	46c0      	nop			; (mov r8, r8)

08004758 <HAL_UART_RxCpltCallback>:
 8004758:	4770      	bx	lr
 800475a:	46c0      	nop			; (mov r8, r8)

0800475c <HAL_UART_RxHalfCpltCallback>:
 800475c:	4770      	bx	lr
 800475e:	46c0      	nop			; (mov r8, r8)

08004760 <HAL_UART_ErrorCallback>:
 8004760:	4770      	bx	lr
 8004762:	46c0      	nop			; (mov r8, r8)

08004764 <UART_DMAError>:
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004764:	2280      	movs	r2, #128	; 0x80
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004766:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8004768:	b570      	push	{r4, r5, r6, lr}

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800476a:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800476c:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800476e:	5884      	ldr	r4, [r0, r2]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004770:	6899      	ldr	r1, [r3, #8]
 8004772:	420a      	tst	r2, r1
 8004774:	d001      	beq.n	800477a <UART_DMAError+0x16>
 8004776:	2d21      	cmp	r5, #33	; 0x21
 8004778:	d00c      	beq.n	8004794 <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	065b      	lsls	r3, r3, #25
 800477e:	d501      	bpl.n	8004784 <UART_DMAError+0x20>
 8004780:	2c22      	cmp	r4, #34	; 0x22
 8004782:	d01a      	beq.n	80047ba <UART_DMAError+0x56>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004784:	2284      	movs	r2, #132	; 0x84
 8004786:	2110      	movs	r1, #16
 8004788:	5883      	ldr	r3, [r0, r2]
 800478a:	430b      	orrs	r3, r1
 800478c:	5083      	str	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800478e:	f7ff ffe7 	bl	8004760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004792:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8004794:	2352      	movs	r3, #82	; 0x52
 8004796:	2200      	movs	r2, #0
 8004798:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800479a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479e:	3b51      	subs	r3, #81	; 0x51
 80047a0:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047a4:	6802      	ldr	r2, [r0, #0]
 80047a6:	359f      	adds	r5, #159	; 0x9f
 80047a8:	6813      	ldr	r3, [r2, #0]
 80047aa:	43ab      	bics	r3, r5
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	f381 8810 	msr	PRIMASK, r1
  huart->gState = HAL_UART_STATE_READY;
 80047b2:	2320      	movs	r3, #32
 80047b4:	67c3      	str	r3, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80047b6:	6803      	ldr	r3, [r0, #0]
}
 80047b8:	e7df      	b.n	800477a <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 80047ba:	235a      	movs	r3, #90	; 0x5a
 80047bc:	2200      	movs	r2, #0
 80047be:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047c0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c4:	3201      	adds	r2, #1
 80047c6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ca:	6801      	ldr	r1, [r0, #0]
 80047cc:	4d12      	ldr	r5, [pc, #72]	; (8004818 <UART_DMAError+0xb4>)
 80047ce:	680b      	ldr	r3, [r1, #0]
 80047d0:	402b      	ands	r3, r5
 80047d2:	600b      	str	r3, [r1, #0]
 80047d4:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047dc:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e0:	6801      	ldr	r1, [r0, #0]
 80047e2:	688b      	ldr	r3, [r1, #8]
 80047e4:	4393      	bics	r3, r2
 80047e6:	608b      	str	r3, [r1, #8]
 80047e8:	f384 8810 	msr	PRIMASK, r4
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ec:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d10a      	bne.n	8004808 <UART_DMAError+0xa4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f6:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047fa:	2410      	movs	r4, #16
 80047fc:	6802      	ldr	r2, [r0, #0]
 80047fe:	6813      	ldr	r3, [r2, #0]
 8004800:	43a3      	bics	r3, r4
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	2220      	movs	r2, #32
 800480c:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480e:	2300      	movs	r3, #0
 8004810:	6603      	str	r3, [r0, #96]	; 0x60
  huart->RxISR = NULL;
 8004812:	6683      	str	r3, [r0, #104]	; 0x68
}
 8004814:	e7b6      	b.n	8004784 <UART_DMAError+0x20>
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	fffffedf 	.word	0xfffffedf

0800481c <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	225a      	movs	r2, #90	; 0x5a
{
 8004820:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004822:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8004824:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8004826:	3a08      	subs	r2, #8
 8004828:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800482a:	f7ff ff99 	bl	8004760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800482e:	bd10      	pop	{r4, pc}

08004830 <HAL_UARTEx_RxEventCallback>:
}
 8004830:	4770      	bx	lr
 8004832:	46c0      	nop			; (mov r8, r8)

08004834 <HAL_UART_IRQHandler>:
{
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	46ce      	mov	lr, r9
 8004838:	4647      	mov	r7, r8
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800483a:	6802      	ldr	r2, [r0, #0]
{
 800483c:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800483e:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004840:	48c6      	ldr	r0, [pc, #792]	; (8004b5c <HAL_UART_IRQHandler+0x328>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004842:	6811      	ldr	r1, [r2, #0]
{
 8004844:	b580      	push	{r7, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004846:	6895      	ldr	r5, [r2, #8]
  if (errorflags == 0U)
 8004848:	4203      	tst	r3, r0
 800484a:	d000      	beq.n	800484e <HAL_UART_IRQHandler+0x1a>
 800484c:	e07e      	b.n	800494c <HAL_UART_IRQHandler+0x118>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800484e:	2020      	movs	r0, #32
 8004850:	4218      	tst	r0, r3
 8004852:	d002      	beq.n	800485a <HAL_UART_IRQHandler+0x26>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004854:	4208      	tst	r0, r1
 8004856:	d000      	beq.n	800485a <HAL_UART_IRQHandler+0x26>
 8004858:	e118      	b.n	8004a8c <HAL_UART_IRQHandler+0x258>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800485a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800485c:	2801      	cmp	r0, #1
 800485e:	d01b      	beq.n	8004898 <HAL_UART_IRQHandler+0x64>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004860:	2080      	movs	r0, #128	; 0x80
 8004862:	0340      	lsls	r0, r0, #13
 8004864:	4203      	tst	r3, r0
 8004866:	d002      	beq.n	800486e <HAL_UART_IRQHandler+0x3a>
 8004868:	026d      	lsls	r5, r5, #9
 800486a:	d500      	bpl.n	800486e <HAL_UART_IRQHandler+0x3a>
 800486c:	e113      	b.n	8004a96 <HAL_UART_IRQHandler+0x262>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800486e:	2280      	movs	r2, #128	; 0x80
 8004870:	421a      	tst	r2, r3
 8004872:	d109      	bne.n	8004888 <HAL_UART_IRQHandler+0x54>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004874:	2240      	movs	r2, #64	; 0x40
 8004876:	421a      	tst	r2, r3
 8004878:	d002      	beq.n	8004880 <HAL_UART_IRQHandler+0x4c>
 800487a:	420a      	tst	r2, r1
 800487c:	d000      	beq.n	8004880 <HAL_UART_IRQHandler+0x4c>
 800487e:	e113      	b.n	8004aa8 <HAL_UART_IRQHandler+0x274>
}
 8004880:	bcc0      	pop	{r6, r7}
 8004882:	46b9      	mov	r9, r7
 8004884:	46b0      	mov	r8, r6
 8004886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004888:	420a      	tst	r2, r1
 800488a:	d0f3      	beq.n	8004874 <HAL_UART_IRQHandler+0x40>
    if (huart->TxISR != NULL)
 800488c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0f6      	beq.n	8004880 <HAL_UART_IRQHandler+0x4c>
      huart->TxISR(huart);
 8004892:	0020      	movs	r0, r4
 8004894:	4798      	blx	r3
 8004896:	e7f3      	b.n	8004880 <HAL_UART_IRQHandler+0x4c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004898:	2610      	movs	r6, #16
 800489a:	421e      	tst	r6, r3
 800489c:	d0e0      	beq.n	8004860 <HAL_UART_IRQHandler+0x2c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800489e:	420e      	tst	r6, r1
 80048a0:	d0de      	beq.n	8004860 <HAL_UART_IRQHandler+0x2c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a2:	2340      	movs	r3, #64	; 0x40
 80048a4:	001d      	movs	r5, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048a6:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a8:	6892      	ldr	r2, [r2, #8]
 80048aa:	4015      	ands	r5, r2
 80048ac:	4213      	tst	r3, r2
 80048ae:	d100      	bne.n	80048b2 <HAL_UART_IRQHandler+0x7e>
 80048b0:	e114      	b.n	8004adc <HAL_UART_IRQHandler+0x2a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048b2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80048b4:	682a      	ldr	r2, [r5, #0]
 80048b6:	6852      	ldr	r2, [r2, #4]
 80048b8:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80048ba:	2a00      	cmp	r2, #0
 80048bc:	d0e0      	beq.n	8004880 <HAL_UART_IRQHandler+0x4c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048be:	2158      	movs	r1, #88	; 0x58
 80048c0:	4688      	mov	r8, r1
 80048c2:	5a61      	ldrh	r1, [r4, r1]
 80048c4:	4291      	cmp	r1, r2
 80048c6:	d9db      	bls.n	8004880 <HAL_UART_IRQHandler+0x4c>
        huart->RxXferCount = nb_remaining_rx_data;
 80048c8:	275a      	movs	r7, #90	; 0x5a
 80048ca:	53e2      	strh	r2, [r4, r7]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048cc:	69aa      	ldr	r2, [r5, #24]
 80048ce:	2a20      	cmp	r2, #32
 80048d0:	d032      	beq.n	8004938 <HAL_UART_IRQHandler+0x104>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d6:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048da:	6821      	ldr	r1, [r4, #0]
 80048dc:	4fa0      	ldr	r7, [pc, #640]	; (8004b60 <HAL_UART_IRQHandler+0x32c>)
 80048de:	680a      	ldr	r2, [r1, #0]
 80048e0:	403a      	ands	r2, r7
 80048e2:	600a      	str	r2, [r1, #0]
 80048e4:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ec:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f0:	6821      	ldr	r1, [r4, #0]
 80048f2:	688a      	ldr	r2, [r1, #8]
 80048f4:	4382      	bics	r2, r0
 80048f6:	608a      	str	r2, [r1, #8]
 80048f8:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048fc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004900:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004904:	6821      	ldr	r1, [r4, #0]
 8004906:	688a      	ldr	r2, [r1, #8]
 8004908:	439a      	bics	r2, r3
 800490a:	608a      	str	r2, [r1, #8]
 800490c:	f385 8810 	msr	PRIMASK, r5
          huart->RxState = HAL_UART_STATE_READY;
 8004910:	2220      	movs	r2, #32
 8004912:	3340      	adds	r3, #64	; 0x40
 8004914:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004916:	2300      	movs	r3, #0
 8004918:	6623      	str	r3, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800491a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491e:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004922:	6822      	ldr	r2, [r4, #0]
 8004924:	6813      	ldr	r3, [r2, #0]
 8004926:	43b3      	bics	r3, r6
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 800492e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004930:	f7fd f968 	bl	8001c04 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004934:	4643      	mov	r3, r8
 8004936:	5ae1      	ldrh	r1, [r4, r3]
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004938:	2302      	movs	r3, #2
 800493a:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800493c:	3358      	adds	r3, #88	; 0x58
 800493e:	5ae3      	ldrh	r3, [r4, r3]
 8004940:	0020      	movs	r0, r4
 8004942:	1ac9      	subs	r1, r1, r3
 8004944:	b289      	uxth	r1, r1
 8004946:	f7ff ff73 	bl	8004830 <HAL_UARTEx_RxEventCallback>
 800494a:	e799      	b.n	8004880 <HAL_UART_IRQHandler+0x4c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800494c:	2601      	movs	r6, #1
 800494e:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004950:	4884      	ldr	r0, [pc, #528]	; (8004b64 <HAL_UART_IRQHandler+0x330>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004952:	402f      	ands	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004954:	4008      	ands	r0, r1
 8004956:	4338      	orrs	r0, r7
 8004958:	d100      	bne.n	800495c <HAL_UART_IRQHandler+0x128>
 800495a:	e77e      	b.n	800485a <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800495c:	421e      	tst	r6, r3
 800495e:	d006      	beq.n	800496e <HAL_UART_IRQHandler+0x13a>
 8004960:	05c8      	lsls	r0, r1, #23
 8004962:	d504      	bpl.n	800496e <HAL_UART_IRQHandler+0x13a>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004964:	2584      	movs	r5, #132	; 0x84
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004966:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004968:	5960      	ldr	r0, [r4, r5]
 800496a:	4330      	orrs	r0, r6
 800496c:	5160      	str	r0, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800496e:	2002      	movs	r0, #2
 8004970:	4218      	tst	r0, r3
 8004972:	d100      	bne.n	8004976 <HAL_UART_IRQHandler+0x142>
 8004974:	e084      	b.n	8004a80 <HAL_UART_IRQHandler+0x24c>
 8004976:	2f00      	cmp	r7, #0
 8004978:	d00e      	beq.n	8004998 <HAL_UART_IRQHandler+0x164>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800497a:	2684      	movs	r6, #132	; 0x84
 800497c:	2504      	movs	r5, #4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800497e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004980:	59a0      	ldr	r0, [r4, r6]
 8004982:	4328      	orrs	r0, r5
 8004984:	51a0      	str	r0, [r4, r6]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004986:	421d      	tst	r5, r3
 8004988:	d006      	beq.n	8004998 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800498a:	2004      	movs	r0, #4
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800498c:	2584      	movs	r5, #132	; 0x84
 800498e:	2602      	movs	r6, #2
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004990:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004992:	5960      	ldr	r0, [r4, r5]
 8004994:	4330      	orrs	r0, r6
 8004996:	5160      	str	r0, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004998:	2508      	movs	r5, #8
 800499a:	421d      	tst	r5, r3
 800499c:	d008      	beq.n	80049b0 <HAL_UART_IRQHandler+0x17c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800499e:	2020      	movs	r0, #32
 80049a0:	4008      	ands	r0, r1
 80049a2:	4338      	orrs	r0, r7
 80049a4:	d004      	beq.n	80049b0 <HAL_UART_IRQHandler+0x17c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049a6:	2684      	movs	r6, #132	; 0x84
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049a8:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049aa:	59a0      	ldr	r0, [r4, r6]
 80049ac:	4328      	orrs	r0, r5
 80049ae:	51a0      	str	r0, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049b0:	2080      	movs	r0, #128	; 0x80
 80049b2:	0100      	lsls	r0, r0, #4
 80049b4:	4203      	tst	r3, r0
 80049b6:	d007      	beq.n	80049c8 <HAL_UART_IRQHandler+0x194>
 80049b8:	014d      	lsls	r5, r1, #5
 80049ba:	d505      	bpl.n	80049c8 <HAL_UART_IRQHandler+0x194>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049bc:	2584      	movs	r5, #132	; 0x84
 80049be:	2620      	movs	r6, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049c0:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049c2:	5960      	ldr	r0, [r4, r5]
 80049c4:	4330      	orrs	r0, r6
 80049c6:	5160      	str	r0, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049c8:	2084      	movs	r0, #132	; 0x84
 80049ca:	5820      	ldr	r0, [r4, r0]
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d100      	bne.n	80049d2 <HAL_UART_IRQHandler+0x19e>
 80049d0:	e756      	b.n	8004880 <HAL_UART_IRQHandler+0x4c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80049d2:	2020      	movs	r0, #32
 80049d4:	4218      	tst	r0, r3
 80049d6:	d001      	beq.n	80049dc <HAL_UART_IRQHandler+0x1a8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049d8:	4208      	tst	r0, r1
 80049da:	d178      	bne.n	8004ace <HAL_UART_IRQHandler+0x29a>
      errorcode = huart->ErrorCode;
 80049dc:	2684      	movs	r6, #132	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049de:	2540      	movs	r5, #64	; 0x40
      errorcode = huart->ErrorCode;
 80049e0:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049e2:	6893      	ldr	r3, [r2, #8]
 80049e4:	401d      	ands	r5, r3
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049e6:	2328      	movs	r3, #40	; 0x28
 80049e8:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049ea:	431d      	orrs	r5, r3
 80049ec:	d100      	bne.n	80049f0 <HAL_UART_IRQHandler+0x1bc>
 80049ee:	e0af      	b.n	8004b50 <HAL_UART_IRQHandler+0x31c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049f0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f4:	2201      	movs	r2, #1
 80049f6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049fa:	6821      	ldr	r1, [r4, #0]
 80049fc:	4d5a      	ldr	r5, [pc, #360]	; (8004b68 <HAL_UART_IRQHandler+0x334>)
 80049fe:	680b      	ldr	r3, [r1, #0]
 8004a00:	402b      	ands	r3, r5
 8004a02:	600b      	str	r3, [r1, #0]
 8004a04:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a08:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a10:	6821      	ldr	r1, [r4, #0]
 8004a12:	688b      	ldr	r3, [r1, #8]
 8004a14:	4393      	bics	r3, r2
 8004a16:	608b      	str	r3, [r1, #8]
 8004a18:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a1c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d10a      	bne.n	8004a38 <HAL_UART_IRQHandler+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a22:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a26:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2a:	2010      	movs	r0, #16
 8004a2c:	6822      	ldr	r2, [r4, #0]
 8004a2e:	6813      	ldr	r3, [r2, #0]
 8004a30:	4383      	bics	r3, r0
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8004a42:	66a3      	str	r3, [r4, #104]	; 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	3220      	adds	r2, #32
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	421a      	tst	r2, r3
 8004a4c:	d028      	beq.n	8004aa0 <HAL_UART_IRQHandler+0x26c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a4e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a52:	2301      	movs	r3, #1
 8004a54:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a58:	6821      	ldr	r1, [r4, #0]
 8004a5a:	688b      	ldr	r3, [r1, #8]
 8004a5c:	4393      	bics	r3, r2
 8004a5e:	608b      	str	r3, [r1, #8]
 8004a60:	f380 8810 	msr	PRIMASK, r0
          if (huart->hdmarx != NULL)
 8004a64:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d01a      	beq.n	8004aa0 <HAL_UART_IRQHandler+0x26c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a6a:	4b40      	ldr	r3, [pc, #256]	; (8004b6c <HAL_UART_IRQHandler+0x338>)
 8004a6c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a6e:	f7fd f8e7 	bl	8001c40 <HAL_DMA_Abort_IT>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	d100      	bne.n	8004a78 <HAL_UART_IRQHandler+0x244>
 8004a76:	e703      	b.n	8004880 <HAL_UART_IRQHandler+0x4c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a78:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004a7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004a7c:	4798      	blx	r3
 8004a7e:	e6ff      	b.n	8004880 <HAL_UART_IRQHandler+0x4c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a80:	0758      	lsls	r0, r3, #29
 8004a82:	d589      	bpl.n	8004998 <HAL_UART_IRQHandler+0x164>
 8004a84:	2f00      	cmp	r7, #0
 8004a86:	d000      	beq.n	8004a8a <HAL_UART_IRQHandler+0x256>
 8004a88:	e77f      	b.n	800498a <HAL_UART_IRQHandler+0x156>
 8004a8a:	e785      	b.n	8004998 <HAL_UART_IRQHandler+0x164>
      if (huart->RxISR != NULL)
 8004a8c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d000      	beq.n	8004a94 <HAL_UART_IRQHandler+0x260>
 8004a92:	e6fe      	b.n	8004892 <HAL_UART_IRQHandler+0x5e>
 8004a94:	e6f4      	b.n	8004880 <HAL_UART_IRQHandler+0x4c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a96:	6210      	str	r0, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004a98:	0020      	movs	r0, r4
 8004a9a:	f000 fb3b 	bl	8005114 <HAL_UARTEx_WakeupCallback>
    return;
 8004a9e:	e6ef      	b.n	8004880 <HAL_UART_IRQHandler+0x4c>
            HAL_UART_ErrorCallback(huart);
 8004aa0:	0020      	movs	r0, r4
 8004aa2:	f7ff fe5d 	bl	8004760 <HAL_UART_ErrorCallback>
 8004aa6:	e6eb      	b.n	8004880 <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aac:	2301      	movs	r3, #1
 8004aae:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ab2:	6821      	ldr	r1, [r4, #0]
 8004ab4:	680b      	ldr	r3, [r1, #0]
 8004ab6:	4393      	bics	r3, r2
 8004ab8:	600b      	str	r3, [r1, #0]
 8004aba:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004abe:	2320      	movs	r3, #32
 8004ac0:	67e3      	str	r3, [r4, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ac2:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ac4:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8004ac6:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_TxCpltCallback(huart);
 8004ac8:	f7fb ff0c 	bl	80008e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004acc:	e6d8      	b.n	8004880 <HAL_UART_IRQHandler+0x4c>
        if (huart->RxISR != NULL)
 8004ace:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d083      	beq.n	80049dc <HAL_UART_IRQHandler+0x1a8>
          huart->RxISR(huart);
 8004ad4:	0020      	movs	r0, r4
 8004ad6:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ad8:	6822      	ldr	r2, [r4, #0]
 8004ada:	e77f      	b.n	80049dc <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004adc:	2358      	movs	r3, #88	; 0x58
 8004ade:	225a      	movs	r2, #90	; 0x5a
 8004ae0:	5ae1      	ldrh	r1, [r4, r3]
 8004ae2:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 8004ae4:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ae6:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8004ae8:	2a00      	cmp	r2, #0
 8004aea:	d100      	bne.n	8004aee <HAL_UART_IRQHandler+0x2ba>
 8004aec:	e6c8      	b.n	8004880 <HAL_UART_IRQHandler+0x4c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aee:	1ac9      	subs	r1, r1, r3
 8004af0:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004af2:	2900      	cmp	r1, #0
 8004af4:	d100      	bne.n	8004af8 <HAL_UART_IRQHandler+0x2c4>
 8004af6:	e6c3      	b.n	8004880 <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af8:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afc:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b00:	6822      	ldr	r2, [r4, #0]
 8004b02:	6813      	ldr	r3, [r2, #0]
 8004b04:	4698      	mov	r8, r3
 8004b06:	4647      	mov	r7, r8
 8004b08:	4b17      	ldr	r3, [pc, #92]	; (8004b68 <HAL_UART_IRQHandler+0x334>)
 8004b0a:	401f      	ands	r7, r3
 8004b0c:	6017      	str	r7, [r2, #0]
 8004b0e:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b12:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b16:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1a:	6822      	ldr	r2, [r4, #0]
 8004b1c:	6893      	ldr	r3, [r2, #8]
 8004b1e:	4383      	bics	r3, r0
 8004b20:	6093      	str	r3, [r2, #8]
 8004b22:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8004b26:	2380      	movs	r3, #128	; 0x80
 8004b28:	2220      	movs	r2, #32
 8004b2a:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2c:	6625      	str	r5, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8004b2e:	66a5      	str	r5, [r4, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b30:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b34:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b38:	6822      	ldr	r2, [r4, #0]
 8004b3a:	6813      	ldr	r3, [r2, #0]
 8004b3c:	43b3      	bics	r3, r6
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	f385 8810 	msr	PRIMASK, r5
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b44:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b46:	0020      	movs	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b48:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b4a:	f7ff fe71 	bl	8004830 <HAL_UARTEx_RxEventCallback>
 8004b4e:	e697      	b.n	8004880 <HAL_UART_IRQHandler+0x4c>
        HAL_UART_ErrorCallback(huart);
 8004b50:	0020      	movs	r0, r4
 8004b52:	f7ff fe05 	bl	8004760 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b56:	51a5      	str	r5, [r4, r6]
 8004b58:	e692      	b.n	8004880 <HAL_UART_IRQHandler+0x4c>
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	0000080f 	.word	0x0000080f
 8004b60:	fffffeff 	.word	0xfffffeff
 8004b64:	04000120 	.word	0x04000120
 8004b68:	fffffedf 	.word	0xfffffedf
 8004b6c:	0800481d 	.word	0x0800481d

08004b70 <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004b70:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b72:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8004b74:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004b76:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b78:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d002      	beq.n	8004b84 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8004b7e:	f7ff fded 	bl	800475c <HAL_UART_RxHalfCpltCallback>
}
 8004b82:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004b84:	3357      	adds	r3, #87	; 0x57
 8004b86:	5ac1      	ldrh	r1, [r0, r3]
 8004b88:	0849      	lsrs	r1, r1, #1
 8004b8a:	f7ff fe51 	bl	8004830 <HAL_UARTEx_RxEventCallback>
 8004b8e:	e7f8      	b.n	8004b82 <UART_DMARxHalfCplt+0x12>

08004b90 <UART_DMAReceiveCplt>:
{
 8004b90:	0003      	movs	r3, r0
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004b92:	699b      	ldr	r3, [r3, #24]
{
 8004b94:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b96:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d029      	beq.n	8004bf0 <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 8004b9c:	235a      	movs	r3, #90	; 0x5a
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba6:	3b59      	subs	r3, #89	; 0x59
 8004ba8:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bac:	6801      	ldr	r1, [r0, #0]
 8004bae:	4d1f      	ldr	r5, [pc, #124]	; (8004c2c <UART_DMAReceiveCplt+0x9c>)
 8004bb0:	680a      	ldr	r2, [r1, #0]
 8004bb2:	402a      	ands	r2, r5
 8004bb4:	600a      	str	r2, [r1, #0]
 8004bb6:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbe:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc2:	6801      	ldr	r1, [r0, #0]
 8004bc4:	688a      	ldr	r2, [r1, #8]
 8004bc6:	439a      	bics	r2, r3
 8004bc8:	608a      	str	r2, [r1, #8]
 8004bca:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bce:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd2:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd6:	2440      	movs	r4, #64	; 0x40
 8004bd8:	6802      	ldr	r2, [r0, #0]
 8004bda:	6893      	ldr	r3, [r2, #8]
 8004bdc:	43a3      	bics	r3, r4
 8004bde:	6093      	str	r3, [r2, #8]
 8004be0:	f381 8810 	msr	PRIMASK, r1
    huart->RxState = HAL_UART_STATE_READY;
 8004be4:	2380      	movs	r3, #128	; 0x80
 8004be6:	2220      	movs	r2, #32
 8004be8:	50c2      	str	r2, [r0, r3]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bea:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d007      	beq.n	8004c00 <UART_DMAReceiveCplt+0x70>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d012      	beq.n	8004c20 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8004bfa:	f7ff fdad 	bl	8004758 <HAL_UART_RxCpltCallback>
}
 8004bfe:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c00:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c04:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c08:	6802      	ldr	r2, [r0, #0]
 8004c0a:	3c30      	subs	r4, #48	; 0x30
 8004c0c:	6813      	ldr	r3, [r2, #0]
 8004c0e:	43a3      	bics	r3, r4
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	f381 8810 	msr	PRIMASK, r1
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c16:	2300      	movs	r3, #0
 8004c18:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c1a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d1ec      	bne.n	8004bfa <UART_DMAReceiveCplt+0x6a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c20:	3357      	adds	r3, #87	; 0x57
 8004c22:	5ac1      	ldrh	r1, [r0, r3]
 8004c24:	f7ff fe04 	bl	8004830 <HAL_UARTEx_RxEventCallback>
 8004c28:	e7e9      	b.n	8004bfe <UART_DMAReceiveCplt+0x6e>
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	fffffeff 	.word	0xfffffeff

08004c30 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c30:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004c32:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c34:	07da      	lsls	r2, r3, #31
 8004c36:	d506      	bpl.n	8004c46 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c38:	6801      	ldr	r1, [r0, #0]
 8004c3a:	4c28      	ldr	r4, [pc, #160]	; (8004cdc <UART_AdvFeatureConfig+0xac>)
 8004c3c:	684a      	ldr	r2, [r1, #4]
 8004c3e:	4022      	ands	r2, r4
 8004c40:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004c42:	4322      	orrs	r2, r4
 8004c44:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c46:	079a      	lsls	r2, r3, #30
 8004c48:	d506      	bpl.n	8004c58 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c4a:	6801      	ldr	r1, [r0, #0]
 8004c4c:	4c24      	ldr	r4, [pc, #144]	; (8004ce0 <UART_AdvFeatureConfig+0xb0>)
 8004c4e:	684a      	ldr	r2, [r1, #4]
 8004c50:	4022      	ands	r2, r4
 8004c52:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004c54:	4322      	orrs	r2, r4
 8004c56:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c58:	075a      	lsls	r2, r3, #29
 8004c5a:	d506      	bpl.n	8004c6a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c5c:	6801      	ldr	r1, [r0, #0]
 8004c5e:	4c21      	ldr	r4, [pc, #132]	; (8004ce4 <UART_AdvFeatureConfig+0xb4>)
 8004c60:	684a      	ldr	r2, [r1, #4]
 8004c62:	4022      	ands	r2, r4
 8004c64:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004c66:	4322      	orrs	r2, r4
 8004c68:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c6a:	071a      	lsls	r2, r3, #28
 8004c6c:	d506      	bpl.n	8004c7c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c6e:	6801      	ldr	r1, [r0, #0]
 8004c70:	4c1d      	ldr	r4, [pc, #116]	; (8004ce8 <UART_AdvFeatureConfig+0xb8>)
 8004c72:	684a      	ldr	r2, [r1, #4]
 8004c74:	4022      	ands	r2, r4
 8004c76:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004c78:	4322      	orrs	r2, r4
 8004c7a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c7c:	06da      	lsls	r2, r3, #27
 8004c7e:	d506      	bpl.n	8004c8e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c80:	6801      	ldr	r1, [r0, #0]
 8004c82:	4c1a      	ldr	r4, [pc, #104]	; (8004cec <UART_AdvFeatureConfig+0xbc>)
 8004c84:	688a      	ldr	r2, [r1, #8]
 8004c86:	4022      	ands	r2, r4
 8004c88:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004c8a:	4322      	orrs	r2, r4
 8004c8c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c8e:	069a      	lsls	r2, r3, #26
 8004c90:	d506      	bpl.n	8004ca0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c92:	6801      	ldr	r1, [r0, #0]
 8004c94:	4c16      	ldr	r4, [pc, #88]	; (8004cf0 <UART_AdvFeatureConfig+0xc0>)
 8004c96:	688a      	ldr	r2, [r1, #8]
 8004c98:	4022      	ands	r2, r4
 8004c9a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004c9c:	4322      	orrs	r2, r4
 8004c9e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ca0:	065a      	lsls	r2, r3, #25
 8004ca2:	d50a      	bpl.n	8004cba <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ca4:	6801      	ldr	r1, [r0, #0]
 8004ca6:	4d13      	ldr	r5, [pc, #76]	; (8004cf4 <UART_AdvFeatureConfig+0xc4>)
 8004ca8:	684a      	ldr	r2, [r1, #4]
 8004caa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004cac:	402a      	ands	r2, r5
 8004cae:	4322      	orrs	r2, r4
 8004cb0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cb2:	2280      	movs	r2, #128	; 0x80
 8004cb4:	0352      	lsls	r2, r2, #13
 8004cb6:	4294      	cmp	r4, r2
 8004cb8:	d009      	beq.n	8004cce <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cba:	061b      	lsls	r3, r3, #24
 8004cbc:	d506      	bpl.n	8004ccc <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cbe:	6802      	ldr	r2, [r0, #0]
 8004cc0:	490d      	ldr	r1, [pc, #52]	; (8004cf8 <UART_AdvFeatureConfig+0xc8>)
 8004cc2:	6853      	ldr	r3, [r2, #4]
 8004cc4:	400b      	ands	r3, r1
 8004cc6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	6053      	str	r3, [r2, #4]
}
 8004ccc:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cce:	684a      	ldr	r2, [r1, #4]
 8004cd0:	4c0a      	ldr	r4, [pc, #40]	; (8004cfc <UART_AdvFeatureConfig+0xcc>)
 8004cd2:	4022      	ands	r2, r4
 8004cd4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004cd6:	4322      	orrs	r2, r4
 8004cd8:	604a      	str	r2, [r1, #4]
 8004cda:	e7ee      	b.n	8004cba <UART_AdvFeatureConfig+0x8a>
 8004cdc:	fffdffff 	.word	0xfffdffff
 8004ce0:	fffeffff 	.word	0xfffeffff
 8004ce4:	fffbffff 	.word	0xfffbffff
 8004ce8:	ffff7fff 	.word	0xffff7fff
 8004cec:	ffffefff 	.word	0xffffefff
 8004cf0:	ffffdfff 	.word	0xffffdfff
 8004cf4:	ffefffff 	.word	0xffefffff
 8004cf8:	fff7ffff 	.word	0xfff7ffff
 8004cfc:	ff9fffff 	.word	0xff9fffff

08004d00 <UART_CheckIdleState>:
{
 8004d00:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d02:	2384      	movs	r3, #132	; 0x84
 8004d04:	2200      	movs	r2, #0
{
 8004d06:	46c6      	mov	lr, r8
 8004d08:	0004      	movs	r4, r0
 8004d0a:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0c:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8004d0e:	f7fc fb73 	bl	80013f8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d12:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004d14:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	0712      	lsls	r2, r2, #28
 8004d1a:	d410      	bmi.n	8004d3e <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	0752      	lsls	r2, r2, #29
 8004d20:	d43c      	bmi.n	8004d9c <UART_CheckIdleState+0x9c>
  huart->gState = HAL_UART_STATE_READY;
 8004d22:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 8004d24:	2280      	movs	r2, #128	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8004d26:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d28:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2a:	2300      	movs	r3, #0
  return HAL_OK;
 8004d2c:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d30:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8004d32:	2378      	movs	r3, #120	; 0x78
 8004d34:	2200      	movs	r2, #0
 8004d36:	54e2      	strb	r2, [r4, r3]
}
 8004d38:	bc80      	pop	{r7}
 8004d3a:	46b8      	mov	r8, r7
 8004d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	0292      	lsls	r2, r2, #10
 8004d42:	d4eb      	bmi.n	8004d1c <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d44:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d46:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d48:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d4a:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4c:	04b6      	lsls	r6, r6, #18
 8004d4e:	e010      	b.n	8004d72 <UART_CheckIdleState+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	4217      	tst	r7, r2
 8004d56:	d009      	beq.n	8004d6c <UART_CheckIdleState+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d58:	4641      	mov	r1, r8
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	4211      	tst	r1, r2
 8004d5e:	d158      	bne.n	8004e12 <UART_CheckIdleState+0x112>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d60:	2280      	movs	r2, #128	; 0x80
 8004d62:	69d9      	ldr	r1, [r3, #28]
 8004d64:	0112      	lsls	r2, r2, #4
 8004d66:	4211      	tst	r1, r2
 8004d68:	d000      	beq.n	8004d6c <UART_CheckIdleState+0x6c>
 8004d6a:	e083      	b.n	8004e74 <UART_CheckIdleState+0x174>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d6c:	69da      	ldr	r2, [r3, #28]
 8004d6e:	0292      	lsls	r2, r2, #10
 8004d70:	d4d4      	bmi.n	8004d1c <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d72:	f7fc fb41 	bl	80013f8 <HAL_GetTick>
 8004d76:	1b40      	subs	r0, r0, r5
 8004d78:	42b0      	cmp	r0, r6
 8004d7a:	d3e9      	bcc.n	8004d50 <UART_CheckIdleState+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d7c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d80:	2301      	movs	r3, #1
 8004d82:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d86:	2080      	movs	r0, #128	; 0x80
 8004d88:	6822      	ldr	r2, [r4, #0]
 8004d8a:	6813      	ldr	r3, [r2, #0]
 8004d8c:	4383      	bics	r3, r0
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8004d94:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8004d96:	387d      	subs	r0, #125	; 0x7d
      huart->gState = HAL_UART_STATE_READY;
 8004d98:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8004d9a:	e7ca      	b.n	8004d32 <UART_CheckIdleState+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	025b      	lsls	r3, r3, #9
 8004da0:	d4bf      	bmi.n	8004d22 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da2:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004da4:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004da6:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004da8:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004daa:	04b6      	lsls	r6, r6, #18
 8004dac:	e011      	b.n	8004dd2 <UART_CheckIdleState+0xd2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4217      	tst	r7, r2
 8004db4:	d00a      	beq.n	8004dcc <UART_CheckIdleState+0xcc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004db6:	4641      	mov	r1, r8
 8004db8:	69da      	ldr	r2, [r3, #28]
 8004dba:	4211      	tst	r1, r2
 8004dbc:	d000      	beq.n	8004dc0 <UART_CheckIdleState+0xc0>
 8004dbe:	e089      	b.n	8004ed4 <UART_CheckIdleState+0x1d4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dc0:	2280      	movs	r2, #128	; 0x80
 8004dc2:	69d9      	ldr	r1, [r3, #28]
 8004dc4:	0112      	lsls	r2, r2, #4
 8004dc6:	4211      	tst	r1, r2
 8004dc8:	d000      	beq.n	8004dcc <UART_CheckIdleState+0xcc>
 8004dca:	e0b4      	b.n	8004f36 <UART_CheckIdleState+0x236>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	025b      	lsls	r3, r3, #9
 8004dd0:	d4a7      	bmi.n	8004d22 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd2:	f7fc fb11 	bl	80013f8 <HAL_GetTick>
 8004dd6:	1b40      	subs	r0, r0, r5
 8004dd8:	42b0      	cmp	r0, r6
 8004dda:	d3e8      	bcc.n	8004dae <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ddc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de0:	2201      	movs	r2, #1
 8004de2:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de6:	6821      	ldr	r1, [r4, #0]
 8004de8:	4d6b      	ldr	r5, [pc, #428]	; (8004f98 <UART_CheckIdleState+0x298>)
 8004dea:	680b      	ldr	r3, [r1, #0]
 8004dec:	402b      	ands	r3, r5
 8004dee:	600b      	str	r3, [r1, #0]
 8004df0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df8:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfc:	6821      	ldr	r1, [r4, #0]
 8004dfe:	688b      	ldr	r3, [r1, #8]
 8004e00:	4393      	bics	r3, r2
 8004e02:	608b      	str	r3, [r1, #8]
 8004e04:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 8004e0c:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 8004e0e:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004e10:	e78f      	b.n	8004d32 <UART_CheckIdleState+0x32>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e12:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e14:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e1e:	6821      	ldr	r1, [r4, #0]
 8004e20:	4d5d      	ldr	r5, [pc, #372]	; (8004f98 <UART_CheckIdleState+0x298>)
 8004e22:	680b      	ldr	r3, [r1, #0]
 8004e24:	402b      	ands	r3, r5
 8004e26:	600b      	str	r3, [r1, #0]
 8004e28:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e2c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e30:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e34:	6821      	ldr	r1, [r4, #0]
 8004e36:	688b      	ldr	r3, [r1, #8]
 8004e38:	4393      	bics	r3, r2
 8004e3a:	608b      	str	r3, [r1, #8]
 8004e3c:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e40:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d10a      	bne.n	8004e5c <UART_CheckIdleState+0x15c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e46:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4e:	2010      	movs	r0, #16
 8004e50:	6822      	ldr	r2, [r4, #0]
 8004e52:	6813      	ldr	r3, [r2, #0]
 8004e54:	4383      	bics	r3, r0
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e60:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004e62:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e64:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e66:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e68:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8004e6a:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e6c:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8004e6e:	3a0c      	subs	r2, #12
 8004e70:	54a3      	strb	r3, [r4, r2]
 8004e72:	e783      	b.n	8004d7c <UART_CheckIdleState+0x7c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e74:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e76:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e80:	6821      	ldr	r1, [r4, #0]
 8004e82:	4d45      	ldr	r5, [pc, #276]	; (8004f98 <UART_CheckIdleState+0x298>)
 8004e84:	680b      	ldr	r3, [r1, #0]
 8004e86:	402b      	ands	r3, r5
 8004e88:	600b      	str	r3, [r1, #0]
 8004e8a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e8e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e92:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e96:	6821      	ldr	r1, [r4, #0]
 8004e98:	688b      	ldr	r3, [r1, #8]
 8004e9a:	4393      	bics	r3, r2
 8004e9c:	608b      	str	r3, [r1, #8]
 8004e9e:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10a      	bne.n	8004ebe <UART_CheckIdleState+0x1be>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eac:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb0:	2010      	movs	r0, #16
 8004eb2:	6822      	ldr	r2, [r4, #0]
 8004eb4:	6813      	ldr	r3, [r2, #0]
 8004eb6:	4383      	bics	r3, r0
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ec2:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004ec4:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8004eca:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ecc:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8004ece:	3258      	adds	r2, #88	; 0x58
 8004ed0:	54a3      	strb	r3, [r4, r2]
 8004ed2:	e753      	b.n	8004d7c <UART_CheckIdleState+0x7c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ed4:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eda:	2201      	movs	r2, #1
 8004edc:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee0:	6821      	ldr	r1, [r4, #0]
 8004ee2:	4d2d      	ldr	r5, [pc, #180]	; (8004f98 <UART_CheckIdleState+0x298>)
 8004ee4:	680b      	ldr	r3, [r1, #0]
 8004ee6:	402b      	ands	r3, r5
 8004ee8:	600b      	str	r3, [r1, #0]
 8004eea:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eee:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef6:	6821      	ldr	r1, [r4, #0]
 8004ef8:	688b      	ldr	r3, [r1, #8]
 8004efa:	4393      	bics	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
 8004efe:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f02:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d10a      	bne.n	8004f1e <UART_CheckIdleState+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f08:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f10:	2010      	movs	r0, #16
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	6813      	ldr	r3, [r2, #0]
 8004f16:	4383      	bics	r3, r0
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004f1e:	2380      	movs	r3, #128	; 0x80
 8004f20:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f22:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004f24:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f26:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f28:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8004f2c:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f2e:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8004f30:	3a0c      	subs	r2, #12
 8004f32:	54a3      	strb	r3, [r4, r2]
 8004f34:	e752      	b.n	8004ddc <UART_CheckIdleState+0xdc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f36:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f38:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f42:	6821      	ldr	r1, [r4, #0]
 8004f44:	4d14      	ldr	r5, [pc, #80]	; (8004f98 <UART_CheckIdleState+0x298>)
 8004f46:	680b      	ldr	r3, [r1, #0]
 8004f48:	402b      	ands	r3, r5
 8004f4a:	600b      	str	r3, [r1, #0]
 8004f4c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f50:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f54:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f58:	6821      	ldr	r1, [r4, #0]
 8004f5a:	688b      	ldr	r3, [r1, #8]
 8004f5c:	4393      	bics	r3, r2
 8004f5e:	608b      	str	r3, [r1, #8]
 8004f60:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f64:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d10a      	bne.n	8004f80 <UART_CheckIdleState+0x280>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f6a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f72:	2010      	movs	r0, #16
 8004f74:	6822      	ldr	r2, [r4, #0]
 8004f76:	6813      	ldr	r3, [r2, #0]
 8004f78:	4383      	bics	r3, r0
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004f80:	2220      	movs	r2, #32
 8004f82:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f84:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004f86:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8004f8c:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f8e:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8004f90:	3258      	adds	r2, #88	; 0x58
 8004f92:	54a3      	strb	r3, [r4, r2]
 8004f94:	e722      	b.n	8004ddc <UART_CheckIdleState+0xdc>
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	fffffedf 	.word	0xfffffedf

08004f9c <HAL_UART_Init>:
{
 8004f9c:	b570      	push	{r4, r5, r6, lr}
 8004f9e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004fa0:	d100      	bne.n	8004fa4 <HAL_UART_Init+0x8>
 8004fa2:	e076      	b.n	8005092 <HAL_UART_Init+0xf6>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004fa4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d067      	beq.n	800507a <HAL_UART_Init+0xde>
  huart->gState = HAL_UART_STATE_BUSY;
 8004faa:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004fac:	2101      	movs	r1, #1
 8004fae:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004fb0:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004fb2:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fb4:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8004fb6:	438b      	bics	r3, r1
 8004fb8:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fba:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fbc:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fbe:	432b      	orrs	r3, r5
 8004fc0:	6965      	ldr	r5, [r4, #20]
 8004fc2:	69e1      	ldr	r1, [r4, #28]
 8004fc4:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fc6:	4d49      	ldr	r5, [pc, #292]	; (80050ec <HAL_UART_Init+0x150>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fc8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fca:	4028      	ands	r0, r5
 8004fcc:	4303      	orrs	r3, r0
 8004fce:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fd0:	6853      	ldr	r3, [r2, #4]
 8004fd2:	4847      	ldr	r0, [pc, #284]	; (80050f0 <HAL_UART_Init+0x154>)
  tmpreg |= huart->Init.OneBitSampling;
 8004fd4:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fd6:	4003      	ands	r3, r0
 8004fd8:	68e0      	ldr	r0, [r4, #12]
 8004fda:	4303      	orrs	r3, r0
 8004fdc:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fde:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fe0:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8004fe2:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fe4:	4d43      	ldr	r5, [pc, #268]	; (80050f4 <HAL_UART_Init+0x158>)
 8004fe6:	4028      	ands	r0, r5
 8004fe8:	4303      	orrs	r3, r0
 8004fea:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fec:	4b42      	ldr	r3, [pc, #264]	; (80050f8 <HAL_UART_Init+0x15c>)
 8004fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d91f      	bls.n	800503a <HAL_UART_Init+0x9e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ffa:	2380      	movs	r3, #128	; 0x80
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	4299      	cmp	r1, r3
 8005000:	d100      	bne.n	8005004 <HAL_UART_Init+0x68>
 8005002:	e070      	b.n	80050e6 <HAL_UART_Init+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005004:	f7fd ffbc 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005008:	2800      	cmp	r0, #0
 800500a:	d124      	bne.n	8005056 <HAL_UART_Init+0xba>
  huart->RxISR = NULL;
 800500c:	2300      	movs	r3, #0
 800500e:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8005010:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005014:	2b00      	cmp	r3, #0
 8005016:	d135      	bne.n	8005084 <HAL_UART_Init+0xe8>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	4938      	ldr	r1, [pc, #224]	; (80050fc <HAL_UART_Init+0x160>)
 800501c:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800501e:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005020:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005022:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005024:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	438a      	bics	r2, r1
 800502a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	3929      	subs	r1, #41	; 0x29
 8005030:	430a      	orrs	r2, r1
 8005032:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005034:	f7ff fe64 	bl	8004d00 <UART_CheckIdleState>
 8005038:	e01b      	b.n	8005072 <HAL_UART_Init+0xd6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800503a:	2080      	movs	r0, #128	; 0x80
 800503c:	4a30      	ldr	r2, [pc, #192]	; (8005100 <HAL_UART_Init+0x164>)
 800503e:	0200      	lsls	r0, r0, #8
 8005040:	5cd3      	ldrb	r3, [r2, r3]
 8005042:	4281      	cmp	r1, r0
 8005044:	d027      	beq.n	8005096 <HAL_UART_Init+0xfa>
    switch (clocksource)
 8005046:	2b04      	cmp	r3, #4
 8005048:	d044      	beq.n	80050d4 <HAL_UART_Init+0x138>
 800504a:	d813      	bhi.n	8005074 <HAL_UART_Init+0xd8>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0d9      	beq.n	8005004 <HAL_UART_Init+0x68>
 8005050:	2b02      	cmp	r3, #2
 8005052:	d10a      	bne.n	800506a <HAL_UART_Init+0xce>
        pclk = (uint32_t) HSI_VALUE;
 8005054:	482b      	ldr	r0, [pc, #172]	; (8005104 <HAL_UART_Init+0x168>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005056:	6861      	ldr	r1, [r4, #4]
 8005058:	084b      	lsrs	r3, r1, #1
 800505a:	1818      	adds	r0, r3, r0
 800505c:	f7fb f854 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005060:	0002      	movs	r2, r0
 8005062:	4b29      	ldr	r3, [pc, #164]	; (8005108 <HAL_UART_Init+0x16c>)
 8005064:	3a10      	subs	r2, #16
 8005066:	429a      	cmp	r2, r3
 8005068:	d910      	bls.n	800508c <HAL_UART_Init+0xf0>
  huart->RxISR = NULL;
 800506a:	2300      	movs	r3, #0
    return HAL_ERROR;
 800506c:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800506e:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8005070:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8005072:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 8005074:	2b08      	cmp	r3, #8
 8005076:	d0ee      	beq.n	8005056 <HAL_UART_Init+0xba>
 8005078:	e7f7      	b.n	800506a <HAL_UART_Init+0xce>
    huart->Lock = HAL_UNLOCKED;
 800507a:	2278      	movs	r2, #120	; 0x78
 800507c:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 800507e:	f7fc f83b 	bl	80010f8 <HAL_UART_MspInit>
 8005082:	e792      	b.n	8004faa <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8005084:	0020      	movs	r0, r4
 8005086:	f7ff fdd3 	bl	8004c30 <UART_AdvFeatureConfig>
 800508a:	e7c5      	b.n	8005018 <HAL_UART_Init+0x7c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	60d8      	str	r0, [r3, #12]
 8005090:	e7bc      	b.n	800500c <HAL_UART_Init+0x70>
    return HAL_ERROR;
 8005092:	2001      	movs	r0, #1
 8005094:	e7ed      	b.n	8005072 <HAL_UART_Init+0xd6>
    switch (clocksource)
 8005096:	2b04      	cmp	r3, #4
 8005098:	d01f      	beq.n	80050da <HAL_UART_Init+0x13e>
 800509a:	d816      	bhi.n	80050ca <HAL_UART_Init+0x12e>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d022      	beq.n	80050e6 <HAL_UART_Init+0x14a>
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d1e2      	bne.n	800506a <HAL_UART_Init+0xce>
 80050a4:	4b19      	ldr	r3, [pc, #100]	; (800510c <HAL_UART_Init+0x170>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050a6:	6861      	ldr	r1, [r4, #4]
 80050a8:	0848      	lsrs	r0, r1, #1
 80050aa:	18c0      	adds	r0, r0, r3
 80050ac:	f7fb f82c 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050b0:	0002      	movs	r2, r0
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <HAL_UART_Init+0x16c>)
 80050b4:	3a10      	subs	r2, #16
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d8d7      	bhi.n	800506a <HAL_UART_Init+0xce>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050ba:	4b15      	ldr	r3, [pc, #84]	; (8005110 <HAL_UART_Init+0x174>)
        huart->Instance->BRR = brrtemp;
 80050bc:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050be:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050c0:	0700      	lsls	r0, r0, #28
 80050c2:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80050c4:	4303      	orrs	r3, r0
 80050c6:	60d3      	str	r3, [r2, #12]
 80050c8:	e7a0      	b.n	800500c <HAL_UART_Init+0x70>
    switch (clocksource)
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	d1cd      	bne.n	800506a <HAL_UART_Init+0xce>
 80050ce:	2380      	movs	r3, #128	; 0x80
 80050d0:	025b      	lsls	r3, r3, #9
 80050d2:	e7e8      	b.n	80050a6 <HAL_UART_Init+0x10a>
        pclk = HAL_RCC_GetSysClockFreq();
 80050d4:	f7fd ff2a 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
        break;
 80050d8:	e796      	b.n	8005008 <HAL_UART_Init+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 80050da:	f7fd ff27 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050de:	0043      	lsls	r3, r0, #1
    if (pclk != 0U)
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d1e0      	bne.n	80050a6 <HAL_UART_Init+0x10a>
 80050e4:	e792      	b.n	800500c <HAL_UART_Init+0x70>
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e6:	f7fd ff4b 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
        break;
 80050ea:	e7f8      	b.n	80050de <HAL_UART_Init+0x142>
 80050ec:	ffff69f3 	.word	0xffff69f3
 80050f0:	ffffcfff 	.word	0xffffcfff
 80050f4:	fffff4ff 	.word	0xfffff4ff
 80050f8:	40021000 	.word	0x40021000
 80050fc:	ffffb7ff 	.word	0xffffb7ff
 8005100:	08005d24 	.word	0x08005d24
 8005104:	007a1200 	.word	0x007a1200
 8005108:	0000ffef 	.word	0x0000ffef
 800510c:	00f42400 	.word	0x00f42400
 8005110:	0000fff0 	.word	0x0000fff0

08005114 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005114:	4770      	bx	lr
 8005116:	46c0      	nop			; (mov r8, r8)

08005118 <std>:
 8005118:	2300      	movs	r3, #0
 800511a:	b510      	push	{r4, lr}
 800511c:	0004      	movs	r4, r0
 800511e:	6003      	str	r3, [r0, #0]
 8005120:	6043      	str	r3, [r0, #4]
 8005122:	6083      	str	r3, [r0, #8]
 8005124:	8181      	strh	r1, [r0, #12]
 8005126:	6643      	str	r3, [r0, #100]	; 0x64
 8005128:	0019      	movs	r1, r3
 800512a:	81c2      	strh	r2, [r0, #14]
 800512c:	6103      	str	r3, [r0, #16]
 800512e:	6143      	str	r3, [r0, #20]
 8005130:	6183      	str	r3, [r0, #24]
 8005132:	2208      	movs	r2, #8
 8005134:	305c      	adds	r0, #92	; 0x5c
 8005136:	f000 f901 	bl	800533c <memset>
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <std+0x38>)
 800513c:	6224      	str	r4, [r4, #32]
 800513e:	6263      	str	r3, [r4, #36]	; 0x24
 8005140:	4b04      	ldr	r3, [pc, #16]	; (8005154 <std+0x3c>)
 8005142:	62a3      	str	r3, [r4, #40]	; 0x28
 8005144:	4b04      	ldr	r3, [pc, #16]	; (8005158 <std+0x40>)
 8005146:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005148:	4b04      	ldr	r3, [pc, #16]	; (800515c <std+0x44>)
 800514a:	6323      	str	r3, [r4, #48]	; 0x30
 800514c:	bd10      	pop	{r4, pc}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	08005679 	.word	0x08005679
 8005154:	080056a1 	.word	0x080056a1
 8005158:	080056d9 	.word	0x080056d9
 800515c:	08005705 	.word	0x08005705

08005160 <stdio_exit_handler>:
 8005160:	b510      	push	{r4, lr}
 8005162:	4a03      	ldr	r2, [pc, #12]	; (8005170 <stdio_exit_handler+0x10>)
 8005164:	4903      	ldr	r1, [pc, #12]	; (8005174 <stdio_exit_handler+0x14>)
 8005166:	4804      	ldr	r0, [pc, #16]	; (8005178 <stdio_exit_handler+0x18>)
 8005168:	f000 f86c 	bl	8005244 <_fwalk_sglue>
 800516c:	bd10      	pop	{r4, pc}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	2000000c 	.word	0x2000000c
 8005174:	08005601 	.word	0x08005601
 8005178:	20000018 	.word	0x20000018

0800517c <cleanup_stdio>:
 800517c:	6841      	ldr	r1, [r0, #4]
 800517e:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <cleanup_stdio+0x30>)
 8005180:	b510      	push	{r4, lr}
 8005182:	0004      	movs	r4, r0
 8005184:	4299      	cmp	r1, r3
 8005186:	d001      	beq.n	800518c <cleanup_stdio+0x10>
 8005188:	f000 fa3a 	bl	8005600 <_fflush_r>
 800518c:	68a1      	ldr	r1, [r4, #8]
 800518e:	4b08      	ldr	r3, [pc, #32]	; (80051b0 <cleanup_stdio+0x34>)
 8005190:	4299      	cmp	r1, r3
 8005192:	d002      	beq.n	800519a <cleanup_stdio+0x1e>
 8005194:	0020      	movs	r0, r4
 8005196:	f000 fa33 	bl	8005600 <_fflush_r>
 800519a:	68e1      	ldr	r1, [r4, #12]
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <cleanup_stdio+0x38>)
 800519e:	4299      	cmp	r1, r3
 80051a0:	d002      	beq.n	80051a8 <cleanup_stdio+0x2c>
 80051a2:	0020      	movs	r0, r4
 80051a4:	f000 fa2c 	bl	8005600 <_fflush_r>
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	2000041c 	.word	0x2000041c
 80051b0:	20000484 	.word	0x20000484
 80051b4:	200004ec 	.word	0x200004ec

080051b8 <global_stdio_init.part.0>:
 80051b8:	b510      	push	{r4, lr}
 80051ba:	4b09      	ldr	r3, [pc, #36]	; (80051e0 <global_stdio_init.part.0+0x28>)
 80051bc:	4a09      	ldr	r2, [pc, #36]	; (80051e4 <global_stdio_init.part.0+0x2c>)
 80051be:	2104      	movs	r1, #4
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	4809      	ldr	r0, [pc, #36]	; (80051e8 <global_stdio_init.part.0+0x30>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	f7ff ffa7 	bl	8005118 <std>
 80051ca:	2201      	movs	r2, #1
 80051cc:	2109      	movs	r1, #9
 80051ce:	4807      	ldr	r0, [pc, #28]	; (80051ec <global_stdio_init.part.0+0x34>)
 80051d0:	f7ff ffa2 	bl	8005118 <std>
 80051d4:	2202      	movs	r2, #2
 80051d6:	2112      	movs	r1, #18
 80051d8:	4805      	ldr	r0, [pc, #20]	; (80051f0 <global_stdio_init.part.0+0x38>)
 80051da:	f7ff ff9d 	bl	8005118 <std>
 80051de:	bd10      	pop	{r4, pc}
 80051e0:	20000554 	.word	0x20000554
 80051e4:	08005161 	.word	0x08005161
 80051e8:	2000041c 	.word	0x2000041c
 80051ec:	20000484 	.word	0x20000484
 80051f0:	200004ec 	.word	0x200004ec

080051f4 <__sfp_lock_acquire>:
 80051f4:	b510      	push	{r4, lr}
 80051f6:	4802      	ldr	r0, [pc, #8]	; (8005200 <__sfp_lock_acquire+0xc>)
 80051f8:	f000 f8d2 	bl	80053a0 <__retarget_lock_acquire_recursive>
 80051fc:	bd10      	pop	{r4, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	20000559 	.word	0x20000559

08005204 <__sfp_lock_release>:
 8005204:	b510      	push	{r4, lr}
 8005206:	4802      	ldr	r0, [pc, #8]	; (8005210 <__sfp_lock_release+0xc>)
 8005208:	f000 f8cb 	bl	80053a2 <__retarget_lock_release_recursive>
 800520c:	bd10      	pop	{r4, pc}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	20000559 	.word	0x20000559

08005214 <__sinit>:
 8005214:	b510      	push	{r4, lr}
 8005216:	0004      	movs	r4, r0
 8005218:	f7ff ffec 	bl	80051f4 <__sfp_lock_acquire>
 800521c:	6a23      	ldr	r3, [r4, #32]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <__sinit+0x14>
 8005222:	f7ff ffef 	bl	8005204 <__sfp_lock_release>
 8005226:	bd10      	pop	{r4, pc}
 8005228:	4b04      	ldr	r3, [pc, #16]	; (800523c <__sinit+0x28>)
 800522a:	6223      	str	r3, [r4, #32]
 800522c:	4b04      	ldr	r3, [pc, #16]	; (8005240 <__sinit+0x2c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1f6      	bne.n	8005222 <__sinit+0xe>
 8005234:	f7ff ffc0 	bl	80051b8 <global_stdio_init.part.0>
 8005238:	e7f3      	b.n	8005222 <__sinit+0xe>
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	0800517d 	.word	0x0800517d
 8005240:	20000554 	.word	0x20000554

08005244 <_fwalk_sglue>:
 8005244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005246:	0014      	movs	r4, r2
 8005248:	2600      	movs	r6, #0
 800524a:	9000      	str	r0, [sp, #0]
 800524c:	9101      	str	r1, [sp, #4]
 800524e:	68a5      	ldr	r5, [r4, #8]
 8005250:	6867      	ldr	r7, [r4, #4]
 8005252:	3f01      	subs	r7, #1
 8005254:	d504      	bpl.n	8005260 <_fwalk_sglue+0x1c>
 8005256:	6824      	ldr	r4, [r4, #0]
 8005258:	2c00      	cmp	r4, #0
 800525a:	d1f8      	bne.n	800524e <_fwalk_sglue+0xa>
 800525c:	0030      	movs	r0, r6
 800525e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005260:	89ab      	ldrh	r3, [r5, #12]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d908      	bls.n	8005278 <_fwalk_sglue+0x34>
 8005266:	220e      	movs	r2, #14
 8005268:	5eab      	ldrsh	r3, [r5, r2]
 800526a:	3301      	adds	r3, #1
 800526c:	d004      	beq.n	8005278 <_fwalk_sglue+0x34>
 800526e:	0029      	movs	r1, r5
 8005270:	9800      	ldr	r0, [sp, #0]
 8005272:	9b01      	ldr	r3, [sp, #4]
 8005274:	4798      	blx	r3
 8005276:	4306      	orrs	r6, r0
 8005278:	3568      	adds	r5, #104	; 0x68
 800527a:	e7ea      	b.n	8005252 <_fwalk_sglue+0xe>

0800527c <_puts_r>:
 800527c:	6a03      	ldr	r3, [r0, #32]
 800527e:	b570      	push	{r4, r5, r6, lr}
 8005280:	0005      	movs	r5, r0
 8005282:	000e      	movs	r6, r1
 8005284:	6884      	ldr	r4, [r0, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <_puts_r+0x12>
 800528a:	f7ff ffc3 	bl	8005214 <__sinit>
 800528e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005290:	07db      	lsls	r3, r3, #31
 8005292:	d405      	bmi.n	80052a0 <_puts_r+0x24>
 8005294:	89a3      	ldrh	r3, [r4, #12]
 8005296:	059b      	lsls	r3, r3, #22
 8005298:	d402      	bmi.n	80052a0 <_puts_r+0x24>
 800529a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800529c:	f000 f880 	bl	80053a0 <__retarget_lock_acquire_recursive>
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	071b      	lsls	r3, r3, #28
 80052a4:	d502      	bpl.n	80052ac <_puts_r+0x30>
 80052a6:	6923      	ldr	r3, [r4, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d11f      	bne.n	80052ec <_puts_r+0x70>
 80052ac:	0021      	movs	r1, r4
 80052ae:	0028      	movs	r0, r5
 80052b0:	f000 fa70 	bl	8005794 <__swsetup_r>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d019      	beq.n	80052ec <_puts_r+0x70>
 80052b8:	2501      	movs	r5, #1
 80052ba:	426d      	negs	r5, r5
 80052bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052be:	07db      	lsls	r3, r3, #31
 80052c0:	d405      	bmi.n	80052ce <_puts_r+0x52>
 80052c2:	89a3      	ldrh	r3, [r4, #12]
 80052c4:	059b      	lsls	r3, r3, #22
 80052c6:	d402      	bmi.n	80052ce <_puts_r+0x52>
 80052c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ca:	f000 f86a 	bl	80053a2 <__retarget_lock_release_recursive>
 80052ce:	0028      	movs	r0, r5
 80052d0:	bd70      	pop	{r4, r5, r6, pc}
 80052d2:	3601      	adds	r6, #1
 80052d4:	60a3      	str	r3, [r4, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	da04      	bge.n	80052e4 <_puts_r+0x68>
 80052da:	69a2      	ldr	r2, [r4, #24]
 80052dc:	429a      	cmp	r2, r3
 80052de:	dc16      	bgt.n	800530e <_puts_r+0x92>
 80052e0:	290a      	cmp	r1, #10
 80052e2:	d014      	beq.n	800530e <_puts_r+0x92>
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	6022      	str	r2, [r4, #0]
 80052ea:	7019      	strb	r1, [r3, #0]
 80052ec:	68a3      	ldr	r3, [r4, #8]
 80052ee:	7831      	ldrb	r1, [r6, #0]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	2900      	cmp	r1, #0
 80052f4:	d1ed      	bne.n	80052d2 <_puts_r+0x56>
 80052f6:	60a3      	str	r3, [r4, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	da0f      	bge.n	800531c <_puts_r+0xa0>
 80052fc:	0028      	movs	r0, r5
 80052fe:	0022      	movs	r2, r4
 8005300:	310a      	adds	r1, #10
 8005302:	f000 fa05 	bl	8005710 <__swbuf_r>
 8005306:	250a      	movs	r5, #10
 8005308:	3001      	adds	r0, #1
 800530a:	d1d7      	bne.n	80052bc <_puts_r+0x40>
 800530c:	e7d4      	b.n	80052b8 <_puts_r+0x3c>
 800530e:	0022      	movs	r2, r4
 8005310:	0028      	movs	r0, r5
 8005312:	f000 f9fd 	bl	8005710 <__swbuf_r>
 8005316:	3001      	adds	r0, #1
 8005318:	d1e8      	bne.n	80052ec <_puts_r+0x70>
 800531a:	e7cd      	b.n	80052b8 <_puts_r+0x3c>
 800531c:	250a      	movs	r5, #10
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	6022      	str	r2, [r4, #0]
 8005324:	701d      	strb	r5, [r3, #0]
 8005326:	e7c9      	b.n	80052bc <_puts_r+0x40>

08005328 <puts>:
 8005328:	b510      	push	{r4, lr}
 800532a:	4b03      	ldr	r3, [pc, #12]	; (8005338 <puts+0x10>)
 800532c:	0001      	movs	r1, r0
 800532e:	6818      	ldr	r0, [r3, #0]
 8005330:	f7ff ffa4 	bl	800527c <_puts_r>
 8005334:	bd10      	pop	{r4, pc}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	20000064 	.word	0x20000064

0800533c <memset>:
 800533c:	0003      	movs	r3, r0
 800533e:	1882      	adds	r2, r0, r2
 8005340:	4293      	cmp	r3, r2
 8005342:	d100      	bne.n	8005346 <memset+0xa>
 8005344:	4770      	bx	lr
 8005346:	7019      	strb	r1, [r3, #0]
 8005348:	3301      	adds	r3, #1
 800534a:	e7f9      	b.n	8005340 <memset+0x4>

0800534c <__errno>:
 800534c:	4b01      	ldr	r3, [pc, #4]	; (8005354 <__errno+0x8>)
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	4770      	bx	lr
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	20000064 	.word	0x20000064

08005358 <__libc_init_array>:
 8005358:	b570      	push	{r4, r5, r6, lr}
 800535a:	2600      	movs	r6, #0
 800535c:	4c0c      	ldr	r4, [pc, #48]	; (8005390 <__libc_init_array+0x38>)
 800535e:	4d0d      	ldr	r5, [pc, #52]	; (8005394 <__libc_init_array+0x3c>)
 8005360:	1b64      	subs	r4, r4, r5
 8005362:	10a4      	asrs	r4, r4, #2
 8005364:	42a6      	cmp	r6, r4
 8005366:	d109      	bne.n	800537c <__libc_init_array+0x24>
 8005368:	2600      	movs	r6, #0
 800536a:	f000 fbab 	bl	8005ac4 <_init>
 800536e:	4c0a      	ldr	r4, [pc, #40]	; (8005398 <__libc_init_array+0x40>)
 8005370:	4d0a      	ldr	r5, [pc, #40]	; (800539c <__libc_init_array+0x44>)
 8005372:	1b64      	subs	r4, r4, r5
 8005374:	10a4      	asrs	r4, r4, #2
 8005376:	42a6      	cmp	r6, r4
 8005378:	d105      	bne.n	8005386 <__libc_init_array+0x2e>
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	00b3      	lsls	r3, r6, #2
 800537e:	58eb      	ldr	r3, [r5, r3]
 8005380:	4798      	blx	r3
 8005382:	3601      	adds	r6, #1
 8005384:	e7ee      	b.n	8005364 <__libc_init_array+0xc>
 8005386:	00b3      	lsls	r3, r6, #2
 8005388:	58eb      	ldr	r3, [r5, r3]
 800538a:	4798      	blx	r3
 800538c:	3601      	adds	r6, #1
 800538e:	e7f2      	b.n	8005376 <__libc_init_array+0x1e>
 8005390:	08005d28 	.word	0x08005d28
 8005394:	08005d28 	.word	0x08005d28
 8005398:	08005d2c 	.word	0x08005d2c
 800539c:	08005d28 	.word	0x08005d28

080053a0 <__retarget_lock_acquire_recursive>:
 80053a0:	4770      	bx	lr

080053a2 <__retarget_lock_release_recursive>:
 80053a2:	4770      	bx	lr

080053a4 <sbrk_aligned>:
 80053a4:	b570      	push	{r4, r5, r6, lr}
 80053a6:	4e0f      	ldr	r6, [pc, #60]	; (80053e4 <sbrk_aligned+0x40>)
 80053a8:	000d      	movs	r5, r1
 80053aa:	6831      	ldr	r1, [r6, #0]
 80053ac:	0004      	movs	r4, r0
 80053ae:	2900      	cmp	r1, #0
 80053b0:	d102      	bne.n	80053b8 <sbrk_aligned+0x14>
 80053b2:	f000 fb17 	bl	80059e4 <_sbrk_r>
 80053b6:	6030      	str	r0, [r6, #0]
 80053b8:	0029      	movs	r1, r5
 80053ba:	0020      	movs	r0, r4
 80053bc:	f000 fb12 	bl	80059e4 <_sbrk_r>
 80053c0:	1c43      	adds	r3, r0, #1
 80053c2:	d00a      	beq.n	80053da <sbrk_aligned+0x36>
 80053c4:	2303      	movs	r3, #3
 80053c6:	1cc5      	adds	r5, r0, #3
 80053c8:	439d      	bics	r5, r3
 80053ca:	42a8      	cmp	r0, r5
 80053cc:	d007      	beq.n	80053de <sbrk_aligned+0x3a>
 80053ce:	1a29      	subs	r1, r5, r0
 80053d0:	0020      	movs	r0, r4
 80053d2:	f000 fb07 	bl	80059e4 <_sbrk_r>
 80053d6:	3001      	adds	r0, #1
 80053d8:	d101      	bne.n	80053de <sbrk_aligned+0x3a>
 80053da:	2501      	movs	r5, #1
 80053dc:	426d      	negs	r5, r5
 80053de:	0028      	movs	r0, r5
 80053e0:	bd70      	pop	{r4, r5, r6, pc}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	20000560 	.word	0x20000560

080053e8 <_malloc_r>:
 80053e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053ea:	2203      	movs	r2, #3
 80053ec:	1ccb      	adds	r3, r1, #3
 80053ee:	4393      	bics	r3, r2
 80053f0:	3308      	adds	r3, #8
 80053f2:	0006      	movs	r6, r0
 80053f4:	001f      	movs	r7, r3
 80053f6:	2b0c      	cmp	r3, #12
 80053f8:	d238      	bcs.n	800546c <_malloc_r+0x84>
 80053fa:	270c      	movs	r7, #12
 80053fc:	42b9      	cmp	r1, r7
 80053fe:	d837      	bhi.n	8005470 <_malloc_r+0x88>
 8005400:	0030      	movs	r0, r6
 8005402:	f000 f929 	bl	8005658 <__malloc_lock>
 8005406:	4b38      	ldr	r3, [pc, #224]	; (80054e8 <_malloc_r+0x100>)
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	001c      	movs	r4, r3
 800540e:	2c00      	cmp	r4, #0
 8005410:	d133      	bne.n	800547a <_malloc_r+0x92>
 8005412:	0039      	movs	r1, r7
 8005414:	0030      	movs	r0, r6
 8005416:	f7ff ffc5 	bl	80053a4 <sbrk_aligned>
 800541a:	0004      	movs	r4, r0
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d15e      	bne.n	80054de <_malloc_r+0xf6>
 8005420:	9b00      	ldr	r3, [sp, #0]
 8005422:	681c      	ldr	r4, [r3, #0]
 8005424:	0025      	movs	r5, r4
 8005426:	2d00      	cmp	r5, #0
 8005428:	d14e      	bne.n	80054c8 <_malloc_r+0xe0>
 800542a:	2c00      	cmp	r4, #0
 800542c:	d051      	beq.n	80054d2 <_malloc_r+0xea>
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	0029      	movs	r1, r5
 8005432:	18e3      	adds	r3, r4, r3
 8005434:	0030      	movs	r0, r6
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	f000 fad4 	bl	80059e4 <_sbrk_r>
 800543c:	9b01      	ldr	r3, [sp, #4]
 800543e:	4283      	cmp	r3, r0
 8005440:	d147      	bne.n	80054d2 <_malloc_r+0xea>
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	0030      	movs	r0, r6
 8005446:	1aff      	subs	r7, r7, r3
 8005448:	0039      	movs	r1, r7
 800544a:	f7ff ffab 	bl	80053a4 <sbrk_aligned>
 800544e:	3001      	adds	r0, #1
 8005450:	d03f      	beq.n	80054d2 <_malloc_r+0xea>
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	19db      	adds	r3, r3, r7
 8005456:	6023      	str	r3, [r4, #0]
 8005458:	9b00      	ldr	r3, [sp, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d040      	beq.n	80054e2 <_malloc_r+0xfa>
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	42a2      	cmp	r2, r4
 8005464:	d133      	bne.n	80054ce <_malloc_r+0xe6>
 8005466:	2200      	movs	r2, #0
 8005468:	605a      	str	r2, [r3, #4]
 800546a:	e014      	b.n	8005496 <_malloc_r+0xae>
 800546c:	2b00      	cmp	r3, #0
 800546e:	dac5      	bge.n	80053fc <_malloc_r+0x14>
 8005470:	230c      	movs	r3, #12
 8005472:	2500      	movs	r5, #0
 8005474:	6033      	str	r3, [r6, #0]
 8005476:	0028      	movs	r0, r5
 8005478:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800547a:	6821      	ldr	r1, [r4, #0]
 800547c:	1bc9      	subs	r1, r1, r7
 800547e:	d420      	bmi.n	80054c2 <_malloc_r+0xda>
 8005480:	290b      	cmp	r1, #11
 8005482:	d918      	bls.n	80054b6 <_malloc_r+0xce>
 8005484:	19e2      	adds	r2, r4, r7
 8005486:	6027      	str	r7, [r4, #0]
 8005488:	42a3      	cmp	r3, r4
 800548a:	d112      	bne.n	80054b2 <_malloc_r+0xca>
 800548c:	9b00      	ldr	r3, [sp, #0]
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	6863      	ldr	r3, [r4, #4]
 8005492:	6011      	str	r1, [r2, #0]
 8005494:	6053      	str	r3, [r2, #4]
 8005496:	0030      	movs	r0, r6
 8005498:	0025      	movs	r5, r4
 800549a:	f000 f8e5 	bl	8005668 <__malloc_unlock>
 800549e:	2207      	movs	r2, #7
 80054a0:	350b      	adds	r5, #11
 80054a2:	1d23      	adds	r3, r4, #4
 80054a4:	4395      	bics	r5, r2
 80054a6:	1aea      	subs	r2, r5, r3
 80054a8:	429d      	cmp	r5, r3
 80054aa:	d0e4      	beq.n	8005476 <_malloc_r+0x8e>
 80054ac:	1b5b      	subs	r3, r3, r5
 80054ae:	50a3      	str	r3, [r4, r2]
 80054b0:	e7e1      	b.n	8005476 <_malloc_r+0x8e>
 80054b2:	605a      	str	r2, [r3, #4]
 80054b4:	e7ec      	b.n	8005490 <_malloc_r+0xa8>
 80054b6:	6862      	ldr	r2, [r4, #4]
 80054b8:	42a3      	cmp	r3, r4
 80054ba:	d1d5      	bne.n	8005468 <_malloc_r+0x80>
 80054bc:	9b00      	ldr	r3, [sp, #0]
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	e7e9      	b.n	8005496 <_malloc_r+0xae>
 80054c2:	0023      	movs	r3, r4
 80054c4:	6864      	ldr	r4, [r4, #4]
 80054c6:	e7a2      	b.n	800540e <_malloc_r+0x26>
 80054c8:	002c      	movs	r4, r5
 80054ca:	686d      	ldr	r5, [r5, #4]
 80054cc:	e7ab      	b.n	8005426 <_malloc_r+0x3e>
 80054ce:	0013      	movs	r3, r2
 80054d0:	e7c4      	b.n	800545c <_malloc_r+0x74>
 80054d2:	230c      	movs	r3, #12
 80054d4:	0030      	movs	r0, r6
 80054d6:	6033      	str	r3, [r6, #0]
 80054d8:	f000 f8c6 	bl	8005668 <__malloc_unlock>
 80054dc:	e7cb      	b.n	8005476 <_malloc_r+0x8e>
 80054de:	6027      	str	r7, [r4, #0]
 80054e0:	e7d9      	b.n	8005496 <_malloc_r+0xae>
 80054e2:	605b      	str	r3, [r3, #4]
 80054e4:	deff      	udf	#255	; 0xff
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	2000055c 	.word	0x2000055c

080054ec <__sflush_r>:
 80054ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ee:	898b      	ldrh	r3, [r1, #12]
 80054f0:	0005      	movs	r5, r0
 80054f2:	000c      	movs	r4, r1
 80054f4:	071a      	lsls	r2, r3, #28
 80054f6:	d45c      	bmi.n	80055b2 <__sflush_r+0xc6>
 80054f8:	684a      	ldr	r2, [r1, #4]
 80054fa:	2a00      	cmp	r2, #0
 80054fc:	dc04      	bgt.n	8005508 <__sflush_r+0x1c>
 80054fe:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005500:	2a00      	cmp	r2, #0
 8005502:	dc01      	bgt.n	8005508 <__sflush_r+0x1c>
 8005504:	2000      	movs	r0, #0
 8005506:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005508:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800550a:	2f00      	cmp	r7, #0
 800550c:	d0fa      	beq.n	8005504 <__sflush_r+0x18>
 800550e:	2200      	movs	r2, #0
 8005510:	2080      	movs	r0, #128	; 0x80
 8005512:	682e      	ldr	r6, [r5, #0]
 8005514:	602a      	str	r2, [r5, #0]
 8005516:	001a      	movs	r2, r3
 8005518:	0140      	lsls	r0, r0, #5
 800551a:	6a21      	ldr	r1, [r4, #32]
 800551c:	4002      	ands	r2, r0
 800551e:	4203      	tst	r3, r0
 8005520:	d034      	beq.n	800558c <__sflush_r+0xa0>
 8005522:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	075b      	lsls	r3, r3, #29
 8005528:	d506      	bpl.n	8005538 <__sflush_r+0x4c>
 800552a:	6863      	ldr	r3, [r4, #4]
 800552c:	1ac0      	subs	r0, r0, r3
 800552e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <__sflush_r+0x4c>
 8005534:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005536:	1ac0      	subs	r0, r0, r3
 8005538:	0002      	movs	r2, r0
 800553a:	2300      	movs	r3, #0
 800553c:	0028      	movs	r0, r5
 800553e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005540:	6a21      	ldr	r1, [r4, #32]
 8005542:	47b8      	blx	r7
 8005544:	89a2      	ldrh	r2, [r4, #12]
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	d106      	bne.n	8005558 <__sflush_r+0x6c>
 800554a:	6829      	ldr	r1, [r5, #0]
 800554c:	291d      	cmp	r1, #29
 800554e:	d82c      	bhi.n	80055aa <__sflush_r+0xbe>
 8005550:	4b2a      	ldr	r3, [pc, #168]	; (80055fc <__sflush_r+0x110>)
 8005552:	410b      	asrs	r3, r1
 8005554:	07db      	lsls	r3, r3, #31
 8005556:	d428      	bmi.n	80055aa <__sflush_r+0xbe>
 8005558:	2300      	movs	r3, #0
 800555a:	6063      	str	r3, [r4, #4]
 800555c:	6923      	ldr	r3, [r4, #16]
 800555e:	6023      	str	r3, [r4, #0]
 8005560:	04d2      	lsls	r2, r2, #19
 8005562:	d505      	bpl.n	8005570 <__sflush_r+0x84>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	d102      	bne.n	800556e <__sflush_r+0x82>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d100      	bne.n	8005570 <__sflush_r+0x84>
 800556e:	6560      	str	r0, [r4, #84]	; 0x54
 8005570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005572:	602e      	str	r6, [r5, #0]
 8005574:	2900      	cmp	r1, #0
 8005576:	d0c5      	beq.n	8005504 <__sflush_r+0x18>
 8005578:	0023      	movs	r3, r4
 800557a:	3344      	adds	r3, #68	; 0x44
 800557c:	4299      	cmp	r1, r3
 800557e:	d002      	beq.n	8005586 <__sflush_r+0x9a>
 8005580:	0028      	movs	r0, r5
 8005582:	f000 fa55 	bl	8005a30 <_free_r>
 8005586:	2000      	movs	r0, #0
 8005588:	6360      	str	r0, [r4, #52]	; 0x34
 800558a:	e7bc      	b.n	8005506 <__sflush_r+0x1a>
 800558c:	2301      	movs	r3, #1
 800558e:	0028      	movs	r0, r5
 8005590:	47b8      	blx	r7
 8005592:	1c43      	adds	r3, r0, #1
 8005594:	d1c6      	bne.n	8005524 <__sflush_r+0x38>
 8005596:	682b      	ldr	r3, [r5, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0c3      	beq.n	8005524 <__sflush_r+0x38>
 800559c:	2b1d      	cmp	r3, #29
 800559e:	d001      	beq.n	80055a4 <__sflush_r+0xb8>
 80055a0:	2b16      	cmp	r3, #22
 80055a2:	d101      	bne.n	80055a8 <__sflush_r+0xbc>
 80055a4:	602e      	str	r6, [r5, #0]
 80055a6:	e7ad      	b.n	8005504 <__sflush_r+0x18>
 80055a8:	89a2      	ldrh	r2, [r4, #12]
 80055aa:	2340      	movs	r3, #64	; 0x40
 80055ac:	4313      	orrs	r3, r2
 80055ae:	81a3      	strh	r3, [r4, #12]
 80055b0:	e7a9      	b.n	8005506 <__sflush_r+0x1a>
 80055b2:	690e      	ldr	r6, [r1, #16]
 80055b4:	2e00      	cmp	r6, #0
 80055b6:	d0a5      	beq.n	8005504 <__sflush_r+0x18>
 80055b8:	680f      	ldr	r7, [r1, #0]
 80055ba:	600e      	str	r6, [r1, #0]
 80055bc:	1bba      	subs	r2, r7, r6
 80055be:	9201      	str	r2, [sp, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	079b      	lsls	r3, r3, #30
 80055c4:	d100      	bne.n	80055c8 <__sflush_r+0xdc>
 80055c6:	694a      	ldr	r2, [r1, #20]
 80055c8:	60a2      	str	r2, [r4, #8]
 80055ca:	9b01      	ldr	r3, [sp, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	dd99      	ble.n	8005504 <__sflush_r+0x18>
 80055d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80055d2:	0032      	movs	r2, r6
 80055d4:	001f      	movs	r7, r3
 80055d6:	0028      	movs	r0, r5
 80055d8:	9b01      	ldr	r3, [sp, #4]
 80055da:	6a21      	ldr	r1, [r4, #32]
 80055dc:	47b8      	blx	r7
 80055de:	2800      	cmp	r0, #0
 80055e0:	dc06      	bgt.n	80055f0 <__sflush_r+0x104>
 80055e2:	2340      	movs	r3, #64	; 0x40
 80055e4:	2001      	movs	r0, #1
 80055e6:	89a2      	ldrh	r2, [r4, #12]
 80055e8:	4240      	negs	r0, r0
 80055ea:	4313      	orrs	r3, r2
 80055ec:	81a3      	strh	r3, [r4, #12]
 80055ee:	e78a      	b.n	8005506 <__sflush_r+0x1a>
 80055f0:	9b01      	ldr	r3, [sp, #4]
 80055f2:	1836      	adds	r6, r6, r0
 80055f4:	1a1b      	subs	r3, r3, r0
 80055f6:	9301      	str	r3, [sp, #4]
 80055f8:	e7e7      	b.n	80055ca <__sflush_r+0xde>
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	dfbffffe 	.word	0xdfbffffe

08005600 <_fflush_r>:
 8005600:	690b      	ldr	r3, [r1, #16]
 8005602:	b570      	push	{r4, r5, r6, lr}
 8005604:	0005      	movs	r5, r0
 8005606:	000c      	movs	r4, r1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d102      	bne.n	8005612 <_fflush_r+0x12>
 800560c:	2500      	movs	r5, #0
 800560e:	0028      	movs	r0, r5
 8005610:	bd70      	pop	{r4, r5, r6, pc}
 8005612:	2800      	cmp	r0, #0
 8005614:	d004      	beq.n	8005620 <_fflush_r+0x20>
 8005616:	6a03      	ldr	r3, [r0, #32]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <_fflush_r+0x20>
 800561c:	f7ff fdfa 	bl	8005214 <__sinit>
 8005620:	220c      	movs	r2, #12
 8005622:	5ea3      	ldrsh	r3, [r4, r2]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f1      	beq.n	800560c <_fflush_r+0xc>
 8005628:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800562a:	07d2      	lsls	r2, r2, #31
 800562c:	d404      	bmi.n	8005638 <_fflush_r+0x38>
 800562e:	059b      	lsls	r3, r3, #22
 8005630:	d402      	bmi.n	8005638 <_fflush_r+0x38>
 8005632:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005634:	f7ff feb4 	bl	80053a0 <__retarget_lock_acquire_recursive>
 8005638:	0028      	movs	r0, r5
 800563a:	0021      	movs	r1, r4
 800563c:	f7ff ff56 	bl	80054ec <__sflush_r>
 8005640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005642:	0005      	movs	r5, r0
 8005644:	07db      	lsls	r3, r3, #31
 8005646:	d4e2      	bmi.n	800560e <_fflush_r+0xe>
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	059b      	lsls	r3, r3, #22
 800564c:	d4df      	bmi.n	800560e <_fflush_r+0xe>
 800564e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005650:	f7ff fea7 	bl	80053a2 <__retarget_lock_release_recursive>
 8005654:	e7db      	b.n	800560e <_fflush_r+0xe>
	...

08005658 <__malloc_lock>:
 8005658:	b510      	push	{r4, lr}
 800565a:	4802      	ldr	r0, [pc, #8]	; (8005664 <__malloc_lock+0xc>)
 800565c:	f7ff fea0 	bl	80053a0 <__retarget_lock_acquire_recursive>
 8005660:	bd10      	pop	{r4, pc}
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	20000558 	.word	0x20000558

08005668 <__malloc_unlock>:
 8005668:	b510      	push	{r4, lr}
 800566a:	4802      	ldr	r0, [pc, #8]	; (8005674 <__malloc_unlock+0xc>)
 800566c:	f7ff fe99 	bl	80053a2 <__retarget_lock_release_recursive>
 8005670:	bd10      	pop	{r4, pc}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	20000558 	.word	0x20000558

08005678 <__sread>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	000c      	movs	r4, r1
 800567c:	250e      	movs	r5, #14
 800567e:	5f49      	ldrsh	r1, [r1, r5]
 8005680:	f000 f99c 	bl	80059bc <_read_r>
 8005684:	2800      	cmp	r0, #0
 8005686:	db03      	blt.n	8005690 <__sread+0x18>
 8005688:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800568a:	181b      	adds	r3, r3, r0
 800568c:	6563      	str	r3, [r4, #84]	; 0x54
 800568e:	bd70      	pop	{r4, r5, r6, pc}
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	4a02      	ldr	r2, [pc, #8]	; (800569c <__sread+0x24>)
 8005694:	4013      	ands	r3, r2
 8005696:	81a3      	strh	r3, [r4, #12]
 8005698:	e7f9      	b.n	800568e <__sread+0x16>
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	ffffefff 	.word	0xffffefff

080056a0 <__swrite>:
 80056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a2:	001f      	movs	r7, r3
 80056a4:	898b      	ldrh	r3, [r1, #12]
 80056a6:	0005      	movs	r5, r0
 80056a8:	000c      	movs	r4, r1
 80056aa:	0016      	movs	r6, r2
 80056ac:	05db      	lsls	r3, r3, #23
 80056ae:	d505      	bpl.n	80056bc <__swrite+0x1c>
 80056b0:	230e      	movs	r3, #14
 80056b2:	5ec9      	ldrsh	r1, [r1, r3]
 80056b4:	2200      	movs	r2, #0
 80056b6:	2302      	movs	r3, #2
 80056b8:	f000 f96c 	bl	8005994 <_lseek_r>
 80056bc:	89a3      	ldrh	r3, [r4, #12]
 80056be:	4a05      	ldr	r2, [pc, #20]	; (80056d4 <__swrite+0x34>)
 80056c0:	0028      	movs	r0, r5
 80056c2:	4013      	ands	r3, r2
 80056c4:	81a3      	strh	r3, [r4, #12]
 80056c6:	0032      	movs	r2, r6
 80056c8:	230e      	movs	r3, #14
 80056ca:	5ee1      	ldrsh	r1, [r4, r3]
 80056cc:	003b      	movs	r3, r7
 80056ce:	f000 f99b 	bl	8005a08 <_write_r>
 80056d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d4:	ffffefff 	.word	0xffffefff

080056d8 <__sseek>:
 80056d8:	b570      	push	{r4, r5, r6, lr}
 80056da:	000c      	movs	r4, r1
 80056dc:	250e      	movs	r5, #14
 80056de:	5f49      	ldrsh	r1, [r1, r5]
 80056e0:	f000 f958 	bl	8005994 <_lseek_r>
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	1c42      	adds	r2, r0, #1
 80056e8:	d103      	bne.n	80056f2 <__sseek+0x1a>
 80056ea:	4a05      	ldr	r2, [pc, #20]	; (8005700 <__sseek+0x28>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	81a3      	strh	r3, [r4, #12]
 80056f0:	bd70      	pop	{r4, r5, r6, pc}
 80056f2:	2280      	movs	r2, #128	; 0x80
 80056f4:	0152      	lsls	r2, r2, #5
 80056f6:	4313      	orrs	r3, r2
 80056f8:	81a3      	strh	r3, [r4, #12]
 80056fa:	6560      	str	r0, [r4, #84]	; 0x54
 80056fc:	e7f8      	b.n	80056f0 <__sseek+0x18>
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	ffffefff 	.word	0xffffefff

08005704 <__sclose>:
 8005704:	b510      	push	{r4, lr}
 8005706:	230e      	movs	r3, #14
 8005708:	5ec9      	ldrsh	r1, [r1, r3]
 800570a:	f000 f90d 	bl	8005928 <_close_r>
 800570e:	bd10      	pop	{r4, pc}

08005710 <__swbuf_r>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	0006      	movs	r6, r0
 8005714:	000d      	movs	r5, r1
 8005716:	0014      	movs	r4, r2
 8005718:	2800      	cmp	r0, #0
 800571a:	d004      	beq.n	8005726 <__swbuf_r+0x16>
 800571c:	6a03      	ldr	r3, [r0, #32]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <__swbuf_r+0x16>
 8005722:	f7ff fd77 	bl	8005214 <__sinit>
 8005726:	69a3      	ldr	r3, [r4, #24]
 8005728:	60a3      	str	r3, [r4, #8]
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	071b      	lsls	r3, r3, #28
 800572e:	d528      	bpl.n	8005782 <__swbuf_r+0x72>
 8005730:	6923      	ldr	r3, [r4, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d025      	beq.n	8005782 <__swbuf_r+0x72>
 8005736:	6923      	ldr	r3, [r4, #16]
 8005738:	6820      	ldr	r0, [r4, #0]
 800573a:	b2ef      	uxtb	r7, r5
 800573c:	1ac0      	subs	r0, r0, r3
 800573e:	6963      	ldr	r3, [r4, #20]
 8005740:	b2ed      	uxtb	r5, r5
 8005742:	4283      	cmp	r3, r0
 8005744:	dc05      	bgt.n	8005752 <__swbuf_r+0x42>
 8005746:	0021      	movs	r1, r4
 8005748:	0030      	movs	r0, r6
 800574a:	f7ff ff59 	bl	8005600 <_fflush_r>
 800574e:	2800      	cmp	r0, #0
 8005750:	d11d      	bne.n	800578e <__swbuf_r+0x7e>
 8005752:	68a3      	ldr	r3, [r4, #8]
 8005754:	3001      	adds	r0, #1
 8005756:	3b01      	subs	r3, #1
 8005758:	60a3      	str	r3, [r4, #8]
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	6022      	str	r2, [r4, #0]
 8005760:	701f      	strb	r7, [r3, #0]
 8005762:	6963      	ldr	r3, [r4, #20]
 8005764:	4283      	cmp	r3, r0
 8005766:	d004      	beq.n	8005772 <__swbuf_r+0x62>
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	07db      	lsls	r3, r3, #31
 800576c:	d507      	bpl.n	800577e <__swbuf_r+0x6e>
 800576e:	2d0a      	cmp	r5, #10
 8005770:	d105      	bne.n	800577e <__swbuf_r+0x6e>
 8005772:	0021      	movs	r1, r4
 8005774:	0030      	movs	r0, r6
 8005776:	f7ff ff43 	bl	8005600 <_fflush_r>
 800577a:	2800      	cmp	r0, #0
 800577c:	d107      	bne.n	800578e <__swbuf_r+0x7e>
 800577e:	0028      	movs	r0, r5
 8005780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005782:	0021      	movs	r1, r4
 8005784:	0030      	movs	r0, r6
 8005786:	f000 f805 	bl	8005794 <__swsetup_r>
 800578a:	2800      	cmp	r0, #0
 800578c:	d0d3      	beq.n	8005736 <__swbuf_r+0x26>
 800578e:	2501      	movs	r5, #1
 8005790:	426d      	negs	r5, r5
 8005792:	e7f4      	b.n	800577e <__swbuf_r+0x6e>

08005794 <__swsetup_r>:
 8005794:	4b30      	ldr	r3, [pc, #192]	; (8005858 <__swsetup_r+0xc4>)
 8005796:	b570      	push	{r4, r5, r6, lr}
 8005798:	0005      	movs	r5, r0
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	000c      	movs	r4, r1
 800579e:	2800      	cmp	r0, #0
 80057a0:	d004      	beq.n	80057ac <__swsetup_r+0x18>
 80057a2:	6a03      	ldr	r3, [r0, #32]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <__swsetup_r+0x18>
 80057a8:	f7ff fd34 	bl	8005214 <__sinit>
 80057ac:	230c      	movs	r3, #12
 80057ae:	5ee2      	ldrsh	r2, [r4, r3]
 80057b0:	b293      	uxth	r3, r2
 80057b2:	0711      	lsls	r1, r2, #28
 80057b4:	d423      	bmi.n	80057fe <__swsetup_r+0x6a>
 80057b6:	06d9      	lsls	r1, r3, #27
 80057b8:	d407      	bmi.n	80057ca <__swsetup_r+0x36>
 80057ba:	2309      	movs	r3, #9
 80057bc:	2001      	movs	r0, #1
 80057be:	602b      	str	r3, [r5, #0]
 80057c0:	3337      	adds	r3, #55	; 0x37
 80057c2:	4313      	orrs	r3, r2
 80057c4:	81a3      	strh	r3, [r4, #12]
 80057c6:	4240      	negs	r0, r0
 80057c8:	bd70      	pop	{r4, r5, r6, pc}
 80057ca:	075b      	lsls	r3, r3, #29
 80057cc:	d513      	bpl.n	80057f6 <__swsetup_r+0x62>
 80057ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057d0:	2900      	cmp	r1, #0
 80057d2:	d008      	beq.n	80057e6 <__swsetup_r+0x52>
 80057d4:	0023      	movs	r3, r4
 80057d6:	3344      	adds	r3, #68	; 0x44
 80057d8:	4299      	cmp	r1, r3
 80057da:	d002      	beq.n	80057e2 <__swsetup_r+0x4e>
 80057dc:	0028      	movs	r0, r5
 80057de:	f000 f927 	bl	8005a30 <_free_r>
 80057e2:	2300      	movs	r3, #0
 80057e4:	6363      	str	r3, [r4, #52]	; 0x34
 80057e6:	2224      	movs	r2, #36	; 0x24
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	4393      	bics	r3, r2
 80057ec:	81a3      	strh	r3, [r4, #12]
 80057ee:	2300      	movs	r3, #0
 80057f0:	6063      	str	r3, [r4, #4]
 80057f2:	6923      	ldr	r3, [r4, #16]
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	2308      	movs	r3, #8
 80057f8:	89a2      	ldrh	r2, [r4, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	81a3      	strh	r3, [r4, #12]
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10b      	bne.n	800581c <__swsetup_r+0x88>
 8005804:	21a0      	movs	r1, #160	; 0xa0
 8005806:	2280      	movs	r2, #128	; 0x80
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	0089      	lsls	r1, r1, #2
 800580c:	0092      	lsls	r2, r2, #2
 800580e:	400b      	ands	r3, r1
 8005810:	4293      	cmp	r3, r2
 8005812:	d003      	beq.n	800581c <__swsetup_r+0x88>
 8005814:	0021      	movs	r1, r4
 8005816:	0028      	movs	r0, r5
 8005818:	f000 f848 	bl	80058ac <__smakebuf_r>
 800581c:	220c      	movs	r2, #12
 800581e:	5ea3      	ldrsh	r3, [r4, r2]
 8005820:	2001      	movs	r0, #1
 8005822:	001a      	movs	r2, r3
 8005824:	b299      	uxth	r1, r3
 8005826:	4002      	ands	r2, r0
 8005828:	4203      	tst	r3, r0
 800582a:	d00f      	beq.n	800584c <__swsetup_r+0xb8>
 800582c:	2200      	movs	r2, #0
 800582e:	60a2      	str	r2, [r4, #8]
 8005830:	6962      	ldr	r2, [r4, #20]
 8005832:	4252      	negs	r2, r2
 8005834:	61a2      	str	r2, [r4, #24]
 8005836:	2000      	movs	r0, #0
 8005838:	6922      	ldr	r2, [r4, #16]
 800583a:	4282      	cmp	r2, r0
 800583c:	d1c4      	bne.n	80057c8 <__swsetup_r+0x34>
 800583e:	0609      	lsls	r1, r1, #24
 8005840:	d5c2      	bpl.n	80057c8 <__swsetup_r+0x34>
 8005842:	2240      	movs	r2, #64	; 0x40
 8005844:	4313      	orrs	r3, r2
 8005846:	81a3      	strh	r3, [r4, #12]
 8005848:	3801      	subs	r0, #1
 800584a:	e7bd      	b.n	80057c8 <__swsetup_r+0x34>
 800584c:	0788      	lsls	r0, r1, #30
 800584e:	d400      	bmi.n	8005852 <__swsetup_r+0xbe>
 8005850:	6962      	ldr	r2, [r4, #20]
 8005852:	60a2      	str	r2, [r4, #8]
 8005854:	e7ef      	b.n	8005836 <__swsetup_r+0xa2>
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	20000064 	.word	0x20000064

0800585c <__swhatbuf_r>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	000e      	movs	r6, r1
 8005860:	001d      	movs	r5, r3
 8005862:	230e      	movs	r3, #14
 8005864:	5ec9      	ldrsh	r1, [r1, r3]
 8005866:	0014      	movs	r4, r2
 8005868:	b096      	sub	sp, #88	; 0x58
 800586a:	2900      	cmp	r1, #0
 800586c:	da0c      	bge.n	8005888 <__swhatbuf_r+0x2c>
 800586e:	89b2      	ldrh	r2, [r6, #12]
 8005870:	2380      	movs	r3, #128	; 0x80
 8005872:	0011      	movs	r1, r2
 8005874:	4019      	ands	r1, r3
 8005876:	421a      	tst	r2, r3
 8005878:	d013      	beq.n	80058a2 <__swhatbuf_r+0x46>
 800587a:	2100      	movs	r1, #0
 800587c:	3b40      	subs	r3, #64	; 0x40
 800587e:	2000      	movs	r0, #0
 8005880:	6029      	str	r1, [r5, #0]
 8005882:	6023      	str	r3, [r4, #0]
 8005884:	b016      	add	sp, #88	; 0x58
 8005886:	bd70      	pop	{r4, r5, r6, pc}
 8005888:	466a      	mov	r2, sp
 800588a:	f000 f85f 	bl	800594c <_fstat_r>
 800588e:	2800      	cmp	r0, #0
 8005890:	dbed      	blt.n	800586e <__swhatbuf_r+0x12>
 8005892:	23f0      	movs	r3, #240	; 0xf0
 8005894:	9901      	ldr	r1, [sp, #4]
 8005896:	021b      	lsls	r3, r3, #8
 8005898:	4019      	ands	r1, r3
 800589a:	4b03      	ldr	r3, [pc, #12]	; (80058a8 <__swhatbuf_r+0x4c>)
 800589c:	18c9      	adds	r1, r1, r3
 800589e:	424b      	negs	r3, r1
 80058a0:	4159      	adcs	r1, r3
 80058a2:	2380      	movs	r3, #128	; 0x80
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	e7ea      	b.n	800587e <__swhatbuf_r+0x22>
 80058a8:	ffffe000 	.word	0xffffe000

080058ac <__smakebuf_r>:
 80058ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058ae:	2602      	movs	r6, #2
 80058b0:	898b      	ldrh	r3, [r1, #12]
 80058b2:	0005      	movs	r5, r0
 80058b4:	000c      	movs	r4, r1
 80058b6:	4233      	tst	r3, r6
 80058b8:	d006      	beq.n	80058c8 <__smakebuf_r+0x1c>
 80058ba:	0023      	movs	r3, r4
 80058bc:	3347      	adds	r3, #71	; 0x47
 80058be:	6023      	str	r3, [r4, #0]
 80058c0:	6123      	str	r3, [r4, #16]
 80058c2:	2301      	movs	r3, #1
 80058c4:	6163      	str	r3, [r4, #20]
 80058c6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80058c8:	466a      	mov	r2, sp
 80058ca:	ab01      	add	r3, sp, #4
 80058cc:	f7ff ffc6 	bl	800585c <__swhatbuf_r>
 80058d0:	9900      	ldr	r1, [sp, #0]
 80058d2:	0007      	movs	r7, r0
 80058d4:	0028      	movs	r0, r5
 80058d6:	f7ff fd87 	bl	80053e8 <_malloc_r>
 80058da:	2800      	cmp	r0, #0
 80058dc:	d108      	bne.n	80058f0 <__smakebuf_r+0x44>
 80058de:	220c      	movs	r2, #12
 80058e0:	5ea3      	ldrsh	r3, [r4, r2]
 80058e2:	059a      	lsls	r2, r3, #22
 80058e4:	d4ef      	bmi.n	80058c6 <__smakebuf_r+0x1a>
 80058e6:	2203      	movs	r2, #3
 80058e8:	4393      	bics	r3, r2
 80058ea:	431e      	orrs	r6, r3
 80058ec:	81a6      	strh	r6, [r4, #12]
 80058ee:	e7e4      	b.n	80058ba <__smakebuf_r+0xe>
 80058f0:	2380      	movs	r3, #128	; 0x80
 80058f2:	89a2      	ldrh	r2, [r4, #12]
 80058f4:	6020      	str	r0, [r4, #0]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	81a3      	strh	r3, [r4, #12]
 80058fa:	9b00      	ldr	r3, [sp, #0]
 80058fc:	6120      	str	r0, [r4, #16]
 80058fe:	6163      	str	r3, [r4, #20]
 8005900:	9b01      	ldr	r3, [sp, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00c      	beq.n	8005920 <__smakebuf_r+0x74>
 8005906:	0028      	movs	r0, r5
 8005908:	230e      	movs	r3, #14
 800590a:	5ee1      	ldrsh	r1, [r4, r3]
 800590c:	f000 f830 	bl	8005970 <_isatty_r>
 8005910:	2800      	cmp	r0, #0
 8005912:	d005      	beq.n	8005920 <__smakebuf_r+0x74>
 8005914:	2303      	movs	r3, #3
 8005916:	89a2      	ldrh	r2, [r4, #12]
 8005918:	439a      	bics	r2, r3
 800591a:	3b02      	subs	r3, #2
 800591c:	4313      	orrs	r3, r2
 800591e:	81a3      	strh	r3, [r4, #12]
 8005920:	89a3      	ldrh	r3, [r4, #12]
 8005922:	433b      	orrs	r3, r7
 8005924:	81a3      	strh	r3, [r4, #12]
 8005926:	e7ce      	b.n	80058c6 <__smakebuf_r+0x1a>

08005928 <_close_r>:
 8005928:	2300      	movs	r3, #0
 800592a:	b570      	push	{r4, r5, r6, lr}
 800592c:	4d06      	ldr	r5, [pc, #24]	; (8005948 <_close_r+0x20>)
 800592e:	0004      	movs	r4, r0
 8005930:	0008      	movs	r0, r1
 8005932:	602b      	str	r3, [r5, #0]
 8005934:	f7fb fcc2 	bl	80012bc <_close>
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d103      	bne.n	8005944 <_close_r+0x1c>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d000      	beq.n	8005944 <_close_r+0x1c>
 8005942:	6023      	str	r3, [r4, #0]
 8005944:	bd70      	pop	{r4, r5, r6, pc}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	20000564 	.word	0x20000564

0800594c <_fstat_r>:
 800594c:	2300      	movs	r3, #0
 800594e:	b570      	push	{r4, r5, r6, lr}
 8005950:	4d06      	ldr	r5, [pc, #24]	; (800596c <_fstat_r+0x20>)
 8005952:	0004      	movs	r4, r0
 8005954:	0008      	movs	r0, r1
 8005956:	0011      	movs	r1, r2
 8005958:	602b      	str	r3, [r5, #0]
 800595a:	f7fb fcb3 	bl	80012c4 <_fstat>
 800595e:	1c43      	adds	r3, r0, #1
 8005960:	d103      	bne.n	800596a <_fstat_r+0x1e>
 8005962:	682b      	ldr	r3, [r5, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d000      	beq.n	800596a <_fstat_r+0x1e>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd70      	pop	{r4, r5, r6, pc}
 800596c:	20000564 	.word	0x20000564

08005970 <_isatty_r>:
 8005970:	2300      	movs	r3, #0
 8005972:	b570      	push	{r4, r5, r6, lr}
 8005974:	4d06      	ldr	r5, [pc, #24]	; (8005990 <_isatty_r+0x20>)
 8005976:	0004      	movs	r4, r0
 8005978:	0008      	movs	r0, r1
 800597a:	602b      	str	r3, [r5, #0]
 800597c:	f7fb fca8 	bl	80012d0 <_isatty>
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	d103      	bne.n	800598c <_isatty_r+0x1c>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d000      	beq.n	800598c <_isatty_r+0x1c>
 800598a:	6023      	str	r3, [r4, #0]
 800598c:	bd70      	pop	{r4, r5, r6, pc}
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	20000564 	.word	0x20000564

08005994 <_lseek_r>:
 8005994:	b570      	push	{r4, r5, r6, lr}
 8005996:	0004      	movs	r4, r0
 8005998:	0008      	movs	r0, r1
 800599a:	0011      	movs	r1, r2
 800599c:	001a      	movs	r2, r3
 800599e:	2300      	movs	r3, #0
 80059a0:	4d05      	ldr	r5, [pc, #20]	; (80059b8 <_lseek_r+0x24>)
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	f7fb fc96 	bl	80012d4 <_lseek>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d103      	bne.n	80059b4 <_lseek_r+0x20>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d000      	beq.n	80059b4 <_lseek_r+0x20>
 80059b2:	6023      	str	r3, [r4, #0]
 80059b4:	bd70      	pop	{r4, r5, r6, pc}
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	20000564 	.word	0x20000564

080059bc <_read_r>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	0004      	movs	r4, r0
 80059c0:	0008      	movs	r0, r1
 80059c2:	0011      	movs	r1, r2
 80059c4:	001a      	movs	r2, r3
 80059c6:	2300      	movs	r3, #0
 80059c8:	4d05      	ldr	r5, [pc, #20]	; (80059e0 <_read_r+0x24>)
 80059ca:	602b      	str	r3, [r5, #0]
 80059cc:	f7fb fc5a 	bl	8001284 <_read>
 80059d0:	1c43      	adds	r3, r0, #1
 80059d2:	d103      	bne.n	80059dc <_read_r+0x20>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d000      	beq.n	80059dc <_read_r+0x20>
 80059da:	6023      	str	r3, [r4, #0]
 80059dc:	bd70      	pop	{r4, r5, r6, pc}
 80059de:	46c0      	nop			; (mov r8, r8)
 80059e0:	20000564 	.word	0x20000564

080059e4 <_sbrk_r>:
 80059e4:	2300      	movs	r3, #0
 80059e6:	b570      	push	{r4, r5, r6, lr}
 80059e8:	4d06      	ldr	r5, [pc, #24]	; (8005a04 <_sbrk_r+0x20>)
 80059ea:	0004      	movs	r4, r0
 80059ec:	0008      	movs	r0, r1
 80059ee:	602b      	str	r3, [r5, #0]
 80059f0:	f7fb fc72 	bl	80012d8 <_sbrk>
 80059f4:	1c43      	adds	r3, r0, #1
 80059f6:	d103      	bne.n	8005a00 <_sbrk_r+0x1c>
 80059f8:	682b      	ldr	r3, [r5, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d000      	beq.n	8005a00 <_sbrk_r+0x1c>
 80059fe:	6023      	str	r3, [r4, #0]
 8005a00:	bd70      	pop	{r4, r5, r6, pc}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	20000564 	.word	0x20000564

08005a08 <_write_r>:
 8005a08:	b570      	push	{r4, r5, r6, lr}
 8005a0a:	0004      	movs	r4, r0
 8005a0c:	0008      	movs	r0, r1
 8005a0e:	0011      	movs	r1, r2
 8005a10:	001a      	movs	r2, r3
 8005a12:	2300      	movs	r3, #0
 8005a14:	4d05      	ldr	r5, [pc, #20]	; (8005a2c <_write_r+0x24>)
 8005a16:	602b      	str	r3, [r5, #0]
 8005a18:	f7fb fc42 	bl	80012a0 <_write>
 8005a1c:	1c43      	adds	r3, r0, #1
 8005a1e:	d103      	bne.n	8005a28 <_write_r+0x20>
 8005a20:	682b      	ldr	r3, [r5, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d000      	beq.n	8005a28 <_write_r+0x20>
 8005a26:	6023      	str	r3, [r4, #0]
 8005a28:	bd70      	pop	{r4, r5, r6, pc}
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	20000564 	.word	0x20000564

08005a30 <_free_r>:
 8005a30:	b570      	push	{r4, r5, r6, lr}
 8005a32:	0005      	movs	r5, r0
 8005a34:	2900      	cmp	r1, #0
 8005a36:	d010      	beq.n	8005a5a <_free_r+0x2a>
 8005a38:	1f0c      	subs	r4, r1, #4
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	da00      	bge.n	8005a42 <_free_r+0x12>
 8005a40:	18e4      	adds	r4, r4, r3
 8005a42:	0028      	movs	r0, r5
 8005a44:	f7ff fe08 	bl	8005658 <__malloc_lock>
 8005a48:	4a1d      	ldr	r2, [pc, #116]	; (8005ac0 <_free_r+0x90>)
 8005a4a:	6813      	ldr	r3, [r2, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d105      	bne.n	8005a5c <_free_r+0x2c>
 8005a50:	6063      	str	r3, [r4, #4]
 8005a52:	6014      	str	r4, [r2, #0]
 8005a54:	0028      	movs	r0, r5
 8005a56:	f7ff fe07 	bl	8005668 <__malloc_unlock>
 8005a5a:	bd70      	pop	{r4, r5, r6, pc}
 8005a5c:	42a3      	cmp	r3, r4
 8005a5e:	d908      	bls.n	8005a72 <_free_r+0x42>
 8005a60:	6820      	ldr	r0, [r4, #0]
 8005a62:	1821      	adds	r1, r4, r0
 8005a64:	428b      	cmp	r3, r1
 8005a66:	d1f3      	bne.n	8005a50 <_free_r+0x20>
 8005a68:	6819      	ldr	r1, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	1809      	adds	r1, r1, r0
 8005a6e:	6021      	str	r1, [r4, #0]
 8005a70:	e7ee      	b.n	8005a50 <_free_r+0x20>
 8005a72:	001a      	movs	r2, r3
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <_free_r+0x4e>
 8005a7a:	42a3      	cmp	r3, r4
 8005a7c:	d9f9      	bls.n	8005a72 <_free_r+0x42>
 8005a7e:	6811      	ldr	r1, [r2, #0]
 8005a80:	1850      	adds	r0, r2, r1
 8005a82:	42a0      	cmp	r0, r4
 8005a84:	d10b      	bne.n	8005a9e <_free_r+0x6e>
 8005a86:	6820      	ldr	r0, [r4, #0]
 8005a88:	1809      	adds	r1, r1, r0
 8005a8a:	1850      	adds	r0, r2, r1
 8005a8c:	6011      	str	r1, [r2, #0]
 8005a8e:	4283      	cmp	r3, r0
 8005a90:	d1e0      	bne.n	8005a54 <_free_r+0x24>
 8005a92:	6818      	ldr	r0, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	1841      	adds	r1, r0, r1
 8005a98:	6011      	str	r1, [r2, #0]
 8005a9a:	6053      	str	r3, [r2, #4]
 8005a9c:	e7da      	b.n	8005a54 <_free_r+0x24>
 8005a9e:	42a0      	cmp	r0, r4
 8005aa0:	d902      	bls.n	8005aa8 <_free_r+0x78>
 8005aa2:	230c      	movs	r3, #12
 8005aa4:	602b      	str	r3, [r5, #0]
 8005aa6:	e7d5      	b.n	8005a54 <_free_r+0x24>
 8005aa8:	6820      	ldr	r0, [r4, #0]
 8005aaa:	1821      	adds	r1, r4, r0
 8005aac:	428b      	cmp	r3, r1
 8005aae:	d103      	bne.n	8005ab8 <_free_r+0x88>
 8005ab0:	6819      	ldr	r1, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	1809      	adds	r1, r1, r0
 8005ab6:	6021      	str	r1, [r4, #0]
 8005ab8:	6063      	str	r3, [r4, #4]
 8005aba:	6054      	str	r4, [r2, #4]
 8005abc:	e7ca      	b.n	8005a54 <_free_r+0x24>
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	2000055c 	.word	0x2000055c

08005ac4 <_init>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aca:	bc08      	pop	{r3}
 8005acc:	469e      	mov	lr, r3
 8005ace:	4770      	bx	lr

08005ad0 <_fini>:
 8005ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad6:	bc08      	pop	{r3}
 8005ad8:	469e      	mov	lr, r3
 8005ada:	4770      	bx	lr
