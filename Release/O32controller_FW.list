
O32controller_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005afc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e08  08005e08  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005e08  08005e08  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e08  08005e08  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e08  08005e08  00015e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e0c  08005e0c  00015e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  20000068  08005e78  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  08005e78  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006195  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012b2  00000000  00000000  00026268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f78  00000000  00000000  0002751a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c36  00000000  00000000  00028492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e07  00000000  00000000  0002a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003263  00000000  00000000  0003becf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000039f8  00000000  00000000  0003f134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005ba4 	.word	0x08005ba4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08005ba4 	.word	0x08005ba4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <foc_startup>:
    } else {
        return x;
    }
}

void foc_startup() {
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	46ce      	mov	lr, r9
 80003f8:	4647      	mov	r7, r8
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // turn on complementary channel

    HAL_TIM_Base_Start_IT(&htim2); // 100Hz timer for printing

    TIM1->CCR1 = 0;
 80003fa:	2500      	movs	r5, #0
void foc_startup() {
 80003fc:	b580      	push	{r7, lr}
    HAL_ADC_Stop(&hadc); // stop adc before calibration
 80003fe:	4e4b      	ldr	r6, [pc, #300]	; (800052c <foc_startup+0x138>)
void foc_startup() {
 8000400:	b083      	sub	sp, #12
    HAL_ADC_Stop(&hadc); // stop adc before calibration
 8000402:	0030      	movs	r0, r6
 8000404:	f001 f988 	bl	8001718 <HAL_ADC_Stop>
    HAL_Delay(1);
 8000408:	2001      	movs	r0, #1
 800040a:	f000 fffb 	bl	8001404 <HAL_Delay>
    HAL_ADCEx_Calibration_Start(&hadc); // seems like this uses VREFINT_CAL
 800040e:	0030      	movs	r0, r6
 8000410:	f001 fad2 	bl	80019b8 <HAL_ADCEx_Calibration_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000414:	4c46      	ldr	r4, [pc, #280]	; (8000530 <foc_startup+0x13c>)
 8000416:	2100      	movs	r1, #0
 8000418:	0020      	movs	r0, r4
 800041a:	f003 fa75 	bl	8003908 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); // turn on complementary channel
 800041e:	2100      	movs	r1, #0
 8000420:	0020      	movs	r0, r4
 8000422:	f003 fded 	bl	8004000 <HAL_TIMEx_PWMN_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000426:	2104      	movs	r1, #4
 8000428:	0020      	movs	r0, r4
 800042a:	f003 fa6d 	bl	8003908 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); // turn on complementary channel
 800042e:	2104      	movs	r1, #4
 8000430:	0020      	movs	r0, r4
 8000432:	f003 fde5 	bl	8004000 <HAL_TIMEx_PWMN_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000436:	2108      	movs	r1, #8
 8000438:	0020      	movs	r0, r4
 800043a:	f003 fa65 	bl	8003908 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // turn on complementary channel
 800043e:	2108      	movs	r1, #8
 8000440:	0020      	movs	r0, r4
    TIM1->CCR1 = 0;
 8000442:	4c3c      	ldr	r4, [pc, #240]	; (8000534 <foc_startup+0x140>)
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // turn on complementary channel
 8000444:	f003 fddc 	bl	8004000 <HAL_TIMEx_PWMN_Start>
    HAL_TIM_Base_Start_IT(&htim2); // 100Hz timer for printing
 8000448:	483b      	ldr	r0, [pc, #236]	; (8000538 <foc_startup+0x144>)
 800044a:	f003 f9b7 	bl	80037bc <HAL_TIM_Base_Start_IT>
    TIM1->CCR1 = 0;
 800044e:	6365      	str	r5, [r4, #52]	; 0x34
    TIM1->CCR2 = 0;
    TIM1->CCR3 = 0;

    // green, wait 2 seconds, then red to give time for flashing
    LED_RED;
 8000450:	2201      	movs	r2, #1
    TIM1->CCR2 = 0;
 8000452:	63a5      	str	r5, [r4, #56]	; 0x38
    LED_RED;
 8000454:	2101      	movs	r1, #1
    TIM1->CCR3 = 0;
 8000456:	63e5      	str	r5, [r4, #60]	; 0x3c
    LED_RED;
 8000458:	4838      	ldr	r0, [pc, #224]	; (800053c <foc_startup+0x148>)
 800045a:	f001 fd65 	bl	8001f28 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 800045e:	20fa      	movs	r0, #250	; 0xfa
 8000460:	00c0      	lsls	r0, r0, #3
 8000462:	f000 ffcf 	bl	8001404 <HAL_Delay>
    LED_GREEN;
 8000466:	2200      	movs	r2, #0
 8000468:	2101      	movs	r1, #1
 800046a:	4834      	ldr	r0, [pc, #208]	; (800053c <foc_startup+0x148>)
 800046c:	f001 fd5c 	bl	8001f28 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000470:	2064      	movs	r0, #100	; 0x64
 8000472:	f000 ffc7 	bl	8001404 <HAL_Delay>

    // get out of standby mode to allow gate drive
    ENABLE_DRIVE;
 8000476:	2201      	movs	r2, #1
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	4830      	ldr	r0, [pc, #192]	; (800053c <foc_startup+0x148>)
 800047c:	f001 fd54 	bl	8001f28 <HAL_GPIO_WritePin>
 8000480:	2201      	movs	r2, #1
 8000482:	2140      	movs	r1, #64	; 0x40
 8000484:	482d      	ldr	r0, [pc, #180]	; (800053c <foc_startup+0x148>)
 8000486:	f001 fd4f 	bl	8001f28 <HAL_GPIO_WritePin>

    // move to step 0
    TIM1->CCR1 = 20;
 800048a:	2314      	movs	r3, #20
    TIM1->CCR2 = 0;
    TIM1->CCR3 = 0;

    HAL_Delay(1000);
 800048c:	20fa      	movs	r0, #250	; 0xfa
    TIM1->CCR1 = 20;
 800048e:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_Delay(1000);
 8000490:	0080      	lsls	r0, r0, #2
    TIM1->CCR2 = 0;
 8000492:	63a5      	str	r5, [r4, #56]	; 0x38
    TIM1->CCR3 = 0;
 8000494:	63e5      	str	r5, [r4, #60]	; 0x3c
    HAL_Delay(1000);
 8000496:	f000 ffb5 	bl	8001404 <HAL_Delay>
 800049a:	4b29      	ldr	r3, [pc, #164]	; (8000540 <foc_startup+0x14c>)
 800049c:	4d29      	ldr	r5, [pc, #164]	; (8000544 <foc_startup+0x150>)
 800049e:	4699      	mov	r9, r3

    for (int i = 0; i < 10; i++) { // take some measurements to let the sensors settle
        HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 0);
        HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 80004a0:	2701      	movs	r7, #1
 80004a2:	1eab      	subs	r3, r5, #2
    HAL_Delay(1000);
 80004a4:	240a      	movs	r4, #10
        HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 80004a6:	4698      	mov	r8, r3
 80004a8:	427f      	negs	r7, r7
        HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2102      	movs	r1, #2
 80004ae:	4823      	ldr	r0, [pc, #140]	; (800053c <foc_startup+0x148>)
 80004b0:	f001 fd3a 	bl	8001f28 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 80004b4:	2302      	movs	r3, #2
 80004b6:	002a      	movs	r2, r5
 80004b8:	4641      	mov	r1, r8
 80004ba:	4648      	mov	r0, r9
 80004bc:	9700      	str	r7, [sp, #0]
 80004be:	f002 feeb 	bl	8003298 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 1);
 80004c2:	2201      	movs	r2, #1
 80004c4:	2102      	movs	r1, #2
 80004c6:	481d      	ldr	r0, [pc, #116]	; (800053c <foc_startup+0x148>)
 80004c8:	f001 fd2e 	bl	8001f28 <HAL_GPIO_WritePin>

        HAL_ADC_Start_DMA(&hadc, (uint32_t *)p.adc_vals, NBR_ADC); // start the adc in dma mode
 80004cc:	0029      	movs	r1, r5
 80004ce:	2206      	movs	r2, #6
 80004d0:	0030      	movs	r0, r6
 80004d2:	390e      	subs	r1, #14
    for (int i = 0; i < 10; i++) { // take some measurements to let the sensors settle
 80004d4:	3c01      	subs	r4, #1
        HAL_ADC_Start_DMA(&hadc, (uint32_t *)p.adc_vals, NBR_ADC); // start the adc in dma mode
 80004d6:	f001 f93f 	bl	8001758 <HAL_ADC_Start_DMA>
    for (int i = 0; i < 10; i++) { // take some measurements to let the sensors settle
 80004da:	2c00      	cmp	r4, #0
 80004dc:	d1e5      	bne.n	80004aa <foc_startup+0xb6>
    }
    // 780.19 angle counts per 1/6th of an electrical cycle
    // 4681.14 angle counts per electrical cycle
    // 90º out of phase would be 1/4th of an electrical cycle, so 1170.285 angle counts
    m_angle = (uint16_t)((p.spi_RX[0] << 8) + p.spi_RX[1] + 16384); // 0 to 32767
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	01c9      	lsls	r1, r1, #7
 80004e2:	468c      	mov	ip, r1
 80004e4:	782b      	ldrb	r3, [r5, #0]
 80004e6:	786a      	ldrb	r2, [r5, #1]
 80004e8:	021b      	lsls	r3, r3, #8
 80004ea:	4462      	add	r2, ip
    e_offset = (m_angle * PPAIRS - e_offset) & (32768 - 1);         // convert to electrical angle, modulo 32768
 80004ec:	4916      	ldr	r1, [pc, #88]	; (8000548 <foc_startup+0x154>)
    m_angle = (uint16_t)((p.spi_RX[0] << 8) + p.spi_RX[1] + 16384); // 0 to 32767
 80004ee:	189b      	adds	r3, r3, r2
 80004f0:	b29b      	uxth	r3, r3
    e_offset = (m_angle * PPAIRS - e_offset) & (32768 - 1);         // convert to electrical angle, modulo 32768
 80004f2:	8808      	ldrh	r0, [r1, #0]
 80004f4:	00da      	lsls	r2, r3, #3
 80004f6:	1ad2      	subs	r2, r2, r3
 80004f8:	1a12      	subs	r2, r2, r0
 80004fa:	0452      	lsls	r2, r2, #17
 80004fc:	0c52      	lsrs	r2, r2, #17
 80004fe:	800a      	strh	r2, [r1, #0]
    revs = 0;
    cont_angle = 0;
    cont_angle_prev = 0;
    rpm = 0;

    HAL_UART_Receive_IT(&huart1, p.uart_RX, UARTSIZE);
 8000500:	0029      	movs	r1, r5
    e_angle = 0;
 8000502:	4a12      	ldr	r2, [pc, #72]	; (800054c <foc_startup+0x158>)
    HAL_UART_Receive_IT(&huart1, p.uart_RX, UARTSIZE);
 8000504:	3911      	subs	r1, #17
    e_angle = 0;
 8000506:	8014      	strh	r4, [r2, #0]
    m_angle_prev = m_angle;
 8000508:	4a11      	ldr	r2, [pc, #68]	; (8000550 <foc_startup+0x15c>)
    HAL_UART_Receive_IT(&huart1, p.uart_RX, UARTSIZE);
 800050a:	4812      	ldr	r0, [pc, #72]	; (8000554 <foc_startup+0x160>)
    m_angle_prev = m_angle;
 800050c:	8013      	strh	r3, [r2, #0]
    revs = 0;
 800050e:	4b12      	ldr	r3, [pc, #72]	; (8000558 <foc_startup+0x164>)
    HAL_UART_Receive_IT(&huart1, p.uart_RX, UARTSIZE);
 8000510:	2203      	movs	r2, #3
    revs = 0;
 8000512:	601c      	str	r4, [r3, #0]
    cont_angle = 0;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <foc_startup+0x168>)
 8000516:	601c      	str	r4, [r3, #0]
    cont_angle_prev = 0;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <foc_startup+0x16c>)
 800051a:	601c      	str	r4, [r3, #0]
    HAL_UART_Receive_IT(&huart1, p.uart_RX, UARTSIZE);
 800051c:	f003 ff2e 	bl	800437c <HAL_UART_Receive_IT>
}
 8000520:	b003      	add	sp, #12
 8000522:	bcc0      	pop	{r6, r7}
 8000524:	46b9      	mov	r9, r7
 8000526:	46b0      	mov	r8, r6
 8000528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	200000b8 	.word	0x200000b8
 8000530:	20000238 	.word	0x20000238
 8000534:	40012c00 	.word	0x40012c00
 8000538:	20000280 	.word	0x20000280
 800053c:	48001400 	.word	0x48001400
 8000540:	200001d4 	.word	0x200001d4
 8000544:	20000368 	.word	0x20000368
 8000548:	200000ae 	.word	0x200000ae
 800054c:	200000ac 	.word	0x200000ac
 8000550:	200000b0 	.word	0x200000b0
 8000554:	200002c8 	.word	0x200002c8
 8000558:	200000b4 	.word	0x200000b4
 800055c:	200000a0 	.word	0x200000a0
 8000560:	200000a4 	.word	0x200000a4

08000564 <foc_loop>:

void foc_loop() {
 8000564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000566:	46de      	mov	lr, fp
 8000568:	4645      	mov	r5, r8
 800056a:	4657      	mov	r7, sl
 800056c:	464e      	mov	r6, r9
 800056e:	b5e0      	push	{r5, r6, r7, lr}

    // to collapse all the control code
    {
        // read MA702 magnetic angle
        HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 0);
 8000570:	2200      	movs	r2, #0
void foc_loop() {
 8000572:	b083      	sub	sp, #12
        HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 0);
 8000574:	2102      	movs	r1, #2
 8000576:	48ac      	ldr	r0, [pc, #688]	; (8000828 <foc_loop+0x2c4>)
 8000578:	f001 fcd6 	bl	8001f28 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 800057c:	2301      	movs	r3, #1
 800057e:	4cab      	ldr	r4, [pc, #684]	; (800082c <foc_loop+0x2c8>)
 8000580:	425b      	negs	r3, r3
 8000582:	0022      	movs	r2, r4
 8000584:	1ea1      	subs	r1, r4, #2
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	48a9      	ldr	r0, [pc, #676]	; (8000830 <foc_loop+0x2cc>)
 800058a:	3303      	adds	r3, #3
 800058c:	f002 fe84 	bl	8003298 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 1);
 8000590:	2201      	movs	r2, #1
 8000592:	2102      	movs	r1, #2
 8000594:	48a4      	ldr	r0, [pc, #656]	; (8000828 <foc_loop+0x2c4>)
 8000596:	f001 fcc7 	bl	8001f28 <HAL_GPIO_WritePin>

        // angles represented in [0,32767] (~91 per degree)
        m_angle = ((uint16_t)(p.spi_RX[0]) << 8) + p.spi_RX[1] + 16384;
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	01c9      	lsls	r1, r1, #7
 800059e:	468c      	mov	ip, r1
 80005a0:	7823      	ldrb	r3, [r4, #0]
 80005a2:	7862      	ldrb	r2, [r4, #1]
 80005a4:	021b      	lsls	r3, r3, #8
 80005a6:	4462      	add	r2, ip
 80005a8:	189b      	adds	r3, r3, r2
        e_angle = (m_angle * PPAIRS - e_offset) &
 80005aa:	49a2      	ldr	r1, [pc, #648]	; (8000834 <foc_loop+0x2d0>)
        m_angle = ((uint16_t)(p.spi_RX[0]) << 8) + p.spi_RX[1] + 16384;
 80005ac:	b29b      	uxth	r3, r3
        e_angle = (m_angle * PPAIRS - e_offset) &
 80005ae:	8809      	ldrh	r1, [r1, #0]
 80005b0:	00da      	lsls	r2, r3, #3
 80005b2:	1ad2      	subs	r2, r2, r3
 80005b4:	1a52      	subs	r2, r2, r1
 80005b6:	4da0      	ldr	r5, [pc, #640]	; (8000838 <foc_loop+0x2d4>)
 80005b8:	0452      	lsls	r2, r2, #17
 80005ba:	0c52      	lsrs	r2, r2, #17
 80005bc:	802a      	strh	r2, [r5, #0]
                  (32768 - 1); // convert to electrical angle and modulo

        if (m_angle_prev < 8192 &&
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	499e      	ldr	r1, [pc, #632]	; (800083c <foc_loop+0x2d8>)
 80005c2:	0192      	lsls	r2, r2, #6
 80005c4:	8808      	ldrh	r0, [r1, #0]
 80005c6:	4290      	cmp	r0, r2
 80005c8:	d300      	bcc.n	80005cc <foc_loop+0x68>
 80005ca:	e10a      	b.n	80007e2 <foc_loop+0x27e>
 80005cc:	22c0      	movs	r2, #192	; 0xc0
 80005ce:	01d2      	lsls	r2, r2, #7
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d900      	bls.n	80005d6 <foc_loop+0x72>
 80005d4:	e0f0      	b.n	80007b8 <foc_loop+0x254>
            m_angle > 24576) { // detect angle wraparound and increment a revolution
            revs -= 32768;
 80005d6:	4a9a      	ldr	r2, [pc, #616]	; (8000840 <foc_loop+0x2dc>)
 80005d8:	6812      	ldr	r2, [r2, #0]
        } else if (m_angle < 8192 && m_angle_prev > 24576) {
            revs += 32768;
        }
        cont_angle = m_angle + revs;
 80005da:	189a      	adds	r2, r3, r2
        m_angle_prev = m_angle;
 80005dc:	800b      	strh	r3, [r1, #0]

        // read ADCs
        HAL_ADC_Start_DMA(&hadc, (uint32_t *)p.adc_vals, NBR_ADC);
 80005de:	4b99      	ldr	r3, [pc, #612]	; (8000844 <foc_loop+0x2e0>)
        cont_angle = m_angle + revs;
 80005e0:	4899      	ldr	r0, [pc, #612]	; (8000848 <foc_loop+0x2e4>)
        HAL_ADC_Start_DMA(&hadc, (uint32_t *)p.adc_vals, NBR_ADC);
 80005e2:	4698      	mov	r8, r3
 80005e4:	0019      	movs	r1, r3
        cont_angle = m_angle + revs;
 80005e6:	6002      	str	r2, [r0, #0]
 80005e8:	4683      	mov	fp, r0
        HAL_ADC_Start_DMA(&hadc, (uint32_t *)p.adc_vals, NBR_ADC);
 80005ea:	2206      	movs	r2, #6
 80005ec:	4897      	ldr	r0, [pc, #604]	; (800084c <foc_loop+0x2e8>)
 80005ee:	f001 f8b3 	bl	8001758 <HAL_ADC_Start_DMA>
        // filter ADC values
        // (https://stackoverflow.com/questions/38918530/simple-low-pass-filter-in-fixed-point)
        // phase currents are in adc units [-2048, 2047] (1 bit sign, 11 bit value)
        // to get current in milliamps, multiply by UAMP_PER_ADC then divide by 1000
        I_u = I_u_accum >> ADC_FILT_LVL;
        I_u_accum = I_u_accum - I_u + (p.adc_vals[3] - adc_U_offset);
 80005f2:	4643      	mov	r3, r8
 80005f4:	4896      	ldr	r0, [pc, #600]	; (8000850 <foc_loop+0x2ec>)
        I_u = I_u_accum >> ADC_FILT_LVL;
 80005f6:	4997      	ldr	r1, [pc, #604]	; (8000854 <foc_loop+0x2f0>)
        I_u_accum = I_u_accum - I_u + (p.adc_vals[3] - adc_U_offset);
 80005f8:	4684      	mov	ip, r0
        I_u = I_u_accum >> ADC_FILT_LVL;
 80005fa:	680a      	ldr	r2, [r1, #0]
        I_u_accum = I_u_accum - I_u + (p.adc_vals[3] - adc_U_offset);
 80005fc:	88db      	ldrh	r3, [r3, #6]
 80005fe:	b217      	sxth	r7, r2
 8000600:	4463      	add	r3, ip
 8000602:	1bd2      	subs	r2, r2, r7
 8000604:	189b      	adds	r3, r3, r2
 8000606:	600b      	str	r3, [r1, #0]

        I_v = I_v_accum >> ADC_FILT_LVL;
        I_v_accum = I_v_accum - I_v + (p.adc_vals[0] - adc_V_offset);
 8000608:	4e93      	ldr	r6, [pc, #588]	; (8000858 <foc_loop+0x2f4>)
 800060a:	4643      	mov	r3, r8
 800060c:	46b4      	mov	ip, r6
        I_v = I_v_accum >> ADC_FILT_LVL;
 800060e:	4893      	ldr	r0, [pc, #588]	; (800085c <foc_loop+0x2f8>)
        I_v_accum = I_v_accum - I_v + (p.adc_vals[0] - adc_V_offset);
 8000610:	881b      	ldrh	r3, [r3, #0]
        I_v = I_v_accum >> ADC_FILT_LVL;
 8000612:	6801      	ldr	r1, [r0, #0]
        I_v_accum = I_v_accum - I_v + (p.adc_vals[0] - adc_V_offset);
 8000614:	4463      	add	r3, ip
 8000616:	b20a      	sxth	r2, r1
 8000618:	1a89      	subs	r1, r1, r2
 800061a:	185b      	adds	r3, r3, r1
 800061c:	6003      	str	r3, [r0, #0]

        I_w = I_w_accum >> ADC_FILT_LVL;
        I_w_accum = I_w_accum - I_w + (p.adc_vals[1] - adc_W_offset);
 800061e:	4c90      	ldr	r4, [pc, #576]	; (8000860 <foc_loop+0x2fc>)
 8000620:	4643      	mov	r3, r8
 8000622:	46a4      	mov	ip, r4
        I_w = I_w_accum >> ADC_FILT_LVL;
 8000624:	488f      	ldr	r0, [pc, #572]	; (8000864 <foc_loop+0x300>)
        I_w_accum = I_w_accum - I_w + (p.adc_vals[1] - adc_W_offset);
 8000626:	885b      	ldrh	r3, [r3, #2]
        I_w = I_w_accum >> ADC_FILT_LVL;
 8000628:	6801      	ldr	r1, [r0, #0]
        I_w_accum = I_w_accum - I_w + (p.adc_vals[1] - adc_W_offset);
 800062a:	4463      	add	r3, ip
 800062c:	b20e      	sxth	r6, r1
 800062e:	1b89      	subs	r1, r1, r6
 8000630:	185b      	adds	r3, r3, r1
 8000632:	6003      	str	r3, [r0, #0]

        // Convert phase currents to DQ currents (DQ0 transform):
        uint8_t angle_lut =
 8000634:	8828      	ldrh	r0, [r5, #0]
            e_angle >> 7; // scale e_angle [0,32767] to [0,255] for lookup table

        // each term below has 15 fractional bits and is signed, floating point
        // equilvalent < 1
        int16_t Q16_sin_t = sin_lut[angle_lut];
 8000636:	498c      	ldr	r1, [pc, #560]	; (8000868 <foc_loop+0x304>)
        uint8_t angle_lut =
 8000638:	09c3      	lsrs	r3, r0, #7
 800063a:	b2db      	uxtb	r3, r3
        int16_t Q16_sin_t = sin_lut[angle_lut];
 800063c:	005d      	lsls	r5, r3, #1
 800063e:	5e6c      	ldrsh	r4, [r5, r1]
        int16_t Q16_cos_t;
        if (angle_lut < 64) {
            Q16_cos_t = sin_lut[(64 - angle_lut) & (256 - 1)]; /// 64 out of 256 is the equilvalent of /// 90º/360º. &255 is mod256.
 8000640:	2540      	movs	r5, #64	; 0x40
        int16_t Q16_sin_t = sin_lut[angle_lut];
 8000642:	46a0      	mov	r8, r4
        if (angle_lut < 64) {
 8000644:	2b3f      	cmp	r3, #63	; 0x3f
 8000646:	d900      	bls.n	800064a <foc_loop+0xe6>
        } else {
            Q16_cos_t = sin_lut[(63 - angle_lut) & (256 - 1)];
 8000648:	253f      	movs	r5, #63	; 0x3f
 800064a:	1aed      	subs	r5, r5, r3
 800064c:	23ff      	movs	r3, #255	; 0xff
 800064e:	402b      	ands	r3, r5
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	5e59      	ldrsh	r1, [r3, r1]
        }

        // some intermediate rounding, avg errors in Iq and Id are around 0.1%
        int16_t Q16_SQRT3_2_sin_t = (Q16_SQRT3_2 * Q16_sin_t) >> 16;
 8000654:	4643      	mov	r3, r8
 8000656:	4d85      	ldr	r5, [pc, #532]	; (800086c <foc_loop+0x308>)
 8000658:	436b      	muls	r3, r5
 800065a:	141b      	asrs	r3, r3, #16
 800065c:	4699      	mov	r9, r3
        int16_t Q16_SQRT3_2_cos_t = (Q16_SQRT3_2 * Q16_cos_t) >> 16;
        int16_t Q16_1_2_sin_t = (Q16_1_2 * Q16_sin_t) >> 16;
 800065e:	4643      	mov	r3, r8
 8000660:	105b      	asrs	r3, r3, #1
 8000662:	469c      	mov	ip, r3
        int16_t Q16_1_2_cos_t = (Q16_1_2 * Q16_cos_t) >> 16;
 8000664:	104b      	asrs	r3, r1, #1
 8000666:	469a      	mov	sl, r3

        I_d = (Q16_cos_t * I_u + (Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_w) >> 16;
 8000668:	464b      	mov	r3, r9
 800066a:	4654      	mov	r4, sl
 800066c:	1b1b      	subs	r3, r3, r4
 800066e:	4353      	muls	r3, r2
        int16_t Q16_SQRT3_2_cos_t = (Q16_SQRT3_2 * Q16_cos_t) >> 16;
 8000670:	434d      	muls	r5, r1
        I_d = (Q16_cos_t * I_u + (Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_w) >> 16;
 8000672:	4379      	muls	r1, r7
 8000674:	1859      	adds	r1, r3, r1
 8000676:	464b      	mov	r3, r9
 8000678:	425b      	negs	r3, r3
 800067a:	1b1b      	subs	r3, r3, r4
        I_q = (Q16_sin_t * I_u + (-Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * I_v + (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * I_w) >> 16;
 800067c:	4664      	mov	r4, ip
        I_d = (Q16_cos_t * I_u + (Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_w) >> 16;
 800067e:	4373      	muls	r3, r6
 8000680:	18cb      	adds	r3, r1, r3
        I_d = (I_d * Q16_2_3) >> 15;
 8000682:	497b      	ldr	r1, [pc, #492]	; (8000870 <foc_loop+0x30c>)
        int16_t Q16_SQRT3_2_cos_t = (Q16_SQRT3_2 * Q16_cos_t) >> 16;
 8000684:	142d      	asrs	r5, r5, #16
        I_d = (Q16_cos_t * I_u + (Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * I_w) >> 16;
 8000686:	141b      	asrs	r3, r3, #16
        I_d = (I_d * Q16_2_3) >> 15;
 8000688:	4359      	muls	r1, r3
        I_q = (Q16_sin_t * I_u + (-Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * I_v + (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * I_w) >> 16;
 800068a:	426b      	negs	r3, r5
 800068c:	1b1b      	subs	r3, r3, r4
 800068e:	435a      	muls	r2, r3
 8000690:	4643      	mov	r3, r8
 8000692:	1b2d      	subs	r5, r5, r4
 8000694:	435f      	muls	r7, r3
 8000696:	436e      	muls	r6, r5
 8000698:	19d2      	adds	r2, r2, r7
 800069a:	1992      	adds	r2, r2, r6
 800069c:	1412      	asrs	r2, r2, #16
        I_q = (I_q * -Q16_2_3) >> 15;
 800069e:	0113      	lsls	r3, r2, #4
 80006a0:	1a9b      	subs	r3, r3, r2
 80006a2:	039b      	lsls	r3, r3, #14
 80006a4:	189b      	adds	r3, r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	189b      	adds	r3, r3, r2
 80006aa:	011a      	lsls	r2, r3, #4

        I_d_filt = I_d_accum >> DQ_FILT_LVL;
 80006ac:	4e71      	ldr	r6, [pc, #452]	; (8000874 <foc_loop+0x310>)
        I_q = (I_q * -Q16_2_3) >> 15;
 80006ae:	189b      	adds	r3, r3, r2
 80006b0:	021a      	lsls	r2, r3, #8
 80006b2:	189b      	adds	r3, r3, r2
        I_d_filt = I_d_accum >> DQ_FILT_LVL;
 80006b4:	6832      	ldr	r2, [r6, #0]
        I_d = (I_d * Q16_2_3) >> 15;
 80006b6:	13c9      	asrs	r1, r1, #15
        I_d_filt = I_d_accum >> DQ_FILT_LVL;
 80006b8:	1215      	asrs	r5, r2, #8
        I_d_accum = I_d_accum - I_d_filt + I_d;
 80006ba:	b22d      	sxth	r5, r5
 80006bc:	1b52      	subs	r2, r2, r5
 80006be:	b20d      	sxth	r5, r1
 80006c0:	1952      	adds	r2, r2, r5
 80006c2:	6032      	str	r2, [r6, #0]

        I_q_filt = I_q_accum >> DQ_FILT_LVL;
 80006c4:	4e6c      	ldr	r6, [pc, #432]	; (8000878 <foc_loop+0x314>)
        I_q = (I_q * -Q16_2_3) >> 15;
 80006c6:	13db      	asrs	r3, r3, #15
        I_q_filt = I_q_accum >> DQ_FILT_LVL;
 80006c8:	6832      	ldr	r2, [r6, #0]
 80006ca:	1215      	asrs	r5, r2, #8
        I_q_accum = I_q_accum - I_q_filt + I_q;
 80006cc:	b22d      	sxth	r5, r5
 80006ce:	1b52      	subs	r2, r2, r5
 80006d0:	b21d      	sxth	r5, r3
 80006d2:	1952      	adds	r2, r2, r5

        I_d_error = I_d_des - I_d;
        I_q_error = I_q_des - I_q;

        I_d_error_int = clip(I_d_error_int + I_d_error, -32, 32);
 80006d4:	4d69      	ldr	r5, [pc, #420]	; (800087c <foc_loop+0x318>)
        I_q_accum = I_q_accum - I_q_filt + I_q;
 80006d6:	6032      	str	r2, [r6, #0]
        I_d_error_int = clip(I_d_error_int + I_d_error, -32, 32);
 80006d8:	682a      	ldr	r2, [r5, #0]
 80006da:	1a52      	subs	r2, r2, r1
 80006dc:	1c11      	adds	r1, r2, #0
 80006de:	b212      	sxth	r2, r2
 80006e0:	3220      	adds	r2, #32
 80006e2:	db5d      	blt.n	80007a0 <foc_loop+0x23c>
 80006e4:	b209      	sxth	r1, r1
 80006e6:	2920      	cmp	r1, #32
 80006e8:	dd00      	ble.n	80006ec <foc_loop+0x188>
 80006ea:	2120      	movs	r1, #32
 80006ec:	6029      	str	r1, [r5, #0]
        I_q_error_int = clip(I_q_error_int + I_q_error, -32, 32);
 80006ee:	4964      	ldr	r1, [pc, #400]	; (8000880 <foc_loop+0x31c>)
 80006f0:	680a      	ldr	r2, [r1, #0]
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	1c1a      	adds	r2, r3, #0
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	3320      	adds	r3, #32
 80006fa:	da02      	bge.n	8000702 <foc_loop+0x19e>
 80006fc:	2320      	movs	r3, #32
 80006fe:	425b      	negs	r3, r3
 8000700:	1c1a      	adds	r2, r3, #0
 8000702:	b212      	sxth	r2, r2
 8000704:	2a20      	cmp	r2, #32
 8000706:	dd00      	ble.n	800070a <foc_loop+0x1a6>
 8000708:	2220      	movs	r2, #32
        int32_t V_u = (Q16_cos_t * V_d - Q16_sin_t * V_q) >> 15;
        int32_t V_v = ((Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * V_d + (Q16_SQRT3_2_cos_t + Q16_1_2_sin_t) * V_q) >> 15;
        int32_t V_w = (-(Q16_SQRT3_2_sin_t + Q16_1_2_cos_t) * V_d - (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * V_q) >> 15;

        mag = 0;
        step = ((e_angle + 27307) & (32768 - 1)) / 5461;
 800070a:	4b5e      	ldr	r3, [pc, #376]	; (8000884 <foc_loop+0x320>)
        I_q_error_int = clip(I_q_error_int + I_q_error, -32, 32);
 800070c:	600a      	str	r2, [r1, #0]
        step = ((e_angle + 27307) & (32768 - 1)) / 5461;
 800070e:	469c      	mov	ip, r3
 8000710:	4460      	add	r0, ip
 8000712:	0440      	lsls	r0, r0, #17
 8000714:	495c      	ldr	r1, [pc, #368]	; (8000888 <foc_loop+0x324>)
 8000716:	0c40      	lsrs	r0, r0, #17
 8000718:	f7ff fd80 	bl	800021c <__divsi3>

        // six-step commutation
        if (step == 0) {
 800071c:	2800      	cmp	r0, #0
 800071e:	d143      	bne.n	80007a8 <foc_loop+0x244>
            TIM1->CCR1 = mag;
 8000720:	4b5a      	ldr	r3, [pc, #360]	; (800088c <foc_loop+0x328>)
 8000722:	6358      	str	r0, [r3, #52]	; 0x34
            TIM1->CCR2 = 0;
 8000724:	6398      	str	r0, [r3, #56]	; 0x38
            TIM1->CCR3 = 0;
 8000726:	63d8      	str	r0, [r3, #60]	; 0x3c
            TIM1->CCR2 = 0;
            TIM1->CCR3 = mag;
        }
    }

    count++;
 8000728:	4f59      	ldr	r7, [pc, #356]	; (8000890 <foc_loop+0x32c>)

    if (p.uart_idle) {
 800072a:	4d5a      	ldr	r5, [pc, #360]	; (8000894 <foc_loop+0x330>)
    count++;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	603b      	str	r3, [r7, #0]
    if (p.uart_idle) {
 8000732:	7f2b      	ldrb	r3, [r5, #28]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d01d      	beq.n	8000774 <foc_loop+0x210>

        for (int i = 0; i < UARTSIZE; i++) { // check which byte has MSB 1 and make it the first
            if (p.uart_RX[i] & 0x80) {
 8000738:	2207      	movs	r2, #7
 800073a:	56aa      	ldrsb	r2, [r5, r2]
 800073c:	79eb      	ldrb	r3, [r5, #7]
 800073e:	2a00      	cmp	r2, #0
 8000740:	db5f      	blt.n	8000802 <foc_loop+0x29e>
 8000742:	2208      	movs	r2, #8
 8000744:	56aa      	ldrsb	r2, [r5, r2]
 8000746:	7a2b      	ldrb	r3, [r5, #8]
 8000748:	2a00      	cmp	r2, #0
 800074a:	db6b      	blt.n	8000824 <foc_loop+0x2c0>
 800074c:	2209      	movs	r2, #9
 800074e:	56aa      	ldrsb	r2, [r5, r2]
        for (int i = 0; i < UARTSIZE; i++) { // check which byte has MSB 1 and make it the first
 8000750:	2602      	movs	r6, #2
            if (p.uart_RX[i] & 0x80) {
 8000752:	7a6b      	ldrb	r3, [r5, #9]
 8000754:	2a00      	cmp	r2, #0
 8000756:	db55      	blt.n	8000804 <foc_loop+0x2a0>
                break;
            }
        }

        // memcpy(p.uart_TX, p.uart_RX, 3);
        RS485_SET_TX;
 8000758:	2090      	movs	r0, #144	; 0x90
 800075a:	2201      	movs	r2, #1
 800075c:	2102      	movs	r1, #2
 800075e:	05c0      	lsls	r0, r0, #23
 8000760:	f001 fbe2 	bl	8001f28 <HAL_GPIO_WritePin>
        HAL_UART_Transmit_DMA(&huart1, p.uart_TX, UARTSIZE); // DMA channel 4
 8000764:	4e4c      	ldr	r6, [pc, #304]	; (8000898 <foc_loop+0x334>)
 8000766:	2203      	movs	r2, #3
 8000768:	0031      	movs	r1, r6
 800076a:	484c      	ldr	r0, [pc, #304]	; (800089c <foc_loop+0x338>)
 800076c:	f003 feb4 	bl	80044d8 <HAL_UART_Transmit_DMA>
        p.uart_idle = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	7633      	strb	r3, [r6, #24]
    }

    if (p.print_flag) { // 100Hz clock
 8000774:	7eab      	ldrb	r3, [r5, #26]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d006      	beq.n	8000788 <foc_loop+0x224>

        rpm = ((cont_angle - cont_angle_prev) * 100 * 60) >> 15; // should be accurate within reasonable RPM range if 32-bit
        cont_angle_prev = cont_angle;
 800077a:	465a      	mov	r2, fp
 800077c:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <foc_loop+0x33c>)
 800077e:	6812      	ldr	r2, [r2, #0]
 8000780:	601a      	str	r2, [r3, #0]

        loop_freq = count * 100;
        count = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]

        p.print_flag = 0;
 8000786:	76ab      	strb	r3, [r5, #26]
    }
    LED_GREEN;
 8000788:	2200      	movs	r2, #0
 800078a:	2101      	movs	r1, #1
 800078c:	4826      	ldr	r0, [pc, #152]	; (8000828 <foc_loop+0x2c4>)
 800078e:	f001 fbcb 	bl	8001f28 <HAL_GPIO_WritePin>
}
 8000792:	b003      	add	sp, #12
 8000794:	bcf0      	pop	{r4, r5, r6, r7}
 8000796:	46bb      	mov	fp, r7
 8000798:	46b2      	mov	sl, r6
 800079a:	46a9      	mov	r9, r5
 800079c:	46a0      	mov	r8, r4
 800079e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        I_d_error_int = clip(I_d_error_int + I_d_error, -32, 32);
 80007a0:	2220      	movs	r2, #32
 80007a2:	4252      	negs	r2, r2
 80007a4:	1c11      	adds	r1, r2, #0
 80007a6:	e79d      	b.n	80006e4 <foc_loop+0x180>
        if (step == 1) {
 80007a8:	2801      	cmp	r0, #1
 80007aa:	d10c      	bne.n	80007c6 <foc_loop+0x262>
            TIM1->CCR1 = mag;
 80007ac:	2200      	movs	r2, #0
 80007ae:	4b37      	ldr	r3, [pc, #220]	; (800088c <foc_loop+0x328>)
 80007b0:	635a      	str	r2, [r3, #52]	; 0x34
            TIM1->CCR2 = 0;
 80007b2:	639a      	str	r2, [r3, #56]	; 0x38
            TIM1->CCR3 = mag;
 80007b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80007b6:	e7b7      	b.n	8000728 <foc_loop+0x1c4>
            revs -= 32768;
 80007b8:	4c3a      	ldr	r4, [pc, #232]	; (80008a4 <foc_loop+0x340>)
 80007ba:	4821      	ldr	r0, [pc, #132]	; (8000840 <foc_loop+0x2dc>)
 80007bc:	46a4      	mov	ip, r4
 80007be:	6802      	ldr	r2, [r0, #0]
 80007c0:	4462      	add	r2, ip
 80007c2:	6002      	str	r2, [r0, #0]
 80007c4:	e709      	b.n	80005da <foc_loop+0x76>
        if (step == 2) {
 80007c6:	2802      	cmp	r0, #2
 80007c8:	d0f0      	beq.n	80007ac <foc_loop+0x248>
        if (step == 3) {
 80007ca:	2803      	cmp	r0, #3
 80007cc:	d0ee      	beq.n	80007ac <foc_loop+0x248>
        if (step == 4) {
 80007ce:	2804      	cmp	r0, #4
 80007d0:	d0ec      	beq.n	80007ac <foc_loop+0x248>
        if (step == 5) {
 80007d2:	2805      	cmp	r0, #5
 80007d4:	d1a8      	bne.n	8000728 <foc_loop+0x1c4>
            TIM1->CCR1 = mag;
 80007d6:	2200      	movs	r2, #0
 80007d8:	4b2c      	ldr	r3, [pc, #176]	; (800088c <foc_loop+0x328>)
 80007da:	635a      	str	r2, [r3, #52]	; 0x34
            TIM1->CCR2 = 0;
 80007dc:	639a      	str	r2, [r3, #56]	; 0x38
            TIM1->CCR3 = mag;
 80007de:	63da      	str	r2, [r3, #60]	; 0x3c
 80007e0:	e7a2      	b.n	8000728 <foc_loop+0x1c4>
        } else if (m_angle < 8192 && m_angle_prev > 24576) {
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d300      	bcc.n	80007e8 <foc_loop+0x284>
 80007e6:	e6f6      	b.n	80005d6 <foc_loop+0x72>
 80007e8:	22c0      	movs	r2, #192	; 0xc0
 80007ea:	01d2      	lsls	r2, r2, #7
 80007ec:	4290      	cmp	r0, r2
 80007ee:	d800      	bhi.n	80007f2 <foc_loop+0x28e>
 80007f0:	e6f1      	b.n	80005d6 <foc_loop+0x72>
            revs += 32768;
 80007f2:	2480      	movs	r4, #128	; 0x80
 80007f4:	0224      	lsls	r4, r4, #8
 80007f6:	46a4      	mov	ip, r4
 80007f8:	4811      	ldr	r0, [pc, #68]	; (8000840 <foc_loop+0x2dc>)
 80007fa:	6802      	ldr	r2, [r0, #0]
 80007fc:	4462      	add	r2, ip
 80007fe:	6002      	str	r2, [r0, #0]
 8000800:	e6eb      	b.n	80005da <foc_loop+0x76>
        for (int i = 0; i < UARTSIZE; i++) { // check which byte has MSB 1 and make it the first
 8000802:	2600      	movs	r6, #0
                    p.uart_TX[j] = p.uart_RX[(i + j) % UARTSIZE];
 8000804:	712b      	strb	r3, [r5, #4]
 8000806:	2103      	movs	r1, #3
 8000808:	1c70      	adds	r0, r6, #1
 800080a:	f7ff fded 	bl	80003e8 <__aeabi_idivmod>
 800080e:	1869      	adds	r1, r5, r1
 8000810:	79cb      	ldrb	r3, [r1, #7]
 8000812:	1cb0      	adds	r0, r6, #2
 8000814:	716b      	strb	r3, [r5, #5]
 8000816:	2103      	movs	r1, #3
 8000818:	f7ff fde6 	bl	80003e8 <__aeabi_idivmod>
 800081c:	1869      	adds	r1, r5, r1
 800081e:	79cb      	ldrb	r3, [r1, #7]
 8000820:	71ab      	strb	r3, [r5, #6]
 8000822:	e799      	b.n	8000758 <foc_loop+0x1f4>
        for (int i = 0; i < UARTSIZE; i++) { // check which byte has MSB 1 and make it the first
 8000824:	2601      	movs	r6, #1
 8000826:	e7ed      	b.n	8000804 <foc_loop+0x2a0>
 8000828:	48001400 	.word	0x48001400
 800082c:	20000368 	.word	0x20000368
 8000830:	200001d4 	.word	0x200001d4
 8000834:	200000ae 	.word	0x200000ae
 8000838:	200000ac 	.word	0x200000ac
 800083c:	200000b0 	.word	0x200000b0
 8000840:	200000b4 	.word	0x200000b4
 8000844:	2000035a 	.word	0x2000035a
 8000848:	200000a0 	.word	0x200000a0
 800084c:	200000b8 	.word	0x200000b8
 8000850:	fffff7fd 	.word	0xfffff7fd
 8000854:	20000094 	.word	0x20000094
 8000858:	fffff80a 	.word	0xfffff80a
 800085c:	20000098 	.word	0x20000098
 8000860:	fffff804 	.word	0xfffff804
 8000864:	2000009c 	.word	0x2000009c
 8000868:	08005bbc 	.word	0x08005bbc
 800086c:	0000ddb4 	.word	0x0000ddb4
 8000870:	0000aaab 	.word	0x0000aaab
 8000874:	20000084 	.word	0x20000084
 8000878:	2000008c 	.word	0x2000008c
 800087c:	20000088 	.word	0x20000088
 8000880:	20000090 	.word	0x20000090
 8000884:	00006aab 	.word	0x00006aab
 8000888:	00001555 	.word	0x00001555
 800088c:	40012c00 	.word	0x40012c00
 8000890:	200000a8 	.word	0x200000a8
 8000894:	20000350 	.word	0x20000350
 8000898:	20000354 	.word	0x20000354
 800089c:	200002c8 	.word	0x200002c8
 80008a0:	200000a4 	.word	0x200000a4
 80008a4:	ffff8000 	.word	0xffff8000

080008a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) { // gets called before all bits finish
 80008a8:	b510      	push	{r4, lr}
    HAL_UART_Receive_IT(&huart1, p.uart_RX, UARTSIZE);
 80008aa:	2203      	movs	r2, #3
 80008ac:	4902      	ldr	r1, [pc, #8]	; (80008b8 <HAL_UART_RxCpltCallback+0x10>)
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <HAL_UART_RxCpltCallback+0x14>)
 80008b0:	f003 fd64 	bl	800437c <HAL_UART_Receive_IT>
}
 80008b4:	bd10      	pop	{r4, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	20000357 	.word	0x20000357
 80008bc:	200002c8 	.word	0x200002c8

080008c0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
    RS485_SET_RX;
 80008c0:	2090      	movs	r0, #144	; 0x90
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80008c2:	b510      	push	{r4, lr}
    RS485_SET_RX;
 80008c4:	2200      	movs	r2, #0
 80008c6:	2102      	movs	r1, #2
 80008c8:	05c0      	lsls	r0, r0, #23
 80008ca:	f001 fb2d 	bl	8001f28 <HAL_GPIO_WritePin>
}
 80008ce:	bd10      	pop	{r4, pc}

080008d0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) { // receive overrun error happens once in a while, just restart RX
 80008d0:	b510      	push	{r4, lr}
    HAL_UART_Receive_IT(&huart1, p.uart_RX, UARTSIZE);
 80008d2:	2203      	movs	r2, #3
 80008d4:	4904      	ldr	r1, [pc, #16]	; (80008e8 <HAL_UART_ErrorCallback+0x18>)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <HAL_UART_ErrorCallback+0x1c>)
 80008d8:	f003 fd50 	bl	800437c <HAL_UART_Receive_IT>
    LED_RED;
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <HAL_UART_ErrorCallback+0x20>)
 80008e2:	f001 fb21 	bl	8001f28 <HAL_GPIO_WritePin>
}
 80008e6:	bd10      	pop	{r4, pc}
 80008e8:	20000357 	.word	0x20000357
 80008ec:	200002c8 	.word	0x200002c8
 80008f0:	48001400 	.word	0x48001400

080008f4 <__io_putchar>:
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

// overrides printf
int __io_putchar(int ch) {
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80008f4:	2301      	movs	r3, #1
int __io_putchar(int ch) {
 80008f6:	b500      	push	{lr}
 80008f8:	b083      	sub	sp, #12
 80008fa:	9001      	str	r0, [sp, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80008fc:	2201      	movs	r2, #1
 80008fe:	425b      	negs	r3, r3
 8000900:	a901      	add	r1, sp, #4
 8000902:	4803      	ldr	r0, [pc, #12]	; (8000910 <__io_putchar+0x1c>)
 8000904:	f003 fc28 	bl	8004158 <HAL_UART_Transmit>
    return ch;
 8000908:	9801      	ldr	r0, [sp, #4]
}
 800090a:	b003      	add	sp, #12
 800090c:	bd00      	pop	{pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	200002c8 	.word	0x200002c8

08000914 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback whenever a timer rolls over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
    if (htim == &htim2) { // 100Hz
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000916:	4283      	cmp	r3, r0
 8000918:	d000      	beq.n	800091c <HAL_TIM_PeriodElapsedCallback+0x8>
        p.print_flag = 1;
    }
}
 800091a:	4770      	bx	lr
        p.print_flag = 1;
 800091c:	2201      	movs	r2, #1
 800091e:	4b02      	ldr	r3, [pc, #8]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000920:	769a      	strb	r2, [r3, #26]
}
 8000922:	e7fa      	b.n	800091a <HAL_TIM_PeriodElapsedCallback+0x6>
 8000924:	20000280 	.word	0x20000280
 8000928:	20000350 	.word	0x20000350

0800092c <Error_Handler>:
 * @retval None
 */
void Error_Handler(void) {
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    LED_RED;
 800092c:	2201      	movs	r2, #1
 800092e:	2101      	movs	r1, #1
void Error_Handler(void) {
 8000930:	b510      	push	{r4, lr}
    LED_RED;
 8000932:	4808      	ldr	r0, [pc, #32]	; (8000954 <Error_Handler+0x28>)
 8000934:	f001 faf8 	bl	8001f28 <HAL_GPIO_WritePin>
    printf("ERROR HANDLER \n");
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <Error_Handler+0x2c>)
 800093a:	f004 fd65 	bl	8005408 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093e:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000940:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <Error_Handler+0x30>)
 8000946:	4a06      	ldr	r2, [pc, #24]	; (8000960 <Error_Handler+0x34>)
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	e7fd      	b.n	800094e <Error_Handler+0x22>
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	48001400 	.word	0x48001400
 8000958:	08005dbc 	.word	0x08005dbc
 800095c:	e000ed00 	.word	0xe000ed00
 8000960:	05fa0004 	.word	0x05fa0004

08000964 <SystemClock_Config>:
void SystemClock_Config(void) {
 8000964:	b510      	push	{r4, lr}
 8000966:	b094      	sub	sp, #80	; 0x50
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000968:	222c      	movs	r2, #44	; 0x2c
 800096a:	2100      	movs	r1, #0
 800096c:	a809      	add	r0, sp, #36	; 0x24
 800096e:	f004 fd55 	bl	800541c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000972:	2210      	movs	r2, #16
 8000974:	2100      	movs	r1, #0
 8000976:	a804      	add	r0, sp, #16
 8000978:	f004 fd50 	bl	800541c <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800097c:	2210      	movs	r2, #16
 800097e:	2100      	movs	r1, #0
 8000980:	4668      	mov	r0, sp
 8000982:	f004 fd4b 	bl	800541c <memset>
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI14;
 8000986:	2312      	movs	r3, #18
 8000988:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098a:	3b11      	subs	r3, #17
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	2410      	movs	r4, #16
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098e:	930b      	str	r3, [sp, #44]	; 0x2c
    RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000990:	930d      	str	r3, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000992:	23e0      	movs	r3, #224	; 0xe0
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000994:	940c      	str	r4, [sp, #48]	; 0x30
    RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000996:	940e      	str	r4, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000998:	039b      	lsls	r3, r3, #14
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	3c0e      	subs	r4, #14
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800099c:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	9410      	str	r4, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80009a0:	9312      	str	r3, [sp, #72]	; 0x48
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009a2:	f001 fec3 	bl	800272c <HAL_RCC_OscConfig>
 80009a6:	2800      	cmp	r0, #0
 80009a8:	d117      	bne.n	80009da <SystemClock_Config+0x76>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80009aa:	2307      	movs	r3, #7
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ac:	9006      	str	r0, [sp, #24]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ae:	9007      	str	r0, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80009b0:	2101      	movs	r1, #1
 80009b2:	a804      	add	r0, sp, #16
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80009b4:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b6:	9405      	str	r4, [sp, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80009b8:	f002 f912 	bl	8002be0 <HAL_RCC_ClockConfig>
 80009bc:	2800      	cmp	r0, #0
 80009be:	d10c      	bne.n	80009da <SystemClock_Config+0x76>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
 80009c0:	2321      	movs	r3, #33	; 0x21
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009c2:	2200      	movs	r2, #0
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
 80009c4:	9300      	str	r3, [sp, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009c6:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80009c8:	4668      	mov	r0, sp
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009ca:	9202      	str	r2, [sp, #8]
 80009cc:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80009ce:	f002 f9f1 	bl	8002db4 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d101      	bne.n	80009da <SystemClock_Config+0x76>
}
 80009d6:	b014      	add	sp, #80	; 0x50
 80009d8:	bd10      	pop	{r4, pc}
        Error_Handler();
 80009da:	f7ff ffa7 	bl	800092c <Error_Handler>
 80009de:	46c0      	nop			; (mov r8, r8)

080009e0 <main>:
int main(void) {
 80009e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009e2:	b0a9      	sub	sp, #164	; 0xa4
    HAL_Init();
 80009e4:	f000 fcec 	bl	80013c0 <HAL_Init>
    SystemClock_Config();
 80009e8:	f7ff ffbc 	bl	8000964 <SystemClock_Config>
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	2214      	movs	r2, #20
 80009ee:	2100      	movs	r1, #0
 80009f0:	a820      	add	r0, sp, #128	; 0x80
 80009f2:	f004 fd13 	bl	800541c <memset>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	4cee      	ldr	r4, [pc, #952]	; (8000db4 <main+0x3d4>)
 80009fa:	03d2      	lsls	r2, r2, #15
 80009fc:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 80009fe:	21c3      	movs	r1, #195	; 0xc3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a00:	4313      	orrs	r3, r2
 8000a02:	6163      	str	r3, [r4, #20]
 8000a04:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 8000a06:	48ec      	ldr	r0, [pc, #944]	; (8000db8 <main+0x3d8>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a08:	4013      	ands	r3, r2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0c:	9302      	str	r3, [sp, #8]
 8000a0e:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	6963      	ldr	r3, [r4, #20]
 8000a12:	0292      	lsls	r2, r2, #10
 8000a14:	4313      	orrs	r3, r2
 8000a16:	6163      	str	r3, [r4, #20]
 8000a18:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	4013      	ands	r3, r2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	9303      	str	r3, [sp, #12]
 8000a22:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	6963      	ldr	r3, [r4, #20]
 8000a26:	02d2      	lsls	r2, r2, #11
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	6163      	str	r3, [r4, #20]
 8000a2c:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2601      	movs	r6, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a30:	4013      	ands	r3, r2
 8000a32:	9304      	str	r3, [sp, #16]
    HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 8000a38:	f001 fa76 	bl	8001f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(USART_DE_GPIO_Port, USART_DE_Pin, GPIO_PIN_RESET);
 8000a3c:	2090      	movs	r0, #144	; 0x90
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2102      	movs	r1, #2
 8000a42:	05c0      	lsls	r0, r0, #23
 8000a44:	f001 fa70 	bl	8001f28 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin;
 8000a48:	23c3      	movs	r3, #195	; 0xc3
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a4a:	48db      	ldr	r0, [pc, #876]	; (8000db8 <main+0x3d8>)
 8000a4c:	a920      	add	r1, sp, #128	; 0x80
    GPIO_InitStruct.Pin = LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin;
 8000a4e:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	9621      	str	r6, [sp, #132]	; 0x84
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a56:	f001 f969 	bl	8001d2c <HAL_GPIO_Init>
    HAL_GPIO_Init(USART_DE_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = USART_DE_Pin;
 8000a5c:	2302      	movs	r3, #2
    HAL_GPIO_Init(USART_DE_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	a920      	add	r1, sp, #128	; 0x80
 8000a60:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART_DE_Pin;
 8000a62:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a64:	9322      	str	r3, [sp, #136]	; 0x88
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	9621      	str	r6, [sp, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(USART_DE_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f001 f95f 	bl	8001d2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OC_SEL_Pin;
 8000a6e:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8000a70:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = OC_SEL_Pin;
 8000a72:	011b      	lsls	r3, r3, #4
    HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8000a74:	a920      	add	r1, sp, #128	; 0x80
 8000a76:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = OC_SEL_Pin;
 8000a78:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7a:	9521      	str	r5, [sp, #132]	; 0x84
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	9522      	str	r5, [sp, #136]	; 0x88
    HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f001 f955 	bl	8001d2c <HAL_GPIO_Init>
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000a82:	6963      	ldr	r3, [r4, #20]
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a84:	2200      	movs	r2, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000a86:	4333      	orrs	r3, r6
 8000a88:	6163      	str	r3, [r4, #20]
 8000a8a:	6963      	ldr	r3, [r4, #20]
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a8c:	2100      	movs	r1, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000a8e:	4033      	ands	r3, r6
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a90:	2009      	movs	r0, #9
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000a92:	9301      	str	r3, [sp, #4]
 8000a94:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a96:	f000 ffe9 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a9a:	2009      	movs	r0, #9
 8000a9c:	f001 f818 	bl	8001ad0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	200b      	movs	r0, #11
 8000aa6:	f000 ffe1 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000aaa:	200b      	movs	r0, #11
 8000aac:	f001 f810 	bl	8001ad0 <HAL_NVIC_EnableIRQ>
    hi2c1.Instance = I2C1;
 8000ab0:	4cc2      	ldr	r4, [pc, #776]	; (8000dbc <main+0x3dc>)
 8000ab2:	4bc3      	ldr	r3, [pc, #780]	; (8000dc0 <main+0x3e0>)
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000ab4:	0020      	movs	r0, r4
    hi2c1.Instance = I2C1;
 8000ab6:	6023      	str	r3, [r4, #0]
    hi2c1.Init.Timing = 0x2000090E;
 8000ab8:	4bc2      	ldr	r3, [pc, #776]	; (8000dc4 <main+0x3e4>)
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aba:	60e6      	str	r6, [r4, #12]
    hi2c1.Init.Timing = 0x2000090E;
 8000abc:	6063      	str	r3, [r4, #4]
    hi2c1.Init.OwnAddress1 = 18;
 8000abe:	2312      	movs	r3, #18
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	6125      	str	r5, [r4, #16]
    hi2c1.Init.OwnAddress1 = 18;
 8000ac2:	60a3      	str	r3, [r4, #8]
    hi2c1.Init.OwnAddress2 = 0;
 8000ac4:	6165      	str	r5, [r4, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ac6:	61a5      	str	r5, [r4, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac8:	61e5      	str	r5, [r4, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aca:	6225      	str	r5, [r4, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000acc:	f001 fa32 	bl	8001f34 <HAL_I2C_Init>
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d000      	beq.n	8000ad6 <main+0xf6>
 8000ad4:	e191      	b.n	8000dfa <main+0x41a>
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	0020      	movs	r0, r4
 8000ada:	f001 fdd3 	bl	8002684 <HAL_I2CEx_ConfigAnalogFilter>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	d000      	beq.n	8000ae4 <main+0x104>
 8000ae2:	e18a      	b.n	8000dfa <main+0x41a>
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	0020      	movs	r0, r4
 8000ae8:	f001 fdf2 	bl	80026d0 <HAL_I2CEx_ConfigDigitalFilter>
 8000aec:	1e05      	subs	r5, r0, #0
 8000aee:	d000      	beq.n	8000af2 <main+0x112>
 8000af0:	e183      	b.n	8000dfa <main+0x41a>
    ADC_ChannelConfTypeDef sConfig = {0};
 8000af2:	220c      	movs	r2, #12
 8000af4:	2100      	movs	r1, #0
 8000af6:	a809      	add	r0, sp, #36	; 0x24
 8000af8:	f004 fc90 	bl	800541c <memset>
    hadc.Instance = ADC1;
 8000afc:	4cb2      	ldr	r4, [pc, #712]	; (8000dc8 <main+0x3e8>)
 8000afe:	4bb3      	ldr	r3, [pc, #716]	; (8000dcc <main+0x3ec>)
    hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b00:	2704      	movs	r7, #4
    hadc.Instance = ADC1;
 8000b02:	6023      	str	r3, [r4, #0]
    hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b04:	23c2      	movs	r3, #194	; 0xc2
 8000b06:	33ff      	adds	r3, #255	; 0xff
 8000b08:	61e3      	str	r3, [r4, #28]
    hadc.Init.DMAContinuousRequests = DISABLE;
 8000b0a:	3b9e      	subs	r3, #158	; 0x9e
 8000b0c:	3bff      	subs	r3, #255	; 0xff
    if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000b0e:	0020      	movs	r0, r4
    hadc.Init.LowPowerAutoWait = DISABLE;
 8000b10:	61a5      	str	r5, [r4, #24]
    hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b12:	6065      	str	r5, [r4, #4]
    hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000b14:	60a5      	str	r5, [r4, #8]
    hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b16:	60e5      	str	r5, [r4, #12]
    hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000b18:	6126      	str	r6, [r4, #16]
    hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b1a:	6167      	str	r7, [r4, #20]
    hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b1c:	6225      	str	r5, [r4, #32]
    hadc.Init.DMAContinuousRequests = DISABLE;
 8000b1e:	54e5      	strb	r5, [r4, r3]
    hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b20:	62a6      	str	r6, [r4, #40]	; 0x28
    if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000b22:	f000 fd51 	bl	80015c8 <HAL_ADC_Init>
 8000b26:	2800      	cmp	r0, #0
 8000b28:	d000      	beq.n	8000b2c <main+0x14c>
 8000b2a:	e166      	b.n	8000dfa <main+0x41a>
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	015b      	lsls	r3, r3, #5
 8000b30:	930a      	str	r3, [sp, #40]	; 0x28
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b32:	2380      	movs	r3, #128	; 0x80
    sConfig.Channel = ADC_CHANNEL_0;
 8000b34:	9009      	str	r0, [sp, #36]	; 0x24
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b36:	055b      	lsls	r3, r3, #21
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b38:	0020      	movs	r0, r4
 8000b3a:	a909      	add	r1, sp, #36	; 0x24
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b3c:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b3e:	f000 fea7 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000b42:	2800      	cmp	r0, #0
 8000b44:	d000      	beq.n	8000b48 <main+0x168>
 8000b46:	e158      	b.n	8000dfa <main+0x41a>
    sConfig.Channel = ADC_CHANNEL_3;
 8000b48:	2303      	movs	r3, #3
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b4a:	0020      	movs	r0, r4
 8000b4c:	a909      	add	r1, sp, #36	; 0x24
    sConfig.Channel = ADC_CHANNEL_3;
 8000b4e:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b50:	f000 fe9e 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000b54:	2800      	cmp	r0, #0
 8000b56:	d000      	beq.n	8000b5a <main+0x17a>
 8000b58:	e14f      	b.n	8000dfa <main+0x41a>
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b5a:	0020      	movs	r0, r4
 8000b5c:	a909      	add	r1, sp, #36	; 0x24
    sConfig.Channel = ADC_CHANNEL_4;
 8000b5e:	9709      	str	r7, [sp, #36]	; 0x24
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b60:	f000 fe96 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d000      	beq.n	8000b6a <main+0x18a>
 8000b68:	e147      	b.n	8000dfa <main+0x41a>
    sConfig.Channel = ADC_CHANNEL_9;
 8000b6a:	2309      	movs	r3, #9
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b6c:	0020      	movs	r0, r4
 8000b6e:	a909      	add	r1, sp, #36	; 0x24
    sConfig.Channel = ADC_CHANNEL_9;
 8000b70:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b72:	f000 fe8d 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000b76:	2800      	cmp	r0, #0
 8000b78:	d000      	beq.n	8000b7c <main+0x19c>
 8000b7a:	e13e      	b.n	8000dfa <main+0x41a>
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b7c:	2310      	movs	r3, #16
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b7e:	0020      	movs	r0, r4
 8000b80:	a909      	add	r1, sp, #36	; 0x24
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b82:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b84:	f000 fe84 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	d000      	beq.n	8000b8e <main+0x1ae>
 8000b8c:	e135      	b.n	8000dfa <main+0x41a>
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000b8e:	2311      	movs	r3, #17
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b90:	0020      	movs	r0, r4
 8000b92:	a909      	add	r1, sp, #36	; 0x24
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000b94:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b96:	f000 fe7b 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000b9a:	2800      	cmp	r0, #0
 8000b9c:	d000      	beq.n	8000ba0 <main+0x1c0>
 8000b9e:	e12c      	b.n	8000dfa <main+0x41a>
    hspi1.Instance = SPI1;
 8000ba0:	488b      	ldr	r0, [pc, #556]	; (8000dd0 <main+0x3f0>)
 8000ba2:	4b8c      	ldr	r3, [pc, #560]	; (8000dd4 <main+0x3f4>)
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba4:	22e0      	movs	r2, #224	; 0xe0
    hspi1.Instance = SPI1;
 8000ba6:	6003      	str	r3, [r0, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ba8:	2382      	movs	r3, #130	; 0x82
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000baa:	00d2      	lsls	r2, r2, #3
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bac:	005b      	lsls	r3, r3, #1
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bae:	2680      	movs	r6, #128	; 0x80
    hspi1.Init.CRCPolynomial = 7;
 8000bb0:	2107      	movs	r1, #7
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bb2:	6043      	str	r3, [r0, #4]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb4:	60c2      	str	r2, [r0, #12]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bb6:	2300      	movs	r3, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bb8:	2208      	movs	r2, #8
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bba:	3f02      	subs	r7, #2
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bbc:	00b6      	lsls	r6, r6, #2
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bbe:	6083      	str	r3, [r0, #8]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bc0:	6107      	str	r7, [r0, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc2:	6143      	str	r3, [r0, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bc4:	6186      	str	r6, [r0, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bc6:	61c2      	str	r2, [r0, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc8:	6203      	str	r3, [r0, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bca:	6243      	str	r3, [r0, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bcc:	6283      	str	r3, [r0, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 8000bce:	62c1      	str	r1, [r0, #44]	; 0x2c
    hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bd0:	6303      	str	r3, [r0, #48]	; 0x30
    hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bd2:	6342      	str	r2, [r0, #52]	; 0x34
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000bd4:	f002 faba 	bl	800314c <HAL_SPI_Init>
 8000bd8:	1e05      	subs	r5, r0, #0
 8000bda:	d000      	beq.n	8000bde <main+0x1fe>
 8000bdc:	e10d      	b.n	8000dfa <main+0x41a>
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bde:	2210      	movs	r2, #16
 8000be0:	2100      	movs	r1, #0
 8000be2:	a810      	add	r0, sp, #64	; 0x40
 8000be4:	f004 fc1a 	bl	800541c <memset>
    TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000be8:	2214      	movs	r2, #20
 8000bea:	2100      	movs	r1, #0
 8000bec:	a814      	add	r0, sp, #80	; 0x50
 8000bee:	f004 fc15 	bl	800541c <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf2:	2208      	movs	r2, #8
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	a807      	add	r0, sp, #28
 8000bf8:	f004 fc10 	bl	800541c <memset>
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfc:	221c      	movs	r2, #28
 8000bfe:	2100      	movs	r1, #0
 8000c00:	a819      	add	r0, sp, #100	; 0x64
 8000c02:	f004 fc0b 	bl	800541c <memset>
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c06:	2220      	movs	r2, #32
 8000c08:	2100      	movs	r1, #0
 8000c0a:	a820      	add	r0, sp, #128	; 0x80
 8000c0c:	f004 fc06 	bl	800541c <memset>
    htim1.Instance = TIM1;
 8000c10:	4c71      	ldr	r4, [pc, #452]	; (8000dd8 <main+0x3f8>)
 8000c12:	4b72      	ldr	r3, [pc, #456]	; (8000ddc <main+0x3fc>)
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000c14:	0020      	movs	r0, r4
    htim1.Instance = TIM1;
 8000c16:	6023      	str	r3, [r4, #0]
    htim1.Init.Prescaler = 2;
 8000c18:	6067      	str	r7, [r4, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	60a5      	str	r5, [r4, #8]
    htim1.Init.Period = 512;
 8000c1c:	60e6      	str	r6, [r4, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1e:	6125      	str	r5, [r4, #16]
    htim1.Init.RepetitionCounter = 0;
 8000c20:	6165      	str	r5, [r4, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c22:	61a5      	str	r5, [r4, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000c24:	f002 fd52 	bl	80036cc <HAL_TIM_Base_Init>
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	d000      	beq.n	8000c2e <main+0x24e>
 8000c2c:	e0e5      	b.n	8000dfa <main+0x41a>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c2e:	2380      	movs	r3, #128	; 0x80
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000c30:	0020      	movs	r0, r4
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c32:	015b      	lsls	r3, r3, #5
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000c34:	a910      	add	r1, sp, #64	; 0x40
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c36:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000c38:	f002 ffe8 	bl	8003c0c <HAL_TIM_ConfigClockSource>
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	d000      	beq.n	8000c42 <main+0x262>
 8000c40:	e0db      	b.n	8000dfa <main+0x41a>
    if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000c42:	0020      	movs	r0, r4
 8000c44:	f002 fde8 	bl	8003818 <HAL_TIM_PWM_Init>
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	d000      	beq.n	8000c4e <main+0x26e>
 8000c4c:	e0d5      	b.n	8000dfa <main+0x41a>
    sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000c4e:	2305      	movs	r3, #5
 8000c50:	9314      	str	r3, [sp, #80]	; 0x50
    sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000c52:	336b      	adds	r3, #107	; 0x6b
 8000c54:	9315      	str	r3, [sp, #84]	; 0x54
    sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 8000c56:	2380      	movs	r3, #128	; 0x80
    sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000c58:	9017      	str	r0, [sp, #92]	; 0x5c
    sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 8000c5a:	021b      	lsls	r3, r3, #8
    sSlaveConfig.TriggerFilter = 0;
 8000c5c:	9018      	str	r0, [sp, #96]	; 0x60
    if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8000c5e:	a914      	add	r1, sp, #80	; 0x50
 8000c60:	0020      	movs	r0, r4
    sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 8000c62:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8000c64:	f003 f88a 	bl	8003d7c <HAL_TIM_SlaveConfigSynchro>
 8000c68:	2800      	cmp	r0, #0
 8000c6a:	d000      	beq.n	8000c6e <main+0x28e>
 8000c6c:	e0c5      	b.n	8000dfa <main+0x41a>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6e:	9007      	str	r0, [sp, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c70:	9008      	str	r0, [sp, #32]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000c72:	a907      	add	r1, sp, #28
 8000c74:	0020      	movs	r0, r4
 8000c76:	f003 fa0b 	bl	8004090 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7a:	2800      	cmp	r0, #0
 8000c7c:	d000      	beq.n	8000c80 <main+0x2a0>
 8000c7e:	e0bc      	b.n	8000dfa <main+0x41a>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c80:	2360      	movs	r3, #96	; 0x60
    sConfigOC.Pulse = 0;
 8000c82:	901a      	str	r0, [sp, #104]	; 0x68
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c84:	901b      	str	r0, [sp, #108]	; 0x6c
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c86:	901c      	str	r0, [sp, #112]	; 0x70
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c88:	901d      	str	r0, [sp, #116]	; 0x74
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c8a:	901e      	str	r0, [sp, #120]	; 0x78
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c8c:	901f      	str	r0, [sp, #124]	; 0x7c
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000c8e:	2200      	movs	r2, #0
 8000c90:	0020      	movs	r0, r4
 8000c92:	a919      	add	r1, sp, #100	; 0x64
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c94:	9319      	str	r3, [sp, #100]	; 0x64
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000c96:	f002 fe99 	bl	80039cc <HAL_TIM_PWM_ConfigChannel>
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	d000      	beq.n	8000ca0 <main+0x2c0>
 8000c9e:	e0ac      	b.n	8000dfa <main+0x41a>
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	0020      	movs	r0, r4
 8000ca4:	a919      	add	r1, sp, #100	; 0x64
 8000ca6:	f002 fe91 	bl	80039cc <HAL_TIM_PWM_ConfigChannel>
 8000caa:	2800      	cmp	r0, #0
 8000cac:	d000      	beq.n	8000cb0 <main+0x2d0>
 8000cae:	e0a4      	b.n	8000dfa <main+0x41a>
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000cb0:	2208      	movs	r2, #8
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	a919      	add	r1, sp, #100	; 0x64
 8000cb6:	f002 fe89 	bl	80039cc <HAL_TIM_PWM_ConfigChannel>
 8000cba:	2800      	cmp	r0, #0
 8000cbc:	d000      	beq.n	8000cc0 <main+0x2e0>
 8000cbe:	e09c      	b.n	8000dfa <main+0x41a>
    sBreakDeadTimeConfig.DeadTime = 10;
 8000cc0:	230a      	movs	r3, #10
 8000cc2:	9323      	str	r3, [sp, #140]	; 0x8c
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cc4:	2380      	movs	r3, #128	; 0x80
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cc6:	9020      	str	r0, [sp, #128]	; 0x80
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cc8:	9021      	str	r0, [sp, #132]	; 0x84
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cca:	9022      	str	r0, [sp, #136]	; 0x88
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ccc:	9024      	str	r0, [sp, #144]	; 0x90
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cce:	019b      	lsls	r3, r3, #6
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cd0:	9027      	str	r0, [sp, #156]	; 0x9c
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000cd2:	a920      	add	r1, sp, #128	; 0x80
 8000cd4:	0020      	movs	r0, r4
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cd6:	9325      	str	r3, [sp, #148]	; 0x94
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000cd8:	f003 fa08 	bl	80040ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	d000      	beq.n	8000ce2 <main+0x302>
 8000ce0:	e08b      	b.n	8000dfa <main+0x41a>
    HAL_TIM_MspPostInit(&htim1);
 8000ce2:	0020      	movs	r0, r4
 8000ce4:	f000 f9de 	bl	80010a4 <HAL_TIM_MspPostInit>
    huart1.Instance = USART1;
 8000ce8:	4c3d      	ldr	r4, [pc, #244]	; (8000de0 <main+0x400>)
 8000cea:	4b3e      	ldr	r3, [pc, #248]	; (8000de4 <main+0x404>)
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000cec:	220c      	movs	r2, #12
    huart1.Instance = USART1;
 8000cee:	6023      	str	r3, [r4, #0]
    huart1.Init.BaudRate = 115200;
 8000cf0:	23e1      	movs	r3, #225	; 0xe1
 8000cf2:	025b      	lsls	r3, r3, #9
 8000cf4:	6063      	str	r3, [r4, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	2300      	movs	r3, #0
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000cf8:	0020      	movs	r0, r4
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfa:	60a3      	str	r3, [r4, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	60e3      	str	r3, [r4, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000cfe:	6123      	str	r3, [r4, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000d00:	6162      	str	r2, [r4, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	61a3      	str	r3, [r4, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	61e3      	str	r3, [r4, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d06:	6223      	str	r3, [r4, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d08:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000d0a:	f004 f8b1 	bl	8004e70 <HAL_UART_Init>
 8000d0e:	1e06      	subs	r6, r0, #0
 8000d10:	d173      	bne.n	8000dfa <main+0x41a>
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE); // enable idle line interrupt
 8000d12:	2110      	movs	r1, #16
 8000d14:	6822      	ldr	r2, [r4, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	a80c      	add	r0, sp, #48	; 0x30
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE); // enable idle line interrupt
 8000d18:	6813      	ldr	r3, [r2, #0]
 8000d1a:	430b      	orrs	r3, r1
 8000d1c:	6013      	str	r3, [r2, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2210      	movs	r2, #16
 8000d22:	f004 fb7b 	bl	800541c <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d26:	2208      	movs	r2, #8
 8000d28:	2100      	movs	r1, #0
 8000d2a:	a805      	add	r0, sp, #20
 8000d2c:	f004 fb76 	bl	800541c <memset>
    htim2.Instance = TIM2;
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	4d2d      	ldr	r5, [pc, #180]	; (8000de8 <main+0x408>)
 8000d34:	05db      	lsls	r3, r3, #23
 8000d36:	602b      	str	r3, [r5, #0]
    htim2.Init.Prescaler = 63;
 8000d38:	233f      	movs	r3, #63	; 0x3f
 8000d3a:	606b      	str	r3, [r5, #4]
    htim2.Init.Period = 10000;
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <main+0x40c>)
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000d3e:	0028      	movs	r0, r5
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d40:	60ae      	str	r6, [r5, #8]
    htim2.Init.Period = 10000;
 8000d42:	60eb      	str	r3, [r5, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	612e      	str	r6, [r5, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d46:	61ae      	str	r6, [r5, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000d48:	f002 fcc0 	bl	80036cc <HAL_TIM_Base_Init>
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	d154      	bne.n	8000dfa <main+0x41a>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d50:	2380      	movs	r3, #128	; 0x80
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000d52:	0028      	movs	r0, r5
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d54:	015b      	lsls	r3, r3, #5
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000d56:	a90c      	add	r1, sp, #48	; 0x30
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d58:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000d5a:	f002 ff57 	bl	8003c0c <HAL_TIM_ConfigClockSource>
 8000d5e:	2800      	cmp	r0, #0
 8000d60:	d14b      	bne.n	8000dfa <main+0x41a>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d62:	9005      	str	r0, [sp, #20]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	9006      	str	r0, [sp, #24]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000d66:	a905      	add	r1, sp, #20
 8000d68:	0028      	movs	r0, r5
 8000d6a:	f003 f991 	bl	8004090 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	d143      	bne.n	8000dfa <main+0x41a>
    HAL_MultiProcessor_Init(&huart1, UART_ADDR, UART_WAKEUPMETHOD_ADDRESSMARK);
 8000d72:	2280      	movs	r2, #128	; 0x80
 8000d74:	2102      	movs	r1, #2
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	0020      	movs	r0, r4
 8000d7a:	f004 f935 	bl	8004fe8 <HAL_MultiProcessor_Init>
    HAL_MultiProcessorEx_AddressLength_Set(&huart1, UART_ADDRESS_DETECT_4B);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	0020      	movs	r0, r4
 8000d82:	f004 fa21 	bl	80051c8 <HAL_MultiProcessorEx_AddressLength_Set>
    HAL_MultiProcessor_EnableMuteMode(&huart1);
 8000d86:	0020      	movs	r0, r4
 8000d88:	f004 fa00 	bl	800518c <HAL_MultiProcessor_EnableMuteMode>
    HAL_MultiProcessor_EnterMuteMode(&huart1);
 8000d8c:	0020      	movs	r0, r4
 8000d8e:	f003 feb3 	bl	8004af8 <HAL_MultiProcessor_EnterMuteMode>
    DISABLE_DRIVE;
 8000d92:	2200      	movs	r2, #0
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	4808      	ldr	r0, [pc, #32]	; (8000db8 <main+0x3d8>)
 8000d98:	f001 f8c6 	bl	8001f28 <HAL_GPIO_WritePin>
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2140      	movs	r1, #64	; 0x40
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <main+0x3d8>)
 8000da2:	f001 f8c1 	bl	8001f28 <HAL_GPIO_WritePin>
    RS485_SET_RX;
 8000da6:	2090      	movs	r0, #144	; 0x90
 8000da8:	2200      	movs	r2, #0
 8000daa:	2102      	movs	r1, #2
 8000dac:	05c0      	lsls	r0, r0, #23
 8000dae:	f001 f8bb 	bl	8001f28 <HAL_GPIO_WritePin>
 8000db2:	e01d      	b.n	8000df0 <main+0x410>
 8000db4:	40021000 	.word	0x40021000
 8000db8:	48001400 	.word	0x48001400
 8000dbc:	20000180 	.word	0x20000180
 8000dc0:	40005400 	.word	0x40005400
 8000dc4:	2000090e 	.word	0x2000090e
 8000dc8:	200000b8 	.word	0x200000b8
 8000dcc:	40012400 	.word	0x40012400
 8000dd0:	200001d4 	.word	0x200001d4
 8000dd4:	40013000 	.word	0x40013000
 8000dd8:	20000238 	.word	0x20000238
 8000ddc:	40012c00 	.word	0x40012c00
 8000de0:	200002c8 	.word	0x200002c8
 8000de4:	40013800 	.word	0x40013800
 8000de8:	20000280 	.word	0x20000280
 8000dec:	00002710 	.word	0x00002710
    foc_startup();
 8000df0:	f7ff fb00 	bl	80003f4 <foc_startup>
        foc_loop();
 8000df4:	f7ff fbb6 	bl	8000564 <foc_loop>
 8000df8:	e7fc      	b.n	8000df4 <main+0x414>
        Error_Handler();
 8000dfa:	f7ff fd97 	bl	800092c <Error_Handler>
 8000dfe:	46c0      	nop			; (mov r8, r8)

08000e00 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e00:	2201      	movs	r2, #1
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_MspInit+0x2c>)
{
 8000e04:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	6999      	ldr	r1, [r3, #24]
 8000e08:	4311      	orrs	r1, r2
 8000e0a:	6199      	str	r1, [r3, #24]
 8000e0c:	6999      	ldr	r1, [r3, #24]
 8000e0e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	9200      	str	r2, [sp, #0]
 8000e14:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	69da      	ldr	r2, [r3, #28]
 8000e18:	0549      	lsls	r1, r1, #21
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	61da      	str	r2, [r3, #28]
 8000e1e:	69db      	ldr	r3, [r3, #28]
 8000e20:	400b      	ands	r3, r1
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e26:	b002      	add	sp, #8
 8000e28:	4770      	bx	lr
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	40021000 	.word	0x40021000

08000e30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e30:	b570      	push	{r4, r5, r6, lr}
 8000e32:	0004      	movs	r4, r0
 8000e34:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	2214      	movs	r2, #20
 8000e38:	2100      	movs	r1, #0
 8000e3a:	a804      	add	r0, sp, #16
 8000e3c:	f004 faee 	bl	800541c <memset>
  if(hadc->Instance==ADC1)
 8000e40:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <HAL_ADC_MspInit+0xb4>)
 8000e42:	6822      	ldr	r2, [r4, #0]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d001      	beq.n	8000e4c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e48:	b00a      	add	sp, #40	; 0x28
 8000e4a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <HAL_ADC_MspInit+0xb8>)
 8000e50:	0089      	lsls	r1, r1, #2
 8000e52:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e56:	430a      	orrs	r2, r1
 8000e58:	619a      	str	r2, [r3, #24]
 8000e5a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e5e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e62:	9201      	str	r2, [sp, #4]
 8000e64:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	695a      	ldr	r2, [r3, #20]
 8000e68:	0289      	lsls	r1, r1, #10
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	615a      	str	r2, [r3, #20]
 8000e6e:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	9202      	str	r2, [sp, #8]
 8000e78:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	695a      	ldr	r2, [r3, #20]
 8000e7c:	02c9      	lsls	r1, r1, #11
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = OP_V_O_Pin|OP_W_O_Pin|GPIO_PIN_4;
 8000e84:	2219      	movs	r2, #25
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	400b      	ands	r3, r1
 8000e88:	9303      	str	r3, [sp, #12]
 8000e8a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = OP_V_O_Pin|OP_W_O_Pin|GPIO_PIN_4;
 8000e8c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = OP_V_O_Pin|OP_W_O_Pin|GPIO_PIN_4;
 8000e90:	9204      	str	r2, [sp, #16]
 8000e92:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f000 ff4a 	bl	8001d2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OP_U_O_Pin;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	2202      	movs	r2, #2
    HAL_GPIO_Init(OP_U_O_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	4813      	ldr	r0, [pc, #76]	; (8000eec <HAL_ADC_MspInit+0xbc>)
 8000e9e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = OP_U_O_Pin;
 8000ea0:	9204      	str	r2, [sp, #16]
 8000ea2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(OP_U_O_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f000 ff41 	bl	8001d2c <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8000eaa:	4d11      	ldr	r5, [pc, #68]	; (8000ef0 <HAL_ADC_MspInit+0xc0>)
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_ADC_MspInit+0xc4>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000eae:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 8000eb0:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eb6:	3380      	adds	r3, #128	; 0x80
 8000eb8:	612b      	str	r3, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000ec0:	2320      	movs	r3, #32
 8000ec2:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	015b      	lsls	r3, r3, #5
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec8:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eca:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ecc:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000ece:	f000 fe25 	bl	8001b1c <HAL_DMA_Init>
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	d102      	bne.n	8000edc <HAL_ADC_MspInit+0xac>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000ed6:	6325      	str	r5, [r4, #48]	; 0x30
 8000ed8:	626c      	str	r4, [r5, #36]	; 0x24
}
 8000eda:	e7b5      	b.n	8000e48 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8000edc:	f7ff fd26 	bl	800092c <Error_Handler>
 8000ee0:	e7f9      	b.n	8000ed6 <HAL_ADC_MspInit+0xa6>
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	40012400 	.word	0x40012400
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	48000400 	.word	0x48000400
 8000ef0:	200000f8 	.word	0x200000f8
 8000ef4:	40020008 	.word	0x40020008

08000ef8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef8:	b510      	push	{r4, lr}
 8000efa:	0004      	movs	r4, r0
 8000efc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	2214      	movs	r2, #20
 8000f00:	2100      	movs	r1, #0
 8000f02:	a802      	add	r0, sp, #8
 8000f04:	f004 fa8a 	bl	800541c <memset>
  if(hi2c->Instance==I2C1)
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_I2C_MspInit+0x6c>)
 8000f0a:	6822      	ldr	r2, [r4, #0]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d001      	beq.n	8000f14 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f10:	b008      	add	sp, #32
 8000f12:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	4c14      	ldr	r4, [pc, #80]	; (8000f68 <HAL_I2C_MspInit+0x70>)
 8000f18:	02d2      	lsls	r2, r2, #11
 8000f1a:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	6163      	str	r3, [r4, #20]
 8000f22:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f24:	4811      	ldr	r0, [pc, #68]	; (8000f6c <HAL_I2C_MspInit+0x74>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	4013      	ands	r3, r2
 8000f28:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f2a:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f2e:	2312      	movs	r3, #18
 8000f30:	9202      	str	r2, [sp, #8]
 8000f32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f000 fef6 	bl	8001d2c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	69e3      	ldr	r3, [r4, #28]
 8000f44:	0392      	lsls	r2, r2, #14
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61e3      	str	r3, [r4, #28]
 8000f4a:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000f4c:	2100      	movs	r1, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f4e:	4013      	ands	r3, r2
 8000f50:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2017      	movs	r0, #23
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f56:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000f58:	f000 fd88 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000f5c:	2017      	movs	r0, #23
 8000f5e:	f000 fdb7 	bl	8001ad0 <HAL_NVIC_EnableIRQ>
}
 8000f62:	e7d5      	b.n	8000f10 <HAL_I2C_MspInit+0x18>
 8000f64:	40005400 	.word	0x40005400
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	48000400 	.word	0x48000400

08000f70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f70:	b510      	push	{r4, lr}
 8000f72:	0004      	movs	r4, r0
 8000f74:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	2214      	movs	r2, #20
 8000f78:	2100      	movs	r1, #0
 8000f7a:	a802      	add	r0, sp, #8
 8000f7c:	f004 fa4e 	bl	800541c <memset>
  if(hspi->Instance==SPI1)
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <HAL_SPI_MspInit+0x6c>)
 8000f82:	6822      	ldr	r2, [r4, #0]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d001      	beq.n	8000f8c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f88:	b008      	add	sp, #32
 8000f8a:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_SPI_MspInit+0x70>)
 8000f90:	0149      	lsls	r1, r1, #5
 8000f92:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f96:	430a      	orrs	r2, r1
 8000f98:	619a      	str	r2, [r3, #24]
 8000f9a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f9e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fa2:	9200      	str	r2, [sp, #0]
 8000fa4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	695a      	ldr	r2, [r3, #20]
 8000fa8:	0289      	lsls	r1, r1, #10
 8000faa:	430a      	orrs	r2, r1
 8000fac:	615a      	str	r2, [r3, #20]
 8000fae:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fb0:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	400b      	ands	r3, r1
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	9202      	str	r2, [sp, #8]
 8000fbc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fbe:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f000 feb2 	bl	8001d2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2019      	movs	r0, #25
 8000fce:	f000 fd4d 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000fd2:	2019      	movs	r0, #25
 8000fd4:	f000 fd7c 	bl	8001ad0 <HAL_NVIC_EnableIRQ>
}
 8000fd8:	e7d6      	b.n	8000f88 <HAL_SPI_MspInit+0x18>
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	40013000 	.word	0x40013000
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe4:	b510      	push	{r4, lr}
 8000fe6:	0004      	movs	r4, r0
 8000fe8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	2214      	movs	r2, #20
 8000fec:	2100      	movs	r1, #0
 8000fee:	a804      	add	r0, sp, #16
 8000ff0:	f004 fa14 	bl	800541c <memset>
  if(htim_base->Instance==TIM1)
 8000ff4:	6823      	ldr	r3, [r4, #0]
 8000ff6:	4a28      	ldr	r2, [pc, #160]	; (8001098 <HAL_TIM_Base_MspInit+0xb4>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d005      	beq.n	8001008 <HAL_TIM_Base_MspInit+0x24>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8000ffc:	2280      	movs	r2, #128	; 0x80
 8000ffe:	05d2      	lsls	r2, r2, #23
 8001000:	4293      	cmp	r3, r2
 8001002:	d036      	beq.n	8001072 <HAL_TIM_Base_MspInit+0x8e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001004:	b00a      	add	sp, #40	; 0x28
 8001006:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001008:	2180      	movs	r1, #128	; 0x80
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <HAL_TIM_Base_MspInit+0xb8>)
 800100c:	0109      	lsls	r1, r1, #4
 800100e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001010:	2402      	movs	r4, #2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001012:	430a      	orrs	r2, r1
 8001014:	619a      	str	r2, [r3, #24]
 8001016:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(OC_COMP_INT_GPIO_Port, &GPIO_InitStruct);
 8001018:	4821      	ldr	r0, [pc, #132]	; (80010a0 <HAL_TIM_Base_MspInit+0xbc>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 800101a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 800101e:	9200      	str	r2, [sp, #0]
 8001020:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	695a      	ldr	r2, [r3, #20]
 8001024:	02c9      	lsls	r1, r1, #11
 8001026:	430a      	orrs	r2, r1
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	695a      	ldr	r2, [r3, #20]
 800102c:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	9201      	str	r2, [sp, #4]
 8001032:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	695a      	ldr	r2, [r3, #20]
 8001036:	0289      	lsls	r1, r1, #10
 8001038:	430a      	orrs	r2, r1
 800103a:	615a      	str	r2, [r3, #20]
 800103c:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 800103e:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	400b      	ands	r3, r1
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 8001046:	2302      	movs	r3, #2
 8001048:	0152      	lsls	r2, r2, #5
    HAL_GPIO_Init(OC_COMP_INT_GPIO_Port, &GPIO_InitStruct);
 800104a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 800104c:	9204      	str	r2, [sp, #16]
 800104e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001050:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(OC_COMP_INT_GPIO_Port, &GPIO_InitStruct);
 8001052:	f000 fe6b 	bl	8001d2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OC_COMP_INT2_Pin;
 8001056:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(OC_COMP_INT2_GPIO_Port, &GPIO_InitStruct);
 8001058:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = OC_COMP_INT2_Pin;
 800105a:	015b      	lsls	r3, r3, #5
 800105c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
    HAL_GPIO_Init(OC_COMP_INT2_GPIO_Port, &GPIO_InitStruct);
 8001060:	a904      	add	r1, sp, #16
 8001062:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800106a:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(OC_COMP_INT2_GPIO_Port, &GPIO_InitStruct);
 800106c:	f000 fe5e 	bl	8001d2c <HAL_GPIO_Init>
 8001070:	e7c8      	b.n	8001004 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001072:	2301      	movs	r3, #1
 8001074:	4a09      	ldr	r2, [pc, #36]	; (800109c <HAL_TIM_Base_MspInit+0xb8>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001076:	200f      	movs	r0, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001078:	69d1      	ldr	r1, [r2, #28]
 800107a:	4319      	orrs	r1, r3
 800107c:	61d1      	str	r1, [r2, #28]
 800107e:	69d2      	ldr	r2, [r2, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001080:	2100      	movs	r1, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001082:	4013      	ands	r3, r2
 8001084:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001088:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800108a:	f000 fcef 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800108e:	200f      	movs	r0, #15
 8001090:	f000 fd1e 	bl	8001ad0 <HAL_NVIC_EnableIRQ>
}
 8001094:	e7b6      	b.n	8001004 <HAL_TIM_Base_MspInit+0x20>
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	40012c00 	.word	0x40012c00
 800109c:	40021000 	.word	0x40021000
 80010a0:	48000400 	.word	0x48000400

080010a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a4:	b510      	push	{r4, lr}
 80010a6:	0004      	movs	r4, r0
 80010a8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	2214      	movs	r2, #20
 80010ac:	2100      	movs	r1, #0
 80010ae:	a802      	add	r0, sp, #8
 80010b0:	f004 f9b4 	bl	800541c <memset>
  if(htim->Instance==TIM1)
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_TIM_MspPostInit+0x74>)
 80010b6:	6822      	ldr	r2, [r4, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d001      	beq.n	80010c0 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010bc:	b008      	add	sp, #32
 80010be:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_TIM_MspPostInit+0x78>)
 80010c4:	02c9      	lsls	r1, r1, #11
 80010c6:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80010c8:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	430a      	orrs	r2, r1
 80010cc:	615a      	str	r2, [r3, #20]
 80010ce:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	4813      	ldr	r0, [pc, #76]	; (8001120 <HAL_TIM_MspPostInit+0x7c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	9200      	str	r2, [sp, #0]
 80010d8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	0289      	lsls	r1, r1, #10
 80010de:	430a      	orrs	r2, r1
 80010e0:	615a      	str	r2, [r3, #20]
 80010e2:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|GPIO_PIN_15;
 80010e4:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	400b      	ands	r3, r1
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|GPIO_PIN_15;
 80010ec:	2302      	movs	r3, #2
 80010ee:	0212      	lsls	r2, r2, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|GPIO_PIN_15;
 80010f2:	9202      	str	r2, [sp, #8]
 80010f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80010f6:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f000 fe18 	bl	8001d2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HSU_Pin|HSV_Pin|GPIO_PIN_10;
 80010fc:	23e0      	movs	r3, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = HSU_Pin|HSV_Pin|GPIO_PIN_10;
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	a902      	add	r1, sp, #8
 8001108:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001110:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f000 fe0b 	bl	8001d2c <HAL_GPIO_Init>
}
 8001116:	e7d1      	b.n	80010bc <HAL_TIM_MspPostInit+0x18>
 8001118:	40012c00 	.word	0x40012c00
 800111c:	40021000 	.word	0x40021000
 8001120:	48000400 	.word	0x48000400

08001124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001124:	b530      	push	{r4, r5, lr}
 8001126:	0004      	movs	r4, r0
 8001128:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	2214      	movs	r2, #20
 800112c:	2100      	movs	r1, #0
 800112e:	a802      	add	r0, sp, #8
 8001130:	f004 f974 	bl	800541c <memset>
  if(huart->Instance==USART1)
 8001134:	4b25      	ldr	r3, [pc, #148]	; (80011cc <HAL_UART_MspInit+0xa8>)
 8001136:	6822      	ldr	r2, [r4, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d001      	beq.n	8001140 <HAL_UART_MspInit+0x1c>


  /* USER CODE END USART1_MspInit 1 */
  }

}
 800113c:	b009      	add	sp, #36	; 0x24
 800113e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <HAL_UART_MspInit+0xac>)
 8001144:	01c9      	lsls	r1, r1, #7
 8001146:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 800114a:	430a      	orrs	r2, r1
 800114c:	619a      	str	r2, [r3, #24]
 800114e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 8001152:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001156:	9200      	str	r2, [sp, #0]
 8001158:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	695a      	ldr	r2, [r3, #20]
 800115c:	0289      	lsls	r1, r1, #10
 800115e:	430a      	orrs	r2, r1
 8001160:	615a      	str	r2, [r3, #20]
 8001162:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	400b      	ands	r3, r1
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800116c:	2302      	movs	r3, #2
 800116e:	9202      	str	r2, [sp, #8]
 8001170:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001172:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001176:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001178:	3b02      	subs	r3, #2
 800117a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f000 fdd6 	bl	8001d2c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001180:	4d15      	ldr	r5, [pc, #84]	; (80011d8 <HAL_UART_MspInit+0xb4>)
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <HAL_UART_MspInit+0xb8>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001184:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001186:	602b      	str	r3, [r5, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001188:	2310      	movs	r3, #16
 800118a:	606b      	str	r3, [r5, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800118c:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800118e:	0028      	movs	r0, r5
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001190:	60ab      	str	r3, [r5, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001192:	60ea      	str	r2, [r5, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001194:	612b      	str	r3, [r5, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001196:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001198:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800119a:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800119c:	f000 fcbe 	bl	8001b1c <HAL_DMA_Init>
 80011a0:	2800      	cmp	r0, #0
 80011a2:	d110      	bne.n	80011c6 <HAL_UART_MspInit+0xa2>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <HAL_UART_MspInit+0xbc>)
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	6811      	ldr	r1, [r2, #0]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011ac:	201b      	movs	r0, #27
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 80011ae:	430b      	orrs	r3, r1
 80011b0:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011b2:	2100      	movs	r1, #0
 80011b4:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80011b6:	6725      	str	r5, [r4, #112]	; 0x70
 80011b8:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011ba:	f000 fc57 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011be:	201b      	movs	r0, #27
 80011c0:	f000 fc86 	bl	8001ad0 <HAL_NVIC_EnableIRQ>
}
 80011c4:	e7ba      	b.n	800113c <HAL_UART_MspInit+0x18>
      Error_Handler();
 80011c6:	f7ff fbb1 	bl	800092c <Error_Handler>
 80011ca:	e7eb      	b.n	80011a4 <HAL_UART_MspInit+0x80>
 80011cc:	40013800 	.word	0x40013800
 80011d0:	40021000 	.word	0x40021000
 80011d4:	00008004 	.word	0x00008004
 80011d8:	2000013c 	.word	0x2000013c
 80011dc:	40020044 	.word	0x40020044
 80011e0:	40010000 	.word	0x40010000

080011e4 <NMI_Handler>:
/*           Cortex-M0 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80011e4:	e7fe      	b.n	80011e4 <NMI_Handler>
 80011e6:	46c0      	nop			; (mov r8, r8)

080011e8 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80011e8:	e7fe      	b.n	80011e8 <HardFault_Handler>
 80011ea:	46c0      	nop			; (mov r8, r8)

080011ec <SVC_Handler>:

    /* USER CODE END SVC_IRQn 0 */
    /* USER CODE BEGIN SVC_IRQn 1 */

    /* USER CODE END SVC_IRQn 1 */
}
 80011ec:	4770      	bx	lr
 80011ee:	46c0      	nop			; (mov r8, r8)

080011f0 <PendSV_Handler>:
 80011f0:	4770      	bx	lr
 80011f2:	46c0      	nop			; (mov r8, r8)

080011f4 <SysTick_Handler>:
}

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80011f4:	b510      	push	{r4, lr}
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 80011f6:	f000 f8f3 	bl	80013e0 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 80011fa:	bd10      	pop	{r4, pc}

080011fc <DMA1_Channel1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel 1 interrupt.
 */
void DMA1_Channel1_IRQHandler(void) {
 80011fc:	b510      	push	{r4, lr}
    /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

    /* USER CODE END DMA1_Channel1_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_adc);
 80011fe:	4802      	ldr	r0, [pc, #8]	; (8001208 <DMA1_Channel1_IRQHandler+0xc>)
 8001200:	f000 fd42 	bl	8001c88 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

    /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001204:	bd10      	pop	{r4, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	200000f8 	.word	0x200000f8

0800120c <DMA1_Channel4_5_IRQHandler>:

/**
 * @brief This function handles DMA1 channel 4 and 5 interrupts.
 */
void DMA1_Channel4_5_IRQHandler(void) {
 800120c:	b510      	push	{r4, lr}
    /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

    /* USER CODE END DMA1_Channel4_5_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800120e:	4802      	ldr	r0, [pc, #8]	; (8001218 <DMA1_Channel4_5_IRQHandler+0xc>)
 8001210:	f000 fd3a 	bl	8001c88 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

    /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8001214:	bd10      	pop	{r4, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	2000013c 	.word	0x2000013c

0800121c <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 800121c:	b510      	push	{r4, lr}
    /* USER CODE BEGIN TIM2_IRQn 0 */

    /* USER CODE END TIM2_IRQn 0 */
    HAL_TIM_IRQHandler(&htim2);
 800121e:	4802      	ldr	r0, [pc, #8]	; (8001228 <TIM2_IRQHandler+0xc>)
 8001220:	f002 fe42 	bl	8003ea8 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM2_IRQn 1 */

    /* USER CODE END TIM2_IRQn 1 */
}
 8001224:	bd10      	pop	{r4, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	20000280 	.word	0x20000280

0800122c <I2C1_IRQHandler>:
 */
void I2C1_IRQHandler(void) {
    /* USER CODE BEGIN I2C1_IRQn 0 */

    /* USER CODE END I2C1_IRQn 0 */
    if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800122c:	4806      	ldr	r0, [pc, #24]	; (8001248 <I2C1_IRQHandler+0x1c>)
void I2C1_IRQHandler(void) {
 800122e:	b510      	push	{r4, lr}
    if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001230:	6803      	ldr	r3, [r0, #0]
 8001232:	699a      	ldr	r2, [r3, #24]
 8001234:	23e0      	movs	r3, #224	; 0xe0
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	421a      	tst	r2, r3
 800123a:	d002      	beq.n	8001242 <I2C1_IRQHandler+0x16>
        HAL_I2C_ER_IRQHandler(&hi2c1);
 800123c:	f001 f852 	bl	80022e4 <HAL_I2C_ER_IRQHandler>
        HAL_I2C_EV_IRQHandler(&hi2c1);
    }
    /* USER CODE BEGIN I2C1_IRQn 1 */

    /* USER CODE END I2C1_IRQn 1 */
}
 8001240:	bd10      	pop	{r4, pc}
        HAL_I2C_EV_IRQHandler(&hi2c1);
 8001242:	f000 fed1 	bl	8001fe8 <HAL_I2C_EV_IRQHandler>
}
 8001246:	e7fb      	b.n	8001240 <I2C1_IRQHandler+0x14>
 8001248:	20000180 	.word	0x20000180

0800124c <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 800124c:	b510      	push	{r4, lr}
    /* USER CODE BEGIN SPI1_IRQn 0 */

    /* USER CODE END SPI1_IRQn 0 */
    HAL_SPI_IRQHandler(&hspi1);
 800124e:	4802      	ldr	r0, [pc, #8]	; (8001258 <SPI1_IRQHandler+0xc>)
 8001250:	f002 f9ae 	bl	80035b0 <HAL_SPI_IRQHandler>
    /* USER CODE BEGIN SPI1_IRQn 1 */

    /* USER CODE END SPI1_IRQn 1 */
}
 8001254:	bd10      	pop	{r4, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	200001d4 	.word	0x200001d4

0800125c <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
 */
void USART1_IRQHandler(void) {
 800125c:	b510      	push	{r4, lr}
    /* USER CODE BEGIN USART1_IRQn 0 */

    /* USER CODE END USART1_IRQn 0 */
    HAL_UART_IRQHandler(&huart1);
 800125e:	4c07      	ldr	r4, [pc, #28]	; (800127c <USART1_IRQHandler+0x20>)
 8001260:	0020      	movs	r0, r4
 8001262:	f003 fa1d 	bl	80046a0 <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART1_IRQn 1 */

    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 8001266:	2210      	movs	r2, #16
 8001268:	6823      	ldr	r3, [r4, #0]
 800126a:	69d9      	ldr	r1, [r3, #28]
 800126c:	420a      	tst	r2, r1
 800126e:	d003      	beq.n	8001278 <USART1_IRQHandler+0x1c>
        __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001270:	621a      	str	r2, [r3, #32]
        p.uart_idle = 1;
 8001272:	4b03      	ldr	r3, [pc, #12]	; (8001280 <USART1_IRQHandler+0x24>)
 8001274:	3a0f      	subs	r2, #15
 8001276:	771a      	strb	r2, [r3, #28]
    }

    /* USER CODE END USART1_IRQn 1 */
}
 8001278:	bd10      	pop	{r4, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	200002c8 	.word	0x200002c8
 8001280:	20000350 	.word	0x20000350

08001284 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001284:	b570      	push	{r4, r5, r6, lr}
 8001286:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001288:	dd07      	ble.n	800129a <_read+0x16>
 800128a:	000c      	movs	r4, r1
 800128c:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 800128e:	e000      	b.n	8001292 <_read+0xe>
 8001290:	bf00      	nop
 8001292:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001294:	3401      	adds	r4, #1
 8001296:	42ac      	cmp	r4, r5
 8001298:	d1f9      	bne.n	800128e <_read+0xa>
  }

  return len;
}
 800129a:	0030      	movs	r0, r6
 800129c:	bd70      	pop	{r4, r5, r6, pc}
 800129e:	46c0      	nop			; (mov r8, r8)

080012a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012a0:	b570      	push	{r4, r5, r6, lr}
 80012a2:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a4:	dd07      	ble.n	80012b6 <_write+0x16>
 80012a6:	000c      	movs	r4, r1
 80012a8:	188d      	adds	r5, r1, r2
  {
    __io_putchar(*ptr++);
 80012aa:	7820      	ldrb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ac:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 80012ae:	f7ff fb21 	bl	80008f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b2:	42ac      	cmp	r4, r5
 80012b4:	d1f9      	bne.n	80012aa <_write+0xa>
  }
  return len;
}
 80012b6:	0030      	movs	r0, r6
 80012b8:	bd70      	pop	{r4, r5, r6, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)

080012bc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 80012bc:	2001      	movs	r0, #1
}
 80012be:	4240      	negs	r0, r0
 80012c0:	4770      	bx	lr
 80012c2:	46c0      	nop			; (mov r8, r8)

080012c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	019b      	lsls	r3, r3, #6
  return 0;
}
 80012c8:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80012ca:	604b      	str	r3, [r1, #4]
}
 80012cc:	4770      	bx	lr
 80012ce:	46c0      	nop			; (mov r8, r8)

080012d0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80012d0:	2001      	movs	r0, #1
 80012d2:	4770      	bx	lr

080012d4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80012d4:	2000      	movs	r0, #0
 80012d6:	4770      	bx	lr

080012d8 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <_sbrk+0x34>)
 80012da:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <_sbrk+0x38>)
{
 80012dc:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012de:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e0:	490c      	ldr	r1, [pc, #48]	; (8001314 <_sbrk+0x3c>)
{
 80012e2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80012e4:	6808      	ldr	r0, [r1, #0]
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d004      	beq.n	80012f4 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ea:	18c3      	adds	r3, r0, r3
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d806      	bhi.n	80012fe <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80012f0:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80012f2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80012f4:	4808      	ldr	r0, [pc, #32]	; (8001318 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 80012f6:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 80012f8:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d9f8      	bls.n	80012f0 <_sbrk+0x18>
    errno = ENOMEM;
 80012fe:	f004 f895 	bl	800542c <__errno>
 8001302:	230c      	movs	r3, #12
 8001304:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001306:	2001      	movs	r0, #1
 8001308:	4240      	negs	r0, r0
 800130a:	e7f2      	b.n	80012f2 <_sbrk+0x1a>
 800130c:	00000400 	.word	0x00000400
 8001310:	20001000 	.word	0x20001000
 8001314:	20000370 	.word	0x20000370
 8001318:	200004c8 	.word	0x200004c8

0800131c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800131c:	4770      	bx	lr
 800131e:	46c0      	nop			; (mov r8, r8)

08001320 <Reset_Handler>:
 8001320:	480d      	ldr	r0, [pc, #52]	; (8001358 <LoopForever+0x2>)
 8001322:	4685      	mov	sp, r0
 8001324:	f7ff fffa 	bl	800131c <SystemInit>
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <LoopForever+0x6>)
 800132a:	490d      	ldr	r1, [pc, #52]	; (8001360 <LoopForever+0xa>)
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <LoopForever+0xe>)
 800132e:	2300      	movs	r3, #0
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:
 8001332:	58d4      	ldr	r4, [r2, r3]
 8001334:	50c4      	str	r4, [r0, r3]
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:
 8001338:	18c4      	adds	r4, r0, r3
 800133a:	428c      	cmp	r4, r1
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <LoopForever+0x12>)
 8001340:	4c0a      	ldr	r4, [pc, #40]	; (800136c <LoopForever+0x16>)
 8001342:	2300      	movs	r3, #0
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:
 800134a:	42a2      	cmp	r2, r4
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>
 800134e:	f004 f873 	bl	8005438 <__libc_init_array>
 8001352:	f7ff fb45 	bl	80009e0 <main>

08001356 <LoopForever>:
 8001356:	e7fe      	b.n	8001356 <LoopForever>
 8001358:	20001000 	.word	0x20001000
 800135c:	20000000 	.word	0x20000000
 8001360:	20000068 	.word	0x20000068
 8001364:	08005e10 	.word	0x08005e10
 8001368:	20000068 	.word	0x20000068
 800136c:	200004c4 	.word	0x200004c4

08001370 <ADC1_IRQHandler>:
 8001370:	e7fe      	b.n	8001370 <ADC1_IRQHandler>
	...

08001374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b570      	push	{r4, r5, r6, lr}
 8001376:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001378:	20fa      	movs	r0, #250	; 0xfa
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_InitTick+0x40>)
 800137c:	0080      	lsls	r0, r0, #2
 800137e:	7819      	ldrb	r1, [r3, #0]
 8001380:	f7fe fec2 	bl	8000108 <__udivsi3>
 8001384:	4d0c      	ldr	r5, [pc, #48]	; (80013b8 <HAL_InitTick+0x44>)
 8001386:	0001      	movs	r1, r0
 8001388:	6828      	ldr	r0, [r5, #0]
 800138a:	f7fe febd 	bl	8000108 <__udivsi3>
 800138e:	f000 fbab 	bl	8001ae8 <HAL_SYSTICK_Config>
 8001392:	2800      	cmp	r0, #0
 8001394:	d10c      	bne.n	80013b0 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8001396:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001398:	2c03      	cmp	r4, #3
 800139a:	d900      	bls.n	800139e <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800139c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139e:	3802      	subs	r0, #2
 80013a0:	2200      	movs	r2, #0
 80013a2:	0021      	movs	r1, r4
 80013a4:	f000 fb62 	bl	8001a6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <HAL_InitTick+0x48>)
 80013aa:	2000      	movs	r0, #0
 80013ac:	601c      	str	r4, [r3, #0]
 80013ae:	e7f5      	b.n	800139c <HAL_InitTick+0x28>
    return HAL_ERROR;
 80013b0:	2001      	movs	r0, #1
 80013b2:	e7f3      	b.n	800139c <HAL_InitTick+0x28>
 80013b4:	20000004 	.word	0x20000004
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000008 	.word	0x20000008

080013c0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	2110      	movs	r1, #16
 80013c2:	4a06      	ldr	r2, [pc, #24]	; (80013dc <HAL_Init+0x1c>)
{
 80013c4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c6:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c8:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ca:	430b      	orrs	r3, r1
 80013cc:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ce:	f7ff ffd1 	bl	8001374 <HAL_InitTick>
  HAL_MspInit();
 80013d2:	f7ff fd15 	bl	8000e00 <HAL_MspInit>
}
 80013d6:	2000      	movs	r0, #0
 80013d8:	bd10      	pop	{r4, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	40022000 	.word	0x40022000

080013e0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80013e0:	4a03      	ldr	r2, [pc, #12]	; (80013f0 <HAL_IncTick+0x10>)
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <HAL_IncTick+0x14>)
 80013e4:	6811      	ldr	r1, [r2, #0]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	185b      	adds	r3, r3, r1
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	4770      	bx	lr
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	20000374 	.word	0x20000374
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013f8:	4b01      	ldr	r3, [pc, #4]	; (8001400 <HAL_GetTick+0x8>)
 80013fa:	6818      	ldr	r0, [r3, #0]
}
 80013fc:	4770      	bx	lr
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	20000374 	.word	0x20000374

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b570      	push	{r4, r5, r6, lr}
 8001406:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001408:	f7ff fff6 	bl	80013f8 <HAL_GetTick>
 800140c:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140e:	1c63      	adds	r3, r4, #1
 8001410:	d002      	beq.n	8001418 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <HAL_Delay+0x20>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001418:	f7ff ffee 	bl	80013f8 <HAL_GetTick>
 800141c:	1b40      	subs	r0, r0, r5
 800141e:	42a0      	cmp	r0, r4
 8001420:	d3fa      	bcc.n	8001418 <HAL_Delay+0x14>
  {
  }
}
 8001422:	bd70      	pop	{r4, r5, r6, pc}
 8001424:	20000004 	.word	0x20000004

08001428 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800142a:	2303      	movs	r3, #3
 800142c:	6802      	ldr	r2, [r0, #0]
{
 800142e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001430:	6891      	ldr	r1, [r2, #8]
 8001432:	400b      	ands	r3, r1
 8001434:	2b01      	cmp	r3, #1
 8001436:	d001      	beq.n	800143c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001438:	2000      	movs	r0, #0
}
 800143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800143c:	6811      	ldr	r1, [r2, #0]
 800143e:	420b      	tst	r3, r1
 8001440:	d00e      	beq.n	8001460 <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001442:	2705      	movs	r7, #5
 8001444:	6893      	ldr	r3, [r2, #8]
 8001446:	401f      	ands	r7, r3
 8001448:	2f01      	cmp	r7, #1
 800144a:	d00d      	beq.n	8001468 <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144c:	2210      	movs	r2, #16
 800144e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8001450:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001452:	4313      	orrs	r3, r2
 8001454:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001456:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001458:	3a0f      	subs	r2, #15
 800145a:	4313      	orrs	r3, r2
 800145c:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 800145e:	e7ec      	b.n	800143a <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001460:	68d3      	ldr	r3, [r2, #12]
 8001462:	041b      	lsls	r3, r3, #16
 8001464:	d5e8      	bpl.n	8001438 <ADC_Disable+0x10>
 8001466:	e7ec      	b.n	8001442 <ADC_Disable+0x1a>
      __HAL_ADC_DISABLE(hadc);
 8001468:	2102      	movs	r1, #2
 800146a:	6893      	ldr	r3, [r2, #8]
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800146c:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 800146e:	430b      	orrs	r3, r1
 8001470:	6093      	str	r3, [r2, #8]
 8001472:	2303      	movs	r3, #3
 8001474:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001476:	f7ff ffbf 	bl	80013f8 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800147a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800147c:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	421f      	tst	r7, r3
 8001482:	d0d9      	beq.n	8001438 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001484:	f7ff ffb8 	bl	80013f8 <HAL_GetTick>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001488:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800148a:	1b80      	subs	r0, r0, r6
 800148c:	2802      	cmp	r0, #2
 800148e:	d902      	bls.n	8001496 <ADC_Disable+0x6e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	4215      	tst	r5, r2
 8001494:	d103      	bne.n	800149e <ADC_Disable+0x76>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	421d      	tst	r5, r3
 800149a:	d1f3      	bne.n	8001484 <ADC_Disable+0x5c>
 800149c:	e7cc      	b.n	8001438 <ADC_Disable+0x10>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800149e:	2210      	movs	r2, #16
 80014a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          return HAL_ERROR;
 80014a2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a4:	4313      	orrs	r3, r2
 80014a6:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014aa:	432b      	orrs	r3, r5
 80014ac:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80014ae:	e7c4      	b.n	800143a <ADC_Disable+0x12>

080014b0 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80014b0:	2204      	movs	r2, #4
 80014b2:	6803      	ldr	r3, [r0, #0]
{
 80014b4:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80014b6:	6899      	ldr	r1, [r3, #8]
{
 80014b8:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80014ba:	420a      	tst	r2, r1
 80014bc:	d01d      	beq.n	80014fa <ADC_ConversionStop+0x4a>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014be:	6899      	ldr	r1, [r3, #8]
 80014c0:	420a      	tst	r2, r1
 80014c2:	d006      	beq.n	80014d2 <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80014c4:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014c6:	0792      	lsls	r2, r2, #30
 80014c8:	d403      	bmi.n	80014d2 <ADC_ConversionStop+0x22>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80014ca:	2110      	movs	r1, #16
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014d2:	f7ff ff91 	bl	80013f8 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014d6:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80014d8:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	075b      	lsls	r3, r3, #29
 80014de:	d50c      	bpl.n	80014fa <ADC_ConversionStop+0x4a>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014e0:	2504      	movs	r5, #4
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80014e2:	f7ff ff89 	bl	80013f8 <HAL_GetTick>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014e6:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80014e8:	1b80      	subs	r0, r0, r6
 80014ea:	2802      	cmp	r0, #2
 80014ec:	d902      	bls.n	80014f4 <ADC_ConversionStop+0x44>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	4215      	tst	r5, r2
 80014f2:	d104      	bne.n	80014fe <ADC_ConversionStop+0x4e>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	421d      	tst	r5, r3
 80014f8:	d1f3      	bne.n	80014e2 <ADC_ConversionStop+0x32>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014fa:	2000      	movs	r0, #0
}
 80014fc:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014fe:	2210      	movs	r2, #16
 8001500:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001502:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001504:	4313      	orrs	r3, r2
 8001506:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001508:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800150a:	3a0f      	subs	r2, #15
 800150c:	4313      	orrs	r3, r2
 800150e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001510:	e7f4      	b.n	80014fc <ADC_ConversionStop+0x4c>
 8001512:	46c0      	nop			; (mov r8, r8)

08001514 <ADC_Enable.constprop.0>:
  __IO uint32_t wait_loop_index = 0U;
 8001514:	2300      	movs	r3, #0
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8001516:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001518:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 800151a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 800151c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800151e:	6891      	ldr	r1, [r2, #8]
 8001520:	3303      	adds	r3, #3
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8001522:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001524:	400b      	ands	r3, r1
 8001526:	2b01      	cmp	r3, #1
 8001528:	d037      	beq.n	800159a <ADC_Enable.constprop.0+0x86>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800152a:	6891      	ldr	r1, [r2, #8]
 800152c:	4b23      	ldr	r3, [pc, #140]	; (80015bc <ADC_Enable.constprop.0+0xa8>)
 800152e:	4219      	tst	r1, r3
 8001530:	d129      	bne.n	8001586 <ADC_Enable.constprop.0+0x72>
    __HAL_ADC_ENABLE(hadc);
 8001532:	2101      	movs	r1, #1
 8001534:	6893      	ldr	r3, [r2, #8]
 8001536:	430b      	orrs	r3, r1
 8001538:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800153a:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <ADC_Enable.constprop.0+0xac>)
 800153c:	4921      	ldr	r1, [pc, #132]	; (80015c4 <ADC_Enable.constprop.0+0xb0>)
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	f7fe fde2 	bl	8000108 <__udivsi3>
 8001544:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8001546:	9b01      	ldr	r3, [sp, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <ADC_Enable.constprop.0+0x44>
      wait_loop_index--;
 800154c:	9b01      	ldr	r3, [sp, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001552:	9b01      	ldr	r3, [sp, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f9      	bne.n	800154c <ADC_Enable.constprop.0+0x38>
    tickstart = HAL_GetTick();
 8001558:	f7ff ff4e 	bl	80013f8 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800155c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800155e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001560:	681b      	ldr	r3, [r3, #0]
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001562:	2501      	movs	r5, #1
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001564:	07db      	lsls	r3, r3, #31
 8001566:	d40b      	bmi.n	8001580 <ADC_Enable.constprop.0+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001568:	f7ff ff46 	bl	80013f8 <HAL_GetTick>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800156c:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800156e:	1b80      	subs	r0, r0, r6
 8001570:	2802      	cmp	r0, #2
 8001572:	d902      	bls.n	800157a <ADC_Enable.constprop.0+0x66>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4215      	tst	r5, r2
 8001578:	d016      	beq.n	80015a8 <ADC_Enable.constprop.0+0x94>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	421d      	tst	r5, r3
 800157e:	d0f3      	beq.n	8001568 <ADC_Enable.constprop.0+0x54>
  return HAL_OK;
 8001580:	2000      	movs	r0, #0
}
 8001582:	b002      	add	sp, #8
 8001584:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001586:	2210      	movs	r2, #16
 8001588:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800158a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800158c:	4313      	orrs	r3, r2
 800158e:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001590:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001592:	3a0f      	subs	r2, #15
 8001594:	4313      	orrs	r3, r2
 8001596:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001598:	e7f3      	b.n	8001582 <ADC_Enable.constprop.0+0x6e>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800159a:	6811      	ldr	r1, [r2, #0]
 800159c:	420b      	tst	r3, r1
 800159e:	d1ef      	bne.n	8001580 <ADC_Enable.constprop.0+0x6c>
 80015a0:	68d3      	ldr	r3, [r2, #12]
 80015a2:	041b      	lsls	r3, r3, #16
 80015a4:	d4ec      	bmi.n	8001580 <ADC_Enable.constprop.0+0x6c>
 80015a6:	e7c0      	b.n	800152a <ADC_Enable.constprop.0+0x16>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a8:	2210      	movs	r2, #16
 80015aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          return HAL_ERROR;
 80015ac:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ae:	4313      	orrs	r3, r2
 80015b0:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015b4:	432b      	orrs	r3, r5
 80015b6:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80015b8:	e7e3      	b.n	8001582 <ADC_Enable.constprop.0+0x6e>
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	80000017 	.word	0x80000017
 80015c0:	20000000 	.word	0x20000000
 80015c4:	000f4240 	.word	0x000f4240

080015c8 <HAL_ADC_Init>:
{
 80015c8:	b570      	push	{r4, r5, r6, lr}
 80015ca:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80015cc:	d100      	bne.n	80015d0 <HAL_ADC_Init+0x8>
 80015ce:	e082      	b.n	80016d6 <HAL_ADC_Init+0x10e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d069      	beq.n	80016aa <HAL_ADC_Init+0xe2>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015d8:	06db      	lsls	r3, r3, #27
 80015da:	d460      	bmi.n	800169e <HAL_ADC_Init+0xd6>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80015dc:	6822      	ldr	r2, [r4, #0]
 80015de:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80015e0:	075b      	lsls	r3, r3, #29
 80015e2:	d45c      	bmi.n	800169e <HAL_ADC_Init+0xd6>
    ADC_STATE_CLR_SET(hadc->State,
 80015e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015e6:	4949      	ldr	r1, [pc, #292]	; (800170c <HAL_ADC_Init+0x144>)
 80015e8:	400b      	ands	r3, r1
 80015ea:	3106      	adds	r1, #6
 80015ec:	31ff      	adds	r1, #255	; 0xff
 80015ee:	430b      	orrs	r3, r1
 80015f0:	63a3      	str	r3, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 80015f2:	2303      	movs	r3, #3
 80015f4:	6891      	ldr	r1, [r2, #8]
 80015f6:	400b      	ands	r3, r1
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d05c      	beq.n	80016b6 <HAL_ADC_Init+0xee>
      MODIFY_REG(hadc->Instance->CFGR1,
 80015fc:	2118      	movs	r1, #24
 80015fe:	68d3      	ldr	r3, [r2, #12]
 8001600:	438b      	bics	r3, r1
 8001602:	68a1      	ldr	r1, [r4, #8]
 8001604:	430b      	orrs	r3, r1
 8001606:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001608:	6913      	ldr	r3, [r2, #16]
 800160a:	6861      	ldr	r1, [r4, #4]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	430b      	orrs	r3, r1
 8001612:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001614:	68d3      	ldr	r3, [r2, #12]
 8001616:	493e      	ldr	r1, [pc, #248]	; (8001710 <HAL_ADC_Init+0x148>)
 8001618:	400b      	ands	r3, r1
 800161a:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800161c:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800161e:	7e61      	ldrb	r1, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001620:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001622:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001624:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001626:	7ea0      	ldrb	r0, [r4, #26]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001628:	68e1      	ldr	r1, [r4, #12]
 800162a:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800162c:	0341      	lsls	r1, r0, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800162e:	430b      	orrs	r3, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001630:	2124      	movs	r1, #36	; 0x24
 8001632:	5c61      	ldrb	r1, [r4, r1]
 8001634:	0049      	lsls	r1, r1, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001636:	430b      	orrs	r3, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001638:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800163a:	3901      	subs	r1, #1
 800163c:	1e4d      	subs	r5, r1, #1
 800163e:	41a9      	sbcs	r1, r5
 8001640:	0309      	lsls	r1, r1, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001642:	430b      	orrs	r3, r1
 8001644:	6921      	ldr	r1, [r4, #16]
 8001646:	3902      	subs	r1, #2
 8001648:	424d      	negs	r5, r1
 800164a:	4169      	adcs	r1, r5
 800164c:	0089      	lsls	r1, r1, #2
 800164e:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001650:	7ee1      	ldrb	r1, [r4, #27]
 8001652:	2901      	cmp	r1, #1
 8001654:	d04b      	beq.n	80016ee <HAL_ADC_Init+0x126>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001656:	20c2      	movs	r0, #194	; 0xc2
 8001658:	69e1      	ldr	r1, [r4, #28]
 800165a:	30ff      	adds	r0, #255	; 0xff
 800165c:	4281      	cmp	r1, r0
 800165e:	d002      	beq.n	8001666 <HAL_ADC_Init+0x9e>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001660:	6a20      	ldr	r0, [r4, #32]
 8001662:	4301      	orrs	r1, r0
 8001664:	430b      	orrs	r3, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001666:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001668:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800166a:	4319      	orrs	r1, r3
 800166c:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800166e:	2180      	movs	r1, #128	; 0x80
 8001670:	0549      	lsls	r1, r1, #21
 8001672:	428d      	cmp	r5, r1
 8001674:	d026      	beq.n	80016c4 <HAL_ADC_Init+0xfc>
 8001676:	1e69      	subs	r1, r5, #1
 8001678:	2906      	cmp	r1, #6
 800167a:	d923      	bls.n	80016c4 <HAL_ADC_Init+0xfc>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800167c:	68d2      	ldr	r2, [r2, #12]
 800167e:	4925      	ldr	r1, [pc, #148]	; (8001714 <HAL_ADC_Init+0x14c>)
 8001680:	400a      	ands	r2, r1
 8001682:	429a      	cmp	r2, r3
 8001684:	d029      	beq.n	80016da <HAL_ADC_Init+0x112>
      ADC_STATE_CLR_SET(hadc->State,
 8001686:	2212      	movs	r2, #18
 8001688:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      tmp_hal_status = HAL_ERROR;
 800168a:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800168c:	4393      	bics	r3, r2
 800168e:	3a02      	subs	r2, #2
 8001690:	4313      	orrs	r3, r2
 8001692:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001694:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001696:	3a0f      	subs	r2, #15
 8001698:	4313      	orrs	r3, r2
 800169a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800169c:	e004      	b.n	80016a8 <HAL_ADC_Init+0xe0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800169e:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 80016a0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016a4:	4313      	orrs	r3, r2
 80016a6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80016a8:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Lock = HAL_UNLOCKED;
 80016aa:	2234      	movs	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80016ac:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 80016ae:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80016b0:	f7ff fbbe 	bl	8000e30 <HAL_ADC_MspInit>
 80016b4:	e78f      	b.n	80015d6 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80016b6:	6811      	ldr	r1, [r2, #0]
 80016b8:	420b      	tst	r3, r1
 80016ba:	d1ab      	bne.n	8001614 <HAL_ADC_Init+0x4c>
 80016bc:	68d3      	ldr	r3, [r2, #12]
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	d4a8      	bmi.n	8001614 <HAL_ADC_Init+0x4c>
 80016c2:	e79b      	b.n	80015fc <HAL_ADC_Init+0x34>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80016c4:	2107      	movs	r1, #7
 80016c6:	6950      	ldr	r0, [r2, #20]
 80016c8:	4388      	bics	r0, r1
 80016ca:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80016cc:	6950      	ldr	r0, [r2, #20]
 80016ce:	4029      	ands	r1, r5
 80016d0:	4301      	orrs	r1, r0
 80016d2:	6151      	str	r1, [r2, #20]
 80016d4:	e7d2      	b.n	800167c <HAL_ADC_Init+0xb4>
    return HAL_ERROR;
 80016d6:	2001      	movs	r0, #1
 80016d8:	e7e6      	b.n	80016a8 <HAL_ADC_Init+0xe0>
      ADC_CLEAR_ERRORCODE(hadc);
 80016da:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 80016dc:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80016de:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80016e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e2:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80016e4:	4393      	bics	r3, r2
 80016e6:	3a02      	subs	r2, #2
 80016e8:	4313      	orrs	r3, r2
 80016ea:	63a3      	str	r3, [r4, #56]	; 0x38
 80016ec:	e7dc      	b.n	80016a8 <HAL_ADC_Init+0xe0>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016ee:	2800      	cmp	r0, #0
 80016f0:	d103      	bne.n	80016fa <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	0249      	lsls	r1, r1, #9
 80016f6:	430b      	orrs	r3, r1
 80016f8:	e7ad      	b.n	8001656 <HAL_ADC_Init+0x8e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016fa:	2520      	movs	r5, #32
 80016fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016fe:	4328      	orrs	r0, r5
 8001700:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001702:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001704:	4301      	orrs	r1, r0
 8001706:	63e1      	str	r1, [r4, #60]	; 0x3c
 8001708:	e7a5      	b.n	8001656 <HAL_ADC_Init+0x8e>
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	fffffefd 	.word	0xfffffefd
 8001710:	fffe0219 	.word	0xfffe0219
 8001714:	833fffe7 	.word	0x833fffe7

08001718 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8001718:	2334      	movs	r3, #52	; 0x34
{ 
 800171a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800171c:	5cc2      	ldrb	r2, [r0, r3]
{ 
 800171e:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001720:	2a01      	cmp	r2, #1
 8001722:	d014      	beq.n	800174e <HAL_ADC_Stop+0x36>
 8001724:	2501      	movs	r5, #1
 8001726:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001728:	f7ff fec2 	bl	80014b0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800172c:	2800      	cmp	r0, #0
 800172e:	d003      	beq.n	8001738 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8001730:	2334      	movs	r3, #52	; 0x34
 8001732:	2200      	movs	r2, #0
 8001734:	54e2      	strb	r2, [r4, r3]
}
 8001736:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8001738:	0020      	movs	r0, r4
 800173a:	f7ff fe75 	bl	8001428 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800173e:	2800      	cmp	r0, #0
 8001740:	d1f6      	bne.n	8001730 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8001742:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001744:	4a03      	ldr	r2, [pc, #12]	; (8001754 <HAL_ADC_Stop+0x3c>)
 8001746:	4013      	ands	r3, r2
 8001748:	432b      	orrs	r3, r5
 800174a:	63a3      	str	r3, [r4, #56]	; 0x38
 800174c:	e7f0      	b.n	8001730 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800174e:	2002      	movs	r0, #2
 8001750:	e7f1      	b.n	8001736 <HAL_ADC_Stop+0x1e>
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	fffffefe 	.word	0xfffffefe

08001758 <HAL_ADC_Start_DMA>:
{
 8001758:	b5d0      	push	{r4, r6, r7, lr}
 800175a:	000e      	movs	r6, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800175c:	6801      	ldr	r1, [r0, #0]
{
 800175e:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001760:	688b      	ldr	r3, [r1, #8]
{
 8001762:	0017      	movs	r7, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001764:	075b      	lsls	r3, r3, #29
 8001766:	d435      	bmi.n	80017d4 <HAL_ADC_Start_DMA+0x7c>
    __HAL_LOCK(hadc);
 8001768:	2334      	movs	r3, #52	; 0x34
 800176a:	5cc2      	ldrb	r2, [r0, r3]
 800176c:	2a01      	cmp	r2, #1
 800176e:	d031      	beq.n	80017d4 <HAL_ADC_Start_DMA+0x7c>
 8001770:	2201      	movs	r2, #1
 8001772:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001774:	7e43      	ldrb	r3, [r0, #25]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d004      	beq.n	8001784 <HAL_ADC_Start_DMA+0x2c>
      tmp_hal_status = ADC_Enable(hadc);
 800177a:	f7ff fecb 	bl	8001514 <ADC_Enable.constprop.0>
    if (tmp_hal_status == HAL_OK)
 800177e:	2800      	cmp	r0, #0
 8001780:	d127      	bne.n	80017d2 <HAL_ADC_Start_DMA+0x7a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001782:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8001784:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_ADC_Start_DMA+0x80>)
 8001788:	401a      	ands	r2, r3
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4313      	orrs	r3, r2
 8001790:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 8001792:	2234      	movs	r2, #52	; 0x34
      ADC_CLEAR_ERRORCODE(hadc);
 8001794:	2300      	movs	r3, #0
 8001796:	63e3      	str	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8001798:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800179a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_ADC_Start_DMA+0x84>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800179e:	3a24      	subs	r2, #36	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017a0:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_ADC_Start_DMA+0x88>)
 80017a4:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_ADC_Start_DMA+0x8c>)
 80017a8:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017aa:	231c      	movs	r3, #28
 80017ac:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017ae:	684b      	ldr	r3, [r1, #4]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80017b4:	68cb      	ldr	r3, [r1, #12]
 80017b6:	3a0f      	subs	r2, #15
 80017b8:	4313      	orrs	r3, r2
 80017ba:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017bc:	0032      	movs	r2, r6
 80017be:	003b      	movs	r3, r7
 80017c0:	3140      	adds	r1, #64	; 0x40
 80017c2:	f000 f9df 	bl	8001b84 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80017c6:	2104      	movs	r1, #4
 80017c8:	2000      	movs	r0, #0
 80017ca:	6822      	ldr	r2, [r4, #0]
 80017cc:	6893      	ldr	r3, [r2, #8]
 80017ce:	430b      	orrs	r3, r1
 80017d0:	6093      	str	r3, [r2, #8]
}
 80017d2:	bdd0      	pop	{r4, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 80017d4:	2002      	movs	r0, #2
 80017d6:	e7fc      	b.n	80017d2 <HAL_ADC_Start_DMA+0x7a>
 80017d8:	fffff0fe 	.word	0xfffff0fe
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	08001865 	.word	0x08001865
 80017e4:	08001875 	.word	0x08001875

080017e8 <HAL_ADC_ConvCpltCallback>:
 80017e8:	4770      	bx	lr
 80017ea:	46c0      	nop			; (mov r8, r8)

080017ec <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017ec:	2150      	movs	r1, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80017f0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017f4:	4211      	tst	r1, r2
 80017f6:	d10e      	bne.n	8001816 <ADC_DMAConvCplt+0x2a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017fc:	0092      	lsls	r2, r2, #2
 80017fe:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001800:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001802:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	0109      	lsls	r1, r1, #4
 8001808:	68d0      	ldr	r0, [r2, #12]
 800180a:	4208      	tst	r0, r1
 800180c:	d007      	beq.n	800181e <ADC_DMAConvCplt+0x32>

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800180e:	0018      	movs	r0, r3
 8001810:	f7ff ffea 	bl	80017e8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001814:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4798      	blx	r3
}
 800181c:	e7fa      	b.n	8001814 <ADC_DMAConvCplt+0x28>
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800181e:	7e99      	ldrb	r1, [r3, #26]
 8001820:	2900      	cmp	r1, #0
 8001822:	d1f4      	bne.n	800180e <ADC_DMAConvCplt+0x22>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001824:	6811      	ldr	r1, [r2, #0]
 8001826:	0709      	lsls	r1, r1, #28
 8001828:	d5f1      	bpl.n	800180e <ADC_DMAConvCplt+0x22>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800182a:	6891      	ldr	r1, [r2, #8]
 800182c:	0749      	lsls	r1, r1, #29
 800182e:	d40b      	bmi.n	8001848 <ADC_DMAConvCplt+0x5c>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001830:	200c      	movs	r0, #12
 8001832:	6851      	ldr	r1, [r2, #4]
 8001834:	4381      	bics	r1, r0
 8001836:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800183a:	4908      	ldr	r1, [pc, #32]	; (800185c <ADC_DMAConvCplt+0x70>)
 800183c:	400a      	ands	r2, r1
 800183e:	3104      	adds	r1, #4
 8001840:	31ff      	adds	r1, #255	; 0xff
 8001842:	430a      	orrs	r2, r1
 8001844:	639a      	str	r2, [r3, #56]	; 0x38
 8001846:	e7e2      	b.n	800180e <ADC_DMAConvCplt+0x22>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001848:	2120      	movs	r1, #32
 800184a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800184c:	430a      	orrs	r2, r1
 800184e:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001852:	391f      	subs	r1, #31
 8001854:	430a      	orrs	r2, r1
 8001856:	63da      	str	r2, [r3, #60]	; 0x3c
 8001858:	e7d9      	b.n	800180e <ADC_DMAConvCplt+0x22>
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	fffffefe 	.word	0xfffffefe

08001860 <HAL_ADC_ConvHalfCpltCallback>:
 8001860:	4770      	bx	lr
 8001862:	46c0      	nop			; (mov r8, r8)

08001864 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001864:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001866:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001868:	f7ff fffa 	bl	8001860 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800186c:	bd10      	pop	{r4, pc}
 800186e:	46c0      	nop			; (mov r8, r8)

08001870 <HAL_ADC_ErrorCallback>:
 8001870:	4770      	bx	lr
 8001872:	46c0      	nop			; (mov r8, r8)

08001874 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001874:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001876:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001878:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800187a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800187c:	4313      	orrs	r3, r2
 800187e:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001880:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001882:	3a3c      	subs	r2, #60	; 0x3c
 8001884:	4313      	orrs	r3, r2
 8001886:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001888:	f7ff fff2 	bl	8001870 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800188c:	bd10      	pop	{r4, pc}
 800188e:	46c0      	nop			; (mov r8, r8)

08001890 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001890:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8001892:	2234      	movs	r2, #52	; 0x34
{
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001896:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001898:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800189a:	5c83      	ldrb	r3, [r0, r2]
{
 800189c:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800189e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d060      	beq.n	8001966 <HAL_ADC_ConfigChannel+0xd6>
 80018a4:	2301      	movs	r3, #1
 80018a6:	5483      	strb	r3, [r0, r2]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018a8:	6805      	ldr	r5, [r0, #0]
 80018aa:	68aa      	ldr	r2, [r5, #8]
 80018ac:	0752      	lsls	r2, r2, #29
 80018ae:	d509      	bpl.n	80018c4 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b0:	2220      	movs	r2, #32
 80018b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80018b4:	4313      	orrs	r3, r2
 80018b6:	6383      	str	r3, [r0, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 80018b8:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80018ba:	2334      	movs	r3, #52	; 0x34
 80018bc:	2200      	movs	r2, #0
 80018be:	54e2      	strb	r2, [r4, r3]
}
 80018c0:	b003      	add	sp, #12
 80018c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 80018c4:	4a36      	ldr	r2, [pc, #216]	; (80019a0 <HAL_ADC_ConfigChannel+0x110>)
 80018c6:	6848      	ldr	r0, [r1, #4]
 80018c8:	4290      	cmp	r0, r2
 80018ca:	d030      	beq.n	800192e <HAL_ADC_ConfigChannel+0x9e>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80018cc:	680a      	ldr	r2, [r1, #0]
 80018ce:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80018d0:	4093      	lsls	r3, r2
 80018d2:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018d4:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80018d6:	4338      	orrs	r0, r7
 80018d8:	62a8      	str	r0, [r5, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018da:	055b      	lsls	r3, r3, #21
 80018dc:	429e      	cmp	r6, r3
 80018de:	d00f      	beq.n	8001900 <HAL_ADC_ConfigChannel+0x70>
 80018e0:	3e01      	subs	r6, #1
 80018e2:	2e06      	cmp	r6, #6
 80018e4:	d90c      	bls.n	8001900 <HAL_ADC_ConfigChannel+0x70>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80018e6:	2307      	movs	r3, #7
 80018e8:	6888      	ldr	r0, [r1, #8]
 80018ea:	6969      	ldr	r1, [r5, #20]
 80018ec:	4019      	ands	r1, r3
 80018ee:	4288      	cmp	r0, r1
 80018f0:	d006      	beq.n	8001900 <HAL_ADC_ConfigChannel+0x70>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80018f2:	6969      	ldr	r1, [r5, #20]
 80018f4:	4399      	bics	r1, r3
 80018f6:	6169      	str	r1, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80018f8:	6969      	ldr	r1, [r5, #20]
 80018fa:	4003      	ands	r3, r0
 80018fc:	430b      	orrs	r3, r1
 80018fe:	616b      	str	r3, [r5, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001900:	0013      	movs	r3, r2
 8001902:	3b10      	subs	r3, #16
 8001904:	2b02      	cmp	r3, #2
 8001906:	d810      	bhi.n	800192a <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001908:	4926      	ldr	r1, [pc, #152]	; (80019a4 <HAL_ADC_ConfigChannel+0x114>)
 800190a:	680b      	ldr	r3, [r1, #0]
 800190c:	2a10      	cmp	r2, #16
 800190e:	d02e      	beq.n	800196e <HAL_ADC_ConfigChannel+0xde>
 8001910:	3a11      	subs	r2, #17
 8001912:	1e50      	subs	r0, r2, #1
 8001914:	4182      	sbcs	r2, r0
 8001916:	20c0      	movs	r0, #192	; 0xc0
 8001918:	4252      	negs	r2, r2
 800191a:	0400      	lsls	r0, r0, #16
 800191c:	4002      	ands	r2, r0
 800191e:	2080      	movs	r0, #128	; 0x80
 8001920:	03c0      	lsls	r0, r0, #15
 8001922:	4684      	mov	ip, r0
 8001924:	4462      	add	r2, ip
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800192a:	2000      	movs	r0, #0
 800192c:	e7c5      	b.n	80018ba <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800192e:	680a      	ldr	r2, [r1, #0]
 8001930:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001932:	4093      	lsls	r3, r2
 8001934:	4398      	bics	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001936:	0013      	movs	r3, r2
 8001938:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800193a:	62a8      	str	r0, [r5, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800193c:	2b02      	cmp	r3, #2
 800193e:	d8f4      	bhi.n	800192a <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001940:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_ADC_ConfigChannel+0x114>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2a10      	cmp	r2, #16
 8001946:	d010      	beq.n	800196a <HAL_ADC_ConfigChannel+0xda>
 8001948:	3a11      	subs	r2, #17
 800194a:	4251      	negs	r1, r2
 800194c:	414a      	adcs	r2, r1
 800194e:	21c0      	movs	r1, #192	; 0xc0
 8001950:	4252      	negs	r2, r2
 8001952:	0409      	lsls	r1, r1, #16
 8001954:	400a      	ands	r2, r1
 8001956:	4914      	ldr	r1, [pc, #80]	; (80019a8 <HAL_ADC_ConfigChannel+0x118>)
 8001958:	468c      	mov	ip, r1
 800195a:	4462      	add	r2, ip
 800195c:	401a      	ands	r2, r3
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_ADC_ConfigChannel+0x114>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001960:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	e7a9      	b.n	80018ba <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 8001966:	2002      	movs	r0, #2
 8001968:	e7aa      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <HAL_ADC_ConfigChannel+0x11c>)
 800196c:	e7f6      	b.n	800195c <HAL_ADC_ConfigChannel+0xcc>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	0412      	lsls	r2, r2, #16
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_ADC_ConfigChannel+0x120>)
 8001978:	490e      	ldr	r1, [pc, #56]	; (80019b4 <HAL_ADC_ConfigChannel+0x124>)
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	f7fe fbc4 	bl	8000108 <__udivsi3>
 8001980:	0083      	lsls	r3, r0, #2
 8001982:	181b      	adds	r3, r3, r0
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001988:	9b01      	ldr	r3, [sp, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0cd      	beq.n	800192a <HAL_ADC_ConfigChannel+0x9a>
            wait_loop_index--;
 800198e:	9b01      	ldr	r3, [sp, #4]
 8001990:	3b01      	subs	r3, #1
 8001992:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001994:	9b01      	ldr	r3, [sp, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f9      	bne.n	800198e <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800199a:	2000      	movs	r0, #0
 800199c:	e78d      	b.n	80018ba <HAL_ADC_ConfigChannel+0x2a>
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	00001001 	.word	0x00001001
 80019a4:	40012708 	.word	0x40012708
 80019a8:	feffffff 	.word	0xfeffffff
 80019ac:	ff7fffff 	.word	0xff7fffff
 80019b0:	20000000 	.word	0x20000000
 80019b4:	000f4240 	.word	0x000f4240

080019b8 <HAL_ADCEx_Calibration_Start>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019b8:	2334      	movs	r3, #52	; 0x34
{
 80019ba:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80019bc:	5cc2      	ldrb	r2, [r0, r3]
{
 80019be:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80019c0:	2a01      	cmp	r2, #1
 80019c2:	d04e      	beq.n	8001a62 <HAL_ADCEx_Calibration_Start+0xaa>
 80019c4:	2201      	movs	r2, #1
 80019c6:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019c8:	6803      	ldr	r3, [r0, #0]
 80019ca:	3202      	adds	r2, #2
 80019cc:	6899      	ldr	r1, [r3, #8]
 80019ce:	400a      	ands	r2, r1
 80019d0:	2a01      	cmp	r2, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_ADCEx_Calibration_Start+0x28>
 80019d4:	6819      	ldr	r1, [r3, #0]
 80019d6:	420a      	tst	r2, r1
 80019d8:	d12e      	bne.n	8001a38 <HAL_ADCEx_Calibration_Start+0x80>
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	0412      	lsls	r2, r2, #16
 80019de:	d42b      	bmi.n	8001a38 <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80019e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80019e2:	4921      	ldr	r1, [pc, #132]	; (8001a68 <HAL_ADCEx_Calibration_Start+0xb0>)
 80019e4:	400a      	ands	r2, r1
 80019e6:	3106      	adds	r1, #6
 80019e8:	31ff      	adds	r1, #255	; 0xff
 80019ea:	430a      	orrs	r2, r1
 80019ec:	63a2      	str	r2, [r4, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80019ee:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	3101      	adds	r1, #1
 80019f4:	438a      	bics	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80019f8:	2280      	movs	r2, #128	; 0x80
 80019fa:	6899      	ldr	r1, [r3, #8]
 80019fc:	0612      	lsls	r2, r2, #24
 80019fe:	430a      	orrs	r2, r1
 8001a00:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001a02:	f7ff fcf9 	bl	80013f8 <HAL_GetTick>
 8001a06:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	2a00      	cmp	r2, #0
 8001a0e:	da1c      	bge.n	8001a4a <HAL_ADCEx_Calibration_Start+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a10:	f7ff fcf2 	bl	80013f8 <HAL_GetTick>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a14:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a16:	1b40      	subs	r0, r0, r5
 8001a18:	2802      	cmp	r0, #2
 8001a1a:	d9f6      	bls.n	8001a0a <HAL_ADCEx_Calibration_Start+0x52>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	2a00      	cmp	r2, #0
 8001a20:	daf3      	bge.n	8001a0a <HAL_ADCEx_Calibration_Start+0x52>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001a22:	2212      	movs	r2, #18
 8001a24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);

          return HAL_ERROR;
 8001a26:	2001      	movs	r0, #1
          ADC_STATE_CLR_SET(hadc->State,
 8001a28:	4393      	bics	r3, r2
 8001a2a:	3a02      	subs	r2, #2
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	63a3      	str	r3, [r4, #56]	; 0x38
          __HAL_UNLOCK(hadc);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2334      	movs	r3, #52	; 0x34
 8001a34:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8001a36:	e007      	b.n	8001a48 <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a38:	2220      	movs	r2, #32
    
    tmp_hal_status = HAL_ERROR;
 8001a3a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a42:	2334      	movs	r3, #52	; 0x34
 8001a44:	2200      	movs	r2, #0
 8001a46:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8001a48:	bd70      	pop	{r4, r5, r6, pc}
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001a4a:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001a4c:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001a4e:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001a50:	430e      	orrs	r6, r1
 8001a52:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8001a54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a56:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8001a58:	4393      	bics	r3, r2
 8001a5a:	3a02      	subs	r2, #2
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	63a3      	str	r3, [r4, #56]	; 0x38
 8001a60:	e7ef      	b.n	8001a42 <HAL_ADCEx_Calibration_Start+0x8a>
  __HAL_LOCK(hadc);
 8001a62:	2002      	movs	r0, #2
 8001a64:	e7f0      	b.n	8001a48 <HAL_ADCEx_Calibration_Start+0x90>
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	fffffefd 	.word	0xfffffefd

08001a6c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	db14      	blt.n	8001a9c <HAL_NVIC_SetPriority+0x30>
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a74:	2203      	movs	r2, #3
 8001a76:	469c      	mov	ip, r3
 8001a78:	23ff      	movs	r3, #255	; 0xff
 8001a7a:	0884      	lsrs	r4, r0, #2
 8001a7c:	4002      	ands	r2, r0
 8001a7e:	0018      	movs	r0, r3
 8001a80:	26c0      	movs	r6, #192	; 0xc0
 8001a82:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a84:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a86:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a88:	400b      	ands	r3, r1
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	00a4      	lsls	r4, r4, #2
 8001a8e:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a90:	00b6      	lsls	r6, r6, #2
 8001a92:	59a5      	ldr	r5, [r4, r6]
 8001a94:	4385      	bics	r5, r0
 8001a96:	432b      	orrs	r3, r5
 8001a98:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001a9a:	bd70      	pop	{r4, r5, r6, pc}
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <HAL_NVIC_SetPriority+0x60>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	4694      	mov	ip, r2
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	4003      	ands	r3, r0
 8001aa6:	4010      	ands	r0, r2
 8001aa8:	32fc      	adds	r2, #252	; 0xfc
 8001aaa:	0015      	movs	r5, r2
 8001aac:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001aae:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ab0:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ab2:	400a      	ands	r2, r1
 8001ab4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ab6:	3b08      	subs	r3, #8
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4463      	add	r3, ip
 8001abe:	69dc      	ldr	r4, [r3, #28]
 8001ac0:	43ac      	bics	r4, r5
 8001ac2:	4322      	orrs	r2, r4
 8001ac4:	61da      	str	r2, [r3, #28]
 8001ac6:	e7e8      	b.n	8001a9a <HAL_NVIC_SetPriority+0x2e>
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	db05      	blt.n	8001ae0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad4:	221f      	movs	r2, #31
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	4002      	ands	r2, r0
 8001ada:	4093      	lsls	r3, r2
 8001adc:	4a01      	ldr	r2, [pc, #4]	; (8001ae4 <HAL_NVIC_EnableIRQ+0x14>)
 8001ade:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ae0:	4770      	bx	lr
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	2280      	movs	r2, #128	; 0x80
 8001aea:	1e43      	subs	r3, r0, #1
 8001aec:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aee:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d20e      	bcs.n	8001b12 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af4:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af8:	4807      	ldr	r0, [pc, #28]	; (8001b18 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001afc:	6a03      	ldr	r3, [r0, #32]
 8001afe:	0609      	lsls	r1, r1, #24
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	430b      	orrs	r3, r1
 8001b06:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0a:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	3307      	adds	r3, #7
 8001b10:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001b12:	4770      	bx	lr
 8001b14:	e000e010 	.word	0xe000e010
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b570      	push	{r4, r5, r6, lr}
 8001b1e:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001b20:	d027      	beq.n	8001b72 <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b22:	2521      	movs	r5, #33	; 0x21
 8001b24:	2302      	movs	r3, #2
 8001b26:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b28:	6800      	ldr	r0, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8001b2c:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b2e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b30:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8001b32:	6863      	ldr	r3, [r4, #4]
 8001b34:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b36:	68e1      	ldr	r1, [r4, #12]
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	6921      	ldr	r1, [r4, #16]
 8001b3c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b3e:	6961      	ldr	r1, [r4, #20]
 8001b40:	430b      	orrs	r3, r1
 8001b42:	69a1      	ldr	r1, [r4, #24]
 8001b44:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b46:	69e1      	ldr	r1, [r4, #28]
 8001b48:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8001b4a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b4c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_DMA_Init+0x60>)
 8001b50:	2114      	movs	r1, #20
 8001b52:	469c      	mov	ip, r3
 8001b54:	4460      	add	r0, ip
 8001b56:	f7fe fad7 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8001b5c:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8001b5e:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b60:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b62:	0080      	lsls	r0, r0, #2
 8001b64:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8001b66:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b68:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8001b6c:	321f      	adds	r2, #31
 8001b6e:	54a3      	strb	r3, [r4, r2]
}
 8001b70:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001b72:	2001      	movs	r0, #1
 8001b74:	e7fc      	b.n	8001b70 <HAL_DMA_Init+0x54>
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	ffffc00f 	.word	0xffffc00f
 8001b7c:	bffdfff8 	.word	0xbffdfff8
 8001b80:	40020000 	.word	0x40020000

08001b84 <HAL_DMA_Start_IT>:
{
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001b86:	2420      	movs	r4, #32
 8001b88:	5d05      	ldrb	r5, [r0, r4]
 8001b8a:	2d01      	cmp	r5, #1
 8001b8c:	d037      	beq.n	8001bfe <HAL_DMA_Start_IT+0x7a>
 8001b8e:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8001b90:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 8001b92:	5505      	strb	r5, [r0, r4]
  if (HAL_DMA_STATE_READY == hdma->State)
 8001b94:	5dc5      	ldrb	r5, [r0, r7]
 8001b96:	b2ee      	uxtb	r6, r5
 8001b98:	2d01      	cmp	r5, #1
 8001b9a:	d003      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x20>
    __HAL_UNLOCK(hdma);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	5503      	strb	r3, [r0, r4]
    status = HAL_BUSY;
 8001ba0:	2002      	movs	r0, #2
}
 8001ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ba4:	3c1e      	subs	r4, #30
 8001ba6:	55c4      	strb	r4, [r0, r7]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba8:	2400      	movs	r4, #0
 8001baa:	6384      	str	r4, [r0, #56]	; 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bac:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bae:	6c07      	ldr	r7, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bb0:	6825      	ldr	r5, [r4, #0]
 8001bb2:	43b5      	bics	r5, r6
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bb4:	40be      	lsls	r6, r7
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bb6:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bb8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001bba:	606e      	str	r6, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 8001bbc:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bbe:	6843      	ldr	r3, [r0, #4]
 8001bc0:	2b10      	cmp	r3, #16
 8001bc2:	d00e      	beq.n	8001be2 <HAL_DMA_Start_IT+0x5e>
    if (NULL != hdma->XferHalfCpltCallback)
 8001bc4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = SrcAddress;
 8001bc6:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bc8:	60e2      	str	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00e      	beq.n	8001bec <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bce:	220e      	movs	r2, #14
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bda:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	6023      	str	r3, [r4, #0]
 8001be0:	e7df      	b.n	8001ba2 <HAL_DMA_Start_IT+0x1e>
    if (NULL != hdma->XferHalfCpltCallback)
 8001be2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8001be4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001be6:	60e1      	str	r1, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f0      	bne.n	8001bce <HAL_DMA_Start_IT+0x4a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001bec:	220a      	movs	r2, #10
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	3a06      	subs	r2, #6
 8001bf8:	4393      	bics	r3, r2
 8001bfa:	6023      	str	r3, [r4, #0]
 8001bfc:	e7eb      	b.n	8001bd6 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8001bfe:	2002      	movs	r0, #2
 8001c00:	e7cf      	b.n	8001ba2 <HAL_DMA_Start_IT+0x1e>
 8001c02:	46c0      	nop			; (mov r8, r8)

08001c04 <HAL_DMA_Abort>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c04:	2221      	movs	r2, #33	; 0x21
{
 8001c06:	b530      	push	{r4, r5, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c08:	5c81      	ldrb	r1, [r0, r2]
{
 8001c0a:	0003      	movs	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c0c:	2902      	cmp	r1, #2
 8001c0e:	d006      	beq.n	8001c1e <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c10:	3a1d      	subs	r2, #29
 8001c12:	6382      	str	r2, [r0, #56]	; 0x38
    return HAL_ERROR;
 8001c14:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001c16:	2220      	movs	r2, #32
 8001c18:	2100      	movs	r1, #0
 8001c1a:	5499      	strb	r1, [r3, r2]
}
 8001c1c:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c1e:	240e      	movs	r4, #14
 8001c20:	6801      	ldr	r1, [r0, #0]
 8001c22:	6808      	ldr	r0, [r1, #0]
 8001c24:	43a0      	bics	r0, r4
 8001c26:	6008      	str	r0, [r1, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c28:	2001      	movs	r0, #1
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c2a:	0005      	movs	r5, r0
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c2c:	680c      	ldr	r4, [r1, #0]
 8001c2e:	4384      	bics	r4, r0
 8001c30:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c32:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001c34:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001c36:	40a5      	lsls	r5, r4
 8001c38:	604d      	str	r5, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8001c3a:	5498      	strb	r0, [r3, r2]
  return HAL_OK;
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	e7ea      	b.n	8001c16 <HAL_DMA_Abort+0x12>

08001c40 <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c40:	2321      	movs	r3, #33	; 0x21
{
 8001c42:	b570      	push	{r4, r5, r6, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c44:	5cc2      	ldrb	r2, [r0, r3]
 8001c46:	2a02      	cmp	r2, #2
 8001c48:	d003      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4a:	3b1d      	subs	r3, #29
 8001c4c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001c4e:	2001      	movs	r0, #1
}
 8001c50:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c52:	240e      	movs	r4, #14
 8001c54:	6802      	ldr	r2, [r0, #0]
 8001c56:	6811      	ldr	r1, [r2, #0]
 8001c58:	43a1      	bics	r1, r4
 8001c5a:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c5c:	2101      	movs	r1, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c5e:	000d      	movs	r5, r1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c60:	6814      	ldr	r4, [r2, #0]
 8001c62:	438c      	bics	r4, r1
 8001c64:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c66:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001c68:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001c6a:	40a5      	lsls	r5, r4
 8001c6c:	6055      	str	r5, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001c6e:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2320      	movs	r3, #32
 8001c74:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8001c76:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 8001c7c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001c7e:	2000      	movs	r0, #0
 8001c80:	e7e6      	b.n	8001c50 <HAL_DMA_Abort_IT+0x10>
 8001c82:	2000      	movs	r0, #0
 8001c84:	e7e4      	b.n	8001c50 <HAL_DMA_Abort_IT+0x10>
 8001c86:	46c0      	nop			; (mov r8, r8)

08001c88 <HAL_DMA_IRQHandler>:
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c88:	2104      	movs	r1, #4
{
 8001c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c8c:	000c      	movs	r4, r1
 8001c8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c90:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c92:	409c      	lsls	r4, r3
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c94:	683a      	ldr	r2, [r7, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001c96:	6806      	ldr	r6, [r0, #0]
 8001c98:	6835      	ldr	r5, [r6, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c9a:	4222      	tst	r2, r4
 8001c9c:	d00d      	beq.n	8001cba <HAL_DMA_IRQHandler+0x32>
 8001c9e:	4229      	tst	r1, r5
 8001ca0:	d00b      	beq.n	8001cba <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ca2:	6833      	ldr	r3, [r6, #0]
 8001ca4:	069b      	lsls	r3, r3, #26
 8001ca6:	d402      	bmi.n	8001cae <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ca8:	6833      	ldr	r3, [r6, #0]
 8001caa:	438b      	bics	r3, r1
 8001cac:	6033      	str	r3, [r6, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8001cae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001cb0:	607c      	str	r4, [r7, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d000      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 8001cb6:	4798      	blx	r3
}
 8001cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001cba:	2102      	movs	r1, #2
 8001cbc:	000c      	movs	r4, r1
 8001cbe:	409c      	lsls	r4, r3
 8001cc0:	4222      	tst	r2, r4
 8001cc2:	d014      	beq.n	8001cee <HAL_DMA_IRQHandler+0x66>
 8001cc4:	4229      	tst	r1, r5
 8001cc6:	d012      	beq.n	8001cee <HAL_DMA_IRQHandler+0x66>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cc8:	6833      	ldr	r3, [r6, #0]
 8001cca:	069b      	lsls	r3, r3, #26
 8001ccc:	d406      	bmi.n	8001cdc <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001cce:	220a      	movs	r2, #10
 8001cd0:	6833      	ldr	r3, [r6, #0]
 8001cd2:	4393      	bics	r3, r2
 8001cd4:	6033      	str	r3, [r6, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	2321      	movs	r3, #33	; 0x21
 8001cd8:	3a09      	subs	r2, #9
 8001cda:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001cdc:	2320      	movs	r3, #32
 8001cde:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001ce0:	607c      	str	r4, [r7, #4]
    __HAL_UNLOCK(hdma);
 8001ce2:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 8001ce4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0e6      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 8001cea:	4798      	blx	r3
 8001cec:	e7e4      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x30>
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001cee:	2108      	movs	r1, #8
 8001cf0:	000c      	movs	r4, r1
 8001cf2:	409c      	lsls	r4, r3
 8001cf4:	4222      	tst	r2, r4
 8001cf6:	d0df      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x30>
 8001cf8:	4229      	tst	r1, r5
 8001cfa:	d0dd      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cfc:	6832      	ldr	r2, [r6, #0]
 8001cfe:	3106      	adds	r1, #6
 8001d00:	438a      	bics	r2, r1
 8001d02:	6032      	str	r2, [r6, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d04:	2201      	movs	r2, #1
 8001d06:	0011      	movs	r1, r2
 8001d08:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d0c:	6079      	str	r1, [r7, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d0e:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001d10:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001d12:	2200      	movs	r2, #0
 8001d14:	3b01      	subs	r3, #1
 8001d16:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8001d18:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0cc      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 8001d1e:	4798      	blx	r3
 8001d20:	e7ca      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x30>
 8001d22:	46c0      	nop			; (mov r8, r8)

08001d24 <HAL_DMA_GetState>:
  return hdma->State;
 8001d24:	2321      	movs	r3, #33	; 0x21
 8001d26:	5cc0      	ldrb	r0, [r0, r3]
 8001d28:	b2c0      	uxtb	r0, r0
}
 8001d2a:	4770      	bx	lr

08001d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	46de      	mov	lr, fp
 8001d30:	4657      	mov	r7, sl
 8001d32:	464e      	mov	r6, r9
 8001d34:	4645      	mov	r5, r8
 8001d36:	b5e0      	push	{r5, r6, r7, lr}
 8001d38:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3a:	6809      	ldr	r1, [r1, #0]
 8001d3c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001d3e:	2300      	movs	r3, #0
{
 8001d40:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d42:	2900      	cmp	r1, #0
 8001d44:	d100      	bne.n	8001d48 <HAL_GPIO_Init+0x1c>
 8001d46:	e0d0      	b.n	8001eea <HAL_GPIO_Init+0x1be>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d48:	4c72      	ldr	r4, [pc, #456]	; (8001f14 <HAL_GPIO_Init+0x1e8>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d4a:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4c:	46a3      	mov	fp, r4
 8001d4e:	e064      	b.n	8001e1a <HAL_GPIO_Init+0xee>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d50:	4665      	mov	r5, ip
 8001d52:	2d03      	cmp	r5, #3
 8001d54:	d000      	beq.n	8001d58 <HAL_GPIO_Init+0x2c>
 8001d56:	e0b6      	b.n	8001ec6 <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d58:	4666      	mov	r6, ip
 8001d5a:	4096      	lsls	r6, r2
 8001d5c:	43f5      	mvns	r5, r6
 8001d5e:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 8001d60:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d62:	9d02      	ldr	r5, [sp, #8]
 8001d64:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d66:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d68:	25c0      	movs	r5, #192	; 0xc0
 8001d6a:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 8001d6c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d6e:	422c      	tst	r4, r5
 8001d70:	d04d      	beq.n	8001e0e <HAL_GPIO_Init+0xe2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	465d      	mov	r5, fp
 8001d74:	2601      	movs	r6, #1
 8001d76:	465f      	mov	r7, fp
 8001d78:	69ad      	ldr	r5, [r5, #24]
 8001d7a:	4335      	orrs	r5, r6
 8001d7c:	61bd      	str	r5, [r7, #24]
 8001d7e:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d80:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	4035      	ands	r5, r6
 8001d84:	4e64      	ldr	r6, [pc, #400]	; (8001f18 <HAL_GPIO_Init+0x1ec>)
 8001d86:	9505      	str	r5, [sp, #20]
 8001d88:	46b4      	mov	ip, r6
 8001d8a:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d8c:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d8e:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d90:	00bf      	lsls	r7, r7, #2
 8001d92:	00ad      	lsls	r5, r5, #2
 8001d94:	4465      	add	r5, ip
 8001d96:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d98:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d9a:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d9c:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d9e:	4666      	mov	r6, ip
 8001da0:	40b7      	lsls	r7, r6
 8001da2:	003e      	movs	r6, r7
 8001da4:	464f      	mov	r7, r9
 8001da6:	43b7      	bics	r7, r6
 8001da8:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001daa:	2790      	movs	r7, #144	; 0x90
 8001dac:	05ff      	lsls	r7, r7, #23
 8001dae:	42b8      	cmp	r0, r7
 8001db0:	d00e      	beq.n	8001dd0 <HAL_GPIO_Init+0xa4>
 8001db2:	4f5a      	ldr	r7, [pc, #360]	; (8001f1c <HAL_GPIO_Init+0x1f0>)
 8001db4:	42b8      	cmp	r0, r7
 8001db6:	d100      	bne.n	8001dba <HAL_GPIO_Init+0x8e>
 8001db8:	e09e      	b.n	8001ef8 <HAL_GPIO_Init+0x1cc>
 8001dba:	4f59      	ldr	r7, [pc, #356]	; (8001f20 <HAL_GPIO_Init+0x1f4>)
 8001dbc:	42b8      	cmp	r0, r7
 8001dbe:	d100      	bne.n	8001dc2 <HAL_GPIO_Init+0x96>
 8001dc0:	e0a1      	b.n	8001f06 <HAL_GPIO_Init+0x1da>
 8001dc2:	4666      	mov	r6, ip
 8001dc4:	2705      	movs	r7, #5
 8001dc6:	40b7      	lsls	r7, r6
 8001dc8:	003e      	movs	r6, r7
 8001dca:	464f      	mov	r7, r9
 8001dcc:	4337      	orrs	r7, r6
 8001dce:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dd0:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dd2:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dd4:	60ae      	str	r6, [r5, #8]
        temp = EXTI->RTSR;
 8001dd6:	4d53      	ldr	r5, [pc, #332]	; (8001f24 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8001dd8:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dda:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8001ddc:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 8001dde:	68ad      	ldr	r5, [r5, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001de0:	423c      	tst	r4, r7
 8001de2:	d17f      	bne.n	8001ee4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(iocurrent);
 8001de4:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001de6:	4f4f      	ldr	r7, [pc, #316]	; (8001f24 <HAL_GPIO_Init+0x1f8>)
 8001de8:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 8001dea:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dec:	02a7      	lsls	r7, r4, #10
 8001dee:	d476      	bmi.n	8001ede <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 8001df0:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001df2:	4f4c      	ldr	r7, [pc, #304]	; (8001f24 <HAL_GPIO_Init+0x1f8>)
 8001df4:	60fd      	str	r5, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001df6:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001df8:	03a7      	lsls	r7, r4, #14
 8001dfa:	d46d      	bmi.n	8001ed8 <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 8001dfc:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001dfe:	4f49      	ldr	r7, [pc, #292]	; (8001f24 <HAL_GPIO_Init+0x1f8>)
 8001e00:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
 8001e02:	683d      	ldr	r5, [r7, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e04:	03e4      	lsls	r4, r4, #15
 8001e06:	d463      	bmi.n	8001ed0 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 8001e08:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001e0a:	4c46      	ldr	r4, [pc, #280]	; (8001f24 <HAL_GPIO_Init+0x1f8>)
 8001e0c:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0e:	000c      	movs	r4, r1
      }
    }

    position++;
 8001e10:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e12:	40dc      	lsrs	r4, r3
 8001e14:	3202      	adds	r2, #2
 8001e16:	2c00      	cmp	r4, #0
 8001e18:	d067      	beq.n	8001eea <HAL_GPIO_Init+0x1be>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e1a:	2601      	movs	r6, #1
 8001e1c:	000c      	movs	r4, r1
 8001e1e:	409e      	lsls	r6, r3
 8001e20:	4034      	ands	r4, r6
 8001e22:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8001e24:	4231      	tst	r1, r6
 8001e26:	d0f2      	beq.n	8001e0e <HAL_GPIO_Init+0xe2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e28:	4654      	mov	r4, sl
 8001e2a:	2503      	movs	r5, #3
 8001e2c:	6864      	ldr	r4, [r4, #4]
 8001e2e:	4025      	ands	r5, r4
 8001e30:	46ac      	mov	ip, r5
 8001e32:	3d01      	subs	r5, #1
 8001e34:	2d01      	cmp	r5, #1
 8001e36:	d88b      	bhi.n	8001d50 <HAL_GPIO_Init+0x24>
        temp = GPIOx->OSPEEDR;
 8001e38:	6885      	ldr	r5, [r0, #8]
 8001e3a:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e3c:	2503      	movs	r5, #3
 8001e3e:	4095      	lsls	r5, r2
 8001e40:	46a8      	mov	r8, r5
 8001e42:	43ed      	mvns	r5, r5
 8001e44:	464f      	mov	r7, r9
 8001e46:	9502      	str	r5, [sp, #8]
 8001e48:	4645      	mov	r5, r8
 8001e4a:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e4c:	4655      	mov	r5, sl
 8001e4e:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e50:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e52:	002f      	movs	r7, r5
 8001e54:	4097      	lsls	r7, r2
 8001e56:	46b8      	mov	r8, r7
 8001e58:	464f      	mov	r7, r9
 8001e5a:	4645      	mov	r5, r8
 8001e5c:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8001e5e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e60:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e62:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e64:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e66:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e68:	0926      	lsrs	r6, r4, #4
 8001e6a:	402e      	ands	r6, r5
 8001e6c:	409e      	lsls	r6, r3
 8001e6e:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8001e70:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8001e72:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e74:	9d02      	ldr	r5, [sp, #8]
 8001e76:	402e      	ands	r6, r5
 8001e78:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e7a:	4656      	mov	r6, sl
 8001e7c:	68b6      	ldr	r6, [r6, #8]
 8001e7e:	4647      	mov	r7, r8
 8001e80:	4096      	lsls	r6, r2
 8001e82:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8001e84:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e86:	4667      	mov	r7, ip
 8001e88:	4666      	mov	r6, ip
 8001e8a:	4096      	lsls	r6, r2
 8001e8c:	2f02      	cmp	r7, #2
 8001e8e:	d000      	beq.n	8001e92 <HAL_GPIO_Init+0x166>
 8001e90:	e766      	b.n	8001d60 <HAL_GPIO_Init+0x34>
        temp = GPIOx->AFR[position >> 3u];
 8001e92:	08dd      	lsrs	r5, r3, #3
 8001e94:	00ad      	lsls	r5, r5, #2
 8001e96:	46ac      	mov	ip, r5
 8001e98:	4484      	add	ip, r0
 8001e9a:	4665      	mov	r5, ip
 8001e9c:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e9e:	2507      	movs	r5, #7
 8001ea0:	401d      	ands	r5, r3
 8001ea2:	00ad      	lsls	r5, r5, #2
 8001ea4:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 8001ea6:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ea8:	250f      	movs	r5, #15
 8001eaa:	4647      	mov	r7, r8
 8001eac:	40bd      	lsls	r5, r7
 8001eae:	9f03      	ldr	r7, [sp, #12]
 8001eb0:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eb2:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eb4:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eb6:	4647      	mov	r7, r8
 8001eb8:	692d      	ldr	r5, [r5, #16]
 8001eba:	40bd      	lsls	r5, r7
 8001ebc:	9f03      	ldr	r7, [sp, #12]
 8001ebe:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8001ec0:	4665      	mov	r5, ip
 8001ec2:	622f      	str	r7, [r5, #32]
 8001ec4:	e74c      	b.n	8001d60 <HAL_GPIO_Init+0x34>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ec6:	2503      	movs	r5, #3
 8001ec8:	4095      	lsls	r5, r2
 8001eca:	43ed      	mvns	r5, r5
 8001ecc:	9502      	str	r5, [sp, #8]
 8001ece:	e7d0      	b.n	8001e72 <HAL_GPIO_Init+0x146>
          temp |= iocurrent;
 8001ed0:	9c01      	ldr	r4, [sp, #4]
 8001ed2:	432c      	orrs	r4, r5
 8001ed4:	0025      	movs	r5, r4
 8001ed6:	e798      	b.n	8001e0a <HAL_GPIO_Init+0xde>
          temp |= iocurrent;
 8001ed8:	9f01      	ldr	r7, [sp, #4]
 8001eda:	433d      	orrs	r5, r7
 8001edc:	e78f      	b.n	8001dfe <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 8001ede:	9f01      	ldr	r7, [sp, #4]
 8001ee0:	433d      	orrs	r5, r7
 8001ee2:	e786      	b.n	8001df2 <HAL_GPIO_Init+0xc6>
          temp |= iocurrent;
 8001ee4:	9f01      	ldr	r7, [sp, #4]
 8001ee6:	433d      	orrs	r5, r7
 8001ee8:	e77d      	b.n	8001de6 <HAL_GPIO_Init+0xba>
  } 
}
 8001eea:	b007      	add	sp, #28
 8001eec:	bcf0      	pop	{r4, r5, r6, r7}
 8001eee:	46bb      	mov	fp, r7
 8001ef0:	46b2      	mov	sl, r6
 8001ef2:	46a9      	mov	r9, r5
 8001ef4:	46a0      	mov	r8, r4
 8001ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ef8:	4667      	mov	r7, ip
 8001efa:	2601      	movs	r6, #1
 8001efc:	40be      	lsls	r6, r7
 8001efe:	464f      	mov	r7, r9
 8001f00:	4337      	orrs	r7, r6
 8001f02:	46b9      	mov	r9, r7
 8001f04:	e764      	b.n	8001dd0 <HAL_GPIO_Init+0xa4>
 8001f06:	4667      	mov	r7, ip
 8001f08:	2602      	movs	r6, #2
 8001f0a:	40be      	lsls	r6, r7
 8001f0c:	464f      	mov	r7, r9
 8001f0e:	4337      	orrs	r7, r6
 8001f10:	46b9      	mov	r9, r7
 8001f12:	e75d      	b.n	8001dd0 <HAL_GPIO_Init+0xa4>
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	48000400 	.word	0x48000400
 8001f20:	48000800 	.word	0x48000800
 8001f24:	40010400 	.word	0x40010400

08001f28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f28:	2a00      	cmp	r2, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f2c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f2e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f30:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001f32:	e7fc      	b.n	8001f2e <HAL_GPIO_WritePin+0x6>

08001f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f34:	b510      	push	{r4, lr}
 8001f36:	1e04      	subs	r4, r0, #0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f38:	d04d      	beq.n	8001fd6 <HAL_I2C_Init+0xa2>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f3a:	2341      	movs	r3, #65	; 0x41
 8001f3c:	5cc3      	ldrb	r3, [r0, r3]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d043      	beq.n	8001fcc <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f44:	2341      	movs	r3, #65	; 0x41
 8001f46:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f48:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f4a:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8001f4c:	6823      	ldr	r3, [r4, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	438a      	bics	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f54:	4921      	ldr	r1, [pc, #132]	; (8001fdc <HAL_I2C_Init+0xa8>)
 8001f56:	6862      	ldr	r2, [r4, #4]
 8001f58:	400a      	ands	r2, r1
 8001f5a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	4920      	ldr	r1, [pc, #128]	; (8001fe0 <HAL_I2C_Init+0xac>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f64:	68e2      	ldr	r2, [r4, #12]
 8001f66:	2a01      	cmp	r2, #1
 8001f68:	d02a      	beq.n	8001fc0 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f6a:	2184      	movs	r1, #132	; 0x84
 8001f6c:	68a0      	ldr	r0, [r4, #8]
 8001f6e:	0209      	lsls	r1, r1, #8
 8001f70:	4301      	orrs	r1, r0
 8001f72:	6099      	str	r1, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f74:	2a02      	cmp	r2, #2
 8001f76:	d102      	bne.n	8001f7e <HAL_I2C_Init+0x4a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f78:	2280      	movs	r2, #128	; 0x80
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	4a18      	ldr	r2, [pc, #96]	; (8001fe4 <HAL_I2C_Init+0xb0>)
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8001f82:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f84:	430a      	orrs	r2, r1
 8001f86:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	4915      	ldr	r1, [pc, #84]	; (8001fe0 <HAL_I2C_Init+0xac>)
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f90:	6961      	ldr	r1, [r4, #20]
 8001f92:	6922      	ldr	r2, [r4, #16]
 8001f94:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f96:	69a1      	ldr	r1, [r4, #24]
 8001f98:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f9e:	6a21      	ldr	r1, [r4, #32]
 8001fa0:	69e2      	ldr	r2, [r4, #28]
 8001fa2:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 8001fa4:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fa6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fae:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb0:	2241      	movs	r2, #65	; 0x41
 8001fb2:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb8:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fba:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fbc:	54a3      	strb	r3, [r4, r2]
}
 8001fbe:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fc0:	2280      	movs	r2, #128	; 0x80
 8001fc2:	68a1      	ldr	r1, [r4, #8]
 8001fc4:	0212      	lsls	r2, r2, #8
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	e7d8      	b.n	8001f7e <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 8001fcc:	3340      	adds	r3, #64	; 0x40
 8001fce:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8001fd0:	f7fe ff92 	bl	8000ef8 <HAL_I2C_MspInit>
 8001fd4:	e7b6      	b.n	8001f44 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	e7f1      	b.n	8001fbe <HAL_I2C_Init+0x8a>
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	f0ffffff 	.word	0xf0ffffff
 8001fe0:	ffff7fff 	.word	0xffff7fff
 8001fe4:	02008000 	.word	0x02008000

08001fe8 <HAL_I2C_EV_IRQHandler>:
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001fe8:	6803      	ldr	r3, [r0, #0]
{
 8001fea:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001fec:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001fee:	681a      	ldr	r2, [r3, #0]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001ff0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d000      	beq.n	8001ff8 <HAL_I2C_EV_IRQHandler+0x10>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001ff6:	4798      	blx	r3
  }
}
 8001ff8:	bd10      	pop	{r4, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)

08001ffc <HAL_I2C_SlaveTxCpltCallback>:
 8001ffc:	4770      	bx	lr
 8001ffe:	46c0      	nop			; (mov r8, r8)

08002000 <HAL_I2C_SlaveRxCpltCallback>:
 8002000:	4770      	bx	lr
 8002002:	46c0      	nop			; (mov r8, r8)

08002004 <I2C_ITSlaveSeqCplt>:
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002004:	2142      	movs	r1, #66	; 0x42
{
 8002006:	b510      	push	{r4, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002008:	2400      	movs	r4, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800200a:	6803      	ldr	r3, [r0, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800200e:	5444      	strb	r4, [r0, r1]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002010:	0451      	lsls	r1, r2, #17
 8002012:	d521      	bpl.n	8002058 <I2C_ITSlaveSeqCplt+0x54>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	4920      	ldr	r1, [pc, #128]	; (8002098 <I2C_ITSlaveSeqCplt+0x94>)
 8002018:	400a      	ands	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800201c:	2241      	movs	r2, #65	; 0x41
 800201e:	5c81      	ldrb	r1, [r0, r2]
 8002020:	2929      	cmp	r1, #41	; 0x29
 8002022:	d023      	beq.n	800206c <I2C_ITSlaveSeqCplt+0x68>
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002024:	5c81      	ldrb	r1, [r0, r2]
 8002026:	292a      	cmp	r1, #42	; 0x2a
 8002028:	d000      	beq.n	800202c <I2C_ITSlaveSeqCplt+0x28>
  }
  else
  {
    /* Nothing to do */
  }
}
 800202a:	bd10      	pop	{r4, pc}
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800202c:	2422      	movs	r4, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800202e:	3902      	subs	r1, #2
 8002030:	5481      	strb	r1, [r0, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002032:	6304      	str	r4, [r0, #48]	; 0x30
  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002034:	5c82      	ldrb	r2, [r0, r2]
 8002036:	4011      	ands	r1, r2
 8002038:	3928      	subs	r1, #40	; 0x28
 800203a:	424a      	negs	r2, r1
 800203c:	4151      	adcs	r1, r2
 800203e:	22b0      	movs	r2, #176	; 0xb0
 8002040:	4249      	negs	r1, r1
 8002042:	400a      	ands	r2, r1
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002044:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002046:	3af5      	subs	r2, #245	; 0xf5
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002048:	400a      	ands	r2, r1
 800204a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800204c:	2340      	movs	r3, #64	; 0x40
 800204e:	2200      	movs	r2, #0
 8002050:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002052:	f7ff ffd5 	bl	8002000 <HAL_I2C_SlaveRxCpltCallback>
}
 8002056:	e7e8      	b.n	800202a <I2C_ITSlaveSeqCplt+0x26>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002058:	0412      	lsls	r2, r2, #16
 800205a:	d5df      	bpl.n	800201c <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	490f      	ldr	r1, [pc, #60]	; (800209c <I2C_ITSlaveSeqCplt+0x98>)
 8002060:	400a      	ands	r2, r1
 8002062:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002064:	2241      	movs	r2, #65	; 0x41
 8002066:	5c81      	ldrb	r1, [r0, r2]
 8002068:	2929      	cmp	r1, #41	; 0x29
 800206a:	d1db      	bne.n	8002024 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800206c:	2421      	movs	r4, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800206e:	3901      	subs	r1, #1
 8002070:	5481      	strb	r1, [r0, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002072:	6304      	str	r4, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002074:	5c82      	ldrb	r2, [r0, r2]
 8002076:	4011      	ands	r1, r2
 8002078:	3928      	subs	r1, #40	; 0x28
 800207a:	424a      	negs	r2, r1
 800207c:	4151      	adcs	r1, r2
 800207e:	22b0      	movs	r2, #176	; 0xb0
 8002080:	4249      	negs	r1, r1
 8002082:	400a      	ands	r2, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002084:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002086:	3af3      	subs	r2, #243	; 0xf3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002088:	400a      	ands	r2, r1
 800208a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800208c:	2340      	movs	r3, #64	; 0x40
 800208e:	2200      	movs	r2, #0
 8002090:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002092:	f7ff ffb3 	bl	8001ffc <HAL_I2C_SlaveTxCpltCallback>
 8002096:	e7c8      	b.n	800202a <I2C_ITSlaveSeqCplt+0x26>
 8002098:	ffffbfff 	.word	0xffffbfff
 800209c:	ffff7fff 	.word	0xffff7fff

080020a0 <HAL_I2C_AddrCallback>:
}
 80020a0:	4770      	bx	lr
 80020a2:	46c0      	nop			; (mov r8, r8)

080020a4 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80020a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a6:	46c6      	mov	lr, r8
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80020a8:	25fe      	movs	r5, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 80020aa:	6803      	ldr	r3, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020ac:	68c6      	ldr	r6, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 80020ae:	6999      	ldr	r1, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80020b0:	699a      	ldr	r2, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 80020b2:	03c9      	lsls	r1, r1, #15
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80020b4:	0c12      	lsrs	r2, r2, #16
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80020b6:	689c      	ldr	r4, [r3, #8]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80020b8:	b500      	push	{lr}
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80020ba:	68df      	ldr	r7, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 80020bc:	0fc9      	lsrs	r1, r1, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80020be:	402a      	ands	r2, r5
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020c0:	2e02      	cmp	r6, #2
 80020c2:	d113      	bne.n	80020ec <I2C_ITAddrCplt.part.0+0x48>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80020c4:	05a4      	lsls	r4, r4, #22
 80020c6:	0da6      	lsrs	r6, r4, #22
 80020c8:	46b4      	mov	ip, r6
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80020ca:	2606      	movs	r6, #6
 80020cc:	0f64      	lsrs	r4, r4, #29
 80020ce:	4054      	eors	r4, r2
 80020d0:	0032      	movs	r2, r6
 80020d2:	4022      	ands	r2, r4
 80020d4:	4690      	mov	r8, r2
 80020d6:	4226      	tst	r6, r4
 80020d8:	d112      	bne.n	8002100 <I2C_ITAddrCplt.part.0+0x5c>
        hi2c->AddrEventCount++;
 80020da:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80020dc:	3401      	adds	r4, #1
 80020de:	6484      	str	r4, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80020e0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80020e2:	2a02      	cmp	r2, #2
 80020e4:	d018      	beq.n	8002118 <I2C_ITAddrCplt.part.0+0x74>
}
 80020e6:	bc80      	pop	{r7}
 80020e8:	46b8      	mov	r8, r7
 80020ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80020ec:	25b8      	movs	r5, #184	; 0xb8
 80020ee:	681c      	ldr	r4, [r3, #0]
 80020f0:	43ac      	bics	r4, r5
 80020f2:	601c      	str	r4, [r3, #0]
      __HAL_UNLOCK(hi2c);
 80020f4:	2340      	movs	r3, #64	; 0x40
 80020f6:	2400      	movs	r4, #0
 80020f8:	54c4      	strb	r4, [r0, r3]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80020fa:	f7ff ffd1 	bl	80020a0 <HAL_I2C_AddrCallback>
}
 80020fe:	e7f2      	b.n	80020e6 <I2C_ITAddrCplt.part.0+0x42>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002100:	24b8      	movs	r4, #184	; 0xb8
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	43a2      	bics	r2, r4
 8002106:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
 8002108:	2340      	movs	r3, #64	; 0x40
 800210a:	2200      	movs	r2, #0
 800210c:	54c2      	strb	r2, [r0, r3]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800210e:	002a      	movs	r2, r5
 8002110:	403a      	ands	r2, r7
 8002112:	f7ff ffc5 	bl	80020a0 <HAL_I2C_AddrCallback>
 8002116:	e7e6      	b.n	80020e6 <I2C_ITAddrCplt.part.0+0x42>
          hi2c->AddrEventCount = 0U;
 8002118:	4642      	mov	r2, r8
 800211a:	6482      	str	r2, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800211c:	2208      	movs	r2, #8
 800211e:	61da      	str	r2, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8002120:	4642      	mov	r2, r8
 8002122:	2340      	movs	r3, #64	; 0x40
 8002124:	54c2      	strb	r2, [r0, r3]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002126:	4662      	mov	r2, ip
 8002128:	f7ff ffba 	bl	80020a0 <HAL_I2C_AddrCallback>
 800212c:	e7db      	b.n	80020e6 <I2C_ITAddrCplt.part.0+0x42>
 800212e:	46c0      	nop			; (mov r8, r8)

08002130 <HAL_I2C_ListenCpltCallback>:
 8002130:	4770      	bx	lr
 8002132:	46c0      	nop			; (mov r8, r8)

08002134 <HAL_I2C_ErrorCallback>:
 8002134:	4770      	bx	lr
 8002136:	46c0      	nop			; (mov r8, r8)

08002138 <HAL_I2C_AbortCpltCallback>:
 8002138:	4770      	bx	lr
 800213a:	46c0      	nop			; (mov r8, r8)

0800213c <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800213c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800213e:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 8002140:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002146:	2200      	movs	r2, #0
 8002148:	635a      	str	r2, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 800214a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002150:	2200      	movs	r2, #0
 8002152:	635a      	str	r2, [r3, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002154:	2341      	movs	r3, #65	; 0x41
 8002156:	5cc2      	ldrb	r2, [r0, r3]
 8002158:	2a60      	cmp	r2, #96	; 0x60
 800215a:	d006      	beq.n	800216a <I2C_DMAAbort+0x2e>
    hi2c->PreviousState = I2C_STATE_NONE;
 800215c:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 800215e:	2240      	movs	r2, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8002160:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002162:	5483      	strb	r3, [r0, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002164:	f7ff ffe6 	bl	8002134 <HAL_I2C_ErrorCallback>
}
 8002168:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800216a:	3a40      	subs	r2, #64	; 0x40
 800216c:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 800216e:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8002170:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002172:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002174:	5483      	strb	r3, [r0, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002176:	f7ff ffdf 	bl	8002138 <HAL_I2C_AbortCpltCallback>
}
 800217a:	e7f5      	b.n	8002168 <I2C_DMAAbort+0x2c>

0800217c <I2C_ITError>:
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800217c:	2241      	movs	r2, #65	; 0x41
{
 800217e:	b570      	push	{r4, r5, r6, lr}
 8002180:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002182:	5c83      	ldrb	r3, [r0, r2]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002184:	2500      	movs	r5, #0
 8002186:	2042      	movs	r0, #66	; 0x42
 8002188:	5425      	strb	r5, [r4, r0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800218a:	4851      	ldr	r0, [pc, #324]	; (80022d0 <I2C_ITError+0x154>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800218c:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800218e:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002190:	8565      	strh	r5, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002192:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002194:	4308      	orrs	r0, r1
 8002196:	6460      	str	r0, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002198:	2b02      	cmp	r3, #2
 800219a:	d834      	bhi.n	8002206 <I2C_ITError+0x8a>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800219c:	2028      	movs	r0, #40	; 0x28
 800219e:	5ca3      	ldrb	r3, [r4, r2]
 80021a0:	4003      	ands	r3, r0
 80021a2:	3b28      	subs	r3, #40	; 0x28
 80021a4:	4259      	negs	r1, r3
 80021a6:	414b      	adcs	r3, r1
 80021a8:	21b0      	movs	r1, #176	; 0xb0
 80021aa:	425b      	negs	r3, r3
 80021ac:	4019      	ands	r1, r3
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80021ae:	5ca3      	ldrb	r3, [r4, r2]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80021b0:	39f7      	subs	r1, #247	; 0xf7
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80021b2:	4018      	ands	r0, r3
 80021b4:	2828      	cmp	r0, #40	; 0x28
 80021b6:	d001      	beq.n	80021bc <I2C_ITError+0x40>
 80021b8:	21f7      	movs	r1, #247	; 0xf7
 80021ba:	4249      	negs	r1, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80021bc:	6823      	ldr	r3, [r4, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	400a      	ands	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80021c4:	2128      	movs	r1, #40	; 0x28
 80021c6:	2241      	movs	r2, #65	; 0x41
 80021c8:	54a1      	strb	r1, [r4, r2]
 80021ca:	4a42      	ldr	r2, [pc, #264]	; (80022d4 <I2C_ITError+0x158>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80021cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80021ce:	6362      	str	r2, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 80021d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80021d2:	2800      	cmp	r0, #0
 80021d4:	d004      	beq.n	80021e0 <I2C_ITError+0x64>
 80021d6:	0011      	movs	r1, r2
 80021d8:	2510      	movs	r5, #16
 80021da:	3911      	subs	r1, #17
 80021dc:	43a9      	bics	r1, r5
 80021de:	d03a      	beq.n	8002256 <I2C_ITError+0xda>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80021e0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80021e2:	2800      	cmp	r0, #0
 80021e4:	d003      	beq.n	80021ee <I2C_ITError+0x72>
 80021e6:	2110      	movs	r1, #16
 80021e8:	3a12      	subs	r2, #18
 80021ea:	438a      	bics	r2, r1
 80021ec:	d048      	beq.n	8002280 <I2C_ITError+0x104>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80021ee:	2341      	movs	r3, #65	; 0x41
 80021f0:	5ce2      	ldrb	r2, [r4, r3]
 80021f2:	2a60      	cmp	r2, #96	; 0x60
 80021f4:	d062      	beq.n	80022bc <I2C_ITError+0x140>
    hi2c->PreviousState = I2C_STATE_NONE;
 80021f6:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 80021f8:	2240      	movs	r2, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80021fa:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ErrorCallback(hi2c);
 80021fc:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80021fe:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002200:	f7ff ff98 	bl	8002134 <HAL_I2C_ErrorCallback>
}
 8002204:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002206:	21fe      	movs	r1, #254	; 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002208:	5ca3      	ldrb	r3, [r4, r2]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800220a:	5ca3      	ldrb	r3, [r4, r2]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800220c:	6823      	ldr	r3, [r4, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	438a      	bics	r2, r1
 8002212:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	0792      	lsls	r2, r2, #30
 8002218:	d500      	bpl.n	800221c <I2C_ITError+0xa0>
    hi2c->Instance->TXDR = 0x00U;
 800221a:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800221c:	2201      	movs	r2, #1
 800221e:	6999      	ldr	r1, [r3, #24]
 8002220:	420a      	tst	r2, r1
 8002222:	d102      	bne.n	800222a <I2C_ITError+0xae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002224:	6999      	ldr	r1, [r3, #24]
 8002226:	430a      	orrs	r2, r1
 8002228:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800222a:	2241      	movs	r2, #65	; 0x41
 800222c:	5ca1      	ldrb	r1, [r4, r2]
 800222e:	2960      	cmp	r1, #96	; 0x60
 8002230:	d00f      	beq.n	8002252 <I2C_ITError+0xd6>
      hi2c->State         = HAL_I2C_STATE_READY;
 8002232:	2120      	movs	r1, #32
 8002234:	54a1      	strb	r1, [r4, r2]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002236:	699a      	ldr	r2, [r3, #24]
 8002238:	4211      	tst	r1, r2
 800223a:	d00a      	beq.n	8002252 <I2C_ITError+0xd6>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800223c:	2210      	movs	r2, #16
 800223e:	6999      	ldr	r1, [r3, #24]
 8002240:	420a      	tst	r2, r1
 8002242:	d004      	beq.n	800224e <I2C_ITError+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002244:	2104      	movs	r1, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002246:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002248:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800224a:	430a      	orrs	r2, r1
 800224c:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800224e:	2220      	movs	r2, #32
 8002250:	61da      	str	r2, [r3, #28]
 8002252:	2200      	movs	r2, #0
 8002254:	e7ba      	b.n	80021cc <I2C_ITError+0x50>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	0452      	lsls	r2, r2, #17
 800225a:	d42a      	bmi.n	80022b2 <I2C_ITError+0x136>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800225c:	f7ff fd62 	bl	8001d24 <HAL_DMA_GetState>
 8002260:	2801      	cmp	r0, #1
 8002262:	d0c4      	beq.n	80021ee <I2C_ITError+0x72>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002264:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002266:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <I2C_ITError+0x15c>)
      __HAL_UNLOCK(hi2c);
 8002268:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800226a:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 800226c:	2340      	movs	r3, #64	; 0x40
 800226e:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002270:	f7ff fce6 	bl	8001c40 <HAL_DMA_Abort_IT>
 8002274:	2800      	cmp	r0, #0
 8002276:	d0c5      	beq.n	8002204 <I2C_ITError+0x88>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002278:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800227a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800227c:	4798      	blx	r3
 800227e:	e7c1      	b.n	8002204 <I2C_ITError+0x88>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	0412      	lsls	r2, r2, #16
 8002284:	d503      	bpl.n	800228e <I2C_ITError+0x112>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4914      	ldr	r1, [pc, #80]	; (80022dc <I2C_ITError+0x160>)
 800228a:	400a      	ands	r2, r1
 800228c:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800228e:	f7ff fd49 	bl	8001d24 <HAL_DMA_GetState>
 8002292:	2801      	cmp	r0, #1
 8002294:	d0ab      	beq.n	80021ee <I2C_ITError+0x72>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002296:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <I2C_ITError+0x15c>)
      __HAL_UNLOCK(hi2c);
 800229a:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800229c:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 800229e:	2340      	movs	r3, #64	; 0x40
 80022a0:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80022a2:	f7ff fccd 	bl	8001c40 <HAL_DMA_Abort_IT>
 80022a6:	2800      	cmp	r0, #0
 80022a8:	d0ac      	beq.n	8002204 <I2C_ITError+0x88>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80022ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80022ae:	4798      	blx	r3
 80022b0:	e7a8      	b.n	8002204 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	490a      	ldr	r1, [pc, #40]	; (80022e0 <I2C_ITError+0x164>)
 80022b6:	400a      	ands	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	e7cf      	b.n	800225c <I2C_ITError+0xe0>
    hi2c->State = HAL_I2C_STATE_READY;
 80022bc:	3a40      	subs	r2, #64	; 0x40
 80022be:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 80022c0:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 80022c2:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80022c4:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 80022c6:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80022c8:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 80022ca:	f7ff ff35 	bl	8002138 <HAL_I2C_AbortCpltCallback>
}
 80022ce:	e799      	b.n	8002204 <I2C_ITError+0x88>
 80022d0:	ffff0000 	.word	0xffff0000
 80022d4:	080024cd 	.word	0x080024cd
 80022d8:	0800213d 	.word	0x0800213d
 80022dc:	ffff7fff 	.word	0xffff7fff
 80022e0:	ffffbfff 	.word	0xffffbfff

080022e4 <HAL_I2C_ER_IRQHandler>:
{
 80022e4:	b570      	push	{r4, r5, r6, lr}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80022e6:	2480      	movs	r4, #128	; 0x80
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80022e8:	6802      	ldr	r2, [r0, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80022ea:	0064      	lsls	r4, r4, #1
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80022ec:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80022ee:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80022f0:	4223      	tst	r3, r4
 80022f2:	d02a      	beq.n	800234a <HAL_I2C_ER_IRQHandler+0x66>
 80022f4:	060d      	lsls	r5, r1, #24
 80022f6:	d51b      	bpl.n	8002330 <HAL_I2C_ER_IRQHandler+0x4c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80022f8:	2501      	movs	r5, #1
 80022fa:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80022fc:	4329      	orrs	r1, r5
 80022fe:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002300:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002302:	0559      	lsls	r1, r3, #21
 8002304:	d526      	bpl.n	8002354 <HAL_I2C_ER_IRQHandler+0x70>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002306:	2408      	movs	r4, #8
 8002308:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800230a:	4321      	orrs	r1, r4
 800230c:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	00c9      	lsls	r1, r1, #3
 8002312:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002314:	059b      	lsls	r3, r3, #22
 8002316:	d506      	bpl.n	8002326 <HAL_I2C_ER_IRQHandler+0x42>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002318:	2102      	movs	r1, #2
 800231a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800231c:	430b      	orrs	r3, r1
 800231e:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	61d3      	str	r3, [r2, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002326:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8002328:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800232a:	420b      	tst	r3, r1
 800232c:	d10a      	bne.n	8002344 <HAL_I2C_ER_IRQHandler+0x60>
}
 800232e:	bd70      	pop	{r4, r5, r6, pc}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002330:	055c      	lsls	r4, r3, #21
 8002332:	d4f8      	bmi.n	8002326 <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002334:	059b      	lsls	r3, r3, #22
 8002336:	d5f6      	bpl.n	8002326 <HAL_I2C_ER_IRQHandler+0x42>
 8002338:	0609      	lsls	r1, r1, #24
 800233a:	d4ed      	bmi.n	8002318 <HAL_I2C_ER_IRQHandler+0x34>
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800233c:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 800233e:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002340:	420b      	tst	r3, r1
 8002342:	d0f4      	beq.n	800232e <HAL_I2C_ER_IRQHandler+0x4a>
    I2C_ITError(hi2c, tmperror);
 8002344:	f7ff ff1a 	bl	800217c <I2C_ITError>
}
 8002348:	e7f1      	b.n	800232e <HAL_I2C_ER_IRQHandler+0x4a>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800234a:	055c      	lsls	r4, r3, #21
 800234c:	d5f2      	bpl.n	8002334 <HAL_I2C_ER_IRQHandler+0x50>
 800234e:	0609      	lsls	r1, r1, #24
 8002350:	d4d9      	bmi.n	8002306 <HAL_I2C_ER_IRQHandler+0x22>
 8002352:	e7e8      	b.n	8002326 <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002354:	059b      	lsls	r3, r3, #22
 8002356:	d4df      	bmi.n	8002318 <HAL_I2C_ER_IRQHandler+0x34>
 8002358:	e7e5      	b.n	8002326 <HAL_I2C_ER_IRQHandler+0x42>
 800235a:	46c0      	nop			; (mov r8, r8)

0800235c <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235e:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002360:	2541      	movs	r5, #65	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002362:	2620      	movs	r6, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002364:	6803      	ldr	r3, [r0, #0]
 8002366:	6818      	ldr	r0, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002368:	5d62      	ldrb	r2, [r4, r5]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800236a:	61de      	str	r6, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800236c:	3e18      	subs	r6, #24
 800236e:	43b2      	bics	r2, r6
 8002370:	2a21      	cmp	r2, #33	; 0x21
 8002372:	d04e      	beq.n	8002412 <I2C_ITSlaveCplt.constprop.0+0xb6>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002374:	2a22      	cmp	r2, #34	; 0x22
 8002376:	d100      	bne.n	800237a <I2C_ITSlaveCplt.constprop.0+0x1e>
 8002378:	e071      	b.n	800245e <I2C_ITSlaveCplt.constprop.0+0x102>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	685d      	ldr	r5, [r3, #4]
 800237e:	0212      	lsls	r2, r2, #8
 8002380:	432a      	orrs	r2, r5
 8002382:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4d4d      	ldr	r5, [pc, #308]	; (80024bc <I2C_ITSlaveCplt.constprop.0+0x160>)
 8002388:	402a      	ands	r2, r5
 800238a:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	0792      	lsls	r2, r2, #30
 8002390:	d501      	bpl.n	8002396 <I2C_ITSlaveCplt.constprop.0+0x3a>
    hi2c->Instance->TXDR = 0x00U;
 8002392:	2200      	movs	r2, #0
 8002394:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002396:	2201      	movs	r2, #1
 8002398:	699d      	ldr	r5, [r3, #24]
 800239a:	422a      	tst	r2, r5
 800239c:	d102      	bne.n	80023a4 <I2C_ITSlaveCplt.constprop.0+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800239e:	699d      	ldr	r5, [r3, #24]
 80023a0:	432a      	orrs	r2, r5
 80023a2:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80023a4:	0442      	lsls	r2, r0, #17
 80023a6:	d53b      	bpl.n	8002420 <I2C_ITSlaveCplt.constprop.0+0xc4>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4845      	ldr	r0, [pc, #276]	; (80024c0 <I2C_ITSlaveCplt.constprop.0+0x164>)
 80023ac:	4002      	ands	r2, r0
 80023ae:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80023b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80023b2:	2a00      	cmp	r2, #0
 80023b4:	d003      	beq.n	80023be <I2C_ITSlaveCplt.constprop.0+0x62>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	6852      	ldr	r2, [r2, #4]
 80023ba:	b292      	uxth	r2, r2
 80023bc:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80023be:	0749      	lsls	r1, r1, #29
 80023c0:	d508      	bpl.n	80023d4 <I2C_ITSlaveCplt.constprop.0+0x78>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80023c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023ca:	3301      	adds	r3, #1
 80023cc:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80023ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d13d      	bne.n	8002450 <I2C_ITSlaveCplt.constprop.0+0xf4>
  if (hi2c->XferCount != 0U)
 80023d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <I2C_ITSlaveCplt.constprop.0+0x86>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023da:	2204      	movs	r2, #4
 80023dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023de:	4313      	orrs	r3, r2
 80023e0:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e2:	2700      	movs	r7, #0
 80023e4:	2542      	movs	r5, #66	; 0x42
 80023e6:	5567      	strb	r7, [r4, r5]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023e8:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 80023ea:	6367      	str	r7, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023ec:	2e00      	cmp	r6, #0
 80023ee:	d13d      	bne.n	800246c <I2C_ITSlaveCplt.constprop.0+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80023f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023f2:	4d34      	ldr	r5, [pc, #208]	; (80024c4 <I2C_ITSlaveCplt.constprop.0+0x168>)
 80023f4:	42ab      	cmp	r3, r5
 80023f6:	d11d      	bne.n	8002434 <I2C_ITSlaveCplt.constprop.0+0xd8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023f8:	2341      	movs	r3, #65	; 0x41
 80023fa:	5ce2      	ldrb	r2, [r4, r3]
 80023fc:	2a22      	cmp	r2, #34	; 0x22
 80023fe:	d053      	beq.n	80024a8 <I2C_ITSlaveCplt.constprop.0+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002400:	2220      	movs	r2, #32
 8002402:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8002404:	2340      	movs	r3, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8002406:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002408:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 800240a:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800240c:	f7ff fdf6 	bl	8001ffc <HAL_I2C_SlaveTxCpltCallback>
}
 8002410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002412:	5d65      	ldrb	r5, [r4, r5]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002414:	681d      	ldr	r5, [r3, #0]
 8002416:	36f2      	adds	r6, #242	; 0xf2
 8002418:	43b5      	bics	r5, r6
 800241a:	601d      	str	r5, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800241c:	6322      	str	r2, [r4, #48]	; 0x30
 800241e:	e7ac      	b.n	800237a <I2C_ITSlaveCplt.constprop.0+0x1e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002420:	0400      	lsls	r0, r0, #16
 8002422:	d5cc      	bpl.n	80023be <I2C_ITSlaveCplt.constprop.0+0x62>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4828      	ldr	r0, [pc, #160]	; (80024c8 <I2C_ITSlaveCplt.constprop.0+0x16c>)
 8002428:	4002      	ands	r2, r0
 800242a:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800242c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800242e:	2a00      	cmp	r2, #0
 8002430:	d1c1      	bne.n	80023b6 <I2C_ITSlaveCplt.constprop.0+0x5a>
 8002432:	e7c4      	b.n	80023be <I2C_ITSlaveCplt.constprop.0+0x62>
    I2C_ITSlaveSeqCplt(hi2c);
 8002434:	0020      	movs	r0, r4
 8002436:	f7ff fde5 	bl	8002004 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 800243a:	2341      	movs	r3, #65	; 0x41
 800243c:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800243e:	62e5      	str	r5, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002440:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8002442:	3b01      	subs	r3, #1
    hi2c->PreviousState = I2C_STATE_NONE;
 8002444:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002446:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8002448:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_ListenCpltCallback(hi2c);
 800244a:	f7ff fe71 	bl	8002130 <HAL_I2C_ListenCpltCallback>
 800244e:	e7df      	b.n	8002410 <I2C_ITSlaveCplt.constprop.0+0xb4>
      hi2c->XferSize--;
 8002450:	3b01      	subs	r3, #1
 8002452:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002454:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002456:	3b01      	subs	r3, #1
 8002458:	b29b      	uxth	r3, r3
 800245a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800245c:	e7ba      	b.n	80023d4 <I2C_ITSlaveCplt.constprop.0+0x78>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800245e:	26fc      	movs	r6, #252	; 0xfc
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002460:	5d65      	ldrb	r5, [r4, r5]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002462:	681d      	ldr	r5, [r3, #0]
 8002464:	43b5      	bics	r5, r6
 8002466:	601d      	str	r5, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002468:	6322      	str	r2, [r4, #48]	; 0x30
 800246a:	e786      	b.n	800237a <I2C_ITSlaveCplt.constprop.0+0x1e>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800246c:	0020      	movs	r0, r4
 800246e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002470:	f7ff fe84 	bl	800217c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002474:	2341      	movs	r3, #65	; 0x41
 8002476:	5ce2      	ldrb	r2, [r4, r3]
 8002478:	2a28      	cmp	r2, #40	; 0x28
 800247a:	d1c9      	bne.n	8002410 <I2C_ITSlaveCplt.constprop.0+0xb4>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800247c:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <I2C_ITSlaveCplt.constprop.0+0x168>)
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800247e:	21fe      	movs	r1, #254	; 0xfe
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002480:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8002482:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 8002484:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002486:	54e2      	strb	r2, [r4, r3]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002488:	5567      	strb	r7, [r4, r5]
  hi2c->XferISR = NULL;
 800248a:	6367      	str	r7, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800248c:	5ce2      	ldrb	r2, [r4, r3]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800248e:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002490:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8002492:	0020      	movs	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	438a      	bics	r2, r1
 8002498:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800249a:	2210      	movs	r2, #16
 800249c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800249e:	2340      	movs	r3, #64	; 0x40
 80024a0:	54e7      	strb	r7, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 80024a2:	f7ff fe45 	bl	8002130 <HAL_I2C_ListenCpltCallback>
}
 80024a6:	e7b3      	b.n	8002410 <I2C_ITSlaveCplt.constprop.0+0xb4>
    hi2c->State = HAL_I2C_STATE_READY;
 80024a8:	3a02      	subs	r2, #2
 80024aa:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 80024ac:	3b01      	subs	r3, #1
    hi2c->PreviousState = I2C_STATE_NONE;
 80024ae:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024b0:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80024b2:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024b4:	f7ff fda4 	bl	8002000 <HAL_I2C_SlaveRxCpltCallback>
 80024b8:	e7aa      	b.n	8002410 <I2C_ITSlaveCplt.constprop.0+0xb4>
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	fe00e800 	.word	0xfe00e800
 80024c0:	ffffbfff 	.word	0xffffbfff
 80024c4:	ffff0000 	.word	0xffff0000
 80024c8:	ffff7fff 	.word	0xffff7fff

080024cc <I2C_Slave_ISR_IT>:
{
 80024cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80024ce:	2340      	movs	r3, #64	; 0x40
{
 80024d0:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 80024d2:	5cc2      	ldrb	r2, [r0, r3]
{
 80024d4:	0004      	movs	r4, r0
 80024d6:	000d      	movs	r5, r1
  uint32_t tmpoptions = hi2c->XferOptions;
 80024d8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80024da:	2a01      	cmp	r2, #1
 80024dc:	d100      	bne.n	80024e0 <I2C_Slave_ISR_IT+0x14>
 80024de:	e079      	b.n	80025d4 <I2C_Slave_ISR_IT+0x108>
 80024e0:	2201      	movs	r2, #1
 80024e2:	54c2      	strb	r2, [r0, r3]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80024e4:	3b20      	subs	r3, #32
 80024e6:	420b      	tst	r3, r1
 80024e8:	d001      	beq.n	80024ee <I2C_Slave_ISR_IT+0x22>
 80024ea:	4233      	tst	r3, r6
 80024ec:	d15e      	bne.n	80025ac <I2C_Slave_ISR_IT+0xe0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80024ee:	2310      	movs	r3, #16
 80024f0:	422b      	tst	r3, r5
 80024f2:	d017      	beq.n	8002524 <I2C_Slave_ISR_IT+0x58>
 80024f4:	4233      	tst	r3, r6
 80024f6:	d015      	beq.n	8002524 <I2C_Slave_ISR_IT+0x58>
    if (hi2c->XferCount == 0U)
 80024f8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80024fa:	b291      	uxth	r1, r2
 80024fc:	2a00      	cmp	r2, #0
 80024fe:	d15b      	bne.n	80025b8 <I2C_Slave_ISR_IT+0xec>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002500:	3331      	adds	r3, #49	; 0x31
 8002502:	5ce2      	ldrb	r2, [r4, r3]
 8002504:	2a28      	cmp	r2, #40	; 0x28
 8002506:	d100      	bne.n	800250a <I2C_Slave_ISR_IT+0x3e>
 8002508:	e06e      	b.n	80025e8 <I2C_Slave_ISR_IT+0x11c>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800250a:	2341      	movs	r3, #65	; 0x41
 800250c:	5ce3      	ldrb	r3, [r4, r3]
 800250e:	2b29      	cmp	r3, #41	; 0x29
 8002510:	d100      	bne.n	8002514 <I2C_Slave_ISR_IT+0x48>
 8002512:	e09d      	b.n	8002650 <I2C_Slave_ISR_IT+0x184>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002514:	2210      	movs	r2, #16
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800251a:	2340      	movs	r3, #64	; 0x40
 800251c:	2200      	movs	r2, #0
  return HAL_OK;
 800251e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 8002520:	54e2      	strb	r2, [r4, r3]
}
 8002522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002524:	2304      	movs	r3, #4
 8002526:	422b      	tst	r3, r5
 8002528:	d10d      	bne.n	8002546 <I2C_Slave_ISR_IT+0x7a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800252a:	2308      	movs	r3, #8
 800252c:	422b      	tst	r3, r5
 800252e:	d027      	beq.n	8002580 <I2C_Slave_ISR_IT+0xb4>
 8002530:	4233      	tst	r3, r6
 8002532:	d025      	beq.n	8002580 <I2C_Slave_ISR_IT+0xb4>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002534:	2241      	movs	r2, #65	; 0x41
 8002536:	5ca1      	ldrb	r1, [r4, r2]
 8002538:	3a19      	subs	r2, #25
 800253a:	400a      	ands	r2, r1
 800253c:	2a28      	cmp	r2, #40	; 0x28
 800253e:	d04f      	beq.n	80025e0 <I2C_Slave_ISR_IT+0x114>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002540:	6822      	ldr	r2, [r4, #0]
 8002542:	61d3      	str	r3, [r2, #28]
 8002544:	e7e9      	b.n	800251a <I2C_Slave_ISR_IT+0x4e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002546:	4233      	tst	r3, r6
 8002548:	d0ef      	beq.n	800252a <I2C_Slave_ISR_IT+0x5e>
    if (hi2c->XferCount > 0U)
 800254a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00d      	beq.n	800256c <I2C_Slave_ISR_IT+0xa0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002550:	6823      	ldr	r3, [r4, #0]
 8002552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002556:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800255a:	3301      	adds	r3, #1
 800255c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800255e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002560:	3b01      	subs	r3, #1
 8002562:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002564:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002566:	3b01      	subs	r3, #1
 8002568:	b29b      	uxth	r3, r3
 800256a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800256c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1d3      	bne.n	800251a <I2C_Slave_ISR_IT+0x4e>
 8002572:	4b42      	ldr	r3, [pc, #264]	; (800267c <I2C_Slave_ISR_IT+0x1b0>)
 8002574:	429f      	cmp	r7, r3
 8002576:	d0d0      	beq.n	800251a <I2C_Slave_ISR_IT+0x4e>
        I2C_ITSlaveSeqCplt(hi2c);
 8002578:	0020      	movs	r0, r4
 800257a:	f7ff fd43 	bl	8002004 <I2C_ITSlaveSeqCplt>
 800257e:	e7cc      	b.n	800251a <I2C_Slave_ISR_IT+0x4e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002580:	2302      	movs	r3, #2
 8002582:	422b      	tst	r3, r5
 8002584:	d0c9      	beq.n	800251a <I2C_Slave_ISR_IT+0x4e>
 8002586:	4233      	tst	r3, r6
 8002588:	d0c7      	beq.n	800251a <I2C_Slave_ISR_IT+0x4e>
    if (hi2c->XferCount > 0U)
 800258a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800258c:	2b00      	cmp	r3, #0
 800258e:	d023      	beq.n	80025d8 <I2C_Slave_ISR_IT+0x10c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002592:	6822      	ldr	r2, [r4, #0]
 8002594:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002596:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002598:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800259a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800259c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80025a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80025a6:	3b01      	subs	r3, #1
 80025a8:	8523      	strh	r3, [r4, #40]	; 0x28
 80025aa:	e7b6      	b.n	800251a <I2C_Slave_ISR_IT+0x4e>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80025ac:	f7ff fed6 	bl	800235c <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80025b0:	2310      	movs	r3, #16
 80025b2:	422b      	tst	r3, r5
 80025b4:	d0b6      	beq.n	8002524 <I2C_Slave_ISR_IT+0x58>
 80025b6:	e79d      	b.n	80024f4 <I2C_Slave_ISR_IT+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b8:	6822      	ldr	r2, [r4, #0]
 80025ba:	61d3      	str	r3, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025bc:	2204      	movs	r2, #4
 80025be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025c0:	4313      	orrs	r3, r2
 80025c2:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80025c4:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <I2C_Slave_ISR_IT+0x1b4>)
 80025c6:	421f      	tst	r7, r3
 80025c8:	d1a7      	bne.n	800251a <I2C_Slave_ISR_IT+0x4e>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80025ca:	0020      	movs	r0, r4
 80025cc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80025ce:	f7ff fdd5 	bl	800217c <I2C_ITError>
 80025d2:	e7a2      	b.n	800251a <I2C_Slave_ISR_IT+0x4e>
  __HAL_LOCK(hi2c);
 80025d4:	2002      	movs	r0, #2
 80025d6:	e7a4      	b.n	8002522 <I2C_Slave_ISR_IT+0x56>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80025d8:	4b29      	ldr	r3, [pc, #164]	; (8002680 <I2C_Slave_ISR_IT+0x1b4>)
 80025da:	421f      	tst	r7, r3
 80025dc:	d0cc      	beq.n	8002578 <I2C_Slave_ISR_IT+0xac>
 80025de:	e79c      	b.n	800251a <I2C_Slave_ISR_IT+0x4e>
 80025e0:	0020      	movs	r0, r4
 80025e2:	f7ff fd5f 	bl	80020a4 <I2C_ITAddrCplt.part.0>
 80025e6:	e798      	b.n	800251a <I2C_Slave_ISR_IT+0x4e>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80025e8:	2280      	movs	r2, #128	; 0x80
 80025ea:	0492      	lsls	r2, r2, #18
 80025ec:	4297      	cmp	r7, r2
 80025ee:	d000      	beq.n	80025f2 <I2C_Slave_ISR_IT+0x126>
 80025f0:	e78b      	b.n	800250a <I2C_Slave_ISR_IT+0x3e>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025f2:	4a22      	ldr	r2, [pc, #136]	; (800267c <I2C_Slave_ISR_IT+0x1b0>)
 80025f4:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 80025f6:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 80025f8:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80025fa:	54e2      	strb	r2, [r4, r3]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fc:	3301      	adds	r3, #1
 80025fe:	54e1      	strb	r1, [r4, r3]
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002600:	3b3e      	subs	r3, #62	; 0x3e
  hi2c->XferISR = NULL;
 8002602:	6361      	str	r1, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002604:	422b      	tst	r3, r5
 8002606:	d012      	beq.n	800262e <I2C_Slave_ISR_IT+0x162>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002608:	6822      	ldr	r2, [r4, #0]
 800260a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800260c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800260e:	7011      	strb	r1, [r2, #0]
    hi2c->pBuffPtr++;
 8002610:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002612:	3201      	adds	r2, #1
 8002614:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002616:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002618:	2a00      	cmp	r2, #0
 800261a:	d008      	beq.n	800262e <I2C_Slave_ISR_IT+0x162>
      hi2c->XferSize--;
 800261c:	3a01      	subs	r2, #1
 800261e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002620:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002622:	3a01      	subs	r2, #1
 8002624:	b292      	uxth	r2, r2
 8002626:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002628:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800262a:	4313      	orrs	r3, r2
 800262c:	6463      	str	r3, [r4, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800262e:	2341      	movs	r3, #65	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002630:	21fe      	movs	r1, #254	; 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002632:	5ce2      	ldrb	r2, [r4, r3]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002634:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002636:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8002638:	0020      	movs	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	438a      	bics	r2, r1
 800263e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002640:	2210      	movs	r2, #16
 8002642:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002644:	2340      	movs	r3, #64	; 0x40
 8002646:	2200      	movs	r2, #0
 8002648:	54e2      	strb	r2, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 800264a:	f7ff fd71 	bl	8002130 <HAL_I2C_ListenCpltCallback>
}
 800264e:	e764      	b.n	800251a <I2C_Slave_ISR_IT+0x4e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002650:	4b0a      	ldr	r3, [pc, #40]	; (800267c <I2C_Slave_ISR_IT+0x1b0>)
 8002652:	429f      	cmp	r7, r3
 8002654:	d100      	bne.n	8002658 <I2C_Slave_ISR_IT+0x18c>
 8002656:	e75d      	b.n	8002514 <I2C_Slave_ISR_IT+0x48>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002658:	2210      	movs	r2, #16
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800265e:	699a      	ldr	r2, [r3, #24]
 8002660:	0792      	lsls	r2, r2, #30
 8002662:	d501      	bpl.n	8002668 <I2C_Slave_ISR_IT+0x19c>
    hi2c->Instance->TXDR = 0x00U;
 8002664:	2200      	movs	r2, #0
 8002666:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002668:	2201      	movs	r2, #1
 800266a:	6999      	ldr	r1, [r3, #24]
 800266c:	420a      	tst	r2, r1
 800266e:	d000      	beq.n	8002672 <I2C_Slave_ISR_IT+0x1a6>
 8002670:	e782      	b.n	8002578 <I2C_Slave_ISR_IT+0xac>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002672:	6999      	ldr	r1, [r3, #24]
 8002674:	430a      	orrs	r2, r1
 8002676:	619a      	str	r2, [r3, #24]
 8002678:	e77e      	b.n	8002578 <I2C_Slave_ISR_IT+0xac>
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	ffff0000 	.word	0xffff0000
 8002680:	feffffff 	.word	0xfeffffff

08002684 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002684:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002686:	2441      	movs	r4, #65	; 0x41
 8002688:	5d03      	ldrb	r3, [r0, r4]
{
 800268a:	468c      	mov	ip, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800268c:	b2dd      	uxtb	r5, r3
 800268e:	2b20      	cmp	r3, #32
 8002690:	d11a      	bne.n	80026c8 <HAL_I2CEx_ConfigAnalogFilter+0x44>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002692:	2640      	movs	r6, #64	; 0x40
 8002694:	5d83      	ldrb	r3, [r0, r6]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d016      	beq.n	80026c8 <HAL_I2CEx_ConfigAnalogFilter+0x44>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800269a:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800269c:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 800269e:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 80026a0:	6803      	ldr	r3, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026a2:	490a      	ldr	r1, [pc, #40]	; (80026cc <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	43ba      	bics	r2, r7
 80026a8:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	400a      	ands	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026b0:	4662      	mov	r2, ip
 80026b2:	6819      	ldr	r1, [r3, #0]
 80026b4:	4311      	orrs	r1, r2
 80026b6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	433a      	orrs	r2, r7
 80026bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026be:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80026c0:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 80026c2:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 80026c4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80026c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80026c8:	2002      	movs	r0, #2
 80026ca:	e7fc      	b.n	80026c6 <HAL_I2CEx_ConfigAnalogFilter+0x42>
 80026cc:	ffffefff 	.word	0xffffefff

080026d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d2:	46ce      	mov	lr, r9
 80026d4:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d6:	2441      	movs	r4, #65	; 0x41
{
 80026d8:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80026da:	5d03      	ldrb	r3, [r0, r4]
 80026dc:	b2dd      	uxtb	r5, r3
 80026de:	2b20      	cmp	r3, #32
 80026e0:	d11f      	bne.n	8002722 <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e2:	2640      	movs	r6, #64	; 0x40
 80026e4:	5d83      	ldrb	r3, [r0, r6]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d01b      	beq.n	8002722 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ea:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026ec:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ee:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 80026f0:	6802      	ldr	r2, [r0, #0]
 80026f2:	46b9      	mov	r9, r7
 80026f4:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026f6:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 80026f8:	43bb      	bics	r3, r7
 80026fa:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 80026fc:	6813      	ldr	r3, [r2, #0]
 80026fe:	4698      	mov	r8, r3
    tmpreg &= ~(I2C_CR1_DNF);
 8002700:	4647      	mov	r7, r8
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_I2CEx_ConfigDigitalFilter+0x58>)
 8002704:	401f      	ands	r7, r3
    tmpreg |= DigitalFilter << 8U;
 8002706:	4339      	orrs	r1, r7

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002708:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800270a:	4649      	mov	r1, r9
 800270c:	6813      	ldr	r3, [r2, #0]
 800270e:	430b      	orrs	r3, r1
 8002710:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002712:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002714:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 8002716:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 8002718:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800271a:	bcc0      	pop	{r6, r7}
 800271c:	46b9      	mov	r9, r7
 800271e:	46b0      	mov	r8, r6
 8002720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002722:	2002      	movs	r0, #2
 8002724:	e7f9      	b.n	800271a <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	fffff0ff 	.word	0xfffff0ff

0800272c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800272c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272e:	46ce      	mov	lr, r9
 8002730:	4647      	mov	r7, r8
 8002732:	b580      	push	{r7, lr}
 8002734:	0004      	movs	r4, r0
 8002736:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002738:	2800      	cmp	r0, #0
 800273a:	d100      	bne.n	800273e <HAL_RCC_OscConfig+0x12>
 800273c:	e0ee      	b.n	800291c <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273e:	6803      	ldr	r3, [r0, #0]
 8002740:	07da      	lsls	r2, r3, #31
 8002742:	d535      	bpl.n	80027b0 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002744:	210c      	movs	r1, #12
 8002746:	48c3      	ldr	r0, [pc, #780]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
 8002748:	6842      	ldr	r2, [r0, #4]
 800274a:	400a      	ands	r2, r1
 800274c:	2a04      	cmp	r2, #4
 800274e:	d100      	bne.n	8002752 <HAL_RCC_OscConfig+0x26>
 8002750:	e101      	b.n	8002956 <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002752:	6842      	ldr	r2, [r0, #4]
 8002754:	4011      	ands	r1, r2
 8002756:	2908      	cmp	r1, #8
 8002758:	d100      	bne.n	800275c <HAL_RCC_OscConfig+0x30>
 800275a:	e0f8      	b.n	800294e <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275c:	6863      	ldr	r3, [r4, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d00f      	beq.n	8002782 <HAL_RCC_OscConfig+0x56>
 8002762:	2b00      	cmp	r3, #0
 8002764:	d100      	bne.n	8002768 <HAL_RCC_OscConfig+0x3c>
 8002766:	e11e      	b.n	80029a6 <HAL_RCC_OscConfig+0x27a>
 8002768:	2b05      	cmp	r3, #5
 800276a:	d100      	bne.n	800276e <HAL_RCC_OscConfig+0x42>
 800276c:	e1a7      	b.n	8002abe <HAL_RCC_OscConfig+0x392>
 800276e:	4bb9      	ldr	r3, [pc, #740]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
 8002770:	49b9      	ldr	r1, [pc, #740]	; (8002a58 <HAL_RCC_OscConfig+0x32c>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	400a      	ands	r2, r1
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	49b8      	ldr	r1, [pc, #736]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 800277c:	400a      	ands	r2, r1
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e005      	b.n	800278e <HAL_RCC_OscConfig+0x62>
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	4ab3      	ldr	r2, [pc, #716]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
 8002786:	025b      	lsls	r3, r3, #9
 8002788:	6811      	ldr	r1, [r2, #0]
 800278a:	430b      	orrs	r3, r1
 800278c:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7fe fe33 	bl	80013f8 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002794:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	4faf      	ldr	r7, [pc, #700]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
 8002798:	02b6      	lsls	r6, r6, #10
 800279a:	e005      	b.n	80027a8 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279c:	f7fe fe2c 	bl	80013f8 <HAL_GetTick>
 80027a0:	1b40      	subs	r0, r0, r5
 80027a2:	2864      	cmp	r0, #100	; 0x64
 80027a4:	d900      	bls.n	80027a8 <HAL_RCC_OscConfig+0x7c>
 80027a6:	e0fc      	b.n	80029a2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	4233      	tst	r3, r6
 80027ac:	d0f6      	beq.n	800279c <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	079a      	lsls	r2, r3, #30
 80027b2:	d529      	bpl.n	8002808 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027b4:	220c      	movs	r2, #12
 80027b6:	49a7      	ldr	r1, [pc, #668]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
 80027b8:	6848      	ldr	r0, [r1, #4]
 80027ba:	4202      	tst	r2, r0
 80027bc:	d100      	bne.n	80027c0 <HAL_RCC_OscConfig+0x94>
 80027be:	e0a6      	b.n	800290e <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027c0:	6848      	ldr	r0, [r1, #4]
 80027c2:	4002      	ands	r2, r0
 80027c4:	2a08      	cmp	r2, #8
 80027c6:	d100      	bne.n	80027ca <HAL_RCC_OscConfig+0x9e>
 80027c8:	e09d      	b.n	8002906 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ca:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027cc:	4da1      	ldr	r5, [pc, #644]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d100      	bne.n	80027d4 <HAL_RCC_OscConfig+0xa8>
 80027d2:	e11f      	b.n	8002a14 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 80027d4:	2201      	movs	r2, #1
 80027d6:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 80027da:	4313      	orrs	r3, r2
 80027dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80027de:	f7fe fe0b 	bl	80013f8 <HAL_GetTick>
 80027e2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e4:	e005      	b.n	80027f2 <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e6:	f7fe fe07 	bl	80013f8 <HAL_GetTick>
 80027ea:	1b80      	subs	r0, r0, r6
 80027ec:	2802      	cmp	r0, #2
 80027ee:	d900      	bls.n	80027f2 <HAL_RCC_OscConfig+0xc6>
 80027f0:	e0d7      	b.n	80029a2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f2:	682b      	ldr	r3, [r5, #0]
 80027f4:	421f      	tst	r7, r3
 80027f6:	d0f6      	beq.n	80027e6 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	21f8      	movs	r1, #248	; 0xf8
 80027fa:	682a      	ldr	r2, [r5, #0]
 80027fc:	6923      	ldr	r3, [r4, #16]
 80027fe:	438a      	bics	r2, r1
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4313      	orrs	r3, r2
 8002804:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	071a      	lsls	r2, r3, #28
 800280a:	d42d      	bmi.n	8002868 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800280c:	075a      	lsls	r2, r3, #29
 800280e:	d544      	bpl.n	800289a <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002810:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002812:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002814:	4b8f      	ldr	r3, [pc, #572]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
 8002816:	0552      	lsls	r2, r2, #21
 8002818:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800281a:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281c:	4211      	tst	r1, r2
 800281e:	d108      	bne.n	8002832 <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002820:	69d9      	ldr	r1, [r3, #28]
 8002822:	4311      	orrs	r1, r2
 8002824:	61d9      	str	r1, [r3, #28]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	4013      	ands	r3, r2
 800282a:	9301      	str	r3, [sp, #4]
 800282c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800282e:	2301      	movs	r3, #1
 8002830:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002832:	2780      	movs	r7, #128	; 0x80
 8002834:	4e8a      	ldr	r6, [pc, #552]	; (8002a60 <HAL_RCC_OscConfig+0x334>)
 8002836:	007f      	lsls	r7, r7, #1
 8002838:	6833      	ldr	r3, [r6, #0]
 800283a:	423b      	tst	r3, r7
 800283c:	d100      	bne.n	8002840 <HAL_RCC_OscConfig+0x114>
 800283e:	e094      	b.n	800296a <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002840:	68a3      	ldr	r3, [r4, #8]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d100      	bne.n	8002848 <HAL_RCC_OscConfig+0x11c>
 8002846:	e0f8      	b.n	8002a3a <HAL_RCC_OscConfig+0x30e>
 8002848:	2b00      	cmp	r3, #0
 800284a:	d100      	bne.n	800284e <HAL_RCC_OscConfig+0x122>
 800284c:	e0c4      	b.n	80029d8 <HAL_RCC_OscConfig+0x2ac>
 800284e:	2b05      	cmp	r3, #5
 8002850:	d100      	bne.n	8002854 <HAL_RCC_OscConfig+0x128>
 8002852:	e140      	b.n	8002ad6 <HAL_RCC_OscConfig+0x3aa>
 8002854:	2101      	movs	r1, #1
 8002856:	4b7f      	ldr	r3, [pc, #508]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
 8002858:	6a1a      	ldr	r2, [r3, #32]
 800285a:	438a      	bics	r2, r1
 800285c:	621a      	str	r2, [r3, #32]
 800285e:	6a1a      	ldr	r2, [r3, #32]
 8002860:	3103      	adds	r1, #3
 8002862:	438a      	bics	r2, r1
 8002864:	621a      	str	r2, [r3, #32]
 8002866:	e0ec      	b.n	8002a42 <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002868:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 800286a:	4d7a      	ldr	r5, [pc, #488]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800286c:	2b00      	cmp	r3, #0
 800286e:	d05b      	beq.n	8002928 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8002870:	2201      	movs	r2, #1
 8002872:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002874:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8002876:	4313      	orrs	r3, r2
 8002878:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800287a:	f7fe fdbd 	bl	80013f8 <HAL_GetTick>
 800287e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002880:	e005      	b.n	800288e <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002882:	f7fe fdb9 	bl	80013f8 <HAL_GetTick>
 8002886:	1b80      	subs	r0, r0, r6
 8002888:	2802      	cmp	r0, #2
 800288a:	d900      	bls.n	800288e <HAL_RCC_OscConfig+0x162>
 800288c:	e089      	b.n	80029a2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002890:	421f      	tst	r7, r3
 8002892:	d0f6      	beq.n	8002882 <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002894:	6823      	ldr	r3, [r4, #0]
 8002896:	075a      	lsls	r2, r3, #29
 8002898:	d4ba      	bmi.n	8002810 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800289a:	06db      	lsls	r3, r3, #27
 800289c:	d512      	bpl.n	80028c4 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800289e:	6963      	ldr	r3, [r4, #20]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d100      	bne.n	80028a6 <HAL_RCC_OscConfig+0x17a>
 80028a4:	e13d      	b.n	8002b22 <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80028a6:	3305      	adds	r3, #5
 80028a8:	d000      	beq.n	80028ac <HAL_RCC_OscConfig+0x180>
 80028aa:	e0e9      	b.n	8002a80 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80028ac:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028ae:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80028b0:	4a68      	ldr	r2, [pc, #416]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
 80028b2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80028b4:	438b      	bics	r3, r1
 80028b6:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028b8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80028ba:	69a3      	ldr	r3, [r4, #24]
 80028bc:	4381      	bics	r1, r0
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	430b      	orrs	r3, r1
 80028c2:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c4:	6a23      	ldr	r3, [r4, #32]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d01b      	beq.n	8002902 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ca:	220c      	movs	r2, #12
 80028cc:	4d61      	ldr	r5, [pc, #388]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
 80028ce:	6869      	ldr	r1, [r5, #4]
 80028d0:	400a      	ands	r2, r1
 80028d2:	2a08      	cmp	r2, #8
 80028d4:	d100      	bne.n	80028d8 <HAL_RCC_OscConfig+0x1ac>
 80028d6:	e108      	b.n	8002aea <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d100      	bne.n	80028de <HAL_RCC_OscConfig+0x1b2>
 80028dc:	e13f      	b.n	8002b5e <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028de:	682b      	ldr	r3, [r5, #0]
 80028e0:	4a60      	ldr	r2, [pc, #384]	; (8002a64 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80028e4:	4013      	ands	r3, r2
 80028e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80028e8:	f7fe fd86 	bl	80013f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ec:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80028ee:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f0:	e004      	b.n	80028fc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f2:	f7fe fd81 	bl	80013f8 <HAL_GetTick>
 80028f6:	1b00      	subs	r0, r0, r4
 80028f8:	2802      	cmp	r0, #2
 80028fa:	d852      	bhi.n	80029a2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fc:	682b      	ldr	r3, [r5, #0]
 80028fe:	4233      	tst	r3, r6
 8002900:	d1f7      	bne.n	80028f2 <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 8002902:	2000      	movs	r0, #0
 8002904:	e00b      	b.n	800291e <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002906:	684a      	ldr	r2, [r1, #4]
 8002908:	03d2      	lsls	r2, r2, #15
 800290a:	d500      	bpl.n	800290e <HAL_RCC_OscConfig+0x1e2>
 800290c:	e75d      	b.n	80027ca <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	4a51      	ldr	r2, [pc, #324]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	0792      	lsls	r2, r2, #30
 8002914:	d539      	bpl.n	800298a <HAL_RCC_OscConfig+0x25e>
 8002916:	68e2      	ldr	r2, [r4, #12]
 8002918:	2a01      	cmp	r2, #1
 800291a:	d036      	beq.n	800298a <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 800291c:	2001      	movs	r0, #1
}
 800291e:	b003      	add	sp, #12
 8002920:	bcc0      	pop	{r6, r7}
 8002922:	46b9      	mov	r9, r7
 8002924:	46b0      	mov	r8, r6
 8002926:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8002928:	2201      	movs	r2, #1
 800292a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 800292e:	4393      	bics	r3, r2
 8002930:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002932:	f7fe fd61 	bl	80013f8 <HAL_GetTick>
 8002936:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002938:	e004      	b.n	8002944 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800293a:	f7fe fd5d 	bl	80013f8 <HAL_GetTick>
 800293e:	1b80      	subs	r0, r0, r6
 8002940:	2802      	cmp	r0, #2
 8002942:	d82e      	bhi.n	80029a2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002944:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002946:	421f      	tst	r7, r3
 8002948:	d1f7      	bne.n	800293a <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800294a:	6823      	ldr	r3, [r4, #0]
 800294c:	e7a3      	b.n	8002896 <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800294e:	6842      	ldr	r2, [r0, #4]
 8002950:	03d2      	lsls	r2, r2, #15
 8002952:	d400      	bmi.n	8002956 <HAL_RCC_OscConfig+0x22a>
 8002954:	e702      	b.n	800275c <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002956:	4a3f      	ldr	r2, [pc, #252]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
 8002958:	6812      	ldr	r2, [r2, #0]
 800295a:	0392      	lsls	r2, r2, #14
 800295c:	d400      	bmi.n	8002960 <HAL_RCC_OscConfig+0x234>
 800295e:	e727      	b.n	80027b0 <HAL_RCC_OscConfig+0x84>
 8002960:	6862      	ldr	r2, [r4, #4]
 8002962:	2a00      	cmp	r2, #0
 8002964:	d000      	beq.n	8002968 <HAL_RCC_OscConfig+0x23c>
 8002966:	e723      	b.n	80027b0 <HAL_RCC_OscConfig+0x84>
 8002968:	e7d8      	b.n	800291c <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296a:	6833      	ldr	r3, [r6, #0]
 800296c:	433b      	orrs	r3, r7
 800296e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002970:	f7fe fd42 	bl	80013f8 <HAL_GetTick>
 8002974:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002976:	e004      	b.n	8002982 <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002978:	f7fe fd3e 	bl	80013f8 <HAL_GetTick>
 800297c:	1b40      	subs	r0, r0, r5
 800297e:	2864      	cmp	r0, #100	; 0x64
 8002980:	d80f      	bhi.n	80029a2 <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002982:	6833      	ldr	r3, [r6, #0]
 8002984:	423b      	tst	r3, r7
 8002986:	d0f7      	beq.n	8002978 <HAL_RCC_OscConfig+0x24c>
 8002988:	e75a      	b.n	8002840 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298a:	25f8      	movs	r5, #248	; 0xf8
 800298c:	4831      	ldr	r0, [pc, #196]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
 800298e:	6922      	ldr	r2, [r4, #16]
 8002990:	6801      	ldr	r1, [r0, #0]
 8002992:	00d2      	lsls	r2, r2, #3
 8002994:	43a9      	bics	r1, r5
 8002996:	430a      	orrs	r2, r1
 8002998:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299a:	071a      	lsls	r2, r3, #28
 800299c:	d400      	bmi.n	80029a0 <HAL_RCC_OscConfig+0x274>
 800299e:	e735      	b.n	800280c <HAL_RCC_OscConfig+0xe0>
 80029a0:	e762      	b.n	8002868 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 80029a2:	2003      	movs	r0, #3
 80029a4:	e7bb      	b.n	800291e <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a6:	4d2b      	ldr	r5, [pc, #172]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
 80029a8:	4a2b      	ldr	r2, [pc, #172]	; (8002a58 <HAL_RCC_OscConfig+0x32c>)
 80029aa:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ac:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ae:	4013      	ands	r3, r2
 80029b0:	602b      	str	r3, [r5, #0]
 80029b2:	682b      	ldr	r3, [r5, #0]
 80029b4:	4a29      	ldr	r2, [pc, #164]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b6:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b8:	4013      	ands	r3, r2
 80029ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80029bc:	f7fe fd1c 	bl	80013f8 <HAL_GetTick>
 80029c0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c2:	e004      	b.n	80029ce <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c4:	f7fe fd18 	bl	80013f8 <HAL_GetTick>
 80029c8:	1b80      	subs	r0, r0, r6
 80029ca:	2864      	cmp	r0, #100	; 0x64
 80029cc:	d8e9      	bhi.n	80029a2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	682b      	ldr	r3, [r5, #0]
 80029d0:	423b      	tst	r3, r7
 80029d2:	d1f7      	bne.n	80029c4 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	e6eb      	b.n	80027b0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d8:	2201      	movs	r2, #1
 80029da:	4e1e      	ldr	r6, [pc, #120]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	4d22      	ldr	r5, [pc, #136]	; (8002a68 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029de:	6a33      	ldr	r3, [r6, #32]
 80029e0:	4393      	bics	r3, r2
 80029e2:	6233      	str	r3, [r6, #32]
 80029e4:	6a33      	ldr	r3, [r6, #32]
 80029e6:	3203      	adds	r2, #3
 80029e8:	4393      	bics	r3, r2
 80029ea:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80029ec:	f7fe fd04 	bl	80013f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f0:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 80029f2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f4:	4698      	mov	r8, r3
 80029f6:	e004      	b.n	8002a02 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f8:	f7fe fcfe 	bl	80013f8 <HAL_GetTick>
 80029fc:	1bc0      	subs	r0, r0, r7
 80029fe:	42a8      	cmp	r0, r5
 8002a00:	d8cf      	bhi.n	80029a2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a02:	4642      	mov	r2, r8
 8002a04:	6a33      	ldr	r3, [r6, #32]
 8002a06:	421a      	tst	r2, r3
 8002a08:	d1f6      	bne.n	80029f8 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8002a0a:	464b      	mov	r3, r9
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d04f      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	e742      	b.n	800289a <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8002a14:	2201      	movs	r2, #1
 8002a16:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a18:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8002a1a:	4393      	bics	r3, r2
 8002a1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fceb 	bl	80013f8 <HAL_GetTick>
 8002a22:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a24:	e004      	b.n	8002a30 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a26:	f7fe fce7 	bl	80013f8 <HAL_GetTick>
 8002a2a:	1b80      	subs	r0, r0, r6
 8002a2c:	2802      	cmp	r0, #2
 8002a2e:	d8b8      	bhi.n	80029a2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a30:	682b      	ldr	r3, [r5, #0]
 8002a32:	421f      	tst	r7, r3
 8002a34:	d1f7      	bne.n	8002a26 <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	e6e6      	b.n	8002808 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3a:	4906      	ldr	r1, [pc, #24]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
 8002a3c:	6a0a      	ldr	r2, [r1, #32]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8002a42:	f7fe fcd9 	bl	80013f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a46:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8002a48:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	4d06      	ldr	r5, [pc, #24]	; (8002a68 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a50:	e011      	b.n	8002a76 <HAL_RCC_OscConfig+0x34a>
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	40021000 	.word	0x40021000
 8002a58:	fffeffff 	.word	0xfffeffff
 8002a5c:	fffbffff 	.word	0xfffbffff
 8002a60:	40007000 	.word	0x40007000
 8002a64:	feffffff 	.word	0xfeffffff
 8002a68:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a6c:	f7fe fcc4 	bl	80013f8 <HAL_GetTick>
 8002a70:	1b80      	subs	r0, r0, r6
 8002a72:	42a8      	cmp	r0, r5
 8002a74:	d895      	bhi.n	80029a2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a76:	4643      	mov	r3, r8
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	421f      	tst	r7, r3
 8002a7c:	d0f6      	beq.n	8002a6c <HAL_RCC_OscConfig+0x340>
 8002a7e:	e7c4      	b.n	8002a0a <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a80:	2204      	movs	r2, #4
 8002a82:	4d53      	ldr	r5, [pc, #332]	; (8002bd0 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a84:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a86:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002a8c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002a8e:	3a03      	subs	r2, #3
 8002a90:	4393      	bics	r3, r2
 8002a92:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002a94:	f7fe fcb0 	bl	80013f8 <HAL_GetTick>
 8002a98:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a9a:	e005      	b.n	8002aa8 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a9c:	f7fe fcac 	bl	80013f8 <HAL_GetTick>
 8002aa0:	1b80      	subs	r0, r0, r6
 8002aa2:	2802      	cmp	r0, #2
 8002aa4:	d900      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x37c>
 8002aa6:	e77c      	b.n	80029a2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002aa8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002aaa:	421f      	tst	r7, r3
 8002aac:	d1f6      	bne.n	8002a9c <HAL_RCC_OscConfig+0x370>
 8002aae:	e709      	b.n	80028c4 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab0:	4a47      	ldr	r2, [pc, #284]	; (8002bd0 <HAL_RCC_OscConfig+0x4a4>)
 8002ab2:	4948      	ldr	r1, [pc, #288]	; (8002bd4 <HAL_RCC_OscConfig+0x4a8>)
 8002ab4:	69d3      	ldr	r3, [r2, #28]
 8002ab6:	400b      	ands	r3, r1
 8002ab8:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	e6ed      	b.n	800289a <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <HAL_RCC_OscConfig+0x4a4>)
 8002ac2:	02d2      	lsls	r2, r2, #11
 8002ac4:	6819      	ldr	r1, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	2280      	movs	r2, #128	; 0x80
 8002acc:	6819      	ldr	r1, [r3, #0]
 8002ace:	0252      	lsls	r2, r2, #9
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e65b      	b.n	800278e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad6:	2104      	movs	r1, #4
 8002ad8:	4b3d      	ldr	r3, [pc, #244]	; (8002bd0 <HAL_RCC_OscConfig+0x4a4>)
 8002ada:	6a1a      	ldr	r2, [r3, #32]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	621a      	str	r2, [r3, #32]
 8002ae0:	6a1a      	ldr	r2, [r3, #32]
 8002ae2:	3903      	subs	r1, #3
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	621a      	str	r2, [r3, #32]
 8002ae8:	e7ab      	b.n	8002a42 <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d100      	bne.n	8002af0 <HAL_RCC_OscConfig+0x3c4>
 8002aee:	e715      	b.n	800291c <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af0:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8002af2:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002af6:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8002af8:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 8002afa:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afc:	4013      	ands	r3, r2
 8002afe:	428b      	cmp	r3, r1
 8002b00:	d000      	beq.n	8002b04 <HAL_RCC_OscConfig+0x3d8>
 8002b02:	e70c      	b.n	800291e <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b04:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b08:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0a:	428b      	cmp	r3, r1
 8002b0c:	d000      	beq.n	8002b10 <HAL_RCC_OscConfig+0x3e4>
 8002b0e:	e706      	b.n	800291e <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b10:	23f0      	movs	r3, #240	; 0xf0
 8002b12:	039b      	lsls	r3, r3, #14
 8002b14:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b18:	1ad2      	subs	r2, r2, r3
 8002b1a:	1e53      	subs	r3, r2, #1
 8002b1c:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 8002b1e:	b2d0      	uxtb	r0, r2
 8002b20:	e6fd      	b.n	800291e <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b22:	2104      	movs	r1, #4
 8002b24:	4d2a      	ldr	r5, [pc, #168]	; (8002bd0 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b26:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b28:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8002b2e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002b30:	4313      	orrs	r3, r2
 8002b32:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002b34:	f7fe fc60 	bl	80013f8 <HAL_GetTick>
 8002b38:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b3a:	e005      	b.n	8002b48 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b3c:	f7fe fc5c 	bl	80013f8 <HAL_GetTick>
 8002b40:	1b80      	subs	r0, r0, r6
 8002b42:	2802      	cmp	r0, #2
 8002b44:	d900      	bls.n	8002b48 <HAL_RCC_OscConfig+0x41c>
 8002b46:	e72c      	b.n	80029a2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b48:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002b4a:	421f      	tst	r7, r3
 8002b4c:	d0f6      	beq.n	8002b3c <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b4e:	21f8      	movs	r1, #248	; 0xf8
 8002b50:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002b52:	69a3      	ldr	r3, [r4, #24]
 8002b54:	438a      	bics	r2, r1
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	636b      	str	r3, [r5, #52]	; 0x34
 8002b5c:	e6b2      	b.n	80028c4 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8002b5e:	682b      	ldr	r3, [r5, #0]
 8002b60:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b62:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002b64:	4013      	ands	r3, r2
 8002b66:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b68:	f7fe fc46 	bl	80013f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6c:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8002b6e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b70:	e005      	b.n	8002b7e <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b72:	f7fe fc41 	bl	80013f8 <HAL_GetTick>
 8002b76:	1b80      	subs	r0, r0, r6
 8002b78:	2802      	cmp	r0, #2
 8002b7a:	d900      	bls.n	8002b7e <HAL_RCC_OscConfig+0x452>
 8002b7c:	e711      	b.n	80029a2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7e:	682b      	ldr	r3, [r5, #0]
 8002b80:	423b      	tst	r3, r7
 8002b82:	d1f6      	bne.n	8002b72 <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b84:	220f      	movs	r2, #15
 8002b86:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b88:	4e11      	ldr	r6, [pc, #68]	; (8002bd0 <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b8a:	4393      	bics	r3, r2
 8002b8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002b92:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b96:	686a      	ldr	r2, [r5, #4]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	4910      	ldr	r1, [pc, #64]	; (8002bdc <HAL_RCC_OscConfig+0x4b0>)
 8002b9c:	400a      	ands	r2, r1
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	682a      	ldr	r2, [r5, #0]
 8002ba6:	045b      	lsls	r3, r3, #17
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002bac:	f7fe fc24 	bl	80013f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb0:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8002bb2:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb4:	04ad      	lsls	r5, r5, #18
 8002bb6:	e005      	b.n	8002bc4 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe fc1e 	bl	80013f8 <HAL_GetTick>
 8002bbc:	1b00      	subs	r0, r0, r4
 8002bbe:	2802      	cmp	r0, #2
 8002bc0:	d900      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x498>
 8002bc2:	e6ee      	b.n	80029a2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc4:	6833      	ldr	r3, [r6, #0]
 8002bc6:	422b      	tst	r3, r5
 8002bc8:	d0f6      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 8002bca:	2000      	movs	r0, #0
 8002bcc:	e6a7      	b.n	800291e <HAL_RCC_OscConfig+0x1f2>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	efffffff 	.word	0xefffffff
 8002bd8:	feffffff 	.word	0xfeffffff
 8002bdc:	ffc2ffff 	.word	0xffc2ffff

08002be0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	46ce      	mov	lr, r9
 8002be4:	4647      	mov	r7, r8
 8002be6:	0004      	movs	r4, r0
 8002be8:	000d      	movs	r5, r1
 8002bea:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bec:	2800      	cmp	r0, #0
 8002bee:	d00d      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	494a      	ldr	r1, [pc, #296]	; (8002d1c <HAL_RCC_ClockConfig+0x13c>)
 8002bf4:	680a      	ldr	r2, [r1, #0]
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	42aa      	cmp	r2, r5
 8002bfa:	d20c      	bcs.n	8002c16 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfc:	680a      	ldr	r2, [r1, #0]
 8002bfe:	439a      	bics	r2, r3
 8002c00:	432a      	orrs	r2, r5
 8002c02:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c04:	680a      	ldr	r2, [r1, #0]
 8002c06:	4013      	ands	r3, r2
 8002c08:	42ab      	cmp	r3, r5
 8002c0a:	d004      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8002c0c:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8002c0e:	bcc0      	pop	{r6, r7}
 8002c10:	46b9      	mov	r9, r7
 8002c12:	46b0      	mov	r8, r6
 8002c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c16:	6823      	ldr	r3, [r4, #0]
 8002c18:	079a      	lsls	r2, r3, #30
 8002c1a:	d50e      	bpl.n	8002c3a <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1c:	075a      	lsls	r2, r3, #29
 8002c1e:	d505      	bpl.n	8002c2c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c20:	22e0      	movs	r2, #224	; 0xe0
 8002c22:	493f      	ldr	r1, [pc, #252]	; (8002d20 <HAL_RCC_ClockConfig+0x140>)
 8002c24:	00d2      	lsls	r2, r2, #3
 8002c26:	6848      	ldr	r0, [r1, #4]
 8002c28:	4302      	orrs	r2, r0
 8002c2a:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c2c:	20f0      	movs	r0, #240	; 0xf0
 8002c2e:	493c      	ldr	r1, [pc, #240]	; (8002d20 <HAL_RCC_ClockConfig+0x140>)
 8002c30:	684a      	ldr	r2, [r1, #4]
 8002c32:	4382      	bics	r2, r0
 8002c34:	68a0      	ldr	r0, [r4, #8]
 8002c36:	4302      	orrs	r2, r0
 8002c38:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c3a:	07db      	lsls	r3, r3, #31
 8002c3c:	d522      	bpl.n	8002c84 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <HAL_RCC_ClockConfig+0x140>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c40:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c44:	2a01      	cmp	r2, #1
 8002c46:	d05b      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x120>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c48:	2a02      	cmp	r2, #2
 8002c4a:	d056      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x11a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4c:	079b      	lsls	r3, r3, #30
 8002c4e:	d5dd      	bpl.n	8002c0c <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c50:	2103      	movs	r1, #3
 8002c52:	4e33      	ldr	r6, [pc, #204]	; (8002d20 <HAL_RCC_ClockConfig+0x140>)
 8002c54:	6873      	ldr	r3, [r6, #4]
 8002c56:	438b      	bics	r3, r1
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002c5c:	f7fe fbcc 	bl	80013f8 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c60:	230c      	movs	r3, #12
 8002c62:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c64:	4b2f      	ldr	r3, [pc, #188]	; (8002d24 <HAL_RCC_ClockConfig+0x144>)
    tickstart = HAL_GetTick();
 8002c66:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c68:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	e004      	b.n	8002c76 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6c:	f7fe fbc4 	bl	80013f8 <HAL_GetTick>
 8002c70:	1bc0      	subs	r0, r0, r7
 8002c72:	4548      	cmp	r0, r9
 8002c74:	d847      	bhi.n	8002d06 <HAL_RCC_ClockConfig+0x126>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c76:	4643      	mov	r3, r8
 8002c78:	6872      	ldr	r2, [r6, #4]
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	6863      	ldr	r3, [r4, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1f3      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c84:	2101      	movs	r1, #1
 8002c86:	4a25      	ldr	r2, [pc, #148]	; (8002d1c <HAL_RCC_ClockConfig+0x13c>)
 8002c88:	6813      	ldr	r3, [r2, #0]
 8002c8a:	400b      	ands	r3, r1
 8002c8c:	42ab      	cmp	r3, r5
 8002c8e:	d905      	bls.n	8002c9c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c90:	6813      	ldr	r3, [r2, #0]
 8002c92:	438b      	bics	r3, r1
 8002c94:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	6813      	ldr	r3, [r2, #0]
 8002c98:	4219      	tst	r1, r3
 8002c9a:	d1b7      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	075b      	lsls	r3, r3, #29
 8002ca0:	d506      	bpl.n	8002cb0 <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca2:	4a1f      	ldr	r2, [pc, #124]	; (8002d20 <HAL_RCC_ClockConfig+0x140>)
 8002ca4:	4920      	ldr	r1, [pc, #128]	; (8002d28 <HAL_RCC_ClockConfig+0x148>)
 8002ca6:	6853      	ldr	r3, [r2, #4]
 8002ca8:	400b      	ands	r3, r1
 8002caa:	68e1      	ldr	r1, [r4, #12]
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6053      	str	r3, [r2, #4]
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cb0:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8002cb2:	491b      	ldr	r1, [pc, #108]	; (8002d20 <HAL_RCC_ClockConfig+0x140>)
 8002cb4:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d00e      	beq.n	8002cda <HAL_RCC_ClockConfig+0xfa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cbc:	481b      	ldr	r0, [pc, #108]	; (8002d2c <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cbe:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <HAL_RCC_ClockConfig+0x140>)
 8002cc0:	4a1b      	ldr	r2, [pc, #108]	; (8002d30 <HAL_RCC_ClockConfig+0x150>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	491b      	ldr	r1, [pc, #108]	; (8002d34 <HAL_RCC_ClockConfig+0x154>)
 8002cc6:	061b      	lsls	r3, r3, #24
 8002cc8:	0f1b      	lsrs	r3, r3, #28
 8002cca:	5cd3      	ldrb	r3, [r2, r3]
 8002ccc:	40d8      	lsrs	r0, r3
 8002cce:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002cd0:	2003      	movs	r0, #3
 8002cd2:	f7fe fb4f 	bl	8001374 <HAL_InitTick>
  return HAL_OK;
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	e799      	b.n	8002c0e <HAL_RCC_ClockConfig+0x2e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002cda:	250f      	movs	r5, #15
 8002cdc:	4816      	ldr	r0, [pc, #88]	; (8002d38 <HAL_RCC_ClockConfig+0x158>)
 8002cde:	0c93      	lsrs	r3, r2, #18
 8002ce0:	402b      	ands	r3, r5
 8002ce2:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002ce4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ce6:	03d2      	lsls	r2, r2, #15
 8002ce8:	d50f      	bpl.n	8002d0a <HAL_RCC_ClockConfig+0x12a>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002cea:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <HAL_RCC_ClockConfig+0x15c>)
 8002cec:	400d      	ands	r5, r1
 8002cee:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cf0:	480e      	ldr	r0, [pc, #56]	; (8002d2c <HAL_RCC_ClockConfig+0x14c>)
 8002cf2:	f7fd fa09 	bl	8000108 <__udivsi3>
 8002cf6:	4360      	muls	r0, r4
 8002cf8:	e7e1      	b.n	8002cbe <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfa:	019b      	lsls	r3, r3, #6
 8002cfc:	d4a8      	bmi.n	8002c50 <HAL_RCC_ClockConfig+0x70>
 8002cfe:	e785      	b.n	8002c0c <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d00:	039b      	lsls	r3, r3, #14
 8002d02:	d4a5      	bmi.n	8002c50 <HAL_RCC_ClockConfig+0x70>
 8002d04:	e782      	b.n	8002c0c <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8002d06:	2003      	movs	r0, #3
 8002d08:	e781      	b.n	8002c0e <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d0a:	0163      	lsls	r3, r4, #5
 8002d0c:	1b1b      	subs	r3, r3, r4
 8002d0e:	0198      	lsls	r0, r3, #6
 8002d10:	1ac0      	subs	r0, r0, r3
 8002d12:	00c0      	lsls	r0, r0, #3
 8002d14:	1900      	adds	r0, r0, r4
 8002d16:	0200      	lsls	r0, r0, #8
 8002d18:	e7d1      	b.n	8002cbe <HAL_RCC_ClockConfig+0xde>
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	40021000 	.word	0x40021000
 8002d24:	00001388 	.word	0x00001388
 8002d28:	fffff8ff 	.word	0xfffff8ff
 8002d2c:	007a1200 	.word	0x007a1200
 8002d30:	08005dcc 	.word	0x08005dcc
 8002d34:	20000000 	.word	0x20000000
 8002d38:	08005de4 	.word	0x08005de4
 8002d3c:	08005df4 	.word	0x08005df4

08002d40 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8002d40:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8002d42:	4910      	ldr	r1, [pc, #64]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x44>)
{
 8002d44:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8002d46:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x12>
      sysclockfreq = HSE_VALUE;
 8002d4e:	480e      	ldr	r0, [pc, #56]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002d50:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002d52:	250f      	movs	r5, #15
 8002d54:	480d      	ldr	r0, [pc, #52]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x4c>)
 8002d56:	0c93      	lsrs	r3, r2, #18
 8002d58:	402b      	ands	r3, r5
 8002d5a:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002d5c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d5e:	03d2      	lsls	r2, r2, #15
 8002d60:	d507      	bpl.n	8002d72 <HAL_RCC_GetSysClockFreq+0x32>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002d62:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x50>)
 8002d64:	400d      	ands	r5, r1
 8002d66:	5d59      	ldrb	r1, [r3, r5]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d68:	4807      	ldr	r0, [pc, #28]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x48>)
 8002d6a:	f7fd f9cd 	bl	8000108 <__udivsi3>
 8002d6e:	4360      	muls	r0, r4
 8002d70:	e7ee      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x10>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d72:	0162      	lsls	r2, r4, #5
 8002d74:	1b12      	subs	r2, r2, r4
 8002d76:	0193      	lsls	r3, r2, #6
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	191b      	adds	r3, r3, r4
 8002d7e:	0218      	lsls	r0, r3, #8
 8002d80:	e7e6      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x10>
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	40021000 	.word	0x40021000
 8002d88:	007a1200 	.word	0x007a1200
 8002d8c:	08005de4 	.word	0x08005de4
 8002d90:	08005df4 	.word	0x08005df4

08002d94 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8002d96:	4a05      	ldr	r2, [pc, #20]	; (8002dac <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4905      	ldr	r1, [pc, #20]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002d9c:	055b      	lsls	r3, r3, #21
 8002d9e:	0f5b      	lsrs	r3, r3, #29
 8002da0:	5ccb      	ldrb	r3, [r1, r3]
 8002da2:	6810      	ldr	r0, [r2, #0]
 8002da4:	40d8      	lsrs	r0, r3
}    
 8002da6:	4770      	bx	lr
 8002da8:	40021000 	.word	0x40021000
 8002dac:	20000000 	.word	0x20000000
 8002db0:	08005ddc 	.word	0x08005ddc

08002db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db6:	46ce      	mov	lr, r9
 8002db8:	4647      	mov	r7, r8
 8002dba:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dbc:	6803      	ldr	r3, [r0, #0]
{
 8002dbe:	0004      	movs	r4, r0
 8002dc0:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dc2:	03da      	lsls	r2, r3, #15
 8002dc4:	d530      	bpl.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	4b43      	ldr	r3, [pc, #268]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002dca:	0552      	lsls	r2, r2, #21
 8002dcc:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002dce:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd0:	4211      	tst	r1, r2
 8002dd2:	d041      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd4:	2680      	movs	r6, #128	; 0x80
 8002dd6:	4d41      	ldr	r5, [pc, #260]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8002dd8:	0076      	lsls	r6, r6, #1
 8002dda:	682b      	ldr	r3, [r5, #0]
 8002ddc:	4233      	tst	r3, r6
 8002dde:	d049      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002de0:	4d3d      	ldr	r5, [pc, #244]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002de2:	23c0      	movs	r3, #192	; 0xc0
 8002de4:	6a2a      	ldr	r2, [r5, #32]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	0010      	movs	r0, r2
 8002dea:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dec:	421a      	tst	r2, r3
 8002dee:	d063      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002df0:	6861      	ldr	r1, [r4, #4]
 8002df2:	400b      	ands	r3, r1
 8002df4:	4283      	cmp	r3, r0
 8002df6:	d00e      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002df8:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dfa:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dfc:	6a2e      	ldr	r6, [r5, #32]
 8002dfe:	0240      	lsls	r0, r0, #9
 8002e00:	4330      	orrs	r0, r6
 8002e02:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e04:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e06:	4a36      	ldr	r2, [pc, #216]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e08:	4e36      	ldr	r6, [pc, #216]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e0a:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e0c:	4030      	ands	r0, r6
 8002e0e:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e10:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e12:	07db      	lsls	r3, r3, #31
 8002e14:	d43f      	bmi.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e16:	4a30      	ldr	r2, [pc, #192]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002e18:	4831      	ldr	r0, [pc, #196]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002e1a:	6a13      	ldr	r3, [r2, #32]
 8002e1c:	4003      	ands	r3, r0
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e22:	2f01      	cmp	r7, #1
 8002e24:	d051      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	07da      	lsls	r2, r3, #31
 8002e2a:	d506      	bpl.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e2c:	2003      	movs	r0, #3
 8002e2e:	492a      	ldr	r1, [pc, #168]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002e30:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002e32:	4382      	bics	r2, r0
 8002e34:	68a0      	ldr	r0, [r4, #8]
 8002e36:	4302      	orrs	r2, r0
 8002e38:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002e3a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e3c:	069b      	lsls	r3, r3, #26
 8002e3e:	d506      	bpl.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e40:	2110      	movs	r1, #16
 8002e42:	4a25      	ldr	r2, [pc, #148]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002e44:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002e46:	438b      	bics	r3, r1
 8002e48:	68e1      	ldr	r1, [r4, #12]
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002e4e:	b003      	add	sp, #12
 8002e50:	bcc0      	pop	{r6, r7}
 8002e52:	46b9      	mov	r9, r7
 8002e54:	46b0      	mov	r8, r6
 8002e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e58:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	4d1f      	ldr	r5, [pc, #124]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	4311      	orrs	r1, r2
 8002e60:	61d9      	str	r1, [r3, #28]
 8002e62:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e66:	4013      	ands	r3, r2
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 8002e6e:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e70:	4233      	tst	r3, r6
 8002e72:	d1b5      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e74:	682b      	ldr	r3, [r5, #0]
 8002e76:	4333      	orrs	r3, r6
 8002e78:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002e7a:	f7fe fabd 	bl	80013f8 <HAL_GetTick>
 8002e7e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e80:	682b      	ldr	r3, [r5, #0]
 8002e82:	4233      	tst	r3, r6
 8002e84:	d1ac      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e86:	f7fe fab7 	bl	80013f8 <HAL_GetTick>
 8002e8a:	4643      	mov	r3, r8
 8002e8c:	1ac0      	subs	r0, r0, r3
 8002e8e:	2864      	cmp	r0, #100	; 0x64
 8002e90:	d9f6      	bls.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 8002e92:	2003      	movs	r0, #3
 8002e94:	e7db      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8002e96:	f7fe faaf 	bl	80013f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 8002ea0:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea4:	e004      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea6:	f7fe faa7 	bl	80013f8 <HAL_GetTick>
 8002eaa:	1b80      	subs	r0, r0, r6
 8002eac:	4548      	cmp	r0, r9
 8002eae:	d8f0      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb0:	4642      	mov	r2, r8
 8002eb2:	6a2b      	ldr	r3, [r5, #32]
 8002eb4:	421a      	tst	r2, r3
 8002eb6:	d0f6      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eb8:	4a07      	ldr	r2, [pc, #28]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002eba:	4809      	ldr	r0, [pc, #36]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002ebc:	6a13      	ldr	r3, [r2, #32]
 8002ebe:	6861      	ldr	r1, [r4, #4]
 8002ec0:	4003      	ands	r3, r0
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 8002ec6:	2f01      	cmp	r7, #1
 8002ec8:	d1ad      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eca:	69d3      	ldr	r3, [r2, #28]
 8002ecc:	4907      	ldr	r1, [pc, #28]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002ece:	400b      	ands	r3, r1
 8002ed0:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	e7a8      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40007000 	.word	0x40007000
 8002ee0:	fffffcff 	.word	0xfffffcff
 8002ee4:	fffeffff 	.word	0xfffeffff
 8002ee8:	00001388 	.word	0x00001388
 8002eec:	efffffff 	.word	0xefffffff

08002ef0 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef2:	46d6      	mov	lr, sl
 8002ef4:	464f      	mov	r7, r9
 8002ef6:	4646      	mov	r6, r8
 8002ef8:	b5c0      	push	{r6, r7, lr}
 8002efa:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002efc:	466b      	mov	r3, sp
 8002efe:	1cdc      	adds	r4, r3, #3
 8002f00:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002f02:	0016      	movs	r6, r2
 8002f04:	000f      	movs	r7, r1
  __IO uint8_t  tmpreg8 = 0;
 8002f06:	7023      	strb	r3, [r4, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002f08:	4680      	mov	r8, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f0a:	f7fe fa75 	bl	80013f8 <HAL_GetTick>
 8002f0e:	19f6      	adds	r6, r6, r7
 8002f10:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8002f12:	f7fe fa71 	bl	80013f8 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f16:	4643      	mov	r3, r8
 8002f18:	681d      	ldr	r5, [r3, #0]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f1a:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x104>)
  tmp_tickstart = HAL_GetTick();
 8002f1c:	4681      	mov	r9, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	009a      	lsls	r2, r3, #2
 8002f22:	18d2      	adds	r2, r2, r3
 8002f24:	00d3      	lsls	r3, r2, #3
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	0d1b      	lsrs	r3, r3, #20
 8002f2a:	4373      	muls	r3, r6
 8002f2c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f2e:	23c0      	movs	r3, #192	; 0xc0
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	002a      	movs	r2, r5
 8002f34:	469a      	mov	sl, r3
 8002f36:	1c7b      	adds	r3, r7, #1
 8002f38:	d112      	bne.n	8002f60 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x70>
 8002f3a:	21c0      	movs	r1, #192	; 0xc0
 8002f3c:	6893      	ldr	r3, [r2, #8]
 8002f3e:	00c9      	lsls	r1, r1, #3
 8002f40:	420b      	tst	r3, r1
 8002f42:	d006      	beq.n	8002f52 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002f44:	7b2b      	ldrb	r3, [r5, #12]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	7023      	strb	r3, [r4, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002f4a:	7823      	ldrb	r3, [r4, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f4c:	6893      	ldr	r3, [r2, #8]
 8002f4e:	420b      	tst	r3, r1
 8002f50:	d1f8      	bne.n	8002f44 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      }
      count--;
    }
  }

  return HAL_OK;
 8002f52:	2000      	movs	r0, #0
}
 8002f54:	b002      	add	sp, #8
 8002f56:	bce0      	pop	{r5, r6, r7}
 8002f58:	46ba      	mov	sl, r7
 8002f5a:	46b1      	mov	r9, r6
 8002f5c:	46a8      	mov	r8, r5
 8002f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8002f60:	6893      	ldr	r3, [r2, #8]
 8002f62:	4652      	mov	r2, sl
 8002f64:	4213      	tst	r3, r2
 8002f66:	d0f4      	beq.n	8002f52 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
      tmpreg8 = *ptmpreg8;
 8002f68:	7b2b      	ldrb	r3, [r5, #12]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	7023      	strb	r3, [r4, #0]
      UNUSED(tmpreg8);
 8002f6e:	7823      	ldrb	r3, [r4, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f70:	f7fe fa42 	bl	80013f8 <HAL_GetTick>
 8002f74:	464b      	mov	r3, r9
 8002f76:	1ac0      	subs	r0, r0, r3
 8002f78:	42b0      	cmp	r0, r6
 8002f7a:	d20a      	bcs.n	8002f92 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa2>
      if (count == 0U)
 8002f7c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002f7e:	1e5a      	subs	r2, r3, #1
 8002f80:	4193      	sbcs	r3, r2
 8002f82:	425b      	negs	r3, r3
 8002f84:	401e      	ands	r6, r3
      count--;
 8002f86:	9b01      	ldr	r3, [sp, #4]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f8c:	4643      	mov	r3, r8
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	e7d1      	b.n	8002f36 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x46>
 8002f92:	4643      	mov	r3, r8
 8002f94:	21e0      	movs	r1, #224	; 0xe0
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f9c:	4641      	mov	r1, r8
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f9e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa0:	2282      	movs	r2, #130	; 0x82
 8002fa2:	6849      	ldr	r1, [r1, #4]
 8002fa4:	0052      	lsls	r2, r2, #1
 8002fa6:	4291      	cmp	r1, r2
 8002fa8:	d015      	beq.n	8002fd6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002faa:	4642      	mov	r2, r8
 8002fac:	2180      	movs	r1, #128	; 0x80
 8002fae:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002fb0:	0189      	lsls	r1, r1, #6
 8002fb2:	428a      	cmp	r2, r1
 8002fb4:	d106      	bne.n	8002fc4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>
          SPI_RESET_CRC(hspi);
 8002fb6:	6819      	ldr	r1, [r3, #0]
 8002fb8:	480f      	ldr	r0, [pc, #60]	; (8002ff8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
 8002fba:	4001      	ands	r1, r0
 8002fbc:	6019      	str	r1, [r3, #0]
 8002fbe:	6819      	ldr	r1, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002fc4:	235d      	movs	r3, #93	; 0x5d
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	4641      	mov	r1, r8
 8002fca:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8002fd0:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8002fd2:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8002fd4:	e7be      	b.n	8002f54 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x64>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fd6:	4642      	mov	r2, r8
 8002fd8:	2180      	movs	r1, #128	; 0x80
 8002fda:	6892      	ldr	r2, [r2, #8]
 8002fdc:	0209      	lsls	r1, r1, #8
 8002fde:	428a      	cmp	r2, r1
 8002fe0:	d003      	beq.n	8002fea <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfa>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	00c9      	lsls	r1, r1, #3
 8002fe6:	428a      	cmp	r2, r1
 8002fe8:	d1df      	bne.n	8002faa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
          __HAL_SPI_DISABLE(hspi);
 8002fea:	2140      	movs	r1, #64	; 0x40
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	438a      	bics	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	e7da      	b.n	8002faa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
 8002ff4:	20000000 	.word	0x20000000
 8002ff8:	ffffdfff 	.word	0xffffdfff

08002ffc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ffe:	46de      	mov	lr, fp
 8003000:	4657      	mov	r7, sl
 8003002:	464e      	mov	r6, r9
 8003004:	4645      	mov	r5, r8
 8003006:	b5e0      	push	{r5, r6, r7, lr}
 8003008:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 800300a:	466b      	mov	r3, sp
{
 800300c:	0017      	movs	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 800300e:	2200      	movs	r2, #0
{
 8003010:	000d      	movs	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 8003012:	71da      	strb	r2, [r3, #7]
{
 8003014:	0004      	movs	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003016:	f7fe f9ef 	bl	80013f8 <HAL_GetTick>
 800301a:	19eb      	adds	r3, r5, r7
 800301c:	1a1e      	subs	r6, r3, r0
 800301e:	469a      	mov	sl, r3
  tmp_tickstart = HAL_GetTick();
 8003020:	f7fe f9ea 	bl	80013f8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003024:	4b47      	ldr	r3, [pc, #284]	; (8003144 <SPI_EndRxTxTransaction+0x148>)
  tmp_tickstart = HAL_GetTick();
 8003026:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003028:	4699      	mov	r9, r3
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	009a      	lsls	r2, r3, #2
 800302e:	18d2      	adds	r2, r2, r3
 8003030:	00d3      	lsls	r3, r2, #3
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	0d1b      	lsrs	r3, r3, #20
 8003036:	4373      	muls	r3, r6
 8003038:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 800303a:	23c0      	movs	r3, #192	; 0xc0
 800303c:	015b      	lsls	r3, r3, #5
 800303e:	469b      	mov	fp, r3
 8003040:	6822      	ldr	r2, [r4, #0]
 8003042:	1c6b      	adds	r3, r5, #1
 8003044:	d14a      	bne.n	80030dc <SPI_EndRxTxTransaction+0xe0>
 8003046:	21c0      	movs	r1, #192	; 0xc0
 8003048:	0149      	lsls	r1, r1, #5
 800304a:	6893      	ldr	r3, [r2, #8]
 800304c:	420b      	tst	r3, r1
 800304e:	d1fc      	bne.n	800304a <SPI_EndRxTxTransaction+0x4e>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003050:	f7fe f9d2 	bl	80013f8 <HAL_GetTick>
 8003054:	4653      	mov	r3, sl
 8003056:	1a1e      	subs	r6, r3, r0
  tmp_tickstart = HAL_GetTick();
 8003058:	f7fe f9ce 	bl	80013f8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800305c:	464b      	mov	r3, r9
 800305e:	681b      	ldr	r3, [r3, #0]
  tmp_tickstart = HAL_GetTick();
 8003060:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003062:	015b      	lsls	r3, r3, #5
 8003064:	0d1b      	lsrs	r3, r3, #20
 8003066:	4373      	muls	r3, r6
 8003068:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	4699      	mov	r9, r3
 800306e:	6822      	ldr	r2, [r4, #0]
 8003070:	1c6b      	adds	r3, r5, #1
 8003072:	d146      	bne.n	8003102 <SPI_EndRxTxTransaction+0x106>
 8003074:	2180      	movs	r1, #128	; 0x80
 8003076:	6893      	ldr	r3, [r2, #8]
 8003078:	4219      	tst	r1, r3
 800307a:	d1fc      	bne.n	8003076 <SPI_EndRxTxTransaction+0x7a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800307c:	003a      	movs	r2, r7
 800307e:	0029      	movs	r1, r5
 8003080:	0020      	movs	r0, r4
 8003082:	f7ff ff35 	bl	8002ef0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003086:	2800      	cmp	r0, #0
 8003088:	d122      	bne.n	80030d0 <SPI_EndRxTxTransaction+0xd4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800308a:	b005      	add	sp, #20
 800308c:	bcf0      	pop	{r4, r5, r6, r7}
 800308e:	46bb      	mov	fp, r7
 8003090:	46b2      	mov	sl, r6
 8003092:	46a9      	mov	r9, r5
 8003094:	46a0      	mov	r8, r4
 8003096:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003098:	21e0      	movs	r1, #224	; 0xe0
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	438a      	bics	r2, r1
 80030a0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a2:	2282      	movs	r2, #130	; 0x82
 80030a4:	6861      	ldr	r1, [r4, #4]
 80030a6:	0052      	lsls	r2, r2, #1
 80030a8:	4291      	cmp	r1, r2
 80030aa:	d03d      	beq.n	8003128 <SPI_EndRxTxTransaction+0x12c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030ac:	2180      	movs	r1, #128	; 0x80
 80030ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80030b0:	0189      	lsls	r1, r1, #6
 80030b2:	428a      	cmp	r2, r1
 80030b4:	d106      	bne.n	80030c4 <SPI_EndRxTxTransaction+0xc8>
          SPI_RESET_CRC(hspi);
 80030b6:	6819      	ldr	r1, [r3, #0]
 80030b8:	4823      	ldr	r0, [pc, #140]	; (8003148 <SPI_EndRxTxTransaction+0x14c>)
 80030ba:	4001      	ands	r1, r0
 80030bc:	6019      	str	r1, [r3, #0]
 80030be:	6819      	ldr	r1, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80030c4:	235d      	movs	r3, #93	; 0x5d
 80030c6:	2201      	movs	r2, #1
 80030c8:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hspi);
 80030ca:	2200      	movs	r2, #0
 80030cc:	3b01      	subs	r3, #1
 80030ce:	54e2      	strb	r2, [r4, r3]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030d0:	2220      	movs	r2, #32
 80030d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80030d4:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030d6:	4313      	orrs	r3, r2
 80030d8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80030da:	e7d6      	b.n	800308a <SPI_EndRxTxTransaction+0x8e>
  while ((hspi->Instance->SR & Fifo) != State)
 80030dc:	6893      	ldr	r3, [r2, #8]
 80030de:	465a      	mov	r2, fp
 80030e0:	4213      	tst	r3, r2
 80030e2:	d0b5      	beq.n	8003050 <SPI_EndRxTxTransaction+0x54>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030e4:	f7fe f988 	bl	80013f8 <HAL_GetTick>
 80030e8:	4643      	mov	r3, r8
 80030ea:	1ac0      	subs	r0, r0, r3
 80030ec:	42b0      	cmp	r0, r6
 80030ee:	d2d3      	bcs.n	8003098 <SPI_EndRxTxTransaction+0x9c>
      if (count == 0U)
 80030f0:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 80030f2:	1e5a      	subs	r2, r3, #1
 80030f4:	4193      	sbcs	r3, r2
 80030f6:	425b      	negs	r3, r3
 80030f8:	401e      	ands	r6, r3
      count--;
 80030fa:	9b02      	ldr	r3, [sp, #8]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	9302      	str	r3, [sp, #8]
 8003100:	e79e      	b.n	8003040 <SPI_EndRxTxTransaction+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003102:	6893      	ldr	r3, [r2, #8]
 8003104:	464a      	mov	r2, r9
 8003106:	421a      	tst	r2, r3
 8003108:	d0b8      	beq.n	800307c <SPI_EndRxTxTransaction+0x80>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800310a:	f7fe f975 	bl	80013f8 <HAL_GetTick>
 800310e:	4643      	mov	r3, r8
 8003110:	1ac0      	subs	r0, r0, r3
 8003112:	42b0      	cmp	r0, r6
 8003114:	d2c0      	bcs.n	8003098 <SPI_EndRxTxTransaction+0x9c>
      if (count == 0U)
 8003116:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8003118:	1e5a      	subs	r2, r3, #1
 800311a:	4193      	sbcs	r3, r2
 800311c:	425b      	negs	r3, r3
 800311e:	401e      	ands	r6, r3
      count--;
 8003120:	9b03      	ldr	r3, [sp, #12]
 8003122:	3b01      	subs	r3, #1
 8003124:	9303      	str	r3, [sp, #12]
 8003126:	e7a2      	b.n	800306e <SPI_EndRxTxTransaction+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003128:	2180      	movs	r1, #128	; 0x80
 800312a:	68a2      	ldr	r2, [r4, #8]
 800312c:	0209      	lsls	r1, r1, #8
 800312e:	428a      	cmp	r2, r1
 8003130:	d003      	beq.n	800313a <SPI_EndRxTxTransaction+0x13e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003132:	2180      	movs	r1, #128	; 0x80
 8003134:	00c9      	lsls	r1, r1, #3
 8003136:	428a      	cmp	r2, r1
 8003138:	d1b8      	bne.n	80030ac <SPI_EndRxTxTransaction+0xb0>
          __HAL_SPI_DISABLE(hspi);
 800313a:	2140      	movs	r1, #64	; 0x40
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	438a      	bics	r2, r1
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e7b3      	b.n	80030ac <SPI_EndRxTxTransaction+0xb0>
 8003144:	20000000 	.word	0x20000000
 8003148:	ffffdfff 	.word	0xffffdfff

0800314c <HAL_SPI_Init>:
{
 800314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314e:	46de      	mov	lr, fp
 8003150:	4657      	mov	r7, sl
 8003152:	464e      	mov	r6, r9
 8003154:	4645      	mov	r5, r8
 8003156:	0004      	movs	r4, r0
 8003158:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 800315a:	2800      	cmp	r0, #0
 800315c:	d100      	bne.n	8003160 <HAL_SPI_Init+0x14>
 800315e:	e094      	b.n	800328a <HAL_SPI_Init+0x13e>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003160:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003162:	2d00      	cmp	r5, #0
 8003164:	d06b      	beq.n	800323e <HAL_SPI_Init+0xf2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003166:	2300      	movs	r3, #0
 8003168:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800316a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800316c:	2300      	movs	r3, #0
 800316e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003170:	335d      	adds	r3, #93	; 0x5d
 8003172:	5ce3      	ldrb	r3, [r4, r3]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d06e      	beq.n	8003258 <HAL_SPI_Init+0x10c>
  hspi->State = HAL_SPI_STATE_BUSY;
 800317a:	235d      	movs	r3, #93	; 0x5d
 800317c:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 800317e:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8003180:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8003182:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003184:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8003186:	6813      	ldr	r3, [r2, #0]
 8003188:	438b      	bics	r3, r1
 800318a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800318c:	23e0      	movs	r3, #224	; 0xe0
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4298      	cmp	r0, r3
 8003192:	d968      	bls.n	8003266 <HAL_SPI_Init+0x11a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003194:	23f0      	movs	r3, #240	; 0xf0
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	4298      	cmp	r0, r3
 800319a:	d000      	beq.n	800319e <HAL_SPI_Init+0x52>
 800319c:	e077      	b.n	800328e <HAL_SPI_Init+0x142>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800319e:	2380      	movs	r3, #128	; 0x80
 80031a0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80031a2:	019b      	lsls	r3, r3, #6
 80031a4:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031a6:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031a8:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031aa:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031ac:	2682      	movs	r6, #130	; 0x82
 80031ae:	2784      	movs	r7, #132	; 0x84
 80031b0:	6863      	ldr	r3, [r4, #4]
 80031b2:	0076      	lsls	r6, r6, #1
 80031b4:	4033      	ands	r3, r6
 80031b6:	68a6      	ldr	r6, [r4, #8]
 80031b8:	023f      	lsls	r7, r7, #8
 80031ba:	403e      	ands	r6, r7
 80031bc:	2702      	movs	r7, #2
 80031be:	4333      	orrs	r3, r6
 80031c0:	6926      	ldr	r6, [r4, #16]
 80031c2:	69a1      	ldr	r1, [r4, #24]
 80031c4:	403e      	ands	r6, r7
 80031c6:	4333      	orrs	r3, r6
 80031c8:	2601      	movs	r6, #1
 80031ca:	6967      	ldr	r7, [r4, #20]
 80031cc:	46b2      	mov	sl, r6
 80031ce:	4037      	ands	r7, r6
 80031d0:	433b      	orrs	r3, r7
 80031d2:	2780      	movs	r7, #128	; 0x80
 80031d4:	00bf      	lsls	r7, r7, #2
 80031d6:	400f      	ands	r7, r1
 80031d8:	433b      	orrs	r3, r7
 80031da:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031dc:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031de:	46b8      	mov	r8, r7
 80031e0:	2738      	movs	r7, #56	; 0x38
 80031e2:	46b9      	mov	r9, r7
 80031e4:	4647      	mov	r7, r8
 80031e6:	464e      	mov	r6, r9
 80031e8:	4037      	ands	r7, r6
 80031ea:	6a26      	ldr	r6, [r4, #32]
 80031ec:	433b      	orrs	r3, r7
 80031ee:	46b0      	mov	r8, r6
 80031f0:	2680      	movs	r6, #128	; 0x80
 80031f2:	4647      	mov	r7, r8
 80031f4:	4037      	ands	r7, r6
 80031f6:	4666      	mov	r6, ip
 80031f8:	433b      	orrs	r3, r7
 80031fa:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031fc:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031fe:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003200:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003202:	4033      	ands	r3, r6
 8003204:	26f0      	movs	r6, #240	; 0xf0
 8003206:	0136      	lsls	r6, r6, #4
 8003208:	4030      	ands	r0, r6
 800320a:	4303      	orrs	r3, r0
 800320c:	2004      	movs	r0, #4
 800320e:	4001      	ands	r1, r0
 8003210:	430b      	orrs	r3, r1
 8003212:	2110      	movs	r1, #16
 8003214:	4029      	ands	r1, r5
 8003216:	430b      	orrs	r3, r1
 8003218:	4659      	mov	r1, fp
 800321a:	430b      	orrs	r3, r1
 800321c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800321e:	69d3      	ldr	r3, [r2, #28]
 8003220:	491c      	ldr	r1, [pc, #112]	; (8003294 <HAL_SPI_Init+0x148>)
  return HAL_OK;
 8003222:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003224:	400b      	ands	r3, r1
 8003226:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003228:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800322a:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800322c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800322e:	335d      	adds	r3, #93	; 0x5d
 8003230:	54e2      	strb	r2, [r4, r3]
}
 8003232:	bcf0      	pop	{r4, r5, r6, r7}
 8003234:	46bb      	mov	fp, r7
 8003236:	46b2      	mov	sl, r6
 8003238:	46a9      	mov	r9, r5
 800323a:	46a0      	mov	r8, r4
 800323c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800323e:	2382      	movs	r3, #130	; 0x82
 8003240:	6842      	ldr	r2, [r0, #4]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	429a      	cmp	r2, r3
 8003246:	d091      	beq.n	800316c <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003248:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800324a:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800324c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800324e:	335d      	adds	r3, #93	; 0x5d
 8003250:	5ce3      	ldrb	r3, [r4, r3]
 8003252:	b2da      	uxtb	r2, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d190      	bne.n	800317a <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 8003258:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 800325a:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800325c:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 800325e:	f7fd fe87 	bl	8000f70 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003262:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003264:	e789      	b.n	800317a <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003266:	4298      	cmp	r0, r3
 8003268:	d006      	beq.n	8003278 <HAL_SPI_Init+0x12c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	015b      	lsls	r3, r3, #5
 800326e:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003270:	2300      	movs	r3, #0
 8003272:	469c      	mov	ip, r3
 8003274:	62a3      	str	r3, [r4, #40]	; 0x28
 8003276:	e799      	b.n	80031ac <HAL_SPI_Init+0x60>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800327c:	019b      	lsls	r3, r3, #6
 800327e:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003280:	2380      	movs	r3, #128	; 0x80
 8003282:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003284:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003286:	469b      	mov	fp, r3
 8003288:	e790      	b.n	80031ac <HAL_SPI_Init+0x60>
    return HAL_ERROR;
 800328a:	2001      	movs	r0, #1
 800328c:	e7d1      	b.n	8003232 <HAL_SPI_Init+0xe6>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800328e:	2300      	movs	r3, #0
 8003290:	469b      	mov	fp, r3
 8003292:	e7ed      	b.n	8003270 <HAL_SPI_Init+0x124>
 8003294:	fffff7ff 	.word	0xfffff7ff

08003298 <HAL_SPI_TransmitReceive>:
{
 8003298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329a:	4647      	mov	r7, r8
 800329c:	46ce      	mov	lr, r9
 800329e:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 80032a0:	235c      	movs	r3, #92	; 0x5c
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80032a6:	5cc2      	ldrb	r2, [r0, r3]
{
 80032a8:	0004      	movs	r4, r0
 80032aa:	000f      	movs	r7, r1
  __HAL_LOCK(hspi);
 80032ac:	2a01      	cmp	r2, #1
 80032ae:	d100      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x1a>
 80032b0:	e09a      	b.n	80033e8 <HAL_SPI_TransmitReceive+0x150>
 80032b2:	2201      	movs	r2, #1
 80032b4:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80032b6:	f7fe f89f 	bl	80013f8 <HAL_GetTick>
  tmp_state           = hspi->State;
 80032ba:	235d      	movs	r3, #93	; 0x5d
 80032bc:	5ce3      	ldrb	r3, [r4, r3]
  tickstart = HAL_GetTick();
 80032be:	0006      	movs	r6, r0
  tmp_mode            = hspi->Init.Mode;
 80032c0:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 80032c2:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d010      	beq.n	80032ea <HAL_SPI_TransmitReceive+0x52>
 80032c8:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 80032ca:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d006      	beq.n	80032e0 <HAL_SPI_TransmitReceive+0x48>
  __HAL_UNLOCK(hspi);
 80032d2:	235c      	movs	r3, #92	; 0x5c
 80032d4:	2200      	movs	r2, #0
 80032d6:	54e2      	strb	r2, [r4, r3]
}
 80032d8:	bcc0      	pop	{r6, r7}
 80032da:	46b9      	mov	r9, r7
 80032dc:	46b0      	mov	r8, r6
 80032de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032e0:	68a3      	ldr	r3, [r4, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f5      	bne.n	80032d2 <HAL_SPI_TransmitReceive+0x3a>
 80032e6:	2904      	cmp	r1, #4
 80032e8:	d1f3      	bne.n	80032d2 <HAL_SPI_TransmitReceive+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d100      	bne.n	80032f0 <HAL_SPI_TransmitReceive+0x58>
 80032ee:	e079      	b.n	80033e4 <HAL_SPI_TransmitReceive+0x14c>
 80032f0:	4643      	mov	r3, r8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d076      	beq.n	80033e4 <HAL_SPI_TransmitReceive+0x14c>
 80032f6:	2d00      	cmp	r5, #0
 80032f8:	d074      	beq.n	80033e4 <HAL_SPI_TransmitReceive+0x14c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032fa:	235d      	movs	r3, #93	; 0x5d
 80032fc:	5ce1      	ldrb	r1, [r4, r3]
 80032fe:	2904      	cmp	r1, #4
 8003300:	d001      	beq.n	8003306 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003302:	2105      	movs	r1, #5
 8003304:	54e1      	strb	r1, [r4, r3]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003306:	4641      	mov	r1, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003308:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800330a:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800330c:	2146      	movs	r1, #70	; 0x46
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800330e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8003310:	5265      	strh	r5, [r4, r1]
  hspi->RxXferSize  = Size;
 8003312:	3902      	subs	r1, #2
 8003314:	5265      	strh	r5, [r4, r1]
  hspi->RxISR       = NULL;
 8003316:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003318:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800331a:	23e0      	movs	r3, #224	; 0xe0
 800331c:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800331e:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003320:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003322:	87a5      	strh	r5, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4299      	cmp	r1, r3
 8003328:	d960      	bls.n	80033ec <HAL_SPI_TransmitReceive+0x154>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800332a:	6821      	ldr	r1, [r4, #0]
 800332c:	489e      	ldr	r0, [pc, #632]	; (80035a8 <HAL_SPI_TransmitReceive+0x310>)
 800332e:	684b      	ldr	r3, [r1, #4]
 8003330:	4003      	ands	r3, r0
 8003332:	604b      	str	r3, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003334:	2340      	movs	r3, #64	; 0x40
 8003336:	6808      	ldr	r0, [r1, #0]
 8003338:	4203      	tst	r3, r0
 800333a:	d102      	bne.n	8003342 <HAL_SPI_TransmitReceive+0xaa>
    __HAL_SPI_ENABLE(hspi);
 800333c:	6808      	ldr	r0, [r1, #0]
 800333e:	4303      	orrs	r3, r0
 8003340:	600b      	str	r3, [r1, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003342:	2a00      	cmp	r2, #0
 8003344:	d000      	beq.n	8003348 <HAL_SPI_TransmitReceive+0xb0>
 8003346:	e0ac      	b.n	80034a2 <HAL_SPI_TransmitReceive+0x20a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003348:	883b      	ldrh	r3, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800334a:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800334c:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 800334e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003350:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003352:	3b01      	subs	r3, #1
 8003354:	b29b      	uxth	r3, r3
 8003356:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003358:	9b08      	ldr	r3, [sp, #32]
 800335a:	3301      	adds	r3, #1
 800335c:	d000      	beq.n	8003360 <HAL_SPI_TransmitReceive+0xc8>
 800335e:	e0a7      	b.n	80034b0 <HAL_SPI_TransmitReceive+0x218>
{
 8003360:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003362:	2546      	movs	r5, #70	; 0x46
{
 8003364:	4698      	mov	r8, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003366:	2702      	movs	r7, #2
 8003368:	e029      	b.n	80033be <HAL_SPI_TransmitReceive+0x126>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	4217      	tst	r7, r2
 8003370:	d010      	beq.n	8003394 <HAL_SPI_TransmitReceive+0xfc>
 8003372:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003374:	2a00      	cmp	r2, #0
 8003376:	d00d      	beq.n	8003394 <HAL_SPI_TransmitReceive+0xfc>
 8003378:	4642      	mov	r2, r8
 800337a:	2a01      	cmp	r2, #1
 800337c:	d10a      	bne.n	8003394 <HAL_SPI_TransmitReceive+0xfc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800337e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003380:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003382:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003384:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003386:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003388:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800338a:	3a01      	subs	r2, #1
 800338c:	b292      	uxth	r2, r2
 800338e:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003390:	2200      	movs	r2, #0
 8003392:	4690      	mov	r8, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003394:	2201      	movs	r2, #1
 8003396:	0010      	movs	r0, r2
 8003398:	6899      	ldr	r1, [r3, #8]
 800339a:	4008      	ands	r0, r1
 800339c:	420a      	tst	r2, r1
 800339e:	d00c      	beq.n	80033ba <HAL_SPI_TransmitReceive+0x122>
 80033a0:	5b62      	ldrh	r2, [r4, r5]
 80033a2:	2a00      	cmp	r2, #0
 80033a4:	d009      	beq.n	80033ba <HAL_SPI_TransmitReceive+0x122>
        txallowed = 1U;
 80033a6:	4680      	mov	r8, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033ae:	3302      	adds	r3, #2
 80033b0:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80033b2:	5b63      	ldrh	r3, [r4, r5]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	5363      	strh	r3, [r4, r5]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033ba:	f7fe f81d 	bl	80013f8 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1d2      	bne.n	800336a <HAL_SPI_TransmitReceive+0xd2>
 80033c4:	5b63      	ldrh	r3, [r4, r5]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1cf      	bne.n	800336a <HAL_SPI_TransmitReceive+0xd2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ca:	0032      	movs	r2, r6
 80033cc:	0020      	movs	r0, r4
 80033ce:	9908      	ldr	r1, [sp, #32]
 80033d0:	f7ff fe14 	bl	8002ffc <SPI_EndRxTxTransaction>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	d002      	beq.n	80033de <HAL_SPI_TransmitReceive+0x146>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033d8:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 80033da:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033dc:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d05a      	beq.n	800349a <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 80033e4:	2001      	movs	r0, #1
 80033e6:	e774      	b.n	80032d2 <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 80033e8:	2002      	movs	r0, #2
 80033ea:	e775      	b.n	80032d8 <HAL_SPI_TransmitReceive+0x40>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	6821      	ldr	r1, [r4, #0]
 80033f0:	015b      	lsls	r3, r3, #5
 80033f2:	6848      	ldr	r0, [r1, #4]
 80033f4:	4303      	orrs	r3, r0
 80033f6:	604b      	str	r3, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033f8:	2340      	movs	r3, #64	; 0x40
 80033fa:	6808      	ldr	r0, [r1, #0]
 80033fc:	4203      	tst	r3, r0
 80033fe:	d102      	bne.n	8003406 <HAL_SPI_TransmitReceive+0x16e>
    __HAL_SPI_ENABLE(hspi);
 8003400:	6808      	ldr	r0, [r1, #0]
 8003402:	4303      	orrs	r3, r0
 8003404:	600b      	str	r3, [r1, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003406:	2a00      	cmp	r2, #0
 8003408:	d14f      	bne.n	80034aa <HAL_SPI_TransmitReceive+0x212>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800340a:	783b      	ldrb	r3, [r7, #0]
 800340c:	730b      	strb	r3, [r1, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800340e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003410:	3301      	adds	r3, #1
 8003412:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003414:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003416:	3b01      	subs	r3, #1
 8003418:	b29b      	uxth	r3, r3
 800341a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800341c:	9b08      	ldr	r3, [sp, #32]
 800341e:	3301      	adds	r3, #1
 8003420:	d000      	beq.n	8003424 <HAL_SPI_TransmitReceive+0x18c>
 8003422:	e083      	b.n	800352c <HAL_SPI_TransmitReceive+0x294>
        txallowed = 1U;
 8003424:	2301      	movs	r3, #1
 8003426:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003428:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800342a:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800342c:	4698      	mov	r8, r3
 800342e:	e02d      	b.n	800348c <HAL_SPI_TransmitReceive+0x1f4>
 8003430:	4641      	mov	r1, r8
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	4211      	tst	r1, r2
 8003438:	d012      	beq.n	8003460 <HAL_SPI_TransmitReceive+0x1c8>
 800343a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800343c:	2a00      	cmp	r2, #0
 800343e:	d00f      	beq.n	8003460 <HAL_SPI_TransmitReceive+0x1c8>
 8003440:	464a      	mov	r2, r9
 8003442:	2a01      	cmp	r2, #1
 8003444:	d10c      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x1c8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003446:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003448:	7812      	ldrb	r2, [r2, #0]
 800344a:	731a      	strb	r2, [r3, #12]
        txallowed = 0U;
 800344c:	2200      	movs	r2, #0
 800344e:	4691      	mov	r9, r2
        hspi->pTxBuffPtr++;
 8003450:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003452:	3301      	adds	r3, #1
 8003454:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003456:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003458:	3b01      	subs	r3, #1
 800345a:	b29b      	uxth	r3, r3
 800345c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	2501      	movs	r5, #1
 8003462:	002a      	movs	r2, r5
 8003464:	6899      	ldr	r1, [r3, #8]
 8003466:	400a      	ands	r2, r1
 8003468:	420d      	tst	r5, r1
 800346a:	d00d      	beq.n	8003488 <HAL_SPI_TransmitReceive+0x1f0>
 800346c:	5be1      	ldrh	r1, [r4, r7]
 800346e:	2900      	cmp	r1, #0
 8003470:	d00a      	beq.n	8003488 <HAL_SPI_TransmitReceive+0x1f0>
        txallowed = 1U;
 8003472:	4691      	mov	r9, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003474:	7b1b      	ldrb	r3, [r3, #12]
 8003476:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003478:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 800347a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800347c:	3301      	adds	r3, #1
 800347e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003480:	5be3      	ldrh	r3, [r4, r7]
 8003482:	3b01      	subs	r3, #1
 8003484:	b29b      	uxth	r3, r3
 8003486:	53e3      	strh	r3, [r4, r7]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003488:	f7fd ffb6 	bl	80013f8 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800348c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1ce      	bne.n	8003430 <HAL_SPI_TransmitReceive+0x198>
 8003492:	5be3      	ldrh	r3, [r4, r7]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1cb      	bne.n	8003430 <HAL_SPI_TransmitReceive+0x198>
 8003498:	e797      	b.n	80033ca <HAL_SPI_TransmitReceive+0x132>
    hspi->State = HAL_SPI_STATE_READY;
 800349a:	2201      	movs	r2, #1
 800349c:	335d      	adds	r3, #93	; 0x5d
 800349e:	54e2      	strb	r2, [r4, r3]
 80034a0:	e717      	b.n	80032d2 <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034a2:	2d01      	cmp	r5, #1
 80034a4:	d000      	beq.n	80034a8 <HAL_SPI_TransmitReceive+0x210>
 80034a6:	e757      	b.n	8003358 <HAL_SPI_TransmitReceive+0xc0>
 80034a8:	e74e      	b.n	8003348 <HAL_SPI_TransmitReceive+0xb0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034aa:	2d01      	cmp	r5, #1
 80034ac:	d1b6      	bne.n	800341c <HAL_SPI_TransmitReceive+0x184>
 80034ae:	e7ac      	b.n	800340a <HAL_SPI_TransmitReceive+0x172>
        txallowed = 1U;
 80034b0:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b2:	2546      	movs	r5, #70	; 0x46
        txallowed = 1U;
 80034b4:	4698      	mov	r8, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034b6:	2702      	movs	r7, #2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d103      	bne.n	80034c6 <HAL_SPI_TransmitReceive+0x22e>
 80034be:	5b63      	ldrh	r3, [r4, r5]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d100      	bne.n	80034c6 <HAL_SPI_TransmitReceive+0x22e>
 80034c4:	e781      	b.n	80033ca <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	4217      	tst	r7, r2
 80034cc:	d010      	beq.n	80034f0 <HAL_SPI_TransmitReceive+0x258>
 80034ce:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80034d0:	2a00      	cmp	r2, #0
 80034d2:	d00d      	beq.n	80034f0 <HAL_SPI_TransmitReceive+0x258>
 80034d4:	4642      	mov	r2, r8
 80034d6:	2a01      	cmp	r2, #1
 80034d8:	d10a      	bne.n	80034f0 <HAL_SPI_TransmitReceive+0x258>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80034dc:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034de:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e0:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e2:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80034e4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80034e6:	3a01      	subs	r2, #1
 80034e8:	b292      	uxth	r2, r2
 80034ea:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 80034ec:	2200      	movs	r2, #0
 80034ee:	4690      	mov	r8, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034f0:	2101      	movs	r1, #1
 80034f2:	0008      	movs	r0, r1
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	4010      	ands	r0, r2
 80034f8:	4211      	tst	r1, r2
 80034fa:	d00c      	beq.n	8003516 <HAL_SPI_TransmitReceive+0x27e>
 80034fc:	5b62      	ldrh	r2, [r4, r5]
 80034fe:	2a00      	cmp	r2, #0
 8003500:	d009      	beq.n	8003516 <HAL_SPI_TransmitReceive+0x27e>
        txallowed = 1U;
 8003502:	4680      	mov	r8, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003508:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800350a:	3302      	adds	r3, #2
 800350c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800350e:	5b63      	ldrh	r3, [r4, r5]
 8003510:	3b01      	subs	r3, #1
 8003512:	b29b      	uxth	r3, r3
 8003514:	5363      	strh	r3, [r4, r5]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003516:	f7fd ff6f 	bl	80013f8 <HAL_GetTick>
 800351a:	9b08      	ldr	r3, [sp, #32]
 800351c:	1b80      	subs	r0, r0, r6
 800351e:	4298      	cmp	r0, r3
 8003520:	d3ca      	bcc.n	80034b8 <HAL_SPI_TransmitReceive+0x220>
        hspi->State = HAL_SPI_STATE_READY;
 8003522:	235d      	movs	r3, #93	; 0x5d
 8003524:	2201      	movs	r2, #1
        errorcode = HAL_TIMEOUT;
 8003526:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8003528:	54e2      	strb	r2, [r4, r3]
        goto error;
 800352a:	e6d2      	b.n	80032d2 <HAL_SPI_TransmitReceive+0x3a>
        txallowed = 1U;
 800352c:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800352e:	2546      	movs	r5, #70	; 0x46
        txallowed = 1U;
 8003530:	4698      	mov	r8, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003532:	2702      	movs	r7, #2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003534:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003536:	2b00      	cmp	r3, #0
 8003538:	d103      	bne.n	8003542 <HAL_SPI_TransmitReceive+0x2aa>
 800353a:	5b63      	ldrh	r3, [r4, r5]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d100      	bne.n	8003542 <HAL_SPI_TransmitReceive+0x2aa>
 8003540:	e743      	b.n	80033ca <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	4217      	tst	r7, r2
 8003548:	d012      	beq.n	8003570 <HAL_SPI_TransmitReceive+0x2d8>
 800354a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800354c:	2a00      	cmp	r2, #0
 800354e:	d00f      	beq.n	8003570 <HAL_SPI_TransmitReceive+0x2d8>
 8003550:	4642      	mov	r2, r8
 8003552:	2a01      	cmp	r2, #1
 8003554:	d10c      	bne.n	8003570 <HAL_SPI_TransmitReceive+0x2d8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003556:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003558:	7812      	ldrb	r2, [r2, #0]
 800355a:	731a      	strb	r2, [r3, #12]
        txallowed = 0U;
 800355c:	2200      	movs	r2, #0
 800355e:	4690      	mov	r8, r2
        hspi->pTxBuffPtr++;
 8003560:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003562:	3301      	adds	r3, #1
 8003564:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003566:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003568:	3b01      	subs	r3, #1
 800356a:	b29b      	uxth	r3, r3
 800356c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	2101      	movs	r1, #1
 8003572:	0008      	movs	r0, r1
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	4010      	ands	r0, r2
 8003578:	4211      	tst	r1, r2
 800357a:	d00d      	beq.n	8003598 <HAL_SPI_TransmitReceive+0x300>
 800357c:	5b62      	ldrh	r2, [r4, r5]
 800357e:	2a00      	cmp	r2, #0
 8003580:	d00a      	beq.n	8003598 <HAL_SPI_TransmitReceive+0x300>
        txallowed = 1U;
 8003582:	4680      	mov	r8, r0
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003584:	7b1b      	ldrb	r3, [r3, #12]
 8003586:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003588:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 800358a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800358c:	3301      	adds	r3, #1
 800358e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003590:	5b63      	ldrh	r3, [r4, r5]
 8003592:	3b01      	subs	r3, #1
 8003594:	b29b      	uxth	r3, r3
 8003596:	5363      	strh	r3, [r4, r5]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003598:	f7fd ff2e 	bl	80013f8 <HAL_GetTick>
 800359c:	9b08      	ldr	r3, [sp, #32]
 800359e:	1b80      	subs	r0, r0, r6
 80035a0:	4298      	cmp	r0, r3
 80035a2:	d3c7      	bcc.n	8003534 <HAL_SPI_TransmitReceive+0x29c>
 80035a4:	e7bd      	b.n	8003522 <HAL_SPI_TransmitReceive+0x28a>
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	ffffefff 	.word	0xffffefff

080035ac <HAL_SPI_ErrorCallback>:
 80035ac:	4770      	bx	lr
 80035ae:	46c0      	nop			; (mov r8, r8)

080035b0 <HAL_SPI_IRQHandler>:
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80035b0:	2241      	movs	r2, #65	; 0x41
{
 80035b2:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80035b4:	6801      	ldr	r1, [r0, #0]
{
 80035b6:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80035b8:	6848      	ldr	r0, [r1, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80035ba:	688b      	ldr	r3, [r1, #8]
{
 80035bc:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80035be:	401a      	ands	r2, r3
 80035c0:	2a01      	cmp	r2, #1
 80035c2:	d060      	beq.n	8003686 <HAL_SPI_IRQHandler+0xd6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80035c4:	079a      	lsls	r2, r3, #30
 80035c6:	d501      	bpl.n	80035cc <HAL_SPI_IRQHandler+0x1c>
 80035c8:	0602      	lsls	r2, r0, #24
 80035ca:	d462      	bmi.n	8003692 <HAL_SPI_IRQHandler+0xe2>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80035cc:	22b0      	movs	r2, #176	; 0xb0
 80035ce:	0052      	lsls	r2, r2, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80035d0:	4213      	tst	r3, r2
 80035d2:	d056      	beq.n	8003682 <HAL_SPI_IRQHandler+0xd2>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80035d4:	0682      	lsls	r2, r0, #26
 80035d6:	d554      	bpl.n	8003682 <HAL_SPI_IRQHandler+0xd2>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80035d8:	065a      	lsls	r2, r3, #25
 80035da:	d50e      	bpl.n	80035fa <HAL_SPI_IRQHandler+0x4a>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80035dc:	225d      	movs	r2, #93	; 0x5d
 80035de:	5ca2      	ldrb	r2, [r4, r2]
 80035e0:	2a03      	cmp	r2, #3
 80035e2:	d05e      	beq.n	80036a2 <HAL_SPI_IRQHandler+0xf2>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80035e4:	2504      	movs	r5, #4
 80035e6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80035e8:	432a      	orrs	r2, r5
 80035ea:	6622      	str	r2, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035ec:	2200      	movs	r2, #0
 80035ee:	9200      	str	r2, [sp, #0]
 80035f0:	68ca      	ldr	r2, [r1, #12]
 80035f2:	9200      	str	r2, [sp, #0]
 80035f4:	688a      	ldr	r2, [r1, #8]
 80035f6:	9200      	str	r2, [sp, #0]
 80035f8:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80035fa:	069a      	lsls	r2, r3, #26
 80035fc:	d50c      	bpl.n	8003618 <HAL_SPI_IRQHandler+0x68>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80035fe:	2501      	movs	r5, #1
 8003600:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003602:	432a      	orrs	r2, r5
 8003604:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003606:	2200      	movs	r2, #0
 8003608:	9202      	str	r2, [sp, #8]
 800360a:	688a      	ldr	r2, [r1, #8]
 800360c:	353f      	adds	r5, #63	; 0x3f
 800360e:	9202      	str	r2, [sp, #8]
 8003610:	680a      	ldr	r2, [r1, #0]
 8003612:	43aa      	bics	r2, r5
 8003614:	600a      	str	r2, [r1, #0]
 8003616:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003618:	05db      	lsls	r3, r3, #23
 800361a:	d508      	bpl.n	800362e <HAL_SPI_IRQHandler+0x7e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800361c:	2208      	movs	r2, #8
 800361e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003620:	4313      	orrs	r3, r2
 8003622:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003624:	2300      	movs	r3, #0
 8003626:	9303      	str	r3, [sp, #12]
 8003628:	688b      	ldr	r3, [r1, #8]
 800362a:	9303      	str	r3, [sp, #12]
 800362c:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800362e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003630:	2b00      	cmp	r3, #0
 8003632:	d026      	beq.n	8003682 <HAL_SPI_IRQHandler+0xd2>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003634:	22e0      	movs	r2, #224	; 0xe0
 8003636:	684b      	ldr	r3, [r1, #4]
 8003638:	4393      	bics	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800363c:	235d      	movs	r3, #93	; 0x5d
 800363e:	3adf      	subs	r2, #223	; 0xdf
 8003640:	54e2      	strb	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003642:	3b5a      	subs	r3, #90	; 0x5a
 8003644:	4203      	tst	r3, r0
 8003646:	d028      	beq.n	800369a <HAL_SPI_IRQHandler+0xea>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003648:	684a      	ldr	r2, [r1, #4]
        if (hspi->hdmarx != NULL)
 800364a:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800364c:	439a      	bics	r2, r3
 800364e:	604a      	str	r2, [r1, #4]
        if (hspi->hdmarx != NULL)
 8003650:	2800      	cmp	r0, #0
 8003652:	d009      	beq.n	8003668 <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003654:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <HAL_SPI_IRQHandler+0x104>)
 8003656:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003658:	f7fe faf2 	bl	8001c40 <HAL_DMA_Abort_IT>
 800365c:	2800      	cmp	r0, #0
 800365e:	d003      	beq.n	8003668 <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003660:	2240      	movs	r2, #64	; 0x40
 8003662:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003664:	4313      	orrs	r3, r2
 8003666:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003668:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800366a:	2800      	cmp	r0, #0
 800366c:	d009      	beq.n	8003682 <HAL_SPI_IRQHandler+0xd2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <HAL_SPI_IRQHandler+0x104>)
 8003670:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003672:	f7fe fae5 	bl	8001c40 <HAL_DMA_Abort_IT>
 8003676:	2800      	cmp	r0, #0
 8003678:	d003      	beq.n	8003682 <HAL_SPI_IRQHandler+0xd2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800367a:	2240      	movs	r2, #64	; 0x40
 800367c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800367e:	4313      	orrs	r3, r2
 8003680:	6623      	str	r3, [r4, #96]	; 0x60
}
 8003682:	b005      	add	sp, #20
 8003684:	bd30      	pop	{r4, r5, pc}
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003686:	0642      	lsls	r2, r0, #25
 8003688:	d59c      	bpl.n	80035c4 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 800368a:	0020      	movs	r0, r4
 800368c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800368e:	4798      	blx	r3
    return;
 8003690:	e7f7      	b.n	8003682 <HAL_SPI_IRQHandler+0xd2>
    hspi->TxISR(hspi);
 8003692:	0020      	movs	r0, r4
 8003694:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003696:	4798      	blx	r3
    return;
 8003698:	e7f3      	b.n	8003682 <HAL_SPI_IRQHandler+0xd2>
        HAL_SPI_ErrorCallback(hspi);
 800369a:	0020      	movs	r0, r4
 800369c:	f7ff ff86 	bl	80035ac <HAL_SPI_ErrorCallback>
 80036a0:	e7ef      	b.n	8003682 <HAL_SPI_IRQHandler+0xd2>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036a2:	2300      	movs	r3, #0
 80036a4:	9301      	str	r3, [sp, #4]
 80036a6:	68cb      	ldr	r3, [r1, #12]
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	688b      	ldr	r3, [r1, #8]
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	9b01      	ldr	r3, [sp, #4]
        return;
 80036b0:	e7e7      	b.n	8003682 <HAL_SPI_IRQHandler+0xd2>
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	080036b9 	.word	0x080036b9

080036b8 <SPI_DMAAbortOnError>:
  hspi->RxXferCount = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	2246      	movs	r2, #70	; 0x46
{
 80036bc:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80036be:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 80036c0:	5283      	strh	r3, [r0, r2]
  hspi->TxXferCount = 0U;
 80036c2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80036c4:	f7ff ff72 	bl	80035ac <HAL_SPI_ErrorCallback>
}
 80036c8:	bd10      	pop	{r4, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)

080036cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036cc:	b510      	push	{r4, lr}
 80036ce:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d0:	d066      	beq.n	80037a0 <HAL_TIM_Base_Init+0xd4>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d2:	233d      	movs	r3, #61	; 0x3d
 80036d4:	5cc3      	ldrb	r3, [r0, r3]
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d041      	beq.n	8003760 <HAL_TIM_Base_Init+0x94>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036dc:	233d      	movs	r3, #61	; 0x3d
 80036de:	2202      	movs	r2, #2
 80036e0:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e2:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e4:	492f      	ldr	r1, [pc, #188]	; (80037a4 <HAL_TIM_Base_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 80036e6:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e8:	428a      	cmp	r2, r1
 80036ea:	d045      	beq.n	8003778 <HAL_TIM_Base_Init+0xac>
 80036ec:	2180      	movs	r1, #128	; 0x80
 80036ee:	05c9      	lsls	r1, r1, #23
 80036f0:	428a      	cmp	r2, r1
 80036f2:	d02c      	beq.n	800374e <HAL_TIM_Base_Init+0x82>
 80036f4:	492c      	ldr	r1, [pc, #176]	; (80037a8 <HAL_TIM_Base_Init+0xdc>)
 80036f6:	428a      	cmp	r2, r1
 80036f8:	d029      	beq.n	800374e <HAL_TIM_Base_Init+0x82>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036fa:	492c      	ldr	r1, [pc, #176]	; (80037ac <HAL_TIM_Base_Init+0xe0>)
 80036fc:	428a      	cmp	r2, r1
 80036fe:	d02a      	beq.n	8003756 <HAL_TIM_Base_Init+0x8a>
 8003700:	492b      	ldr	r1, [pc, #172]	; (80037b0 <HAL_TIM_Base_Init+0xe4>)
 8003702:	428a      	cmp	r2, r1
 8003704:	d03c      	beq.n	8003780 <HAL_TIM_Base_Init+0xb4>
 8003706:	492b      	ldr	r1, [pc, #172]	; (80037b4 <HAL_TIM_Base_Init+0xe8>)
 8003708:	428a      	cmp	r2, r1
 800370a:	d039      	beq.n	8003780 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800370c:	2180      	movs	r1, #128	; 0x80
 800370e:	438b      	bics	r3, r1
 8003710:	69a1      	ldr	r1, [r4, #24]
 8003712:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8003714:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003716:	68e3      	ldr	r3, [r4, #12]
 8003718:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800371a:	6863      	ldr	r3, [r4, #4]
 800371c:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800371e:	2301      	movs	r3, #1
 8003720:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003722:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8003724:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003726:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	3a08      	subs	r2, #8
 800372a:	54a3      	strb	r3, [r4, r2]
 800372c:	3201      	adds	r2, #1
 800372e:	54a3      	strb	r3, [r4, r2]
 8003730:	3201      	adds	r2, #1
 8003732:	54a3      	strb	r3, [r4, r2]
 8003734:	3201      	adds	r2, #1
 8003736:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003738:	3201      	adds	r2, #1
 800373a:	54a3      	strb	r3, [r4, r2]
 800373c:	3201      	adds	r2, #1
 800373e:	54a3      	strb	r3, [r4, r2]
 8003740:	3201      	adds	r2, #1
 8003742:	54a3      	strb	r3, [r4, r2]
 8003744:	3201      	adds	r2, #1
 8003746:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003748:	3a08      	subs	r2, #8
 800374a:	54a3      	strb	r3, [r4, r2]
}
 800374c:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800374e:	2170      	movs	r1, #112	; 0x70
 8003750:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8003752:	68a1      	ldr	r1, [r4, #8]
 8003754:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003756:	4918      	ldr	r1, [pc, #96]	; (80037b8 <HAL_TIM_Base_Init+0xec>)
 8003758:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375a:	6921      	ldr	r1, [r4, #16]
 800375c:	430b      	orrs	r3, r1
 800375e:	e7d5      	b.n	800370c <HAL_TIM_Base_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 8003760:	333c      	adds	r3, #60	; 0x3c
 8003762:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8003764:	f7fd fc3e 	bl	8000fe4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	233d      	movs	r3, #61	; 0x3d
 800376a:	2202      	movs	r2, #2
 800376c:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800376e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003770:	490c      	ldr	r1, [pc, #48]	; (80037a4 <HAL_TIM_Base_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8003772:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003774:	428a      	cmp	r2, r1
 8003776:	d1b9      	bne.n	80036ec <HAL_TIM_Base_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003778:	2170      	movs	r1, #112	; 0x70
 800377a:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 800377c:	68a1      	ldr	r1, [r4, #8]
 800377e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003780:	490d      	ldr	r1, [pc, #52]	; (80037b8 <HAL_TIM_Base_Init+0xec>)
 8003782:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003784:	6921      	ldr	r1, [r4, #16]
 8003786:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003788:	2180      	movs	r1, #128	; 0x80
 800378a:	438b      	bics	r3, r1
 800378c:	69a1      	ldr	r1, [r4, #24]
 800378e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003790:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003792:	68e3      	ldr	r3, [r4, #12]
 8003794:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003796:	6863      	ldr	r3, [r4, #4]
 8003798:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800379a:	6963      	ldr	r3, [r4, #20]
 800379c:	6313      	str	r3, [r2, #48]	; 0x30
 800379e:	e7be      	b.n	800371e <HAL_TIM_Base_Init+0x52>
    return HAL_ERROR;
 80037a0:	2001      	movs	r0, #1
 80037a2:	e7d3      	b.n	800374c <HAL_TIM_Base_Init+0x80>
 80037a4:	40012c00 	.word	0x40012c00
 80037a8:	40000400 	.word	0x40000400
 80037ac:	40002000 	.word	0x40002000
 80037b0:	40014400 	.word	0x40014400
 80037b4:	40014800 	.word	0x40014800
 80037b8:	fffffcff 	.word	0xfffffcff

080037bc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80037bc:	223d      	movs	r2, #61	; 0x3d
 80037be:	5c81      	ldrb	r1, [r0, r2]
{
 80037c0:	0003      	movs	r3, r0
    return HAL_ERROR;
 80037c2:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80037c4:	2901      	cmp	r1, #1
 80037c6:	d113      	bne.n	80037f0 <HAL_TIM_Base_Start_IT+0x34>
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	3101      	adds	r1, #1
 80037ca:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	4302      	orrs	r2, r0
 80037d2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d4:	4a0d      	ldr	r2, [pc, #52]	; (800380c <HAL_TIM_Base_Start_IT+0x50>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00b      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x36>
 80037da:	2280      	movs	r2, #128	; 0x80
 80037dc:	05d2      	lsls	r2, r2, #23
 80037de:	4293      	cmp	r3, r2
 80037e0:	d007      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x36>
 80037e2:	4a0b      	ldr	r2, [pc, #44]	; (8003810 <HAL_TIM_Base_Start_IT+0x54>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d004      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x36>
    __HAL_TIM_ENABLE(htim);
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	4302      	orrs	r2, r0
  return HAL_OK;
 80037ec:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80037ee:	601a      	str	r2, [r3, #0]
}
 80037f0:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037f2:	2207      	movs	r2, #7
 80037f4:	6899      	ldr	r1, [r3, #8]
 80037f6:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f8:	2a06      	cmp	r2, #6
 80037fa:	d005      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x4c>
      __HAL_TIM_ENABLE(htim);
 80037fc:	2101      	movs	r1, #1
 80037fe:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8003800:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8003802:	430a      	orrs	r2, r1
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e7f3      	b.n	80037f0 <HAL_TIM_Base_Start_IT+0x34>
  return HAL_OK;
 8003808:	2000      	movs	r0, #0
 800380a:	e7f1      	b.n	80037f0 <HAL_TIM_Base_Start_IT+0x34>
 800380c:	40012c00 	.word	0x40012c00
 8003810:	40000400 	.word	0x40000400

08003814 <HAL_TIM_PWM_MspInit>:
 8003814:	4770      	bx	lr
 8003816:	46c0      	nop			; (mov r8, r8)

08003818 <HAL_TIM_PWM_Init>:
{
 8003818:	b510      	push	{r4, lr}
 800381a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800381c:	d066      	beq.n	80038ec <HAL_TIM_PWM_Init+0xd4>
  if (htim->State == HAL_TIM_STATE_RESET)
 800381e:	233d      	movs	r3, #61	; 0x3d
 8003820:	5cc3      	ldrb	r3, [r0, r3]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d041      	beq.n	80038ac <HAL_TIM_PWM_Init+0x94>
  htim->State = HAL_TIM_STATE_BUSY;
 8003828:	233d      	movs	r3, #61	; 0x3d
 800382a:	2202      	movs	r2, #2
 800382c:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800382e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003830:	492f      	ldr	r1, [pc, #188]	; (80038f0 <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8003832:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003834:	428a      	cmp	r2, r1
 8003836:	d045      	beq.n	80038c4 <HAL_TIM_PWM_Init+0xac>
 8003838:	2180      	movs	r1, #128	; 0x80
 800383a:	05c9      	lsls	r1, r1, #23
 800383c:	428a      	cmp	r2, r1
 800383e:	d02c      	beq.n	800389a <HAL_TIM_PWM_Init+0x82>
 8003840:	492c      	ldr	r1, [pc, #176]	; (80038f4 <HAL_TIM_PWM_Init+0xdc>)
 8003842:	428a      	cmp	r2, r1
 8003844:	d029      	beq.n	800389a <HAL_TIM_PWM_Init+0x82>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003846:	492c      	ldr	r1, [pc, #176]	; (80038f8 <HAL_TIM_PWM_Init+0xe0>)
 8003848:	428a      	cmp	r2, r1
 800384a:	d02a      	beq.n	80038a2 <HAL_TIM_PWM_Init+0x8a>
 800384c:	492b      	ldr	r1, [pc, #172]	; (80038fc <HAL_TIM_PWM_Init+0xe4>)
 800384e:	428a      	cmp	r2, r1
 8003850:	d03c      	beq.n	80038cc <HAL_TIM_PWM_Init+0xb4>
 8003852:	492b      	ldr	r1, [pc, #172]	; (8003900 <HAL_TIM_PWM_Init+0xe8>)
 8003854:	428a      	cmp	r2, r1
 8003856:	d039      	beq.n	80038cc <HAL_TIM_PWM_Init+0xb4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003858:	2180      	movs	r1, #128	; 0x80
 800385a:	438b      	bics	r3, r1
 800385c:	69a1      	ldr	r1, [r4, #24]
 800385e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003860:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003862:	68e3      	ldr	r3, [r4, #12]
 8003864:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003866:	6863      	ldr	r3, [r4, #4]
 8003868:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800386a:	2301      	movs	r3, #1
 800386c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800386e:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8003870:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003872:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003874:	3a08      	subs	r2, #8
 8003876:	54a3      	strb	r3, [r4, r2]
 8003878:	3201      	adds	r2, #1
 800387a:	54a3      	strb	r3, [r4, r2]
 800387c:	3201      	adds	r2, #1
 800387e:	54a3      	strb	r3, [r4, r2]
 8003880:	3201      	adds	r2, #1
 8003882:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003884:	3201      	adds	r2, #1
 8003886:	54a3      	strb	r3, [r4, r2]
 8003888:	3201      	adds	r2, #1
 800388a:	54a3      	strb	r3, [r4, r2]
 800388c:	3201      	adds	r2, #1
 800388e:	54a3      	strb	r3, [r4, r2]
 8003890:	3201      	adds	r2, #1
 8003892:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003894:	3a08      	subs	r2, #8
 8003896:	54a3      	strb	r3, [r4, r2]
}
 8003898:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800389a:	2170      	movs	r1, #112	; 0x70
 800389c:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 800389e:	68a1      	ldr	r1, [r4, #8]
 80038a0:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80038a2:	4918      	ldr	r1, [pc, #96]	; (8003904 <HAL_TIM_PWM_Init+0xec>)
 80038a4:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038a6:	6921      	ldr	r1, [r4, #16]
 80038a8:	430b      	orrs	r3, r1
 80038aa:	e7d5      	b.n	8003858 <HAL_TIM_PWM_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 80038ac:	333c      	adds	r3, #60	; 0x3c
 80038ae:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80038b0:	f7ff ffb0 	bl	8003814 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80038b4:	233d      	movs	r3, #61	; 0x3d
 80038b6:	2202      	movs	r2, #2
 80038b8:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ba:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038bc:	490c      	ldr	r1, [pc, #48]	; (80038f0 <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 80038be:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c0:	428a      	cmp	r2, r1
 80038c2:	d1b9      	bne.n	8003838 <HAL_TIM_PWM_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c4:	2170      	movs	r1, #112	; 0x70
 80038c6:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80038c8:	68a1      	ldr	r1, [r4, #8]
 80038ca:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80038cc:	490d      	ldr	r1, [pc, #52]	; (8003904 <HAL_TIM_PWM_Init+0xec>)
 80038ce:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d0:	6921      	ldr	r1, [r4, #16]
 80038d2:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d4:	2180      	movs	r1, #128	; 0x80
 80038d6:	438b      	bics	r3, r1
 80038d8:	69a1      	ldr	r1, [r4, #24]
 80038da:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80038dc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038de:	68e3      	ldr	r3, [r4, #12]
 80038e0:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038e2:	6863      	ldr	r3, [r4, #4]
 80038e4:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80038e6:	6963      	ldr	r3, [r4, #20]
 80038e8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ea:	e7be      	b.n	800386a <HAL_TIM_PWM_Init+0x52>
    return HAL_ERROR;
 80038ec:	2001      	movs	r0, #1
 80038ee:	e7d3      	b.n	8003898 <HAL_TIM_PWM_Init+0x80>
 80038f0:	40012c00 	.word	0x40012c00
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40002000 	.word	0x40002000
 80038fc:	40014400 	.word	0x40014400
 8003900:	40014800 	.word	0x40014800
 8003904:	fffffcff 	.word	0xfffffcff

08003908 <HAL_TIM_PWM_Start>:
 8003908:	2900      	cmp	r1, #0
 800390a:	d126      	bne.n	800395a <HAL_TIM_PWM_Start+0x52>
 800390c:	233e      	movs	r3, #62	; 0x3e
 800390e:	5cc2      	ldrb	r2, [r0, r3]
 8003910:	2a01      	cmp	r2, #1
 8003912:	d136      	bne.n	8003982 <HAL_TIM_PWM_Start+0x7a>
 8003914:	2202      	movs	r2, #2
 8003916:	54c2      	strb	r2, [r0, r3]
 8003918:	221f      	movs	r2, #31
 800391a:	4011      	ands	r1, r2
 800391c:	3a1e      	subs	r2, #30
 800391e:	408a      	lsls	r2, r1
 8003920:	6803      	ldr	r3, [r0, #0]
 8003922:	6a19      	ldr	r1, [r3, #32]
 8003924:	4391      	bics	r1, r2
 8003926:	6219      	str	r1, [r3, #32]
 8003928:	6a19      	ldr	r1, [r3, #32]
 800392a:	430a      	orrs	r2, r1
 800392c:	621a      	str	r2, [r3, #32]
 800392e:	4a23      	ldr	r2, [pc, #140]	; (80039bc <HAL_TIM_PWM_Start+0xb4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d028      	beq.n	8003986 <HAL_TIM_PWM_Start+0x7e>
 8003934:	4a22      	ldr	r2, [pc, #136]	; (80039c0 <HAL_TIM_PWM_Start+0xb8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d031      	beq.n	800399e <HAL_TIM_PWM_Start+0x96>
 800393a:	4a22      	ldr	r2, [pc, #136]	; (80039c4 <HAL_TIM_PWM_Start+0xbc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d02e      	beq.n	800399e <HAL_TIM_PWM_Start+0x96>
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	05d2      	lsls	r2, r2, #23
 8003944:	4293      	cmp	r3, r2
 8003946:	d023      	beq.n	8003990 <HAL_TIM_PWM_Start+0x88>
 8003948:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <HAL_TIM_PWM_Start+0xc0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d020      	beq.n	8003990 <HAL_TIM_PWM_Start+0x88>
 800394e:	2101      	movs	r1, #1
 8003950:	2000      	movs	r0, #0
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	4770      	bx	lr
 800395a:	2904      	cmp	r1, #4
 800395c:	d025      	beq.n	80039aa <HAL_TIM_PWM_Start+0xa2>
 800395e:	2908      	cmp	r1, #8
 8003960:	d00b      	beq.n	800397a <HAL_TIM_PWM_Start+0x72>
 8003962:	2341      	movs	r3, #65	; 0x41
 8003964:	5cc2      	ldrb	r2, [r0, r3]
 8003966:	2a01      	cmp	r2, #1
 8003968:	d10b      	bne.n	8003982 <HAL_TIM_PWM_Start+0x7a>
 800396a:	2904      	cmp	r1, #4
 800396c:	d021      	beq.n	80039b2 <HAL_TIM_PWM_Start+0xaa>
 800396e:	2908      	cmp	r1, #8
 8003970:	d1d0      	bne.n	8003914 <HAL_TIM_PWM_Start+0xc>
 8003972:	2340      	movs	r3, #64	; 0x40
 8003974:	2202      	movs	r2, #2
 8003976:	54c2      	strb	r2, [r0, r3]
 8003978:	e7ce      	b.n	8003918 <HAL_TIM_PWM_Start+0x10>
 800397a:	2340      	movs	r3, #64	; 0x40
 800397c:	5cc3      	ldrb	r3, [r0, r3]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d0f7      	beq.n	8003972 <HAL_TIM_PWM_Start+0x6a>
 8003982:	2001      	movs	r0, #1
 8003984:	e7e8      	b.n	8003958 <HAL_TIM_PWM_Start+0x50>
 8003986:	2280      	movs	r2, #128	; 0x80
 8003988:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800398a:	0212      	lsls	r2, r2, #8
 800398c:	430a      	orrs	r2, r1
 800398e:	645a      	str	r2, [r3, #68]	; 0x44
 8003990:	2207      	movs	r2, #7
 8003992:	6899      	ldr	r1, [r3, #8]
 8003994:	400a      	ands	r2, r1
 8003996:	2a06      	cmp	r2, #6
 8003998:	d1d9      	bne.n	800394e <HAL_TIM_PWM_Start+0x46>
 800399a:	2000      	movs	r0, #0
 800399c:	e7dc      	b.n	8003958 <HAL_TIM_PWM_Start+0x50>
 800399e:	2280      	movs	r2, #128	; 0x80
 80039a0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80039a2:	0212      	lsls	r2, r2, #8
 80039a4:	430a      	orrs	r2, r1
 80039a6:	645a      	str	r2, [r3, #68]	; 0x44
 80039a8:	e7ca      	b.n	8003940 <HAL_TIM_PWM_Start+0x38>
 80039aa:	233f      	movs	r3, #63	; 0x3f
 80039ac:	5cc3      	ldrb	r3, [r0, r3]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d1e7      	bne.n	8003982 <HAL_TIM_PWM_Start+0x7a>
 80039b2:	233f      	movs	r3, #63	; 0x3f
 80039b4:	2202      	movs	r2, #2
 80039b6:	54c2      	strb	r2, [r0, r3]
 80039b8:	e7ae      	b.n	8003918 <HAL_TIM_PWM_Start+0x10>
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	40012c00 	.word	0x40012c00
 80039c0:	40014400 	.word	0x40014400
 80039c4:	40014800 	.word	0x40014800
 80039c8:	40000400 	.word	0x40000400

080039cc <HAL_TIM_PWM_ConfigChannel>:
{
 80039cc:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80039ce:	203c      	movs	r0, #60	; 0x3c
{
 80039d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80039d2:	5c1c      	ldrb	r4, [r3, r0]
 80039d4:	2c01      	cmp	r4, #1
 80039d6:	d100      	bne.n	80039da <HAL_TIM_PWM_ConfigChannel+0xe>
 80039d8:	e0de      	b.n	8003b98 <HAL_TIM_PWM_ConfigChannel+0x1cc>
 80039da:	2401      	movs	r4, #1
 80039dc:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 80039de:	2a08      	cmp	r2, #8
 80039e0:	d100      	bne.n	80039e4 <HAL_TIM_PWM_ConfigChannel+0x18>
 80039e2:	e0ac      	b.n	8003b3e <HAL_TIM_PWM_ConfigChannel+0x172>
 80039e4:	d834      	bhi.n	8003a50 <HAL_TIM_PWM_ConfigChannel+0x84>
 80039e6:	2a00      	cmp	r2, #0
 80039e8:	d100      	bne.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x20>
 80039ea:	e07d      	b.n	8003ae8 <HAL_TIM_PWM_ConfigChannel+0x11c>
 80039ec:	2a04      	cmp	r2, #4
 80039ee:	d161      	bne.n	8003ab4 <HAL_TIM_PWM_ConfigChannel+0xe8>
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f0:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039f2:	681a      	ldr	r2, [r3, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039f4:	4d77      	ldr	r5, [pc, #476]	; (8003bd4 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f6:	6a10      	ldr	r0, [r2, #32]
 80039f8:	43a0      	bics	r0, r4
 80039fa:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80039fc:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80039fe:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8003a00:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a02:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a04:	680d      	ldr	r5, [r1, #0]
 8003a06:	022d      	lsls	r5, r5, #8
 8003a08:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a0a:	2420      	movs	r4, #32
 8003a0c:	43a0      	bics	r0, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a0e:	688c      	ldr	r4, [r1, #8]
 8003a10:	0124      	lsls	r4, r4, #4
 8003a12:	4304      	orrs	r4, r0

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a14:	4870      	ldr	r0, [pc, #448]	; (8003bd8 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8003a16:	4282      	cmp	r2, r0
 8003a18:	d057      	beq.n	8003aca <HAL_TIM_PWM_ConfigChannel+0xfe>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1a:	4870      	ldr	r0, [pc, #448]	; (8003bdc <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003a1c:	4282      	cmp	r2, r0
 8003a1e:	d05b      	beq.n	8003ad8 <HAL_TIM_PWM_ConfigChannel+0x10c>
 8003a20:	486f      	ldr	r0, [pc, #444]	; (8003be0 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003a22:	4282      	cmp	r2, r0
 8003a24:	d058      	beq.n	8003ad8 <HAL_TIM_PWM_ConfigChannel+0x10c>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a26:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003a28:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003a2a:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003a2c:	6390      	str	r0, [r2, #56]	; 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a2e:	2080      	movs	r0, #128	; 0x80

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a30:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a32:	6994      	ldr	r4, [r2, #24]
 8003a34:	0100      	lsls	r0, r0, #4
 8003a36:	4320      	orrs	r0, r4
 8003a38:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a3a:	6990      	ldr	r0, [r2, #24]
 8003a3c:	4c69      	ldr	r4, [pc, #420]	; (8003be4 <HAL_TIM_PWM_ConfigChannel+0x218>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a3e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a40:	4020      	ands	r0, r4
 8003a42:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a44:	6990      	ldr	r0, [r2, #24]
 8003a46:	0209      	lsls	r1, r1, #8
 8003a48:	4301      	orrs	r1, r0
 8003a4a:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4c:	2000      	movs	r0, #0
      break;
 8003a4e:	e032      	b.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 8003a50:	2a0c      	cmp	r2, #12
 8003a52:	d12f      	bne.n	8003ab4 <HAL_TIM_PWM_ConfigChannel+0xe8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a54:	681a      	ldr	r2, [r3, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a56:	4c64      	ldr	r4, [pc, #400]	; (8003be8 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8003a58:	6a10      	ldr	r0, [r2, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a5a:	4d5e      	ldr	r5, [pc, #376]	; (8003bd4 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a5c:	4020      	ands	r0, r4
 8003a5e:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003a60:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003a62:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8003a64:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a66:	4028      	ands	r0, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a68:	680d      	ldr	r5, [r1, #0]
 8003a6a:	022d      	lsls	r5, r5, #8
 8003a6c:	4305      	orrs	r5, r0

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a6e:	485f      	ldr	r0, [pc, #380]	; (8003bec <HAL_TIM_PWM_ConfigChannel+0x220>)
 8003a70:	4004      	ands	r4, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a72:	6888      	ldr	r0, [r1, #8]
 8003a74:	0300      	lsls	r0, r0, #12
 8003a76:	4320      	orrs	r0, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a78:	4c57      	ldr	r4, [pc, #348]	; (8003bd8 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8003a7a:	42a2      	cmp	r2, r4
 8003a7c:	d01f      	beq.n	8003abe <HAL_TIM_PWM_ConfigChannel+0xf2>
 8003a7e:	4c57      	ldr	r4, [pc, #348]	; (8003bdc <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003a80:	42a2      	cmp	r2, r4
 8003a82:	d01c      	beq.n	8003abe <HAL_TIM_PWM_ConfigChannel+0xf2>
 8003a84:	4c56      	ldr	r4, [pc, #344]	; (8003be0 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003a86:	42a2      	cmp	r2, r4
 8003a88:	d019      	beq.n	8003abe <HAL_TIM_PWM_ConfigChannel+0xf2>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a8a:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003a8c:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003a8e:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003a90:	6414      	str	r4, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a92:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a94:	2080      	movs	r0, #128	; 0x80
 8003a96:	69d4      	ldr	r4, [r2, #28]
 8003a98:	0100      	lsls	r0, r0, #4
 8003a9a:	4320      	orrs	r0, r4
 8003a9c:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a9e:	69d0      	ldr	r0, [r2, #28]
 8003aa0:	4c50      	ldr	r4, [pc, #320]	; (8003be4 <HAL_TIM_PWM_ConfigChannel+0x218>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aa2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aa4:	4020      	ands	r0, r4
 8003aa6:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aa8:	69d0      	ldr	r0, [r2, #28]
 8003aaa:	0209      	lsls	r1, r1, #8
 8003aac:	4301      	orrs	r1, r0
 8003aae:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab0:	2000      	movs	r0, #0
      break;
 8003ab2:	e000      	b.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 8003ab4:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003ab6:	223c      	movs	r2, #60	; 0x3c
 8003ab8:	2100      	movs	r1, #0
 8003aba:	5499      	strb	r1, [r3, r2]
}
 8003abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003abe:	4c4c      	ldr	r4, [pc, #304]	; (8003bf0 <HAL_TIM_PWM_ConfigChannel+0x224>)
 8003ac0:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ac2:	694e      	ldr	r6, [r1, #20]
 8003ac4:	01b6      	lsls	r6, r6, #6
 8003ac6:	4326      	orrs	r6, r4
 8003ac8:	e7df      	b.n	8003a8a <HAL_TIM_PWM_ConfigChannel+0xbe>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003aca:	2080      	movs	r0, #128	; 0x80
 8003acc:	4384      	bics	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ace:	68c8      	ldr	r0, [r1, #12]
 8003ad0:	0100      	lsls	r0, r0, #4
 8003ad2:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ad4:	2040      	movs	r0, #64	; 0x40
 8003ad6:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ad8:	4846      	ldr	r0, [pc, #280]	; (8003bf4 <HAL_TIM_PWM_ConfigChannel+0x228>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ada:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003adc:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ade:	698e      	ldr	r6, [r1, #24]
 8003ae0:	433e      	orrs	r6, r7
 8003ae2:	00b6      	lsls	r6, r6, #2
 8003ae4:	4306      	orrs	r6, r0
 8003ae6:	e79e      	b.n	8003a26 <HAL_TIM_PWM_ConfigChannel+0x5a>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ae8:	2673      	movs	r6, #115	; 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003aea:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aec:	6a10      	ldr	r0, [r2, #32]
 8003aee:	43a0      	bics	r0, r4
 8003af0:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003af2:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003af4:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8003af6:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003af8:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8003afa:	680e      	ldr	r6, [r1, #0]
 8003afc:	4334      	orrs	r4, r6
  tmpccer &= ~TIM_CCER_CC1P;
 8003afe:	2602      	movs	r6, #2
 8003b00:	43b0      	bics	r0, r6
  tmpccer |= OC_Config->OCPolarity;
 8003b02:	688e      	ldr	r6, [r1, #8]
 8003b04:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b06:	4e34      	ldr	r6, [pc, #208]	; (8003bd8 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8003b08:	42b2      	cmp	r2, r6
 8003b0a:	d047      	beq.n	8003b9c <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8003b0c:	4e33      	ldr	r6, [pc, #204]	; (8003bdc <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003b0e:	42b2      	cmp	r2, r6
 8003b10:	d044      	beq.n	8003b9c <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8003b12:	4e33      	ldr	r6, [pc, #204]	; (8003be0 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003b14:	42b2      	cmp	r2, r6
 8003b16:	d041      	beq.n	8003b9c <HAL_TIM_PWM_ConfigChannel+0x1d0>
  TIMx->CR2 = tmpcr2;
 8003b18:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003b1a:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003b1c:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b1e:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8003b20:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b22:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8003b24:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b26:	6990      	ldr	r0, [r2, #24]
 8003b28:	4320      	orrs	r0, r4
 8003b2a:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b2c:	6990      	ldr	r0, [r2, #24]
 8003b2e:	3c04      	subs	r4, #4
 8003b30:	43a0      	bics	r0, r4
 8003b32:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b34:	6990      	ldr	r0, [r2, #24]
 8003b36:	4301      	orrs	r1, r0
 8003b38:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3a:	2000      	movs	r0, #0
      break;
 8003b3c:	e7bb      	b.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0xea>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b3e:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b40:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b42:	4c2d      	ldr	r4, [pc, #180]	; (8003bf8 <HAL_TIM_PWM_ConfigChannel+0x22c>)
 8003b44:	6a10      	ldr	r0, [r2, #32]
 8003b46:	4020      	ands	r0, r4
 8003b48:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003b4a:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003b4c:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8003b4e:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b50:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8003b52:	680e      	ldr	r6, [r1, #0]
 8003b54:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8003b56:	4c29      	ldr	r4, [pc, #164]	; (8003bfc <HAL_TIM_PWM_ConfigChannel+0x230>)
 8003b58:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b5a:	688c      	ldr	r4, [r1, #8]
 8003b5c:	0224      	lsls	r4, r4, #8
 8003b5e:	4320      	orrs	r0, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b60:	4c1d      	ldr	r4, [pc, #116]	; (8003bd8 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8003b62:	42a2      	cmp	r2, r4
 8003b64:	d027      	beq.n	8003bb6 <HAL_TIM_PWM_ConfigChannel+0x1ea>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b66:	4c1d      	ldr	r4, [pc, #116]	; (8003bdc <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003b68:	42a2      	cmp	r2, r4
 8003b6a:	d02b      	beq.n	8003bc4 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8003b6c:	4c1c      	ldr	r4, [pc, #112]	; (8003be0 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003b6e:	42a2      	cmp	r2, r4
 8003b70:	d028      	beq.n	8003bc4 <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCR3 = OC_Config->Pulse;
 8003b72:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003b74:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003b76:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003b78:	63d4      	str	r4, [r2, #60]	; 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b7a:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8003b7c:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b7e:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b80:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b82:	4320      	orrs	r0, r4
 8003b84:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b86:	69d0      	ldr	r0, [r2, #28]
 8003b88:	3c04      	subs	r4, #4
 8003b8a:	43a0      	bics	r0, r4
 8003b8c:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b8e:	69d0      	ldr	r0, [r2, #28]
 8003b90:	4301      	orrs	r1, r0
 8003b92:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003b94:	2000      	movs	r0, #0
      break;
 8003b96:	e78e      	b.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0xea>
  __HAL_LOCK(htim);
 8003b98:	2002      	movs	r0, #2
 8003b9a:	e78f      	b.n	8003abc <HAL_TIM_PWM_ConfigChannel+0xf0>
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b9c:	2608      	movs	r6, #8
 8003b9e:	43b0      	bics	r0, r6
    tmpccer |= OC_Config->OCNPolarity;
 8003ba0:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ba2:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8003ba4:	4330      	orrs	r0, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ba6:	2604      	movs	r6, #4
 8003ba8:	43b0      	bics	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003baa:	4e15      	ldr	r6, [pc, #84]	; (8003c00 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8003bac:	402e      	ands	r6, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bae:	694d      	ldr	r5, [r1, #20]
 8003bb0:	433d      	orrs	r5, r7
 8003bb2:	4335      	orrs	r5, r6
 8003bb4:	e7b0      	b.n	8003b18 <HAL_TIM_PWM_ConfigChannel+0x14c>
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bb6:	4c13      	ldr	r4, [pc, #76]	; (8003c04 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8003bb8:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bba:	68cc      	ldr	r4, [r1, #12]
 8003bbc:	0224      	lsls	r4, r4, #8
 8003bbe:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bc0:	4808      	ldr	r0, [pc, #32]	; (8003be4 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8003bc2:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bc4:	4c10      	ldr	r4, [pc, #64]	; (8003c08 <HAL_TIM_PWM_ConfigChannel+0x23c>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bc6:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bc8:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bca:	698d      	ldr	r5, [r1, #24]
 8003bcc:	433d      	orrs	r5, r7
 8003bce:	012d      	lsls	r5, r5, #4
 8003bd0:	4325      	orrs	r5, r4
 8003bd2:	e7ce      	b.n	8003b72 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8003bd4:	ffff8cff 	.word	0xffff8cff
 8003bd8:	40012c00 	.word	0x40012c00
 8003bdc:	40014400 	.word	0x40014400
 8003be0:	40014800 	.word	0x40014800
 8003be4:	fffffbff 	.word	0xfffffbff
 8003be8:	ffffefff 	.word	0xffffefff
 8003bec:	ffffdfff 	.word	0xffffdfff
 8003bf0:	ffffbfff 	.word	0xffffbfff
 8003bf4:	fffff3ff 	.word	0xfffff3ff
 8003bf8:	fffffeff 	.word	0xfffffeff
 8003bfc:	fffffdff 	.word	0xfffffdff
 8003c00:	fffffcff 	.word	0xfffffcff
 8003c04:	fffff7ff 	.word	0xfffff7ff
 8003c08:	ffffcfff 	.word	0xffffcfff

08003c0c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003c0c:	233c      	movs	r3, #60	; 0x3c
{
 8003c0e:	b570      	push	{r4, r5, r6, lr}
 8003c10:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8003c12:	5cc0      	ldrb	r0, [r0, r3]
 8003c14:	2801      	cmp	r0, #1
 8003c16:	d100      	bne.n	8003c1a <HAL_TIM_ConfigClockSource+0xe>
 8003c18:	e075      	b.n	8003d06 <HAL_TIM_ConfigClockSource+0xfa>
 8003c1a:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1c:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003c1e:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	3301      	adds	r3, #1
 8003c22:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8003c24:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c26:	4d52      	ldr	r5, [pc, #328]	; (8003d70 <HAL_TIM_ConfigClockSource+0x164>)
  tmpsmcr = htim->Instance->SMCR;
 8003c28:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c2a:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8003c2c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003c2e:	680b      	ldr	r3, [r1, #0]
 8003c30:	2b60      	cmp	r3, #96	; 0x60
 8003c32:	d100      	bne.n	8003c36 <HAL_TIM_ConfigClockSource+0x2a>
 8003c34:	e069      	b.n	8003d0a <HAL_TIM_ConfigClockSource+0xfe>
 8003c36:	d823      	bhi.n	8003c80 <HAL_TIM_ConfigClockSource+0x74>
 8003c38:	2b40      	cmp	r3, #64	; 0x40
 8003c3a:	d100      	bne.n	8003c3e <HAL_TIM_ConfigClockSource+0x32>
 8003c3c:	e07f      	b.n	8003d3e <HAL_TIM_ConfigClockSource+0x132>
 8003c3e:	d952      	bls.n	8003ce6 <HAL_TIM_ConfigClockSource+0xda>
 8003c40:	2b50      	cmp	r3, #80	; 0x50
 8003c42:	d13b      	bne.n	8003cbc <HAL_TIM_ConfigClockSource+0xb0>
                               sClockSourceConfig->ClockPolarity,
 8003c44:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003c46:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c48:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4a:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c4c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4e:	43a6      	bics	r6, r4
 8003c50:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c52:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8003c54:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c56:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c58:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c5a:	240a      	movs	r4, #10
 8003c5c:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8003c5e:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c60:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003c62:	6201      	str	r1, [r0, #32]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c64:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003c66:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c68:	438b      	bics	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c6a:	3919      	subs	r1, #25
 8003c6c:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c6e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003c70:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003c72:	233d      	movs	r3, #61	; 0x3d
 8003c74:	2101      	movs	r1, #1
 8003c76:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8003c78:	2100      	movs	r1, #0
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	54d1      	strb	r1, [r2, r3]
}
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003c80:	2480      	movs	r4, #128	; 0x80
 8003c82:	0164      	lsls	r4, r4, #5
 8003c84:	42a3      	cmp	r3, r4
 8003c86:	d03c      	beq.n	8003d02 <HAL_TIM_ConfigClockSource+0xf6>
 8003c88:	2480      	movs	r4, #128	; 0x80
 8003c8a:	01a4      	lsls	r4, r4, #6
 8003c8c:	42a3      	cmp	r3, r4
 8003c8e:	d117      	bne.n	8003cc0 <HAL_TIM_ConfigClockSource+0xb4>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c90:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c92:	4b38      	ldr	r3, [pc, #224]	; (8003d74 <HAL_TIM_ConfigClockSource+0x168>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c94:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c96:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c98:	688b      	ldr	r3, [r1, #8]
 8003c9a:	68c9      	ldr	r1, [r1, #12]
 8003c9c:	432b      	orrs	r3, r5
 8003c9e:	0209      	lsls	r1, r1, #8
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca4:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ca6:	2380      	movs	r3, #128	; 0x80
 8003ca8:	6881      	ldr	r1, [r0, #8]
 8003caa:	01db      	lsls	r3, r3, #7
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb0:	2000      	movs	r0, #0
      break;
 8003cb2:	e7de      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003cb4:	2110      	movs	r1, #16
 8003cb6:	001c      	movs	r4, r3
 8003cb8:	438c      	bics	r4, r1
 8003cba:	d019      	beq.n	8003cf0 <HAL_TIM_ConfigClockSource+0xe4>
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	e7d8      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x66>
 8003cc0:	2b70      	cmp	r3, #112	; 0x70
 8003cc2:	d1fb      	bne.n	8003cbc <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr = TIMx->SMCR;
 8003cc4:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc6:	4b2b      	ldr	r3, [pc, #172]	; (8003d74 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cc8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cca:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ccc:	688b      	ldr	r3, [r1, #8]
 8003cce:	68c9      	ldr	r1, [r1, #12]
 8003cd0:	432b      	orrs	r3, r5
 8003cd2:	0209      	lsls	r1, r1, #8
 8003cd4:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cd6:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cd8:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8003cda:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003cdc:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cde:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8003ce0:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce2:	2000      	movs	r0, #0
      break;
 8003ce4:	e7c5      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d002      	beq.n	8003cf0 <HAL_TIM_ConfigClockSource+0xe4>
 8003cea:	d9e3      	bls.n	8003cb4 <HAL_TIM_ConfigClockSource+0xa8>
 8003cec:	2b30      	cmp	r3, #48	; 0x30
 8003cee:	d1e5      	bne.n	8003cbc <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cf0:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003cf2:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cf4:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cf6:	430b      	orrs	r3, r1
 8003cf8:	2107      	movs	r1, #7
 8003cfa:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003cfc:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfe:	2000      	movs	r0, #0
}
 8003d00:	e7b7      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8003d02:	2000      	movs	r0, #0
 8003d04:	e7b5      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8003d06:	2002      	movs	r0, #2
 8003d08:	e7b9      	b.n	8003c7e <HAL_TIM_ConfigClockSource+0x72>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d0a:	2510      	movs	r5, #16
 8003d0c:	6a04      	ldr	r4, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8003d0e:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d10:	43ac      	bics	r4, r5
                               sClockSourceConfig->ClockFilter);
 8003d12:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d14:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d16:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d18:	4e17      	ldr	r6, [pc, #92]	; (8003d78 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d1a:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d1c:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d1e:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d20:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8003d22:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8003d24:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d26:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d28:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	4323      	orrs	r3, r4
  TIMx->CCER = tmpccer;
 8003d2e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003d30:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d32:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d34:	3909      	subs	r1, #9
 8003d36:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003d38:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3a:	2000      	movs	r0, #0
}
 8003d3c:	e799      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 8003d3e:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003d40:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8003d42:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d44:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d46:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d48:	43a6      	bics	r6, r4
 8003d4a:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d4c:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8003d4e:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d50:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d52:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d54:	240a      	movs	r4, #10
 8003d56:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8003d58:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8003d5a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003d5c:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d5e:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003d60:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d62:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d64:	3929      	subs	r1, #41	; 0x29
 8003d66:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003d68:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6a:	2000      	movs	r0, #0
}
 8003d6c:	e781      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x66>
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	ffff0088 	.word	0xffff0088
 8003d74:	ffff00ff 	.word	0xffff00ff
 8003d78:	ffff0fff 	.word	0xffff0fff

08003d7c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8003d7c:	233c      	movs	r3, #60	; 0x3c
{
 8003d7e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003d80:	5cc2      	ldrb	r2, [r0, r3]
 8003d82:	2a01      	cmp	r2, #1
 8003d84:	d04d      	beq.n	8003e22 <HAL_TIM_SlaveConfigSynchro+0xa6>
 8003d86:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	2202      	movs	r2, #2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003d8a:	2607      	movs	r6, #7
  __HAL_LOCK(htim);
 8003d8c:	54c5      	strb	r5, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8e:	3301      	adds	r3, #1
 8003d90:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8003d92:	6804      	ldr	r4, [r0, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d94:	3333      	adds	r3, #51	; 0x33
  tmpsmcr = htim->Instance->SMCR;
 8003d96:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d98:	439a      	bics	r2, r3
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003d9a:	684b      	ldr	r3, [r1, #4]
 8003d9c:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003d9e:	43b2      	bics	r2, r6
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003da0:	680e      	ldr	r6, [r1, #0]
 8003da2:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 8003da4:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8003da6:	2b50      	cmp	r3, #80	; 0x50
 8003da8:	d05f      	beq.n	8003e6a <HAL_TIM_SlaveConfigSynchro+0xee>
 8003daa:	d90f      	bls.n	8003dcc <HAL_TIM_SlaveConfigSynchro+0x50>
 8003dac:	2b60      	cmp	r3, #96	; 0x60
 8003dae:	d03a      	beq.n	8003e26 <HAL_TIM_SlaveConfigSynchro+0xaa>
 8003db0:	2b70      	cmp	r3, #112	; 0x70
 8003db2:	d10e      	bne.n	8003dd2 <HAL_TIM_SlaveConfigSynchro+0x56>
  tmpsmcr = TIMx->SMCR;
 8003db4:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db6:	4b35      	ldr	r3, [pc, #212]	; (8003e8c <HAL_TIM_SlaveConfigSynchro+0x110>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003db8:	688d      	ldr	r5, [r1, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dba:	401a      	ands	r2, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dbc:	68cb      	ldr	r3, [r1, #12]
 8003dbe:	6909      	ldr	r1, [r1, #16]
 8003dc0:	432b      	orrs	r3, r5
 8003dc2:	0209      	lsls	r1, r1, #8
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8003dc8:	60a3      	str	r3, [r4, #8]
 8003dca:	e00f      	b.n	8003dec <HAL_TIM_SlaveConfigSynchro+0x70>
  switch (sSlaveConfig->InputTrigger)
 8003dcc:	2b40      	cmp	r3, #64	; 0x40
 8003dce:	d03d      	beq.n	8003e4c <HAL_TIM_SlaveConfigSynchro+0xd0>
 8003dd0:	d907      	bls.n	8003de2 <HAL_TIM_SlaveConfigSynchro+0x66>
    htim->State = HAL_TIM_STATE_READY;
 8003dd2:	233d      	movs	r3, #61	; 0x3d
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(htim);
 8003dd8:	2200      	movs	r2, #0
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8003dde:	2001      	movs	r0, #1
 8003de0:	e013      	b.n	8003e0a <HAL_TIM_SlaveConfigSynchro+0x8e>
  switch (sSlaveConfig->InputTrigger)
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d002      	beq.n	8003dec <HAL_TIM_SlaveConfigSynchro+0x70>
 8003de6:	d911      	bls.n	8003e0c <HAL_TIM_SlaveConfigSynchro+0x90>
 8003de8:	2b30      	cmp	r3, #48	; 0x30
 8003dea:	d1f2      	bne.n	8003dd2 <HAL_TIM_SlaveConfigSynchro+0x56>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003dec:	2240      	movs	r2, #64	; 0x40
 8003dee:	68e3      	ldr	r3, [r4, #12]
 8003df0:	4393      	bics	r3, r2
 8003df2:	60e3      	str	r3, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003df4:	68e3      	ldr	r3, [r4, #12]
 8003df6:	4a26      	ldr	r2, [pc, #152]	; (8003e90 <HAL_TIM_SlaveConfigSynchro+0x114>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	60e3      	str	r3, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	233d      	movs	r3, #61	; 0x3d
 8003e00:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8003e02:	2200      	movs	r2, #0
 8003e04:	3b01      	subs	r3, #1
 8003e06:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8003e08:	2000      	movs	r0, #0
}
 8003e0a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	4393      	bics	r3, r2
 8003e10:	d0ec      	beq.n	8003dec <HAL_TIM_SlaveConfigSynchro+0x70>
    htim->State = HAL_TIM_STATE_READY;
 8003e12:	233d      	movs	r3, #61	; 0x3d
 8003e14:	2201      	movs	r2, #1
 8003e16:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(htim);
 8003e18:	2200      	movs	r2, #0
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8003e1e:	2001      	movs	r0, #1
 8003e20:	e7f3      	b.n	8003e0a <HAL_TIM_SlaveConfigSynchro+0x8e>
  __HAL_LOCK(htim);
 8003e22:	2002      	movs	r0, #2
 8003e24:	e7f1      	b.n	8003e0a <HAL_TIM_SlaveConfigSynchro+0x8e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e26:	2510      	movs	r5, #16
                               sSlaveConfig->TriggerPolarity,
 8003e28:	688b      	ldr	r3, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8003e2a:	690a      	ldr	r2, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e2c:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e2e:	4e19      	ldr	r6, [pc, #100]	; (8003e94 <HAL_TIM_SlaveConfigSynchro+0x118>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e30:	43a9      	bics	r1, r5
 8003e32:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e34:	69a5      	ldr	r5, [r4, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e36:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e38:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e3a:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e3c:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8003e3e:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e40:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e42:	43a9      	bics	r1, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e44:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8003e46:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8003e48:	6223      	str	r3, [r4, #32]
 8003e4a:	e7cf      	b.n	8003dec <HAL_TIM_SlaveConfigSynchro+0x70>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003e4c:	2e05      	cmp	r6, #5
 8003e4e:	d0c0      	beq.n	8003dd2 <HAL_TIM_SlaveConfigSynchro+0x56>
      tmpccer = htim->Instance->CCER;
 8003e50:	6a26      	ldr	r6, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003e52:	6a23      	ldr	r3, [r4, #32]
 8003e54:	43ab      	bics	r3, r5
 8003e56:	6223      	str	r3, [r4, #32]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e58:	23f0      	movs	r3, #240	; 0xf0
      tmpccmr1 = htim->Instance->CCMR1;
 8003e5a:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e5c:	439a      	bics	r2, r3
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e5e:	690b      	ldr	r3, [r1, #16]
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 = tmpccmr1;
 8003e64:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8003e66:	6226      	str	r6, [r4, #32]
 8003e68:	e7c0      	b.n	8003dec <HAL_TIM_SlaveConfigSynchro+0x70>
                               sSlaveConfig->TriggerPolarity,
 8003e6a:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8003e6c:	690b      	ldr	r3, [r1, #16]
  tmpccer = TIMx->CCER;
 8003e6e:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e70:	6a26      	ldr	r6, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e72:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e74:	43ae      	bics	r6, r5
 8003e76:	6226      	str	r6, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e78:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8003e7a:	69a5      	ldr	r5, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e7c:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e7e:	432b      	orrs	r3, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e80:	250a      	movs	r5, #10
 8003e82:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8003e84:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003e86:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003e88:	6222      	str	r2, [r4, #32]
 8003e8a:	e7af      	b.n	8003dec <HAL_TIM_SlaveConfigSynchro+0x70>
 8003e8c:	ffff00ff 	.word	0xffff00ff
 8003e90:	ffffbfff 	.word	0xffffbfff
 8003e94:	ffff0fff 	.word	0xffff0fff

08003e98 <HAL_TIM_OC_DelayElapsedCallback>:
 8003e98:	4770      	bx	lr
 8003e9a:	46c0      	nop			; (mov r8, r8)

08003e9c <HAL_TIM_IC_CaptureCallback>:
 8003e9c:	4770      	bx	lr
 8003e9e:	46c0      	nop			; (mov r8, r8)

08003ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003ea0:	4770      	bx	lr
 8003ea2:	46c0      	nop			; (mov r8, r8)

08003ea4 <HAL_TIM_TriggerCallback>:
 8003ea4:	4770      	bx	lr
 8003ea6:	46c0      	nop			; (mov r8, r8)

08003ea8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	6803      	ldr	r3, [r0, #0]
{
 8003eac:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eae:	6919      	ldr	r1, [r3, #16]
{
 8003eb0:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eb2:	420a      	tst	r2, r1
 8003eb4:	d002      	beq.n	8003ebc <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003eb6:	68d9      	ldr	r1, [r3, #12]
 8003eb8:	420a      	tst	r2, r1
 8003eba:	d165      	bne.n	8003f88 <HAL_TIM_IRQHandler+0xe0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	6919      	ldr	r1, [r3, #16]
 8003ec0:	420a      	tst	r2, r1
 8003ec2:	d002      	beq.n	8003eca <HAL_TIM_IRQHandler+0x22>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ec4:	68d9      	ldr	r1, [r3, #12]
 8003ec6:	420a      	tst	r2, r1
 8003ec8:	d14b      	bne.n	8003f62 <HAL_TIM_IRQHandler+0xba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eca:	2208      	movs	r2, #8
 8003ecc:	6919      	ldr	r1, [r3, #16]
 8003ece:	420a      	tst	r2, r1
 8003ed0:	d002      	beq.n	8003ed8 <HAL_TIM_IRQHandler+0x30>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ed2:	68d9      	ldr	r1, [r3, #12]
 8003ed4:	420a      	tst	r2, r1
 8003ed6:	d133      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x98>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ed8:	2210      	movs	r2, #16
 8003eda:	6919      	ldr	r1, [r3, #16]
 8003edc:	420a      	tst	r2, r1
 8003ede:	d002      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x3e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ee0:	68d9      	ldr	r1, [r3, #12]
 8003ee2:	420a      	tst	r2, r1
 8003ee4:	d11c      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x78>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	6919      	ldr	r1, [r3, #16]
 8003eea:	420a      	tst	r2, r1
 8003eec:	d002      	beq.n	8003ef4 <HAL_TIM_IRQHandler+0x4c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eee:	68d9      	ldr	r1, [r3, #12]
 8003ef0:	420a      	tst	r2, r1
 8003ef2:	d15c      	bne.n	8003fae <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ef4:	2280      	movs	r2, #128	; 0x80
 8003ef6:	6919      	ldr	r1, [r3, #16]
 8003ef8:	420a      	tst	r2, r1
 8003efa:	d002      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003efc:	68d9      	ldr	r1, [r3, #12]
 8003efe:	420a      	tst	r2, r1
 8003f00:	d15c      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x114>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f02:	2240      	movs	r2, #64	; 0x40
 8003f04:	6919      	ldr	r1, [r3, #16]
 8003f06:	420a      	tst	r2, r1
 8003f08:	d002      	beq.n	8003f10 <HAL_TIM_IRQHandler+0x68>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f0a:	68d9      	ldr	r1, [r3, #12]
 8003f0c:	420a      	tst	r2, r1
 8003f0e:	d15d      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x124>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f10:	2220      	movs	r2, #32
 8003f12:	6919      	ldr	r1, [r3, #16]
 8003f14:	420a      	tst	r2, r1
 8003f16:	d002      	beq.n	8003f1e <HAL_TIM_IRQHandler+0x76>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f18:	68d9      	ldr	r1, [r3, #12]
 8003f1a:	420a      	tst	r2, r1
 8003f1c:	d141      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0xfa>
}
 8003f1e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f20:	3a21      	subs	r2, #33	; 0x21
 8003f22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f24:	3219      	adds	r2, #25
 8003f26:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	23c0      	movs	r3, #192	; 0xc0
 8003f2c:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f30:	421a      	tst	r2, r3
 8003f32:	d05e      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f34:	f7ff ffb2 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	e7d2      	b.n	8003ee6 <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f40:	3a11      	subs	r2, #17
 8003f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f44:	320d      	adds	r2, #13
 8003f46:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f48:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f4c:	079b      	lsls	r3, r3, #30
 8003f4e:	d14d      	bne.n	8003fec <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f50:	f7ff ffa2 	bl	8003e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f54:	0020      	movs	r0, r4
 8003f56:	f7ff ffa3 	bl	8003ea0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	e7ba      	b.n	8003ed8 <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f62:	3a09      	subs	r2, #9
 8003f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f66:	3207      	adds	r2, #7
 8003f68:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f6a:	699a      	ldr	r2, [r3, #24]
 8003f6c:	23c0      	movs	r3, #192	; 0xc0
 8003f6e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003f70:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f72:	421a      	tst	r2, r3
 8003f74:	d137      	bne.n	8003fe6 <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f76:	f7ff ff8f 	bl	8003e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f7a:	0020      	movs	r0, r4
 8003f7c:	f7ff ff90 	bl	8003ea0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f80:	2300      	movs	r3, #0
 8003f82:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	e7a0      	b.n	8003eca <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f88:	3a05      	subs	r2, #5
 8003f8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f8c:	3204      	adds	r2, #4
 8003f8e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	079b      	lsls	r3, r3, #30
 8003f94:	d021      	beq.n	8003fda <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 8003f96:	f7ff ff81 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	e78c      	b.n	8003ebc <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fa2:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 8003fa4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fa6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003fa8:	f000 f8d2 	bl	8004150 <HAL_TIMEx_CommutCallback>
}
 8003fac:	e7b7      	b.n	8003f1e <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fae:	3a03      	subs	r2, #3
 8003fb0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fb2:	0020      	movs	r0, r4
 8003fb4:	f7fc fcae 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	e79b      	b.n	8003ef4 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fbc:	3a02      	subs	r2, #2
 8003fbe:	3aff      	subs	r2, #255	; 0xff
 8003fc0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003fc2:	0020      	movs	r0, r4
 8003fc4:	f000 f8c6 	bl	8004154 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	e79a      	b.n	8003f02 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fcc:	3a81      	subs	r2, #129	; 0x81
 8003fce:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003fd0:	0020      	movs	r0, r4
 8003fd2:	f7ff ff67 	bl	8003ea4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	e79a      	b.n	8003f10 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	f7ff ff5d 	bl	8003e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fde:	0020      	movs	r0, r4
 8003fe0:	f7ff ff5e 	bl	8003ea0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003fe4:	e7d9      	b.n	8003f9a <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe6:	f7ff ff59 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 8003fea:	e7c9      	b.n	8003f80 <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 8003fec:	f7ff ff56 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 8003ff0:	e7b3      	b.n	8003f5a <HAL_TIM_IRQHandler+0xb2>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff2:	f7ff ff51 	bl	8003e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff6:	0020      	movs	r0, r4
 8003ff8:	f7ff ff52 	bl	8003ea0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003ffc:	e79c      	b.n	8003f38 <HAL_TIM_IRQHandler+0x90>
 8003ffe:	46c0      	nop			; (mov r8, r8)

08004000 <HAL_TIMEx_PWMN_Start>:
 8004000:	2900      	cmp	r1, #0
 8004002:	d125      	bne.n	8004050 <HAL_TIMEx_PWMN_Start+0x50>
 8004004:	2342      	movs	r3, #66	; 0x42
 8004006:	5cc2      	ldrb	r2, [r0, r3]
 8004008:	2a01      	cmp	r2, #1
 800400a:	d129      	bne.n	8004060 <HAL_TIMEx_PWMN_Start+0x60>
 800400c:	2202      	movs	r2, #2
 800400e:	54c2      	strb	r2, [r0, r3]
 8004010:	221f      	movs	r2, #31
 8004012:	4011      	ands	r1, r2
 8004014:	3a1b      	subs	r2, #27
 8004016:	408a      	lsls	r2, r1
 8004018:	6803      	ldr	r3, [r0, #0]
 800401a:	6a19      	ldr	r1, [r3, #32]
 800401c:	4391      	bics	r1, r2
 800401e:	6219      	str	r1, [r3, #32]
 8004020:	6a19      	ldr	r1, [r3, #32]
 8004022:	430a      	orrs	r2, r1
 8004024:	621a      	str	r2, [r3, #32]
 8004026:	2280      	movs	r2, #128	; 0x80
 8004028:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800402a:	0212      	lsls	r2, r2, #8
 800402c:	430a      	orrs	r2, r1
 800402e:	645a      	str	r2, [r3, #68]	; 0x44
 8004030:	4a15      	ldr	r2, [pc, #84]	; (8004088 <HAL_TIMEx_PWMN_Start+0x88>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d016      	beq.n	8004064 <HAL_TIMEx_PWMN_Start+0x64>
 8004036:	2280      	movs	r2, #128	; 0x80
 8004038:	05d2      	lsls	r2, r2, #23
 800403a:	4293      	cmp	r3, r2
 800403c:	d012      	beq.n	8004064 <HAL_TIMEx_PWMN_Start+0x64>
 800403e:	4a13      	ldr	r2, [pc, #76]	; (800408c <HAL_TIMEx_PWMN_Start+0x8c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00f      	beq.n	8004064 <HAL_TIMEx_PWMN_Start+0x64>
 8004044:	2101      	movs	r1, #1
 8004046:	2000      	movs	r0, #0
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	4770      	bx	lr
 8004050:	2904      	cmp	r1, #4
 8004052:	d00e      	beq.n	8004072 <HAL_TIMEx_PWMN_Start+0x72>
 8004054:	2908      	cmp	r1, #8
 8004056:	d011      	beq.n	800407c <HAL_TIMEx_PWMN_Start+0x7c>
 8004058:	2345      	movs	r3, #69	; 0x45
 800405a:	5cc2      	ldrb	r2, [r0, r3]
 800405c:	2a01      	cmp	r2, #1
 800405e:	d0d5      	beq.n	800400c <HAL_TIMEx_PWMN_Start+0xc>
 8004060:	2001      	movs	r0, #1
 8004062:	e7f4      	b.n	800404e <HAL_TIMEx_PWMN_Start+0x4e>
 8004064:	2207      	movs	r2, #7
 8004066:	6899      	ldr	r1, [r3, #8]
 8004068:	400a      	ands	r2, r1
 800406a:	2a06      	cmp	r2, #6
 800406c:	d1ea      	bne.n	8004044 <HAL_TIMEx_PWMN_Start+0x44>
 800406e:	2000      	movs	r0, #0
 8004070:	e7ed      	b.n	800404e <HAL_TIMEx_PWMN_Start+0x4e>
 8004072:	2343      	movs	r3, #67	; 0x43
 8004074:	5cc2      	ldrb	r2, [r0, r3]
 8004076:	2a01      	cmp	r2, #1
 8004078:	d0c8      	beq.n	800400c <HAL_TIMEx_PWMN_Start+0xc>
 800407a:	e7f1      	b.n	8004060 <HAL_TIMEx_PWMN_Start+0x60>
 800407c:	2344      	movs	r3, #68	; 0x44
 800407e:	5cc2      	ldrb	r2, [r0, r3]
 8004080:	2a01      	cmp	r2, #1
 8004082:	d0c3      	beq.n	800400c <HAL_TIMEx_PWMN_Start+0xc>
 8004084:	e7ec      	b.n	8004060 <HAL_TIMEx_PWMN_Start+0x60>
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40000400 	.word	0x40000400

08004090 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004090:	233c      	movs	r3, #60	; 0x3c
{
 8004092:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8004094:	5cc3      	ldrb	r3, [r0, r3]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d021      	beq.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409a:	233d      	movs	r3, #61	; 0x3d
 800409c:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800409e:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 80040a2:	6803      	ldr	r3, [r0, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80040a6:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80040a8:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040aa:	680d      	ldr	r5, [r1, #0]
 80040ac:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b0:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d006      	beq.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80040b6:	2280      	movs	r2, #128	; 0x80
 80040b8:	05d2      	lsls	r2, r2, #23
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d002      	beq.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80040be:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d104      	bne.n	80040ce <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040c4:	2280      	movs	r2, #128	; 0x80
 80040c6:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040c8:	684a      	ldr	r2, [r1, #4]
 80040ca:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040cc:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040ce:	233d      	movs	r3, #61	; 0x3d
 80040d0:	2201      	movs	r2, #1
 80040d2:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80040d4:	2200      	movs	r2, #0
 80040d6:	3b01      	subs	r3, #1
 80040d8:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80040da:	2000      	movs	r0, #0
}
 80040dc:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80040de:	2002      	movs	r0, #2
 80040e0:	e7fc      	b.n	80040dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	40012c00 	.word	0x40012c00
 80040e8:	40000400 	.word	0x40000400

080040ec <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ec:	223c      	movs	r2, #60	; 0x3c
{
 80040ee:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80040f0:	5c83      	ldrb	r3, [r0, r2]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d01e      	beq.n	8004134 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040f6:	68cb      	ldr	r3, [r1, #12]
 80040f8:	4c0f      	ldr	r4, [pc, #60]	; (8004138 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 80040fa:	4023      	ands	r3, r4
 80040fc:	688c      	ldr	r4, [r1, #8]
 80040fe:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004100:	4c0e      	ldr	r4, [pc, #56]	; (800413c <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8004102:	4023      	ands	r3, r4
 8004104:	684c      	ldr	r4, [r1, #4]
 8004106:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004108:	4c0d      	ldr	r4, [pc, #52]	; (8004140 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 800410a:	4023      	ands	r3, r4
 800410c:	680c      	ldr	r4, [r1, #0]
 800410e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004110:	4c0c      	ldr	r4, [pc, #48]	; (8004144 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8004112:	4023      	ands	r3, r4
 8004114:	690c      	ldr	r4, [r1, #16]
 8004116:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004118:	4c0b      	ldr	r4, [pc, #44]	; (8004148 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 800411a:	4023      	ands	r3, r4
 800411c:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800411e:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004120:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004122:	4c0a      	ldr	r4, [pc, #40]	; (800414c <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8004124:	4023      	ands	r3, r4
 8004126:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004128:	6801      	ldr	r1, [r0, #0]
 800412a:	644b      	str	r3, [r1, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800412c:	2300      	movs	r3, #0
 800412e:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8004130:	2000      	movs	r0, #0
}
 8004132:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8004134:	2002      	movs	r0, #2
 8004136:	e7fc      	b.n	8004132 <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 8004138:	fffffcff 	.word	0xfffffcff
 800413c:	fffffbff 	.word	0xfffffbff
 8004140:	fffff7ff 	.word	0xfffff7ff
 8004144:	ffffefff 	.word	0xffffefff
 8004148:	ffffdfff 	.word	0xffffdfff
 800414c:	ffffbfff 	.word	0xffffbfff

08004150 <HAL_TIMEx_CommutCallback>:
 8004150:	4770      	bx	lr
 8004152:	46c0      	nop			; (mov r8, r8)

08004154 <HAL_TIMEx_BreakCallback>:
 8004154:	4770      	bx	lr
 8004156:	46c0      	nop			; (mov r8, r8)

08004158 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	4657      	mov	r7, sl
 800415c:	464e      	mov	r6, r9
 800415e:	4645      	mov	r5, r8
 8004160:	46de      	mov	lr, fp
 8004162:	b5e0      	push	{r5, r6, r7, lr}
 8004164:	001e      	movs	r6, r3
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004166:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8004168:	0005      	movs	r5, r0
 800416a:	000f      	movs	r7, r1
 800416c:	0014      	movs	r4, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800416e:	2b20      	cmp	r3, #32
 8004170:	d000      	beq.n	8004174 <HAL_UART_Transmit+0x1c>
 8004172:	e0a8      	b.n	80042c6 <HAL_UART_Transmit+0x16e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004174:	2900      	cmp	r1, #0
 8004176:	d04a      	beq.n	800420e <HAL_UART_Transmit+0xb6>
 8004178:	2a00      	cmp	r2, #0
 800417a:	d048      	beq.n	800420e <HAL_UART_Transmit+0xb6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800417c:	2380      	movs	r3, #128	; 0x80
 800417e:	6882      	ldr	r2, [r0, #8]
 8004180:	015b      	lsls	r3, r3, #5
 8004182:	429a      	cmp	r2, r3
 8004184:	d104      	bne.n	8004190 <HAL_UART_Transmit+0x38>
 8004186:	6903      	ldr	r3, [r0, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_UART_Transmit+0x38>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800418c:	07cb      	lsls	r3, r1, #31
 800418e:	d43e      	bmi.n	800420e <HAL_UART_Transmit+0xb6>
      {
        return  HAL_ERROR;
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004190:	2200      	movs	r2, #0
 8004192:	2384      	movs	r3, #132	; 0x84
 8004194:	50ea      	str	r2, [r5, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004196:	3b63      	subs	r3, #99	; 0x63
 8004198:	67eb      	str	r3, [r5, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800419a:	f7fd f92d 	bl	80013f8 <HAL_GetTick>

    huart->TxXferSize  = Size;
 800419e:	2350      	movs	r3, #80	; 0x50
 80041a0:	52ec      	strh	r4, [r5, r3]
    huart->TxXferCount = Size;
 80041a2:	3302      	adds	r3, #2
      pdata16bits = (const uint16_t *) pData;
    }
    else
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
 80041a4:	2100      	movs	r1, #0
    huart->TxXferCount = Size;
 80041a6:	52ec      	strh	r4, [r5, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	68aa      	ldr	r2, [r5, #8]
    tickstart = HAL_GetTick();
 80041ac:	4680      	mov	r8, r0
      pdata16bits = NULL;
 80041ae:	468a      	mov	sl, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b0:	015b      	lsls	r3, r3, #5
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d100      	bne.n	80041b8 <HAL_UART_Transmit+0x60>
 80041b6:	e0a3      	b.n	8004300 <HAL_UART_Transmit+0x1a8>
    }

    while (huart->TxXferCount > 0U)
 80041b8:	2352      	movs	r3, #82	; 0x52
 80041ba:	5aeb      	ldrh	r3, [r5, r3]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d100      	bne.n	80041c2 <HAL_UART_Transmit+0x6a>
 80041c0:	e0d6      	b.n	8004370 <HAL_UART_Transmit+0x218>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041c2:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c4:	2480      	movs	r4, #128	; 0x80
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041c6:	4691      	mov	r9, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c8:	682b      	ldr	r3, [r5, #0]
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041ca:	2208      	movs	r2, #8
 80041cc:	4693      	mov	fp, r2
 80041ce:	1c72      	adds	r2, r6, #1
 80041d0:	d124      	bne.n	800421c <HAL_UART_Transmit+0xc4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	4214      	tst	r4, r2
 80041d6:	d0fc      	beq.n	80041d2 <HAL_UART_Transmit+0x7a>
      if (pdata8bits == NULL)
 80041d8:	2f00      	cmp	r7, #0
 80041da:	d06b      	beq.n	80042b4 <HAL_UART_Transmit+0x15c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041dc:	783a      	ldrb	r2, [r7, #0]
        pdata8bits++;
 80041de:	3701      	adds	r7, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041e0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 80041e2:	2152      	movs	r1, #82	; 0x52
 80041e4:	5a6a      	ldrh	r2, [r5, r1]
 80041e6:	3a01      	subs	r2, #1
 80041e8:	b292      	uxth	r2, r2
 80041ea:	526a      	strh	r2, [r5, r1]
    while (huart->TxXferCount > 0U)
 80041ec:	5a6a      	ldrh	r2, [r5, r1]
 80041ee:	2a00      	cmp	r2, #0
 80041f0:	d1eb      	bne.n	80041ca <HAL_UART_Transmit+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041f2:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f4:	2440      	movs	r4, #64	; 0x40
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041f6:	4691      	mov	r9, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041f8:	2708      	movs	r7, #8
 80041fa:	1c72      	adds	r2, r6, #1
 80041fc:	d165      	bne.n	80042ca <HAL_UART_Transmit+0x172>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041fe:	2140      	movs	r1, #64	; 0x40
 8004200:	69da      	ldr	r2, [r3, #28]
 8004202:	4211      	tst	r1, r2
 8004204:	d0fc      	beq.n	8004200 <HAL_UART_Transmit+0xa8>
    huart->gState = HAL_UART_STATE_READY;
 8004206:	2320      	movs	r3, #32
    return HAL_OK;
 8004208:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 800420a:	67eb      	str	r3, [r5, #124]	; 0x7c
    return HAL_OK;
 800420c:	e000      	b.n	8004210 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 800420e:	2001      	movs	r0, #1
}
 8004210:	bcf0      	pop	{r4, r5, r6, r7}
 8004212:	46bb      	mov	fp, r7
 8004214:	46b2      	mov	sl, r6
 8004216:	46a9      	mov	r9, r5
 8004218:	46a0      	mov	r8, r4
 800421a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800421c:	69da      	ldr	r2, [r3, #28]
 800421e:	4214      	tst	r4, r2
 8004220:	d1da      	bne.n	80041d8 <HAL_UART_Transmit+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004222:	f7fd f8e9 	bl	80013f8 <HAL_GetTick>
 8004226:	4643      	mov	r3, r8
 8004228:	1ac0      	subs	r0, r0, r3
 800422a:	4286      	cmp	r6, r0
 800422c:	d33e      	bcc.n	80042ac <HAL_UART_Transmit+0x154>
 800422e:	2e00      	cmp	r6, #0
 8004230:	d03c      	beq.n	80042ac <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004232:	4649      	mov	r1, r9
 8004234:	682b      	ldr	r3, [r5, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4211      	tst	r1, r2
 800423a:	d0c8      	beq.n	80041ce <HAL_UART_Transmit+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800423c:	4659      	mov	r1, fp
 800423e:	69da      	ldr	r2, [r3, #28]
 8004240:	4211      	tst	r1, r2
 8004242:	d164      	bne.n	800430e <HAL_UART_Transmit+0x1b6>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004244:	2280      	movs	r2, #128	; 0x80
 8004246:	69d9      	ldr	r1, [r3, #28]
 8004248:	0112      	lsls	r2, r2, #4
 800424a:	4211      	tst	r1, r2
 800424c:	d0bf      	beq.n	80041ce <HAL_UART_Transmit+0x76>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800424e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004250:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004254:	2201      	movs	r2, #1
 8004256:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800425a:	6829      	ldr	r1, [r5, #0]
 800425c:	4c46      	ldr	r4, [pc, #280]	; (8004378 <HAL_UART_Transmit+0x220>)
 800425e:	680b      	ldr	r3, [r1, #0]
 8004260:	4023      	ands	r3, r4
 8004262:	600b      	str	r3, [r1, #0]
 8004264:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004268:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004270:	6829      	ldr	r1, [r5, #0]
 8004272:	688b      	ldr	r3, [r1, #8]
 8004274:	4393      	bics	r3, r2
 8004276:	608b      	str	r3, [r1, #8]
 8004278:	f380 8810 	msr	PRIMASK, r0

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800427c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800427e:	2b01      	cmp	r3, #1
 8004280:	d10a      	bne.n	8004298 <HAL_UART_Transmit+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004282:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004286:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800428a:	2010      	movs	r0, #16
 800428c:	682a      	ldr	r2, [r5, #0]
 800428e:	6813      	ldr	r3, [r2, #0]
 8004290:	4383      	bics	r3, r0
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004298:	2220      	movs	r2, #32
 800429a:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800429c:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800429e:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a0:	2300      	movs	r3, #0
 80042a2:	662b      	str	r3, [r5, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042a4:	66ab      	str	r3, [r5, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042a6:	506a      	str	r2, [r5, r1]
          __HAL_UNLOCK(huart);
 80042a8:	3258      	adds	r2, #88	; 0x58
 80042aa:	54ab      	strb	r3, [r5, r2]
      huart->gState = HAL_UART_STATE_READY;
 80042ac:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80042ae:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 80042b0:	67eb      	str	r3, [r5, #124]	; 0x7c
      return HAL_TIMEOUT;
 80042b2:	e7ad      	b.n	8004210 <HAL_UART_Transmit+0xb8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042b4:	4652      	mov	r2, sl
 80042b6:	8812      	ldrh	r2, [r2, #0]
 80042b8:	05d2      	lsls	r2, r2, #23
 80042ba:	0dd2      	lsrs	r2, r2, #23
 80042bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042be:	2202      	movs	r2, #2
 80042c0:	4694      	mov	ip, r2
 80042c2:	44e2      	add	sl, ip
 80042c4:	e78d      	b.n	80041e2 <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 80042c6:	2002      	movs	r0, #2
 80042c8:	e7a2      	b.n	8004210 <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	421c      	tst	r4, r3
 80042ce:	d19a      	bne.n	8004206 <HAL_UART_Transmit+0xae>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d0:	f7fd f892 	bl	80013f8 <HAL_GetTick>
 80042d4:	4643      	mov	r3, r8
 80042d6:	1ac0      	subs	r0, r0, r3
 80042d8:	4286      	cmp	r6, r0
 80042da:	d3e7      	bcc.n	80042ac <HAL_UART_Transmit+0x154>
 80042dc:	2e00      	cmp	r6, #0
 80042de:	d0e5      	beq.n	80042ac <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042e0:	4649      	mov	r1, r9
 80042e2:	682b      	ldr	r3, [r5, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	4211      	tst	r1, r2
 80042e8:	d100      	bne.n	80042ec <HAL_UART_Transmit+0x194>
 80042ea:	e786      	b.n	80041fa <HAL_UART_Transmit+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042ec:	69da      	ldr	r2, [r3, #28]
 80042ee:	4217      	tst	r7, r2
 80042f0:	d140      	bne.n	8004374 <HAL_UART_Transmit+0x21c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042f2:	2280      	movs	r2, #128	; 0x80
 80042f4:	69d9      	ldr	r1, [r3, #28]
 80042f6:	0112      	lsls	r2, r2, #4
 80042f8:	4211      	tst	r1, r2
 80042fa:	d100      	bne.n	80042fe <HAL_UART_Transmit+0x1a6>
 80042fc:	e77d      	b.n	80041fa <HAL_UART_Transmit+0xa2>
 80042fe:	e7a6      	b.n	800424e <HAL_UART_Transmit+0xf6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004300:	692b      	ldr	r3, [r5, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d000      	beq.n	8004308 <HAL_UART_Transmit+0x1b0>
 8004306:	e757      	b.n	80041b8 <HAL_UART_Transmit+0x60>
 8004308:	46ba      	mov	sl, r7
      pdata8bits  = NULL;
 800430a:	2700      	movs	r7, #0
 800430c:	e754      	b.n	80041b8 <HAL_UART_Transmit+0x60>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800430e:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004310:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004314:	2201      	movs	r2, #1
 8004316:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800431a:	6829      	ldr	r1, [r5, #0]
 800431c:	4c16      	ldr	r4, [pc, #88]	; (8004378 <HAL_UART_Transmit+0x220>)
 800431e:	680b      	ldr	r3, [r1, #0]
 8004320:	4023      	ands	r3, r4
 8004322:	600b      	str	r3, [r1, #0]
 8004324:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004328:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004330:	6829      	ldr	r1, [r5, #0]
 8004332:	688b      	ldr	r3, [r1, #8]
 8004334:	4393      	bics	r3, r2
 8004336:	608b      	str	r3, [r1, #8]
 8004338:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800433c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800433e:	2b01      	cmp	r3, #1
 8004340:	d10a      	bne.n	8004358 <HAL_UART_Transmit+0x200>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004342:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004346:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434a:	2010      	movs	r0, #16
 800434c:	682a      	ldr	r2, [r5, #0]
 800434e:	6813      	ldr	r3, [r2, #0]
 8004350:	4383      	bics	r3, r0
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800435c:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800435e:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004360:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004362:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004364:	662b      	str	r3, [r5, #96]	; 0x60
  huart->RxISR = NULL;
 8004366:	66ab      	str	r3, [r5, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004368:	50a9      	str	r1, [r5, r2]
           __HAL_UNLOCK(huart);
 800436a:	3a0c      	subs	r2, #12
 800436c:	54ab      	strb	r3, [r5, r2]
 800436e:	e79d      	b.n	80042ac <HAL_UART_Transmit+0x154>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	e73e      	b.n	80041f2 <HAL_UART_Transmit+0x9a>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004374:	621f      	str	r7, [r3, #32]
 8004376:	e7cb      	b.n	8004310 <HAL_UART_Transmit+0x1b8>
 8004378:	fffffedf 	.word	0xfffffedf

0800437c <HAL_UART_Receive_IT>:
{
 800437c:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800437e:	2080      	movs	r0, #128	; 0x80
 8004380:	5818      	ldr	r0, [r3, r0]
{
 8004382:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004384:	2820      	cmp	r0, #32
 8004386:	d14e      	bne.n	8004426 <HAL_UART_Receive_IT+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8004388:	2900      	cmp	r1, #0
 800438a:	d04a      	beq.n	8004422 <HAL_UART_Receive_IT+0xa6>
 800438c:	2a00      	cmp	r2, #0
 800438e:	d048      	beq.n	8004422 <HAL_UART_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004390:	2480      	movs	r4, #128	; 0x80
 8004392:	6898      	ldr	r0, [r3, #8]
 8004394:	0164      	lsls	r4, r4, #5
 8004396:	42a0      	cmp	r0, r4
 8004398:	d047      	beq.n	800442a <HAL_UART_Receive_IT+0xae>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439a:	2400      	movs	r4, #0
 800439c:	661c      	str	r4, [r3, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800439e:	681c      	ldr	r4, [r3, #0]
 80043a0:	6865      	ldr	r5, [r4, #4]
 80043a2:	2480      	movs	r4, #128	; 0x80
 80043a4:	002e      	movs	r6, r5
 80043a6:	0424      	lsls	r4, r4, #16
 80043a8:	4026      	ands	r6, r4
 80043aa:	4225      	tst	r5, r4
 80043ac:	d15c      	bne.n	8004468 <HAL_UART_Receive_IT+0xec>
  huart->pRxBuffPtr  = pData;
 80043ae:	6559      	str	r1, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80043b0:	2158      	movs	r1, #88	; 0x58
 80043b2:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80043b4:	3102      	adds	r1, #2
 80043b6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80043b8:	669e      	str	r6, [r3, #104]	; 0x68
 80043ba:	2200      	movs	r2, #0
  UART_MASK_COMPUTATION(huart);
 80043bc:	2800      	cmp	r0, #0
 80043be:	d104      	bne.n	80043ca <HAL_UART_Receive_IT+0x4e>
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	4251      	negs	r1, r2
 80043c4:	414a      	adcs	r2, r1
 80043c6:	01d2      	lsls	r2, r2, #7
 80043c8:	327f      	adds	r2, #127	; 0x7f
 80043ca:	215c      	movs	r1, #92	; 0x5c
 80043cc:	525a      	strh	r2, [r3, r1]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ce:	2284      	movs	r2, #132	; 0x84
 80043d0:	2100      	movs	r1, #0
 80043d2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043d4:	3a04      	subs	r2, #4
 80043d6:	3122      	adds	r1, #34	; 0x22
 80043d8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043da:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043de:	2001      	movs	r0, #1
 80043e0:	f380 8810 	msr	PRIMASK, r0
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e4:	6819      	ldr	r1, [r3, #0]
 80043e6:	688a      	ldr	r2, [r1, #8]
 80043e8:	4302      	orrs	r2, r0
 80043ea:	608a      	str	r2, [r1, #8]
 80043ec:	f384 8810 	msr	PRIMASK, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f0:	2280      	movs	r2, #128	; 0x80
 80043f2:	6899      	ldr	r1, [r3, #8]
 80043f4:	0152      	lsls	r2, r2, #5
 80043f6:	4291      	cmp	r1, r2
 80043f8:	d052      	beq.n	80044a0 <HAL_UART_Receive_IT+0x124>
 80043fa:	4934      	ldr	r1, [pc, #208]	; (80044cc <HAL_UART_Receive_IT+0x150>)
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	6699      	str	r1, [r3, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004400:	2a00      	cmp	r2, #0
 8004402:	d052      	beq.n	80044aa <HAL_UART_Receive_IT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004404:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004408:	2201      	movs	r2, #1
 800440a:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	2390      	movs	r3, #144	; 0x90
 8004412:	6810      	ldr	r0, [r2, #0]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	4303      	orrs	r3, r0
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	f381 8810 	msr	PRIMASK, r1
    return (UART_Start_Receive_IT(huart, pData, Size));
 800441e:	2000      	movs	r0, #0
}
 8004420:	e000      	b.n	8004424 <HAL_UART_Receive_IT+0xa8>
      return HAL_ERROR;
 8004422:	2001      	movs	r0, #1
}
 8004424:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8004426:	2002      	movs	r0, #2
 8004428:	e7fc      	b.n	8004424 <HAL_UART_Receive_IT+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800442a:	691c      	ldr	r4, [r3, #16]
 800442c:	2c00      	cmp	r4, #0
 800442e:	d102      	bne.n	8004436 <HAL_UART_Receive_IT+0xba>
      return HAL_ERROR;
 8004430:	2001      	movs	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8004432:	07cd      	lsls	r5, r1, #31
 8004434:	d4f6      	bmi.n	8004424 <HAL_UART_Receive_IT+0xa8>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004436:	2000      	movs	r0, #0
 8004438:	6618      	str	r0, [r3, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	6845      	ldr	r5, [r0, #4]
 800443e:	2080      	movs	r0, #128	; 0x80
 8004440:	002e      	movs	r6, r5
 8004442:	0400      	lsls	r0, r0, #16
 8004444:	4006      	ands	r6, r0
 8004446:	4205      	tst	r5, r0
 8004448:	d10e      	bne.n	8004468 <HAL_UART_Receive_IT+0xec>
  huart->pRxBuffPtr  = pData;
 800444a:	6559      	str	r1, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800444c:	2158      	movs	r1, #88	; 0x58
 800444e:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004450:	3102      	adds	r1, #2
 8004452:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004454:	669e      	str	r6, [r3, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 8004456:	1e62      	subs	r2, r4, #1
 8004458:	4194      	sbcs	r4, r2
 800445a:	21ff      	movs	r1, #255	; 0xff
 800445c:	4262      	negs	r2, r4
 800445e:	438a      	bics	r2, r1
 8004460:	491b      	ldr	r1, [pc, #108]	; (80044d0 <HAL_UART_Receive_IT+0x154>)
 8004462:	468c      	mov	ip, r1
 8004464:	4462      	add	r2, ip
 8004466:	e7b0      	b.n	80043ca <HAL_UART_Receive_IT+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004468:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800446c:	2001      	movs	r0, #1
 800446e:	f380 8810 	msr	PRIMASK, r0
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004472:	2080      	movs	r0, #128	; 0x80
 8004474:	681c      	ldr	r4, [r3, #0]
 8004476:	04c0      	lsls	r0, r0, #19
 8004478:	6826      	ldr	r6, [r4, #0]
 800447a:	4330      	orrs	r0, r6
 800447c:	6020      	str	r0, [r4, #0]
 800447e:	f385 8810 	msr	PRIMASK, r5
  huart->pRxBuffPtr  = pData;
 8004482:	6559      	str	r1, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004484:	2158      	movs	r1, #88	; 0x58
  UART_MASK_COMPUTATION(huart);
 8004486:	6898      	ldr	r0, [r3, #8]
  huart->RxXferSize  = Size;
 8004488:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800448a:	3102      	adds	r1, #2
 800448c:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800448e:	2200      	movs	r2, #0
 8004490:	669a      	str	r2, [r3, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 8004492:	2280      	movs	r2, #128	; 0x80
 8004494:	0152      	lsls	r2, r2, #5
 8004496:	4290      	cmp	r0, r2
 8004498:	d000      	beq.n	800449c <HAL_UART_Receive_IT+0x120>
 800449a:	e78e      	b.n	80043ba <HAL_UART_Receive_IT+0x3e>
 800449c:	691c      	ldr	r4, [r3, #16]
 800449e:	e7da      	b.n	8004456 <HAL_UART_Receive_IT+0xda>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	2a00      	cmp	r2, #0
 80044a4:	d10f      	bne.n	80044c6 <HAL_UART_Receive_IT+0x14a>
 80044a6:	4a0b      	ldr	r2, [pc, #44]	; (80044d4 <HAL_UART_Receive_IT+0x158>)
 80044a8:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044aa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ae:	2201      	movs	r2, #1
 80044b0:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80044b4:	2020      	movs	r0, #32
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	6813      	ldr	r3, [r2, #0]
 80044ba:	4303      	orrs	r3, r0
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	f381 8810 	msr	PRIMASK, r1
    return (UART_Start_Receive_IT(huart, pData, Size));
 80044c2:	2000      	movs	r0, #0
}
 80044c4:	e7ae      	b.n	8004424 <HAL_UART_Receive_IT+0xa8>
 80044c6:	4a01      	ldr	r2, [pc, #4]	; (80044cc <HAL_UART_Receive_IT+0x150>)
 80044c8:	669a      	str	r2, [r3, #104]	; 0x68
 80044ca:	e79b      	b.n	8004404 <HAL_UART_Receive_IT+0x88>
 80044cc:	08004ab9 	.word	0x08004ab9
 80044d0:	000001ff 	.word	0x000001ff
 80044d4:	08004a79 	.word	0x08004a79

080044d8 <HAL_UART_Transmit_DMA>:
{
 80044d8:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80044da:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 80044dc:	b570      	push	{r4, r5, r6, lr}
 80044de:	0004      	movs	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80044e0:	2a20      	cmp	r2, #32
 80044e2:	d140      	bne.n	8004566 <HAL_UART_Transmit_DMA+0x8e>
    if ((pData == NULL) || (Size == 0U))
 80044e4:	2900      	cmp	r1, #0
 80044e6:	d02b      	beq.n	8004540 <HAL_UART_Transmit_DMA+0x68>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d029      	beq.n	8004540 <HAL_UART_Transmit_DMA+0x68>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ec:	2280      	movs	r2, #128	; 0x80
 80044ee:	6880      	ldr	r0, [r0, #8]
 80044f0:	0152      	lsls	r2, r2, #5
 80044f2:	4290      	cmp	r0, r2
 80044f4:	d01f      	beq.n	8004536 <HAL_UART_Transmit_DMA+0x5e>
    huart->TxXferSize  = Size;
 80044f6:	2250      	movs	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 80044f8:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80044fa:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 80044fc:	3202      	adds	r2, #2
 80044fe:	52a3      	strh	r3, [r4, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004500:	2021      	movs	r0, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004502:	2584      	movs	r5, #132	; 0x84
 8004504:	2200      	movs	r2, #0
 8004506:	5162      	str	r2, [r4, r5]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004508:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (huart->hdmatx != NULL)
 800450a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800450c:	2800      	cmp	r0, #0
 800450e:	d019      	beq.n	8004544 <HAL_UART_Transmit_DMA+0x6c>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004510:	4e16      	ldr	r6, [pc, #88]	; (800456c <HAL_UART_Transmit_DMA+0x94>)
      huart->hdmatx->XferAbortCallback = NULL;
 8004512:	6342      	str	r2, [r0, #52]	; 0x34
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004514:	6286      	str	r6, [r0, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004516:	4e16      	ldr	r6, [pc, #88]	; (8004570 <HAL_UART_Transmit_DMA+0x98>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004518:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800451a:	62c6      	str	r6, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800451c:	4e15      	ldr	r6, [pc, #84]	; (8004574 <HAL_UART_Transmit_DMA+0x9c>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800451e:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004520:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004522:	f7fd fb2f 	bl	8001b84 <HAL_DMA_Start_IT>
 8004526:	2800      	cmp	r0, #0
 8004528:	d00c      	beq.n	8004544 <HAL_UART_Transmit_DMA+0x6c>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800452a:	2310      	movs	r3, #16
 800452c:	5163      	str	r3, [r4, r5]
        huart->gState = HAL_UART_STATE_READY;
 800452e:	3310      	adds	r3, #16
        return HAL_ERROR;
 8004530:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 8004532:	67e3      	str	r3, [r4, #124]	; 0x7c
        return HAL_ERROR;
 8004534:	e005      	b.n	8004542 <HAL_UART_Transmit_DMA+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004536:	6922      	ldr	r2, [r4, #16]
 8004538:	2a00      	cmp	r2, #0
 800453a:	d1dc      	bne.n	80044f6 <HAL_UART_Transmit_DMA+0x1e>
      if ((((uint32_t)pData) & 1U) != 0U)
 800453c:	07ca      	lsls	r2, r1, #31
 800453e:	d5da      	bpl.n	80044f6 <HAL_UART_Transmit_DMA+0x1e>
      return HAL_ERROR;
 8004540:	2001      	movs	r0, #1
}
 8004542:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004544:	2240      	movs	r2, #64	; 0x40
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800454a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454e:	2301      	movs	r3, #1
 8004550:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004554:	2080      	movs	r0, #128	; 0x80
 8004556:	6822      	ldr	r2, [r4, #0]
 8004558:	6893      	ldr	r3, [r2, #8]
 800455a:	4303      	orrs	r3, r0
 800455c:	6093      	str	r3, [r2, #8]
 800455e:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8004562:	2000      	movs	r0, #0
 8004564:	e7ed      	b.n	8004542 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_BUSY;
 8004566:	2002      	movs	r0, #2
 8004568:	e7eb      	b.n	8004542 <HAL_UART_Transmit_DMA+0x6a>
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	08004579 	.word	0x08004579
 8004570:	080045c5 	.word	0x080045c5
 8004574:	080045d1 	.word	0x080045d1

08004578 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004578:	6982      	ldr	r2, [r0, #24]
{
 800457a:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800457c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800457e:	2a20      	cmp	r2, #32
 8004580:	d01a      	beq.n	80045b8 <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8004582:	2252      	movs	r2, #82	; 0x52
 8004584:	2100      	movs	r1, #0
 8004586:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004588:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458c:	3101      	adds	r1, #1
 800458e:	f381 8810 	msr	PRIMASK, r1

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004592:	2480      	movs	r4, #128	; 0x80
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	6882      	ldr	r2, [r0, #8]
 8004598:	43a2      	bics	r2, r4
 800459a:	6082      	str	r2, [r0, #8]
 800459c:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045a0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a4:	f381 8810 	msr	PRIMASK, r1

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	313f      	adds	r1, #63	; 0x3f
 80045ac:	6813      	ldr	r3, [r2, #0]
 80045ae:	430b      	orrs	r3, r1
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	f380 8810 	msr	PRIMASK, r0
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045b6:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7fc f981 	bl	80008c0 <HAL_UART_TxCpltCallback>
}
 80045be:	e7fa      	b.n	80045b6 <UART_DMATransmitCplt+0x3e>

080045c0 <HAL_UART_TxHalfCpltCallback>:
 80045c0:	4770      	bx	lr
 80045c2:	46c0      	nop			; (mov r8, r8)

080045c4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045c4:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80045c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80045c8:	f7ff fffa 	bl	80045c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045cc:	bd10      	pop	{r4, pc}
 80045ce:	46c0      	nop			; (mov r8, r8)

080045d0 <UART_DMAError>:
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80045d0:	2280      	movs	r2, #128	; 0x80
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045d2:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80045d4:	b570      	push	{r4, r5, r6, lr}

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80045d6:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80045d8:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80045da:	5884      	ldr	r4, [r0, r2]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80045dc:	6899      	ldr	r1, [r3, #8]
 80045de:	420a      	tst	r2, r1
 80045e0:	d001      	beq.n	80045e6 <UART_DMAError+0x16>
 80045e2:	2d21      	cmp	r5, #33	; 0x21
 80045e4:	d00c      	beq.n	8004600 <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	065b      	lsls	r3, r3, #25
 80045ea:	d501      	bpl.n	80045f0 <UART_DMAError+0x20>
 80045ec:	2c22      	cmp	r4, #34	; 0x22
 80045ee:	d01a      	beq.n	8004626 <UART_DMAError+0x56>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045f0:	2284      	movs	r2, #132	; 0x84
 80045f2:	2110      	movs	r1, #16
 80045f4:	5883      	ldr	r3, [r0, r2]
 80045f6:	430b      	orrs	r3, r1
 80045f8:	5083      	str	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045fa:	f7fc f969 	bl	80008d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8004600:	2352      	movs	r3, #82	; 0x52
 8004602:	2200      	movs	r2, #0
 8004604:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004606:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460a:	3b51      	subs	r3, #81	; 0x51
 800460c:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004610:	6802      	ldr	r2, [r0, #0]
 8004612:	359f      	adds	r5, #159	; 0x9f
 8004614:	6813      	ldr	r3, [r2, #0]
 8004616:	43ab      	bics	r3, r5
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	f381 8810 	msr	PRIMASK, r1
  huart->gState = HAL_UART_STATE_READY;
 800461e:	2320      	movs	r3, #32
 8004620:	67c3      	str	r3, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004622:	6803      	ldr	r3, [r0, #0]
}
 8004624:	e7df      	b.n	80045e6 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 8004626:	235a      	movs	r3, #90	; 0x5a
 8004628:	2200      	movs	r2, #0
 800462a:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800462c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004630:	3201      	adds	r2, #1
 8004632:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004636:	6801      	ldr	r1, [r0, #0]
 8004638:	4d12      	ldr	r5, [pc, #72]	; (8004684 <UART_DMAError+0xb4>)
 800463a:	680b      	ldr	r3, [r1, #0]
 800463c:	402b      	ands	r3, r5
 800463e:	600b      	str	r3, [r1, #0]
 8004640:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004644:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004648:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464c:	6801      	ldr	r1, [r0, #0]
 800464e:	688b      	ldr	r3, [r1, #8]
 8004650:	4393      	bics	r3, r2
 8004652:	608b      	str	r3, [r1, #8]
 8004654:	f384 8810 	msr	PRIMASK, r4
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004658:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800465a:	2b01      	cmp	r3, #1
 800465c:	d10a      	bne.n	8004674 <UART_DMAError+0xa4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800465e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004662:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004666:	2410      	movs	r4, #16
 8004668:	6802      	ldr	r2, [r0, #0]
 800466a:	6813      	ldr	r3, [r2, #0]
 800466c:	43a3      	bics	r3, r4
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	2220      	movs	r2, #32
 8004678:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467a:	2300      	movs	r3, #0
 800467c:	6603      	str	r3, [r0, #96]	; 0x60
  huart->RxISR = NULL;
 800467e:	6683      	str	r3, [r0, #104]	; 0x68
}
 8004680:	e7b6      	b.n	80045f0 <UART_DMAError+0x20>
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	fffffedf 	.word	0xfffffedf

08004688 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	225a      	movs	r2, #90	; 0x5a
{
 800468c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800468e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8004690:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8004692:	3a08      	subs	r2, #8
 8004694:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004696:	f7fc f91b 	bl	80008d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800469a:	bd10      	pop	{r4, pc}

0800469c <HAL_UARTEx_RxEventCallback>:
}
 800469c:	4770      	bx	lr
 800469e:	46c0      	nop			; (mov r8, r8)

080046a0 <HAL_UART_IRQHandler>:
{
 80046a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a2:	46ce      	mov	lr, r9
 80046a4:	4647      	mov	r7, r8
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046a6:	6802      	ldr	r2, [r0, #0]
{
 80046a8:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046aa:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046ac:	48c6      	ldr	r0, [pc, #792]	; (80049c8 <HAL_UART_IRQHandler+0x328>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046ae:	6811      	ldr	r1, [r2, #0]
{
 80046b0:	b580      	push	{r7, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046b2:	6895      	ldr	r5, [r2, #8]
  if (errorflags == 0U)
 80046b4:	4203      	tst	r3, r0
 80046b6:	d000      	beq.n	80046ba <HAL_UART_IRQHandler+0x1a>
 80046b8:	e07e      	b.n	80047b8 <HAL_UART_IRQHandler+0x118>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046ba:	2020      	movs	r0, #32
 80046bc:	4218      	tst	r0, r3
 80046be:	d002      	beq.n	80046c6 <HAL_UART_IRQHandler+0x26>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046c0:	4208      	tst	r0, r1
 80046c2:	d000      	beq.n	80046c6 <HAL_UART_IRQHandler+0x26>
 80046c4:	e118      	b.n	80048f8 <HAL_UART_IRQHandler+0x258>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80046c8:	2801      	cmp	r0, #1
 80046ca:	d01b      	beq.n	8004704 <HAL_UART_IRQHandler+0x64>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046cc:	2080      	movs	r0, #128	; 0x80
 80046ce:	0340      	lsls	r0, r0, #13
 80046d0:	4203      	tst	r3, r0
 80046d2:	d002      	beq.n	80046da <HAL_UART_IRQHandler+0x3a>
 80046d4:	026d      	lsls	r5, r5, #9
 80046d6:	d500      	bpl.n	80046da <HAL_UART_IRQHandler+0x3a>
 80046d8:	e113      	b.n	8004902 <HAL_UART_IRQHandler+0x262>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046da:	2280      	movs	r2, #128	; 0x80
 80046dc:	421a      	tst	r2, r3
 80046de:	d109      	bne.n	80046f4 <HAL_UART_IRQHandler+0x54>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046e0:	2240      	movs	r2, #64	; 0x40
 80046e2:	421a      	tst	r2, r3
 80046e4:	d002      	beq.n	80046ec <HAL_UART_IRQHandler+0x4c>
 80046e6:	420a      	tst	r2, r1
 80046e8:	d000      	beq.n	80046ec <HAL_UART_IRQHandler+0x4c>
 80046ea:	e113      	b.n	8004914 <HAL_UART_IRQHandler+0x274>
}
 80046ec:	bcc0      	pop	{r6, r7}
 80046ee:	46b9      	mov	r9, r7
 80046f0:	46b0      	mov	r8, r6
 80046f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046f4:	420a      	tst	r2, r1
 80046f6:	d0f3      	beq.n	80046e0 <HAL_UART_IRQHandler+0x40>
    if (huart->TxISR != NULL)
 80046f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f6      	beq.n	80046ec <HAL_UART_IRQHandler+0x4c>
      huart->TxISR(huart);
 80046fe:	0020      	movs	r0, r4
 8004700:	4798      	blx	r3
 8004702:	e7f3      	b.n	80046ec <HAL_UART_IRQHandler+0x4c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004704:	2610      	movs	r6, #16
 8004706:	421e      	tst	r6, r3
 8004708:	d0e0      	beq.n	80046cc <HAL_UART_IRQHandler+0x2c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800470a:	420e      	tst	r6, r1
 800470c:	d0de      	beq.n	80046cc <HAL_UART_IRQHandler+0x2c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470e:	2340      	movs	r3, #64	; 0x40
 8004710:	001d      	movs	r5, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004712:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004714:	6892      	ldr	r2, [r2, #8]
 8004716:	4015      	ands	r5, r2
 8004718:	4213      	tst	r3, r2
 800471a:	d100      	bne.n	800471e <HAL_UART_IRQHandler+0x7e>
 800471c:	e114      	b.n	8004948 <HAL_UART_IRQHandler+0x2a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800471e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8004720:	682a      	ldr	r2, [r5, #0]
 8004722:	6852      	ldr	r2, [r2, #4]
 8004724:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004726:	2a00      	cmp	r2, #0
 8004728:	d0e0      	beq.n	80046ec <HAL_UART_IRQHandler+0x4c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800472a:	2158      	movs	r1, #88	; 0x58
 800472c:	4688      	mov	r8, r1
 800472e:	5a61      	ldrh	r1, [r4, r1]
 8004730:	4291      	cmp	r1, r2
 8004732:	d9db      	bls.n	80046ec <HAL_UART_IRQHandler+0x4c>
        huart->RxXferCount = nb_remaining_rx_data;
 8004734:	275a      	movs	r7, #90	; 0x5a
 8004736:	53e2      	strh	r2, [r4, r7]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004738:	69aa      	ldr	r2, [r5, #24]
 800473a:	2a20      	cmp	r2, #32
 800473c:	d032      	beq.n	80047a4 <HAL_UART_IRQHandler+0x104>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800473e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004742:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004746:	6821      	ldr	r1, [r4, #0]
 8004748:	4fa0      	ldr	r7, [pc, #640]	; (80049cc <HAL_UART_IRQHandler+0x32c>)
 800474a:	680a      	ldr	r2, [r1, #0]
 800474c:	403a      	ands	r2, r7
 800474e:	600a      	str	r2, [r1, #0]
 8004750:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004754:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004758:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475c:	6821      	ldr	r1, [r4, #0]
 800475e:	688a      	ldr	r2, [r1, #8]
 8004760:	4382      	bics	r2, r0
 8004762:	608a      	str	r2, [r1, #8]
 8004764:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004768:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476c:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004770:	6821      	ldr	r1, [r4, #0]
 8004772:	688a      	ldr	r2, [r1, #8]
 8004774:	439a      	bics	r2, r3
 8004776:	608a      	str	r2, [r1, #8]
 8004778:	f385 8810 	msr	PRIMASK, r5
          huart->RxState = HAL_UART_STATE_READY;
 800477c:	2220      	movs	r2, #32
 800477e:	3340      	adds	r3, #64	; 0x40
 8004780:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004782:	2300      	movs	r3, #0
 8004784:	6623      	str	r3, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004786:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478a:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	6813      	ldr	r3, [r2, #0]
 8004792:	43b3      	bics	r3, r6
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 800479a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800479c:	f7fd fa32 	bl	8001c04 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047a0:	4643      	mov	r3, r8
 80047a2:	5ae1      	ldrh	r1, [r4, r3]
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047a4:	2302      	movs	r3, #2
 80047a6:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047a8:	3358      	adds	r3, #88	; 0x58
 80047aa:	5ae3      	ldrh	r3, [r4, r3]
 80047ac:	0020      	movs	r0, r4
 80047ae:	1ac9      	subs	r1, r1, r3
 80047b0:	b289      	uxth	r1, r1
 80047b2:	f7ff ff73 	bl	800469c <HAL_UARTEx_RxEventCallback>
 80047b6:	e799      	b.n	80046ec <HAL_UART_IRQHandler+0x4c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047b8:	2601      	movs	r6, #1
 80047ba:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80047bc:	4884      	ldr	r0, [pc, #528]	; (80049d0 <HAL_UART_IRQHandler+0x330>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047be:	402f      	ands	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80047c0:	4008      	ands	r0, r1
 80047c2:	4338      	orrs	r0, r7
 80047c4:	d100      	bne.n	80047c8 <HAL_UART_IRQHandler+0x128>
 80047c6:	e77e      	b.n	80046c6 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047c8:	421e      	tst	r6, r3
 80047ca:	d006      	beq.n	80047da <HAL_UART_IRQHandler+0x13a>
 80047cc:	05c8      	lsls	r0, r1, #23
 80047ce:	d504      	bpl.n	80047da <HAL_UART_IRQHandler+0x13a>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047d0:	2584      	movs	r5, #132	; 0x84
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047d2:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047d4:	5960      	ldr	r0, [r4, r5]
 80047d6:	4330      	orrs	r0, r6
 80047d8:	5160      	str	r0, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047da:	2002      	movs	r0, #2
 80047dc:	4218      	tst	r0, r3
 80047de:	d100      	bne.n	80047e2 <HAL_UART_IRQHandler+0x142>
 80047e0:	e084      	b.n	80048ec <HAL_UART_IRQHandler+0x24c>
 80047e2:	2f00      	cmp	r7, #0
 80047e4:	d00e      	beq.n	8004804 <HAL_UART_IRQHandler+0x164>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047e6:	2684      	movs	r6, #132	; 0x84
 80047e8:	2504      	movs	r5, #4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047ea:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047ec:	59a0      	ldr	r0, [r4, r6]
 80047ee:	4328      	orrs	r0, r5
 80047f0:	51a0      	str	r0, [r4, r6]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047f2:	421d      	tst	r5, r3
 80047f4:	d006      	beq.n	8004804 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047f6:	2004      	movs	r0, #4
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047f8:	2584      	movs	r5, #132	; 0x84
 80047fa:	2602      	movs	r6, #2
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047fc:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047fe:	5960      	ldr	r0, [r4, r5]
 8004800:	4330      	orrs	r0, r6
 8004802:	5160      	str	r0, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004804:	2508      	movs	r5, #8
 8004806:	421d      	tst	r5, r3
 8004808:	d008      	beq.n	800481c <HAL_UART_IRQHandler+0x17c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800480a:	2020      	movs	r0, #32
 800480c:	4008      	ands	r0, r1
 800480e:	4338      	orrs	r0, r7
 8004810:	d004      	beq.n	800481c <HAL_UART_IRQHandler+0x17c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004812:	2684      	movs	r6, #132	; 0x84
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004814:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004816:	59a0      	ldr	r0, [r4, r6]
 8004818:	4328      	orrs	r0, r5
 800481a:	51a0      	str	r0, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800481c:	2080      	movs	r0, #128	; 0x80
 800481e:	0100      	lsls	r0, r0, #4
 8004820:	4203      	tst	r3, r0
 8004822:	d007      	beq.n	8004834 <HAL_UART_IRQHandler+0x194>
 8004824:	014d      	lsls	r5, r1, #5
 8004826:	d505      	bpl.n	8004834 <HAL_UART_IRQHandler+0x194>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004828:	2584      	movs	r5, #132	; 0x84
 800482a:	2620      	movs	r6, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800482c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800482e:	5960      	ldr	r0, [r4, r5]
 8004830:	4330      	orrs	r0, r6
 8004832:	5160      	str	r0, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004834:	2084      	movs	r0, #132	; 0x84
 8004836:	5820      	ldr	r0, [r4, r0]
 8004838:	2800      	cmp	r0, #0
 800483a:	d100      	bne.n	800483e <HAL_UART_IRQHandler+0x19e>
 800483c:	e756      	b.n	80046ec <HAL_UART_IRQHandler+0x4c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800483e:	2020      	movs	r0, #32
 8004840:	4218      	tst	r0, r3
 8004842:	d001      	beq.n	8004848 <HAL_UART_IRQHandler+0x1a8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004844:	4208      	tst	r0, r1
 8004846:	d178      	bne.n	800493a <HAL_UART_IRQHandler+0x29a>
      errorcode = huart->ErrorCode;
 8004848:	2684      	movs	r6, #132	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800484a:	2540      	movs	r5, #64	; 0x40
      errorcode = huart->ErrorCode;
 800484c:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800484e:	6893      	ldr	r3, [r2, #8]
 8004850:	401d      	ands	r5, r3
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004852:	2328      	movs	r3, #40	; 0x28
 8004854:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004856:	431d      	orrs	r5, r3
 8004858:	d100      	bne.n	800485c <HAL_UART_IRQHandler+0x1bc>
 800485a:	e0af      	b.n	80049bc <HAL_UART_IRQHandler+0x31c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800485c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004860:	2201      	movs	r2, #1
 8004862:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004866:	6821      	ldr	r1, [r4, #0]
 8004868:	4d5a      	ldr	r5, [pc, #360]	; (80049d4 <HAL_UART_IRQHandler+0x334>)
 800486a:	680b      	ldr	r3, [r1, #0]
 800486c:	402b      	ands	r3, r5
 800486e:	600b      	str	r3, [r1, #0]
 8004870:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004874:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004878:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487c:	6821      	ldr	r1, [r4, #0]
 800487e:	688b      	ldr	r3, [r1, #8]
 8004880:	4393      	bics	r3, r2
 8004882:	608b      	str	r3, [r1, #8]
 8004884:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004888:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800488a:	2b01      	cmp	r3, #1
 800488c:	d10a      	bne.n	80048a4 <HAL_UART_IRQHandler+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004892:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004896:	2010      	movs	r0, #16
 8004898:	6822      	ldr	r2, [r4, #0]
 800489a:	6813      	ldr	r3, [r2, #0]
 800489c:	4383      	bics	r3, r0
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	2220      	movs	r2, #32
 80048a8:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048aa:	2300      	movs	r3, #0
 80048ac:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 80048ae:	66a3      	str	r3, [r4, #104]	; 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	3220      	adds	r2, #32
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	421a      	tst	r2, r3
 80048b8:	d028      	beq.n	800490c <HAL_UART_IRQHandler+0x26c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ba:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048be:	2301      	movs	r3, #1
 80048c0:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c4:	6821      	ldr	r1, [r4, #0]
 80048c6:	688b      	ldr	r3, [r1, #8]
 80048c8:	4393      	bics	r3, r2
 80048ca:	608b      	str	r3, [r1, #8]
 80048cc:	f380 8810 	msr	PRIMASK, r0
          if (huart->hdmarx != NULL)
 80048d0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80048d2:	2800      	cmp	r0, #0
 80048d4:	d01a      	beq.n	800490c <HAL_UART_IRQHandler+0x26c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048d6:	4b40      	ldr	r3, [pc, #256]	; (80049d8 <HAL_UART_IRQHandler+0x338>)
 80048d8:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048da:	f7fd f9b1 	bl	8001c40 <HAL_DMA_Abort_IT>
 80048de:	2800      	cmp	r0, #0
 80048e0:	d100      	bne.n	80048e4 <HAL_UART_IRQHandler+0x244>
 80048e2:	e703      	b.n	80046ec <HAL_UART_IRQHandler+0x4c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048e4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80048e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80048e8:	4798      	blx	r3
 80048ea:	e6ff      	b.n	80046ec <HAL_UART_IRQHandler+0x4c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048ec:	0758      	lsls	r0, r3, #29
 80048ee:	d589      	bpl.n	8004804 <HAL_UART_IRQHandler+0x164>
 80048f0:	2f00      	cmp	r7, #0
 80048f2:	d000      	beq.n	80048f6 <HAL_UART_IRQHandler+0x256>
 80048f4:	e77f      	b.n	80047f6 <HAL_UART_IRQHandler+0x156>
 80048f6:	e785      	b.n	8004804 <HAL_UART_IRQHandler+0x164>
      if (huart->RxISR != NULL)
 80048f8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d000      	beq.n	8004900 <HAL_UART_IRQHandler+0x260>
 80048fe:	e6fe      	b.n	80046fe <HAL_UART_IRQHandler+0x5e>
 8004900:	e6f4      	b.n	80046ec <HAL_UART_IRQHandler+0x4c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004902:	6210      	str	r0, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004904:	0020      	movs	r0, r4
 8004906:	f000 fc5d 	bl	80051c4 <HAL_UARTEx_WakeupCallback>
    return;
 800490a:	e6ef      	b.n	80046ec <HAL_UART_IRQHandler+0x4c>
            HAL_UART_ErrorCallback(huart);
 800490c:	0020      	movs	r0, r4
 800490e:	f7fb ffdf 	bl	80008d0 <HAL_UART_ErrorCallback>
 8004912:	e6eb      	b.n	80046ec <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004914:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004918:	2301      	movs	r3, #1
 800491a:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800491e:	6821      	ldr	r1, [r4, #0]
 8004920:	680b      	ldr	r3, [r1, #0]
 8004922:	4393      	bics	r3, r2
 8004924:	600b      	str	r3, [r1, #0]
 8004926:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800492a:	2320      	movs	r3, #32
 800492c:	67e3      	str	r3, [r4, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800492e:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004930:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8004932:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_TxCpltCallback(huart);
 8004934:	f7fb ffc4 	bl	80008c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004938:	e6d8      	b.n	80046ec <HAL_UART_IRQHandler+0x4c>
        if (huart->RxISR != NULL)
 800493a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800493c:	2b00      	cmp	r3, #0
 800493e:	d083      	beq.n	8004848 <HAL_UART_IRQHandler+0x1a8>
          huart->RxISR(huart);
 8004940:	0020      	movs	r0, r4
 8004942:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004944:	6822      	ldr	r2, [r4, #0]
 8004946:	e77f      	b.n	8004848 <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004948:	2358      	movs	r3, #88	; 0x58
 800494a:	225a      	movs	r2, #90	; 0x5a
 800494c:	5ae1      	ldrh	r1, [r4, r3]
 800494e:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 8004950:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004952:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8004954:	2a00      	cmp	r2, #0
 8004956:	d100      	bne.n	800495a <HAL_UART_IRQHandler+0x2ba>
 8004958:	e6c8      	b.n	80046ec <HAL_UART_IRQHandler+0x4c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800495a:	1ac9      	subs	r1, r1, r3
 800495c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800495e:	2900      	cmp	r1, #0
 8004960:	d100      	bne.n	8004964 <HAL_UART_IRQHandler+0x2c4>
 8004962:	e6c3      	b.n	80046ec <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004964:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004968:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496c:	6822      	ldr	r2, [r4, #0]
 800496e:	6813      	ldr	r3, [r2, #0]
 8004970:	4698      	mov	r8, r3
 8004972:	4647      	mov	r7, r8
 8004974:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <HAL_UART_IRQHandler+0x334>)
 8004976:	401f      	ands	r7, r3
 8004978:	6017      	str	r7, [r2, #0]
 800497a:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800497e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004982:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004986:	6822      	ldr	r2, [r4, #0]
 8004988:	6893      	ldr	r3, [r2, #8]
 800498a:	4383      	bics	r3, r0
 800498c:	6093      	str	r3, [r2, #8]
 800498e:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8004992:	2380      	movs	r3, #128	; 0x80
 8004994:	2220      	movs	r2, #32
 8004996:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004998:	6625      	str	r5, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 800499a:	66a5      	str	r5, [r4, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800499c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a0:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a4:	6822      	ldr	r2, [r4, #0]
 80049a6:	6813      	ldr	r3, [r2, #0]
 80049a8:	43b3      	bics	r3, r6
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	f385 8810 	msr	PRIMASK, r5
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049b0:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049b2:	0020      	movs	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049b4:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049b6:	f7ff fe71 	bl	800469c <HAL_UARTEx_RxEventCallback>
 80049ba:	e697      	b.n	80046ec <HAL_UART_IRQHandler+0x4c>
        HAL_UART_ErrorCallback(huart);
 80049bc:	0020      	movs	r0, r4
 80049be:	f7fb ff87 	bl	80008d0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c2:	51a5      	str	r5, [r4, r6]
 80049c4:	e692      	b.n	80046ec <HAL_UART_IRQHandler+0x4c>
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	0000080f 	.word	0x0000080f
 80049cc:	fffffeff 	.word	0xfffffeff
 80049d0:	04000120 	.word	0x04000120
 80049d4:	fffffedf 	.word	0xfffffedf
 80049d8:	08004689 	.word	0x08004689

080049dc <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 80049dc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049de:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e2:	2301      	movs	r3, #1
 80049e4:	f383 8810 	msr	PRIMASK, r3
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049e8:	6801      	ldr	r1, [r0, #0]
 80049ea:	4c21      	ldr	r4, [pc, #132]	; (8004a70 <UART_RxISR_16BIT.part.0+0x94>)
 80049ec:	680a      	ldr	r2, [r1, #0]
 80049ee:	4022      	ands	r2, r4
 80049f0:	600a      	str	r2, [r1, #0]
 80049f2:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049f6:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fa:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fe:	6801      	ldr	r1, [r0, #0]
 8004a00:	688a      	ldr	r2, [r1, #8]
 8004a02:	439a      	bics	r2, r3
 8004a04:	608a      	str	r2, [r1, #8]
 8004a06:	f38c 8810 	msr	PRIMASK, ip

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a0a:	2280      	movs	r2, #128	; 0x80
 8004a0c:	2120      	movs	r1, #32
 8004a0e:	5081      	str	r1, [r0, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a10:	2200      	movs	r2, #0

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a12:	6642      	str	r2, [r0, #100]	; 0x64
      huart->RxISR = NULL;
 8004a14:	6682      	str	r2, [r0, #104]	; 0x68

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a16:	6802      	ldr	r2, [r0, #0]
 8004a18:	6852      	ldr	r2, [r2, #4]
 8004a1a:	0212      	lsls	r2, r2, #8
 8004a1c:	d50a      	bpl.n	8004a34 <UART_RxISR_16BIT.part.0+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a1e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a22:	f383 8810 	msr	PRIMASK, r3
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a26:	6802      	ldr	r2, [r0, #0]
 8004a28:	4c12      	ldr	r4, [pc, #72]	; (8004a74 <UART_RxISR_16BIT.part.0+0x98>)
 8004a2a:	6813      	ldr	r3, [r2, #0]
 8004a2c:	4023      	ands	r3, r4
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	f381 8810 	msr	PRIMASK, r1
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a34:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d117      	bne.n	8004a6a <UART_RxISR_16BIT.part.0+0x8e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	6602      	str	r2, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a3e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a42:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a46:	6801      	ldr	r1, [r0, #0]
 8004a48:	3210      	adds	r2, #16
 8004a4a:	680b      	ldr	r3, [r1, #0]
 8004a4c:	4393      	bics	r3, r2
 8004a4e:	600b      	str	r3, [r1, #0]
 8004a50:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a54:	6803      	ldr	r3, [r0, #0]
 8004a56:	69d9      	ldr	r1, [r3, #28]
 8004a58:	420a      	tst	r2, r1
 8004a5a:	d104      	bne.n	8004a66 <UART_RxISR_16BIT.part.0+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a5c:	2358      	movs	r3, #88	; 0x58
 8004a5e:	5ac1      	ldrh	r1, [r0, r3]
 8004a60:	f7ff fe1c 	bl	800469c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a64:	bd10      	pop	{r4, pc}
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a66:	621a      	str	r2, [r3, #32]
 8004a68:	e7f8      	b.n	8004a5c <UART_RxISR_16BIT.part.0+0x80>
        HAL_UART_RxCpltCallback(huart);
 8004a6a:	f7fb ff1d 	bl	80008a8 <HAL_UART_RxCpltCallback>
}
 8004a6e:	e7f9      	b.n	8004a64 <UART_RxISR_16BIT.part.0+0x88>
 8004a70:	fffffedf 	.word	0xfffffedf
 8004a74:	fbffffff 	.word	0xfbffffff

08004a78 <UART_RxISR_16BIT>:
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a78:	235c      	movs	r3, #92	; 0x5c
 8004a7a:	5ac1      	ldrh	r1, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a7c:	3324      	adds	r3, #36	; 0x24
 8004a7e:	58c3      	ldr	r3, [r0, r3]
{
 8004a80:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a82:	2b22      	cmp	r3, #34	; 0x22
 8004a84:	d005      	beq.n	8004a92 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a86:	2108      	movs	r1, #8
 8004a88:	6802      	ldr	r2, [r0, #0]
 8004a8a:	6993      	ldr	r3, [r2, #24]
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	6193      	str	r3, [r2, #24]
  }
}
 8004a90:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a92:	6803      	ldr	r3, [r0, #0]
 8004a94:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a96:	6d43      	ldr	r3, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a98:	400a      	ands	r2, r1
 8004a9a:	801a      	strh	r2, [r3, #0]
    huart->RxXferCount--;
 8004a9c:	225a      	movs	r2, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 8004a9e:	3302      	adds	r3, #2
 8004aa0:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8004aa2:	5a83      	ldrh	r3, [r0, r2]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8004aaa:	5a83      	ldrh	r3, [r0, r2]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1ef      	bne.n	8004a90 <UART_RxISR_16BIT+0x18>
 8004ab0:	f7ff ff94 	bl	80049dc <UART_RxISR_16BIT.part.0>
 8004ab4:	e7ec      	b.n	8004a90 <UART_RxISR_16BIT+0x18>
 8004ab6:	46c0      	nop			; (mov r8, r8)

08004ab8 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ab8:	2280      	movs	r2, #128	; 0x80
  uint16_t uhMask = huart->Mask;
 8004aba:	235c      	movs	r3, #92	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004abc:	5882      	ldr	r2, [r0, r2]
{
 8004abe:	b510      	push	{r4, lr}
  uint16_t uhMask = huart->Mask;
 8004ac0:	5ac3      	ldrh	r3, [r0, r3]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ac2:	2a22      	cmp	r2, #34	; 0x22
 8004ac4:	d005      	beq.n	8004ad2 <UART_RxISR_8BIT+0x1a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ac6:	2108      	movs	r1, #8
 8004ac8:	6802      	ldr	r2, [r0, #0]
 8004aca:	6993      	ldr	r3, [r2, #24]
 8004acc:	430b      	orrs	r3, r1
 8004ace:	6193      	str	r3, [r2, #24]
}
 8004ad0:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ad2:	6802      	ldr	r2, [r0, #0]
 8004ad4:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ad6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004ad8:	400b      	ands	r3, r1
 8004ada:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8004adc:	225a      	movs	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8004ade:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8004ae4:	5a83      	ldrh	r3, [r0, r2]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8004aec:	5a83      	ldrh	r3, [r0, r2]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1ee      	bne.n	8004ad0 <UART_RxISR_8BIT+0x18>
 8004af2:	f7ff ff73 	bl	80049dc <UART_RxISR_16BIT.part.0>
 8004af6:	e7eb      	b.n	8004ad0 <UART_RxISR_8BIT+0x18>

08004af8 <HAL_MultiProcessor_EnterMuteMode>:
  __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 8004af8:	2104      	movs	r1, #4
 8004afa:	6802      	ldr	r2, [r0, #0]
 8004afc:	6993      	ldr	r3, [r2, #24]
 8004afe:	430b      	orrs	r3, r1
 8004b00:	6193      	str	r3, [r2, #24]
}
 8004b02:	4770      	bx	lr

08004b04 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b04:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004b06:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b08:	07da      	lsls	r2, r3, #31
 8004b0a:	d506      	bpl.n	8004b1a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b0c:	6801      	ldr	r1, [r0, #0]
 8004b0e:	4c28      	ldr	r4, [pc, #160]	; (8004bb0 <UART_AdvFeatureConfig+0xac>)
 8004b10:	684a      	ldr	r2, [r1, #4]
 8004b12:	4022      	ands	r2, r4
 8004b14:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004b16:	4322      	orrs	r2, r4
 8004b18:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b1a:	079a      	lsls	r2, r3, #30
 8004b1c:	d506      	bpl.n	8004b2c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b1e:	6801      	ldr	r1, [r0, #0]
 8004b20:	4c24      	ldr	r4, [pc, #144]	; (8004bb4 <UART_AdvFeatureConfig+0xb0>)
 8004b22:	684a      	ldr	r2, [r1, #4]
 8004b24:	4022      	ands	r2, r4
 8004b26:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004b28:	4322      	orrs	r2, r4
 8004b2a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b2c:	075a      	lsls	r2, r3, #29
 8004b2e:	d506      	bpl.n	8004b3e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b30:	6801      	ldr	r1, [r0, #0]
 8004b32:	4c21      	ldr	r4, [pc, #132]	; (8004bb8 <UART_AdvFeatureConfig+0xb4>)
 8004b34:	684a      	ldr	r2, [r1, #4]
 8004b36:	4022      	ands	r2, r4
 8004b38:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004b3a:	4322      	orrs	r2, r4
 8004b3c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b3e:	071a      	lsls	r2, r3, #28
 8004b40:	d506      	bpl.n	8004b50 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b42:	6801      	ldr	r1, [r0, #0]
 8004b44:	4c1d      	ldr	r4, [pc, #116]	; (8004bbc <UART_AdvFeatureConfig+0xb8>)
 8004b46:	684a      	ldr	r2, [r1, #4]
 8004b48:	4022      	ands	r2, r4
 8004b4a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004b4c:	4322      	orrs	r2, r4
 8004b4e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b50:	06da      	lsls	r2, r3, #27
 8004b52:	d506      	bpl.n	8004b62 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b54:	6801      	ldr	r1, [r0, #0]
 8004b56:	4c1a      	ldr	r4, [pc, #104]	; (8004bc0 <UART_AdvFeatureConfig+0xbc>)
 8004b58:	688a      	ldr	r2, [r1, #8]
 8004b5a:	4022      	ands	r2, r4
 8004b5c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004b5e:	4322      	orrs	r2, r4
 8004b60:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b62:	069a      	lsls	r2, r3, #26
 8004b64:	d506      	bpl.n	8004b74 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b66:	6801      	ldr	r1, [r0, #0]
 8004b68:	4c16      	ldr	r4, [pc, #88]	; (8004bc4 <UART_AdvFeatureConfig+0xc0>)
 8004b6a:	688a      	ldr	r2, [r1, #8]
 8004b6c:	4022      	ands	r2, r4
 8004b6e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004b70:	4322      	orrs	r2, r4
 8004b72:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b74:	065a      	lsls	r2, r3, #25
 8004b76:	d50a      	bpl.n	8004b8e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b78:	6801      	ldr	r1, [r0, #0]
 8004b7a:	4d13      	ldr	r5, [pc, #76]	; (8004bc8 <UART_AdvFeatureConfig+0xc4>)
 8004b7c:	684a      	ldr	r2, [r1, #4]
 8004b7e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004b80:	402a      	ands	r2, r5
 8004b82:	4322      	orrs	r2, r4
 8004b84:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b86:	2280      	movs	r2, #128	; 0x80
 8004b88:	0352      	lsls	r2, r2, #13
 8004b8a:	4294      	cmp	r4, r2
 8004b8c:	d009      	beq.n	8004ba2 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b8e:	061b      	lsls	r3, r3, #24
 8004b90:	d506      	bpl.n	8004ba0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b92:	6802      	ldr	r2, [r0, #0]
 8004b94:	490d      	ldr	r1, [pc, #52]	; (8004bcc <UART_AdvFeatureConfig+0xc8>)
 8004b96:	6853      	ldr	r3, [r2, #4]
 8004b98:	400b      	ands	r3, r1
 8004b9a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	6053      	str	r3, [r2, #4]
}
 8004ba0:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ba2:	684a      	ldr	r2, [r1, #4]
 8004ba4:	4c0a      	ldr	r4, [pc, #40]	; (8004bd0 <UART_AdvFeatureConfig+0xcc>)
 8004ba6:	4022      	ands	r2, r4
 8004ba8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004baa:	4322      	orrs	r2, r4
 8004bac:	604a      	str	r2, [r1, #4]
 8004bae:	e7ee      	b.n	8004b8e <UART_AdvFeatureConfig+0x8a>
 8004bb0:	fffdffff 	.word	0xfffdffff
 8004bb4:	fffeffff 	.word	0xfffeffff
 8004bb8:	fffbffff 	.word	0xfffbffff
 8004bbc:	ffff7fff 	.word	0xffff7fff
 8004bc0:	ffffefff 	.word	0xffffefff
 8004bc4:	ffffdfff 	.word	0xffffdfff
 8004bc8:	ffefffff 	.word	0xffefffff
 8004bcc:	fff7ffff 	.word	0xfff7ffff
 8004bd0:	ff9fffff 	.word	0xff9fffff

08004bd4 <UART_CheckIdleState>:
{
 8004bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd6:	2384      	movs	r3, #132	; 0x84
 8004bd8:	2200      	movs	r2, #0
{
 8004bda:	46c6      	mov	lr, r8
 8004bdc:	0004      	movs	r4, r0
 8004bde:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be0:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8004be2:	f7fc fc09 	bl	80013f8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004be6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004be8:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	0712      	lsls	r2, r2, #28
 8004bee:	d410      	bmi.n	8004c12 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	0752      	lsls	r2, r2, #29
 8004bf4:	d43c      	bmi.n	8004c70 <UART_CheckIdleState+0x9c>
  huart->gState = HAL_UART_STATE_READY;
 8004bf6:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 8004bf8:	2280      	movs	r2, #128	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8004bfa:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bfc:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfe:	2300      	movs	r3, #0
  return HAL_OK;
 8004c00:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c02:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c04:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8004c06:	2378      	movs	r3, #120	; 0x78
 8004c08:	2200      	movs	r2, #0
 8004c0a:	54e2      	strb	r2, [r4, r3]
}
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	46b8      	mov	r8, r7
 8004c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	0292      	lsls	r2, r2, #10
 8004c16:	d4eb      	bmi.n	8004bf0 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c18:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c1a:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c1c:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c1e:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c20:	04b6      	lsls	r6, r6, #18
 8004c22:	e010      	b.n	8004c46 <UART_CheckIdleState+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	4217      	tst	r7, r2
 8004c2a:	d009      	beq.n	8004c40 <UART_CheckIdleState+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c2c:	4641      	mov	r1, r8
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	4211      	tst	r1, r2
 8004c32:	d158      	bne.n	8004ce6 <UART_CheckIdleState+0x112>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c34:	2280      	movs	r2, #128	; 0x80
 8004c36:	69d9      	ldr	r1, [r3, #28]
 8004c38:	0112      	lsls	r2, r2, #4
 8004c3a:	4211      	tst	r1, r2
 8004c3c:	d000      	beq.n	8004c40 <UART_CheckIdleState+0x6c>
 8004c3e:	e083      	b.n	8004d48 <UART_CheckIdleState+0x174>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c40:	69da      	ldr	r2, [r3, #28]
 8004c42:	0292      	lsls	r2, r2, #10
 8004c44:	d4d4      	bmi.n	8004bf0 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c46:	f7fc fbd7 	bl	80013f8 <HAL_GetTick>
 8004c4a:	1b40      	subs	r0, r0, r5
 8004c4c:	42b0      	cmp	r0, r6
 8004c4e:	d3e9      	bcc.n	8004c24 <UART_CheckIdleState+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c50:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c54:	2301      	movs	r3, #1
 8004c56:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c5a:	2080      	movs	r0, #128	; 0x80
 8004c5c:	6822      	ldr	r2, [r4, #0]
 8004c5e:	6813      	ldr	r3, [r2, #0]
 8004c60:	4383      	bics	r3, r0
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8004c68:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8004c6a:	387d      	subs	r0, #125	; 0x7d
      huart->gState = HAL_UART_STATE_READY;
 8004c6c:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8004c6e:	e7ca      	b.n	8004c06 <UART_CheckIdleState+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	025b      	lsls	r3, r3, #9
 8004c74:	d4bf      	bmi.n	8004bf6 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c76:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c78:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c7a:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c7c:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7e:	04b6      	lsls	r6, r6, #18
 8004c80:	e011      	b.n	8004ca6 <UART_CheckIdleState+0xd2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4217      	tst	r7, r2
 8004c88:	d00a      	beq.n	8004ca0 <UART_CheckIdleState+0xcc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c8a:	4641      	mov	r1, r8
 8004c8c:	69da      	ldr	r2, [r3, #28]
 8004c8e:	4211      	tst	r1, r2
 8004c90:	d000      	beq.n	8004c94 <UART_CheckIdleState+0xc0>
 8004c92:	e089      	b.n	8004da8 <UART_CheckIdleState+0x1d4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c94:	2280      	movs	r2, #128	; 0x80
 8004c96:	69d9      	ldr	r1, [r3, #28]
 8004c98:	0112      	lsls	r2, r2, #4
 8004c9a:	4211      	tst	r1, r2
 8004c9c:	d000      	beq.n	8004ca0 <UART_CheckIdleState+0xcc>
 8004c9e:	e0b4      	b.n	8004e0a <UART_CheckIdleState+0x236>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	025b      	lsls	r3, r3, #9
 8004ca4:	d4a7      	bmi.n	8004bf6 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca6:	f7fc fba7 	bl	80013f8 <HAL_GetTick>
 8004caa:	1b40      	subs	r0, r0, r5
 8004cac:	42b0      	cmp	r0, r6
 8004cae:	d3e8      	bcc.n	8004c82 <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cba:	6821      	ldr	r1, [r4, #0]
 8004cbc:	4d6b      	ldr	r5, [pc, #428]	; (8004e6c <UART_CheckIdleState+0x298>)
 8004cbe:	680b      	ldr	r3, [r1, #0]
 8004cc0:	402b      	ands	r3, r5
 8004cc2:	600b      	str	r3, [r1, #0]
 8004cc4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ccc:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd0:	6821      	ldr	r1, [r4, #0]
 8004cd2:	688b      	ldr	r3, [r1, #8]
 8004cd4:	4393      	bics	r3, r2
 8004cd6:	608b      	str	r3, [r1, #8]
 8004cd8:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	2380      	movs	r3, #128	; 0x80
 8004cde:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 8004ce0:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 8004ce2:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004ce4:	e78f      	b.n	8004c06 <UART_CheckIdleState+0x32>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ce6:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cec:	2201      	movs	r2, #1
 8004cee:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf2:	6821      	ldr	r1, [r4, #0]
 8004cf4:	4d5d      	ldr	r5, [pc, #372]	; (8004e6c <UART_CheckIdleState+0x298>)
 8004cf6:	680b      	ldr	r3, [r1, #0]
 8004cf8:	402b      	ands	r3, r5
 8004cfa:	600b      	str	r3, [r1, #0]
 8004cfc:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d00:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d04:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d08:	6821      	ldr	r1, [r4, #0]
 8004d0a:	688b      	ldr	r3, [r1, #8]
 8004d0c:	4393      	bics	r3, r2
 8004d0e:	608b      	str	r3, [r1, #8]
 8004d10:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d14:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d10a      	bne.n	8004d30 <UART_CheckIdleState+0x15c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d1a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d22:	2010      	movs	r0, #16
 8004d24:	6822      	ldr	r2, [r4, #0]
 8004d26:	6813      	ldr	r3, [r2, #0]
 8004d28:	4383      	bics	r3, r0
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004d30:	2380      	movs	r3, #128	; 0x80
 8004d32:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d34:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004d36:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d38:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d3a:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8004d3e:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d40:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8004d42:	3a0c      	subs	r2, #12
 8004d44:	54a3      	strb	r3, [r4, r2]
 8004d46:	e783      	b.n	8004c50 <UART_CheckIdleState+0x7c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d48:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d4a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d54:	6821      	ldr	r1, [r4, #0]
 8004d56:	4d45      	ldr	r5, [pc, #276]	; (8004e6c <UART_CheckIdleState+0x298>)
 8004d58:	680b      	ldr	r3, [r1, #0]
 8004d5a:	402b      	ands	r3, r5
 8004d5c:	600b      	str	r3, [r1, #0]
 8004d5e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d62:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d66:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6a:	6821      	ldr	r1, [r4, #0]
 8004d6c:	688b      	ldr	r3, [r1, #8]
 8004d6e:	4393      	bics	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
 8004d72:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d76:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d10a      	bne.n	8004d92 <UART_CheckIdleState+0x1be>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d7c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d80:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d84:	2010      	movs	r0, #16
 8004d86:	6822      	ldr	r2, [r4, #0]
 8004d88:	6813      	ldr	r3, [r2, #0]
 8004d8a:	4383      	bics	r3, r0
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004d92:	2220      	movs	r2, #32
 8004d94:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d96:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004d98:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8004d9e:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004da0:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8004da2:	3258      	adds	r2, #88	; 0x58
 8004da4:	54a3      	strb	r3, [r4, r2]
 8004da6:	e753      	b.n	8004c50 <UART_CheckIdleState+0x7c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004da8:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004daa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dae:	2201      	movs	r2, #1
 8004db0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004db4:	6821      	ldr	r1, [r4, #0]
 8004db6:	4d2d      	ldr	r5, [pc, #180]	; (8004e6c <UART_CheckIdleState+0x298>)
 8004db8:	680b      	ldr	r3, [r1, #0]
 8004dba:	402b      	ands	r3, r5
 8004dbc:	600b      	str	r3, [r1, #0]
 8004dbe:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dca:	6821      	ldr	r1, [r4, #0]
 8004dcc:	688b      	ldr	r3, [r1, #8]
 8004dce:	4393      	bics	r3, r2
 8004dd0:	608b      	str	r3, [r1, #8]
 8004dd2:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d10a      	bne.n	8004df2 <UART_CheckIdleState+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ddc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de4:	2010      	movs	r0, #16
 8004de6:	6822      	ldr	r2, [r4, #0]
 8004de8:	6813      	ldr	r3, [r2, #0]
 8004dea:	4383      	bics	r3, r0
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004df2:	2380      	movs	r3, #128	; 0x80
 8004df4:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004df6:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004df8:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfa:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dfc:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfe:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8004e00:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e02:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8004e04:	3a0c      	subs	r2, #12
 8004e06:	54a3      	strb	r3, [r4, r2]
 8004e08:	e752      	b.n	8004cb0 <UART_CheckIdleState+0xdc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e0a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e0c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e10:	2201      	movs	r2, #1
 8004e12:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e16:	6821      	ldr	r1, [r4, #0]
 8004e18:	4d14      	ldr	r5, [pc, #80]	; (8004e6c <UART_CheckIdleState+0x298>)
 8004e1a:	680b      	ldr	r3, [r1, #0]
 8004e1c:	402b      	ands	r3, r5
 8004e1e:	600b      	str	r3, [r1, #0]
 8004e20:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e24:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e28:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2c:	6821      	ldr	r1, [r4, #0]
 8004e2e:	688b      	ldr	r3, [r1, #8]
 8004e30:	4393      	bics	r3, r2
 8004e32:	608b      	str	r3, [r1, #8]
 8004e34:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e38:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d10a      	bne.n	8004e54 <UART_CheckIdleState+0x280>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e3e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e42:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e46:	2010      	movs	r0, #16
 8004e48:	6822      	ldr	r2, [r4, #0]
 8004e4a:	6813      	ldr	r3, [r2, #0]
 8004e4c:	4383      	bics	r3, r0
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004e54:	2220      	movs	r2, #32
 8004e56:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e58:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004e5a:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8004e60:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e62:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8004e64:	3258      	adds	r2, #88	; 0x58
 8004e66:	54a3      	strb	r3, [r4, r2]
 8004e68:	e722      	b.n	8004cb0 <UART_CheckIdleState+0xdc>
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	fffffedf 	.word	0xfffffedf

08004e70 <HAL_UART_Init>:
{
 8004e70:	b570      	push	{r4, r5, r6, lr}
 8004e72:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004e74:	d100      	bne.n	8004e78 <HAL_UART_Init+0x8>
 8004e76:	e076      	b.n	8004f66 <HAL_UART_Init+0xf6>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004e78:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d067      	beq.n	8004f4e <HAL_UART_Init+0xde>
  huart->gState = HAL_UART_STATE_BUSY;
 8004e7e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004e80:	2101      	movs	r1, #1
 8004e82:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004e84:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004e86:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e88:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8004e8a:	438b      	bics	r3, r1
 8004e8c:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e8e:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e90:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e92:	432b      	orrs	r3, r5
 8004e94:	6965      	ldr	r5, [r4, #20]
 8004e96:	69e1      	ldr	r1, [r4, #28]
 8004e98:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e9a:	4d49      	ldr	r5, [pc, #292]	; (8004fc0 <HAL_UART_Init+0x150>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e9c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e9e:	4028      	ands	r0, r5
 8004ea0:	4303      	orrs	r3, r0
 8004ea2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea4:	6853      	ldr	r3, [r2, #4]
 8004ea6:	4847      	ldr	r0, [pc, #284]	; (8004fc4 <HAL_UART_Init+0x154>)
  tmpreg |= huart->Init.OneBitSampling;
 8004ea8:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eaa:	4003      	ands	r3, r0
 8004eac:	68e0      	ldr	r0, [r4, #12]
 8004eae:	4303      	orrs	r3, r0
 8004eb0:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eb2:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eb4:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8004eb6:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eb8:	4d43      	ldr	r5, [pc, #268]	; (8004fc8 <HAL_UART_Init+0x158>)
 8004eba:	4028      	ands	r0, r5
 8004ebc:	4303      	orrs	r3, r0
 8004ebe:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ec0:	4b42      	ldr	r3, [pc, #264]	; (8004fcc <HAL_UART_Init+0x15c>)
 8004ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d91f      	bls.n	8004f0e <HAL_UART_Init+0x9e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ece:	2380      	movs	r3, #128	; 0x80
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	4299      	cmp	r1, r3
 8004ed4:	d100      	bne.n	8004ed8 <HAL_UART_Init+0x68>
 8004ed6:	e070      	b.n	8004fba <HAL_UART_Init+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed8:	f7fd ff5c 	bl	8002d94 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d124      	bne.n	8004f2a <HAL_UART_Init+0xba>
  huart->RxISR = NULL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8004ee4:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d135      	bne.n	8004f58 <HAL_UART_Init+0xe8>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	4938      	ldr	r1, [pc, #224]	; (8004fd0 <HAL_UART_Init+0x160>)
 8004ef0:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004ef2:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ef4:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ef6:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ef8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	438a      	bics	r2, r1
 8004efe:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	3929      	subs	r1, #41	; 0x29
 8004f04:	430a      	orrs	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004f08:	f7ff fe64 	bl	8004bd4 <UART_CheckIdleState>
 8004f0c:	e01b      	b.n	8004f46 <HAL_UART_Init+0xd6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f0e:	2080      	movs	r0, #128	; 0x80
 8004f10:	4a30      	ldr	r2, [pc, #192]	; (8004fd4 <HAL_UART_Init+0x164>)
 8004f12:	0200      	lsls	r0, r0, #8
 8004f14:	5cd3      	ldrb	r3, [r2, r3]
 8004f16:	4281      	cmp	r1, r0
 8004f18:	d027      	beq.n	8004f6a <HAL_UART_Init+0xfa>
    switch (clocksource)
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d044      	beq.n	8004fa8 <HAL_UART_Init+0x138>
 8004f1e:	d813      	bhi.n	8004f48 <HAL_UART_Init+0xd8>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0d9      	beq.n	8004ed8 <HAL_UART_Init+0x68>
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d10a      	bne.n	8004f3e <HAL_UART_Init+0xce>
        pclk = (uint32_t) HSI_VALUE;
 8004f28:	482b      	ldr	r0, [pc, #172]	; (8004fd8 <HAL_UART_Init+0x168>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f2a:	6861      	ldr	r1, [r4, #4]
 8004f2c:	084b      	lsrs	r3, r1, #1
 8004f2e:	1818      	adds	r0, r3, r0
 8004f30:	f7fb f8ea 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f34:	0002      	movs	r2, r0
 8004f36:	4b29      	ldr	r3, [pc, #164]	; (8004fdc <HAL_UART_Init+0x16c>)
 8004f38:	3a10      	subs	r2, #16
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d910      	bls.n	8004f60 <HAL_UART_Init+0xf0>
  huart->RxISR = NULL;
 8004f3e:	2300      	movs	r3, #0
    return HAL_ERROR;
 8004f40:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8004f42:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8004f44:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8004f46:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d0ee      	beq.n	8004f2a <HAL_UART_Init+0xba>
 8004f4c:	e7f7      	b.n	8004f3e <HAL_UART_Init+0xce>
    huart->Lock = HAL_UNLOCKED;
 8004f4e:	2278      	movs	r2, #120	; 0x78
 8004f50:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8004f52:	f7fc f8e7 	bl	8001124 <HAL_UART_MspInit>
 8004f56:	e792      	b.n	8004e7e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8004f58:	0020      	movs	r0, r4
 8004f5a:	f7ff fdd3 	bl	8004b04 <UART_AdvFeatureConfig>
 8004f5e:	e7c5      	b.n	8004eec <HAL_UART_Init+0x7c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	60d8      	str	r0, [r3, #12]
 8004f64:	e7bc      	b.n	8004ee0 <HAL_UART_Init+0x70>
    return HAL_ERROR;
 8004f66:	2001      	movs	r0, #1
 8004f68:	e7ed      	b.n	8004f46 <HAL_UART_Init+0xd6>
    switch (clocksource)
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d01f      	beq.n	8004fae <HAL_UART_Init+0x13e>
 8004f6e:	d816      	bhi.n	8004f9e <HAL_UART_Init+0x12e>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d022      	beq.n	8004fba <HAL_UART_Init+0x14a>
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d1e2      	bne.n	8004f3e <HAL_UART_Init+0xce>
 8004f78:	4b19      	ldr	r3, [pc, #100]	; (8004fe0 <HAL_UART_Init+0x170>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f7a:	6861      	ldr	r1, [r4, #4]
 8004f7c:	0848      	lsrs	r0, r1, #1
 8004f7e:	18c0      	adds	r0, r0, r3
 8004f80:	f7fb f8c2 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f84:	0002      	movs	r2, r0
 8004f86:	4b15      	ldr	r3, [pc, #84]	; (8004fdc <HAL_UART_Init+0x16c>)
 8004f88:	3a10      	subs	r2, #16
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d8d7      	bhi.n	8004f3e <HAL_UART_Init+0xce>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f8e:	4b15      	ldr	r3, [pc, #84]	; (8004fe4 <HAL_UART_Init+0x174>)
        huart->Instance->BRR = brrtemp;
 8004f90:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f92:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f94:	0700      	lsls	r0, r0, #28
 8004f96:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8004f98:	4303      	orrs	r3, r0
 8004f9a:	60d3      	str	r3, [r2, #12]
 8004f9c:	e7a0      	b.n	8004ee0 <HAL_UART_Init+0x70>
    switch (clocksource)
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d1cd      	bne.n	8004f3e <HAL_UART_Init+0xce>
 8004fa2:	2380      	movs	r3, #128	; 0x80
 8004fa4:	025b      	lsls	r3, r3, #9
 8004fa6:	e7e8      	b.n	8004f7a <HAL_UART_Init+0x10a>
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa8:	f7fd feca 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
        break;
 8004fac:	e796      	b.n	8004edc <HAL_UART_Init+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8004fae:	f7fd fec7 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fb2:	0043      	lsls	r3, r0, #1
    if (pclk != 0U)
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d1e0      	bne.n	8004f7a <HAL_UART_Init+0x10a>
 8004fb8:	e792      	b.n	8004ee0 <HAL_UART_Init+0x70>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fba:	f7fd feeb 	bl	8002d94 <HAL_RCC_GetPCLK1Freq>
        break;
 8004fbe:	e7f8      	b.n	8004fb2 <HAL_UART_Init+0x142>
 8004fc0:	ffff69f3 	.word	0xffff69f3
 8004fc4:	ffffcfff 	.word	0xffffcfff
 8004fc8:	fffff4ff 	.word	0xfffff4ff
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	ffffb7ff 	.word	0xffffb7ff
 8004fd4:	08005e04 	.word	0x08005e04
 8004fd8:	007a1200 	.word	0x007a1200
 8004fdc:	0000ffef 	.word	0x0000ffef
 8004fe0:	00f42400 	.word	0x00f42400
 8004fe4:	0000fff0 	.word	0x0000fff0

08004fe8 <HAL_MultiProcessor_Init>:
{
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	0004      	movs	r4, r0
 8004fec:	000e      	movs	r6, r1
 8004fee:	0015      	movs	r5, r2
  if (huart == NULL)
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d100      	bne.n	8004ff6 <HAL_MultiProcessor_Init+0xe>
 8004ff4:	e086      	b.n	8005104 <HAL_MultiProcessor_Init+0x11c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d100      	bne.n	8004ffe <HAL_MultiProcessor_Init+0x16>
 8004ffc:	e076      	b.n	80050ec <HAL_MultiProcessor_Init+0x104>
  huart->gState = HAL_UART_STATE_BUSY;
 8004ffe:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005000:	2101      	movs	r1, #1
 8005002:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005004:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8005006:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005008:	6927      	ldr	r7, [r4, #16]
  __HAL_UART_DISABLE(huart);
 800500a:	438b      	bics	r3, r1
 800500c:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800500e:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005010:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005012:	433b      	orrs	r3, r7
 8005014:	6967      	ldr	r7, [r4, #20]
 8005016:	69e1      	ldr	r1, [r4, #28]
 8005018:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800501a:	4f51      	ldr	r7, [pc, #324]	; (8005160 <HAL_MultiProcessor_Init+0x178>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800501c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800501e:	4038      	ands	r0, r7
 8005020:	4303      	orrs	r3, r0
 8005022:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005024:	6853      	ldr	r3, [r2, #4]
 8005026:	484f      	ldr	r0, [pc, #316]	; (8005164 <HAL_MultiProcessor_Init+0x17c>)
  tmpreg |= huart->Init.OneBitSampling;
 8005028:	6a27      	ldr	r7, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800502a:	4003      	ands	r3, r0
 800502c:	68e0      	ldr	r0, [r4, #12]
 800502e:	4303      	orrs	r3, r0
 8005030:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005032:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005034:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8005036:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005038:	4f4b      	ldr	r7, [pc, #300]	; (8005168 <HAL_MultiProcessor_Init+0x180>)
 800503a:	4038      	ands	r0, r7
 800503c:	4303      	orrs	r3, r0
 800503e:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005040:	4b4a      	ldr	r3, [pc, #296]	; (800516c <HAL_MultiProcessor_Init+0x184>)
 8005042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005044:	2303      	movs	r3, #3
 8005046:	4013      	ands	r3, r2
 8005048:	3b01      	subs	r3, #1
 800504a:	2b02      	cmp	r3, #2
 800504c:	d92e      	bls.n	80050ac <HAL_MultiProcessor_Init+0xc4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	021b      	lsls	r3, r3, #8
 8005052:	4299      	cmp	r1, r3
 8005054:	d100      	bne.n	8005058 <HAL_MultiProcessor_Init+0x70>
 8005056:	e07f      	b.n	8005158 <HAL_MultiProcessor_Init+0x170>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005058:	f7fd fe9c 	bl	8002d94 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800505c:	2800      	cmp	r0, #0
 800505e:	d133      	bne.n	80050c8 <HAL_MultiProcessor_Init+0xe0>
  huart->RxISR = NULL;
 8005060:	2300      	movs	r3, #0
 8005062:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8005064:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005068:	2b00      	cmp	r3, #0
 800506a:	d144      	bne.n	80050f6 <HAL_MultiProcessor_Init+0x10e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	4940      	ldr	r1, [pc, #256]	; (8005170 <HAL_MultiProcessor_Init+0x188>)
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005074:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005076:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	438a      	bics	r2, r1
 800507c:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800507e:	2280      	movs	r2, #128	; 0x80
 8005080:	0112      	lsls	r2, r2, #4
 8005082:	4295      	cmp	r5, r2
 8005084:	d105      	bne.n	8005092 <HAL_MultiProcessor_Init+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	0636      	lsls	r6, r6, #24
 800508a:	0212      	lsls	r2, r2, #8
 800508c:	0a12      	lsrs	r2, r2, #8
 800508e:	4316      	orrs	r6, r2
 8005090:	605e      	str	r6, [r3, #4]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4937      	ldr	r1, [pc, #220]	; (8005174 <HAL_MultiProcessor_Init+0x18c>)
  return (UART_CheckIdleState(huart));
 8005096:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8005098:	400a      	ands	r2, r1
  __HAL_UART_ENABLE(huart);
 800509a:	2101      	movs	r1, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800509c:	432a      	orrs	r2, r5
 800509e:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE(huart);
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80050a6:	f7ff fd95 	bl	8004bd4 <UART_CheckIdleState>
 80050aa:	e01b      	b.n	80050e4 <HAL_MultiProcessor_Init+0xfc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ac:	2080      	movs	r0, #128	; 0x80
 80050ae:	4a32      	ldr	r2, [pc, #200]	; (8005178 <HAL_MultiProcessor_Init+0x190>)
 80050b0:	0200      	lsls	r0, r0, #8
 80050b2:	5cd3      	ldrb	r3, [r2, r3]
 80050b4:	4281      	cmp	r1, r0
 80050b6:	d027      	beq.n	8005108 <HAL_MultiProcessor_Init+0x120>
    switch (clocksource)
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d044      	beq.n	8005146 <HAL_MultiProcessor_Init+0x15e>
 80050bc:	d813      	bhi.n	80050e6 <HAL_MultiProcessor_Init+0xfe>
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0ca      	beq.n	8005058 <HAL_MultiProcessor_Init+0x70>
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d10a      	bne.n	80050dc <HAL_MultiProcessor_Init+0xf4>
        pclk = (uint32_t) HSI_VALUE;
 80050c6:	482d      	ldr	r0, [pc, #180]	; (800517c <HAL_MultiProcessor_Init+0x194>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050c8:	6861      	ldr	r1, [r4, #4]
 80050ca:	084b      	lsrs	r3, r1, #1
 80050cc:	1818      	adds	r0, r3, r0
 80050ce:	f7fb f81b 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050d2:	0002      	movs	r2, r0
 80050d4:	4b2a      	ldr	r3, [pc, #168]	; (8005180 <HAL_MultiProcessor_Init+0x198>)
 80050d6:	3a10      	subs	r2, #16
 80050d8:	429a      	cmp	r2, r3
 80050da:	d910      	bls.n	80050fe <HAL_MultiProcessor_Init+0x116>
  huart->RxISR = NULL;
 80050dc:	2300      	movs	r3, #0
    return HAL_ERROR;
 80050de:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80050e0:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80050e2:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80050e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (clocksource)
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d0ee      	beq.n	80050c8 <HAL_MultiProcessor_Init+0xe0>
 80050ea:	e7f7      	b.n	80050dc <HAL_MultiProcessor_Init+0xf4>
    huart->Lock = HAL_UNLOCKED;
 80050ec:	2278      	movs	r2, #120	; 0x78
 80050ee:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 80050f0:	f7fc f818 	bl	8001124 <HAL_UART_MspInit>
 80050f4:	e783      	b.n	8004ffe <HAL_MultiProcessor_Init+0x16>
    UART_AdvFeatureConfig(huart);
 80050f6:	0020      	movs	r0, r4
 80050f8:	f7ff fd04 	bl	8004b04 <UART_AdvFeatureConfig>
 80050fc:	e7b6      	b.n	800506c <HAL_MultiProcessor_Init+0x84>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	60d8      	str	r0, [r3, #12]
 8005102:	e7ad      	b.n	8005060 <HAL_MultiProcessor_Init+0x78>
    return HAL_ERROR;
 8005104:	2001      	movs	r0, #1
 8005106:	e7ed      	b.n	80050e4 <HAL_MultiProcessor_Init+0xfc>
    switch (clocksource)
 8005108:	2b04      	cmp	r3, #4
 800510a:	d01f      	beq.n	800514c <HAL_MultiProcessor_Init+0x164>
 800510c:	d816      	bhi.n	800513c <HAL_MultiProcessor_Init+0x154>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d022      	beq.n	8005158 <HAL_MultiProcessor_Init+0x170>
 8005112:	2b02      	cmp	r3, #2
 8005114:	d1e2      	bne.n	80050dc <HAL_MultiProcessor_Init+0xf4>
 8005116:	4b1b      	ldr	r3, [pc, #108]	; (8005184 <HAL_MultiProcessor_Init+0x19c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005118:	6861      	ldr	r1, [r4, #4]
 800511a:	0848      	lsrs	r0, r1, #1
 800511c:	18c0      	adds	r0, r0, r3
 800511e:	f7fa fff3 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005122:	0002      	movs	r2, r0
 8005124:	4b16      	ldr	r3, [pc, #88]	; (8005180 <HAL_MultiProcessor_Init+0x198>)
 8005126:	3a10      	subs	r2, #16
 8005128:	429a      	cmp	r2, r3
 800512a:	d8d7      	bhi.n	80050dc <HAL_MultiProcessor_Init+0xf4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800512c:	4b16      	ldr	r3, [pc, #88]	; (8005188 <HAL_MultiProcessor_Init+0x1a0>)
        huart->Instance->BRR = brrtemp;
 800512e:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005130:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005132:	0700      	lsls	r0, r0, #28
 8005134:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8005136:	4303      	orrs	r3, r0
 8005138:	60d3      	str	r3, [r2, #12]
 800513a:	e791      	b.n	8005060 <HAL_MultiProcessor_Init+0x78>
    switch (clocksource)
 800513c:	2b08      	cmp	r3, #8
 800513e:	d1cd      	bne.n	80050dc <HAL_MultiProcessor_Init+0xf4>
 8005140:	2380      	movs	r3, #128	; 0x80
 8005142:	025b      	lsls	r3, r3, #9
 8005144:	e7e8      	b.n	8005118 <HAL_MultiProcessor_Init+0x130>
        pclk = HAL_RCC_GetSysClockFreq();
 8005146:	f7fd fdfb 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
        break;
 800514a:	e787      	b.n	800505c <HAL_MultiProcessor_Init+0x74>
        pclk = HAL_RCC_GetSysClockFreq();
 800514c:	f7fd fdf8 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005150:	0043      	lsls	r3, r0, #1
    if (pclk != 0U)
 8005152:	2800      	cmp	r0, #0
 8005154:	d1e0      	bne.n	8005118 <HAL_MultiProcessor_Init+0x130>
 8005156:	e783      	b.n	8005060 <HAL_MultiProcessor_Init+0x78>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005158:	f7fd fe1c 	bl	8002d94 <HAL_RCC_GetPCLK1Freq>
        break;
 800515c:	e7f8      	b.n	8005150 <HAL_MultiProcessor_Init+0x168>
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	ffff69f3 	.word	0xffff69f3
 8005164:	ffffcfff 	.word	0xffffcfff
 8005168:	fffff4ff 	.word	0xfffff4ff
 800516c:	40021000 	.word	0x40021000
 8005170:	ffffb7ff 	.word	0xffffb7ff
 8005174:	fffff7ff 	.word	0xfffff7ff
 8005178:	08005e04 	.word	0x08005e04
 800517c:	007a1200 	.word	0x007a1200
 8005180:	0000ffef 	.word	0x0000ffef
 8005184:	00f42400 	.word	0x00f42400
 8005188:	0000fff0 	.word	0x0000fff0

0800518c <HAL_MultiProcessor_EnableMuteMode>:
  __HAL_LOCK(huart);
 800518c:	2378      	movs	r3, #120	; 0x78
{
 800518e:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 8005190:	5cc2      	ldrb	r2, [r0, r3]
 8005192:	2a01      	cmp	r2, #1
 8005194:	d014      	beq.n	80051c0 <HAL_MultiProcessor_EnableMuteMode+0x34>
 8005196:	2201      	movs	r2, #1
 8005198:	54c2      	strb	r2, [r0, r3]
  huart->gState = HAL_UART_STATE_BUSY;
 800519a:	3b54      	subs	r3, #84	; 0x54
 800519c:	67c3      	str	r3, [r0, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_MME);
 80051a6:	2380      	movs	r3, #128	; 0x80
 80051a8:	6802      	ldr	r2, [r0, #0]
 80051aa:	019b      	lsls	r3, r3, #6
 80051ac:	6814      	ldr	r4, [r2, #0]
 80051ae:	4323      	orrs	r3, r4
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	f381 8810 	msr	PRIMASK, r1
  huart->gState = HAL_UART_STATE_READY;
 80051b6:	2320      	movs	r3, #32
 80051b8:	67c3      	str	r3, [r0, #124]	; 0x7c
  return (UART_CheckIdleState(huart));
 80051ba:	f7ff fd0b 	bl	8004bd4 <UART_CheckIdleState>
}
 80051be:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80051c0:	2002      	movs	r0, #2
 80051c2:	e7fc      	b.n	80051be <HAL_MultiProcessor_EnableMuteMode+0x32>

080051c4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051c4:	4770      	bx	lr
 80051c6:	46c0      	nop			; (mov r8, r8)

080051c8 <HAL_MultiProcessorEx_AddressLength_Set>:
  *          @arg @ref UART_ADDRESS_DETECT_4B 4-bit long address
  *          @arg @ref UART_ADDRESS_DETECT_7B 6-, 7- or 8-bit long address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength)
{
 80051c8:	000a      	movs	r2, r1
 80051ca:	b570      	push	{r4, r5, r6, lr}
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d011      	beq.n	80051f4 <HAL_MultiProcessorEx_AddressLength_Set+0x2c>
  }

  /* Check the address length parameter */
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));

  huart->gState = HAL_UART_STATE_BUSY;
 80051d0:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80051d2:	2401      	movs	r4, #1

  /* Set the address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 80051d4:	2510      	movs	r5, #16
  huart->gState = HAL_UART_STATE_BUSY;
 80051d6:	67c3      	str	r3, [r0, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80051d8:	6803      	ldr	r3, [r0, #0]
 80051da:	6819      	ldr	r1, [r3, #0]
 80051dc:	43a1      	bics	r1, r4
 80051de:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 80051e0:	6859      	ldr	r1, [r3, #4]
 80051e2:	43a9      	bics	r1, r5
 80051e4:	4311      	orrs	r1, r2
 80051e6:	6059      	str	r1, [r3, #4]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	4322      	orrs	r2, r4
 80051ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState to Ready */
  return (UART_CheckIdleState(huart));
 80051ee:	f7ff fcf1 	bl	8004bd4 <UART_CheckIdleState>
}
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80051f4:	2001      	movs	r0, #1
 80051f6:	e7fc      	b.n	80051f2 <HAL_MultiProcessorEx_AddressLength_Set+0x2a>

080051f8 <std>:
 80051f8:	2300      	movs	r3, #0
 80051fa:	b510      	push	{r4, lr}
 80051fc:	0004      	movs	r4, r0
 80051fe:	6003      	str	r3, [r0, #0]
 8005200:	6043      	str	r3, [r0, #4]
 8005202:	6083      	str	r3, [r0, #8]
 8005204:	8181      	strh	r1, [r0, #12]
 8005206:	6643      	str	r3, [r0, #100]	; 0x64
 8005208:	0019      	movs	r1, r3
 800520a:	81c2      	strh	r2, [r0, #14]
 800520c:	6103      	str	r3, [r0, #16]
 800520e:	6143      	str	r3, [r0, #20]
 8005210:	6183      	str	r3, [r0, #24]
 8005212:	2208      	movs	r2, #8
 8005214:	305c      	adds	r0, #92	; 0x5c
 8005216:	f000 f901 	bl	800541c <memset>
 800521a:	4b05      	ldr	r3, [pc, #20]	; (8005230 <std+0x38>)
 800521c:	6224      	str	r4, [r4, #32]
 800521e:	6263      	str	r3, [r4, #36]	; 0x24
 8005220:	4b04      	ldr	r3, [pc, #16]	; (8005234 <std+0x3c>)
 8005222:	62a3      	str	r3, [r4, #40]	; 0x28
 8005224:	4b04      	ldr	r3, [pc, #16]	; (8005238 <std+0x40>)
 8005226:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005228:	4b04      	ldr	r3, [pc, #16]	; (800523c <std+0x44>)
 800522a:	6323      	str	r3, [r4, #48]	; 0x30
 800522c:	bd10      	pop	{r4, pc}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	08005759 	.word	0x08005759
 8005234:	08005781 	.word	0x08005781
 8005238:	080057b9 	.word	0x080057b9
 800523c:	080057e5 	.word	0x080057e5

08005240 <stdio_exit_handler>:
 8005240:	b510      	push	{r4, lr}
 8005242:	4a03      	ldr	r2, [pc, #12]	; (8005250 <stdio_exit_handler+0x10>)
 8005244:	4903      	ldr	r1, [pc, #12]	; (8005254 <stdio_exit_handler+0x14>)
 8005246:	4804      	ldr	r0, [pc, #16]	; (8005258 <stdio_exit_handler+0x18>)
 8005248:	f000 f86c 	bl	8005324 <_fwalk_sglue>
 800524c:	bd10      	pop	{r4, pc}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	2000000c 	.word	0x2000000c
 8005254:	080056e1 	.word	0x080056e1
 8005258:	20000018 	.word	0x20000018

0800525c <cleanup_stdio>:
 800525c:	6841      	ldr	r1, [r0, #4]
 800525e:	4b0b      	ldr	r3, [pc, #44]	; (800528c <cleanup_stdio+0x30>)
 8005260:	b510      	push	{r4, lr}
 8005262:	0004      	movs	r4, r0
 8005264:	4299      	cmp	r1, r3
 8005266:	d001      	beq.n	800526c <cleanup_stdio+0x10>
 8005268:	f000 fa3a 	bl	80056e0 <_fflush_r>
 800526c:	68a1      	ldr	r1, [r4, #8]
 800526e:	4b08      	ldr	r3, [pc, #32]	; (8005290 <cleanup_stdio+0x34>)
 8005270:	4299      	cmp	r1, r3
 8005272:	d002      	beq.n	800527a <cleanup_stdio+0x1e>
 8005274:	0020      	movs	r0, r4
 8005276:	f000 fa33 	bl	80056e0 <_fflush_r>
 800527a:	68e1      	ldr	r1, [r4, #12]
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <cleanup_stdio+0x38>)
 800527e:	4299      	cmp	r1, r3
 8005280:	d002      	beq.n	8005288 <cleanup_stdio+0x2c>
 8005282:	0020      	movs	r0, r4
 8005284:	f000 fa2c 	bl	80056e0 <_fflush_r>
 8005288:	bd10      	pop	{r4, pc}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	20000378 	.word	0x20000378
 8005290:	200003e0 	.word	0x200003e0
 8005294:	20000448 	.word	0x20000448

08005298 <global_stdio_init.part.0>:
 8005298:	b510      	push	{r4, lr}
 800529a:	4b09      	ldr	r3, [pc, #36]	; (80052c0 <global_stdio_init.part.0+0x28>)
 800529c:	4a09      	ldr	r2, [pc, #36]	; (80052c4 <global_stdio_init.part.0+0x2c>)
 800529e:	2104      	movs	r1, #4
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	4809      	ldr	r0, [pc, #36]	; (80052c8 <global_stdio_init.part.0+0x30>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	f7ff ffa7 	bl	80051f8 <std>
 80052aa:	2201      	movs	r2, #1
 80052ac:	2109      	movs	r1, #9
 80052ae:	4807      	ldr	r0, [pc, #28]	; (80052cc <global_stdio_init.part.0+0x34>)
 80052b0:	f7ff ffa2 	bl	80051f8 <std>
 80052b4:	2202      	movs	r2, #2
 80052b6:	2112      	movs	r1, #18
 80052b8:	4805      	ldr	r0, [pc, #20]	; (80052d0 <global_stdio_init.part.0+0x38>)
 80052ba:	f7ff ff9d 	bl	80051f8 <std>
 80052be:	bd10      	pop	{r4, pc}
 80052c0:	200004b0 	.word	0x200004b0
 80052c4:	08005241 	.word	0x08005241
 80052c8:	20000378 	.word	0x20000378
 80052cc:	200003e0 	.word	0x200003e0
 80052d0:	20000448 	.word	0x20000448

080052d4 <__sfp_lock_acquire>:
 80052d4:	b510      	push	{r4, lr}
 80052d6:	4802      	ldr	r0, [pc, #8]	; (80052e0 <__sfp_lock_acquire+0xc>)
 80052d8:	f000 f8d2 	bl	8005480 <__retarget_lock_acquire_recursive>
 80052dc:	bd10      	pop	{r4, pc}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	200004b5 	.word	0x200004b5

080052e4 <__sfp_lock_release>:
 80052e4:	b510      	push	{r4, lr}
 80052e6:	4802      	ldr	r0, [pc, #8]	; (80052f0 <__sfp_lock_release+0xc>)
 80052e8:	f000 f8cb 	bl	8005482 <__retarget_lock_release_recursive>
 80052ec:	bd10      	pop	{r4, pc}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	200004b5 	.word	0x200004b5

080052f4 <__sinit>:
 80052f4:	b510      	push	{r4, lr}
 80052f6:	0004      	movs	r4, r0
 80052f8:	f7ff ffec 	bl	80052d4 <__sfp_lock_acquire>
 80052fc:	6a23      	ldr	r3, [r4, #32]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <__sinit+0x14>
 8005302:	f7ff ffef 	bl	80052e4 <__sfp_lock_release>
 8005306:	bd10      	pop	{r4, pc}
 8005308:	4b04      	ldr	r3, [pc, #16]	; (800531c <__sinit+0x28>)
 800530a:	6223      	str	r3, [r4, #32]
 800530c:	4b04      	ldr	r3, [pc, #16]	; (8005320 <__sinit+0x2c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1f6      	bne.n	8005302 <__sinit+0xe>
 8005314:	f7ff ffc0 	bl	8005298 <global_stdio_init.part.0>
 8005318:	e7f3      	b.n	8005302 <__sinit+0xe>
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	0800525d 	.word	0x0800525d
 8005320:	200004b0 	.word	0x200004b0

08005324 <_fwalk_sglue>:
 8005324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005326:	0014      	movs	r4, r2
 8005328:	2600      	movs	r6, #0
 800532a:	9000      	str	r0, [sp, #0]
 800532c:	9101      	str	r1, [sp, #4]
 800532e:	68a5      	ldr	r5, [r4, #8]
 8005330:	6867      	ldr	r7, [r4, #4]
 8005332:	3f01      	subs	r7, #1
 8005334:	d504      	bpl.n	8005340 <_fwalk_sglue+0x1c>
 8005336:	6824      	ldr	r4, [r4, #0]
 8005338:	2c00      	cmp	r4, #0
 800533a:	d1f8      	bne.n	800532e <_fwalk_sglue+0xa>
 800533c:	0030      	movs	r0, r6
 800533e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005340:	89ab      	ldrh	r3, [r5, #12]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d908      	bls.n	8005358 <_fwalk_sglue+0x34>
 8005346:	220e      	movs	r2, #14
 8005348:	5eab      	ldrsh	r3, [r5, r2]
 800534a:	3301      	adds	r3, #1
 800534c:	d004      	beq.n	8005358 <_fwalk_sglue+0x34>
 800534e:	0029      	movs	r1, r5
 8005350:	9800      	ldr	r0, [sp, #0]
 8005352:	9b01      	ldr	r3, [sp, #4]
 8005354:	4798      	blx	r3
 8005356:	4306      	orrs	r6, r0
 8005358:	3568      	adds	r5, #104	; 0x68
 800535a:	e7ea      	b.n	8005332 <_fwalk_sglue+0xe>

0800535c <_puts_r>:
 800535c:	6a03      	ldr	r3, [r0, #32]
 800535e:	b570      	push	{r4, r5, r6, lr}
 8005360:	0005      	movs	r5, r0
 8005362:	000e      	movs	r6, r1
 8005364:	6884      	ldr	r4, [r0, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <_puts_r+0x12>
 800536a:	f7ff ffc3 	bl	80052f4 <__sinit>
 800536e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005370:	07db      	lsls	r3, r3, #31
 8005372:	d405      	bmi.n	8005380 <_puts_r+0x24>
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	059b      	lsls	r3, r3, #22
 8005378:	d402      	bmi.n	8005380 <_puts_r+0x24>
 800537a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800537c:	f000 f880 	bl	8005480 <__retarget_lock_acquire_recursive>
 8005380:	89a3      	ldrh	r3, [r4, #12]
 8005382:	071b      	lsls	r3, r3, #28
 8005384:	d502      	bpl.n	800538c <_puts_r+0x30>
 8005386:	6923      	ldr	r3, [r4, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d11f      	bne.n	80053cc <_puts_r+0x70>
 800538c:	0021      	movs	r1, r4
 800538e:	0028      	movs	r0, r5
 8005390:	f000 fa70 	bl	8005874 <__swsetup_r>
 8005394:	2800      	cmp	r0, #0
 8005396:	d019      	beq.n	80053cc <_puts_r+0x70>
 8005398:	2501      	movs	r5, #1
 800539a:	426d      	negs	r5, r5
 800539c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800539e:	07db      	lsls	r3, r3, #31
 80053a0:	d405      	bmi.n	80053ae <_puts_r+0x52>
 80053a2:	89a3      	ldrh	r3, [r4, #12]
 80053a4:	059b      	lsls	r3, r3, #22
 80053a6:	d402      	bmi.n	80053ae <_puts_r+0x52>
 80053a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053aa:	f000 f86a 	bl	8005482 <__retarget_lock_release_recursive>
 80053ae:	0028      	movs	r0, r5
 80053b0:	bd70      	pop	{r4, r5, r6, pc}
 80053b2:	3601      	adds	r6, #1
 80053b4:	60a3      	str	r3, [r4, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	da04      	bge.n	80053c4 <_puts_r+0x68>
 80053ba:	69a2      	ldr	r2, [r4, #24]
 80053bc:	429a      	cmp	r2, r3
 80053be:	dc16      	bgt.n	80053ee <_puts_r+0x92>
 80053c0:	290a      	cmp	r1, #10
 80053c2:	d014      	beq.n	80053ee <_puts_r+0x92>
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	6022      	str	r2, [r4, #0]
 80053ca:	7019      	strb	r1, [r3, #0]
 80053cc:	68a3      	ldr	r3, [r4, #8]
 80053ce:	7831      	ldrb	r1, [r6, #0]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	2900      	cmp	r1, #0
 80053d4:	d1ed      	bne.n	80053b2 <_puts_r+0x56>
 80053d6:	60a3      	str	r3, [r4, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	da0f      	bge.n	80053fc <_puts_r+0xa0>
 80053dc:	0028      	movs	r0, r5
 80053de:	0022      	movs	r2, r4
 80053e0:	310a      	adds	r1, #10
 80053e2:	f000 fa05 	bl	80057f0 <__swbuf_r>
 80053e6:	250a      	movs	r5, #10
 80053e8:	3001      	adds	r0, #1
 80053ea:	d1d7      	bne.n	800539c <_puts_r+0x40>
 80053ec:	e7d4      	b.n	8005398 <_puts_r+0x3c>
 80053ee:	0022      	movs	r2, r4
 80053f0:	0028      	movs	r0, r5
 80053f2:	f000 f9fd 	bl	80057f0 <__swbuf_r>
 80053f6:	3001      	adds	r0, #1
 80053f8:	d1e8      	bne.n	80053cc <_puts_r+0x70>
 80053fa:	e7cd      	b.n	8005398 <_puts_r+0x3c>
 80053fc:	250a      	movs	r5, #10
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	6022      	str	r2, [r4, #0]
 8005404:	701d      	strb	r5, [r3, #0]
 8005406:	e7c9      	b.n	800539c <_puts_r+0x40>

08005408 <puts>:
 8005408:	b510      	push	{r4, lr}
 800540a:	4b03      	ldr	r3, [pc, #12]	; (8005418 <puts+0x10>)
 800540c:	0001      	movs	r1, r0
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	f7ff ffa4 	bl	800535c <_puts_r>
 8005414:	bd10      	pop	{r4, pc}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	20000064 	.word	0x20000064

0800541c <memset>:
 800541c:	0003      	movs	r3, r0
 800541e:	1882      	adds	r2, r0, r2
 8005420:	4293      	cmp	r3, r2
 8005422:	d100      	bne.n	8005426 <memset+0xa>
 8005424:	4770      	bx	lr
 8005426:	7019      	strb	r1, [r3, #0]
 8005428:	3301      	adds	r3, #1
 800542a:	e7f9      	b.n	8005420 <memset+0x4>

0800542c <__errno>:
 800542c:	4b01      	ldr	r3, [pc, #4]	; (8005434 <__errno+0x8>)
 800542e:	6818      	ldr	r0, [r3, #0]
 8005430:	4770      	bx	lr
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	20000064 	.word	0x20000064

08005438 <__libc_init_array>:
 8005438:	b570      	push	{r4, r5, r6, lr}
 800543a:	2600      	movs	r6, #0
 800543c:	4c0c      	ldr	r4, [pc, #48]	; (8005470 <__libc_init_array+0x38>)
 800543e:	4d0d      	ldr	r5, [pc, #52]	; (8005474 <__libc_init_array+0x3c>)
 8005440:	1b64      	subs	r4, r4, r5
 8005442:	10a4      	asrs	r4, r4, #2
 8005444:	42a6      	cmp	r6, r4
 8005446:	d109      	bne.n	800545c <__libc_init_array+0x24>
 8005448:	2600      	movs	r6, #0
 800544a:	f000 fbab 	bl	8005ba4 <_init>
 800544e:	4c0a      	ldr	r4, [pc, #40]	; (8005478 <__libc_init_array+0x40>)
 8005450:	4d0a      	ldr	r5, [pc, #40]	; (800547c <__libc_init_array+0x44>)
 8005452:	1b64      	subs	r4, r4, r5
 8005454:	10a4      	asrs	r4, r4, #2
 8005456:	42a6      	cmp	r6, r4
 8005458:	d105      	bne.n	8005466 <__libc_init_array+0x2e>
 800545a:	bd70      	pop	{r4, r5, r6, pc}
 800545c:	00b3      	lsls	r3, r6, #2
 800545e:	58eb      	ldr	r3, [r5, r3]
 8005460:	4798      	blx	r3
 8005462:	3601      	adds	r6, #1
 8005464:	e7ee      	b.n	8005444 <__libc_init_array+0xc>
 8005466:	00b3      	lsls	r3, r6, #2
 8005468:	58eb      	ldr	r3, [r5, r3]
 800546a:	4798      	blx	r3
 800546c:	3601      	adds	r6, #1
 800546e:	e7f2      	b.n	8005456 <__libc_init_array+0x1e>
 8005470:	08005e08 	.word	0x08005e08
 8005474:	08005e08 	.word	0x08005e08
 8005478:	08005e0c 	.word	0x08005e0c
 800547c:	08005e08 	.word	0x08005e08

08005480 <__retarget_lock_acquire_recursive>:
 8005480:	4770      	bx	lr

08005482 <__retarget_lock_release_recursive>:
 8005482:	4770      	bx	lr

08005484 <sbrk_aligned>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	4e0f      	ldr	r6, [pc, #60]	; (80054c4 <sbrk_aligned+0x40>)
 8005488:	000d      	movs	r5, r1
 800548a:	6831      	ldr	r1, [r6, #0]
 800548c:	0004      	movs	r4, r0
 800548e:	2900      	cmp	r1, #0
 8005490:	d102      	bne.n	8005498 <sbrk_aligned+0x14>
 8005492:	f000 fb17 	bl	8005ac4 <_sbrk_r>
 8005496:	6030      	str	r0, [r6, #0]
 8005498:	0029      	movs	r1, r5
 800549a:	0020      	movs	r0, r4
 800549c:	f000 fb12 	bl	8005ac4 <_sbrk_r>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d00a      	beq.n	80054ba <sbrk_aligned+0x36>
 80054a4:	2303      	movs	r3, #3
 80054a6:	1cc5      	adds	r5, r0, #3
 80054a8:	439d      	bics	r5, r3
 80054aa:	42a8      	cmp	r0, r5
 80054ac:	d007      	beq.n	80054be <sbrk_aligned+0x3a>
 80054ae:	1a29      	subs	r1, r5, r0
 80054b0:	0020      	movs	r0, r4
 80054b2:	f000 fb07 	bl	8005ac4 <_sbrk_r>
 80054b6:	3001      	adds	r0, #1
 80054b8:	d101      	bne.n	80054be <sbrk_aligned+0x3a>
 80054ba:	2501      	movs	r5, #1
 80054bc:	426d      	negs	r5, r5
 80054be:	0028      	movs	r0, r5
 80054c0:	bd70      	pop	{r4, r5, r6, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	200004bc 	.word	0x200004bc

080054c8 <_malloc_r>:
 80054c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ca:	2203      	movs	r2, #3
 80054cc:	1ccb      	adds	r3, r1, #3
 80054ce:	4393      	bics	r3, r2
 80054d0:	3308      	adds	r3, #8
 80054d2:	0006      	movs	r6, r0
 80054d4:	001f      	movs	r7, r3
 80054d6:	2b0c      	cmp	r3, #12
 80054d8:	d238      	bcs.n	800554c <_malloc_r+0x84>
 80054da:	270c      	movs	r7, #12
 80054dc:	42b9      	cmp	r1, r7
 80054de:	d837      	bhi.n	8005550 <_malloc_r+0x88>
 80054e0:	0030      	movs	r0, r6
 80054e2:	f000 f929 	bl	8005738 <__malloc_lock>
 80054e6:	4b38      	ldr	r3, [pc, #224]	; (80055c8 <_malloc_r+0x100>)
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	001c      	movs	r4, r3
 80054ee:	2c00      	cmp	r4, #0
 80054f0:	d133      	bne.n	800555a <_malloc_r+0x92>
 80054f2:	0039      	movs	r1, r7
 80054f4:	0030      	movs	r0, r6
 80054f6:	f7ff ffc5 	bl	8005484 <sbrk_aligned>
 80054fa:	0004      	movs	r4, r0
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d15e      	bne.n	80055be <_malloc_r+0xf6>
 8005500:	9b00      	ldr	r3, [sp, #0]
 8005502:	681c      	ldr	r4, [r3, #0]
 8005504:	0025      	movs	r5, r4
 8005506:	2d00      	cmp	r5, #0
 8005508:	d14e      	bne.n	80055a8 <_malloc_r+0xe0>
 800550a:	2c00      	cmp	r4, #0
 800550c:	d051      	beq.n	80055b2 <_malloc_r+0xea>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	0029      	movs	r1, r5
 8005512:	18e3      	adds	r3, r4, r3
 8005514:	0030      	movs	r0, r6
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	f000 fad4 	bl	8005ac4 <_sbrk_r>
 800551c:	9b01      	ldr	r3, [sp, #4]
 800551e:	4283      	cmp	r3, r0
 8005520:	d147      	bne.n	80055b2 <_malloc_r+0xea>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	0030      	movs	r0, r6
 8005526:	1aff      	subs	r7, r7, r3
 8005528:	0039      	movs	r1, r7
 800552a:	f7ff ffab 	bl	8005484 <sbrk_aligned>
 800552e:	3001      	adds	r0, #1
 8005530:	d03f      	beq.n	80055b2 <_malloc_r+0xea>
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	19db      	adds	r3, r3, r7
 8005536:	6023      	str	r3, [r4, #0]
 8005538:	9b00      	ldr	r3, [sp, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d040      	beq.n	80055c2 <_malloc_r+0xfa>
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	42a2      	cmp	r2, r4
 8005544:	d133      	bne.n	80055ae <_malloc_r+0xe6>
 8005546:	2200      	movs	r2, #0
 8005548:	605a      	str	r2, [r3, #4]
 800554a:	e014      	b.n	8005576 <_malloc_r+0xae>
 800554c:	2b00      	cmp	r3, #0
 800554e:	dac5      	bge.n	80054dc <_malloc_r+0x14>
 8005550:	230c      	movs	r3, #12
 8005552:	2500      	movs	r5, #0
 8005554:	6033      	str	r3, [r6, #0]
 8005556:	0028      	movs	r0, r5
 8005558:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800555a:	6821      	ldr	r1, [r4, #0]
 800555c:	1bc9      	subs	r1, r1, r7
 800555e:	d420      	bmi.n	80055a2 <_malloc_r+0xda>
 8005560:	290b      	cmp	r1, #11
 8005562:	d918      	bls.n	8005596 <_malloc_r+0xce>
 8005564:	19e2      	adds	r2, r4, r7
 8005566:	6027      	str	r7, [r4, #0]
 8005568:	42a3      	cmp	r3, r4
 800556a:	d112      	bne.n	8005592 <_malloc_r+0xca>
 800556c:	9b00      	ldr	r3, [sp, #0]
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	6863      	ldr	r3, [r4, #4]
 8005572:	6011      	str	r1, [r2, #0]
 8005574:	6053      	str	r3, [r2, #4]
 8005576:	0030      	movs	r0, r6
 8005578:	0025      	movs	r5, r4
 800557a:	f000 f8e5 	bl	8005748 <__malloc_unlock>
 800557e:	2207      	movs	r2, #7
 8005580:	350b      	adds	r5, #11
 8005582:	1d23      	adds	r3, r4, #4
 8005584:	4395      	bics	r5, r2
 8005586:	1aea      	subs	r2, r5, r3
 8005588:	429d      	cmp	r5, r3
 800558a:	d0e4      	beq.n	8005556 <_malloc_r+0x8e>
 800558c:	1b5b      	subs	r3, r3, r5
 800558e:	50a3      	str	r3, [r4, r2]
 8005590:	e7e1      	b.n	8005556 <_malloc_r+0x8e>
 8005592:	605a      	str	r2, [r3, #4]
 8005594:	e7ec      	b.n	8005570 <_malloc_r+0xa8>
 8005596:	6862      	ldr	r2, [r4, #4]
 8005598:	42a3      	cmp	r3, r4
 800559a:	d1d5      	bne.n	8005548 <_malloc_r+0x80>
 800559c:	9b00      	ldr	r3, [sp, #0]
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	e7e9      	b.n	8005576 <_malloc_r+0xae>
 80055a2:	0023      	movs	r3, r4
 80055a4:	6864      	ldr	r4, [r4, #4]
 80055a6:	e7a2      	b.n	80054ee <_malloc_r+0x26>
 80055a8:	002c      	movs	r4, r5
 80055aa:	686d      	ldr	r5, [r5, #4]
 80055ac:	e7ab      	b.n	8005506 <_malloc_r+0x3e>
 80055ae:	0013      	movs	r3, r2
 80055b0:	e7c4      	b.n	800553c <_malloc_r+0x74>
 80055b2:	230c      	movs	r3, #12
 80055b4:	0030      	movs	r0, r6
 80055b6:	6033      	str	r3, [r6, #0]
 80055b8:	f000 f8c6 	bl	8005748 <__malloc_unlock>
 80055bc:	e7cb      	b.n	8005556 <_malloc_r+0x8e>
 80055be:	6027      	str	r7, [r4, #0]
 80055c0:	e7d9      	b.n	8005576 <_malloc_r+0xae>
 80055c2:	605b      	str	r3, [r3, #4]
 80055c4:	deff      	udf	#255	; 0xff
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	200004b8 	.word	0x200004b8

080055cc <__sflush_r>:
 80055cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055ce:	898b      	ldrh	r3, [r1, #12]
 80055d0:	0005      	movs	r5, r0
 80055d2:	000c      	movs	r4, r1
 80055d4:	071a      	lsls	r2, r3, #28
 80055d6:	d45c      	bmi.n	8005692 <__sflush_r+0xc6>
 80055d8:	684a      	ldr	r2, [r1, #4]
 80055da:	2a00      	cmp	r2, #0
 80055dc:	dc04      	bgt.n	80055e8 <__sflush_r+0x1c>
 80055de:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80055e0:	2a00      	cmp	r2, #0
 80055e2:	dc01      	bgt.n	80055e8 <__sflush_r+0x1c>
 80055e4:	2000      	movs	r0, #0
 80055e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055e8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80055ea:	2f00      	cmp	r7, #0
 80055ec:	d0fa      	beq.n	80055e4 <__sflush_r+0x18>
 80055ee:	2200      	movs	r2, #0
 80055f0:	2080      	movs	r0, #128	; 0x80
 80055f2:	682e      	ldr	r6, [r5, #0]
 80055f4:	602a      	str	r2, [r5, #0]
 80055f6:	001a      	movs	r2, r3
 80055f8:	0140      	lsls	r0, r0, #5
 80055fa:	6a21      	ldr	r1, [r4, #32]
 80055fc:	4002      	ands	r2, r0
 80055fe:	4203      	tst	r3, r0
 8005600:	d034      	beq.n	800566c <__sflush_r+0xa0>
 8005602:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005604:	89a3      	ldrh	r3, [r4, #12]
 8005606:	075b      	lsls	r3, r3, #29
 8005608:	d506      	bpl.n	8005618 <__sflush_r+0x4c>
 800560a:	6863      	ldr	r3, [r4, #4]
 800560c:	1ac0      	subs	r0, r0, r3
 800560e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <__sflush_r+0x4c>
 8005614:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005616:	1ac0      	subs	r0, r0, r3
 8005618:	0002      	movs	r2, r0
 800561a:	2300      	movs	r3, #0
 800561c:	0028      	movs	r0, r5
 800561e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005620:	6a21      	ldr	r1, [r4, #32]
 8005622:	47b8      	blx	r7
 8005624:	89a2      	ldrh	r2, [r4, #12]
 8005626:	1c43      	adds	r3, r0, #1
 8005628:	d106      	bne.n	8005638 <__sflush_r+0x6c>
 800562a:	6829      	ldr	r1, [r5, #0]
 800562c:	291d      	cmp	r1, #29
 800562e:	d82c      	bhi.n	800568a <__sflush_r+0xbe>
 8005630:	4b2a      	ldr	r3, [pc, #168]	; (80056dc <__sflush_r+0x110>)
 8005632:	410b      	asrs	r3, r1
 8005634:	07db      	lsls	r3, r3, #31
 8005636:	d428      	bmi.n	800568a <__sflush_r+0xbe>
 8005638:	2300      	movs	r3, #0
 800563a:	6063      	str	r3, [r4, #4]
 800563c:	6923      	ldr	r3, [r4, #16]
 800563e:	6023      	str	r3, [r4, #0]
 8005640:	04d2      	lsls	r2, r2, #19
 8005642:	d505      	bpl.n	8005650 <__sflush_r+0x84>
 8005644:	1c43      	adds	r3, r0, #1
 8005646:	d102      	bne.n	800564e <__sflush_r+0x82>
 8005648:	682b      	ldr	r3, [r5, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d100      	bne.n	8005650 <__sflush_r+0x84>
 800564e:	6560      	str	r0, [r4, #84]	; 0x54
 8005650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005652:	602e      	str	r6, [r5, #0]
 8005654:	2900      	cmp	r1, #0
 8005656:	d0c5      	beq.n	80055e4 <__sflush_r+0x18>
 8005658:	0023      	movs	r3, r4
 800565a:	3344      	adds	r3, #68	; 0x44
 800565c:	4299      	cmp	r1, r3
 800565e:	d002      	beq.n	8005666 <__sflush_r+0x9a>
 8005660:	0028      	movs	r0, r5
 8005662:	f000 fa55 	bl	8005b10 <_free_r>
 8005666:	2000      	movs	r0, #0
 8005668:	6360      	str	r0, [r4, #52]	; 0x34
 800566a:	e7bc      	b.n	80055e6 <__sflush_r+0x1a>
 800566c:	2301      	movs	r3, #1
 800566e:	0028      	movs	r0, r5
 8005670:	47b8      	blx	r7
 8005672:	1c43      	adds	r3, r0, #1
 8005674:	d1c6      	bne.n	8005604 <__sflush_r+0x38>
 8005676:	682b      	ldr	r3, [r5, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0c3      	beq.n	8005604 <__sflush_r+0x38>
 800567c:	2b1d      	cmp	r3, #29
 800567e:	d001      	beq.n	8005684 <__sflush_r+0xb8>
 8005680:	2b16      	cmp	r3, #22
 8005682:	d101      	bne.n	8005688 <__sflush_r+0xbc>
 8005684:	602e      	str	r6, [r5, #0]
 8005686:	e7ad      	b.n	80055e4 <__sflush_r+0x18>
 8005688:	89a2      	ldrh	r2, [r4, #12]
 800568a:	2340      	movs	r3, #64	; 0x40
 800568c:	4313      	orrs	r3, r2
 800568e:	81a3      	strh	r3, [r4, #12]
 8005690:	e7a9      	b.n	80055e6 <__sflush_r+0x1a>
 8005692:	690e      	ldr	r6, [r1, #16]
 8005694:	2e00      	cmp	r6, #0
 8005696:	d0a5      	beq.n	80055e4 <__sflush_r+0x18>
 8005698:	680f      	ldr	r7, [r1, #0]
 800569a:	600e      	str	r6, [r1, #0]
 800569c:	1bba      	subs	r2, r7, r6
 800569e:	9201      	str	r2, [sp, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	079b      	lsls	r3, r3, #30
 80056a4:	d100      	bne.n	80056a8 <__sflush_r+0xdc>
 80056a6:	694a      	ldr	r2, [r1, #20]
 80056a8:	60a2      	str	r2, [r4, #8]
 80056aa:	9b01      	ldr	r3, [sp, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	dd99      	ble.n	80055e4 <__sflush_r+0x18>
 80056b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80056b2:	0032      	movs	r2, r6
 80056b4:	001f      	movs	r7, r3
 80056b6:	0028      	movs	r0, r5
 80056b8:	9b01      	ldr	r3, [sp, #4]
 80056ba:	6a21      	ldr	r1, [r4, #32]
 80056bc:	47b8      	blx	r7
 80056be:	2800      	cmp	r0, #0
 80056c0:	dc06      	bgt.n	80056d0 <__sflush_r+0x104>
 80056c2:	2340      	movs	r3, #64	; 0x40
 80056c4:	2001      	movs	r0, #1
 80056c6:	89a2      	ldrh	r2, [r4, #12]
 80056c8:	4240      	negs	r0, r0
 80056ca:	4313      	orrs	r3, r2
 80056cc:	81a3      	strh	r3, [r4, #12]
 80056ce:	e78a      	b.n	80055e6 <__sflush_r+0x1a>
 80056d0:	9b01      	ldr	r3, [sp, #4]
 80056d2:	1836      	adds	r6, r6, r0
 80056d4:	1a1b      	subs	r3, r3, r0
 80056d6:	9301      	str	r3, [sp, #4]
 80056d8:	e7e7      	b.n	80056aa <__sflush_r+0xde>
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	dfbffffe 	.word	0xdfbffffe

080056e0 <_fflush_r>:
 80056e0:	690b      	ldr	r3, [r1, #16]
 80056e2:	b570      	push	{r4, r5, r6, lr}
 80056e4:	0005      	movs	r5, r0
 80056e6:	000c      	movs	r4, r1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d102      	bne.n	80056f2 <_fflush_r+0x12>
 80056ec:	2500      	movs	r5, #0
 80056ee:	0028      	movs	r0, r5
 80056f0:	bd70      	pop	{r4, r5, r6, pc}
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d004      	beq.n	8005700 <_fflush_r+0x20>
 80056f6:	6a03      	ldr	r3, [r0, #32]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <_fflush_r+0x20>
 80056fc:	f7ff fdfa 	bl	80052f4 <__sinit>
 8005700:	220c      	movs	r2, #12
 8005702:	5ea3      	ldrsh	r3, [r4, r2]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0f1      	beq.n	80056ec <_fflush_r+0xc>
 8005708:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800570a:	07d2      	lsls	r2, r2, #31
 800570c:	d404      	bmi.n	8005718 <_fflush_r+0x38>
 800570e:	059b      	lsls	r3, r3, #22
 8005710:	d402      	bmi.n	8005718 <_fflush_r+0x38>
 8005712:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005714:	f7ff feb4 	bl	8005480 <__retarget_lock_acquire_recursive>
 8005718:	0028      	movs	r0, r5
 800571a:	0021      	movs	r1, r4
 800571c:	f7ff ff56 	bl	80055cc <__sflush_r>
 8005720:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005722:	0005      	movs	r5, r0
 8005724:	07db      	lsls	r3, r3, #31
 8005726:	d4e2      	bmi.n	80056ee <_fflush_r+0xe>
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	059b      	lsls	r3, r3, #22
 800572c:	d4df      	bmi.n	80056ee <_fflush_r+0xe>
 800572e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005730:	f7ff fea7 	bl	8005482 <__retarget_lock_release_recursive>
 8005734:	e7db      	b.n	80056ee <_fflush_r+0xe>
	...

08005738 <__malloc_lock>:
 8005738:	b510      	push	{r4, lr}
 800573a:	4802      	ldr	r0, [pc, #8]	; (8005744 <__malloc_lock+0xc>)
 800573c:	f7ff fea0 	bl	8005480 <__retarget_lock_acquire_recursive>
 8005740:	bd10      	pop	{r4, pc}
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	200004b4 	.word	0x200004b4

08005748 <__malloc_unlock>:
 8005748:	b510      	push	{r4, lr}
 800574a:	4802      	ldr	r0, [pc, #8]	; (8005754 <__malloc_unlock+0xc>)
 800574c:	f7ff fe99 	bl	8005482 <__retarget_lock_release_recursive>
 8005750:	bd10      	pop	{r4, pc}
 8005752:	46c0      	nop			; (mov r8, r8)
 8005754:	200004b4 	.word	0x200004b4

08005758 <__sread>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	000c      	movs	r4, r1
 800575c:	250e      	movs	r5, #14
 800575e:	5f49      	ldrsh	r1, [r1, r5]
 8005760:	f000 f99c 	bl	8005a9c <_read_r>
 8005764:	2800      	cmp	r0, #0
 8005766:	db03      	blt.n	8005770 <__sread+0x18>
 8005768:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800576a:	181b      	adds	r3, r3, r0
 800576c:	6563      	str	r3, [r4, #84]	; 0x54
 800576e:	bd70      	pop	{r4, r5, r6, pc}
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	4a02      	ldr	r2, [pc, #8]	; (800577c <__sread+0x24>)
 8005774:	4013      	ands	r3, r2
 8005776:	81a3      	strh	r3, [r4, #12]
 8005778:	e7f9      	b.n	800576e <__sread+0x16>
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	ffffefff 	.word	0xffffefff

08005780 <__swrite>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	001f      	movs	r7, r3
 8005784:	898b      	ldrh	r3, [r1, #12]
 8005786:	0005      	movs	r5, r0
 8005788:	000c      	movs	r4, r1
 800578a:	0016      	movs	r6, r2
 800578c:	05db      	lsls	r3, r3, #23
 800578e:	d505      	bpl.n	800579c <__swrite+0x1c>
 8005790:	230e      	movs	r3, #14
 8005792:	5ec9      	ldrsh	r1, [r1, r3]
 8005794:	2200      	movs	r2, #0
 8005796:	2302      	movs	r3, #2
 8005798:	f000 f96c 	bl	8005a74 <_lseek_r>
 800579c:	89a3      	ldrh	r3, [r4, #12]
 800579e:	4a05      	ldr	r2, [pc, #20]	; (80057b4 <__swrite+0x34>)
 80057a0:	0028      	movs	r0, r5
 80057a2:	4013      	ands	r3, r2
 80057a4:	81a3      	strh	r3, [r4, #12]
 80057a6:	0032      	movs	r2, r6
 80057a8:	230e      	movs	r3, #14
 80057aa:	5ee1      	ldrsh	r1, [r4, r3]
 80057ac:	003b      	movs	r3, r7
 80057ae:	f000 f99b 	bl	8005ae8 <_write_r>
 80057b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b4:	ffffefff 	.word	0xffffefff

080057b8 <__sseek>:
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	000c      	movs	r4, r1
 80057bc:	250e      	movs	r5, #14
 80057be:	5f49      	ldrsh	r1, [r1, r5]
 80057c0:	f000 f958 	bl	8005a74 <_lseek_r>
 80057c4:	89a3      	ldrh	r3, [r4, #12]
 80057c6:	1c42      	adds	r2, r0, #1
 80057c8:	d103      	bne.n	80057d2 <__sseek+0x1a>
 80057ca:	4a05      	ldr	r2, [pc, #20]	; (80057e0 <__sseek+0x28>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	81a3      	strh	r3, [r4, #12]
 80057d0:	bd70      	pop	{r4, r5, r6, pc}
 80057d2:	2280      	movs	r2, #128	; 0x80
 80057d4:	0152      	lsls	r2, r2, #5
 80057d6:	4313      	orrs	r3, r2
 80057d8:	81a3      	strh	r3, [r4, #12]
 80057da:	6560      	str	r0, [r4, #84]	; 0x54
 80057dc:	e7f8      	b.n	80057d0 <__sseek+0x18>
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	ffffefff 	.word	0xffffefff

080057e4 <__sclose>:
 80057e4:	b510      	push	{r4, lr}
 80057e6:	230e      	movs	r3, #14
 80057e8:	5ec9      	ldrsh	r1, [r1, r3]
 80057ea:	f000 f90d 	bl	8005a08 <_close_r>
 80057ee:	bd10      	pop	{r4, pc}

080057f0 <__swbuf_r>:
 80057f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f2:	0006      	movs	r6, r0
 80057f4:	000d      	movs	r5, r1
 80057f6:	0014      	movs	r4, r2
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d004      	beq.n	8005806 <__swbuf_r+0x16>
 80057fc:	6a03      	ldr	r3, [r0, #32]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <__swbuf_r+0x16>
 8005802:	f7ff fd77 	bl	80052f4 <__sinit>
 8005806:	69a3      	ldr	r3, [r4, #24]
 8005808:	60a3      	str	r3, [r4, #8]
 800580a:	89a3      	ldrh	r3, [r4, #12]
 800580c:	071b      	lsls	r3, r3, #28
 800580e:	d528      	bpl.n	8005862 <__swbuf_r+0x72>
 8005810:	6923      	ldr	r3, [r4, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d025      	beq.n	8005862 <__swbuf_r+0x72>
 8005816:	6923      	ldr	r3, [r4, #16]
 8005818:	6820      	ldr	r0, [r4, #0]
 800581a:	b2ef      	uxtb	r7, r5
 800581c:	1ac0      	subs	r0, r0, r3
 800581e:	6963      	ldr	r3, [r4, #20]
 8005820:	b2ed      	uxtb	r5, r5
 8005822:	4283      	cmp	r3, r0
 8005824:	dc05      	bgt.n	8005832 <__swbuf_r+0x42>
 8005826:	0021      	movs	r1, r4
 8005828:	0030      	movs	r0, r6
 800582a:	f7ff ff59 	bl	80056e0 <_fflush_r>
 800582e:	2800      	cmp	r0, #0
 8005830:	d11d      	bne.n	800586e <__swbuf_r+0x7e>
 8005832:	68a3      	ldr	r3, [r4, #8]
 8005834:	3001      	adds	r0, #1
 8005836:	3b01      	subs	r3, #1
 8005838:	60a3      	str	r3, [r4, #8]
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	6022      	str	r2, [r4, #0]
 8005840:	701f      	strb	r7, [r3, #0]
 8005842:	6963      	ldr	r3, [r4, #20]
 8005844:	4283      	cmp	r3, r0
 8005846:	d004      	beq.n	8005852 <__swbuf_r+0x62>
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	07db      	lsls	r3, r3, #31
 800584c:	d507      	bpl.n	800585e <__swbuf_r+0x6e>
 800584e:	2d0a      	cmp	r5, #10
 8005850:	d105      	bne.n	800585e <__swbuf_r+0x6e>
 8005852:	0021      	movs	r1, r4
 8005854:	0030      	movs	r0, r6
 8005856:	f7ff ff43 	bl	80056e0 <_fflush_r>
 800585a:	2800      	cmp	r0, #0
 800585c:	d107      	bne.n	800586e <__swbuf_r+0x7e>
 800585e:	0028      	movs	r0, r5
 8005860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005862:	0021      	movs	r1, r4
 8005864:	0030      	movs	r0, r6
 8005866:	f000 f805 	bl	8005874 <__swsetup_r>
 800586a:	2800      	cmp	r0, #0
 800586c:	d0d3      	beq.n	8005816 <__swbuf_r+0x26>
 800586e:	2501      	movs	r5, #1
 8005870:	426d      	negs	r5, r5
 8005872:	e7f4      	b.n	800585e <__swbuf_r+0x6e>

08005874 <__swsetup_r>:
 8005874:	4b30      	ldr	r3, [pc, #192]	; (8005938 <__swsetup_r+0xc4>)
 8005876:	b570      	push	{r4, r5, r6, lr}
 8005878:	0005      	movs	r5, r0
 800587a:	6818      	ldr	r0, [r3, #0]
 800587c:	000c      	movs	r4, r1
 800587e:	2800      	cmp	r0, #0
 8005880:	d004      	beq.n	800588c <__swsetup_r+0x18>
 8005882:	6a03      	ldr	r3, [r0, #32]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <__swsetup_r+0x18>
 8005888:	f7ff fd34 	bl	80052f4 <__sinit>
 800588c:	230c      	movs	r3, #12
 800588e:	5ee2      	ldrsh	r2, [r4, r3]
 8005890:	b293      	uxth	r3, r2
 8005892:	0711      	lsls	r1, r2, #28
 8005894:	d423      	bmi.n	80058de <__swsetup_r+0x6a>
 8005896:	06d9      	lsls	r1, r3, #27
 8005898:	d407      	bmi.n	80058aa <__swsetup_r+0x36>
 800589a:	2309      	movs	r3, #9
 800589c:	2001      	movs	r0, #1
 800589e:	602b      	str	r3, [r5, #0]
 80058a0:	3337      	adds	r3, #55	; 0x37
 80058a2:	4313      	orrs	r3, r2
 80058a4:	81a3      	strh	r3, [r4, #12]
 80058a6:	4240      	negs	r0, r0
 80058a8:	bd70      	pop	{r4, r5, r6, pc}
 80058aa:	075b      	lsls	r3, r3, #29
 80058ac:	d513      	bpl.n	80058d6 <__swsetup_r+0x62>
 80058ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058b0:	2900      	cmp	r1, #0
 80058b2:	d008      	beq.n	80058c6 <__swsetup_r+0x52>
 80058b4:	0023      	movs	r3, r4
 80058b6:	3344      	adds	r3, #68	; 0x44
 80058b8:	4299      	cmp	r1, r3
 80058ba:	d002      	beq.n	80058c2 <__swsetup_r+0x4e>
 80058bc:	0028      	movs	r0, r5
 80058be:	f000 f927 	bl	8005b10 <_free_r>
 80058c2:	2300      	movs	r3, #0
 80058c4:	6363      	str	r3, [r4, #52]	; 0x34
 80058c6:	2224      	movs	r2, #36	; 0x24
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	4393      	bics	r3, r2
 80058cc:	81a3      	strh	r3, [r4, #12]
 80058ce:	2300      	movs	r3, #0
 80058d0:	6063      	str	r3, [r4, #4]
 80058d2:	6923      	ldr	r3, [r4, #16]
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	2308      	movs	r3, #8
 80058d8:	89a2      	ldrh	r2, [r4, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	81a3      	strh	r3, [r4, #12]
 80058de:	6923      	ldr	r3, [r4, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10b      	bne.n	80058fc <__swsetup_r+0x88>
 80058e4:	21a0      	movs	r1, #160	; 0xa0
 80058e6:	2280      	movs	r2, #128	; 0x80
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	0089      	lsls	r1, r1, #2
 80058ec:	0092      	lsls	r2, r2, #2
 80058ee:	400b      	ands	r3, r1
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <__swsetup_r+0x88>
 80058f4:	0021      	movs	r1, r4
 80058f6:	0028      	movs	r0, r5
 80058f8:	f000 f848 	bl	800598c <__smakebuf_r>
 80058fc:	220c      	movs	r2, #12
 80058fe:	5ea3      	ldrsh	r3, [r4, r2]
 8005900:	2001      	movs	r0, #1
 8005902:	001a      	movs	r2, r3
 8005904:	b299      	uxth	r1, r3
 8005906:	4002      	ands	r2, r0
 8005908:	4203      	tst	r3, r0
 800590a:	d00f      	beq.n	800592c <__swsetup_r+0xb8>
 800590c:	2200      	movs	r2, #0
 800590e:	60a2      	str	r2, [r4, #8]
 8005910:	6962      	ldr	r2, [r4, #20]
 8005912:	4252      	negs	r2, r2
 8005914:	61a2      	str	r2, [r4, #24]
 8005916:	2000      	movs	r0, #0
 8005918:	6922      	ldr	r2, [r4, #16]
 800591a:	4282      	cmp	r2, r0
 800591c:	d1c4      	bne.n	80058a8 <__swsetup_r+0x34>
 800591e:	0609      	lsls	r1, r1, #24
 8005920:	d5c2      	bpl.n	80058a8 <__swsetup_r+0x34>
 8005922:	2240      	movs	r2, #64	; 0x40
 8005924:	4313      	orrs	r3, r2
 8005926:	81a3      	strh	r3, [r4, #12]
 8005928:	3801      	subs	r0, #1
 800592a:	e7bd      	b.n	80058a8 <__swsetup_r+0x34>
 800592c:	0788      	lsls	r0, r1, #30
 800592e:	d400      	bmi.n	8005932 <__swsetup_r+0xbe>
 8005930:	6962      	ldr	r2, [r4, #20]
 8005932:	60a2      	str	r2, [r4, #8]
 8005934:	e7ef      	b.n	8005916 <__swsetup_r+0xa2>
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	20000064 	.word	0x20000064

0800593c <__swhatbuf_r>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	000e      	movs	r6, r1
 8005940:	001d      	movs	r5, r3
 8005942:	230e      	movs	r3, #14
 8005944:	5ec9      	ldrsh	r1, [r1, r3]
 8005946:	0014      	movs	r4, r2
 8005948:	b096      	sub	sp, #88	; 0x58
 800594a:	2900      	cmp	r1, #0
 800594c:	da0c      	bge.n	8005968 <__swhatbuf_r+0x2c>
 800594e:	89b2      	ldrh	r2, [r6, #12]
 8005950:	2380      	movs	r3, #128	; 0x80
 8005952:	0011      	movs	r1, r2
 8005954:	4019      	ands	r1, r3
 8005956:	421a      	tst	r2, r3
 8005958:	d013      	beq.n	8005982 <__swhatbuf_r+0x46>
 800595a:	2100      	movs	r1, #0
 800595c:	3b40      	subs	r3, #64	; 0x40
 800595e:	2000      	movs	r0, #0
 8005960:	6029      	str	r1, [r5, #0]
 8005962:	6023      	str	r3, [r4, #0]
 8005964:	b016      	add	sp, #88	; 0x58
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	466a      	mov	r2, sp
 800596a:	f000 f85f 	bl	8005a2c <_fstat_r>
 800596e:	2800      	cmp	r0, #0
 8005970:	dbed      	blt.n	800594e <__swhatbuf_r+0x12>
 8005972:	23f0      	movs	r3, #240	; 0xf0
 8005974:	9901      	ldr	r1, [sp, #4]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	4019      	ands	r1, r3
 800597a:	4b03      	ldr	r3, [pc, #12]	; (8005988 <__swhatbuf_r+0x4c>)
 800597c:	18c9      	adds	r1, r1, r3
 800597e:	424b      	negs	r3, r1
 8005980:	4159      	adcs	r1, r3
 8005982:	2380      	movs	r3, #128	; 0x80
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	e7ea      	b.n	800595e <__swhatbuf_r+0x22>
 8005988:	ffffe000 	.word	0xffffe000

0800598c <__smakebuf_r>:
 800598c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800598e:	2602      	movs	r6, #2
 8005990:	898b      	ldrh	r3, [r1, #12]
 8005992:	0005      	movs	r5, r0
 8005994:	000c      	movs	r4, r1
 8005996:	4233      	tst	r3, r6
 8005998:	d006      	beq.n	80059a8 <__smakebuf_r+0x1c>
 800599a:	0023      	movs	r3, r4
 800599c:	3347      	adds	r3, #71	; 0x47
 800599e:	6023      	str	r3, [r4, #0]
 80059a0:	6123      	str	r3, [r4, #16]
 80059a2:	2301      	movs	r3, #1
 80059a4:	6163      	str	r3, [r4, #20]
 80059a6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80059a8:	466a      	mov	r2, sp
 80059aa:	ab01      	add	r3, sp, #4
 80059ac:	f7ff ffc6 	bl	800593c <__swhatbuf_r>
 80059b0:	9900      	ldr	r1, [sp, #0]
 80059b2:	0007      	movs	r7, r0
 80059b4:	0028      	movs	r0, r5
 80059b6:	f7ff fd87 	bl	80054c8 <_malloc_r>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d108      	bne.n	80059d0 <__smakebuf_r+0x44>
 80059be:	220c      	movs	r2, #12
 80059c0:	5ea3      	ldrsh	r3, [r4, r2]
 80059c2:	059a      	lsls	r2, r3, #22
 80059c4:	d4ef      	bmi.n	80059a6 <__smakebuf_r+0x1a>
 80059c6:	2203      	movs	r2, #3
 80059c8:	4393      	bics	r3, r2
 80059ca:	431e      	orrs	r6, r3
 80059cc:	81a6      	strh	r6, [r4, #12]
 80059ce:	e7e4      	b.n	800599a <__smakebuf_r+0xe>
 80059d0:	2380      	movs	r3, #128	; 0x80
 80059d2:	89a2      	ldrh	r2, [r4, #12]
 80059d4:	6020      	str	r0, [r4, #0]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	81a3      	strh	r3, [r4, #12]
 80059da:	9b00      	ldr	r3, [sp, #0]
 80059dc:	6120      	str	r0, [r4, #16]
 80059de:	6163      	str	r3, [r4, #20]
 80059e0:	9b01      	ldr	r3, [sp, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00c      	beq.n	8005a00 <__smakebuf_r+0x74>
 80059e6:	0028      	movs	r0, r5
 80059e8:	230e      	movs	r3, #14
 80059ea:	5ee1      	ldrsh	r1, [r4, r3]
 80059ec:	f000 f830 	bl	8005a50 <_isatty_r>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d005      	beq.n	8005a00 <__smakebuf_r+0x74>
 80059f4:	2303      	movs	r3, #3
 80059f6:	89a2      	ldrh	r2, [r4, #12]
 80059f8:	439a      	bics	r2, r3
 80059fa:	3b02      	subs	r3, #2
 80059fc:	4313      	orrs	r3, r2
 80059fe:	81a3      	strh	r3, [r4, #12]
 8005a00:	89a3      	ldrh	r3, [r4, #12]
 8005a02:	433b      	orrs	r3, r7
 8005a04:	81a3      	strh	r3, [r4, #12]
 8005a06:	e7ce      	b.n	80059a6 <__smakebuf_r+0x1a>

08005a08 <_close_r>:
 8005a08:	2300      	movs	r3, #0
 8005a0a:	b570      	push	{r4, r5, r6, lr}
 8005a0c:	4d06      	ldr	r5, [pc, #24]	; (8005a28 <_close_r+0x20>)
 8005a0e:	0004      	movs	r4, r0
 8005a10:	0008      	movs	r0, r1
 8005a12:	602b      	str	r3, [r5, #0]
 8005a14:	f7fb fc52 	bl	80012bc <_close>
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	d103      	bne.n	8005a24 <_close_r+0x1c>
 8005a1c:	682b      	ldr	r3, [r5, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d000      	beq.n	8005a24 <_close_r+0x1c>
 8005a22:	6023      	str	r3, [r4, #0]
 8005a24:	bd70      	pop	{r4, r5, r6, pc}
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	200004c0 	.word	0x200004c0

08005a2c <_fstat_r>:
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	b570      	push	{r4, r5, r6, lr}
 8005a30:	4d06      	ldr	r5, [pc, #24]	; (8005a4c <_fstat_r+0x20>)
 8005a32:	0004      	movs	r4, r0
 8005a34:	0008      	movs	r0, r1
 8005a36:	0011      	movs	r1, r2
 8005a38:	602b      	str	r3, [r5, #0]
 8005a3a:	f7fb fc43 	bl	80012c4 <_fstat>
 8005a3e:	1c43      	adds	r3, r0, #1
 8005a40:	d103      	bne.n	8005a4a <_fstat_r+0x1e>
 8005a42:	682b      	ldr	r3, [r5, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d000      	beq.n	8005a4a <_fstat_r+0x1e>
 8005a48:	6023      	str	r3, [r4, #0]
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	200004c0 	.word	0x200004c0

08005a50 <_isatty_r>:
 8005a50:	2300      	movs	r3, #0
 8005a52:	b570      	push	{r4, r5, r6, lr}
 8005a54:	4d06      	ldr	r5, [pc, #24]	; (8005a70 <_isatty_r+0x20>)
 8005a56:	0004      	movs	r4, r0
 8005a58:	0008      	movs	r0, r1
 8005a5a:	602b      	str	r3, [r5, #0]
 8005a5c:	f7fb fc38 	bl	80012d0 <_isatty>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d103      	bne.n	8005a6c <_isatty_r+0x1c>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d000      	beq.n	8005a6c <_isatty_r+0x1c>
 8005a6a:	6023      	str	r3, [r4, #0]
 8005a6c:	bd70      	pop	{r4, r5, r6, pc}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	200004c0 	.word	0x200004c0

08005a74 <_lseek_r>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	0004      	movs	r4, r0
 8005a78:	0008      	movs	r0, r1
 8005a7a:	0011      	movs	r1, r2
 8005a7c:	001a      	movs	r2, r3
 8005a7e:	2300      	movs	r3, #0
 8005a80:	4d05      	ldr	r5, [pc, #20]	; (8005a98 <_lseek_r+0x24>)
 8005a82:	602b      	str	r3, [r5, #0]
 8005a84:	f7fb fc26 	bl	80012d4 <_lseek>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d103      	bne.n	8005a94 <_lseek_r+0x20>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d000      	beq.n	8005a94 <_lseek_r+0x20>
 8005a92:	6023      	str	r3, [r4, #0]
 8005a94:	bd70      	pop	{r4, r5, r6, pc}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	200004c0 	.word	0x200004c0

08005a9c <_read_r>:
 8005a9c:	b570      	push	{r4, r5, r6, lr}
 8005a9e:	0004      	movs	r4, r0
 8005aa0:	0008      	movs	r0, r1
 8005aa2:	0011      	movs	r1, r2
 8005aa4:	001a      	movs	r2, r3
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	4d05      	ldr	r5, [pc, #20]	; (8005ac0 <_read_r+0x24>)
 8005aaa:	602b      	str	r3, [r5, #0]
 8005aac:	f7fb fbea 	bl	8001284 <_read>
 8005ab0:	1c43      	adds	r3, r0, #1
 8005ab2:	d103      	bne.n	8005abc <_read_r+0x20>
 8005ab4:	682b      	ldr	r3, [r5, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d000      	beq.n	8005abc <_read_r+0x20>
 8005aba:	6023      	str	r3, [r4, #0]
 8005abc:	bd70      	pop	{r4, r5, r6, pc}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	200004c0 	.word	0x200004c0

08005ac4 <_sbrk_r>:
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	b570      	push	{r4, r5, r6, lr}
 8005ac8:	4d06      	ldr	r5, [pc, #24]	; (8005ae4 <_sbrk_r+0x20>)
 8005aca:	0004      	movs	r4, r0
 8005acc:	0008      	movs	r0, r1
 8005ace:	602b      	str	r3, [r5, #0]
 8005ad0:	f7fb fc02 	bl	80012d8 <_sbrk>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d103      	bne.n	8005ae0 <_sbrk_r+0x1c>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d000      	beq.n	8005ae0 <_sbrk_r+0x1c>
 8005ade:	6023      	str	r3, [r4, #0]
 8005ae0:	bd70      	pop	{r4, r5, r6, pc}
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	200004c0 	.word	0x200004c0

08005ae8 <_write_r>:
 8005ae8:	b570      	push	{r4, r5, r6, lr}
 8005aea:	0004      	movs	r4, r0
 8005aec:	0008      	movs	r0, r1
 8005aee:	0011      	movs	r1, r2
 8005af0:	001a      	movs	r2, r3
 8005af2:	2300      	movs	r3, #0
 8005af4:	4d05      	ldr	r5, [pc, #20]	; (8005b0c <_write_r+0x24>)
 8005af6:	602b      	str	r3, [r5, #0]
 8005af8:	f7fb fbd2 	bl	80012a0 <_write>
 8005afc:	1c43      	adds	r3, r0, #1
 8005afe:	d103      	bne.n	8005b08 <_write_r+0x20>
 8005b00:	682b      	ldr	r3, [r5, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d000      	beq.n	8005b08 <_write_r+0x20>
 8005b06:	6023      	str	r3, [r4, #0]
 8005b08:	bd70      	pop	{r4, r5, r6, pc}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	200004c0 	.word	0x200004c0

08005b10 <_free_r>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	0005      	movs	r5, r0
 8005b14:	2900      	cmp	r1, #0
 8005b16:	d010      	beq.n	8005b3a <_free_r+0x2a>
 8005b18:	1f0c      	subs	r4, r1, #4
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	da00      	bge.n	8005b22 <_free_r+0x12>
 8005b20:	18e4      	adds	r4, r4, r3
 8005b22:	0028      	movs	r0, r5
 8005b24:	f7ff fe08 	bl	8005738 <__malloc_lock>
 8005b28:	4a1d      	ldr	r2, [pc, #116]	; (8005ba0 <_free_r+0x90>)
 8005b2a:	6813      	ldr	r3, [r2, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d105      	bne.n	8005b3c <_free_r+0x2c>
 8005b30:	6063      	str	r3, [r4, #4]
 8005b32:	6014      	str	r4, [r2, #0]
 8005b34:	0028      	movs	r0, r5
 8005b36:	f7ff fe07 	bl	8005748 <__malloc_unlock>
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}
 8005b3c:	42a3      	cmp	r3, r4
 8005b3e:	d908      	bls.n	8005b52 <_free_r+0x42>
 8005b40:	6820      	ldr	r0, [r4, #0]
 8005b42:	1821      	adds	r1, r4, r0
 8005b44:	428b      	cmp	r3, r1
 8005b46:	d1f3      	bne.n	8005b30 <_free_r+0x20>
 8005b48:	6819      	ldr	r1, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	1809      	adds	r1, r1, r0
 8005b4e:	6021      	str	r1, [r4, #0]
 8005b50:	e7ee      	b.n	8005b30 <_free_r+0x20>
 8005b52:	001a      	movs	r2, r3
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <_free_r+0x4e>
 8005b5a:	42a3      	cmp	r3, r4
 8005b5c:	d9f9      	bls.n	8005b52 <_free_r+0x42>
 8005b5e:	6811      	ldr	r1, [r2, #0]
 8005b60:	1850      	adds	r0, r2, r1
 8005b62:	42a0      	cmp	r0, r4
 8005b64:	d10b      	bne.n	8005b7e <_free_r+0x6e>
 8005b66:	6820      	ldr	r0, [r4, #0]
 8005b68:	1809      	adds	r1, r1, r0
 8005b6a:	1850      	adds	r0, r2, r1
 8005b6c:	6011      	str	r1, [r2, #0]
 8005b6e:	4283      	cmp	r3, r0
 8005b70:	d1e0      	bne.n	8005b34 <_free_r+0x24>
 8005b72:	6818      	ldr	r0, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	1841      	adds	r1, r0, r1
 8005b78:	6011      	str	r1, [r2, #0]
 8005b7a:	6053      	str	r3, [r2, #4]
 8005b7c:	e7da      	b.n	8005b34 <_free_r+0x24>
 8005b7e:	42a0      	cmp	r0, r4
 8005b80:	d902      	bls.n	8005b88 <_free_r+0x78>
 8005b82:	230c      	movs	r3, #12
 8005b84:	602b      	str	r3, [r5, #0]
 8005b86:	e7d5      	b.n	8005b34 <_free_r+0x24>
 8005b88:	6820      	ldr	r0, [r4, #0]
 8005b8a:	1821      	adds	r1, r4, r0
 8005b8c:	428b      	cmp	r3, r1
 8005b8e:	d103      	bne.n	8005b98 <_free_r+0x88>
 8005b90:	6819      	ldr	r1, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	1809      	adds	r1, r1, r0
 8005b96:	6021      	str	r1, [r4, #0]
 8005b98:	6063      	str	r3, [r4, #4]
 8005b9a:	6054      	str	r4, [r2, #4]
 8005b9c:	e7ca      	b.n	8005b34 <_free_r+0x24>
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	200004b8 	.word	0x200004b8

08005ba4 <_init>:
 8005ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005baa:	bc08      	pop	{r3}
 8005bac:	469e      	mov	lr, r3
 8005bae:	4770      	bx	lr

08005bb0 <_fini>:
 8005bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb2:	46c0      	nop			; (mov r8, r8)
 8005bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb6:	bc08      	pop	{r3}
 8005bb8:	469e      	mov	lr, r3
 8005bba:	4770      	bx	lr
