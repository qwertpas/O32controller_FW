
O32controller_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  080062a0  080062a0  000162a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065b0  080065b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080065b0  080065b0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065b0  080065b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065b4  080065b4  000165b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080065b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000070  08006628  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08006628  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066d4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011f5  00000000  00000000  0002676c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00027961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002cc8  00000000  00000000  000288d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001203e  00000000  00000000  0002b5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003272  00000000  00000000  0003d5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00040851  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003c14  00000000  00000000  000408a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006288 	.word	0x08006288

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006288 	.word	0x08006288

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <foc_startup>:
static int16_t I_q_filt = 0;

static uint32_t count = 0; //incremented every loop, reset at 100Hz
static uint16_t loop_freq = 0; //Hz, calculated at 100Hz using count

void foc_startup() {
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4647      	mov	r7, r8
 800040e:	b580      	push	{r7, lr}

	DISABLE_DRIVE;
 8000410:	2200      	movs	r2, #0
void foc_startup() {
 8000412:	b083      	sub	sp, #12
	DISABLE_DRIVE;
 8000414:	2180      	movs	r1, #128	; 0x80
 8000416:	4853      	ldr	r0, [pc, #332]	; (8000564 <foc_startup+0x15c>)
 8000418:	f001 fdf2 	bl	8002000 <HAL_GPIO_WritePin>
 800041c:	2200      	movs	r2, #0
 800041e:	2140      	movs	r1, #64	; 0x40
 8000420:	4850      	ldr	r0, [pc, #320]	; (8000564 <foc_startup+0x15c>)
 8000422:	f001 fded 	bl	8002000 <HAL_GPIO_WritePin>

	//disable RS485 tranceiver driver
	HAL_GPIO_WritePin(USART_DE_GPIO_Port, USART_DE_Pin, 0);
 8000426:	2090      	movs	r0, #144	; 0x90
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // turn on complementary channel

	HAL_TIM_Base_Start_IT(&htim2); //100Hz timer for printing

	TIM1->CCR1 = 0;
 8000428:	2500      	movs	r5, #0
	HAL_GPIO_WritePin(USART_DE_GPIO_Port, USART_DE_Pin, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	2102      	movs	r1, #2
 800042e:	05c0      	lsls	r0, r0, #23
 8000430:	f001 fde6 	bl	8002000 <HAL_GPIO_WritePin>
	HAL_ADC_Stop(&hadc); //stop adc before calibration
 8000434:	4e4c      	ldr	r6, [pc, #304]	; (8000568 <foc_startup+0x160>)

	HAL_Delay(1000);

	for (int i = 0; i < 10; i++) { //take some measurements to let the sensors settle
		HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 0);
		HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 8000436:	2701      	movs	r7, #1
	HAL_ADC_Stop(&hadc); //stop adc before calibration
 8000438:	0030      	movs	r0, r6
 800043a:	f001 f9c9 	bl	80017d0 <HAL_ADC_Stop>
	HAL_Delay(1);
 800043e:	2001      	movs	r0, #1
 8000440:	f001 f83a 	bl	80014b8 <HAL_Delay>
	HAL_ADCEx_Calibration_Start(&hadc); //seems like this uses VREFINT_CAL
 8000444:	0030      	movs	r0, r6
 8000446:	f001 fb13 	bl	8001a70 <HAL_ADCEx_Calibration_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800044a:	4c48      	ldr	r4, [pc, #288]	; (800056c <foc_startup+0x164>)
 800044c:	2100      	movs	r1, #0
 800044e:	0020      	movs	r0, r4
 8000450:	f003 fbea 	bl	8003c28 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); // turn on complementary channel
 8000454:	2100      	movs	r1, #0
 8000456:	0020      	movs	r0, r4
 8000458:	f003 ff6c 	bl	8004334 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800045c:	2104      	movs	r1, #4
 800045e:	0020      	movs	r0, r4
 8000460:	f003 fbe2 	bl	8003c28 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); // turn on complementary channel
 8000464:	2104      	movs	r1, #4
 8000466:	0020      	movs	r0, r4
 8000468:	f003 ff64 	bl	8004334 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800046c:	2108      	movs	r1, #8
 800046e:	0020      	movs	r0, r4
 8000470:	f003 fbda 	bl	8003c28 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // turn on complementary channel
 8000474:	2108      	movs	r1, #8
 8000476:	0020      	movs	r0, r4
	TIM1->CCR1 = 0;
 8000478:	4c3d      	ldr	r4, [pc, #244]	; (8000570 <foc_startup+0x168>)
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // turn on complementary channel
 800047a:	f003 ff5b 	bl	8004334 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_Base_Start_IT(&htim2); //100Hz timer for printing
 800047e:	483d      	ldr	r0, [pc, #244]	; (8000574 <foc_startup+0x16c>)
 8000480:	f003 fb2c 	bl	8003adc <HAL_TIM_Base_Start_IT>
	TIM1->CCR1 = 0;
 8000484:	6365      	str	r5, [r4, #52]	; 0x34
	LED_RED;
 8000486:	2201      	movs	r2, #1
	TIM1->CCR2 = 0;
 8000488:	63a5      	str	r5, [r4, #56]	; 0x38
	LED_RED;
 800048a:	2101      	movs	r1, #1
	TIM1->CCR3 = 0;
 800048c:	63e5      	str	r5, [r4, #60]	; 0x3c
	LED_RED;
 800048e:	4835      	ldr	r0, [pc, #212]	; (8000564 <foc_startup+0x15c>)
 8000490:	f001 fdb6 	bl	8002000 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000494:	20fa      	movs	r0, #250	; 0xfa
 8000496:	00c0      	lsls	r0, r0, #3
 8000498:	f001 f80e 	bl	80014b8 <HAL_Delay>
	LED_GREEN;
 800049c:	2200      	movs	r2, #0
 800049e:	2101      	movs	r1, #1
 80004a0:	4830      	ldr	r0, [pc, #192]	; (8000564 <foc_startup+0x15c>)
 80004a2:	f001 fdad 	bl	8002000 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80004a6:	2064      	movs	r0, #100	; 0x64
 80004a8:	f001 f806 	bl	80014b8 <HAL_Delay>
	HAL_I2C_EnableListen_IT(&hi2c1);
 80004ac:	4832      	ldr	r0, [pc, #200]	; (8000578 <foc_startup+0x170>)
 80004ae:	f001 fefd 	bl	80022ac <HAL_I2C_EnableListen_IT>
	ENABLE_DRIVE;
 80004b2:	2201      	movs	r2, #1
 80004b4:	2180      	movs	r1, #128	; 0x80
 80004b6:	482b      	ldr	r0, [pc, #172]	; (8000564 <foc_startup+0x15c>)
 80004b8:	f001 fda2 	bl	8002000 <HAL_GPIO_WritePin>
 80004bc:	2201      	movs	r2, #1
 80004be:	2140      	movs	r1, #64	; 0x40
 80004c0:	4828      	ldr	r0, [pc, #160]	; (8000564 <foc_startup+0x15c>)
 80004c2:	f001 fd9d 	bl	8002000 <HAL_GPIO_WritePin>
	TIM1->CCR1 = 20;
 80004c6:	2314      	movs	r3, #20
	HAL_Delay(1000);
 80004c8:	20fa      	movs	r0, #250	; 0xfa
	TIM1->CCR1 = 20;
 80004ca:	6363      	str	r3, [r4, #52]	; 0x34
	HAL_Delay(1000);
 80004cc:	0080      	lsls	r0, r0, #2
	TIM1->CCR2 = 0;
 80004ce:	63a5      	str	r5, [r4, #56]	; 0x38
	TIM1->CCR3 = 0;
 80004d0:	63e5      	str	r5, [r4, #60]	; 0x3c
	HAL_Delay(1000);
 80004d2:	f000 fff1 	bl	80014b8 <HAL_Delay>
 80004d6:	4b29      	ldr	r3, [pc, #164]	; (800057c <foc_startup+0x174>)
 80004d8:	4d29      	ldr	r5, [pc, #164]	; (8000580 <foc_startup+0x178>)
 80004da:	4699      	mov	r9, r3
		HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 80004dc:	1eab      	subs	r3, r5, #2
	HAL_Delay(1000);
 80004de:	240a      	movs	r4, #10
		HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 80004e0:	4698      	mov	r8, r3
 80004e2:	427f      	negs	r7, r7
		HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2102      	movs	r1, #2
 80004e8:	481e      	ldr	r0, [pc, #120]	; (8000564 <foc_startup+0x15c>)
 80004ea:	f001 fd89 	bl	8002000 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 80004ee:	2302      	movs	r3, #2
 80004f0:	002a      	movs	r2, r5
 80004f2:	4641      	mov	r1, r8
 80004f4:	4648      	mov	r0, r9
 80004f6:	9700      	str	r7, [sp, #0]
 80004f8:	f003 f872 	bl	80035e0 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2102      	movs	r1, #2
 8000500:	4818      	ldr	r0, [pc, #96]	; (8000564 <foc_startup+0x15c>)
 8000502:	f001 fd7d 	bl	8002000 <HAL_GPIO_WritePin>

		HAL_ADC_Start_DMA(&hadc, (uint32_t*) p.adc_vals, NBR_ADC);  // start the adc in dma mode
 8000506:	0029      	movs	r1, r5
 8000508:	2206      	movs	r2, #6
 800050a:	0030      	movs	r0, r6
 800050c:	390e      	subs	r1, #14
	for (int i = 0; i < 10; i++) { //take some measurements to let the sensors settle
 800050e:	3c01      	subs	r4, #1
		HAL_ADC_Start_DMA(&hadc, (uint32_t*) p.adc_vals, NBR_ADC);  // start the adc in dma mode
 8000510:	f001 f97e 	bl	8001810 <HAL_ADC_Start_DMA>
	for (int i = 0; i < 10; i++) { //take some measurements to let the sensors settle
 8000514:	2c00      	cmp	r4, #0
 8000516:	d1e5      	bne.n	80004e4 <foc_startup+0xdc>
	}
	// 780.19 angle counts per 1/6th of an electrical cycle
	// 4681.14 angle counts per electrical cycle
	// 90º out of phase would be 1/4th of an electrical cycle, so 1170.285 angle counts
	m_angle = (uint16_t) ((p.spi_RX[0] << 8) + p.spi_RX[1] + 16384); // 0 to 32767
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	01c9      	lsls	r1, r1, #7
 800051c:	468c      	mov	ip, r1
 800051e:	782b      	ldrb	r3, [r5, #0]
 8000520:	786a      	ldrb	r2, [r5, #1]
 8000522:	021b      	lsls	r3, r3, #8
 8000524:	4462      	add	r2, ip
	e_offset = (m_angle * PPAIRS - e_offset) & (32768 - 1); //convert to electrical angle, modulo 32768
 8000526:	4917      	ldr	r1, [pc, #92]	; (8000584 <foc_startup+0x17c>)
	m_angle = (uint16_t) ((p.spi_RX[0] << 8) + p.spi_RX[1] + 16384); // 0 to 32767
 8000528:	189b      	adds	r3, r3, r2
 800052a:	b29b      	uxth	r3, r3
	e_offset = (m_angle * PPAIRS - e_offset) & (32768 - 1); //convert to electrical angle, modulo 32768
 800052c:	8808      	ldrh	r0, [r1, #0]
 800052e:	00da      	lsls	r2, r3, #3
 8000530:	1ad2      	subs	r2, r2, r3
 8000532:	1a12      	subs	r2, r2, r0
 8000534:	0452      	lsls	r2, r2, #17
 8000536:	0c52      	lsrs	r2, r2, #17
 8000538:	800a      	strh	r2, [r1, #0]
	e_angle = 0;

	step = 0;
 800053a:	2100      	movs	r1, #0
	e_angle = 0;
 800053c:	4a12      	ldr	r2, [pc, #72]	; (8000588 <foc_startup+0x180>)
 800053e:	8014      	strh	r4, [r2, #0]
	step = 0;
 8000540:	4a12      	ldr	r2, [pc, #72]	; (800058c <foc_startup+0x184>)
 8000542:	7011      	strb	r1, [r2, #0]
	mag = 20;
 8000544:	2114      	movs	r1, #20
 8000546:	4a12      	ldr	r2, [pc, #72]	; (8000590 <foc_startup+0x188>)
 8000548:	8011      	strh	r1, [r2, #0]

	m_angle_prev = m_angle;
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <foc_startup+0x18c>)
 800054c:	8013      	strh	r3, [r2, #0]
	revs = 0;
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <foc_startup+0x190>)
 8000550:	601c      	str	r4, [r3, #0]
	cont_angle = 0;
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <foc_startup+0x194>)
 8000554:	601c      	str	r4, [r3, #0]
	cont_angle_prev = 0;
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <foc_startup+0x198>)
 8000558:	601c      	str	r4, [r3, #0]
	rpm = 0;

}
 800055a:	b003      	add	sp, #12
 800055c:	bcc0      	pop	{r6, r7}
 800055e:	46b9      	mov	r9, r7
 8000560:	46b0      	mov	r8, r6
 8000562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000564:	48001400 	.word	0x48001400
 8000568:	200000bc 	.word	0x200000bc
 800056c:	2000023c 	.word	0x2000023c
 8000570:	40012c00 	.word	0x40012c00
 8000574:	20000284 	.word	0x20000284
 8000578:	20000184 	.word	0x20000184
 800057c:	200001d8 	.word	0x200001d8
 8000580:	20000430 	.word	0x20000430
 8000584:	200000ae 	.word	0x200000ae
 8000588:	200000ac 	.word	0x200000ac
 800058c:	200000b8 	.word	0x200000b8
 8000590:	200000b2 	.word	0x200000b2
 8000594:	200000b0 	.word	0x200000b0
 8000598:	200000b4 	.word	0x200000b4
 800059c:	200000a0 	.word	0x200000a0
 80005a0:	200000a4 	.word	0x200000a4

080005a4 <foc_loop>:

void foc_loop() {
 80005a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a6:	46de      	mov	lr, fp
 80005a8:	4645      	mov	r5, r8
 80005aa:	4657      	mov	r7, sl
 80005ac:	464e      	mov	r6, r9
 80005ae:	b5e0      	push	{r5, r6, r7, lr}
	//read MA702 magnetic angle
	HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 0);
 80005b0:	2200      	movs	r2, #0
void foc_loop() {
 80005b2:	b087      	sub	sp, #28
	HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 0);
 80005b4:	2102      	movs	r1, #2
 80005b6:	48cd      	ldr	r0, [pc, #820]	; (80008ec <foc_loop+0x348>)
 80005b8:	f001 fd22 	bl	8002000 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 80005bc:	2301      	movs	r3, #1
 80005be:	4ccc      	ldr	r4, [pc, #816]	; (80008f0 <foc_loop+0x34c>)
 80005c0:	425b      	negs	r3, r3
 80005c2:	0022      	movs	r2, r4
 80005c4:	1ea1      	subs	r1, r4, #2
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	48ca      	ldr	r0, [pc, #808]	; (80008f4 <foc_loop+0x350>)
 80005ca:	3303      	adds	r3, #3
 80005cc:	f003 f808 	bl	80035e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, MAG_NCS_Pin, 1);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2102      	movs	r1, #2
 80005d4:	48c5      	ldr	r0, [pc, #788]	; (80008ec <foc_loop+0x348>)
 80005d6:	f001 fd13 	bl	8002000 <HAL_GPIO_WritePin>

	//angles represented in [0,32767] (~91 per degree)
	m_angle = ((uint16_t) (p.spi_RX[0]) << 8) + p.spi_RX[1] + 16384;
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	01c9      	lsls	r1, r1, #7
 80005de:	468c      	mov	ip, r1
 80005e0:	7823      	ldrb	r3, [r4, #0]
 80005e2:	7862      	ldrb	r2, [r4, #1]
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	4462      	add	r2, ip
 80005e8:	189b      	adds	r3, r3, r2
	e_angle = (m_angle * PPAIRS - e_offset) & (32768 - 1); //convert to electrical angle and modulo
 80005ea:	49c3      	ldr	r1, [pc, #780]	; (80008f8 <foc_loop+0x354>)
	m_angle = ((uint16_t) (p.spi_RX[0]) << 8) + p.spi_RX[1] + 16384;
 80005ec:	b29b      	uxth	r3, r3
	e_angle = (m_angle * PPAIRS - e_offset) & (32768 - 1); //convert to electrical angle and modulo
 80005ee:	8809      	ldrh	r1, [r1, #0]
 80005f0:	00da      	lsls	r2, r3, #3
 80005f2:	1ad2      	subs	r2, r2, r3
 80005f4:	1a52      	subs	r2, r2, r1
 80005f6:	4dc1      	ldr	r5, [pc, #772]	; (80008fc <foc_loop+0x358>)
 80005f8:	0452      	lsls	r2, r2, #17
 80005fa:	0c52      	lsrs	r2, r2, #17
 80005fc:	802a      	strh	r2, [r5, #0]

	if (m_angle_prev < 8192 && m_angle > 24576) { //detect angle wraparound and increment a revolution
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	49bf      	ldr	r1, [pc, #764]	; (8000900 <foc_loop+0x35c>)
 8000602:	0192      	lsls	r2, r2, #6
 8000604:	8808      	ldrh	r0, [r1, #0]
 8000606:	4290      	cmp	r0, r2
 8000608:	d300      	bcc.n	800060c <foc_loop+0x68>
 800060a:	e0e4      	b.n	80007d6 <foc_loop+0x232>
 800060c:	22c0      	movs	r2, #192	; 0xc0
 800060e:	01d2      	lsls	r2, r2, #7
 8000610:	4293      	cmp	r3, r2
 8000612:	d900      	bls.n	8000616 <foc_loop+0x72>
 8000614:	e0f4      	b.n	8000800 <foc_loop+0x25c>
		revs -= 32768;
	} else if (m_angle < 8192 && m_angle_prev > 24576) {
		revs += 32768;
	}
	cont_angle = m_angle + revs;
 8000616:	4abb      	ldr	r2, [pc, #748]	; (8000904 <foc_loop+0x360>)
 8000618:	6812      	ldr	r2, [r2, #0]
	m_angle_prev = m_angle;



	//read ADCs
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) p.adc_vals, NBR_ADC);
 800061a:	4ebb      	ldr	r6, [pc, #748]	; (8000908 <foc_loop+0x364>)
	cont_angle = m_angle + revs;
 800061c:	48bb      	ldr	r0, [pc, #748]	; (800090c <foc_loop+0x368>)
 800061e:	189a      	adds	r2, r3, r2
 8000620:	6002      	str	r2, [r0, #0]
	m_angle_prev = m_angle;
 8000622:	800b      	strh	r3, [r1, #0]
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) p.adc_vals, NBR_ADC);
 8000624:	2206      	movs	r2, #6
 8000626:	0031      	movs	r1, r6
	cont_angle = m_angle + revs;
 8000628:	4683      	mov	fp, r0
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) p.adc_vals, NBR_ADC);
 800062a:	48b9      	ldr	r0, [pc, #740]	; (8000910 <foc_loop+0x36c>)
 800062c:	f001 f8f0 	bl	8001810 <HAL_ADC_Start_DMA>

	//filter ADC values (https://stackoverflow.com/questions/38918530/simple-low-pass-filter-in-fixed-point)
	//phase currents are in adc units [-2048, 2047] (1 bit sign, 11 bit value)
	//to get current in milliamps, multiply by UAMP_PER_ADC then divide by 1000
	I_u = I_u_accum >> ADC_FILT_LVL;
 8000630:	49b8      	ldr	r1, [pc, #736]	; (8000914 <foc_loop+0x370>)
	I_u_accum = I_u_accum - I_u + (p.adc_vals[3] - adc_U_offset);
 8000632:	4ab9      	ldr	r2, [pc, #740]	; (8000918 <foc_loop+0x374>)
 8000634:	680b      	ldr	r3, [r1, #0]
 8000636:	4690      	mov	r8, r2
 8000638:	b21b      	sxth	r3, r3
 800063a:	469c      	mov	ip, r3
 800063c:	4660      	mov	r0, ip
 800063e:	88f3      	ldrh	r3, [r6, #6]
 8000640:	680a      	ldr	r2, [r1, #0]
 8000642:	4443      	add	r3, r8
 8000644:	1a12      	subs	r2, r2, r0
 8000646:	189b      	adds	r3, r3, r2
 8000648:	600b      	str	r3, [r1, #0]

	I_v = I_v_accum >> ADC_FILT_LVL;
 800064a:	49b4      	ldr	r1, [pc, #720]	; (800091c <foc_loop+0x378>)
	I_v_accum = I_v_accum - I_v + (p.adc_vals[0] - adc_V_offset);
 800064c:	4ab4      	ldr	r2, [pc, #720]	; (8000920 <foc_loop+0x37c>)
 800064e:	680b      	ldr	r3, [r1, #0]
 8000650:	4690      	mov	r8, r2
 8000652:	b21b      	sxth	r3, r3
 8000654:	4699      	mov	r9, r3
 8000656:	4648      	mov	r0, r9
 8000658:	8833      	ldrh	r3, [r6, #0]
 800065a:	680a      	ldr	r2, [r1, #0]
 800065c:	4443      	add	r3, r8
 800065e:	1a12      	subs	r2, r2, r0
 8000660:	189b      	adds	r3, r3, r2
 8000662:	600b      	str	r3, [r1, #0]

	I_w = I_w_accum >> ADC_FILT_LVL;
 8000664:	49af      	ldr	r1, [pc, #700]	; (8000924 <foc_loop+0x380>)
	I_w_accum = I_w_accum - I_w + (p.adc_vals[1] - adc_W_offset);
 8000666:	4ab0      	ldr	r2, [pc, #704]	; (8000928 <foc_loop+0x384>)
 8000668:	680b      	ldr	r3, [r1, #0]
    //each term below has 16 fractional bits and is signed, floating point equilvalent < 1
    int16_t Q16_sin_t = sin_lut[angle_lut];
    int16_t Q16_cos_t = sin_lut[(64 - angle_lut) & (256 - 1)]; //64 out of 256 is the equilvalent of 90º/360º. Modulo 256.

    //some intermediate rounding, final error in Iq, Id is around 1%
    int16_t Q16_SQRT3_2_sin_t = (Q16_SQRT3_2*Q16_sin_t) >> 16;
 800066a:	48b0      	ldr	r0, [pc, #704]	; (800092c <foc_loop+0x388>)
	I_w_accum = I_w_accum - I_w + (p.adc_vals[1] - adc_W_offset);
 800066c:	b21c      	sxth	r4, r3
 800066e:	23ce      	movs	r3, #206	; 0xce
 8000670:	425b      	negs	r3, r3
 8000672:	4698      	mov	r8, r3
 8000674:	44b0      	add	r8, r6
 8000676:	4643      	mov	r3, r8
 8000678:	4690      	mov	r8, r2
 800067a:	9304      	str	r3, [sp, #16]
 800067c:	8873      	ldrh	r3, [r6, #2]
    int16_t Q16_cos_t = sin_lut[(64 - angle_lut) & (256 - 1)]; //64 out of 256 is the equilvalent of 90º/360º. Modulo 256.
 800067e:	2640      	movs	r6, #64	; 0x40
	I_w_accum = I_w_accum - I_w + (p.adc_vals[1] - adc_W_offset);
 8000680:	680a      	ldr	r2, [r1, #0]
 8000682:	4443      	add	r3, r8
 8000684:	1b12      	subs	r2, r2, r4
 8000686:	189b      	adds	r3, r3, r2
 8000688:	600b      	str	r3, [r1, #0]
	uint8_t angle_lut = e_angle >> 7; //scale e_angle [0,32767] to [0,255] for lookup table
 800068a:	882b      	ldrh	r3, [r5, #0]
    int16_t Q16_sin_t = sin_lut[angle_lut];
 800068c:	4aa8      	ldr	r2, [pc, #672]	; (8000930 <foc_loop+0x38c>)
	uint8_t angle_lut = e_angle >> 7; //scale e_angle [0,32767] to [0,255] for lookup table
 800068e:	9305      	str	r3, [sp, #20]
 8000690:	09db      	lsrs	r3, r3, #7
    int16_t Q16_sin_t = sin_lut[angle_lut];
 8000692:	b2db      	uxtb	r3, r3
    int16_t Q16_cos_t = sin_lut[(64 - angle_lut) & (256 - 1)]; //64 out of 256 is the equilvalent of 90º/360º. Modulo 256.
 8000694:	1af6      	subs	r6, r6, r3
    int16_t Q16_sin_t = sin_lut[angle_lut];
 8000696:	0059      	lsls	r1, r3, #1
    int16_t Q16_cos_t = sin_lut[(64 - angle_lut) & (256 - 1)]; //64 out of 256 is the equilvalent of 90º/360º. Modulo 256.
 8000698:	23ff      	movs	r3, #255	; 0xff
    int16_t Q16_SQRT3_2_sin_t = (Q16_SQRT3_2*Q16_sin_t) >> 16;
 800069a:	5e8d      	ldrsh	r5, [r1, r2]
 800069c:	0001      	movs	r1, r0
    int16_t Q16_SQRT3_2_cos_t = (Q16_SQRT3_2*Q16_cos_t) >> 16;
    int16_t Q16_1_2_sin_t = (Q16_1_2*Q16_sin_t) >> 16;
    int16_t Q16_1_2_cos_t = (Q16_1_2*Q16_cos_t) >> 16;

    I_d = ( Q16_cos_t*I_u + ( Q16_SQRT3_2_sin_t - Q16_1_2_cos_t)*I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t)*I_w) >> 15;
 800069e:	464f      	mov	r7, r9
    int16_t Q16_cos_t = sin_lut[(64 - angle_lut) & (256 - 1)]; //64 out of 256 is the equilvalent of 90º/360º. Modulo 256.
 80006a0:	4033      	ands	r3, r6
 80006a2:	005b      	lsls	r3, r3, #1
    int16_t Q16_SQRT3_2_cos_t = (Q16_SQRT3_2*Q16_cos_t) >> 16;
 80006a4:	5e9a      	ldrsh	r2, [r3, r2]
    I_d = (I_d * Q16_2_3) >> 16;
    I_q = ( Q16_sin_t*I_u + (-Q16_SQRT3_2_cos_t - Q16_1_2_sin_t)*I_v + ( Q16_SQRT3_2_cos_t - Q16_1_2_sin_t)*I_w) >> 15;
    I_q = (I_q * -Q16_2_3) >> 16;

	I_d_filt = I_d_accum >> DQ_FILT_LVL;
 80006a6:	4ea3      	ldr	r6, [pc, #652]	; (8000934 <foc_loop+0x390>)
    int16_t Q16_SQRT3_2_sin_t = (Q16_SQRT3_2*Q16_sin_t) >> 16;
 80006a8:	4369      	muls	r1, r5
	I_d_filt = I_d_accum >> DQ_FILT_LVL;
 80006aa:	46b2      	mov	sl, r6
 80006ac:	6836      	ldr	r6, [r6, #0]
    int16_t Q16_1_2_cos_t = (Q16_1_2*Q16_cos_t) >> 16;
 80006ae:	1053      	asrs	r3, r2, #1
	I_d_filt = I_d_accum >> DQ_FILT_LVL;
 80006b0:	1236      	asrs	r6, r6, #8
    int16_t Q16_SQRT3_2_sin_t = (Q16_SQRT3_2*Q16_sin_t) >> 16;
 80006b2:	1409      	asrs	r1, r1, #16
	I_d_accum = I_d_accum - I_d_filt + I_d;
 80006b4:	b236      	sxth	r6, r6
 80006b6:	9603      	str	r6, [sp, #12]
    I_d = ( Q16_cos_t*I_u + ( Q16_SQRT3_2_sin_t - Q16_1_2_cos_t)*I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t)*I_w) >> 15;
 80006b8:	1ace      	subs	r6, r1, r3
 80006ba:	437e      	muls	r6, r7
 80006bc:	4667      	mov	r7, ip
 80006be:	46b0      	mov	r8, r6
 80006c0:	4249      	negs	r1, r1
    int16_t Q16_SQRT3_2_cos_t = (Q16_SQRT3_2*Q16_cos_t) >> 16;
 80006c2:	4350      	muls	r0, r2
    I_d = ( Q16_cos_t*I_u + ( Q16_SQRT3_2_sin_t - Q16_1_2_cos_t)*I_v + (-Q16_SQRT3_2_sin_t - Q16_1_2_cos_t)*I_w) >> 15;
 80006c4:	1ac9      	subs	r1, r1, r3
 80006c6:	437a      	muls	r2, r7
 80006c8:	4361      	muls	r1, r4
 80006ca:	4442      	add	r2, r8
 80006cc:	1852      	adds	r2, r2, r1
 80006ce:	13d2      	asrs	r2, r2, #15
    I_d = (I_d * Q16_2_3) >> 16;
 80006d0:	4999      	ldr	r1, [pc, #612]	; (8000938 <foc_loop+0x394>)
 80006d2:	b212      	sxth	r2, r2
 80006d4:	4351      	muls	r1, r2
	I_d_accum = I_d_accum - I_d_filt + I_d;
 80006d6:	4652      	mov	r2, sl
 80006d8:	9b03      	ldr	r3, [sp, #12]
 80006da:	6812      	ldr	r2, [r2, #0]
    I_d = (I_d * Q16_2_3) >> 16;
 80006dc:	1409      	asrs	r1, r1, #16
	I_d_accum = I_d_accum - I_d_filt + I_d;
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	4652      	mov	r2, sl
 80006e2:	18cb      	adds	r3, r1, r3

	I_q_filt = I_q_accum >> DQ_FILT_LVL;
 80006e4:	4995      	ldr	r1, [pc, #596]	; (800093c <foc_loop+0x398>)
	I_d_accum = I_d_accum - I_d_filt + I_d;
 80006e6:	6013      	str	r3, [r2, #0]
	I_q_filt = I_q_accum >> DQ_FILT_LVL;
 80006e8:	680a      	ldr	r2, [r1, #0]
    int16_t Q16_SQRT3_2_cos_t = (Q16_SQRT3_2*Q16_cos_t) >> 16;
 80006ea:	1400      	asrs	r0, r0, #16
	I_q_filt = I_q_accum >> DQ_FILT_LVL;
 80006ec:	1213      	asrs	r3, r2, #8
	I_q_accum = I_q_accum - I_q_filt + I_q;
 80006ee:	b21f      	sxth	r7, r3
 80006f0:	46b8      	mov	r8, r7
    I_q = ( Q16_sin_t*I_u + (-Q16_SQRT3_2_cos_t - Q16_1_2_sin_t)*I_v + ( Q16_SQRT3_2_cos_t - Q16_1_2_sin_t)*I_w) >> 15;
 80006f2:	464f      	mov	r7, r9
 80006f4:	106e      	asrs	r6, r5, #1
 80006f6:	4243      	negs	r3, r0
 80006f8:	1b9b      	subs	r3, r3, r6
 80006fa:	437b      	muls	r3, r7
 80006fc:	4667      	mov	r7, ip
 80006fe:	1b80      	subs	r0, r0, r6
 8000700:	437d      	muls	r5, r7
 8000702:	4344      	muls	r4, r0
 8000704:	195b      	adds	r3, r3, r5
 8000706:	191c      	adds	r4, r3, r4
 8000708:	13e4      	asrs	r4, r4, #15
    I_q = (I_q * -Q16_2_3) >> 16;
 800070a:	b223      	sxth	r3, r4
 800070c:	0118      	lsls	r0, r3, #4
 800070e:	1ac0      	subs	r0, r0, r3
 8000710:	0384      	lsls	r4, r0, #14
	I_q_accum = I_q_accum - I_q_filt + I_q;
 8000712:	4640      	mov	r0, r8
    I_q = (I_q * -Q16_2_3) >> 16;
 8000714:	18e4      	adds	r4, r4, r3
 8000716:	00a4      	lsls	r4, r4, #2
 8000718:	18e4      	adds	r4, r4, r3
 800071a:	0123      	lsls	r3, r4, #4
 800071c:	18e4      	adds	r4, r4, r3
 800071e:	0223      	lsls	r3, r4, #8
 8000720:	18e4      	adds	r4, r4, r3
 8000722:	1424      	asrs	r4, r4, #16
	I_q_accum = I_q_accum - I_q_filt + I_q;
 8000724:	1a12      	subs	r2, r2, r0


    //Handle i2c commands
    int cmd = p.i2c_RX[0];
 8000726:	9b04      	ldr	r3, [sp, #16]
	I_q_accum = I_q_accum - I_q_filt + I_q;
 8000728:	18a2      	adds	r2, r4, r2
 800072a:	600a      	str	r2, [r1, #0]
    int cmd = p.i2c_RX[0];
 800072c:	789d      	ldrb	r5, [r3, #2]
	if (cmd == 0) {
 800072e:	2d00      	cmp	r5, #0
 8000730:	d033      	beq.n	800079a <foc_loop+0x1f6>
		mag = 0;
	} else if (cmd >= 1 && cmd <= 8) {
 8000732:	1e6b      	subs	r3, r5, #1
 8000734:	2b07      	cmp	r3, #7
 8000736:	d85e      	bhi.n	80007f6 <foc_loop+0x252>

		if (cont_angle > 32868) {
 8000738:	465b      	mov	r3, fp
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4699      	mov	r9, r3
 800073e:	4b80      	ldr	r3, [pc, #512]	; (8000940 <foc_loop+0x39c>)
 8000740:	4599      	cmp	r9, r3
 8000742:	dd00      	ble.n	8000746 <foc_loop+0x1a2>
 8000744:	e0b5      	b.n	80008b2 <foc_loop+0x30e>
			step = ((e_angle + 27307) & (32768-1)) / 5461;
			mag = (cont_angle - 32868) / 100;
		} else if (cont_angle < 32668) {
 8000746:	4b7f      	ldr	r3, [pc, #508]	; (8000944 <foc_loop+0x3a0>)
 8000748:	4599      	cmp	r9, r3
 800074a:	dc26      	bgt.n	800079a <foc_loop+0x1f6>
			step = ((e_angle + 10923) & (32768-1)) / 5461;
 800074c:	4b7e      	ldr	r3, [pc, #504]	; (8000948 <foc_loop+0x3a4>)
 800074e:	9805      	ldr	r0, [sp, #20]
 8000750:	469c      	mov	ip, r3
 8000752:	4460      	add	r0, ip
 8000754:	0440      	lsls	r0, r0, #17
 8000756:	497d      	ldr	r1, [pc, #500]	; (800094c <foc_loop+0x3a8>)
 8000758:	0c40      	lsrs	r0, r0, #17
 800075a:	f7ff fd69 	bl	8000230 <__divsi3>
 800075e:	4b7c      	ldr	r3, [pc, #496]	; (8000950 <foc_loop+0x3ac>)
 8000760:	b2c4      	uxtb	r4, r0
 8000762:	701c      	strb	r4, [r3, #0]
			mag = (32668 - cont_angle) / 100;
 8000764:	464b      	mov	r3, r9
 8000766:	487b      	ldr	r0, [pc, #492]	; (8000954 <foc_loop+0x3b0>)
 8000768:	1ac0      	subs	r0, r0, r3
 800076a:	2164      	movs	r1, #100	; 0x64
 800076c:	f7ff fd60 	bl	8000230 <__divsi3>
 8000770:	4a79      	ldr	r2, [pc, #484]	; (8000958 <foc_loop+0x3b4>)
		} else {
			mag = 0;
		}

		if (mag > cmd * 10) {
 8000772:	00ab      	lsls	r3, r5, #2
			mag = (32668 - cont_angle) / 100;
 8000774:	b280      	uxth	r0, r0
		if (mag > cmd * 10) {
 8000776:	195d      	adds	r5, r3, r5
			mag = (32668 - cont_angle) / 100;
 8000778:	8010      	strh	r0, [r2, #0]
		if (mag > cmd * 10) {
 800077a:	006d      	lsls	r5, r5, #1
 800077c:	42a8      	cmp	r0, r5
 800077e:	dd11      	ble.n	80007a4 <foc_loop+0x200>
			mag = cmd * 10;
 8000780:	8015      	strh	r5, [r2, #0]




	//six-step commutation
	if (step == 0) {
 8000782:	2c00      	cmp	r4, #0
 8000784:	d010      	beq.n	80007a8 <foc_loop+0x204>
		TIM1->CCR1 = mag;
		TIM1->CCR2 = 0;
		TIM1->CCR3 = 0;
	}
	if (step == 1) {
 8000786:	2c01      	cmp	r4, #1
 8000788:	d141      	bne.n	800080e <foc_loop+0x26a>
		TIM1->CCR1 = mag;
 800078a:	4b73      	ldr	r3, [pc, #460]	; (8000958 <foc_loop+0x3b4>)
 800078c:	881a      	ldrh	r2, [r3, #0]
 800078e:	4b73      	ldr	r3, [pc, #460]	; (800095c <foc_loop+0x3b8>)
 8000790:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = mag;
 8000792:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000794:	2200      	movs	r2, #0
 8000796:	63da      	str	r2, [r3, #60]	; 0x3c
 8000798:	e00c      	b.n	80007b4 <foc_loop+0x210>
		mag = 0;
 800079a:	2200      	movs	r2, #0
 800079c:	4b6e      	ldr	r3, [pc, #440]	; (8000958 <foc_loop+0x3b4>)
 800079e:	801a      	strh	r2, [r3, #0]
	if (step == 0) {
 80007a0:	4b6b      	ldr	r3, [pc, #428]	; (8000950 <foc_loop+0x3ac>)
 80007a2:	781c      	ldrb	r4, [r3, #0]
 80007a4:	2c00      	cmp	r4, #0
 80007a6:	d1ee      	bne.n	8000786 <foc_loop+0x1e2>
		TIM1->CCR1 = mag;
 80007a8:	4b6b      	ldr	r3, [pc, #428]	; (8000958 <foc_loop+0x3b4>)
 80007aa:	881a      	ldrh	r2, [r3, #0]
 80007ac:	4b6b      	ldr	r3, [pc, #428]	; (800095c <foc_loop+0x3b8>)
 80007ae:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80007b0:	639c      	str	r4, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80007b2:	63dc      	str	r4, [r3, #60]	; 0x3c
	}




	count++;
 80007b4:	4b6a      	ldr	r3, [pc, #424]	; (8000960 <foc_loop+0x3bc>)

	if (p.print_flag) { //100Hz clock
 80007b6:	4d6b      	ldr	r5, [pc, #428]	; (8000964 <foc_loop+0x3c0>)
	count++;
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	1c54      	adds	r4, r2, #1
	if (p.print_flag) { //100Hz clock
 80007bc:	22de      	movs	r2, #222	; 0xde
	count++;
 80007be:	601c      	str	r4, [r3, #0]
	if (p.print_flag) { //100Hz clock
 80007c0:	4691      	mov	r9, r2
 80007c2:	5caa      	ldrb	r2, [r5, r2]
 80007c4:	2a00      	cmp	r2, #0
 80007c6:	d14a      	bne.n	800085e <foc_loop+0x2ba>
		if (p.i2c_complete_flag == 1) {
			HAL_I2C_EnableListen_IT(&hi2c1);
			p.i2c_complete_flag = 0;
		}
	}
}
 80007c8:	b007      	add	sp, #28
 80007ca:	bcf0      	pop	{r4, r5, r6, r7}
 80007cc:	46bb      	mov	fp, r7
 80007ce:	46b2      	mov	sl, r6
 80007d0:	46a9      	mov	r9, r5
 80007d2:	46a0      	mov	r8, r4
 80007d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (m_angle < 8192 && m_angle_prev > 24576) {
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d300      	bcc.n	80007dc <foc_loop+0x238>
 80007da:	e71c      	b.n	8000616 <foc_loop+0x72>
 80007dc:	22c0      	movs	r2, #192	; 0xc0
 80007de:	01d2      	lsls	r2, r2, #7
 80007e0:	4290      	cmp	r0, r2
 80007e2:	d800      	bhi.n	80007e6 <foc_loop+0x242>
 80007e4:	e717      	b.n	8000616 <foc_loop+0x72>
		revs += 32768;
 80007e6:	2480      	movs	r4, #128	; 0x80
 80007e8:	0224      	lsls	r4, r4, #8
 80007ea:	46a4      	mov	ip, r4
 80007ec:	4845      	ldr	r0, [pc, #276]	; (8000904 <foc_loop+0x360>)
 80007ee:	6802      	ldr	r2, [r0, #0]
 80007f0:	4462      	add	r2, ip
 80007f2:	6002      	str	r2, [r0, #0]
 80007f4:	e711      	b.n	800061a <foc_loop+0x76>
	} else if (cmd == 9) {
 80007f6:	2d09      	cmp	r5, #9
 80007f8:	d06a      	beq.n	80008d0 <foc_loop+0x32c>
	if (step == 0) {
 80007fa:	4b55      	ldr	r3, [pc, #340]	; (8000950 <foc_loop+0x3ac>)
 80007fc:	781c      	ldrb	r4, [r3, #0]
 80007fe:	e7d1      	b.n	80007a4 <foc_loop+0x200>
		revs -= 32768;
 8000800:	4c59      	ldr	r4, [pc, #356]	; (8000968 <foc_loop+0x3c4>)
 8000802:	4840      	ldr	r0, [pc, #256]	; (8000904 <foc_loop+0x360>)
 8000804:	46a4      	mov	ip, r4
 8000806:	6802      	ldr	r2, [r0, #0]
 8000808:	4462      	add	r2, ip
 800080a:	6002      	str	r2, [r0, #0]
 800080c:	e705      	b.n	800061a <foc_loop+0x76>
	if (step == 2) {
 800080e:	2c02      	cmp	r4, #2
 8000810:	d107      	bne.n	8000822 <foc_loop+0x27e>
		TIM1->CCR1 = 0;
 8000812:	2200      	movs	r2, #0
		TIM1->CCR2 = mag;
 8000814:	4950      	ldr	r1, [pc, #320]	; (8000958 <foc_loop+0x3b4>)
		TIM1->CCR1 = 0;
 8000816:	4b51      	ldr	r3, [pc, #324]	; (800095c <foc_loop+0x3b8>)
		TIM1->CCR2 = mag;
 8000818:	8809      	ldrh	r1, [r1, #0]
		TIM1->CCR1 = 0;
 800081a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = mag;
 800081c:	6399      	str	r1, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 800081e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000820:	e7c8      	b.n	80007b4 <foc_loop+0x210>
	if (step == 3) {
 8000822:	2c03      	cmp	r4, #3
 8000824:	d107      	bne.n	8000836 <foc_loop+0x292>
		TIM1->CCR1 = 0;
 8000826:	2200      	movs	r2, #0
 8000828:	4b4c      	ldr	r3, [pc, #304]	; (800095c <foc_loop+0x3b8>)
 800082a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = mag;
 800082c:	4a4a      	ldr	r2, [pc, #296]	; (8000958 <foc_loop+0x3b4>)
 800082e:	8812      	ldrh	r2, [r2, #0]
 8000830:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = mag;
 8000832:	63da      	str	r2, [r3, #60]	; 0x3c
 8000834:	e7be      	b.n	80007b4 <foc_loop+0x210>
	if (step == 4) {
 8000836:	2c04      	cmp	r4, #4
 8000838:	d107      	bne.n	800084a <foc_loop+0x2a6>
		TIM1->CCR1 = 0;
 800083a:	2200      	movs	r2, #0
 800083c:	4b47      	ldr	r3, [pc, #284]	; (800095c <foc_loop+0x3b8>)
 800083e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000840:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = mag;
 8000842:	4a45      	ldr	r2, [pc, #276]	; (8000958 <foc_loop+0x3b4>)
 8000844:	8812      	ldrh	r2, [r2, #0]
 8000846:	63da      	str	r2, [r3, #60]	; 0x3c
 8000848:	e7b4      	b.n	80007b4 <foc_loop+0x210>
	if (step == 5) {
 800084a:	2c05      	cmp	r4, #5
 800084c:	d1b2      	bne.n	80007b4 <foc_loop+0x210>
		TIM1->CCR2 = 0;
 800084e:	2100      	movs	r1, #0
		TIM1->CCR1 = mag;
 8000850:	4b41      	ldr	r3, [pc, #260]	; (8000958 <foc_loop+0x3b4>)
 8000852:	881a      	ldrh	r2, [r3, #0]
 8000854:	4b41      	ldr	r3, [pc, #260]	; (800095c <foc_loop+0x3b8>)
 8000856:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000858:	6399      	str	r1, [r3, #56]	; 0x38
		TIM1->CCR3 = mag;
 800085a:	63da      	str	r2, [r3, #60]	; 0x3c
 800085c:	e7aa      	b.n	80007b4 <foc_loop+0x210>
		cont_angle_prev = cont_angle;
 800085e:	465a      	mov	r2, fp
 8000860:	6811      	ldr	r1, [r2, #0]
 8000862:	4a42      	ldr	r2, [pc, #264]	; (800096c <foc_loop+0x3c8>)
		memset(p.uart_TX, 0, sizeof(p.uart_TX));
 8000864:	1d2f      	adds	r7, r5, #4
		cont_angle_prev = cont_angle;
 8000866:	6011      	str	r1, [r2, #0]
		count = 0;
 8000868:	2200      	movs	r2, #0
		memset(p.uart_TX, 0, sizeof(p.uart_TX));
 800086a:	2100      	movs	r1, #0
		count = 0;
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	4692      	mov	sl, r2
		memset(p.uart_TX, 0, sizeof(p.uart_TX));
 8000870:	0038      	movs	r0, r7
 8000872:	3264      	adds	r2, #100	; 0x64
 8000874:	f004 fc52 	bl	800511c <memset>
		loop_freq = count * 100;
 8000878:	2264      	movs	r2, #100	; 0x64
		sprintf((char*) p.uart_TX, " freq: %d\n I_d_filt: %d\n I_q_filt: %d\n \t", loop_freq, I_d_filt, I_q_filt);
 800087a:	4643      	mov	r3, r8
		loop_freq = count * 100;
 800087c:	4362      	muls	r2, r4
		sprintf((char*) p.uart_TX, " freq: %d\n I_d_filt: %d\n I_q_filt: %d\n \t", loop_freq, I_d_filt, I_q_filt);
 800087e:	493c      	ldr	r1, [pc, #240]	; (8000970 <foc_loop+0x3cc>)
 8000880:	b292      	uxth	r2, r2
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	0038      	movs	r0, r7
 8000886:	9b03      	ldr	r3, [sp, #12]
 8000888:	f004 fccc 	bl	8005224 <siprintf>
		HAL_UART_Transmit_DMA(&huart1, p.uart_TX, UARTSIZE);
 800088c:	2264      	movs	r2, #100	; 0x64
 800088e:	0039      	movs	r1, r7
 8000890:	4838      	ldr	r0, [pc, #224]	; (8000974 <foc_loop+0x3d0>)
 8000892:	f003 ff0d 	bl	80046b0 <HAL_UART_Transmit_DMA>
		p.print_flag = 0;
 8000896:	464b      	mov	r3, r9
 8000898:	4652      	mov	r2, sl
		if (p.i2c_complete_flag == 1) {
 800089a:	24df      	movs	r4, #223	; 0xdf
		p.print_flag = 0;
 800089c:	54ea      	strb	r2, [r5, r3]
		if (p.i2c_complete_flag == 1) {
 800089e:	5d2b      	ldrb	r3, [r5, r4]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d000      	beq.n	80008a6 <foc_loop+0x302>
 80008a4:	e790      	b.n	80007c8 <foc_loop+0x224>
			HAL_I2C_EnableListen_IT(&hi2c1);
 80008a6:	4834      	ldr	r0, [pc, #208]	; (8000978 <foc_loop+0x3d4>)
 80008a8:	f001 fd00 	bl	80022ac <HAL_I2C_EnableListen_IT>
			p.i2c_complete_flag = 0;
 80008ac:	4653      	mov	r3, sl
 80008ae:	552b      	strb	r3, [r5, r4]
}
 80008b0:	e78a      	b.n	80007c8 <foc_loop+0x224>
			step = ((e_angle + 27307) & (32768-1)) / 5461;
 80008b2:	4b32      	ldr	r3, [pc, #200]	; (800097c <foc_loop+0x3d8>)
 80008b4:	9805      	ldr	r0, [sp, #20]
 80008b6:	469c      	mov	ip, r3
 80008b8:	4460      	add	r0, ip
 80008ba:	0440      	lsls	r0, r0, #17
 80008bc:	4923      	ldr	r1, [pc, #140]	; (800094c <foc_loop+0x3a8>)
 80008be:	0c40      	lsrs	r0, r0, #17
 80008c0:	f7ff fcb6 	bl	8000230 <__divsi3>
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <foc_loop+0x3ac>)
 80008c6:	b2c4      	uxtb	r4, r0
			mag = (cont_angle - 32868) / 100;
 80008c8:	482d      	ldr	r0, [pc, #180]	; (8000980 <foc_loop+0x3dc>)
			step = ((e_angle + 27307) & (32768-1)) / 5461;
 80008ca:	701c      	strb	r4, [r3, #0]
			mag = (cont_angle - 32868) / 100;
 80008cc:	4448      	add	r0, r9
 80008ce:	e74c      	b.n	800076a <foc_loop+0x1c6>
		step = ((e_angle + 10923) & (32768-1)) / 5461;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <foc_loop+0x3a4>)
 80008d2:	9805      	ldr	r0, [sp, #20]
 80008d4:	469c      	mov	ip, r3
 80008d6:	4460      	add	r0, ip
 80008d8:	0440      	lsls	r0, r0, #17
 80008da:	491c      	ldr	r1, [pc, #112]	; (800094c <foc_loop+0x3a8>)
 80008dc:	0c40      	lsrs	r0, r0, #17
 80008de:	f7ff fca7 	bl	8000230 <__divsi3>
 80008e2:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <foc_loop+0x3ac>)
 80008e4:	b2c4      	uxtb	r4, r0
 80008e6:	701c      	strb	r4, [r3, #0]
 80008e8:	e75c      	b.n	80007a4 <foc_loop+0x200>
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	48001400 	.word	0x48001400
 80008f0:	20000430 	.word	0x20000430
 80008f4:	200001d8 	.word	0x200001d8
 80008f8:	200000ae 	.word	0x200000ae
 80008fc:	200000ac 	.word	0x200000ac
 8000900:	200000b0 	.word	0x200000b0
 8000904:	200000b4 	.word	0x200000b4
 8000908:	20000422 	.word	0x20000422
 800090c:	200000a0 	.word	0x200000a0
 8000910:	200000bc 	.word	0x200000bc
 8000914:	20000094 	.word	0x20000094
 8000918:	fffff7fd 	.word	0xfffff7fd
 800091c:	20000098 	.word	0x20000098
 8000920:	fffff80a 	.word	0xfffff80a
 8000924:	2000009c 	.word	0x2000009c
 8000928:	fffff804 	.word	0xfffff804
 800092c:	0000ddb4 	.word	0x0000ddb4
 8000930:	080062cc 	.word	0x080062cc
 8000934:	2000008c 	.word	0x2000008c
 8000938:	0000aaab 	.word	0x0000aaab
 800093c:	20000090 	.word	0x20000090
 8000940:	00008064 	.word	0x00008064
 8000944:	00007f9b 	.word	0x00007f9b
 8000948:	00002aab 	.word	0x00002aab
 800094c:	00001555 	.word	0x00001555
 8000950:	200000b8 	.word	0x200000b8
 8000954:	00007f9c 	.word	0x00007f9c
 8000958:	200000b2 	.word	0x200000b2
 800095c:	40012c00 	.word	0x40012c00
 8000960:	200000a8 	.word	0x200000a8
 8000964:	20000354 	.word	0x20000354
 8000968:	ffff8000 	.word	0xffff8000
 800096c:	200000a4 	.word	0x200000a4
 8000970:	080062a0 	.word	0x080062a0
 8000974:	200002cc 	.word	0x200002cc
 8000978:	20000184 	.word	0x20000184
 800097c:	00006aab 	.word	0x00006aab
 8000980:	ffff7f9c 	.word	0xffff7f9c

08000984 <__io_putchar>:
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

//overrides printf
int __io_putchar(int ch) {
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000984:	2301      	movs	r3, #1
int __io_putchar(int ch) {
 8000986:	b500      	push	{lr}
 8000988:	b083      	sub	sp, #12
 800098a:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 800098c:	2201      	movs	r2, #1
 800098e:	425b      	negs	r3, r3
 8000990:	a901      	add	r1, sp, #4
 8000992:	4803      	ldr	r0, [pc, #12]	; (80009a0 <__io_putchar+0x1c>)
 8000994:	f003 fd7a 	bl	800448c <HAL_UART_Transmit>
	return ch;
}
 8000998:	9801      	ldr	r0, [sp, #4]
 800099a:	b003      	add	sp, #12
 800099c:	bd00      	pop	{pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	200002cc 	.word	0x200002cc

080009a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//Callback whenever a timer rolls over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim == &htim2) { //100Hz
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80009a6:	4283      	cmp	r3, r0
 80009a8:	d000      	beq.n	80009ac <HAL_TIM_PeriodElapsedCallback+0x8>
		p.print_flag = 1;
	}
}
 80009aa:	4770      	bx	lr
		p.print_flag = 1;
 80009ac:	23de      	movs	r3, #222	; 0xde
 80009ae:	2101      	movs	r1, #1
 80009b0:	4a02      	ldr	r2, [pc, #8]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x18>)
 80009b2:	54d1      	strb	r1, [r2, r3]
}
 80009b4:	e7f9      	b.n	80009aa <HAL_TIM_PeriodElapsedCallback+0x6>
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	20000284 	.word	0x20000284
 80009bc:	20000354 	.word	0x20000354

080009c0 <HAL_I2C_SlaveTxCpltCallback>:
 *         you can add your own implementation.
 * @retval None
 */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
	p.i2c_complete_flag = 1;
 80009c0:	23df      	movs	r3, #223	; 0xdf
 80009c2:	2101      	movs	r1, #1
 80009c4:	4a01      	ldr	r2, [pc, #4]	; (80009cc <HAL_I2C_SlaveTxCpltCallback+0xc>)
 80009c6:	54d1      	strb	r1, [r2, r3]
}
 80009c8:	4770      	bx	lr
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	20000354 	.word	0x20000354

080009d0 <Error_Handler>:
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	LED_RED;
 80009d0:	2201      	movs	r2, #1
 80009d2:	2101      	movs	r1, #1
void Error_Handler(void) {
 80009d4:	b510      	push	{r4, lr}
	LED_RED;
 80009d6:	4808      	ldr	r0, [pc, #32]	; (80009f8 <Error_Handler+0x28>)
 80009d8:	f001 fb12 	bl	8002000 <HAL_GPIO_WritePin>
	printf("ERROR HANDLER \n");
 80009dc:	4807      	ldr	r0, [pc, #28]	; (80009fc <Error_Handler+0x2c>)
 80009de:	f004 fc17 	bl	8005210 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e2:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009e4:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <Error_Handler+0x30>)
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <Error_Handler+0x34>)
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	e7fd      	b.n	80009f2 <Error_Handler+0x22>
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	48001400 	.word	0x48001400
 80009fc:	080064cc 	.word	0x080064cc
 8000a00:	e000ed00 	.word	0xe000ed00
 8000a04:	05fa0004 	.word	0x05fa0004

08000a08 <SystemClock_Config>:
void SystemClock_Config(void) {
 8000a08:	b530      	push	{r4, r5, lr}
 8000a0a:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a0c:	222c      	movs	r2, #44	; 0x2c
 8000a0e:	2100      	movs	r1, #0
 8000a10:	a809      	add	r0, sp, #36	; 0x24
 8000a12:	f004 fb83 	bl	800511c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a16:	2210      	movs	r2, #16
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4668      	mov	r0, sp
 8000a1c:	f004 fb7e 	bl	800511c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000a20:	2210      	movs	r2, #16
 8000a22:	2100      	movs	r1, #0
 8000a24:	a804      	add	r0, sp, #16
 8000a26:	f004 fb79 	bl	800511c <memset>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI14;
 8000a2a:	2312      	movs	r3, #18
 8000a2c:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2e:	3b11      	subs	r3, #17
 8000a30:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000a32:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a34:	3301      	adds	r3, #1
 8000a36:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000a38:	23a0      	movs	r3, #160	; 0xa0
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a3a:	2410      	movs	r4, #16
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000a3c:	039b      	lsls	r3, r3, #14
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a3e:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a40:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000a42:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000a44:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a46:	f002 f819 	bl	8002a7c <HAL_RCC_OscConfig>
 8000a4a:	2800      	cmp	r0, #0
 8000a4c:	d118      	bne.n	8000a80 <SystemClock_Config+0x78>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000a4e:	2207      	movs	r2, #7
 8000a50:	2302      	movs	r3, #2
 8000a52:	2400      	movs	r4, #0
 8000a54:	2500      	movs	r5, #0
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000a56:	2101      	movs	r1, #1
 8000a58:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000a5a:	9200      	str	r2, [sp, #0]
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	9402      	str	r4, [sp, #8]
 8000a60:	9503      	str	r5, [sp, #12]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000a62:	f002 fa65 	bl	8002f30 <HAL_RCC_ClockConfig>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	d10a      	bne.n	8000a80 <SystemClock_Config+0x78>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
 8000a6a:	2321      	movs	r3, #33	; 0x21
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000a6c:	a804      	add	r0, sp, #16
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a6e:	9406      	str	r4, [sp, #24]
 8000a70:	9507      	str	r5, [sp, #28]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
 8000a72:	9304      	str	r3, [sp, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000a74:	f002 fb46 	bl	8003104 <HAL_RCCEx_PeriphCLKConfig>
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	d101      	bne.n	8000a80 <SystemClock_Config+0x78>
}
 8000a7c:	b015      	add	sp, #84	; 0x54
 8000a7e:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 8000a80:	f7ff ffa6 	bl	80009d0 <Error_Handler>

08000a84 <main>:
int main(void) {
 8000a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a86:	b0ab      	sub	sp, #172	; 0xac
	HAL_Init();
 8000a88:	f000 fcf4 	bl	8001474 <HAL_Init>
	SystemClock_Config();
 8000a8c:	f7ff ffbc 	bl	8000a08 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a90:	2214      	movs	r2, #20
 8000a92:	2100      	movs	r1, #0
 8000a94:	a822      	add	r0, sp, #136	; 0x88
 8000a96:	f004 fb41 	bl	800511c <memset>
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9a:	2180      	movs	r1, #128	; 0x80
 8000a9c:	4ce5      	ldr	r4, [pc, #916]	; (8000e34 <main+0x3b0>)
 8000a9e:	03c9      	lsls	r1, r1, #15
 8000aa0:	6962      	ldr	r2, [r4, #20]
	HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 8000aa2:	48e5      	ldr	r0, [pc, #916]	; (8000e38 <main+0x3b4>)
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	6162      	str	r2, [r4, #20]
 8000aa8:	6963      	ldr	r3, [r4, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2500      	movs	r5, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000aac:	400b      	ands	r3, r1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2180      	movs	r1, #128	; 0x80
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	6962      	ldr	r2, [r4, #20]
 8000ab6:	0289      	lsls	r1, r1, #10
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	6162      	str	r2, [r4, #20]
 8000abc:	6963      	ldr	r3, [r4, #20]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000abe:	2601      	movs	r6, #1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	400b      	ands	r3, r1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2180      	movs	r1, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	9302      	str	r3, [sp, #8]
 8000ac6:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac8:	6962      	ldr	r2, [r4, #20]
 8000aca:	02c9      	lsls	r1, r1, #11
 8000acc:	430a      	orrs	r2, r1
 8000ace:	6162      	str	r2, [r4, #20]
 8000ad0:	6963      	ldr	r3, [r4, #20]
	HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad4:	400b      	ands	r3, r1
 8000ad6:	9303      	str	r3, [sp, #12]
	HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 8000ad8:	21c3      	movs	r1, #195	; 0xc3
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 8000adc:	f001 fa90 	bl	8002000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USART_DE_GPIO_Port, USART_DE_Pin, GPIO_PIN_RESET);
 8000ae0:	2090      	movs	r0, #144	; 0x90
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	05c0      	lsls	r0, r0, #23
 8000ae8:	f001 fa8a 	bl	8002000 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin;
 8000aec:	22c3      	movs	r2, #195	; 0xc3
 8000aee:	2301      	movs	r3, #1
 8000af0:	9222      	str	r2, [sp, #136]	; 0x88
 8000af2:	9323      	str	r3, [sp, #140]	; 0x8c
 8000af4:	2200      	movs	r2, #0
 8000af6:	2300      	movs	r3, #0
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000af8:	48cf      	ldr	r0, [pc, #828]	; (8000e38 <main+0x3b4>)
 8000afa:	a922      	add	r1, sp, #136	; 0x88
	GPIO_InitStruct.Pin = LED_STATUS_Pin | MAG_NCS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin;
 8000afc:	9224      	str	r2, [sp, #144]	; 0x90
 8000afe:	9325      	str	r3, [sp, #148]	; 0x94
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b00:	f001 f972 	bl	8001de8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USART_DE_Pin;
 8000b04:	2202      	movs	r2, #2
 8000b06:	2301      	movs	r3, #1
	HAL_GPIO_Init(USART_DE_GPIO_Port, &GPIO_InitStruct);
 8000b08:	2090      	movs	r0, #144	; 0x90
	GPIO_InitStruct.Pin = USART_DE_Pin;
 8000b0a:	9222      	str	r2, [sp, #136]	; 0x88
 8000b0c:	9323      	str	r3, [sp, #140]	; 0x8c
 8000b0e:	2202      	movs	r2, #2
 8000b10:	2300      	movs	r3, #0
	HAL_GPIO_Init(USART_DE_GPIO_Port, &GPIO_InitStruct);
 8000b12:	a922      	add	r1, sp, #136	; 0x88
 8000b14:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = USART_DE_Pin;
 8000b16:	9224      	str	r2, [sp, #144]	; 0x90
 8000b18:	9325      	str	r3, [sp, #148]	; 0x94
	HAL_GPIO_Init(USART_DE_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f001 f965 	bl	8001de8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = OC_SEL_Pin;
 8000b1e:	2280      	movs	r2, #128	; 0x80
	HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8000b20:	2090      	movs	r0, #144	; 0x90
	GPIO_InitStruct.Pin = OC_SEL_Pin;
 8000b22:	2300      	movs	r3, #0
 8000b24:	0112      	lsls	r2, r2, #4
	HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8000b26:	a922      	add	r1, sp, #136	; 0x88
 8000b28:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = OC_SEL_Pin;
 8000b2a:	9222      	str	r2, [sp, #136]	; 0x88
 8000b2c:	9323      	str	r3, [sp, #140]	; 0x8c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	9524      	str	r5, [sp, #144]	; 0x90
	HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f001 f95a 	bl	8001de8 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000b34:	6963      	ldr	r3, [r4, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000b38:	4333      	orrs	r3, r6
 8000b3a:	6163      	str	r3, [r4, #20]
 8000b3c:	6963      	ldr	r3, [r4, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b3e:	2100      	movs	r1, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000b40:	4033      	ands	r3, r6
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b42:	2009      	movs	r0, #9
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	9b00      	ldr	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b48:	f000 ffec 	bl	8001b24 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b4c:	2009      	movs	r0, #9
 8000b4e:	f001 f81b 	bl	8001b88 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	200b      	movs	r0, #11
 8000b58:	f000 ffe4 	bl	8001b24 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000b5c:	200b      	movs	r0, #11
 8000b5e:	f001 f813 	bl	8001b88 <HAL_NVIC_EnableIRQ>
	hi2c1.Instance = I2C1;
 8000b62:	4cb6      	ldr	r4, [pc, #728]	; (8000e3c <main+0x3b8>)
 8000b64:	4bb6      	ldr	r3, [pc, #728]	; (8000e40 <main+0x3bc>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000b66:	0020      	movs	r0, r4
	hi2c1.Instance = I2C1;
 8000b68:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x2000090E;
 8000b6a:	4bb6      	ldr	r3, [pc, #728]	; (8000e44 <main+0x3c0>)
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6c:	60e6      	str	r6, [r4, #12]
	hi2c1.Init.Timing = 0x2000090E;
 8000b6e:	6063      	str	r3, [r4, #4]
	hi2c1.Init.OwnAddress1 = 18;
 8000b70:	2312      	movs	r3, #18
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b72:	6125      	str	r5, [r4, #16]
	hi2c1.Init.OwnAddress1 = 18;
 8000b74:	60a3      	str	r3, [r4, #8]
	hi2c1.Init.OwnAddress2 = 0;
 8000b76:	6165      	str	r5, [r4, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b78:	61a5      	str	r5, [r4, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7a:	61e5      	str	r5, [r4, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7c:	6225      	str	r5, [r4, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000b7e:	f001 fa45 	bl	800200c <HAL_I2C_Init>
 8000b82:	2800      	cmp	r0, #0
 8000b84:	d000      	beq.n	8000b88 <main+0x104>
 8000b86:	e152      	b.n	8000e2e <main+0x3aa>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000b88:	2100      	movs	r1, #0
 8000b8a:	0020      	movs	r0, r4
 8000b8c:	f001 ff28 	bl	80029e0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d000      	beq.n	8000b96 <main+0x112>
 8000b94:	e14b      	b.n	8000e2e <main+0x3aa>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000b96:	2100      	movs	r1, #0
 8000b98:	0020      	movs	r0, r4
 8000b9a:	f001 ff49 	bl	8002a30 <HAL_I2CEx_ConfigDigitalFilter>
 8000b9e:	1e05      	subs	r5, r0, #0
 8000ba0:	d000      	beq.n	8000ba4 <main+0x120>
 8000ba2:	e144      	b.n	8000e2e <main+0x3aa>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000ba4:	220c      	movs	r2, #12
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	a808      	add	r0, sp, #32
 8000baa:	f004 fab7 	bl	800511c <memset>
	hadc.Instance = ADC1;
 8000bae:	4ca6      	ldr	r4, [pc, #664]	; (8000e48 <main+0x3c4>)
 8000bb0:	4ba6      	ldr	r3, [pc, #664]	; (8000e4c <main+0x3c8>)
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bb2:	2704      	movs	r7, #4
	hadc.Instance = ADC1;
 8000bb4:	6023      	str	r3, [r4, #0]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb6:	23c2      	movs	r3, #194	; 0xc2
 8000bb8:	33ff      	adds	r3, #255	; 0xff
 8000bba:	61e3      	str	r3, [r4, #28]
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000bbc:	3b9e      	subs	r3, #158	; 0x9e
 8000bbe:	3bff      	subs	r3, #255	; 0xff
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000bc0:	0020      	movs	r0, r4
	hadc.Init.LowPowerAutoWait = DISABLE;
 8000bc2:	61a5      	str	r5, [r4, #24]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bc4:	6065      	str	r5, [r4, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc6:	60a5      	str	r5, [r4, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bc8:	60e5      	str	r5, [r4, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000bca:	6126      	str	r6, [r4, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bcc:	6167      	str	r7, [r4, #20]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bce:	6225      	str	r5, [r4, #32]
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000bd0:	54e5      	strb	r5, [r4, r3]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bd2:	62a6      	str	r6, [r4, #40]	; 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000bd4:	f000 fd52 	bl	800167c <HAL_ADC_Init>
 8000bd8:	2800      	cmp	r0, #0
 8000bda:	d000      	beq.n	8000bde <main+0x15a>
 8000bdc:	e127      	b.n	8000e2e <main+0x3aa>
	sConfig.Channel = ADC_CHANNEL_0;
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	2200      	movs	r2, #0
 8000be2:	015b      	lsls	r3, r3, #5
 8000be4:	9208      	str	r2, [sp, #32]
 8000be6:	9309      	str	r3, [sp, #36]	; 0x24
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000be8:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000bea:	0020      	movs	r0, r4
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bec:	055b      	lsls	r3, r3, #21
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000bee:	a908      	add	r1, sp, #32
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bf0:	930a      	str	r3, [sp, #40]	; 0x28
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000bf2:	f000 feab 	bl	800194c <HAL_ADC_ConfigChannel>
 8000bf6:	2800      	cmp	r0, #0
 8000bf8:	d000      	beq.n	8000bfc <main+0x178>
 8000bfa:	e118      	b.n	8000e2e <main+0x3aa>
	sConfig.Channel = ADC_CHANNEL_3;
 8000bfc:	2303      	movs	r3, #3
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000bfe:	0020      	movs	r0, r4
 8000c00:	a908      	add	r1, sp, #32
	sConfig.Channel = ADC_CHANNEL_3;
 8000c02:	9308      	str	r3, [sp, #32]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000c04:	f000 fea2 	bl	800194c <HAL_ADC_ConfigChannel>
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	d000      	beq.n	8000c0e <main+0x18a>
 8000c0c:	e10f      	b.n	8000e2e <main+0x3aa>
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000c0e:	0020      	movs	r0, r4
 8000c10:	a908      	add	r1, sp, #32
	sConfig.Channel = ADC_CHANNEL_4;
 8000c12:	9708      	str	r7, [sp, #32]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000c14:	f000 fe9a 	bl	800194c <HAL_ADC_ConfigChannel>
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d000      	beq.n	8000c1e <main+0x19a>
 8000c1c:	e107      	b.n	8000e2e <main+0x3aa>
	sConfig.Channel = ADC_CHANNEL_9;
 8000c1e:	2309      	movs	r3, #9
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000c20:	0020      	movs	r0, r4
 8000c22:	a908      	add	r1, sp, #32
	sConfig.Channel = ADC_CHANNEL_9;
 8000c24:	9308      	str	r3, [sp, #32]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000c26:	f000 fe91 	bl	800194c <HAL_ADC_ConfigChannel>
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	d000      	beq.n	8000c30 <main+0x1ac>
 8000c2e:	e0fe      	b.n	8000e2e <main+0x3aa>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c30:	2310      	movs	r3, #16
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000c32:	0020      	movs	r0, r4
 8000c34:	a908      	add	r1, sp, #32
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c36:	9308      	str	r3, [sp, #32]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000c38:	f000 fe88 	bl	800194c <HAL_ADC_ConfigChannel>
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	d000      	beq.n	8000c42 <main+0x1be>
 8000c40:	e0f5      	b.n	8000e2e <main+0x3aa>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000c42:	2311      	movs	r3, #17
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000c44:	0020      	movs	r0, r4
 8000c46:	a908      	add	r1, sp, #32
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000c48:	9308      	str	r3, [sp, #32]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000c4a:	f000 fe7f 	bl	800194c <HAL_ADC_ConfigChannel>
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	d000      	beq.n	8000c54 <main+0x1d0>
 8000c52:	e0ec      	b.n	8000e2e <main+0x3aa>
	hspi1.Instance = SPI1;
 8000c54:	487e      	ldr	r0, [pc, #504]	; (8000e50 <main+0x3cc>)
 8000c56:	4b7f      	ldr	r3, [pc, #508]	; (8000e54 <main+0x3d0>)
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c58:	22e0      	movs	r2, #224	; 0xe0
	hspi1.Instance = SPI1;
 8000c5a:	6003      	str	r3, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c5c:	2382      	movs	r3, #130	; 0x82
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c5e:	00d2      	lsls	r2, r2, #3
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c60:	005b      	lsls	r3, r3, #1
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c62:	60c2      	str	r2, [r0, #12]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c64:	2680      	movs	r6, #128	; 0x80
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c66:	2202      	movs	r2, #2
	hspi1.Init.CRCPolynomial = 7;
 8000c68:	2107      	movs	r1, #7
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c6a:	6043      	str	r3, [r0, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c6c:	2300      	movs	r3, #0
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c6e:	6102      	str	r2, [r0, #16]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c70:	00b6      	lsls	r6, r6, #2
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c72:	3206      	adds	r2, #6
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c74:	6083      	str	r3, [r0, #8]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c76:	6143      	str	r3, [r0, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c78:	6186      	str	r6, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c7a:	61c2      	str	r2, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c7c:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7e:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c80:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000c82:	62c1      	str	r1, [r0, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c84:	6303      	str	r3, [r0, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c86:	6342      	str	r2, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000c88:	f002 fc0a 	bl	80034a0 <HAL_SPI_Init>
 8000c8c:	1e05      	subs	r5, r0, #0
 8000c8e:	d000      	beq.n	8000c92 <main+0x20e>
 8000c90:	e0cd      	b.n	8000e2e <main+0x3aa>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000c92:	2210      	movs	r2, #16
 8000c94:	2100      	movs	r1, #0
 8000c96:	a810      	add	r0, sp, #64	; 0x40
 8000c98:	f004 fa40 	bl	800511c <memset>
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8000c9c:	2214      	movs	r2, #20
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	a814      	add	r0, sp, #80	; 0x50
 8000ca2:	f004 fa3b 	bl	800511c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	2100      	movs	r1, #0
 8000caa:	a806      	add	r0, sp, #24
 8000cac:	f004 fa36 	bl	800511c <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000cb0:	221c      	movs	r2, #28
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	a81a      	add	r0, sp, #104	; 0x68
 8000cb6:	f004 fa31 	bl	800511c <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000cba:	2220      	movs	r2, #32
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	a822      	add	r0, sp, #136	; 0x88
 8000cc0:	f004 fa2c 	bl	800511c <memset>
	htim1.Instance = TIM1;
 8000cc4:	4c64      	ldr	r4, [pc, #400]	; (8000e58 <main+0x3d4>)
 8000cc6:	4b65      	ldr	r3, [pc, #404]	; (8000e5c <main+0x3d8>)
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000cc8:	0020      	movs	r0, r4
	htim1.Instance = TIM1;
 8000cca:	6023      	str	r3, [r4, #0]
	htim1.Init.Prescaler = 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	6063      	str	r3, [r4, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000cd0:	331f      	adds	r3, #31
 8000cd2:	60a3      	str	r3, [r4, #8]
	htim1.Init.Period = 512;
 8000cd4:	60e6      	str	r6, [r4, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd6:	6125      	str	r5, [r4, #16]
	htim1.Init.RepetitionCounter = 0;
 8000cd8:	6165      	str	r5, [r4, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cda:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000cdc:	f002 fe86 	bl	80039ec <HAL_TIM_Base_Init>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d000      	beq.n	8000ce6 <main+0x262>
 8000ce4:	e0a3      	b.n	8000e2e <main+0x3aa>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce6:	2380      	movs	r3, #128	; 0x80
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000ce8:	0020      	movs	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cea:	015b      	lsls	r3, r3, #5
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000cec:	a910      	add	r1, sp, #64	; 0x40
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cee:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000cf0:	f003 f91e 	bl	8003f30 <HAL_TIM_ConfigClockSource>
 8000cf4:	2800      	cmp	r0, #0
 8000cf6:	d000      	beq.n	8000cfa <main+0x276>
 8000cf8:	e099      	b.n	8000e2e <main+0x3aa>
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000cfa:	0020      	movs	r0, r4
 8000cfc:	f002 ff1c 	bl	8003b38 <HAL_TIM_PWM_Init>
 8000d00:	2800      	cmp	r0, #0
 8000d02:	d000      	beq.n	8000d06 <main+0x282>
 8000d04:	e093      	b.n	8000e2e <main+0x3aa>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000d06:	2205      	movs	r2, #5
 8000d08:	2370      	movs	r3, #112	; 0x70
 8000d0a:	9214      	str	r2, [sp, #80]	; 0x50
 8000d0c:	9315      	str	r3, [sp, #84]	; 0x54
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	2300      	movs	r3, #0
 8000d12:	0212      	lsls	r2, r2, #8
	sSlaveConfig.TriggerFilter = 0;
 8000d14:	9018      	str	r0, [sp, #96]	; 0x60
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8000d16:	a914      	add	r1, sp, #80	; 0x50
 8000d18:	0020      	movs	r0, r4
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000d1a:	9216      	str	r2, [sp, #88]	; 0x58
 8000d1c:	9317      	str	r3, [sp, #92]	; 0x5c
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8000d1e:	f003 f9c3 	bl	80040a8 <HAL_TIM_SlaveConfigSynchro>
 8000d22:	2800      	cmp	r0, #0
 8000d24:	d000      	beq.n	8000d28 <main+0x2a4>
 8000d26:	e082      	b.n	8000e2e <main+0x3aa>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d28:	2600      	movs	r6, #0
 8000d2a:	2700      	movs	r7, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000d2c:	0020      	movs	r0, r4
 8000d2e:	a906      	add	r1, sp, #24
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d30:	9606      	str	r6, [sp, #24]
 8000d32:	9707      	str	r7, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000d34:	f003 fb46 	bl	80043c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d38:	2800      	cmp	r0, #0
 8000d3a:	d178      	bne.n	8000e2e <main+0x3aa>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3c:	2260      	movs	r2, #96	; 0x60
 8000d3e:	2300      	movs	r3, #0
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d40:	9020      	str	r0, [sp, #128]	; 0x80
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d42:	921a      	str	r2, [sp, #104]	; 0x68
 8000d44:	931b      	str	r3, [sp, #108]	; 0x6c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000d46:	0020      	movs	r0, r4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	a91a      	add	r1, sp, #104	; 0x68
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d4c:	961c      	str	r6, [sp, #112]	; 0x70
 8000d4e:	971d      	str	r7, [sp, #116]	; 0x74
 8000d50:	961e      	str	r6, [sp, #120]	; 0x78
 8000d52:	971f      	str	r7, [sp, #124]	; 0x7c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000d54:	f002 ffca 	bl	8003cec <HAL_TIM_PWM_ConfigChannel>
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	d168      	bne.n	8000e2e <main+0x3aa>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	0020      	movs	r0, r4
 8000d60:	a91a      	add	r1, sp, #104	; 0x68
 8000d62:	f002 ffc3 	bl	8003cec <HAL_TIM_PWM_ConfigChannel>
 8000d66:	2800      	cmp	r0, #0
 8000d68:	d161      	bne.n	8000e2e <main+0x3aa>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000d6a:	2208      	movs	r2, #8
 8000d6c:	0020      	movs	r0, r4
 8000d6e:	a91a      	add	r1, sp, #104	; 0x68
 8000d70:	f002 ffbc 	bl	8003cec <HAL_TIM_PWM_ConfigChannel>
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d15a      	bne.n	8000e2e <main+0x3aa>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d78:	2200      	movs	r2, #0
 8000d7a:	230a      	movs	r3, #10
 8000d7c:	9224      	str	r2, [sp, #144]	; 0x90
 8000d7e:	9325      	str	r3, [sp, #148]	; 0x94
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	2200      	movs	r2, #0
 8000d84:	019b      	lsls	r3, r3, #6
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d86:	9029      	str	r0, [sp, #164]	; 0xa4
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000d88:	a922      	add	r1, sp, #136	; 0x88
 8000d8a:	0020      	movs	r0, r4
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d8c:	9622      	str	r6, [sp, #136]	; 0x88
 8000d8e:	9723      	str	r7, [sp, #140]	; 0x8c
 8000d90:	9226      	str	r2, [sp, #152]	; 0x98
 8000d92:	9327      	str	r3, [sp, #156]	; 0x9c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000d94:	f003 fb44 	bl	8004420 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d148      	bne.n	8000e2e <main+0x3aa>
	HAL_TIM_MspPostInit(&htim1);
 8000d9c:	0020      	movs	r0, r4
 8000d9e:	f000 f9e5 	bl	800116c <HAL_TIM_MspPostInit>
	huart1.Instance = USART1;
 8000da2:	482f      	ldr	r0, [pc, #188]	; (8000e60 <main+0x3dc>)
 8000da4:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <main+0x3e0>)
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000da6:	220c      	movs	r2, #12
	huart1.Instance = USART1;
 8000da8:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 115200;
 8000daa:	23e1      	movs	r3, #225	; 0xe1
 8000dac:	025b      	lsls	r3, r3, #9
 8000dae:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db0:	2300      	movs	r3, #0
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000db2:	6142      	str	r2, [r0, #20]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db4:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000db6:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000db8:	6103      	str	r3, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dba:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dbe:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc0:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000dc2:	f004 f8b7 	bl	8004f34 <HAL_UART_Init>
 8000dc6:	1e05      	subs	r5, r0, #0
 8000dc8:	d131      	bne.n	8000e2e <main+0x3aa>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000dca:	2210      	movs	r2, #16
 8000dcc:	2100      	movs	r1, #0
 8000dce:	a80c      	add	r0, sp, #48	; 0x30
 8000dd0:	f004 f9a4 	bl	800511c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000dd4:	2208      	movs	r2, #8
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	a804      	add	r0, sp, #16
 8000dda:	f004 f99f 	bl	800511c <memset>
	htim2.Instance = TIM2;
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	4c21      	ldr	r4, [pc, #132]	; (8000e68 <main+0x3e4>)
 8000de2:	05db      	lsls	r3, r3, #23
 8000de4:	6023      	str	r3, [r4, #0]
	htim2.Init.Prescaler = 47;
 8000de6:	232f      	movs	r3, #47	; 0x2f
 8000de8:	6063      	str	r3, [r4, #4]
	htim2.Init.Period = 10000;
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <main+0x3e8>)
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000dec:	0020      	movs	r0, r4
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dee:	60a5      	str	r5, [r4, #8]
	htim2.Init.Period = 10000;
 8000df0:	60e3      	str	r3, [r4, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df2:	6125      	str	r5, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df4:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000df6:	f002 fdf9 	bl	80039ec <HAL_TIM_Base_Init>
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	d117      	bne.n	8000e2e <main+0x3aa>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfe:	2380      	movs	r3, #128	; 0x80
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000e00:	0020      	movs	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e02:	015b      	lsls	r3, r3, #5
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000e04:	a90c      	add	r1, sp, #48	; 0x30
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e06:	930c      	str	r3, [sp, #48]	; 0x30
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000e08:	f003 f892 	bl	8003f30 <HAL_TIM_ConfigClockSource>
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	d10e      	bne.n	8000e2e <main+0x3aa>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e10:	2200      	movs	r2, #0
 8000e12:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000e14:	0020      	movs	r0, r4
 8000e16:	a904      	add	r1, sp, #16
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e18:	9204      	str	r2, [sp, #16]
 8000e1a:	9305      	str	r3, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000e1c:	f003 fad2 	bl	80043c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e20:	2800      	cmp	r0, #0
 8000e22:	d104      	bne.n	8000e2e <main+0x3aa>
	foc_startup();
 8000e24:	f7ff faf0 	bl	8000408 <foc_startup>
		foc_loop();
 8000e28:	f7ff fbbc 	bl	80005a4 <foc_loop>
 8000e2c:	e7fc      	b.n	8000e28 <main+0x3a4>
		Error_Handler();
 8000e2e:	f7ff fdcf 	bl	80009d0 <Error_Handler>
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	40021000 	.word	0x40021000
 8000e38:	48001400 	.word	0x48001400
 8000e3c:	20000184 	.word	0x20000184
 8000e40:	40005400 	.word	0x40005400
 8000e44:	2000090e 	.word	0x2000090e
 8000e48:	200000bc 	.word	0x200000bc
 8000e4c:	40012400 	.word	0x40012400
 8000e50:	200001d8 	.word	0x200001d8
 8000e54:	40013000 	.word	0x40013000
 8000e58:	2000023c 	.word	0x2000023c
 8000e5c:	40012c00 	.word	0x40012c00
 8000e60:	200002cc 	.word	0x200002cc
 8000e64:	40013800 	.word	0x40013800
 8000e68:	20000284 	.word	0x20000284
 8000e6c:	00002710 	.word	0x00002710

08000e70 <HAL_I2C_AddrCallback>:
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8000e70:	b510      	push	{r4, lr}
	if (TransferDirection != 0) {
 8000e72:	2900      	cmp	r1, #0
 8000e74:	d009      	beq.n	8000e8a <HAL_I2C_AddrCallback+0x1a>
		status = HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t*) p.i2c_TX, I2CSIZE, I2C_FIRST_AND_LAST_FRAME);
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	2202      	movs	r2, #2
 8000e7a:	490d      	ldr	r1, [pc, #52]	; (8000eb0 <HAL_I2C_AddrCallback+0x40>)
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <HAL_I2C_AddrCallback+0x44>)
 8000e7e:	049b      	lsls	r3, r3, #18
 8000e80:	f001 f91e 	bl	80020c0 <HAL_I2C_Slave_Seq_Transmit_IT>
	if (status != HAL_OK) {
 8000e84:	2800      	cmp	r0, #0
 8000e86:	d110      	bne.n	8000eaa <HAL_I2C_AddrCallback+0x3a>
}
 8000e88:	bd10      	pop	{r4, pc}
		status = HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t*) p.i2c_RX, I2CSIZE, I2C_FIRST_AND_LAST_FRAME);
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	4c0a      	ldr	r4, [pc, #40]	; (8000eb8 <HAL_I2C_AddrCallback+0x48>)
 8000e8e:	2202      	movs	r2, #2
 8000e90:	049b      	lsls	r3, r3, #18
 8000e92:	0021      	movs	r1, r4
 8000e94:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <HAL_I2C_AddrCallback+0x44>)
 8000e96:	f001 f98d 	bl	80021b4 <HAL_I2C_Slave_Seq_Receive_IT>
		p.i2c_TX[0] = p.i2c_RX[0] + 1;
 8000e9a:	7822      	ldrb	r2, [r4, #0]
 8000e9c:	1ea3      	subs	r3, r4, #2
 8000e9e:	3201      	adds	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
		p.i2c_TX[1] = p.i2c_RX[1] + 1;
 8000ea2:	7862      	ldrb	r2, [r4, #1]
 8000ea4:	3201      	adds	r2, #1
 8000ea6:	705a      	strb	r2, [r3, #1]
 8000ea8:	e7ec      	b.n	8000e84 <HAL_I2C_AddrCallback+0x14>
		Error_Handler();
 8000eaa:	f7ff fd91 	bl	80009d0 <Error_Handler>
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	20000354 	.word	0x20000354
 8000eb4:	20000184 	.word	0x20000184
 8000eb8:	20000356 	.word	0x20000356

08000ebc <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle) {
 8000ebc:	b510      	push	{r4, lr}
	if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF) {
 8000ebe:	f001 fd8d 	bl	80029dc <HAL_I2C_GetError>
 8000ec2:	2804      	cmp	r0, #4
 8000ec4:	d100      	bne.n	8000ec8 <HAL_I2C_ErrorCallback+0xc>
}
 8000ec6:	bd10      	pop	{r4, pc}
		Error_Handler();
 8000ec8:	f7ff fd82 	bl	80009d0 <Error_Handler>

08000ecc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_MspInit+0x2c>)
{
 8000ed0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	6999      	ldr	r1, [r3, #24]
 8000ed4:	4311      	orrs	r1, r2
 8000ed6:	6199      	str	r1, [r3, #24]
 8000ed8:	6999      	ldr	r1, [r3, #24]
 8000eda:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000edc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	9200      	str	r2, [sp, #0]
 8000ee0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	69da      	ldr	r2, [r3, #28]
 8000ee4:	0549      	lsls	r1, r1, #21
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	61da      	str	r2, [r3, #28]
 8000eea:	69db      	ldr	r3, [r3, #28]
 8000eec:	400b      	ands	r3, r1
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef2:	b002      	add	sp, #8
 8000ef4:	4770      	bx	lr
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	40021000 	.word	0x40021000

08000efc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000efc:	b570      	push	{r4, r5, r6, lr}
 8000efe:	0004      	movs	r4, r0
 8000f00:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	2214      	movs	r2, #20
 8000f04:	2100      	movs	r1, #0
 8000f06:	a804      	add	r0, sp, #16
 8000f08:	f004 f908 	bl	800511c <memset>
  if(hadc->Instance==ADC1)
 8000f0c:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <HAL_ADC_MspInit+0xb4>)
 8000f0e:	6822      	ldr	r2, [r4, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d001      	beq.n	8000f18 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f14:	b00a      	add	sp, #40	; 0x28
 8000f16:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f18:	2080      	movs	r0, #128	; 0x80
 8000f1a:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <HAL_ADC_MspInit+0xb8>)
 8000f1c:	0080      	lsls	r0, r0, #2
 8000f1e:	6999      	ldr	r1, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2600      	movs	r6, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f22:	4301      	orrs	r1, r0
 8000f24:	6199      	str	r1, [r3, #24]
 8000f26:	699a      	ldr	r2, [r3, #24]
 8000f28:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f2c:	9201      	str	r2, [sp, #4]
 8000f2e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	6959      	ldr	r1, [r3, #20]
 8000f32:	0280      	lsls	r0, r0, #10
 8000f34:	4301      	orrs	r1, r0
 8000f36:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f38:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3c:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4002      	ands	r2, r0
 8000f40:	9202      	str	r2, [sp, #8]
 8000f42:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	615a      	str	r2, [r3, #20]
 8000f4c:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = OP_V_O_Pin|OP_W_O_Pin|GPIO_PIN_4;
 8000f4e:	2219      	movs	r2, #25
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	400b      	ands	r3, r1
 8000f52:	9303      	str	r3, [sp, #12]
 8000f54:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = OP_V_O_Pin|OP_W_O_Pin|GPIO_PIN_4;
 8000f56:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	a904      	add	r1, sp, #16
 8000f5a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = OP_V_O_Pin|OP_W_O_Pin|GPIO_PIN_4;
 8000f5c:	9204      	str	r2, [sp, #16]
 8000f5e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f000 ff42 	bl	8001de8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OP_U_O_Pin;
 8000f64:	2303      	movs	r3, #3
 8000f66:	2202      	movs	r2, #2
    HAL_GPIO_Init(OP_U_O_GPIO_Port, &GPIO_InitStruct);
 8000f68:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <HAL_ADC_MspInit+0xbc>)
 8000f6a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = OP_U_O_Pin;
 8000f6c:	9204      	str	r2, [sp, #16]
 8000f6e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(OP_U_O_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f000 ff39 	bl	8001de8 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8000f76:	4d11      	ldr	r5, [pc, #68]	; (8000fbc <HAL_ADC_MspInit+0xc0>)
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_ADC_MspInit+0xc4>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000f7a:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 8000f7c:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f82:	3380      	adds	r3, #128	; 0x80
 8000f84:	612b      	str	r3, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000f8c:	2320      	movs	r3, #32
 8000f8e:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	015b      	lsls	r3, r3, #5
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f94:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f96:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f98:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000f9a:	f000 fe1b 	bl	8001bd4 <HAL_DMA_Init>
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	d102      	bne.n	8000fa8 <HAL_ADC_MspInit+0xac>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000fa2:	6325      	str	r5, [r4, #48]	; 0x30
 8000fa4:	626c      	str	r4, [r5, #36]	; 0x24
}
 8000fa6:	e7b5      	b.n	8000f14 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8000fa8:	f7ff fd12 	bl	80009d0 <Error_Handler>
 8000fac:	e7f9      	b.n	8000fa2 <HAL_ADC_MspInit+0xa6>
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	40012400 	.word	0x40012400
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	48000400 	.word	0x48000400
 8000fbc:	200000fc 	.word	0x200000fc
 8000fc0:	40020008 	.word	0x40020008

08000fc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fc4:	b510      	push	{r4, lr}
 8000fc6:	0004      	movs	r4, r0
 8000fc8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	2214      	movs	r2, #20
 8000fcc:	2100      	movs	r1, #0
 8000fce:	a802      	add	r0, sp, #8
 8000fd0:	f004 f8a4 	bl	800511c <memset>
  if(hi2c->Instance==I2C1)
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_I2C_MspInit+0x6c>)
 8000fd6:	6822      	ldr	r2, [r4, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d001      	beq.n	8000fe0 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fdc:	b008      	add	sp, #32
 8000fde:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	4c14      	ldr	r4, [pc, #80]	; (8001034 <HAL_I2C_MspInit+0x70>)
 8000fe4:	02c9      	lsls	r1, r1, #11
 8000fe6:	6962      	ldr	r2, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	4813      	ldr	r0, [pc, #76]	; (8001038 <HAL_I2C_MspInit+0x74>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	430a      	orrs	r2, r1
 8000fec:	6162      	str	r2, [r4, #20]
 8000fee:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ff0:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	400b      	ands	r3, r1
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ff8:	2312      	movs	r3, #18
 8000ffa:	9202      	str	r2, [sp, #8]
 8000ffc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ffe:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001000:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001002:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001004:	3b02      	subs	r3, #2
 8001006:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001008:	f000 feee 	bl	8001de8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	69e2      	ldr	r2, [r4, #28]
 8001010:	0389      	lsls	r1, r1, #14
 8001012:	430a      	orrs	r2, r1
 8001014:	61e2      	str	r2, [r4, #28]
 8001016:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 800101a:	400b      	ands	r3, r1
 800101c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800101e:	2100      	movs	r1, #0
 8001020:	2017      	movs	r0, #23
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001022:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8001024:	f000 fd7e 	bl	8001b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8001028:	2017      	movs	r0, #23
 800102a:	f000 fdad 	bl	8001b88 <HAL_NVIC_EnableIRQ>
}
 800102e:	e7d5      	b.n	8000fdc <HAL_I2C_MspInit+0x18>
 8001030:	40005400 	.word	0x40005400
 8001034:	40021000 	.word	0x40021000
 8001038:	48000400 	.word	0x48000400

0800103c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800103c:	b510      	push	{r4, lr}
 800103e:	0004      	movs	r4, r0
 8001040:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001042:	2214      	movs	r2, #20
 8001044:	2100      	movs	r1, #0
 8001046:	a802      	add	r0, sp, #8
 8001048:	f004 f868 	bl	800511c <memset>
  if(hspi->Instance==SPI1)
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <HAL_SPI_MspInit+0x6c>)
 800104e:	6822      	ldr	r2, [r4, #0]
 8001050:	429a      	cmp	r2, r3
 8001052:	d001      	beq.n	8001058 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001054:	b008      	add	sp, #32
 8001056:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001058:	2080      	movs	r0, #128	; 0x80
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <HAL_SPI_MspInit+0x70>)
 800105c:	0140      	lsls	r0, r0, #5
 800105e:	6999      	ldr	r1, [r3, #24]
 8001060:	4301      	orrs	r1, r0
 8001062:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001066:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 800106a:	4002      	ands	r2, r0
 800106c:	9200      	str	r2, [sp, #0]
 800106e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	430a      	orrs	r2, r1
 8001076:	615a      	str	r2, [r3, #20]
 8001078:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800107a:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	400b      	ands	r3, r1
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001082:	2302      	movs	r3, #2
 8001084:	9202      	str	r2, [sp, #8]
 8001086:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001088:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	a902      	add	r1, sp, #8
 800108c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001090:	f000 feaa 	bl	8001de8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	2019      	movs	r0, #25
 800109a:	f000 fd43 	bl	8001b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800109e:	2019      	movs	r0, #25
 80010a0:	f000 fd72 	bl	8001b88 <HAL_NVIC_EnableIRQ>
}
 80010a4:	e7d6      	b.n	8001054 <HAL_SPI_MspInit+0x18>
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	40013000 	.word	0x40013000
 80010ac:	40021000 	.word	0x40021000

080010b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b0:	b5d0      	push	{r4, r6, r7, lr}
 80010b2:	0004      	movs	r4, r0
 80010b4:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	2214      	movs	r2, #20
 80010b8:	2100      	movs	r1, #0
 80010ba:	a804      	add	r0, sp, #16
 80010bc:	f004 f82e 	bl	800511c <memset>
  if(htim_base->Instance==TIM1)
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	4a27      	ldr	r2, [pc, #156]	; (8001160 <HAL_TIM_Base_MspInit+0xb0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d005      	beq.n	80010d4 <HAL_TIM_Base_MspInit+0x24>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80010c8:	2280      	movs	r2, #128	; 0x80
 80010ca:	05d2      	lsls	r2, r2, #23
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d035      	beq.n	800113c <HAL_TIM_Base_MspInit+0x8c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010d0:	b00a      	add	sp, #40	; 0x28
 80010d2:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010d4:	2080      	movs	r0, #128	; 0x80
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <HAL_TIM_Base_MspInit+0xb4>)
 80010d8:	0100      	lsls	r0, r0, #4
 80010da:	6999      	ldr	r1, [r3, #24]
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 80010dc:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010de:	4301      	orrs	r1, r0
 80010e0:	6199      	str	r1, [r3, #24]
 80010e2:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 80010e4:	2702      	movs	r7, #2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010e6:	4002      	ands	r2, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ea:	9200      	str	r2, [sp, #0]
 80010ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	6959      	ldr	r1, [r3, #20]
 80010f0:	02c0      	lsls	r0, r0, #11
 80010f2:	4301      	orrs	r1, r0
 80010f4:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2180      	movs	r1, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80010f8:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	0289      	lsls	r1, r1, #10
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	4002      	ands	r2, r0
 8001100:	9201      	str	r2, [sp, #4]
 8001102:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 8001106:	0176      	lsls	r6, r6, #5
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	430a      	orrs	r2, r1
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(OC_COMP_INT_GPIO_Port, &GPIO_InitStruct);
 800110e:	4816      	ldr	r0, [pc, #88]	; (8001168 <HAL_TIM_Base_MspInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	400b      	ands	r3, r1
 8001112:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(OC_COMP_INT_GPIO_Port, &GPIO_InitStruct);
 8001114:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 8001118:	9604      	str	r6, [sp, #16]
 800111a:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800111c:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(OC_COMP_INT_GPIO_Port, &GPIO_InitStruct);
 800111e:	f000 fe63 	bl	8001de8 <HAL_GPIO_Init>
    HAL_GPIO_Init(OC_COMP_INT2_GPIO_Port, &GPIO_InitStruct);
 8001122:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = OC_COMP_INT2_Pin;
 8001124:	2200      	movs	r2, #0
 8001126:	2300      	movs	r3, #0
    HAL_GPIO_Init(OC_COMP_INT2_GPIO_Port, &GPIO_InitStruct);
 8001128:	a904      	add	r1, sp, #16
 800112a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = OC_COMP_INT2_Pin;
 800112c:	9604      	str	r6, [sp, #16]
 800112e:	9705      	str	r7, [sp, #20]
 8001130:	9206      	str	r2, [sp, #24]
 8001132:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001134:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(OC_COMP_INT2_GPIO_Port, &GPIO_InitStruct);
 8001136:	f000 fe57 	bl	8001de8 <HAL_GPIO_Init>
 800113a:	e7c9      	b.n	80010d0 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800113c:	2301      	movs	r3, #1
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001140:	200f      	movs	r0, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001142:	69d1      	ldr	r1, [r2, #28]
 8001144:	4319      	orrs	r1, r3
 8001146:	61d1      	str	r1, [r2, #28]
 8001148:	69d2      	ldr	r2, [r2, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800114a:	2100      	movs	r1, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800114c:	4013      	ands	r3, r2
 800114e:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001150:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001152:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001154:	f000 fce6 	bl	8001b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001158:	200f      	movs	r0, #15
 800115a:	f000 fd15 	bl	8001b88 <HAL_NVIC_EnableIRQ>
}
 800115e:	e7b7      	b.n	80010d0 <HAL_TIM_Base_MspInit+0x20>
 8001160:	40012c00 	.word	0x40012c00
 8001164:	40021000 	.word	0x40021000
 8001168:	48000400 	.word	0x48000400

0800116c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800116c:	b510      	push	{r4, lr}
 800116e:	0004      	movs	r4, r0
 8001170:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	2214      	movs	r2, #20
 8001174:	2100      	movs	r1, #0
 8001176:	a802      	add	r0, sp, #8
 8001178:	f003 ffd0 	bl	800511c <memset>
  if(htim->Instance==TIM1)
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_TIM_MspPostInit+0x78>)
 800117e:	6822      	ldr	r2, [r4, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	d001      	beq.n	8001188 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001184:	b008      	add	sp, #32
 8001186:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	2080      	movs	r0, #128	; 0x80
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_TIM_MspPostInit+0x7c>)
 800118c:	02c0      	lsls	r0, r0, #11
 800118e:	6959      	ldr	r1, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001190:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4301      	orrs	r1, r0
 8001194:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001198:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	0289      	lsls	r1, r1, #10
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119c:	4002      	ands	r2, r0
 800119e:	9200      	str	r2, [sp, #0]
 80011a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	4811      	ldr	r0, [pc, #68]	; (80011ec <HAL_TIM_MspPostInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	430a      	orrs	r2, r1
 80011a8:	615a      	str	r2, [r3, #20]
 80011aa:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|GPIO_PIN_15;
 80011ac:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	400b      	ands	r3, r1
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|GPIO_PIN_15;
 80011b4:	2302      	movs	r3, #2
 80011b6:	0212      	lsls	r2, r2, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|GPIO_PIN_15;
 80011ba:	9202      	str	r2, [sp, #8]
 80011bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80011be:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f000 fe12 	bl	8001de8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HSU_Pin|HSV_Pin|GPIO_PIN_10;
 80011c4:	22e0      	movs	r2, #224	; 0xe0
 80011c6:	2302      	movs	r3, #2
 80011c8:	00d2      	lsls	r2, r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = HSU_Pin|HSV_Pin|GPIO_PIN_10;
 80011cc:	9202      	str	r2, [sp, #8]
 80011ce:	9303      	str	r3, [sp, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	a902      	add	r1, sp, #8
 80011d6:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = HSU_Pin|HSV_Pin|GPIO_PIN_10;
 80011d8:	9204      	str	r2, [sp, #16]
 80011da:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80011dc:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f000 fe03 	bl	8001de8 <HAL_GPIO_Init>
}
 80011e2:	e7cf      	b.n	8001184 <HAL_TIM_MspPostInit+0x18>
 80011e4:	40012c00 	.word	0x40012c00
 80011e8:	40021000 	.word	0x40021000
 80011ec:	48000400 	.word	0x48000400

080011f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f0:	b530      	push	{r4, r5, lr}
 80011f2:	0004      	movs	r4, r0
 80011f4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	2214      	movs	r2, #20
 80011f8:	2100      	movs	r1, #0
 80011fa:	a802      	add	r0, sp, #8
 80011fc:	f003 ff8e 	bl	800511c <memset>
  if(huart->Instance==USART1)
 8001200:	4b25      	ldr	r3, [pc, #148]	; (8001298 <HAL_UART_MspInit+0xa8>)
 8001202:	6822      	ldr	r2, [r4, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001208:	b009      	add	sp, #36	; 0x24
 800120a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800120c:	2080      	movs	r0, #128	; 0x80
 800120e:	4b23      	ldr	r3, [pc, #140]	; (800129c <HAL_UART_MspInit+0xac>)
 8001210:	01c0      	lsls	r0, r0, #7
 8001212:	6999      	ldr	r1, [r3, #24]
 8001214:	4301      	orrs	r1, r0
 8001216:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 800121a:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 800121e:	4002      	ands	r2, r0
 8001220:	9200      	str	r2, [sp, #0]
 8001222:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001228:	430a      	orrs	r2, r1
 800122a:	615a      	str	r2, [r3, #20]
 800122c:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800122e:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	400b      	ands	r3, r1
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001236:	2302      	movs	r3, #2
 8001238:	9202      	str	r2, [sp, #8]
 800123a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001240:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001244:	3b02      	subs	r3, #2
 8001246:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f000 fdce 	bl	8001de8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800124c:	4d15      	ldr	r5, [pc, #84]	; (80012a4 <HAL_UART_MspInit+0xb4>)
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <HAL_UART_MspInit+0xb8>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001250:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001252:	602b      	str	r3, [r5, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001254:	2310      	movs	r3, #16
 8001256:	606b      	str	r3, [r5, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001258:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800125a:	0028      	movs	r0, r5
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800125c:	60ab      	str	r3, [r5, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800125e:	60ea      	str	r2, [r5, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001260:	612b      	str	r3, [r5, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001262:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001264:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001266:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001268:	f000 fcb4 	bl	8001bd4 <HAL_DMA_Init>
 800126c:	2800      	cmp	r0, #0
 800126e:	d110      	bne.n	8001292 <HAL_UART_MspInit+0xa2>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <HAL_UART_MspInit+0xbc>)
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	6811      	ldr	r1, [r2, #0]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001278:	201b      	movs	r0, #27
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 800127a:	430b      	orrs	r3, r1
 800127c:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800127e:	2100      	movs	r1, #0
 8001280:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001282:	6725      	str	r5, [r4, #112]	; 0x70
 8001284:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001286:	f000 fc4d 	bl	8001b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800128a:	201b      	movs	r0, #27
 800128c:	f000 fc7c 	bl	8001b88 <HAL_NVIC_EnableIRQ>
}
 8001290:	e7ba      	b.n	8001208 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8001292:	f7ff fb9d 	bl	80009d0 <Error_Handler>
 8001296:	e7eb      	b.n	8001270 <HAL_UART_MspInit+0x80>
 8001298:	40013800 	.word	0x40013800
 800129c:	40021000 	.word	0x40021000
 80012a0:	00008004 	.word	0x00008004
 80012a4:	20000140 	.word	0x20000140
 80012a8:	40020044 	.word	0x40020044
 80012ac:	40010000 	.word	0x40010000

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	e7fe      	b.n	80012b0 <NMI_Handler>
 80012b2:	46c0      	nop			; (mov r8, r8)

080012b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b4:	e7fe      	b.n	80012b4 <HardFault_Handler>
 80012b6:	46c0      	nop			; (mov r8, r8)

080012b8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012b8:	4770      	bx	lr
 80012ba:	46c0      	nop			; (mov r8, r8)

080012bc <PendSV_Handler>:
 80012bc:	4770      	bx	lr
 80012be:	46c0      	nop			; (mov r8, r8)

080012c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c2:	f000 f8e7 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c6:	bd10      	pop	{r4, pc}

080012c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80012ca:	4802      	ldr	r0, [pc, #8]	; (80012d4 <DMA1_Channel1_IRQHandler+0xc>)
 80012cc:	f000 fd3a 	bl	8001d44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012d0:	bd10      	pop	{r4, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	200000fc 	.word	0x200000fc

080012d8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80012d8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80012da:	4802      	ldr	r0, [pc, #8]	; (80012e4 <DMA1_Channel4_5_IRQHandler+0xc>)
 80012dc:	f000 fd32 	bl	8001d44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80012e0:	bd10      	pop	{r4, pc}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	20000140 	.word	0x20000140

080012e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012ea:	4802      	ldr	r0, [pc, #8]	; (80012f4 <TIM2_IRQHandler+0xc>)
 80012ec:	f002 ff76 	bl	80041dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012f0:	bd10      	pop	{r4, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	20000284 	.word	0x20000284

080012f8 <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80012f8:	4806      	ldr	r0, [pc, #24]	; (8001314 <I2C1_IRQHandler+0x1c>)
{
 80012fa:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80012fc:	6803      	ldr	r3, [r0, #0]
 80012fe:	699a      	ldr	r2, [r3, #24]
 8001300:	23e0      	movs	r3, #224	; 0xe0
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	421a      	tst	r2, r3
 8001306:	d002      	beq.n	800130e <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001308:	f001 fb24 	bl	8002954 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800130c:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800130e:	f000 ffe1 	bl	80022d4 <HAL_I2C_EV_IRQHandler>
}
 8001312:	e7fb      	b.n	800130c <I2C1_IRQHandler+0x14>
 8001314:	20000184 	.word	0x20000184

08001318 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001318:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800131a:	4802      	ldr	r0, [pc, #8]	; (8001324 <SPI1_IRQHandler+0xc>)
 800131c:	f002 faae 	bl	800387c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001320:	bd10      	pop	{r4, pc}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	200001d8 	.word	0x200001d8

08001328 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001328:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800132a:	4802      	ldr	r0, [pc, #8]	; (8001334 <USART1_IRQHandler+0xc>)
 800132c:	f003 faa8 	bl	8004880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001330:	bd10      	pop	{r4, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	200002cc 	.word	0x200002cc

08001338 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001338:	b570      	push	{r4, r5, r6, lr}
 800133a:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133c:	dd07      	ble.n	800134e <_read+0x16>
 800133e:	000c      	movs	r4, r1
 8001340:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 8001342:	e000      	b.n	8001346 <_read+0xe>
 8001344:	bf00      	nop
 8001346:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	3401      	adds	r4, #1
 800134a:	42ac      	cmp	r4, r5
 800134c:	d1f9      	bne.n	8001342 <_read+0xa>
  }

  return len;
}
 800134e:	0030      	movs	r0, r6
 8001350:	bd70      	pop	{r4, r5, r6, pc}
 8001352:	46c0      	nop			; (mov r8, r8)

08001354 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001354:	b570      	push	{r4, r5, r6, lr}
 8001356:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001358:	dd07      	ble.n	800136a <_write+0x16>
 800135a:	000c      	movs	r4, r1
 800135c:	188d      	adds	r5, r1, r2
  {
    __io_putchar(*ptr++);
 800135e:	7820      	ldrb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001360:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 8001362:	f7ff fb0f 	bl	8000984 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	42ac      	cmp	r4, r5
 8001368:	d1f9      	bne.n	800135e <_write+0xa>
  }
  return len;
}
 800136a:	0030      	movs	r0, r6
 800136c:	bd70      	pop	{r4, r5, r6, pc}
 800136e:	46c0      	nop			; (mov r8, r8)

08001370 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8001370:	2001      	movs	r0, #1
}
 8001372:	4240      	negs	r0, r0
 8001374:	4770      	bx	lr
 8001376:	46c0      	nop			; (mov r8, r8)

08001378 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	019b      	lsls	r3, r3, #6
  return 0;
}
 800137c:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800137e:	604b      	str	r3, [r1, #4]
}
 8001380:	4770      	bx	lr
 8001382:	46c0      	nop			; (mov r8, r8)

08001384 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001384:	2001      	movs	r0, #1
 8001386:	4770      	bx	lr

08001388 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001388:	2000      	movs	r0, #0
 800138a:	4770      	bx	lr

0800138c <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <_sbrk+0x34>)
 800138e:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <_sbrk+0x38>)
{
 8001390:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001392:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <_sbrk+0x3c>)
{
 8001396:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001398:	6808      	ldr	r0, [r1, #0]
 800139a:	2800      	cmp	r0, #0
 800139c:	d004      	beq.n	80013a8 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139e:	18c3      	adds	r3, r0, r3
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d806      	bhi.n	80013b2 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80013a4:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80013a6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 80013aa:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 80013ac:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d9f8      	bls.n	80013a4 <_sbrk+0x18>
    errno = ENOMEM;
 80013b2:	f003 fe89 	bl	80050c8 <__errno>
 80013b6:	230c      	movs	r3, #12
 80013b8:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80013ba:	2001      	movs	r0, #1
 80013bc:	4240      	negs	r0, r0
 80013be:	e7f2      	b.n	80013a6 <_sbrk+0x1a>
 80013c0:	00000400 	.word	0x00000400
 80013c4:	20001000 	.word	0x20001000
 80013c8:	20000434 	.word	0x20000434
 80013cc:	20000450 	.word	0x20000450

080013d0 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80013d0:	4770      	bx	lr
 80013d2:	46c0      	nop			; (mov r8, r8)

080013d4 <Reset_Handler>:
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <LoopForever+0x2>)
 80013d6:	4685      	mov	sp, r0
 80013d8:	f7ff fffa 	bl	80013d0 <SystemInit>
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <LoopForever+0x6>)
 80013de:	490d      	ldr	r1, [pc, #52]	; (8001414 <LoopForever+0xa>)
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <LoopForever+0xe>)
 80013e2:	2300      	movs	r3, #0
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:
 80013e6:	58d4      	ldr	r4, [r2, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:
 80013ec:	18c4      	adds	r4, r0, r3
 80013ee:	428c      	cmp	r4, r1
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <LoopForever+0x12>)
 80013f4:	4c0a      	ldr	r4, [pc, #40]	; (8001420 <LoopForever+0x16>)
 80013f6:	2300      	movs	r3, #0
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:
 80013fe:	42a2      	cmp	r2, r4
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>
 8001402:	f003 fe67 	bl	80050d4 <__libc_init_array>
 8001406:	f7ff fb3d 	bl	8000a84 <main>

0800140a <LoopForever>:
 800140a:	e7fe      	b.n	800140a <LoopForever>
 800140c:	20001000 	.word	0x20001000
 8001410:	20000000 	.word	0x20000000
 8001414:	20000070 	.word	0x20000070
 8001418:	080065b8 	.word	0x080065b8
 800141c:	20000070 	.word	0x20000070
 8001420:	2000044c 	.word	0x2000044c

08001424 <ADC1_IRQHandler>:
 8001424:	e7fe      	b.n	8001424 <ADC1_IRQHandler>
	...

08001428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001428:	b510      	push	{r4, lr}
 800142a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800142c:	20fa      	movs	r0, #250	; 0xfa
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_InitTick+0x40>)
 8001430:	0080      	lsls	r0, r0, #2
 8001432:	7819      	ldrb	r1, [r3, #0]
 8001434:	f7fe fe72 	bl	800011c <__udivsi3>
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_InitTick+0x44>)
 800143a:	0001      	movs	r1, r0
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	f7fe fe6d 	bl	800011c <__udivsi3>
 8001442:	f000 fbad 	bl	8001ba0 <HAL_SYSTICK_Config>
 8001446:	2800      	cmp	r0, #0
 8001448:	d10c      	bne.n	8001464 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 800144a:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144c:	2c03      	cmp	r4, #3
 800144e:	d900      	bls.n	8001452 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8001450:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001452:	3802      	subs	r0, #2
 8001454:	2200      	movs	r2, #0
 8001456:	0021      	movs	r1, r4
 8001458:	f000 fb64 	bl	8001b24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <HAL_InitTick+0x48>)
 800145e:	2000      	movs	r0, #0
 8001460:	601c      	str	r4, [r3, #0]
 8001462:	e7f5      	b.n	8001450 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8001464:	2001      	movs	r0, #1
 8001466:	e7f3      	b.n	8001450 <HAL_InitTick+0x28>
 8001468:	20000004 	.word	0x20000004
 800146c:	20000000 	.word	0x20000000
 8001470:	20000008 	.word	0x20000008

08001474 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001474:	2110      	movs	r1, #16
 8001476:	4a06      	ldr	r2, [pc, #24]	; (8001490 <HAL_Init+0x1c>)
{
 8001478:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147a:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800147c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147e:	430b      	orrs	r3, r1
 8001480:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001482:	f7ff ffd1 	bl	8001428 <HAL_InitTick>
  HAL_MspInit();
 8001486:	f7ff fd21 	bl	8000ecc <HAL_MspInit>
}
 800148a:	2000      	movs	r0, #0
 800148c:	bd10      	pop	{r4, pc}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	40022000 	.word	0x40022000

08001494 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001494:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <HAL_IncTick+0x10>)
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <HAL_IncTick+0x14>)
 8001498:	6811      	ldr	r1, [r2, #0]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	185b      	adds	r3, r3, r1
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	4770      	bx	lr
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	20000438 	.word	0x20000438
 80014a8:	20000004 	.word	0x20000004

080014ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014ac:	4b01      	ldr	r3, [pc, #4]	; (80014b4 <HAL_GetTick+0x8>)
 80014ae:	6818      	ldr	r0, [r3, #0]
}
 80014b0:	4770      	bx	lr
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	20000438 	.word	0x20000438

080014b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b8:	b570      	push	{r4, r5, r6, lr}
 80014ba:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014bc:	f7ff fff6 	bl	80014ac <HAL_GetTick>
 80014c0:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c2:	1c63      	adds	r3, r4, #1
 80014c4:	d002      	beq.n	80014cc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <HAL_Delay+0x20>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80014cc:	f7ff ffee 	bl	80014ac <HAL_GetTick>
 80014d0:	1b40      	subs	r0, r0, r5
 80014d2:	42a0      	cmp	r0, r4
 80014d4:	d3fa      	bcc.n	80014cc <HAL_Delay+0x14>
  {
  }
}
 80014d6:	bd70      	pop	{r4, r5, r6, pc}
 80014d8:	20000004 	.word	0x20000004

080014dc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80014dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014de:	2303      	movs	r3, #3
 80014e0:	6802      	ldr	r2, [r0, #0]
{
 80014e2:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014e4:	6891      	ldr	r1, [r2, #8]
 80014e6:	400b      	ands	r3, r1
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d001      	beq.n	80014f0 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014ec:	2000      	movs	r0, #0
}
 80014ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014f0:	6811      	ldr	r1, [r2, #0]
 80014f2:	420b      	tst	r3, r1
 80014f4:	d00e      	beq.n	8001514 <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80014f6:	2705      	movs	r7, #5
 80014f8:	6893      	ldr	r3, [r2, #8]
 80014fa:	401f      	ands	r7, r3
 80014fc:	2f01      	cmp	r7, #1
 80014fe:	d00d      	beq.n	800151c <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001500:	2210      	movs	r2, #16
 8001502:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8001504:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001506:	4313      	orrs	r3, r2
 8001508:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800150a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800150c:	3a0f      	subs	r2, #15
 800150e:	4313      	orrs	r3, r2
 8001510:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001512:	e7ec      	b.n	80014ee <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001514:	68d3      	ldr	r3, [r2, #12]
 8001516:	041b      	lsls	r3, r3, #16
 8001518:	d5e8      	bpl.n	80014ec <ADC_Disable+0x10>
 800151a:	e7ec      	b.n	80014f6 <ADC_Disable+0x1a>
      __HAL_ADC_DISABLE(hadc);
 800151c:	2102      	movs	r1, #2
 800151e:	6893      	ldr	r3, [r2, #8]
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001520:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 8001522:	430b      	orrs	r3, r1
 8001524:	6093      	str	r3, [r2, #8]
 8001526:	2303      	movs	r3, #3
 8001528:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800152a:	f7ff ffbf 	bl	80014ac <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800152e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001530:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	421f      	tst	r7, r3
 8001536:	d0d9      	beq.n	80014ec <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001538:	f7ff ffb8 	bl	80014ac <HAL_GetTick>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800153c:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800153e:	1b80      	subs	r0, r0, r6
 8001540:	2802      	cmp	r0, #2
 8001542:	d902      	bls.n	800154a <ADC_Disable+0x6e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	4215      	tst	r5, r2
 8001548:	d103      	bne.n	8001552 <ADC_Disable+0x76>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	421d      	tst	r5, r3
 800154e:	d1f3      	bne.n	8001538 <ADC_Disable+0x5c>
 8001550:	e7cc      	b.n	80014ec <ADC_Disable+0x10>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001552:	2210      	movs	r2, #16
 8001554:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          return HAL_ERROR;
 8001556:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001558:	4313      	orrs	r3, r2
 800155a:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800155e:	431d      	orrs	r5, r3
 8001560:	63e5      	str	r5, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001562:	e7c4      	b.n	80014ee <ADC_Disable+0x12>

08001564 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001564:	2300      	movs	r3, #0
{
 8001566:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001568:	6802      	ldr	r2, [r0, #0]
{
 800156a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 800156c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800156e:	6891      	ldr	r1, [r2, #8]
 8001570:	3303      	adds	r3, #3
{
 8001572:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001574:	400b      	ands	r3, r1
 8001576:	2b01      	cmp	r3, #1
 8001578:	d037      	beq.n	80015ea <ADC_Enable+0x86>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800157a:	6891      	ldr	r1, [r2, #8]
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <ADC_Enable+0xa8>)
 800157e:	4219      	tst	r1, r3
 8001580:	d129      	bne.n	80015d6 <ADC_Enable+0x72>
    __HAL_ADC_ENABLE(hadc);
 8001582:	2101      	movs	r1, #1
 8001584:	6893      	ldr	r3, [r2, #8]
 8001586:	430b      	orrs	r3, r1
 8001588:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <ADC_Enable+0xac>)
 800158c:	4921      	ldr	r1, [pc, #132]	; (8001614 <ADC_Enable+0xb0>)
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	f7fe fdc4 	bl	800011c <__udivsi3>
 8001594:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8001596:	9b01      	ldr	r3, [sp, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <ADC_Enable+0x44>
      wait_loop_index--;
 800159c:	9b01      	ldr	r3, [sp, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80015a2:	9b01      	ldr	r3, [sp, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f9      	bne.n	800159c <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 80015a8:	f7ff ff80 	bl	80014ac <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015ac:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80015ae:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015b0:	681b      	ldr	r3, [r3, #0]
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015b2:	2501      	movs	r5, #1
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015b4:	07db      	lsls	r3, r3, #31
 80015b6:	d40b      	bmi.n	80015d0 <ADC_Enable+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015b8:	f7ff ff78 	bl	80014ac <HAL_GetTick>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015bc:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015be:	1b80      	subs	r0, r0, r6
 80015c0:	2802      	cmp	r0, #2
 80015c2:	d902      	bls.n	80015ca <ADC_Enable+0x66>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4215      	tst	r5, r2
 80015c8:	d016      	beq.n	80015f8 <ADC_Enable+0x94>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	421d      	tst	r5, r3
 80015ce:	d0f3      	beq.n	80015b8 <ADC_Enable+0x54>
  return HAL_OK;
 80015d0:	2000      	movs	r0, #0
}
 80015d2:	b002      	add	sp, #8
 80015d4:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d6:	2210      	movs	r2, #16
 80015d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80015da:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015dc:	4313      	orrs	r3, r2
 80015de:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015e2:	3a0f      	subs	r2, #15
 80015e4:	4313      	orrs	r3, r2
 80015e6:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80015e8:	e7f3      	b.n	80015d2 <ADC_Enable+0x6e>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015ea:	6811      	ldr	r1, [r2, #0]
 80015ec:	420b      	tst	r3, r1
 80015ee:	d1ef      	bne.n	80015d0 <ADC_Enable+0x6c>
 80015f0:	68d3      	ldr	r3, [r2, #12]
 80015f2:	041b      	lsls	r3, r3, #16
 80015f4:	d4ec      	bmi.n	80015d0 <ADC_Enable+0x6c>
 80015f6:	e7c0      	b.n	800157a <ADC_Enable+0x16>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f8:	2210      	movs	r2, #16
 80015fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          return HAL_ERROR;
 80015fc:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015fe:	4313      	orrs	r3, r2
 8001600:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001602:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001604:	431d      	orrs	r5, r3
 8001606:	63e5      	str	r5, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001608:	e7e3      	b.n	80015d2 <ADC_Enable+0x6e>
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	80000017 	.word	0x80000017
 8001610:	20000000 	.word	0x20000000
 8001614:	000f4240 	.word	0x000f4240

08001618 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001618:	2204      	movs	r2, #4
 800161a:	6803      	ldr	r3, [r0, #0]
{
 800161c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800161e:	6899      	ldr	r1, [r3, #8]
{
 8001620:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001622:	420a      	tst	r2, r1
 8001624:	d01d      	beq.n	8001662 <ADC_ConversionStop+0x4a>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001626:	6899      	ldr	r1, [r3, #8]
 8001628:	420a      	tst	r2, r1
 800162a:	d006      	beq.n	800163a <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800162c:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800162e:	0792      	lsls	r2, r2, #30
 8001630:	d403      	bmi.n	800163a <ADC_ConversionStop+0x22>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001632:	2110      	movs	r1, #16
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	430a      	orrs	r2, r1
 8001638:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800163a:	f7ff ff37 	bl	80014ac <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800163e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001640:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	075b      	lsls	r3, r3, #29
 8001646:	d50c      	bpl.n	8001662 <ADC_ConversionStop+0x4a>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001648:	2504      	movs	r5, #4
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800164a:	f7ff ff2f 	bl	80014ac <HAL_GetTick>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800164e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001650:	1b80      	subs	r0, r0, r6
 8001652:	2802      	cmp	r0, #2
 8001654:	d902      	bls.n	800165c <ADC_ConversionStop+0x44>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	4215      	tst	r5, r2
 800165a:	d104      	bne.n	8001666 <ADC_ConversionStop+0x4e>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	421d      	tst	r5, r3
 8001660:	d1f3      	bne.n	800164a <ADC_ConversionStop+0x32>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001662:	2000      	movs	r0, #0
}
 8001664:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001666:	2210      	movs	r2, #16
 8001668:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166c:	4313      	orrs	r3, r2
 800166e:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001670:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001672:	3a0f      	subs	r2, #15
 8001674:	4313      	orrs	r3, r2
 8001676:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001678:	e7f4      	b.n	8001664 <ADC_ConversionStop+0x4c>
 800167a:	46c0      	nop			; (mov r8, r8)

0800167c <HAL_ADC_Init>:
{
 800167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800167e:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8001680:	d100      	bne.n	8001684 <HAL_ADC_Init+0x8>
 8001682:	e085      	b.n	8001790 <HAL_ADC_Init+0x114>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001684:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001686:	2b00      	cmp	r3, #0
 8001688:	d100      	bne.n	800168c <HAL_ADC_Init+0x10>
 800168a:	e06b      	b.n	8001764 <HAL_ADC_Init+0xe8>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800168c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800168e:	06db      	lsls	r3, r3, #27
 8001690:	d462      	bmi.n	8001758 <HAL_ADC_Init+0xdc>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001692:	2104      	movs	r1, #4
 8001694:	000e      	movs	r6, r1
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	4016      	ands	r6, r2
      (tmp_hal_status == HAL_OK)                                &&
 800169c:	4211      	tst	r1, r2
 800169e:	d15b      	bne.n	8001758 <HAL_ADC_Init+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 80016a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80016a2:	4948      	ldr	r1, [pc, #288]	; (80017c4 <HAL_ADC_Init+0x148>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	3106      	adds	r1, #6
 80016a8:	31ff      	adds	r1, #255	; 0xff
 80016aa:	430a      	orrs	r2, r1
 80016ac:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 80016ae:	2203      	movs	r2, #3
 80016b0:	6899      	ldr	r1, [r3, #8]
 80016b2:	400a      	ands	r2, r1
 80016b4:	2a01      	cmp	r2, #1
 80016b6:	d05b      	beq.n	8001770 <HAL_ADC_Init+0xf4>
      MODIFY_REG(hadc->Instance->CFGR1,
 80016b8:	2118      	movs	r1, #24
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	438a      	bics	r2, r1
 80016be:	68a1      	ldr	r1, [r4, #8]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	6861      	ldr	r1, [r4, #4]
 80016c8:	0092      	lsls	r2, r2, #2
 80016ca:	0892      	lsrs	r2, r2, #2
 80016cc:	430a      	orrs	r2, r1
 80016ce:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	493d      	ldr	r1, [pc, #244]	; (80017c8 <HAL_ADC_Init+0x14c>)
 80016d4:	400a      	ands	r2, r1
 80016d6:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016d8:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80016da:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016dc:	0389      	lsls	r1, r1, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80016de:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016e0:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80016e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80016e4:	7ea7      	ldrb	r7, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80016e6:	3a01      	subs	r2, #1
 80016e8:	1e55      	subs	r5, r2, #1
 80016ea:	41aa      	sbcs	r2, r5
 80016ec:	0315      	lsls	r5, r2, #12
 80016ee:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80016f0:	0378      	lsls	r0, r7, #13
 80016f2:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80016f4:	6922      	ldr	r2, [r4, #16]
 80016f6:	4301      	orrs	r1, r0
 80016f8:	2a02      	cmp	r2, #2
 80016fa:	d100      	bne.n	80016fe <HAL_ADC_Init+0x82>
 80016fc:	2604      	movs	r6, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80016fe:	2224      	movs	r2, #36	; 0x24
 8001700:	5ca2      	ldrb	r2, [r4, r2]
 8001702:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001704:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001706:	7ee1      	ldrb	r1, [r4, #27]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001708:	432a      	orrs	r2, r5
 800170a:	4332      	orrs	r2, r6
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800170c:	2901      	cmp	r1, #1
 800170e:	d04b      	beq.n	80017a8 <HAL_ADC_Init+0x12c>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001710:	20c2      	movs	r0, #194	; 0xc2
 8001712:	69e1      	ldr	r1, [r4, #28]
 8001714:	30ff      	adds	r0, #255	; 0xff
 8001716:	4281      	cmp	r1, r0
 8001718:	d002      	beq.n	8001720 <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800171a:	6a20      	ldr	r0, [r4, #32]
 800171c:	4301      	orrs	r1, r0
 800171e:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001720:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001722:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001724:	4311      	orrs	r1, r2
 8001726:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001728:	2180      	movs	r1, #128	; 0x80
 800172a:	0549      	lsls	r1, r1, #21
 800172c:	428d      	cmp	r5, r1
 800172e:	d026      	beq.n	800177e <HAL_ADC_Init+0x102>
 8001730:	1e69      	subs	r1, r5, #1
 8001732:	2906      	cmp	r1, #6
 8001734:	d923      	bls.n	800177e <HAL_ADC_Init+0x102>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4924      	ldr	r1, [pc, #144]	; (80017cc <HAL_ADC_Init+0x150>)
 800173a:	400b      	ands	r3, r1
 800173c:	4293      	cmp	r3, r2
 800173e:	d029      	beq.n	8001794 <HAL_ADC_Init+0x118>
      ADC_STATE_CLR_SET(hadc->State,
 8001740:	2212      	movs	r2, #18
 8001742:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      tmp_hal_status = HAL_ERROR;
 8001744:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001746:	4393      	bics	r3, r2
 8001748:	3a02      	subs	r2, #2
 800174a:	4313      	orrs	r3, r2
 800174c:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001750:	3a0f      	subs	r2, #15
 8001752:	4313      	orrs	r3, r2
 8001754:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001756:	e004      	b.n	8001762 <HAL_ADC_Init+0xe6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001758:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 800175a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800175c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800175e:	4313      	orrs	r3, r2
 8001760:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Lock = HAL_UNLOCKED;
 8001764:	2234      	movs	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8001766:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8001768:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800176a:	f7ff fbc7 	bl	8000efc <HAL_ADC_MspInit>
 800176e:	e78d      	b.n	800168c <HAL_ADC_Init+0x10>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001770:	6819      	ldr	r1, [r3, #0]
 8001772:	420a      	tst	r2, r1
 8001774:	d1ac      	bne.n	80016d0 <HAL_ADC_Init+0x54>
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	0412      	lsls	r2, r2, #16
 800177a:	d4a9      	bmi.n	80016d0 <HAL_ADC_Init+0x54>
 800177c:	e79c      	b.n	80016b8 <HAL_ADC_Init+0x3c>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800177e:	2107      	movs	r1, #7
 8001780:	6958      	ldr	r0, [r3, #20]
 8001782:	4388      	bics	r0, r1
 8001784:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001786:	6958      	ldr	r0, [r3, #20]
 8001788:	4029      	ands	r1, r5
 800178a:	4301      	orrs	r1, r0
 800178c:	6159      	str	r1, [r3, #20]
 800178e:	e7d2      	b.n	8001736 <HAL_ADC_Init+0xba>
    return HAL_ERROR;
 8001790:	2001      	movs	r0, #1
 8001792:	e7e6      	b.n	8001762 <HAL_ADC_Init+0xe6>
      ADC_CLEAR_ERRORCODE(hadc);
 8001794:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001796:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001798:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800179a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800179c:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800179e:	4393      	bics	r3, r2
 80017a0:	3a02      	subs	r2, #2
 80017a2:	4313      	orrs	r3, r2
 80017a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80017a6:	e7dc      	b.n	8001762 <HAL_ADC_Init+0xe6>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017a8:	2f00      	cmp	r7, #0
 80017aa:	d103      	bne.n	80017b4 <HAL_ADC_Init+0x138>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80017ac:	2180      	movs	r1, #128	; 0x80
 80017ae:	0249      	lsls	r1, r1, #9
 80017b0:	430a      	orrs	r2, r1
 80017b2:	e7ad      	b.n	8001710 <HAL_ADC_Init+0x94>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b4:	2520      	movs	r5, #32
 80017b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80017b8:	4328      	orrs	r0, r5
 80017ba:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017bc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80017be:	4301      	orrs	r1, r0
 80017c0:	63e1      	str	r1, [r4, #60]	; 0x3c
 80017c2:	e7a5      	b.n	8001710 <HAL_ADC_Init+0x94>
 80017c4:	fffffefd 	.word	0xfffffefd
 80017c8:	fffe0219 	.word	0xfffe0219
 80017cc:	833fffe7 	.word	0x833fffe7

080017d0 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80017d0:	2334      	movs	r3, #52	; 0x34
{ 
 80017d2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80017d4:	5cc2      	ldrb	r2, [r0, r3]
{ 
 80017d6:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80017d8:	2a01      	cmp	r2, #1
 80017da:	d014      	beq.n	8001806 <HAL_ADC_Stop+0x36>
 80017dc:	2501      	movs	r5, #1
 80017de:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80017e0:	f7ff ff1a 	bl	8001618 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80017e4:	2800      	cmp	r0, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80017e8:	2334      	movs	r3, #52	; 0x34
 80017ea:	2200      	movs	r2, #0
 80017ec:	54e2      	strb	r2, [r4, r3]
}
 80017ee:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80017f0:	0020      	movs	r0, r4
 80017f2:	f7ff fe73 	bl	80014dc <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80017f6:	2800      	cmp	r0, #0
 80017f8:	d1f6      	bne.n	80017e8 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80017fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017fc:	4a03      	ldr	r2, [pc, #12]	; (800180c <HAL_ADC_Stop+0x3c>)
 80017fe:	4013      	ands	r3, r2
 8001800:	431d      	orrs	r5, r3
 8001802:	63a5      	str	r5, [r4, #56]	; 0x38
 8001804:	e7f0      	b.n	80017e8 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8001806:	2002      	movs	r0, #2
 8001808:	e7f1      	b.n	80017ee <HAL_ADC_Stop+0x1e>
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	fffffefe 	.word	0xfffffefe

08001810 <HAL_ADC_Start_DMA>:
{
 8001810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001812:	6805      	ldr	r5, [r0, #0]
{
 8001814:	000e      	movs	r6, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001816:	68a9      	ldr	r1, [r5, #8]
{
 8001818:	0004      	movs	r4, r0
 800181a:	0017      	movs	r7, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800181c:	074b      	lsls	r3, r1, #29
 800181e:	d436      	bmi.n	800188e <HAL_ADC_Start_DMA+0x7e>
    __HAL_LOCK(hadc);
 8001820:	2334      	movs	r3, #52	; 0x34
 8001822:	5cc2      	ldrb	r2, [r0, r3]
 8001824:	2a01      	cmp	r2, #1
 8001826:	d032      	beq.n	800188e <HAL_ADC_Start_DMA+0x7e>
 8001828:	2201      	movs	r2, #1
 800182a:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800182c:	7e43      	ldrb	r3, [r0, #25]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d004      	beq.n	800183c <HAL_ADC_Start_DMA+0x2c>
      tmp_hal_status = ADC_Enable(hadc);
 8001832:	f7ff fe97 	bl	8001564 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001836:	2800      	cmp	r0, #0
 8001838:	d128      	bne.n	800188c <HAL_ADC_Start_DMA+0x7c>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800183a:	6825      	ldr	r5, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800183c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800183e:	4a15      	ldr	r2, [pc, #84]	; (8001894 <HAL_ADC_Start_DMA+0x84>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001840:	0029      	movs	r1, r5
      ADC_STATE_CLR_SET(hadc->State,
 8001842:	401a      	ands	r2, r3
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4313      	orrs	r3, r2
 800184a:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 800184c:	2234      	movs	r2, #52	; 0x34
      ADC_CLEAR_ERRORCODE(hadc);
 800184e:	2300      	movs	r3, #0
 8001850:	63e3      	str	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8001852:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001854:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_ADC_Start_DMA+0x88>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001858:	3a24      	subs	r2, #36	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800185a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_ADC_Start_DMA+0x8c>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800185e:	3140      	adds	r1, #64	; 0x40
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001860:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_ADC_Start_DMA+0x90>)
 8001864:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001866:	231c      	movs	r3, #28
 8001868:	602b      	str	r3, [r5, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800186a:	686b      	ldr	r3, [r5, #4]
 800186c:	4313      	orrs	r3, r2
 800186e:	606b      	str	r3, [r5, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001870:	68eb      	ldr	r3, [r5, #12]
 8001872:	3a0f      	subs	r2, #15
 8001874:	4313      	orrs	r3, r2
 8001876:	60eb      	str	r3, [r5, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001878:	0032      	movs	r2, r6
 800187a:	003b      	movs	r3, r7
 800187c:	f000 f9de 	bl	8001c3c <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001880:	2104      	movs	r1, #4
 8001882:	2000      	movs	r0, #0
 8001884:	6822      	ldr	r2, [r4, #0]
 8001886:	6893      	ldr	r3, [r2, #8]
 8001888:	430b      	orrs	r3, r1
 800188a:	6093      	str	r3, [r2, #8]
}
 800188c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 800188e:	2002      	movs	r0, #2
 8001890:	e7fc      	b.n	800188c <HAL_ADC_Start_DMA+0x7c>
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	fffff0fe 	.word	0xfffff0fe
 8001898:	080018a9 	.word	0x080018a9
 800189c:	08001921 	.word	0x08001921
 80018a0:	08001931 	.word	0x08001931

080018a4 <HAL_ADC_ConvCpltCallback>:
 80018a4:	4770      	bx	lr
 80018a6:	46c0      	nop			; (mov r8, r8)

080018a8 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018a8:	2150      	movs	r1, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80018ac:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018b0:	4211      	tst	r1, r2
 80018b2:	d10e      	bne.n	80018d2 <ADC_DMAConvCplt+0x2a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80018b8:	0092      	lsls	r2, r2, #2
 80018ba:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018bc:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018be:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	0109      	lsls	r1, r1, #4
 80018c4:	68d0      	ldr	r0, [r2, #12]
 80018c6:	4208      	tst	r0, r1
 80018c8:	d007      	beq.n	80018da <ADC_DMAConvCplt+0x32>

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018ca:	0018      	movs	r0, r3
 80018cc:	f7ff ffea 	bl	80018a4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80018d0:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4798      	blx	r3
}
 80018d8:	e7fa      	b.n	80018d0 <ADC_DMAConvCplt+0x28>
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018da:	7e99      	ldrb	r1, [r3, #26]
 80018dc:	2900      	cmp	r1, #0
 80018de:	d1f4      	bne.n	80018ca <ADC_DMAConvCplt+0x22>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80018e0:	6811      	ldr	r1, [r2, #0]
 80018e2:	0709      	lsls	r1, r1, #28
 80018e4:	d5f1      	bpl.n	80018ca <ADC_DMAConvCplt+0x22>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018e6:	6891      	ldr	r1, [r2, #8]
 80018e8:	0749      	lsls	r1, r1, #29
 80018ea:	d40b      	bmi.n	8001904 <ADC_DMAConvCplt+0x5c>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018ec:	200c      	movs	r0, #12
 80018ee:	6851      	ldr	r1, [r2, #4]
 80018f0:	4381      	bics	r1, r0
 80018f2:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80018f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018f6:	4908      	ldr	r1, [pc, #32]	; (8001918 <ADC_DMAConvCplt+0x70>)
 80018f8:	400a      	ands	r2, r1
 80018fa:	3104      	adds	r1, #4
 80018fc:	31ff      	adds	r1, #255	; 0xff
 80018fe:	430a      	orrs	r2, r1
 8001900:	639a      	str	r2, [r3, #56]	; 0x38
 8001902:	e7e2      	b.n	80018ca <ADC_DMAConvCplt+0x22>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001904:	2120      	movs	r1, #32
 8001906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001908:	430a      	orrs	r2, r1
 800190a:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800190e:	391f      	subs	r1, #31
 8001910:	430a      	orrs	r2, r1
 8001912:	63da      	str	r2, [r3, #60]	; 0x3c
 8001914:	e7d9      	b.n	80018ca <ADC_DMAConvCplt+0x22>
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	fffffefe 	.word	0xfffffefe

0800191c <HAL_ADC_ConvHalfCpltCallback>:
 800191c:	4770      	bx	lr
 800191e:	46c0      	nop			; (mov r8, r8)

08001920 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001920:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001922:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001924:	f7ff fffa 	bl	800191c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001928:	bd10      	pop	{r4, pc}
 800192a:	46c0      	nop			; (mov r8, r8)

0800192c <HAL_ADC_ErrorCallback>:
 800192c:	4770      	bx	lr
 800192e:	46c0      	nop			; (mov r8, r8)

08001930 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001930:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001932:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001934:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001936:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001938:	4313      	orrs	r3, r2
 800193a:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800193c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800193e:	3a3c      	subs	r2, #60	; 0x3c
 8001940:	4313      	orrs	r3, r2
 8001942:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001944:	f7ff fff2 	bl	800192c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001948:	bd10      	pop	{r4, pc}
 800194a:	46c0      	nop			; (mov r8, r8)

0800194c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 800194c:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 800194e:	2234      	movs	r2, #52	; 0x34
{
 8001950:	b570      	push	{r4, r5, r6, lr}
 8001952:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001954:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001956:	5c83      	ldrb	r3, [r0, r2]
{
 8001958:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800195a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 800195c:	2b01      	cmp	r3, #1
 800195e:	d05f      	beq.n	8001a20 <HAL_ADC_ConfigChannel+0xd4>
 8001960:	2301      	movs	r3, #1
 8001962:	5483      	strb	r3, [r0, r2]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001964:	6802      	ldr	r2, [r0, #0]
 8001966:	6890      	ldr	r0, [r2, #8]
 8001968:	0740      	lsls	r0, r0, #29
 800196a:	d509      	bpl.n	8001980 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800196c:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 800196e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001970:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001972:	4313      	orrs	r3, r2
 8001974:	63a3      	str	r3, [r4, #56]	; 0x38
  __HAL_UNLOCK(hadc);
 8001976:	2334      	movs	r3, #52	; 0x34
 8001978:	2200      	movs	r2, #0
 800197a:	54e2      	strb	r2, [r4, r3]
}
 800197c:	b002      	add	sp, #8
 800197e:	bd70      	pop	{r4, r5, r6, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 8001980:	4835      	ldr	r0, [pc, #212]	; (8001a58 <HAL_ADC_ConfigChannel+0x10c>)
 8001982:	684e      	ldr	r6, [r1, #4]
 8001984:	4286      	cmp	r6, r0
 8001986:	d02f      	beq.n	80019e8 <HAL_ADC_ConfigChannel+0x9c>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001988:	6808      	ldr	r0, [r1, #0]
 800198a:	6a96      	ldr	r6, [r2, #40]	; 0x28
 800198c:	4083      	lsls	r3, r0
 800198e:	4333      	orrs	r3, r6
 8001990:	6293      	str	r3, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	055b      	lsls	r3, r3, #21
 8001996:	429d      	cmp	r5, r3
 8001998:	d00f      	beq.n	80019ba <HAL_ADC_ConfigChannel+0x6e>
 800199a:	3d01      	subs	r5, #1
 800199c:	2d06      	cmp	r5, #6
 800199e:	d90c      	bls.n	80019ba <HAL_ADC_ConfigChannel+0x6e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80019a0:	2307      	movs	r3, #7
 80019a2:	688d      	ldr	r5, [r1, #8]
 80019a4:	6951      	ldr	r1, [r2, #20]
 80019a6:	4019      	ands	r1, r3
 80019a8:	428d      	cmp	r5, r1
 80019aa:	d006      	beq.n	80019ba <HAL_ADC_ConfigChannel+0x6e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80019ac:	6951      	ldr	r1, [r2, #20]
 80019ae:	4399      	bics	r1, r3
 80019b0:	6151      	str	r1, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80019b2:	6951      	ldr	r1, [r2, #20]
 80019b4:	402b      	ands	r3, r5
 80019b6:	430b      	orrs	r3, r1
 80019b8:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019ba:	0003      	movs	r3, r0
 80019bc:	3b10      	subs	r3, #16
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d810      	bhi.n	80019e4 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80019c2:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <HAL_ADC_ConfigChannel+0x110>)
 80019c4:	6813      	ldr	r3, [r2, #0]
 80019c6:	2810      	cmp	r0, #16
 80019c8:	d02e      	beq.n	8001a28 <HAL_ADC_ConfigChannel+0xdc>
 80019ca:	3811      	subs	r0, #17
 80019cc:	1e41      	subs	r1, r0, #1
 80019ce:	4188      	sbcs	r0, r1
 80019d0:	21c0      	movs	r1, #192	; 0xc0
 80019d2:	4240      	negs	r0, r0
 80019d4:	0409      	lsls	r1, r1, #16
 80019d6:	4008      	ands	r0, r1
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	03c9      	lsls	r1, r1, #15
 80019dc:	468c      	mov	ip, r1
 80019de:	4460      	add	r0, ip
 80019e0:	4318      	orrs	r0, r3
 80019e2:	6010      	str	r0, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e4:	2000      	movs	r0, #0
 80019e6:	e7c6      	b.n	8001976 <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80019e8:	6809      	ldr	r1, [r1, #0]
 80019ea:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80019ec:	408b      	lsls	r3, r1
 80019ee:	4398      	bics	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019f0:	000b      	movs	r3, r1
 80019f2:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80019f4:	6290      	str	r0, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d8f4      	bhi.n	80019e4 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <HAL_ADC_ConfigChannel+0x110>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	2910      	cmp	r1, #16
 8001a00:	d010      	beq.n	8001a24 <HAL_ADC_ConfigChannel+0xd8>
 8001a02:	3911      	subs	r1, #17
 8001a04:	424b      	negs	r3, r1
 8001a06:	414b      	adcs	r3, r1
 8001a08:	4259      	negs	r1, r3
 8001a0a:	23c0      	movs	r3, #192	; 0xc0
 8001a0c:	041b      	lsls	r3, r3, #16
 8001a0e:	4019      	ands	r1, r3
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_ADC_ConfigChannel+0x114>)
 8001a12:	469c      	mov	ip, r3
 8001a14:	4461      	add	r1, ip
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_ADC_ConfigChannel+0x110>)
 8001a18:	4011      	ands	r1, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a1a:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a1c:	6019      	str	r1, [r3, #0]
 8001a1e:	e7aa      	b.n	8001976 <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 8001a20:	2002      	movs	r0, #2
 8001a22:	e7ab      	b.n	800197c <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a24:	490f      	ldr	r1, [pc, #60]	; (8001a64 <HAL_ADC_ConfigChannel+0x118>)
 8001a26:	e7f6      	b.n	8001a16 <HAL_ADC_ConfigChannel+0xca>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	0409      	lsls	r1, r1, #16
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	6013      	str	r3, [r2, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_ADC_ConfigChannel+0x11c>)
 8001a32:	490e      	ldr	r1, [pc, #56]	; (8001a6c <HAL_ADC_ConfigChannel+0x120>)
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	f7fe fb71 	bl	800011c <__udivsi3>
 8001a3a:	0083      	lsls	r3, r0, #2
 8001a3c:	181b      	adds	r3, r3, r0
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001a42:	9b01      	ldr	r3, [sp, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0cd      	beq.n	80019e4 <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 8001a48:	9b01      	ldr	r3, [sp, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001a4e:	9b01      	ldr	r3, [sp, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f9      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0xfc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a54:	2000      	movs	r0, #0
 8001a56:	e78e      	b.n	8001976 <HAL_ADC_ConfigChannel+0x2a>
 8001a58:	00001001 	.word	0x00001001
 8001a5c:	40012708 	.word	0x40012708
 8001a60:	feffffff 	.word	0xfeffffff
 8001a64:	ff7fffff 	.word	0xff7fffff
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	000f4240 	.word	0x000f4240

08001a70 <HAL_ADCEx_Calibration_Start>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a70:	2334      	movs	r3, #52	; 0x34
{
 8001a72:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001a74:	5cc2      	ldrb	r2, [r0, r3]
{
 8001a76:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001a78:	2a01      	cmp	r2, #1
 8001a7a:	d04e      	beq.n	8001b1a <HAL_ADCEx_Calibration_Start+0xaa>
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a80:	6803      	ldr	r3, [r0, #0]
 8001a82:	3202      	adds	r2, #2
 8001a84:	6899      	ldr	r1, [r3, #8]
 8001a86:	400a      	ands	r2, r1
 8001a88:	2a01      	cmp	r2, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_ADCEx_Calibration_Start+0x28>
 8001a8c:	6819      	ldr	r1, [r3, #0]
 8001a8e:	420a      	tst	r2, r1
 8001a90:	d12e      	bne.n	8001af0 <HAL_ADCEx_Calibration_Start+0x80>
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	0412      	lsls	r2, r2, #16
 8001a96:	d42b      	bmi.n	8001af0 <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001a98:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001a9a:	4921      	ldr	r1, [pc, #132]	; (8001b20 <HAL_ADCEx_Calibration_Start+0xb0>)
 8001a9c:	400a      	ands	r2, r1
 8001a9e:	3106      	adds	r1, #6
 8001aa0:	31ff      	adds	r1, #255	; 0xff
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	63a2      	str	r2, [r4, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001aa6:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	3101      	adds	r1, #1
 8001aac:	438a      	bics	r2, r1
 8001aae:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	6899      	ldr	r1, [r3, #8]
 8001ab4:	0612      	lsls	r2, r2, #24
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001aba:	f7ff fcf7 	bl	80014ac <HAL_GetTick>
 8001abe:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	da1c      	bge.n	8001b02 <HAL_ADCEx_Calibration_Start+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001ac8:	f7ff fcf0 	bl	80014ac <HAL_GetTick>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001acc:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001ace:	1b40      	subs	r0, r0, r5
 8001ad0:	2802      	cmp	r0, #2
 8001ad2:	d9f6      	bls.n	8001ac2 <HAL_ADCEx_Calibration_Start+0x52>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	2a00      	cmp	r2, #0
 8001ad8:	daf3      	bge.n	8001ac2 <HAL_ADCEx_Calibration_Start+0x52>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001ada:	2212      	movs	r2, #18
 8001adc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);

          return HAL_ERROR;
 8001ade:	2001      	movs	r0, #1
          ADC_STATE_CLR_SET(hadc->State,
 8001ae0:	4393      	bics	r3, r2
 8001ae2:	3a02      	subs	r2, #2
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	63a3      	str	r3, [r4, #56]	; 0x38
          __HAL_UNLOCK(hadc);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2334      	movs	r3, #52	; 0x34
 8001aec:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8001aee:	e007      	b.n	8001b00 <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af0:	2220      	movs	r2, #32
    
    tmp_hal_status = HAL_ERROR;
 8001af2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001af6:	4313      	orrs	r3, r2
 8001af8:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001afa:	2334      	movs	r3, #52	; 0x34
 8001afc:	2200      	movs	r2, #0
 8001afe:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8001b00:	bd70      	pop	{r4, r5, r6, pc}
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001b02:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001b04:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001b06:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001b08:	430e      	orrs	r6, r1
 8001b0a:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8001b0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0e:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8001b10:	4393      	bics	r3, r2
 8001b12:	3a02      	subs	r2, #2
 8001b14:	4313      	orrs	r3, r2
 8001b16:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b18:	e7ef      	b.n	8001afa <HAL_ADCEx_Calibration_Start+0x8a>
  __HAL_LOCK(hadc);
 8001b1a:	2002      	movs	r0, #2
 8001b1c:	e7f0      	b.n	8001b00 <HAL_ADCEx_Calibration_Start+0x90>
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	fffffefd 	.word	0xfffffefd

08001b24 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b24:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8001b26:	2800      	cmp	r0, #0
 8001b28:	db14      	blt.n	8001b54 <HAL_NVIC_SetPriority+0x30>
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	469c      	mov	ip, r3
 8001b30:	23ff      	movs	r3, #255	; 0xff
 8001b32:	0884      	lsrs	r4, r0, #2
 8001b34:	4010      	ands	r0, r2
 8001b36:	001a      	movs	r2, r3
 8001b38:	26c0      	movs	r6, #192	; 0xc0
 8001b3a:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b3c:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b3e:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b40:	400b      	ands	r3, r1
 8001b42:	4083      	lsls	r3, r0
 8001b44:	00a4      	lsls	r4, r4, #2
 8001b46:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b48:	00b6      	lsls	r6, r6, #2
 8001b4a:	59a5      	ldr	r5, [r4, r6]
 8001b4c:	4395      	bics	r5, r2
 8001b4e:	432b      	orrs	r3, r5
 8001b50:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001b52:	bd70      	pop	{r4, r5, r6, pc}
 8001b54:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <HAL_NVIC_SetPriority+0x60>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b56:	230f      	movs	r3, #15
 8001b58:	4694      	mov	ip, r2
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	4003      	ands	r3, r0
 8001b5e:	4010      	ands	r0, r2
 8001b60:	32fc      	adds	r2, #252	; 0xfc
 8001b62:	0015      	movs	r5, r2
 8001b64:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b66:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b68:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b6e:	3b08      	subs	r3, #8
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4463      	add	r3, ip
 8001b76:	69dc      	ldr	r4, [r3, #28]
 8001b78:	43ac      	bics	r4, r5
 8001b7a:	4322      	orrs	r2, r4
 8001b7c:	61da      	str	r2, [r3, #28]
 8001b7e:	e7e8      	b.n	8001b52 <HAL_NVIC_SetPriority+0x2e>
 8001b80:	e000e100 	.word	0xe000e100
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	db05      	blt.n	8001b98 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8c:	231f      	movs	r3, #31
 8001b8e:	4018      	ands	r0, r3
 8001b90:	3b1e      	subs	r3, #30
 8001b92:	4083      	lsls	r3, r0
 8001b94:	4a01      	ldr	r2, [pc, #4]	; (8001b9c <HAL_NVIC_EnableIRQ+0x14>)
 8001b96:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b98:	4770      	bx	lr
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	e000e100 	.word	0xe000e100

08001ba0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	1e43      	subs	r3, r0, #1
 8001ba4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d20e      	bcs.n	8001bca <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bac:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bae:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bb0:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bb4:	6a03      	ldr	r3, [r0, #32]
 8001bb6:	0609      	lsls	r1, r1, #24
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	0a1b      	lsrs	r3, r3, #8
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc0:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc2:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc6:	3307      	adds	r3, #7
 8001bc8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001bca:	4770      	bx	lr
 8001bcc:	e000e010 	.word	0xe000e010
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b570      	push	{r4, r5, r6, lr}
 8001bd6:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001bd8:	d027      	beq.n	8001c2a <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bda:	2521      	movs	r5, #33	; 0x21
 8001bdc:	2302      	movs	r3, #2
 8001bde:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001be0:	6800      	ldr	r0, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001be2:	4a13      	ldr	r2, [pc, #76]	; (8001c30 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8001be4:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001be6:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001be8:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8001bea:	6863      	ldr	r3, [r4, #4]
 8001bec:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bee:	68e1      	ldr	r1, [r4, #12]
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	6921      	ldr	r1, [r4, #16]
 8001bf4:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf6:	6961      	ldr	r1, [r4, #20]
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	69a1      	ldr	r1, [r4, #24]
 8001bfc:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bfe:	69e1      	ldr	r1, [r4, #28]
 8001c00:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8001c02:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c04:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_DMA_Init+0x60>)
 8001c08:	2114      	movs	r1, #20
 8001c0a:	469c      	mov	ip, r3
 8001c0c:	4460      	add	r0, ip
 8001c0e:	f7fe fa85 	bl	800011c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8001c14:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8001c16:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c18:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c1a:	0080      	lsls	r0, r0, #2
 8001c1c:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8001c1e:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c20:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001c22:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8001c24:	321f      	adds	r2, #31
 8001c26:	54a3      	strb	r3, [r4, r2]
}
 8001c28:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	e7fc      	b.n	8001c28 <HAL_DMA_Init+0x54>
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	ffffc00f 	.word	0xffffc00f
 8001c34:	bffdfff8 	.word	0xbffdfff8
 8001c38:	40020000 	.word	0x40020000

08001c3c <HAL_DMA_Start_IT>:
{
 8001c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001c3e:	2420      	movs	r4, #32
 8001c40:	5d05      	ldrb	r5, [r0, r4]
 8001c42:	2d01      	cmp	r5, #1
 8001c44:	d037      	beq.n	8001cb6 <HAL_DMA_Start_IT+0x7a>
 8001c46:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8001c48:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 8001c4a:	5505      	strb	r5, [r0, r4]
  if (HAL_DMA_STATE_READY == hdma->State)
 8001c4c:	5dc5      	ldrb	r5, [r0, r7]
 8001c4e:	b2ee      	uxtb	r6, r5
 8001c50:	2d01      	cmp	r5, #1
 8001c52:	d003      	beq.n	8001c5c <HAL_DMA_Start_IT+0x20>
    __HAL_UNLOCK(hdma);
 8001c54:	2300      	movs	r3, #0
 8001c56:	5503      	strb	r3, [r0, r4]
    status = HAL_BUSY;
 8001c58:	2002      	movs	r0, #2
}
 8001c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c5c:	3c1e      	subs	r4, #30
 8001c5e:	55c4      	strb	r4, [r0, r7]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c60:	2400      	movs	r4, #0
 8001c62:	6384      	str	r4, [r0, #56]	; 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c64:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c66:	6c07      	ldr	r7, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c68:	6825      	ldr	r5, [r4, #0]
 8001c6a:	43b5      	bics	r5, r6
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c6c:	40be      	lsls	r6, r7
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c6e:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c70:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001c72:	606e      	str	r6, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 8001c74:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c76:	6843      	ldr	r3, [r0, #4]
 8001c78:	2b10      	cmp	r3, #16
 8001c7a:	d00e      	beq.n	8001c9a <HAL_DMA_Start_IT+0x5e>
    if (NULL != hdma->XferHalfCpltCallback)
 8001c7c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = SrcAddress;
 8001c7e:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c80:	60e2      	str	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00e      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c86:	220e      	movs	r2, #14
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001c8e:	2201      	movs	r2, #1
 8001c90:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c92:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001c94:	4313      	orrs	r3, r2
 8001c96:	6023      	str	r3, [r4, #0]
 8001c98:	e7df      	b.n	8001c5a <HAL_DMA_Start_IT+0x1e>
    if (NULL != hdma->XferHalfCpltCallback)
 8001c9a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8001c9c:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001c9e:	60e1      	str	r1, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_DMA_Start_IT+0x4a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001ca4:	220a      	movs	r2, #10
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	3a06      	subs	r2, #6
 8001cb0:	4393      	bics	r3, r2
 8001cb2:	6023      	str	r3, [r4, #0]
 8001cb4:	e7eb      	b.n	8001c8e <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	e7cf      	b.n	8001c5a <HAL_DMA_Start_IT+0x1e>
 8001cba:	46c0      	nop			; (mov r8, r8)

08001cbc <HAL_DMA_Abort>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001cbc:	2321      	movs	r3, #33	; 0x21
{
 8001cbe:	b530      	push	{r4, r5, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001cc0:	5cc2      	ldrb	r2, [r0, r3]
 8001cc2:	2a02      	cmp	r2, #2
 8001cc4:	d006      	beq.n	8001cd4 <HAL_DMA_Abort+0x18>
    __HAL_UNLOCK(hdma);
 8001cc6:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc8:	3b1d      	subs	r3, #29
 8001cca:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001ccc:	331c      	adds	r3, #28
 8001cce:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8001cd0:	2001      	movs	r0, #1
}
 8001cd2:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cd4:	240e      	movs	r4, #14
 8001cd6:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001cd8:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cda:	6811      	ldr	r1, [r2, #0]
 8001cdc:	43a1      	bics	r1, r4
 8001cde:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	6814      	ldr	r4, [r2, #0]
 8001ce4:	438c      	bics	r4, r1
 8001ce6:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ce8:	000c      	movs	r4, r1
 8001cea:	40ac      	lsls	r4, r5
 8001cec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001cee:	6054      	str	r4, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8001cf0:	54c1      	strb	r1, [r0, r3]
  __HAL_UNLOCK(hdma);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	e7ea      	b.n	8001cd2 <HAL_DMA_Abort+0x16>

08001cfc <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001cfc:	2321      	movs	r3, #33	; 0x21
{
 8001cfe:	b570      	push	{r4, r5, r6, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d00:	5cc2      	ldrb	r2, [r0, r3]
 8001d02:	2a02      	cmp	r2, #2
 8001d04:	d003      	beq.n	8001d0e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d06:	3b1d      	subs	r3, #29
 8001d08:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001d0a:	2001      	movs	r0, #1
}
 8001d0c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d0e:	240e      	movs	r4, #14
 8001d10:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d12:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d14:	6811      	ldr	r1, [r2, #0]
 8001d16:	43a1      	bics	r1, r4
 8001d18:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	6814      	ldr	r4, [r2, #0]
 8001d1e:	438c      	bics	r4, r1
 8001d20:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d22:	000c      	movs	r4, r1
 8001d24:	40ac      	lsls	r4, r5
 8001d26:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001d28:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001d2a:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2320      	movs	r3, #32
 8001d30:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8001d32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 8001d38:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	e7e6      	b.n	8001d0c <HAL_DMA_Abort_IT+0x10>
 8001d3e:	2000      	movs	r0, #0
 8001d40:	e7e4      	b.n	8001d0c <HAL_DMA_Abort_IT+0x10>
 8001d42:	46c0      	nop			; (mov r8, r8)

08001d44 <HAL_DMA_IRQHandler>:
{
 8001d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d46:	2404      	movs	r4, #4
 8001d48:	0026      	movs	r6, r4
 8001d4a:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d4c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d4e:	409e      	lsls	r6, r3
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d50:	682a      	ldr	r2, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001d52:	6801      	ldr	r1, [r0, #0]
 8001d54:	680f      	ldr	r7, [r1, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d56:	4232      	tst	r2, r6
 8001d58:	d00d      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x32>
 8001d5a:	423c      	tst	r4, r7
 8001d5c:	d00b      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d5e:	680b      	ldr	r3, [r1, #0]
 8001d60:	069b      	lsls	r3, r3, #26
 8001d62:	d402      	bmi.n	8001d6a <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d64:	680b      	ldr	r3, [r1, #0]
 8001d66:	43a3      	bics	r3, r4
 8001d68:	600b      	str	r3, [r1, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8001d6a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001d6c:	606e      	str	r6, [r5, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d000      	beq.n	8001d74 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 8001d72:	4798      	blx	r3
}
 8001d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d76:	2402      	movs	r4, #2
 8001d78:	0026      	movs	r6, r4
 8001d7a:	409e      	lsls	r6, r3
 8001d7c:	4232      	tst	r2, r6
 8001d7e:	d014      	beq.n	8001daa <HAL_DMA_IRQHandler+0x66>
 8001d80:	423c      	tst	r4, r7
 8001d82:	d012      	beq.n	8001daa <HAL_DMA_IRQHandler+0x66>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d84:	680b      	ldr	r3, [r1, #0]
 8001d86:	069b      	lsls	r3, r3, #26
 8001d88:	d406      	bmi.n	8001d98 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d8a:	220a      	movs	r2, #10
 8001d8c:	680b      	ldr	r3, [r1, #0]
 8001d8e:	4393      	bics	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001d92:	2321      	movs	r3, #33	; 0x21
 8001d94:	3a09      	subs	r2, #9
 8001d96:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001d98:	2320      	movs	r3, #32
 8001d9a:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001d9c:	606e      	str	r6, [r5, #4]
    __HAL_UNLOCK(hdma);
 8001d9e:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 8001da0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0e6      	beq.n	8001d74 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 8001da6:	4798      	blx	r3
 8001da8:	e7e4      	b.n	8001d74 <HAL_DMA_IRQHandler+0x30>
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001daa:	2408      	movs	r4, #8
 8001dac:	0026      	movs	r6, r4
 8001dae:	409e      	lsls	r6, r3
 8001db0:	4232      	tst	r2, r6
 8001db2:	d0df      	beq.n	8001d74 <HAL_DMA_IRQHandler+0x30>
 8001db4:	423c      	tst	r4, r7
 8001db6:	d0dd      	beq.n	8001d74 <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001db8:	680a      	ldr	r2, [r1, #0]
 8001dba:	3406      	adds	r4, #6
 8001dbc:	43a2      	bics	r2, r4
 8001dbe:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	0011      	movs	r1, r2
 8001dc4:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001dc8:	6069      	str	r1, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dca:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001dcc:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8001dd4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0cc      	beq.n	8001d74 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 8001dda:	4798      	blx	r3
 8001ddc:	e7ca      	b.n	8001d74 <HAL_DMA_IRQHandler+0x30>
 8001dde:	46c0      	nop			; (mov r8, r8)

08001de0 <HAL_DMA_GetState>:
  return hdma->State;
 8001de0:	2321      	movs	r3, #33	; 0x21
 8001de2:	5cc0      	ldrb	r0, [r0, r3]
 8001de4:	b2c0      	uxtb	r0, r0
}
 8001de6:	4770      	bx	lr

08001de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dea:	46de      	mov	lr, fp
 8001dec:	4657      	mov	r7, sl
 8001dee:	464e      	mov	r6, r9
 8001df0:	4645      	mov	r5, r8
 8001df2:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df4:	680c      	ldr	r4, [r1, #0]
{
 8001df6:	468c      	mov	ip, r1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df8:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001dfa:	2300      	movs	r3, #0
{
 8001dfc:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfe:	2c00      	cmp	r4, #0
 8001e00:	d100      	bne.n	8001e04 <HAL_GPIO_Init+0x1c>
 8001e02:	e082      	b.n	8001f0a <HAL_GPIO_Init+0x122>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e04:	4979      	ldr	r1, [pc, #484]	; (8001fec <HAL_GPIO_Init+0x204>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e06:	4f7a      	ldr	r7, [pc, #488]	; (8001ff0 <HAL_GPIO_Init+0x208>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e08:	468b      	mov	fp, r1
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e0a:	4661      	mov	r1, ip
 8001e0c:	9103      	str	r1, [sp, #12]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e0e:	2501      	movs	r5, #1
 8001e10:	0021      	movs	r1, r4
 8001e12:	409d      	lsls	r5, r3
 8001e14:	4029      	ands	r1, r5
 8001e16:	9101      	str	r1, [sp, #4]
    if (iocurrent != 0x00u)
 8001e18:	422c      	tst	r4, r5
 8001e1a:	d070      	beq.n	8001efe <HAL_GPIO_Init+0x116>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e1c:	9903      	ldr	r1, [sp, #12]
 8001e1e:	6849      	ldr	r1, [r1, #4]
 8001e20:	468a      	mov	sl, r1
 8001e22:	2103      	movs	r1, #3
 8001e24:	4656      	mov	r6, sl
 8001e26:	4031      	ands	r1, r6
 8001e28:	468c      	mov	ip, r1
 8001e2a:	3901      	subs	r1, #1
 8001e2c:	2901      	cmp	r1, #1
 8001e2e:	d800      	bhi.n	8001e32 <HAL_GPIO_Init+0x4a>
 8001e30:	e072      	b.n	8001f18 <HAL_GPIO_Init+0x130>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e32:	4661      	mov	r1, ip
 8001e34:	2903      	cmp	r1, #3
 8001e36:	d000      	beq.n	8001e3a <HAL_GPIO_Init+0x52>
 8001e38:	e0b7      	b.n	8001faa <HAL_GPIO_Init+0x1c2>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e3a:	4665      	mov	r5, ip
 8001e3c:	4095      	lsls	r5, r2
 8001e3e:	43e9      	mvns	r1, r5
 8001e40:	9102      	str	r1, [sp, #8]
      temp = GPIOx->MODER;
 8001e42:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e44:	9902      	ldr	r1, [sp, #8]
 8001e46:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e48:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e4a:	25c0      	movs	r5, #192	; 0xc0
      GPIOx->MODER = temp;
 8001e4c:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e4e:	4651      	mov	r1, sl
 8001e50:	02ad      	lsls	r5, r5, #10
 8001e52:	4229      	tst	r1, r5
 8001e54:	d053      	beq.n	8001efe <HAL_GPIO_Init+0x116>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	4659      	mov	r1, fp
 8001e58:	2501      	movs	r5, #1
 8001e5a:	465e      	mov	r6, fp
 8001e5c:	6989      	ldr	r1, [r1, #24]
 8001e5e:	4329      	orrs	r1, r5
 8001e60:	61b1      	str	r1, [r6, #24]
 8001e62:	69b1      	ldr	r1, [r6, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e64:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e66:	4029      	ands	r1, r5
 8001e68:	4d62      	ldr	r5, [pc, #392]	; (8001ff4 <HAL_GPIO_Init+0x20c>)
 8001e6a:	9105      	str	r1, [sp, #20]
 8001e6c:	46ac      	mov	ip, r5
 8001e6e:	9905      	ldr	r1, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e70:	401e      	ands	r6, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e72:	0899      	lsrs	r1, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e74:	00b6      	lsls	r6, r6, #2
 8001e76:	0089      	lsls	r1, r1, #2
 8001e78:	4461      	add	r1, ip
 8001e7a:	46b4      	mov	ip, r6
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e7c:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e7e:	260f      	movs	r6, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e80:	46a9      	mov	r9, r5
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e82:	4665      	mov	r5, ip
 8001e84:	40ae      	lsls	r6, r5
 8001e86:	0035      	movs	r5, r6
 8001e88:	464e      	mov	r6, r9
 8001e8a:	43ae      	bics	r6, r5
 8001e8c:	46b1      	mov	r9, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e8e:	2690      	movs	r6, #144	; 0x90
 8001e90:	05f6      	lsls	r6, r6, #23
 8001e92:	42b0      	cmp	r0, r6
 8001e94:	d00e      	beq.n	8001eb4 <HAL_GPIO_Init+0xcc>
 8001e96:	4e58      	ldr	r6, [pc, #352]	; (8001ff8 <HAL_GPIO_Init+0x210>)
 8001e98:	42b0      	cmp	r0, r6
 8001e9a:	d100      	bne.n	8001e9e <HAL_GPIO_Init+0xb6>
 8001e9c:	e097      	b.n	8001fce <HAL_GPIO_Init+0x1e6>
 8001e9e:	4e57      	ldr	r6, [pc, #348]	; (8001ffc <HAL_GPIO_Init+0x214>)
 8001ea0:	42b0      	cmp	r0, r6
 8001ea2:	d100      	bne.n	8001ea6 <HAL_GPIO_Init+0xbe>
 8001ea4:	e09a      	b.n	8001fdc <HAL_GPIO_Init+0x1f4>
 8001ea6:	4665      	mov	r5, ip
 8001ea8:	2605      	movs	r6, #5
 8001eaa:	40ae      	lsls	r6, r5
 8001eac:	0035      	movs	r5, r6
 8001eae:	464e      	mov	r6, r9
 8001eb0:	432e      	orrs	r6, r5
 8001eb2:	46b1      	mov	r9, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eb4:	464d      	mov	r5, r9
 8001eb6:	608d      	str	r5, [r1, #8]
        temp &= ~(iocurrent);
 8001eb8:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eba:	2680      	movs	r6, #128	; 0x80
        temp &= ~(iocurrent);
 8001ebc:	43ed      	mvns	r5, r5
 8001ebe:	46ac      	mov	ip, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ec0:	4655      	mov	r5, sl
 8001ec2:	0376      	lsls	r6, r6, #13
        temp = EXTI->RTSR;
 8001ec4:	68b9      	ldr	r1, [r7, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ec6:	4235      	tst	r5, r6
 8001ec8:	d000      	beq.n	8001ecc <HAL_GPIO_Init+0xe4>
 8001eca:	e07d      	b.n	8001fc8 <HAL_GPIO_Init+0x1e0>
        temp &= ~(iocurrent);
 8001ecc:	4665      	mov	r5, ip
 8001ece:	4029      	ands	r1, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ed0:	4655      	mov	r5, sl
        EXTI->RTSR = temp;
 8001ed2:	60b9      	str	r1, [r7, #8]
        temp = EXTI->FTSR;
 8001ed4:	68f9      	ldr	r1, [r7, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ed6:	02ad      	lsls	r5, r5, #10
 8001ed8:	d500      	bpl.n	8001edc <HAL_GPIO_Init+0xf4>
 8001eda:	e072      	b.n	8001fc2 <HAL_GPIO_Init+0x1da>
        temp &= ~(iocurrent);
 8001edc:	4665      	mov	r5, ip
 8001ede:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001ee0:	60f9      	str	r1, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ee2:	4651      	mov	r1, sl
        temp = EXTI->EMR;
 8001ee4:	687d      	ldr	r5, [r7, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ee6:	0389      	lsls	r1, r1, #14
 8001ee8:	d468      	bmi.n	8001fbc <HAL_GPIO_Init+0x1d4>
        temp &= ~(iocurrent);
 8001eea:	4661      	mov	r1, ip
 8001eec:	400d      	ands	r5, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001eee:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ef0:	4655      	mov	r5, sl
        temp = EXTI->IMR;
 8001ef2:	6839      	ldr	r1, [r7, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ef4:	03ed      	lsls	r5, r5, #15
 8001ef6:	d45d      	bmi.n	8001fb4 <HAL_GPIO_Init+0x1cc>
        temp &= ~(iocurrent);
 8001ef8:	4665      	mov	r5, ip
 8001efa:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001efc:	6039      	str	r1, [r7, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001efe:	0021      	movs	r1, r4
      }
    }

    position++;
 8001f00:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f02:	40d9      	lsrs	r1, r3
 8001f04:	3202      	adds	r2, #2
 8001f06:	2900      	cmp	r1, #0
 8001f08:	d181      	bne.n	8001e0e <HAL_GPIO_Init+0x26>
  } 
}
 8001f0a:	b007      	add	sp, #28
 8001f0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f0e:	46bb      	mov	fp, r7
 8001f10:	46b2      	mov	sl, r6
 8001f12:	46a9      	mov	r9, r5
 8001f14:	46a0      	mov	r8, r4
 8001f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8001f18:	6881      	ldr	r1, [r0, #8]
 8001f1a:	4689      	mov	r9, r1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f1c:	2103      	movs	r1, #3
 8001f1e:	4091      	lsls	r1, r2
 8001f20:	43ce      	mvns	r6, r1
 8001f22:	9602      	str	r6, [sp, #8]
 8001f24:	464e      	mov	r6, r9
 8001f26:	438e      	bics	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f28:	9903      	ldr	r1, [sp, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f2a:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f2c:	68ce      	ldr	r6, [r1, #12]
 8001f2e:	4096      	lsls	r6, r2
 8001f30:	46b0      	mov	r8, r6
 8001f32:	464e      	mov	r6, r9
 8001f34:	4641      	mov	r1, r8
 8001f36:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 8001f38:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001f3a:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f3c:	000e      	movs	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f3e:	4651      	mov	r1, sl
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f40:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f42:	090d      	lsrs	r5, r1, #4
 8001f44:	2101      	movs	r1, #1
 8001f46:	400d      	ands	r5, r1
 8001f48:	409d      	lsls	r5, r3
 8001f4a:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001f4c:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8001f4e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f50:	9902      	ldr	r1, [sp, #8]
 8001f52:	400d      	ands	r5, r1
 8001f54:	46a8      	mov	r8, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f56:	9903      	ldr	r1, [sp, #12]
 8001f58:	4646      	mov	r6, r8
 8001f5a:	688d      	ldr	r5, [r1, #8]
 8001f5c:	4095      	lsls	r5, r2
 8001f5e:	4335      	orrs	r5, r6
        GPIOx->PUPDR = temp;
 8001f60:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f62:	4666      	mov	r6, ip
 8001f64:	4665      	mov	r5, ip
 8001f66:	4095      	lsls	r5, r2
 8001f68:	2e02      	cmp	r6, #2
 8001f6a:	d000      	beq.n	8001f6e <HAL_GPIO_Init+0x186>
 8001f6c:	e769      	b.n	8001e42 <HAL_GPIO_Init+0x5a>
        temp = GPIOx->AFR[position >> 3u];
 8001f6e:	08d9      	lsrs	r1, r3, #3
 8001f70:	0089      	lsls	r1, r1, #2
 8001f72:	468c      	mov	ip, r1
 8001f74:	4484      	add	ip, r0
 8001f76:	4661      	mov	r1, ip
 8001f78:	6a09      	ldr	r1, [r1, #32]
 8001f7a:	4689      	mov	r9, r1
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f7c:	2107      	movs	r1, #7
 8001f7e:	000e      	movs	r6, r1
 8001f80:	401e      	ands	r6, r3
 8001f82:	00b1      	lsls	r1, r6, #2
 8001f84:	260f      	movs	r6, #15
 8001f86:	4688      	mov	r8, r1
 8001f88:	408e      	lsls	r6, r1
 8001f8a:	4649      	mov	r1, r9
 8001f8c:	43b1      	bics	r1, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f8e:	4646      	mov	r6, r8
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f90:	4689      	mov	r9, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f92:	9903      	ldr	r1, [sp, #12]
 8001f94:	6909      	ldr	r1, [r1, #16]
 8001f96:	40b1      	lsls	r1, r6
 8001f98:	4688      	mov	r8, r1
 8001f9a:	4649      	mov	r1, r9
 8001f9c:	4646      	mov	r6, r8
 8001f9e:	4331      	orrs	r1, r6
 8001fa0:	4689      	mov	r9, r1
        GPIOx->AFR[position >> 3u] = temp;
 8001fa2:	4661      	mov	r1, ip
 8001fa4:	464e      	mov	r6, r9
 8001fa6:	620e      	str	r6, [r1, #32]
 8001fa8:	e74b      	b.n	8001e42 <HAL_GPIO_Init+0x5a>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001faa:	2103      	movs	r1, #3
 8001fac:	4091      	lsls	r1, r2
 8001fae:	43c9      	mvns	r1, r1
 8001fb0:	9102      	str	r1, [sp, #8]
 8001fb2:	e7cc      	b.n	8001f4e <HAL_GPIO_Init+0x166>
          temp |= iocurrent;
 8001fb4:	9d01      	ldr	r5, [sp, #4]
 8001fb6:	430d      	orrs	r5, r1
 8001fb8:	0029      	movs	r1, r5
 8001fba:	e79f      	b.n	8001efc <HAL_GPIO_Init+0x114>
          temp |= iocurrent;
 8001fbc:	9901      	ldr	r1, [sp, #4]
 8001fbe:	430d      	orrs	r5, r1
 8001fc0:	e795      	b.n	8001eee <HAL_GPIO_Init+0x106>
          temp |= iocurrent;
 8001fc2:	9d01      	ldr	r5, [sp, #4]
 8001fc4:	4329      	orrs	r1, r5
 8001fc6:	e78b      	b.n	8001ee0 <HAL_GPIO_Init+0xf8>
          temp |= iocurrent;
 8001fc8:	9d01      	ldr	r5, [sp, #4]
 8001fca:	4329      	orrs	r1, r5
 8001fcc:	e780      	b.n	8001ed0 <HAL_GPIO_Init+0xe8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fce:	4666      	mov	r6, ip
 8001fd0:	2501      	movs	r5, #1
 8001fd2:	40b5      	lsls	r5, r6
 8001fd4:	464e      	mov	r6, r9
 8001fd6:	432e      	orrs	r6, r5
 8001fd8:	46b1      	mov	r9, r6
 8001fda:	e76b      	b.n	8001eb4 <HAL_GPIO_Init+0xcc>
 8001fdc:	4666      	mov	r6, ip
 8001fde:	2502      	movs	r5, #2
 8001fe0:	40b5      	lsls	r5, r6
 8001fe2:	464e      	mov	r6, r9
 8001fe4:	432e      	orrs	r6, r5
 8001fe6:	46b1      	mov	r9, r6
 8001fe8:	e764      	b.n	8001eb4 <HAL_GPIO_Init+0xcc>
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010400 	.word	0x40010400
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	48000400 	.word	0x48000400
 8001ffc:	48000800 	.word	0x48000800

08002000 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002000:	2a00      	cmp	r2, #0
 8002002:	d001      	beq.n	8002008 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002004:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002006:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002008:	6281      	str	r1, [r0, #40]	; 0x28
}
 800200a:	e7fc      	b.n	8002006 <HAL_GPIO_WritePin+0x6>

0800200c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800200c:	b510      	push	{r4, lr}
 800200e:	1e04      	subs	r4, r0, #0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002010:	d04d      	beq.n	80020ae <HAL_I2C_Init+0xa2>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002012:	2341      	movs	r3, #65	; 0x41
 8002014:	5cc3      	ldrb	r3, [r0, r3]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d043      	beq.n	80020a4 <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800201c:	2341      	movs	r3, #65	; 0x41
 800201e:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002020:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002022:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	438a      	bics	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800202c:	6861      	ldr	r1, [r4, #4]
 800202e:	4a21      	ldr	r2, [pc, #132]	; (80020b4 <HAL_I2C_Init+0xa8>)
 8002030:	400a      	ands	r2, r1
 8002032:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	4920      	ldr	r1, [pc, #128]	; (80020b8 <HAL_I2C_Init+0xac>)
 8002038:	400a      	ands	r2, r1
 800203a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800203c:	68e2      	ldr	r2, [r4, #12]
 800203e:	2a01      	cmp	r2, #1
 8002040:	d02a      	beq.n	8002098 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002042:	2184      	movs	r1, #132	; 0x84
 8002044:	68a0      	ldr	r0, [r4, #8]
 8002046:	0209      	lsls	r1, r1, #8
 8002048:	4301      	orrs	r1, r0
 800204a:	6099      	str	r1, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800204c:	2a02      	cmp	r2, #2
 800204e:	d102      	bne.n	8002056 <HAL_I2C_Init+0x4a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002050:	2280      	movs	r2, #128	; 0x80
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	4a18      	ldr	r2, [pc, #96]	; (80020bc <HAL_I2C_Init+0xb0>)
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 800205a:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800205c:	430a      	orrs	r2, r1
 800205e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	4915      	ldr	r1, [pc, #84]	; (80020b8 <HAL_I2C_Init+0xac>)
 8002064:	400a      	ands	r2, r1
 8002066:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002068:	6961      	ldr	r1, [r4, #20]
 800206a:	6922      	ldr	r2, [r4, #16]
 800206c:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800206e:	69a1      	ldr	r1, [r4, #24]
 8002070:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002072:	430a      	orrs	r2, r1
 8002074:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002076:	6a21      	ldr	r1, [r4, #32]
 8002078:	69e2      	ldr	r2, [r4, #28]
 800207a:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 800207c:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800207e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002086:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002088:	2241      	movs	r2, #65	; 0x41
 800208a:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800208c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800208e:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002090:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 8002092:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002094:	54a3      	strb	r3, [r4, r2]
}
 8002096:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002098:	2280      	movs	r2, #128	; 0x80
 800209a:	68a1      	ldr	r1, [r4, #8]
 800209c:	0212      	lsls	r2, r2, #8
 800209e:	430a      	orrs	r2, r1
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	e7d8      	b.n	8002056 <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 80020a4:	3340      	adds	r3, #64	; 0x40
 80020a6:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 80020a8:	f7fe ff8c 	bl	8000fc4 <HAL_I2C_MspInit>
 80020ac:	e7b6      	b.n	800201c <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 80020ae:	2001      	movs	r0, #1
 80020b0:	e7f1      	b.n	8002096 <HAL_I2C_Init+0x8a>
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	f0ffffff 	.word	0xf0ffffff
 80020b8:	ffff7fff 	.word	0xffff7fff
 80020bc:	02008000 	.word	0x02008000

080020c0 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 80020c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c2:	4647      	mov	r7, r8
 80020c4:	46ce      	mov	lr, r9
 80020c6:	4698      	mov	r8, r3
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80020c8:	2341      	movs	r3, #65	; 0x41
 80020ca:	2528      	movs	r5, #40	; 0x28
{
 80020cc:	b580      	push	{r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80020ce:	4699      	mov	r9, r3
 80020d0:	5cc3      	ldrb	r3, [r0, r3]
{
 80020d2:	0004      	movs	r4, r0
 80020d4:	000e      	movs	r6, r1
 80020d6:	0017      	movs	r7, r2

    return HAL_OK;
  }
  else
  {
    return HAL_ERROR;
 80020d8:	2001      	movs	r0, #1
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80020da:	401d      	ands	r5, r3
 80020dc:	2d28      	cmp	r5, #40	; 0x28
 80020de:	d137      	bne.n	8002150 <HAL_I2C_Slave_Seq_Transmit_IT+0x90>
    if ((pData == NULL) || (Size == 0U))
 80020e0:	2900      	cmp	r1, #0
 80020e2:	d039      	beq.n	8002158 <HAL_I2C_Slave_Seq_Transmit_IT+0x98>
 80020e4:	2a00      	cmp	r2, #0
 80020e6:	d037      	beq.n	8002158 <HAL_I2C_Slave_Seq_Transmit_IT+0x98>
  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80020e8:	464b      	mov	r3, r9
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80020ea:	22fa      	movs	r2, #250	; 0xfa
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80020ec:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	6819      	ldr	r1, [r3, #0]
 80020f2:	4391      	bics	r1, r2
 80020f4:	6019      	str	r1, [r3, #0]
    __HAL_LOCK(hi2c);
 80020f6:	2140      	movs	r1, #64	; 0x40
 80020f8:	5c62      	ldrb	r2, [r4, r1]
 80020fa:	2a01      	cmp	r2, #1
 80020fc:	d052      	beq.n	80021a4 <HAL_I2C_Slave_Seq_Transmit_IT+0xe4>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80020fe:	464a      	mov	r2, r9
    __HAL_LOCK(hi2c);
 8002100:	5460      	strb	r0, [r4, r1]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002102:	5ca1      	ldrb	r1, [r4, r2]
 8002104:	292a      	cmp	r1, #42	; 0x2a
 8002106:	d02c      	beq.n	8002162 <HAL_I2C_Slave_Seq_Transmit_IT+0xa2>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002108:	2241      	movs	r2, #65	; 0x41
 800210a:	2129      	movs	r1, #41	; 0x29
 800210c:	54a1      	strb	r1, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800210e:	3201      	adds	r2, #1
 8002110:	3909      	subs	r1, #9
 8002112:	54a1      	strb	r1, [r4, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002114:	2200      	movs	r2, #0
 8002116:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	4923      	ldr	r1, [pc, #140]	; (80021a8 <HAL_I2C_Slave_Seq_Transmit_IT+0xe8>)
 800211c:	400a      	ands	r2, r1
 800211e:	605a      	str	r2, [r3, #4]
    hi2c->XferCount   = Size;
 8002120:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002122:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002124:	6266      	str	r6, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8002126:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002128:	4642      	mov	r2, r8
 800212a:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800212c:	4a1f      	ldr	r2, [pc, #124]	; (80021ac <HAL_I2C_Slave_Seq_Transmit_IT+0xec>)
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800212e:	6999      	ldr	r1, [r3, #24]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002130:	6362      	str	r2, [r4, #52]	; 0x34
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8002132:	699a      	ldr	r2, [r3, #24]
 8002134:	03d2      	lsls	r2, r2, #15
 8002136:	d503      	bpl.n	8002140 <HAL_I2C_Slave_Seq_Transmit_IT+0x80>
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002138:	2208      	movs	r2, #8
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 800213a:	420a      	tst	r2, r1
 800213c:	d000      	beq.n	8002140 <HAL_I2C_Slave_Seq_Transmit_IT+0x80>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800213e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002140:	2240      	movs	r2, #64	; 0x40
 8002142:	2100      	movs	r1, #0
    return HAL_OK;
 8002144:	2000      	movs	r0, #0
    __HAL_UNLOCK(hi2c);
 8002146:	54a1      	strb	r1, [r4, r2]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	31fa      	adds	r1, #250	; 0xfa
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]
}
 8002150:	bcc0      	pop	{r6, r7}
 8002152:	46b9      	mov	r9, r7
 8002154:	46b0      	mov	r8, r6
 8002156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	009b      	lsls	r3, r3, #2
      return  HAL_ERROR;
 800215c:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800215e:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8002160:	e7f6      	b.n	8002150 <HAL_I2C_Slave_Seq_Transmit_IT+0x90>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002162:	5ca0      	ldrb	r0, [r4, r2]
 8002164:	4028      	ands	r0, r5
 8002166:	3828      	subs	r0, #40	; 0x28
 8002168:	4242      	negs	r2, r0
 800216a:	4150      	adcs	r0, r2
 800216c:	22b0      	movs	r2, #176	; 0xb0
 800216e:	4240      	negs	r0, r0
 8002170:	4010      	ands	r0, r2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002172:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002174:	38f5      	subs	r0, #245	; 0xf5
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002176:	4010      	ands	r0, r2
 8002178:	6018      	str	r0, [r3, #0]
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	0412      	lsls	r2, r2, #16
 800217e:	d5c3      	bpl.n	8002108 <HAL_I2C_Slave_Seq_Transmit_IT+0x48>
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4909      	ldr	r1, [pc, #36]	; (80021a8 <HAL_I2C_Slave_Seq_Transmit_IT+0xe8>)
        if (hi2c->hdmarx != NULL)
 8002184:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002186:	400a      	ands	r2, r1
 8002188:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmarx != NULL)
 800218a:	2800      	cmp	r0, #0
 800218c:	d0bc      	beq.n	8002108 <HAL_I2C_Slave_Seq_Transmit_IT+0x48>
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_I2C_Slave_Seq_Transmit_IT+0xf0>)
 8002190:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002192:	f7ff fdb3 	bl	8001cfc <HAL_DMA_Abort_IT>
 8002196:	2800      	cmp	r0, #0
 8002198:	d002      	beq.n	80021a0 <HAL_I2C_Slave_Seq_Transmit_IT+0xe0>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800219a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800219c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800219e:	4798      	blx	r3
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	e7b1      	b.n	8002108 <HAL_I2C_Slave_Seq_Transmit_IT+0x48>
    __HAL_LOCK(hi2c);
 80021a4:	2002      	movs	r0, #2
 80021a6:	e7d3      	b.n	8002150 <HAL_I2C_Slave_Seq_Transmit_IT+0x90>
 80021a8:	ffff7fff 	.word	0xffff7fff
 80021ac:	0800278d 	.word	0x0800278d
 80021b0:	08002421 	.word	0x08002421

080021b4 <HAL_I2C_Slave_Seq_Receive_IT>:
{
 80021b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b6:	4647      	mov	r7, r8
 80021b8:	46ce      	mov	lr, r9
 80021ba:	4698      	mov	r8, r3
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80021bc:	2341      	movs	r3, #65	; 0x41
 80021be:	2528      	movs	r5, #40	; 0x28
{
 80021c0:	b580      	push	{r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80021c2:	4699      	mov	r9, r3
 80021c4:	5cc3      	ldrb	r3, [r0, r3]
{
 80021c6:	0004      	movs	r4, r0
 80021c8:	000e      	movs	r6, r1
 80021ca:	0017      	movs	r7, r2
    return HAL_ERROR;
 80021cc:	2001      	movs	r0, #1
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80021ce:	401d      	ands	r5, r3
 80021d0:	2d28      	cmp	r5, #40	; 0x28
 80021d2:	d137      	bne.n	8002244 <HAL_I2C_Slave_Seq_Receive_IT+0x90>
    if ((pData == NULL) || (Size == 0U))
 80021d4:	2900      	cmp	r1, #0
 80021d6:	d039      	beq.n	800224c <HAL_I2C_Slave_Seq_Receive_IT+0x98>
 80021d8:	2a00      	cmp	r2, #0
 80021da:	d037      	beq.n	800224c <HAL_I2C_Slave_Seq_Receive_IT+0x98>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80021dc:	464b      	mov	r3, r9
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80021de:	22fc      	movs	r2, #252	; 0xfc
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80021e0:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80021e2:	6823      	ldr	r3, [r4, #0]
 80021e4:	6819      	ldr	r1, [r3, #0]
 80021e6:	4391      	bics	r1, r2
 80021e8:	6019      	str	r1, [r3, #0]
    __HAL_LOCK(hi2c);
 80021ea:	2140      	movs	r1, #64	; 0x40
 80021ec:	5c62      	ldrb	r2, [r4, r1]
 80021ee:	2a01      	cmp	r2, #1
 80021f0:	d052      	beq.n	8002298 <HAL_I2C_Slave_Seq_Receive_IT+0xe4>
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80021f2:	464a      	mov	r2, r9
    __HAL_LOCK(hi2c);
 80021f4:	5460      	strb	r0, [r4, r1]
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80021f6:	5ca1      	ldrb	r1, [r4, r2]
 80021f8:	2929      	cmp	r1, #41	; 0x29
 80021fa:	d02c      	beq.n	8002256 <HAL_I2C_Slave_Seq_Receive_IT+0xa2>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80021fc:	2241      	movs	r2, #65	; 0x41
 80021fe:	212a      	movs	r1, #42	; 0x2a
 8002200:	54a1      	strb	r1, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002202:	3201      	adds	r2, #1
 8002204:	390a      	subs	r1, #10
 8002206:	54a1      	strb	r1, [r4, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002208:	2200      	movs	r2, #0
 800220a:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	4923      	ldr	r1, [pc, #140]	; (800229c <HAL_I2C_Slave_Seq_Receive_IT+0xe8>)
 8002210:	400a      	ands	r2, r1
 8002212:	605a      	str	r2, [r3, #4]
    hi2c->XferCount   = Size;
 8002214:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002216:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002218:	6266      	str	r6, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800221a:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800221c:	4642      	mov	r2, r8
 800221e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002220:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <HAL_I2C_Slave_Seq_Receive_IT+0xec>)
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002222:	6999      	ldr	r1, [r3, #24]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002224:	6362      	str	r2, [r4, #52]	; 0x34
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8002226:	699a      	ldr	r2, [r3, #24]
 8002228:	03d2      	lsls	r2, r2, #15
 800222a:	d403      	bmi.n	8002234 <HAL_I2C_Slave_Seq_Receive_IT+0x80>
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800222c:	2208      	movs	r2, #8
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 800222e:	420a      	tst	r2, r1
 8002230:	d000      	beq.n	8002234 <HAL_I2C_Slave_Seq_Receive_IT+0x80>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002232:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002234:	2240      	movs	r2, #64	; 0x40
 8002236:	2100      	movs	r1, #0
    return HAL_OK;
 8002238:	2000      	movs	r0, #0
    __HAL_UNLOCK(hi2c);
 800223a:	54a1      	strb	r1, [r4, r2]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	31fc      	adds	r1, #252	; 0xfc
 8002240:	430a      	orrs	r2, r1
 8002242:	601a      	str	r2, [r3, #0]
}
 8002244:	bcc0      	pop	{r6, r7}
 8002246:	46b9      	mov	r9, r7
 8002248:	46b0      	mov	r8, r6
 800224a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	009b      	lsls	r3, r3, #2
      return  HAL_ERROR;
 8002250:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002252:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8002254:	e7f6      	b.n	8002244 <HAL_I2C_Slave_Seq_Receive_IT+0x90>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002256:	5ca0      	ldrb	r0, [r4, r2]
 8002258:	4028      	ands	r0, r5
 800225a:	3828      	subs	r0, #40	; 0x28
 800225c:	4242      	negs	r2, r0
 800225e:	4150      	adcs	r0, r2
 8002260:	22b0      	movs	r2, #176	; 0xb0
 8002262:	4240      	negs	r0, r0
 8002264:	4010      	ands	r0, r2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002266:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002268:	38f3      	subs	r0, #243	; 0xf3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800226a:	4010      	ands	r0, r2
 800226c:	6018      	str	r0, [r3, #0]
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	0452      	lsls	r2, r2, #17
 8002272:	d5c3      	bpl.n	80021fc <HAL_I2C_Slave_Seq_Receive_IT+0x48>
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	490b      	ldr	r1, [pc, #44]	; (80022a4 <HAL_I2C_Slave_Seq_Receive_IT+0xf0>)
        if (hi2c->hdmatx != NULL)
 8002278:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800227a:	400a      	ands	r2, r1
 800227c:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmatx != NULL)
 800227e:	2800      	cmp	r0, #0
 8002280:	d0bc      	beq.n	80021fc <HAL_I2C_Slave_Seq_Receive_IT+0x48>
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_I2C_Slave_Seq_Receive_IT+0xf4>)
 8002284:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002286:	f7ff fd39 	bl	8001cfc <HAL_DMA_Abort_IT>
 800228a:	2800      	cmp	r0, #0
 800228c:	d002      	beq.n	8002294 <HAL_I2C_Slave_Seq_Receive_IT+0xe0>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800228e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002290:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002292:	4798      	blx	r3
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	e7b1      	b.n	80021fc <HAL_I2C_Slave_Seq_Receive_IT+0x48>
    __HAL_LOCK(hi2c);
 8002298:	2002      	movs	r0, #2
 800229a:	e7d3      	b.n	8002244 <HAL_I2C_Slave_Seq_Receive_IT+0x90>
 800229c:	ffff7fff 	.word	0xffff7fff
 80022a0:	0800278d 	.word	0x0800278d
 80022a4:	ffffbfff 	.word	0xffffbfff
 80022a8:	08002421 	.word	0x08002421

080022ac <HAL_I2C_EnableListen_IT>:
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ac:	2241      	movs	r2, #65	; 0x41
 80022ae:	5c81      	ldrb	r1, [r0, r2]
{
 80022b0:	0003      	movs	r3, r0
    return HAL_BUSY;
 80022b2:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b4:	2920      	cmp	r1, #32
 80022b6:	d109      	bne.n	80022cc <HAL_I2C_EnableListen_IT+0x20>
    return HAL_OK;
 80022b8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80022ba:	3108      	adds	r1, #8
 80022bc:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80022be:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <HAL_I2C_EnableListen_IT+0x24>)
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80022c0:	3190      	adds	r1, #144	; 0x90
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80022c2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	6813      	ldr	r3, [r2, #0]
 80022c8:	430b      	orrs	r3, r1
 80022ca:	6013      	str	r3, [r2, #0]
}
 80022cc:	4770      	bx	lr
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	0800278d 	.word	0x0800278d

080022d4 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80022d4:	6803      	ldr	r3, [r0, #0]
{
 80022d6:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80022d8:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80022da:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80022dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d000      	beq.n	80022e4 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 80022e2:	4798      	blx	r3
}
 80022e4:	bd10      	pop	{r4, pc}
 80022e6:	46c0      	nop			; (mov r8, r8)

080022e8 <HAL_I2C_SlaveRxCpltCallback>:
 80022e8:	4770      	bx	lr
 80022ea:	46c0      	nop			; (mov r8, r8)

080022ec <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	2142      	movs	r1, #66	; 0x42
{
 80022ee:	b510      	push	{r4, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f0:	2400      	movs	r4, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80022f2:	6803      	ldr	r3, [r0, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f6:	5444      	strb	r4, [r0, r1]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80022f8:	3941      	subs	r1, #65	; 0x41
 80022fa:	0454      	lsls	r4, r2, #17
 80022fc:	d521      	bpl.n	8002342 <I2C_ITSlaveSeqCplt+0x56>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4920      	ldr	r1, [pc, #128]	; (8002384 <I2C_ITSlaveSeqCplt+0x98>)
 8002302:	400a      	ands	r2, r1
 8002304:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002306:	2241      	movs	r2, #65	; 0x41
 8002308:	5c81      	ldrb	r1, [r0, r2]
 800230a:	2929      	cmp	r1, #41	; 0x29
 800230c:	d024      	beq.n	8002358 <I2C_ITSlaveSeqCplt+0x6c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800230e:	5c81      	ldrb	r1, [r0, r2]
 8002310:	292a      	cmp	r1, #42	; 0x2a
 8002312:	d000      	beq.n	8002316 <I2C_ITSlaveSeqCplt+0x2a>
}
 8002314:	bd10      	pop	{r4, pc}
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002316:	2422      	movs	r4, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002318:	3902      	subs	r1, #2
 800231a:	5481      	strb	r1, [r0, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800231c:	6304      	str	r4, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800231e:	5c82      	ldrb	r2, [r0, r2]
 8002320:	4011      	ands	r1, r2
 8002322:	3928      	subs	r1, #40	; 0x28
 8002324:	424a      	negs	r2, r1
 8002326:	4151      	adcs	r1, r2
 8002328:	22b0      	movs	r2, #176	; 0xb0
 800232a:	4249      	negs	r1, r1
 800232c:	4011      	ands	r1, r2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800232e:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002330:	39f5      	subs	r1, #245	; 0xf5
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002332:	4011      	ands	r1, r2
 8002334:	6019      	str	r1, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002336:	2200      	movs	r2, #0
 8002338:	2340      	movs	r3, #64	; 0x40
 800233a:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800233c:	f7ff ffd4 	bl	80022e8 <HAL_I2C_SlaveRxCpltCallback>
}
 8002340:	e7e8      	b.n	8002314 <I2C_ITSlaveSeqCplt+0x28>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002342:	0bd2      	lsrs	r2, r2, #15
 8002344:	4211      	tst	r1, r2
 8002346:	d0de      	beq.n	8002306 <I2C_ITSlaveSeqCplt+0x1a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	490f      	ldr	r1, [pc, #60]	; (8002388 <I2C_ITSlaveSeqCplt+0x9c>)
 800234c:	400a      	ands	r2, r1
 800234e:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002350:	2241      	movs	r2, #65	; 0x41
 8002352:	5c81      	ldrb	r1, [r0, r2]
 8002354:	2929      	cmp	r1, #41	; 0x29
 8002356:	d1da      	bne.n	800230e <I2C_ITSlaveSeqCplt+0x22>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002358:	2421      	movs	r4, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800235a:	3901      	subs	r1, #1
 800235c:	5481      	strb	r1, [r0, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800235e:	6304      	str	r4, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002360:	5c82      	ldrb	r2, [r0, r2]
 8002362:	4011      	ands	r1, r2
 8002364:	3928      	subs	r1, #40	; 0x28
 8002366:	424a      	negs	r2, r1
 8002368:	4151      	adcs	r1, r2
 800236a:	22b0      	movs	r2, #176	; 0xb0
 800236c:	4249      	negs	r1, r1
 800236e:	4011      	ands	r1, r2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002370:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002372:	39f3      	subs	r1, #243	; 0xf3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002374:	4011      	ands	r1, r2
 8002376:	6019      	str	r1, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002378:	2200      	movs	r2, #0
 800237a:	2340      	movs	r3, #64	; 0x40
 800237c:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800237e:	f7fe fb1f 	bl	80009c0 <HAL_I2C_SlaveTxCpltCallback>
 8002382:	e7c7      	b.n	8002314 <I2C_ITSlaveSeqCplt+0x28>
 8002384:	ffffbfff 	.word	0xffffbfff
 8002388:	ffff7fff 	.word	0xffff7fff

0800238c <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800238c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238e:	46c6      	mov	lr, r8
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002390:	26fe      	movs	r6, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 8002392:	6803      	ldr	r3, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002394:	68c5      	ldr	r5, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8002396:	6999      	ldr	r1, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002398:	699a      	ldr	r2, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 800239a:	03c9      	lsls	r1, r1, #15
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800239c:	0c12      	lsrs	r2, r2, #16
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800239e:	689c      	ldr	r4, [r3, #8]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80023a0:	b500      	push	{lr}
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80023a2:	68df      	ldr	r7, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 80023a4:	0fc9      	lsrs	r1, r1, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80023a6:	4032      	ands	r2, r6
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023a8:	2d02      	cmp	r5, #2
 80023aa:	d113      	bne.n	80023d4 <I2C_ITAddrCplt.part.0+0x48>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80023ac:	05a4      	lsls	r4, r4, #22
 80023ae:	0da5      	lsrs	r5, r4, #22
 80023b0:	46ac      	mov	ip, r5
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80023b2:	2506      	movs	r5, #6
 80023b4:	0f64      	lsrs	r4, r4, #29
 80023b6:	4054      	eors	r4, r2
 80023b8:	002a      	movs	r2, r5
 80023ba:	4022      	ands	r2, r4
 80023bc:	4690      	mov	r8, r2
 80023be:	4225      	tst	r5, r4
 80023c0:	d112      	bne.n	80023e8 <I2C_ITAddrCplt.part.0+0x5c>
        hi2c->AddrEventCount++;
 80023c2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80023c4:	3401      	adds	r4, #1
 80023c6:	6484      	str	r4, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80023c8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80023ca:	2a02      	cmp	r2, #2
 80023cc:	d018      	beq.n	8002400 <I2C_ITAddrCplt.part.0+0x74>
}
 80023ce:	bc80      	pop	{r7}
 80023d0:	46b8      	mov	r8, r7
 80023d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80023d4:	25b8      	movs	r5, #184	; 0xb8
 80023d6:	681c      	ldr	r4, [r3, #0]
 80023d8:	43ac      	bics	r4, r5
 80023da:	601c      	str	r4, [r3, #0]
      __HAL_UNLOCK(hi2c);
 80023dc:	2340      	movs	r3, #64	; 0x40
 80023de:	2400      	movs	r4, #0
 80023e0:	54c4      	strb	r4, [r0, r3]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023e2:	f7fe fd45 	bl	8000e70 <HAL_I2C_AddrCallback>
}
 80023e6:	e7f2      	b.n	80023ce <I2C_ITAddrCplt.part.0+0x42>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80023e8:	24b8      	movs	r4, #184	; 0xb8
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	43a2      	bics	r2, r4
 80023ee:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
 80023f0:	2340      	movs	r3, #64	; 0x40
 80023f2:	2200      	movs	r2, #0
 80023f4:	54c2      	strb	r2, [r0, r3]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023f6:	0032      	movs	r2, r6
 80023f8:	403a      	ands	r2, r7
 80023fa:	f7fe fd39 	bl	8000e70 <HAL_I2C_AddrCallback>
 80023fe:	e7e6      	b.n	80023ce <I2C_ITAddrCplt.part.0+0x42>
          hi2c->AddrEventCount = 0U;
 8002400:	4642      	mov	r2, r8
 8002402:	6482      	str	r2, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002404:	2208      	movs	r2, #8
 8002406:	61da      	str	r2, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8002408:	4642      	mov	r2, r8
 800240a:	2340      	movs	r3, #64	; 0x40
 800240c:	54c2      	strb	r2, [r0, r3]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800240e:	4662      	mov	r2, ip
 8002410:	f7fe fd2e 	bl	8000e70 <HAL_I2C_AddrCallback>
 8002414:	e7db      	b.n	80023ce <I2C_ITAddrCplt.part.0+0x42>
 8002416:	46c0      	nop			; (mov r8, r8)

08002418 <HAL_I2C_ListenCpltCallback>:
 8002418:	4770      	bx	lr
 800241a:	46c0      	nop			; (mov r8, r8)

0800241c <HAL_I2C_AbortCpltCallback>:
 800241c:	4770      	bx	lr
 800241e:	46c0      	nop			; (mov r8, r8)

08002420 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002420:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002422:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 8002424:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800242a:	2200      	movs	r2, #0
 800242c:	635a      	str	r2, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 800242e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002434:	2200      	movs	r2, #0
 8002436:	635a      	str	r2, [r3, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002438:	2341      	movs	r3, #65	; 0x41
 800243a:	5cc2      	ldrb	r2, [r0, r3]
 800243c:	2a60      	cmp	r2, #96	; 0x60
 800243e:	d006      	beq.n	800244e <I2C_DMAAbort+0x2e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002440:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8002442:	2240      	movs	r2, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8002444:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002446:	5483      	strb	r3, [r0, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002448:	f7fe fd38 	bl	8000ebc <HAL_I2C_ErrorCallback>
}
 800244c:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800244e:	3a40      	subs	r2, #64	; 0x40
 8002450:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002452:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8002454:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002456:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002458:	5483      	strb	r3, [r0, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 800245a:	f7ff ffdf 	bl	800241c <HAL_I2C_AbortCpltCallback>
}
 800245e:	e7f5      	b.n	800244c <I2C_DMAAbort+0x2c>

08002460 <I2C_ITError>:
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002460:	2241      	movs	r2, #65	; 0x41
{
 8002462:	b570      	push	{r4, r5, r6, lr}
 8002464:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002466:	5c83      	ldrb	r3, [r0, r2]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002468:	2500      	movs	r5, #0
 800246a:	2042      	movs	r0, #66	; 0x42
 800246c:	5425      	strb	r5, [r4, r0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800246e:	4852      	ldr	r0, [pc, #328]	; (80025b8 <I2C_ITError+0x158>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002470:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002472:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002474:	8565      	strh	r5, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002476:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002478:	4308      	orrs	r0, r1
 800247a:	6460      	str	r0, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800247c:	2b02      	cmp	r3, #2
 800247e:	d834      	bhi.n	80024ea <I2C_ITError+0x8a>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002480:	2028      	movs	r0, #40	; 0x28
 8002482:	5ca3      	ldrb	r3, [r4, r2]
 8002484:	4003      	ands	r3, r0
 8002486:	3b28      	subs	r3, #40	; 0x28
 8002488:	4259      	negs	r1, r3
 800248a:	414b      	adcs	r3, r1
 800248c:	21b0      	movs	r1, #176	; 0xb0
 800248e:	425b      	negs	r3, r3
 8002490:	4019      	ands	r1, r3
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002492:	5ca3      	ldrb	r3, [r4, r2]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002494:	39f7      	subs	r1, #247	; 0xf7
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002496:	4018      	ands	r0, r3
 8002498:	2828      	cmp	r0, #40	; 0x28
 800249a:	d001      	beq.n	80024a0 <I2C_ITError+0x40>
 800249c:	21f7      	movs	r1, #247	; 0xf7
 800249e:	4249      	negs	r1, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4011      	ands	r1, r2
 80024a6:	6019      	str	r1, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024a8:	2241      	movs	r2, #65	; 0x41
 80024aa:	2128      	movs	r1, #40	; 0x28
 80024ac:	54a1      	strb	r1, [r4, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80024ae:	4a43      	ldr	r2, [pc, #268]	; (80025bc <I2C_ITError+0x15c>)
 80024b0:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80024b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 80024b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d004      	beq.n	80024c4 <I2C_ITError+0x64>
 80024ba:	0011      	movs	r1, r2
 80024bc:	2510      	movs	r5, #16
 80024be:	3911      	subs	r1, #17
 80024c0:	43a9      	bics	r1, r5
 80024c2:	d03b      	beq.n	800253c <I2C_ITError+0xdc>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80024c4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80024c6:	2800      	cmp	r0, #0
 80024c8:	d003      	beq.n	80024d2 <I2C_ITError+0x72>
 80024ca:	2110      	movs	r1, #16
 80024cc:	3a12      	subs	r2, #18
 80024ce:	438a      	bics	r2, r1
 80024d0:	d049      	beq.n	8002566 <I2C_ITError+0x106>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80024d2:	2341      	movs	r3, #65	; 0x41
 80024d4:	5ce2      	ldrb	r2, [r4, r3]
 80024d6:	2a60      	cmp	r2, #96	; 0x60
 80024d8:	d063      	beq.n	80025a2 <I2C_ITError+0x142>
    hi2c->PreviousState = I2C_STATE_NONE;
 80024da:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 80024dc:	2240      	movs	r2, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80024de:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ErrorCallback(hi2c);
 80024e0:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80024e2:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80024e4:	f7fe fcea 	bl	8000ebc <HAL_I2C_ErrorCallback>
}
 80024e8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80024ea:	21fe      	movs	r1, #254	; 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80024ec:	5ca3      	ldrb	r3, [r4, r2]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80024ee:	5ca3      	ldrb	r3, [r4, r2]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	438a      	bics	r2, r1
 80024f6:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	0792      	lsls	r2, r2, #30
 80024fc:	d500      	bpl.n	8002500 <I2C_ITError+0xa0>
    hi2c->Instance->TXDR = 0x00U;
 80024fe:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002500:	2201      	movs	r2, #1
 8002502:	6999      	ldr	r1, [r3, #24]
 8002504:	420a      	tst	r2, r1
 8002506:	d102      	bne.n	800250e <I2C_ITError+0xae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002508:	6999      	ldr	r1, [r3, #24]
 800250a:	430a      	orrs	r2, r1
 800250c:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800250e:	2241      	movs	r2, #65	; 0x41
 8002510:	5ca1      	ldrb	r1, [r4, r2]
 8002512:	2960      	cmp	r1, #96	; 0x60
 8002514:	d00f      	beq.n	8002536 <I2C_ITError+0xd6>
      hi2c->State         = HAL_I2C_STATE_READY;
 8002516:	2120      	movs	r1, #32
 8002518:	54a1      	strb	r1, [r4, r2]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800251a:	699a      	ldr	r2, [r3, #24]
 800251c:	4211      	tst	r1, r2
 800251e:	d00a      	beq.n	8002536 <I2C_ITError+0xd6>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002520:	2210      	movs	r2, #16
 8002522:	6999      	ldr	r1, [r3, #24]
 8002524:	420a      	tst	r2, r1
 8002526:	d004      	beq.n	8002532 <I2C_ITError+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002528:	2104      	movs	r1, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800252a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800252c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800252e:	430a      	orrs	r2, r1
 8002530:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002532:	2220      	movs	r2, #32
 8002534:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 8002536:	2200      	movs	r2, #0
 8002538:	6362      	str	r2, [r4, #52]	; 0x34
 800253a:	e7ba      	b.n	80024b2 <I2C_ITError+0x52>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	0452      	lsls	r2, r2, #17
 8002540:	d42a      	bmi.n	8002598 <I2C_ITError+0x138>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002542:	f7ff fc4d 	bl	8001de0 <HAL_DMA_GetState>
 8002546:	2801      	cmp	r0, #1
 8002548:	d0c3      	beq.n	80024d2 <I2C_ITError+0x72>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800254a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800254c:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <I2C_ITError+0x160>)
      __HAL_UNLOCK(hi2c);
 800254e:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002550:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8002552:	2340      	movs	r3, #64	; 0x40
 8002554:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002556:	f7ff fbd1 	bl	8001cfc <HAL_DMA_Abort_IT>
 800255a:	2800      	cmp	r0, #0
 800255c:	d0c4      	beq.n	80024e8 <I2C_ITError+0x88>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800255e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002560:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002562:	4798      	blx	r3
 8002564:	e7c0      	b.n	80024e8 <I2C_ITError+0x88>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	0412      	lsls	r2, r2, #16
 800256a:	d503      	bpl.n	8002574 <I2C_ITError+0x114>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4915      	ldr	r1, [pc, #84]	; (80025c4 <I2C_ITError+0x164>)
 8002570:	400a      	ands	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002574:	f7ff fc34 	bl	8001de0 <HAL_DMA_GetState>
 8002578:	2801      	cmp	r0, #1
 800257a:	d0aa      	beq.n	80024d2 <I2C_ITError+0x72>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800257c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <I2C_ITError+0x160>)
      __HAL_UNLOCK(hi2c);
 8002580:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002582:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8002584:	2340      	movs	r3, #64	; 0x40
 8002586:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002588:	f7ff fbb8 	bl	8001cfc <HAL_DMA_Abort_IT>
 800258c:	2800      	cmp	r0, #0
 800258e:	d0ab      	beq.n	80024e8 <I2C_ITError+0x88>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002590:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002592:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002594:	4798      	blx	r3
 8002596:	e7a7      	b.n	80024e8 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	490b      	ldr	r1, [pc, #44]	; (80025c8 <I2C_ITError+0x168>)
 800259c:	400a      	ands	r2, r1
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e7cf      	b.n	8002542 <I2C_ITError+0xe2>
    hi2c->State = HAL_I2C_STATE_READY;
 80025a2:	3a40      	subs	r2, #64	; 0x40
 80025a4:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 80025a6:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 80025a8:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80025aa:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 80025ac:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80025ae:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 80025b0:	f7ff ff34 	bl	800241c <HAL_I2C_AbortCpltCallback>
}
 80025b4:	e798      	b.n	80024e8 <I2C_ITError+0x88>
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	ffff0000 	.word	0xffff0000
 80025bc:	0800278d 	.word	0x0800278d
 80025c0:	08002421 	.word	0x08002421
 80025c4:	ffff7fff 	.word	0xffff7fff
 80025c8:	ffffbfff 	.word	0xffffbfff

080025cc <I2C_ITSlaveCplt>:
{
 80025cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80025ce:	6803      	ldr	r3, [r0, #0]
{
 80025d0:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80025d2:	2041      	movs	r0, #65	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025d4:	2620      	movs	r6, #32
{
 80025d6:	46c6      	mov	lr, r8
 80025d8:	000d      	movs	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80025da:	6819      	ldr	r1, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80025dc:	5c22      	ldrb	r2, [r4, r0]
{
 80025de:	b500      	push	{lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e0:	61de      	str	r6, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025e2:	3e18      	subs	r6, #24
 80025e4:	43b2      	bics	r2, r6
 80025e6:	2a21      	cmp	r2, #33	; 0x21
 80025e8:	d057      	beq.n	800269a <I2C_ITSlaveCplt+0xce>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80025ea:	2a22      	cmp	r2, #34	; 0x22
 80025ec:	d100      	bne.n	80025f0 <I2C_ITSlaveCplt+0x24>
 80025ee:	e07d      	b.n	80026ec <I2C_ITSlaveCplt+0x120>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	6858      	ldr	r0, [r3, #4]
 80025f4:	0212      	lsls	r2, r2, #8
 80025f6:	4302      	orrs	r2, r0
 80025f8:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	485f      	ldr	r0, [pc, #380]	; (800277c <I2C_ITSlaveCplt+0x1b0>)
 80025fe:	4002      	ands	r2, r0
 8002600:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002602:	699a      	ldr	r2, [r3, #24]
 8002604:	0792      	lsls	r2, r2, #30
 8002606:	d501      	bpl.n	800260c <I2C_ITSlaveCplt+0x40>
    hi2c->Instance->TXDR = 0x00U;
 8002608:	2200      	movs	r2, #0
 800260a:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800260c:	2201      	movs	r2, #1
 800260e:	6998      	ldr	r0, [r3, #24]
 8002610:	4202      	tst	r2, r0
 8002612:	d102      	bne.n	800261a <I2C_ITSlaveCplt+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002614:	6998      	ldr	r0, [r3, #24]
 8002616:	4302      	orrs	r2, r0
 8002618:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800261a:	2201      	movs	r2, #1
 800261c:	0448      	lsls	r0, r1, #17
 800261e:	d543      	bpl.n	80026a8 <I2C_ITSlaveCplt+0xdc>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4957      	ldr	r1, [pc, #348]	; (8002780 <I2C_ITSlaveCplt+0x1b4>)
 8002624:	400a      	ands	r2, r1
 8002626:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8002628:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800262a:	2a00      	cmp	r2, #0
 800262c:	d003      	beq.n	8002636 <I2C_ITSlaveCplt+0x6a>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	6852      	ldr	r2, [r2, #4]
 8002632:	b292      	uxth	r2, r2
 8002634:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002636:	076a      	lsls	r2, r5, #29
 8002638:	d50a      	bpl.n	8002650 <I2C_ITSlaveCplt+0x84>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800263a:	2204      	movs	r2, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800263e:	4395      	bics	r5, r2
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002640:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002642:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8002644:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002646:	3301      	adds	r3, #1
 8002648:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800264a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800264c:	2b00      	cmp	r3, #0
 800264e:	d146      	bne.n	80026de <I2C_ITSlaveCplt+0x112>
  if (hi2c->XferCount != 0U)
 8002650:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <I2C_ITSlaveCplt+0x92>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002656:	2204      	movs	r2, #4
 8002658:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800265a:	4313      	orrs	r3, r2
 800265c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800265e:	2600      	movs	r6, #0
 8002660:	2742      	movs	r7, #66	; 0x42
 8002662:	55e6      	strb	r6, [r4, r7]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002664:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8002666:	6366      	str	r6, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002668:	4698      	mov	r8, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d145      	bne.n	80026fa <I2C_ITSlaveCplt+0x12e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800266e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002670:	4d44      	ldr	r5, [pc, #272]	; (8002784 <I2C_ITSlaveCplt+0x1b8>)
 8002672:	42ab      	cmp	r3, r5
 8002674:	d123      	bne.n	80026be <I2C_ITSlaveCplt+0xf2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002676:	2341      	movs	r3, #65	; 0x41
 8002678:	5ce2      	ldrb	r2, [r4, r3]
 800267a:	2a22      	cmp	r2, #34	; 0x22
 800267c:	d100      	bne.n	8002680 <I2C_ITSlaveCplt+0xb4>
 800267e:	e072      	b.n	8002766 <I2C_ITSlaveCplt+0x19a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002680:	2220      	movs	r2, #32
 8002682:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002684:	4643      	mov	r3, r8
    __HAL_UNLOCK(hi2c);
 8002686:	4642      	mov	r2, r8
    hi2c->PreviousState = I2C_STATE_NONE;
 8002688:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800268a:	2340      	movs	r3, #64	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800268c:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 800268e:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002690:	f7fe f996 	bl	80009c0 <HAL_I2C_SlaveTxCpltCallback>
}
 8002694:	bc80      	pop	{r7}
 8002696:	46b8      	mov	r8, r7
 8002698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800269a:	5c20      	ldrb	r0, [r4, r0]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	36f2      	adds	r6, #242	; 0xf2
 80026a0:	43b0      	bics	r0, r6
 80026a2:	6018      	str	r0, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80026a4:	6322      	str	r2, [r4, #48]	; 0x30
 80026a6:	e7a3      	b.n	80025f0 <I2C_ITSlaveCplt+0x24>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80026a8:	0bc9      	lsrs	r1, r1, #15
 80026aa:	420a      	tst	r2, r1
 80026ac:	d0c3      	beq.n	8002636 <I2C_ITSlaveCplt+0x6a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4935      	ldr	r1, [pc, #212]	; (8002788 <I2C_ITSlaveCplt+0x1bc>)
 80026b2:	400a      	ands	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80026b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80026b8:	2a00      	cmp	r2, #0
 80026ba:	d1b8      	bne.n	800262e <I2C_ITSlaveCplt+0x62>
 80026bc:	e7bb      	b.n	8002636 <I2C_ITSlaveCplt+0x6a>
    I2C_ITSlaveSeqCplt(hi2c);
 80026be:	0020      	movs	r0, r4
 80026c0:	f7ff fe14 	bl	80022ec <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 80026c4:	2341      	movs	r3, #65	; 0x41
 80026c6:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026c8:	62e5      	str	r5, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80026ca:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 80026cc:	4643      	mov	r3, r8
    __HAL_UNLOCK(hi2c);
 80026ce:	4642      	mov	r2, r8
    hi2c->PreviousState = I2C_STATE_NONE;
 80026d0:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80026d2:	2340      	movs	r3, #64	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80026d4:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80026d6:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_ListenCpltCallback(hi2c);
 80026d8:	f7ff fe9e 	bl	8002418 <HAL_I2C_ListenCpltCallback>
 80026dc:	e7da      	b.n	8002694 <I2C_ITSlaveCplt+0xc8>
      hi2c->XferSize--;
 80026de:	3b01      	subs	r3, #1
 80026e0:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80026e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80026ea:	e7b1      	b.n	8002650 <I2C_ITSlaveCplt+0x84>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80026ec:	26fc      	movs	r6, #252	; 0xfc
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80026ee:	5c20      	ldrb	r0, [r4, r0]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	43b0      	bics	r0, r6
 80026f4:	6018      	str	r0, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80026f6:	6322      	str	r2, [r4, #48]	; 0x30
 80026f8:	e77a      	b.n	80025f0 <I2C_ITSlaveCplt+0x24>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80026fa:	0020      	movs	r0, r4
 80026fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80026fe:	f7ff feaf 	bl	8002460 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002702:	2341      	movs	r3, #65	; 0x41
 8002704:	5ce2      	ldrb	r2, [r4, r3]
 8002706:	2a28      	cmp	r2, #40	; 0x28
 8002708:	d1c4      	bne.n	8002694 <I2C_ITSlaveCplt+0xc8>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800270a:	4a1e      	ldr	r2, [pc, #120]	; (8002784 <I2C_ITSlaveCplt+0x1b8>)
 800270c:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 800270e:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 8002710:	6326      	str	r6, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002712:	54e2      	strb	r2, [r4, r3]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002714:	55e6      	strb	r6, [r4, r7]
  hi2c->XferISR = NULL;
 8002716:	6366      	str	r6, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002718:	076b      	lsls	r3, r5, #29
 800271a:	d513      	bpl.n	8002744 <I2C_ITSlaveCplt+0x178>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8002724:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002726:	3301      	adds	r3, #1
 8002728:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800272a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800272c:	2b00      	cmp	r3, #0
 800272e:	d009      	beq.n	8002744 <I2C_ITSlaveCplt+0x178>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002730:	2204      	movs	r2, #4
      hi2c->XferSize--;
 8002732:	3b01      	subs	r3, #1
 8002734:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002736:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002738:	3b01      	subs	r3, #1
 800273a:	b29b      	uxth	r3, r3
 800273c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800273e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002740:	4313      	orrs	r3, r2
 8002742:	6463      	str	r3, [r4, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002744:	2341      	movs	r3, #65	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002746:	21fe      	movs	r1, #254	; 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002748:	5ce2      	ldrb	r2, [r4, r3]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800274a:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800274c:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800274e:	0020      	movs	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	438a      	bics	r2, r1
 8002754:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002756:	2210      	movs	r2, #16
 8002758:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800275a:	2340      	movs	r3, #64	; 0x40
 800275c:	2200      	movs	r2, #0
 800275e:	54e2      	strb	r2, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 8002760:	f7ff fe5a 	bl	8002418 <HAL_I2C_ListenCpltCallback>
}
 8002764:	e796      	b.n	8002694 <I2C_ITSlaveCplt+0xc8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002766:	3a02      	subs	r2, #2
 8002768:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 800276a:	4643      	mov	r3, r8
    __HAL_UNLOCK(hi2c);
 800276c:	4642      	mov	r2, r8
    hi2c->PreviousState = I2C_STATE_NONE;
 800276e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002770:	2340      	movs	r3, #64	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002772:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8002774:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002776:	f7ff fdb7 	bl	80022e8 <HAL_I2C_SlaveRxCpltCallback>
 800277a:	e78b      	b.n	8002694 <I2C_ITSlaveCplt+0xc8>
 800277c:	fe00e800 	.word	0xfe00e800
 8002780:	ffffbfff 	.word	0xffffbfff
 8002784:	ffff0000 	.word	0xffff0000
 8002788:	ffff7fff 	.word	0xffff7fff

0800278c <I2C_Slave_ISR_IT>:
{
 800278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278e:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 8002790:	2240      	movs	r2, #64	; 0x40
 8002792:	5c83      	ldrb	r3, [r0, r2]
{
 8002794:	0004      	movs	r4, r0
 8002796:	000d      	movs	r5, r1
  uint32_t tmpoptions = hi2c->XferOptions;
 8002798:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800279a:	2b01      	cmp	r3, #1
 800279c:	d100      	bne.n	80027a0 <I2C_Slave_ISR_IT+0x14>
 800279e:	e081      	b.n	80028a4 <I2C_Slave_ISR_IT+0x118>
 80027a0:	2301      	movs	r3, #1
 80027a2:	5483      	strb	r3, [r0, r2]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027a4:	094a      	lsrs	r2, r1, #5
 80027a6:	4213      	tst	r3, r2
 80027a8:	d003      	beq.n	80027b2 <I2C_Slave_ISR_IT+0x26>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80027aa:	0972      	lsrs	r2, r6, #5
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027ac:	4213      	tst	r3, r2
 80027ae:	d000      	beq.n	80027b2 <I2C_Slave_ISR_IT+0x26>
 80027b0:	e063      	b.n	800287a <I2C_Slave_ISR_IT+0xee>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027b2:	2301      	movs	r3, #1
 80027b4:	06ea      	lsls	r2, r5, #27
 80027b6:	d518      	bpl.n	80027ea <I2C_Slave_ISR_IT+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027b8:	0932      	lsrs	r2, r6, #4
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027ba:	4213      	tst	r3, r2
 80027bc:	d015      	beq.n	80027ea <I2C_Slave_ISR_IT+0x5e>
    if (hi2c->XferCount == 0U)
 80027be:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80027c0:	b291      	uxth	r1, r2
 80027c2:	2a00      	cmp	r2, #0
 80027c4:	d15f      	bne.n	8002886 <I2C_Slave_ISR_IT+0xfa>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80027c6:	3241      	adds	r2, #65	; 0x41
 80027c8:	5ca0      	ldrb	r0, [r4, r2]
 80027ca:	2828      	cmp	r0, #40	; 0x28
 80027cc:	d100      	bne.n	80027d0 <I2C_Slave_ISR_IT+0x44>
 80027ce:	e073      	b.n	80028b8 <I2C_Slave_ISR_IT+0x12c>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80027d0:	2341      	movs	r3, #65	; 0x41
 80027d2:	5ce3      	ldrb	r3, [r4, r3]
 80027d4:	2b29      	cmp	r3, #41	; 0x29
 80027d6:	d100      	bne.n	80027da <I2C_Slave_ISR_IT+0x4e>
 80027d8:	e0a3      	b.n	8002922 <I2C_Slave_ISR_IT+0x196>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027da:	2210      	movs	r2, #16
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80027e0:	2340      	movs	r3, #64	; 0x40
 80027e2:	2200      	movs	r2, #0
  return HAL_OK;
 80027e4:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 80027e6:	54e2      	strb	r2, [r4, r3]
}
 80027e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027ea:	2301      	movs	r3, #1
 80027ec:	076a      	lsls	r2, r5, #29
 80027ee:	d40f      	bmi.n	8002810 <I2C_Slave_ISR_IT+0x84>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80027f0:	2301      	movs	r3, #1
 80027f2:	072a      	lsls	r2, r5, #28
 80027f4:	d52a      	bpl.n	800284c <I2C_Slave_ISR_IT+0xc0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80027f6:	08f2      	lsrs	r2, r6, #3
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80027f8:	4213      	tst	r3, r2
 80027fa:	d027      	beq.n	800284c <I2C_Slave_ISR_IT+0xc0>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80027fc:	3340      	adds	r3, #64	; 0x40
 80027fe:	5ce2      	ldrb	r2, [r4, r3]
 8002800:	3b19      	subs	r3, #25
 8002802:	4013      	ands	r3, r2
 8002804:	2b28      	cmp	r3, #40	; 0x28
 8002806:	d053      	beq.n	80028b0 <I2C_Slave_ISR_IT+0x124>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002808:	2208      	movs	r2, #8
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	61da      	str	r2, [r3, #28]
 800280e:	e7e7      	b.n	80027e0 <I2C_Slave_ISR_IT+0x54>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002810:	08b2      	lsrs	r2, r6, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002812:	4213      	tst	r3, r2
 8002814:	d0ec      	beq.n	80027f0 <I2C_Slave_ISR_IT+0x64>
    if (hi2c->XferCount > 0U)
 8002816:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00d      	beq.n	8002838 <I2C_Slave_ISR_IT+0xac>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002824:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002826:	3301      	adds	r3, #1
 8002828:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800282a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002830:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002832:	3b01      	subs	r3, #1
 8002834:	b29b      	uxth	r3, r3
 8002836:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8002838:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1d0      	bne.n	80027e0 <I2C_Slave_ISR_IT+0x54>
 800283e:	4b43      	ldr	r3, [pc, #268]	; (800294c <I2C_Slave_ISR_IT+0x1c0>)
 8002840:	429f      	cmp	r7, r3
 8002842:	d0cd      	beq.n	80027e0 <I2C_Slave_ISR_IT+0x54>
        I2C_ITSlaveSeqCplt(hi2c);
 8002844:	0020      	movs	r0, r4
 8002846:	f7ff fd51 	bl	80022ec <I2C_ITSlaveSeqCplt>
 800284a:	e7c9      	b.n	80027e0 <I2C_Slave_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800284c:	2301      	movs	r3, #1
 800284e:	07aa      	lsls	r2, r5, #30
 8002850:	d5c6      	bpl.n	80027e0 <I2C_Slave_ISR_IT+0x54>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002852:	0876      	lsrs	r6, r6, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002854:	4233      	tst	r3, r6
 8002856:	d0c3      	beq.n	80027e0 <I2C_Slave_ISR_IT+0x54>
    if (hi2c->XferCount > 0U)
 8002858:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800285a:	2b00      	cmp	r3, #0
 800285c:	d024      	beq.n	80028a8 <I2C_Slave_ISR_IT+0x11c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800285e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002860:	6822      	ldr	r2, [r4, #0]
 8002862:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002864:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002866:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002868:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800286a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800286c:	3b01      	subs	r3, #1
 800286e:	b29b      	uxth	r3, r3
 8002870:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002872:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002874:	3b01      	subs	r3, #1
 8002876:	8523      	strh	r3, [r4, #40]	; 0x28
 8002878:	e7b2      	b.n	80027e0 <I2C_Slave_ISR_IT+0x54>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800287a:	f7ff fea7 	bl	80025cc <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800287e:	2301      	movs	r3, #1
 8002880:	06ea      	lsls	r2, r5, #27
 8002882:	d5b2      	bpl.n	80027ea <I2C_Slave_ISR_IT+0x5e>
 8002884:	e798      	b.n	80027b8 <I2C_Slave_ISR_IT+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002886:	2210      	movs	r2, #16
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800288c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800288e:	3a0c      	subs	r2, #12
 8002890:	4313      	orrs	r3, r2
 8002892:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002894:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <I2C_Slave_ISR_IT+0x1c4>)
 8002896:	421f      	tst	r7, r3
 8002898:	d1a2      	bne.n	80027e0 <I2C_Slave_ISR_IT+0x54>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800289a:	0020      	movs	r0, r4
 800289c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800289e:	f7ff fddf 	bl	8002460 <I2C_ITError>
 80028a2:	e79d      	b.n	80027e0 <I2C_Slave_ISR_IT+0x54>
  __HAL_LOCK(hi2c);
 80028a4:	2002      	movs	r0, #2
 80028a6:	e79f      	b.n	80027e8 <I2C_Slave_ISR_IT+0x5c>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80028a8:	4b29      	ldr	r3, [pc, #164]	; (8002950 <I2C_Slave_ISR_IT+0x1c4>)
 80028aa:	421f      	tst	r7, r3
 80028ac:	d0ca      	beq.n	8002844 <I2C_Slave_ISR_IT+0xb8>
 80028ae:	e797      	b.n	80027e0 <I2C_Slave_ISR_IT+0x54>
 80028b0:	0020      	movs	r0, r4
 80028b2:	f7ff fd6b 	bl	800238c <I2C_ITAddrCplt.part.0>
 80028b6:	e793      	b.n	80027e0 <I2C_Slave_ISR_IT+0x54>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80028b8:	2080      	movs	r0, #128	; 0x80
 80028ba:	0480      	lsls	r0, r0, #18
 80028bc:	4287      	cmp	r7, r0
 80028be:	d000      	beq.n	80028c2 <I2C_Slave_ISR_IT+0x136>
 80028c0:	e786      	b.n	80027d0 <I2C_Slave_ISR_IT+0x44>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028c2:	4822      	ldr	r0, [pc, #136]	; (800294c <I2C_Slave_ISR_IT+0x1c0>)
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80028c4:	08ad      	lsrs	r5, r5, #2
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028c6:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 80028c8:	2020      	movs	r0, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ca:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80028cc:	54a0      	strb	r0, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ce:	3201      	adds	r2, #1
 80028d0:	54a1      	strb	r1, [r4, r2]
  hi2c->XferISR = NULL;
 80028d2:	6361      	str	r1, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80028d4:	422b      	tst	r3, r5
 80028d6:	d013      	beq.n	8002900 <I2C_Slave_ISR_IT+0x174>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 80028e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028e2:	3301      	adds	r3, #1
 80028e4:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80028e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d009      	beq.n	8002900 <I2C_Slave_ISR_IT+0x174>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028ec:	2204      	movs	r2, #4
      hi2c->XferSize--;
 80028ee:	3b01      	subs	r3, #1
 80028f0:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80028f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028fc:	4313      	orrs	r3, r2
 80028fe:	6463      	str	r3, [r4, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002900:	2341      	movs	r3, #65	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002902:	21fe      	movs	r1, #254	; 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002904:	5ce2      	ldrb	r2, [r4, r3]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002906:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002908:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800290a:	0020      	movs	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	438a      	bics	r2, r1
 8002910:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002912:	2210      	movs	r2, #16
 8002914:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002916:	2340      	movs	r3, #64	; 0x40
 8002918:	2200      	movs	r2, #0
 800291a:	54e2      	strb	r2, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 800291c:	f7ff fd7c 	bl	8002418 <HAL_I2C_ListenCpltCallback>
}
 8002920:	e75e      	b.n	80027e0 <I2C_Slave_ISR_IT+0x54>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <I2C_Slave_ISR_IT+0x1c0>)
 8002924:	429f      	cmp	r7, r3
 8002926:	d100      	bne.n	800292a <I2C_Slave_ISR_IT+0x19e>
 8002928:	e757      	b.n	80027da <I2C_Slave_ISR_IT+0x4e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800292a:	2210      	movs	r2, #16
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	0792      	lsls	r2, r2, #30
 8002934:	d501      	bpl.n	800293a <I2C_Slave_ISR_IT+0x1ae>
    hi2c->Instance->TXDR = 0x00U;
 8002936:	2200      	movs	r2, #0
 8002938:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800293a:	2201      	movs	r2, #1
 800293c:	6999      	ldr	r1, [r3, #24]
 800293e:	420a      	tst	r2, r1
 8002940:	d000      	beq.n	8002944 <I2C_Slave_ISR_IT+0x1b8>
 8002942:	e77f      	b.n	8002844 <I2C_Slave_ISR_IT+0xb8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002944:	6999      	ldr	r1, [r3, #24]
 8002946:	430a      	orrs	r2, r1
 8002948:	619a      	str	r2, [r3, #24]
 800294a:	e77b      	b.n	8002844 <I2C_Slave_ISR_IT+0xb8>
 800294c:	ffff0000 	.word	0xffff0000
 8002950:	feffffff 	.word	0xfeffffff

08002954 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002954:	6802      	ldr	r2, [r0, #0]
{
 8002956:	b570      	push	{r4, r5, r6, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002958:	6993      	ldr	r3, [r2, #24]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800295a:	2101      	movs	r1, #1
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800295c:	6814      	ldr	r4, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800295e:	05dd      	lsls	r5, r3, #23
 8002960:	d530      	bpl.n	80029c4 <HAL_I2C_ER_IRQHandler+0x70>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002962:	09e5      	lsrs	r5, r4, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002964:	4229      	tst	r1, r5
 8002966:	d01d      	beq.n	80029a4 <HAL_I2C_ER_IRQHandler+0x50>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002968:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800296a:	430c      	orrs	r4, r1
 800296c:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800296e:	2480      	movs	r4, #128	; 0x80
 8002970:	0064      	lsls	r4, r4, #1
 8002972:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002974:	0a9c      	lsrs	r4, r3, #10
 8002976:	4221      	tst	r1, r4
 8002978:	d02b      	beq.n	80029d2 <HAL_I2C_ER_IRQHandler+0x7e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800297a:	2408      	movs	r4, #8
 800297c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800297e:	4321      	orrs	r1, r4
 8002980:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002982:	2180      	movs	r1, #128	; 0x80
 8002984:	00c9      	lsls	r1, r1, #3
 8002986:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002988:	059b      	lsls	r3, r3, #22
 800298a:	d506      	bpl.n	800299a <HAL_I2C_ER_IRQHandler+0x46>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800298c:	2102      	movs	r1, #2
 800298e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002990:	430b      	orrs	r3, r1
 8002992:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	61d3      	str	r3, [r2, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800299a:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 800299c:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800299e:	420b      	tst	r3, r1
 80029a0:	d10d      	bne.n	80029be <HAL_I2C_ER_IRQHandler+0x6a>
}
 80029a2:	bd70      	pop	{r4, r5, r6, pc}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80029a4:	0a9d      	lsrs	r5, r3, #10
 80029a6:	4229      	tst	r1, r5
 80029a8:	d1f7      	bne.n	800299a <HAL_I2C_ER_IRQHandler+0x46>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80029aa:	2101      	movs	r1, #1
 80029ac:	059b      	lsls	r3, r3, #22
 80029ae:	d5f4      	bpl.n	800299a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029b0:	09e4      	lsrs	r4, r4, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80029b2:	4221      	tst	r1, r4
 80029b4:	d1ea      	bne.n	800298c <HAL_I2C_ER_IRQHandler+0x38>
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80029b6:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 80029b8:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80029ba:	420b      	tst	r3, r1
 80029bc:	d0f1      	beq.n	80029a2 <HAL_I2C_ER_IRQHandler+0x4e>
    I2C_ITError(hi2c, tmperror);
 80029be:	f7ff fd4f 	bl	8002460 <I2C_ITError>
}
 80029c2:	e7ee      	b.n	80029a2 <HAL_I2C_ER_IRQHandler+0x4e>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80029c4:	0a9d      	lsrs	r5, r3, #10
 80029c6:	4229      	tst	r1, r5
 80029c8:	d0ef      	beq.n	80029aa <HAL_I2C_ER_IRQHandler+0x56>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029ca:	09e4      	lsrs	r4, r4, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80029cc:	4221      	tst	r1, r4
 80029ce:	d1d4      	bne.n	800297a <HAL_I2C_ER_IRQHandler+0x26>
 80029d0:	e7e3      	b.n	800299a <HAL_I2C_ER_IRQHandler+0x46>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80029d2:	0a5b      	lsrs	r3, r3, #9
 80029d4:	4219      	tst	r1, r3
 80029d6:	d1d9      	bne.n	800298c <HAL_I2C_ER_IRQHandler+0x38>
 80029d8:	e7df      	b.n	800299a <HAL_I2C_ER_IRQHandler+0x46>
 80029da:	46c0      	nop			; (mov r8, r8)

080029dc <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80029dc:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 80029de:	4770      	bx	lr

080029e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e2:	2541      	movs	r5, #65	; 0x41
 80029e4:	5d43      	ldrb	r3, [r0, r5]
{
 80029e6:	000a      	movs	r2, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e8:	b2de      	uxtb	r6, r3
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	d11b      	bne.n	8002a26 <HAL_I2CEx_ConfigAnalogFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ee:	2740      	movs	r7, #64	; 0x40
 80029f0:	5dc3      	ldrb	r3, [r0, r7]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d017      	beq.n	8002a26 <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029f6:	2101      	movs	r1, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80029f8:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80029fa:	468c      	mov	ip, r1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80029fc:	5543      	strb	r3, [r0, r5]
    __HAL_I2C_DISABLE(hi2c);
 80029fe:	6803      	ldr	r3, [r0, #0]
 8002a00:	681c      	ldr	r4, [r3, #0]
 8002a02:	438c      	bics	r4, r1
 8002a04:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a06:	681c      	ldr	r4, [r3, #0]
 8002a08:	4908      	ldr	r1, [pc, #32]	; (8002a2c <HAL_I2CEx_ConfigAnalogFilter+0x4c>)
 8002a0a:	400c      	ands	r4, r1
 8002a0c:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	4311      	orrs	r1, r2
 8002a12:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a14:	4661      	mov	r1, ip
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8002a20:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 8002a22:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002a26:	2002      	movs	r0, #2
 8002a28:	e7fc      	b.n	8002a24 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	ffffefff 	.word	0xffffefff

08002a30 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a30:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a32:	2541      	movs	r5, #65	; 0x41
 8002a34:	5d43      	ldrb	r3, [r0, r5]
 8002a36:	b2de      	uxtb	r6, r3
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d11a      	bne.n	8002a72 <HAL_I2CEx_ConfigDigitalFilter+0x42>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3c:	2740      	movs	r7, #64	; 0x40
 8002a3e:	5dc3      	ldrb	r3, [r0, r7]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d016      	beq.n	8002a72 <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a44:	2324      	movs	r3, #36	; 0x24
 8002a46:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a48:	3b23      	subs	r3, #35	; 0x23
 8002a4a:	469c      	mov	ip, r3
 8002a4c:	6804      	ldr	r4, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a4e:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8002a50:	6822      	ldr	r2, [r4, #0]
 8002a52:	439a      	bics	r2, r3
 8002a54:	6022      	str	r2, [r4, #0]
    tmpreg = hi2c->Instance->CR1;
 8002a56:	6822      	ldr	r2, [r4, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <HAL_I2CEx_ConfigDigitalFilter+0x48>)
 8002a5a:	401a      	ands	r2, r3
    tmpreg |= DigitalFilter << 8U;
 8002a5c:	4311      	orrs	r1, r2

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;

    __HAL_I2C_ENABLE(hi2c);
 8002a5e:	4662      	mov	r2, ip
    hi2c->Instance->CR1 = tmpreg;
 8002a60:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	6023      	str	r3, [r4, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a68:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8002a6c:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 8002a6e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002a72:	2002      	movs	r0, #2
 8002a74:	e7fc      	b.n	8002a70 <HAL_I2CEx_ConfigDigitalFilter+0x40>
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	fffff0ff 	.word	0xfffff0ff

08002a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a7e:	46ce      	mov	lr, r9
 8002a80:	4647      	mov	r7, r8
 8002a82:	b580      	push	{r7, lr}
 8002a84:	0004      	movs	r4, r0
 8002a86:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	d100      	bne.n	8002a8e <HAL_RCC_OscConfig+0x12>
 8002a8c:	e0ee      	b.n	8002c6c <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8e:	6803      	ldr	r3, [r0, #0]
 8002a90:	07da      	lsls	r2, r3, #31
 8002a92:	d535      	bpl.n	8002b00 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a94:	210c      	movs	r1, #12
 8002a96:	48c3      	ldr	r0, [pc, #780]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
 8002a98:	6842      	ldr	r2, [r0, #4]
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	2a04      	cmp	r2, #4
 8002a9e:	d100      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x26>
 8002aa0:	e101      	b.n	8002ca6 <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aa2:	6842      	ldr	r2, [r0, #4]
 8002aa4:	4011      	ands	r1, r2
 8002aa6:	2908      	cmp	r1, #8
 8002aa8:	d100      	bne.n	8002aac <HAL_RCC_OscConfig+0x30>
 8002aaa:	e0f8      	b.n	8002c9e <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aac:	6863      	ldr	r3, [r4, #4]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d00f      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x56>
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d100      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x3c>
 8002ab6:	e11e      	b.n	8002cf6 <HAL_RCC_OscConfig+0x27a>
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d100      	bne.n	8002abe <HAL_RCC_OscConfig+0x42>
 8002abc:	e1a7      	b.n	8002e0e <HAL_RCC_OscConfig+0x392>
 8002abe:	4bb9      	ldr	r3, [pc, #740]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
 8002ac0:	49b9      	ldr	r1, [pc, #740]	; (8002da8 <HAL_RCC_OscConfig+0x32c>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	400a      	ands	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	49b8      	ldr	r1, [pc, #736]	; (8002dac <HAL_RCC_OscConfig+0x330>)
 8002acc:	400a      	ands	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e005      	b.n	8002ade <HAL_RCC_OscConfig+0x62>
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	4ab3      	ldr	r2, [pc, #716]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
 8002ad6:	025b      	lsls	r3, r3, #9
 8002ad8:	6811      	ldr	r1, [r2, #0]
 8002ada:	430b      	orrs	r3, r1
 8002adc:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7fe fce5 	bl	80014ac <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002ae4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	4faf      	ldr	r7, [pc, #700]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
 8002ae8:	02b6      	lsls	r6, r6, #10
 8002aea:	e005      	b.n	8002af8 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe fcde 	bl	80014ac <HAL_GetTick>
 8002af0:	1b40      	subs	r0, r0, r5
 8002af2:	2864      	cmp	r0, #100	; 0x64
 8002af4:	d900      	bls.n	8002af8 <HAL_RCC_OscConfig+0x7c>
 8002af6:	e0fc      	b.n	8002cf2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4233      	tst	r3, r6
 8002afc:	d0f6      	beq.n	8002aec <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	079a      	lsls	r2, r3, #30
 8002b02:	d529      	bpl.n	8002b58 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b04:	220c      	movs	r2, #12
 8002b06:	49a7      	ldr	r1, [pc, #668]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
 8002b08:	6848      	ldr	r0, [r1, #4]
 8002b0a:	4202      	tst	r2, r0
 8002b0c:	d100      	bne.n	8002b10 <HAL_RCC_OscConfig+0x94>
 8002b0e:	e0a6      	b.n	8002c5e <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b10:	6848      	ldr	r0, [r1, #4]
 8002b12:	4002      	ands	r2, r0
 8002b14:	2a08      	cmp	r2, #8
 8002b16:	d100      	bne.n	8002b1a <HAL_RCC_OscConfig+0x9e>
 8002b18:	e09d      	b.n	8002c56 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b1a:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b1c:	4da1      	ldr	r5, [pc, #644]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d100      	bne.n	8002b24 <HAL_RCC_OscConfig+0xa8>
 8002b22:	e11f      	b.n	8002d64 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8002b24:	2201      	movs	r2, #1
 8002b26:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b28:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b2e:	f7fe fcbd 	bl	80014ac <HAL_GetTick>
 8002b32:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	e005      	b.n	8002b42 <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b36:	f7fe fcb9 	bl	80014ac <HAL_GetTick>
 8002b3a:	1b80      	subs	r0, r0, r6
 8002b3c:	2802      	cmp	r0, #2
 8002b3e:	d900      	bls.n	8002b42 <HAL_RCC_OscConfig+0xc6>
 8002b40:	e0d7      	b.n	8002cf2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b42:	682b      	ldr	r3, [r5, #0]
 8002b44:	421f      	tst	r7, r3
 8002b46:	d0f6      	beq.n	8002b36 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b48:	21f8      	movs	r1, #248	; 0xf8
 8002b4a:	682a      	ldr	r2, [r5, #0]
 8002b4c:	6923      	ldr	r3, [r4, #16]
 8002b4e:	438a      	bics	r2, r1
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4313      	orrs	r3, r2
 8002b54:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	071a      	lsls	r2, r3, #28
 8002b5a:	d42d      	bmi.n	8002bb8 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b5c:	075a      	lsls	r2, r3, #29
 8002b5e:	d544      	bpl.n	8002bea <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b60:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002b62:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b64:	4b8f      	ldr	r3, [pc, #572]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
 8002b66:	0552      	lsls	r2, r2, #21
 8002b68:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002b6a:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6c:	4211      	tst	r1, r2
 8002b6e:	d108      	bne.n	8002b82 <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b70:	69d9      	ldr	r1, [r3, #28]
 8002b72:	4311      	orrs	r1, r2
 8002b74:	61d9      	str	r1, [r3, #28]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	401a      	ands	r2, r3
 8002b7a:	9201      	str	r2, [sp, #4]
 8002b7c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b82:	2780      	movs	r7, #128	; 0x80
 8002b84:	4e8a      	ldr	r6, [pc, #552]	; (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002b86:	007f      	lsls	r7, r7, #1
 8002b88:	6833      	ldr	r3, [r6, #0]
 8002b8a:	423b      	tst	r3, r7
 8002b8c:	d100      	bne.n	8002b90 <HAL_RCC_OscConfig+0x114>
 8002b8e:	e094      	b.n	8002cba <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b90:	68a3      	ldr	r3, [r4, #8]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d100      	bne.n	8002b98 <HAL_RCC_OscConfig+0x11c>
 8002b96:	e0f8      	b.n	8002d8a <HAL_RCC_OscConfig+0x30e>
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d100      	bne.n	8002b9e <HAL_RCC_OscConfig+0x122>
 8002b9c:	e0c4      	b.n	8002d28 <HAL_RCC_OscConfig+0x2ac>
 8002b9e:	2b05      	cmp	r3, #5
 8002ba0:	d100      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x128>
 8002ba2:	e140      	b.n	8002e26 <HAL_RCC_OscConfig+0x3aa>
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	4b7f      	ldr	r3, [pc, #508]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
 8002ba8:	6a1a      	ldr	r2, [r3, #32]
 8002baa:	438a      	bics	r2, r1
 8002bac:	621a      	str	r2, [r3, #32]
 8002bae:	6a1a      	ldr	r2, [r3, #32]
 8002bb0:	3103      	adds	r1, #3
 8002bb2:	438a      	bics	r2, r1
 8002bb4:	621a      	str	r2, [r3, #32]
 8002bb6:	e0ec      	b.n	8002d92 <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bb8:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8002bba:	4d7a      	ldr	r5, [pc, #488]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d05b      	beq.n	8002c78 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc4:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002bca:	f7fe fc6f 	bl	80014ac <HAL_GetTick>
 8002bce:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd0:	e005      	b.n	8002bde <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd2:	f7fe fc6b 	bl	80014ac <HAL_GetTick>
 8002bd6:	1b80      	subs	r0, r0, r6
 8002bd8:	2802      	cmp	r0, #2
 8002bda:	d900      	bls.n	8002bde <HAL_RCC_OscConfig+0x162>
 8002bdc:	e089      	b.n	8002cf2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002be0:	421f      	tst	r7, r3
 8002be2:	d0f6      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	075a      	lsls	r2, r3, #29
 8002be8:	d4ba      	bmi.n	8002b60 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002bea:	06db      	lsls	r3, r3, #27
 8002bec:	d512      	bpl.n	8002c14 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002bee:	6963      	ldr	r3, [r4, #20]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d100      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x17a>
 8002bf4:	e13d      	b.n	8002e72 <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002bf6:	3305      	adds	r3, #5
 8002bf8:	d000      	beq.n	8002bfc <HAL_RCC_OscConfig+0x180>
 8002bfa:	e0e9      	b.n	8002dd0 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002bfc:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002bfe:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8002c00:	4a68      	ldr	r2, [pc, #416]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
 8002c02:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002c04:	438b      	bics	r3, r1
 8002c06:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c08:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002c0a:	69a3      	ldr	r3, [r4, #24]
 8002c0c:	4381      	bics	r1, r0
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	430b      	orrs	r3, r1
 8002c12:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c14:	6a23      	ldr	r3, [r4, #32]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01b      	beq.n	8002c52 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c1a:	220c      	movs	r2, #12
 8002c1c:	4d61      	ldr	r5, [pc, #388]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
 8002c1e:	6869      	ldr	r1, [r5, #4]
 8002c20:	400a      	ands	r2, r1
 8002c22:	2a08      	cmp	r2, #8
 8002c24:	d100      	bne.n	8002c28 <HAL_RCC_OscConfig+0x1ac>
 8002c26:	e108      	b.n	8002e3a <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d100      	bne.n	8002c2e <HAL_RCC_OscConfig+0x1b2>
 8002c2c:	e13f      	b.n	8002eae <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	682b      	ldr	r3, [r5, #0]
 8002c30:	4a60      	ldr	r2, [pc, #384]	; (8002db4 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c32:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002c34:	4013      	ands	r3, r2
 8002c36:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c38:	f7fe fc38 	bl	80014ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c3c:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8002c3e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c40:	e004      	b.n	8002c4c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c42:	f7fe fc33 	bl	80014ac <HAL_GetTick>
 8002c46:	1b00      	subs	r0, r0, r4
 8002c48:	2802      	cmp	r0, #2
 8002c4a:	d852      	bhi.n	8002cf2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c4c:	682b      	ldr	r3, [r5, #0]
 8002c4e:	4233      	tst	r3, r6
 8002c50:	d1f7      	bne.n	8002c42 <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 8002c52:	2000      	movs	r0, #0
 8002c54:	e00b      	b.n	8002c6e <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c56:	684a      	ldr	r2, [r1, #4]
 8002c58:	03d2      	lsls	r2, r2, #15
 8002c5a:	d500      	bpl.n	8002c5e <HAL_RCC_OscConfig+0x1e2>
 8002c5c:	e75d      	b.n	8002b1a <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5e:	4a51      	ldr	r2, [pc, #324]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	0792      	lsls	r2, r2, #30
 8002c64:	d539      	bpl.n	8002cda <HAL_RCC_OscConfig+0x25e>
 8002c66:	68e2      	ldr	r2, [r4, #12]
 8002c68:	2a01      	cmp	r2, #1
 8002c6a:	d036      	beq.n	8002cda <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8002c6c:	2001      	movs	r0, #1
}
 8002c6e:	b003      	add	sp, #12
 8002c70:	bcc0      	pop	{r6, r7}
 8002c72:	46b9      	mov	r9, r7
 8002c74:	46b0      	mov	r8, r6
 8002c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8002c78:	2201      	movs	r2, #1
 8002c7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8002c7e:	4393      	bics	r3, r2
 8002c80:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002c82:	f7fe fc13 	bl	80014ac <HAL_GetTick>
 8002c86:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	e004      	b.n	8002c94 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8a:	f7fe fc0f 	bl	80014ac <HAL_GetTick>
 8002c8e:	1b80      	subs	r0, r0, r6
 8002c90:	2802      	cmp	r0, #2
 8002c92:	d82e      	bhi.n	8002cf2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002c96:	421f      	tst	r7, r3
 8002c98:	d1f7      	bne.n	8002c8a <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c9a:	6823      	ldr	r3, [r4, #0]
 8002c9c:	e7a3      	b.n	8002be6 <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c9e:	6842      	ldr	r2, [r0, #4]
 8002ca0:	03d2      	lsls	r2, r2, #15
 8002ca2:	d400      	bmi.n	8002ca6 <HAL_RCC_OscConfig+0x22a>
 8002ca4:	e702      	b.n	8002aac <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca6:	4a3f      	ldr	r2, [pc, #252]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	0392      	lsls	r2, r2, #14
 8002cac:	d400      	bmi.n	8002cb0 <HAL_RCC_OscConfig+0x234>
 8002cae:	e727      	b.n	8002b00 <HAL_RCC_OscConfig+0x84>
 8002cb0:	6862      	ldr	r2, [r4, #4]
 8002cb2:	2a00      	cmp	r2, #0
 8002cb4:	d000      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x23c>
 8002cb6:	e723      	b.n	8002b00 <HAL_RCC_OscConfig+0x84>
 8002cb8:	e7d8      	b.n	8002c6c <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cba:	6833      	ldr	r3, [r6, #0]
 8002cbc:	433b      	orrs	r3, r7
 8002cbe:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002cc0:	f7fe fbf4 	bl	80014ac <HAL_GetTick>
 8002cc4:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	e004      	b.n	8002cd2 <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc8:	f7fe fbf0 	bl	80014ac <HAL_GetTick>
 8002ccc:	1b40      	subs	r0, r0, r5
 8002cce:	2864      	cmp	r0, #100	; 0x64
 8002cd0:	d80f      	bhi.n	8002cf2 <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd2:	6833      	ldr	r3, [r6, #0]
 8002cd4:	423b      	tst	r3, r7
 8002cd6:	d0f7      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x24c>
 8002cd8:	e75a      	b.n	8002b90 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cda:	25f8      	movs	r5, #248	; 0xf8
 8002cdc:	4831      	ldr	r0, [pc, #196]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
 8002cde:	6922      	ldr	r2, [r4, #16]
 8002ce0:	6801      	ldr	r1, [r0, #0]
 8002ce2:	00d2      	lsls	r2, r2, #3
 8002ce4:	43a9      	bics	r1, r5
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cea:	071a      	lsls	r2, r3, #28
 8002cec:	d400      	bmi.n	8002cf0 <HAL_RCC_OscConfig+0x274>
 8002cee:	e735      	b.n	8002b5c <HAL_RCC_OscConfig+0xe0>
 8002cf0:	e762      	b.n	8002bb8 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 8002cf2:	2003      	movs	r0, #3
 8002cf4:	e7bb      	b.n	8002c6e <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf6:	4d2b      	ldr	r5, [pc, #172]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
 8002cf8:	4a2b      	ldr	r2, [pc, #172]	; (8002da8 <HAL_RCC_OscConfig+0x32c>)
 8002cfa:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfc:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfe:	4013      	ands	r3, r2
 8002d00:	602b      	str	r3, [r5, #0]
 8002d02:	682b      	ldr	r3, [r5, #0]
 8002d04:	4a29      	ldr	r2, [pc, #164]	; (8002dac <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d06:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d08:	4013      	ands	r3, r2
 8002d0a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fbce 	bl	80014ac <HAL_GetTick>
 8002d10:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	e004      	b.n	8002d1e <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d14:	f7fe fbca 	bl	80014ac <HAL_GetTick>
 8002d18:	1b80      	subs	r0, r0, r6
 8002d1a:	2864      	cmp	r0, #100	; 0x64
 8002d1c:	d8e9      	bhi.n	8002cf2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1e:	682b      	ldr	r3, [r5, #0]
 8002d20:	423b      	tst	r3, r7
 8002d22:	d1f7      	bne.n	8002d14 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	e6eb      	b.n	8002b00 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d28:	2201      	movs	r2, #1
 8002d2a:	4e1e      	ldr	r6, [pc, #120]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d2c:	4d22      	ldr	r5, [pc, #136]	; (8002db8 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2e:	6a33      	ldr	r3, [r6, #32]
 8002d30:	4393      	bics	r3, r2
 8002d32:	6233      	str	r3, [r6, #32]
 8002d34:	6a33      	ldr	r3, [r6, #32]
 8002d36:	3203      	adds	r2, #3
 8002d38:	4393      	bics	r3, r2
 8002d3a:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8002d3c:	f7fe fbb6 	bl	80014ac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d40:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8002d42:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d44:	4698      	mov	r8, r3
 8002d46:	e004      	b.n	8002d52 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d48:	f7fe fbb0 	bl	80014ac <HAL_GetTick>
 8002d4c:	1bc0      	subs	r0, r0, r7
 8002d4e:	42a8      	cmp	r0, r5
 8002d50:	d8cf      	bhi.n	8002cf2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d52:	4642      	mov	r2, r8
 8002d54:	6a33      	ldr	r3, [r6, #32]
 8002d56:	421a      	tst	r2, r3
 8002d58:	d1f6      	bne.n	8002d48 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8002d5a:	464b      	mov	r3, r9
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d04f      	beq.n	8002e00 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	e742      	b.n	8002bea <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8002d64:	2201      	movs	r2, #1
 8002d66:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d68:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fb9d 	bl	80014ac <HAL_GetTick>
 8002d72:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d74:	e004      	b.n	8002d80 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d76:	f7fe fb99 	bl	80014ac <HAL_GetTick>
 8002d7a:	1b80      	subs	r0, r0, r6
 8002d7c:	2802      	cmp	r0, #2
 8002d7e:	d8b8      	bhi.n	8002cf2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d80:	682b      	ldr	r3, [r5, #0]
 8002d82:	421f      	tst	r7, r3
 8002d84:	d1f7      	bne.n	8002d76 <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	e6e6      	b.n	8002b58 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8a:	4906      	ldr	r1, [pc, #24]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
 8002d8c:	6a0a      	ldr	r2, [r1, #32]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8002d92:	f7fe fb8b 	bl	80014ac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d96:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8002d98:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	4698      	mov	r8, r3
 8002d9c:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9e:	4d06      	ldr	r5, [pc, #24]	; (8002db8 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	e011      	b.n	8002dc6 <HAL_RCC_OscConfig+0x34a>
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	40021000 	.word	0x40021000
 8002da8:	fffeffff 	.word	0xfffeffff
 8002dac:	fffbffff 	.word	0xfffbffff
 8002db0:	40007000 	.word	0x40007000
 8002db4:	feffffff 	.word	0xfeffffff
 8002db8:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dbc:	f7fe fb76 	bl	80014ac <HAL_GetTick>
 8002dc0:	1b80      	subs	r0, r0, r6
 8002dc2:	42a8      	cmp	r0, r5
 8002dc4:	d895      	bhi.n	8002cf2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc6:	4643      	mov	r3, r8
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	421f      	tst	r7, r3
 8002dcc:	d0f6      	beq.n	8002dbc <HAL_RCC_OscConfig+0x340>
 8002dce:	e7c4      	b.n	8002d5a <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002dd0:	2204      	movs	r2, #4
 8002dd2:	4d53      	ldr	r5, [pc, #332]	; (8002f20 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002dd4:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002dd6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002ddc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002dde:	3a03      	subs	r2, #3
 8002de0:	4393      	bics	r3, r2
 8002de2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002de4:	f7fe fb62 	bl	80014ac <HAL_GetTick>
 8002de8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002dea:	e005      	b.n	8002df8 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002dec:	f7fe fb5e 	bl	80014ac <HAL_GetTick>
 8002df0:	1b80      	subs	r0, r0, r6
 8002df2:	2802      	cmp	r0, #2
 8002df4:	d900      	bls.n	8002df8 <HAL_RCC_OscConfig+0x37c>
 8002df6:	e77c      	b.n	8002cf2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002df8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002dfa:	421f      	tst	r7, r3
 8002dfc:	d1f6      	bne.n	8002dec <HAL_RCC_OscConfig+0x370>
 8002dfe:	e709      	b.n	8002c14 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e00:	4a47      	ldr	r2, [pc, #284]	; (8002f20 <HAL_RCC_OscConfig+0x4a4>)
 8002e02:	4948      	ldr	r1, [pc, #288]	; (8002f24 <HAL_RCC_OscConfig+0x4a8>)
 8002e04:	69d3      	ldr	r3, [r2, #28]
 8002e06:	400b      	ands	r3, r1
 8002e08:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	e6ed      	b.n	8002bea <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0e:	2280      	movs	r2, #128	; 0x80
 8002e10:	4b43      	ldr	r3, [pc, #268]	; (8002f20 <HAL_RCC_OscConfig+0x4a4>)
 8002e12:	02d2      	lsls	r2, r2, #11
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	2280      	movs	r2, #128	; 0x80
 8002e1c:	6819      	ldr	r1, [r3, #0]
 8002e1e:	0252      	lsls	r2, r2, #9
 8002e20:	430a      	orrs	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	e65b      	b.n	8002ade <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e26:	2104      	movs	r1, #4
 8002e28:	4b3d      	ldr	r3, [pc, #244]	; (8002f20 <HAL_RCC_OscConfig+0x4a4>)
 8002e2a:	6a1a      	ldr	r2, [r3, #32]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	621a      	str	r2, [r3, #32]
 8002e30:	6a1a      	ldr	r2, [r3, #32]
 8002e32:	3903      	subs	r1, #3
 8002e34:	430a      	orrs	r2, r1
 8002e36:	621a      	str	r2, [r3, #32]
 8002e38:	e7ab      	b.n	8002d92 <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d100      	bne.n	8002e40 <HAL_RCC_OscConfig+0x3c4>
 8002e3e:	e715      	b.n	8002c6c <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e40:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8002e42:	686a      	ldr	r2, [r5, #4]
        pll_config2 = RCC->CFGR2;
 8002e44:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002e48:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8002e4a:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	42ab      	cmp	r3, r5
 8002e50:	d000      	beq.n	8002e54 <HAL_RCC_OscConfig+0x3d8>
 8002e52:	e70c      	b.n	8002c6e <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e54:	230f      	movs	r3, #15
 8002e56:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e58:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002e5a:	428b      	cmp	r3, r1
 8002e5c:	d000      	beq.n	8002e60 <HAL_RCC_OscConfig+0x3e4>
 8002e5e:	e706      	b.n	8002c6e <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002e60:	20f0      	movs	r0, #240	; 0xf0
 8002e62:	0380      	lsls	r0, r0, #14
 8002e64:	4002      	ands	r2, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002e68:	1a10      	subs	r0, r2, r0
 8002e6a:	1e43      	subs	r3, r0, #1
 8002e6c:	4198      	sbcs	r0, r3
  return HAL_OK;
 8002e6e:	b2c0      	uxtb	r0, r0
 8002e70:	e6fd      	b.n	8002c6e <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e72:	2104      	movs	r1, #4
 8002e74:	4d2a      	ldr	r5, [pc, #168]	; (8002f20 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e76:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e78:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8002e7e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002e80:	4313      	orrs	r3, r2
 8002e82:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002e84:	f7fe fb12 	bl	80014ac <HAL_GetTick>
 8002e88:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e8a:	e005      	b.n	8002e98 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e8c:	f7fe fb0e 	bl	80014ac <HAL_GetTick>
 8002e90:	1b80      	subs	r0, r0, r6
 8002e92:	2802      	cmp	r0, #2
 8002e94:	d900      	bls.n	8002e98 <HAL_RCC_OscConfig+0x41c>
 8002e96:	e72c      	b.n	8002cf2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e98:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002e9a:	421f      	tst	r7, r3
 8002e9c:	d0f6      	beq.n	8002e8c <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e9e:	21f8      	movs	r1, #248	; 0xf8
 8002ea0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002ea2:	69a3      	ldr	r3, [r4, #24]
 8002ea4:	438a      	bics	r2, r1
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	636b      	str	r3, [r5, #52]	; 0x34
 8002eac:	e6b2      	b.n	8002c14 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8002eae:	682b      	ldr	r3, [r5, #0]
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb2:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002eb8:	f7fe faf8 	bl	80014ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ebc:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8002ebe:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec0:	e005      	b.n	8002ece <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec2:	f7fe faf3 	bl	80014ac <HAL_GetTick>
 8002ec6:	1b80      	subs	r0, r0, r6
 8002ec8:	2802      	cmp	r0, #2
 8002eca:	d900      	bls.n	8002ece <HAL_RCC_OscConfig+0x452>
 8002ecc:	e711      	b.n	8002cf2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ece:	682b      	ldr	r3, [r5, #0]
 8002ed0:	423b      	tst	r3, r7
 8002ed2:	d1f6      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ed4:	220f      	movs	r2, #15
 8002ed6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed8:	4e11      	ldr	r6, [pc, #68]	; (8002f20 <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eda:	4393      	bics	r3, r2
 8002edc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002ee2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002ee4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ee6:	686a      	ldr	r2, [r5, #4]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	4910      	ldr	r1, [pc, #64]	; (8002f2c <HAL_RCC_OscConfig+0x4b0>)
 8002eec:	400a      	ands	r2, r1
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	682a      	ldr	r2, [r5, #0]
 8002ef6:	045b      	lsls	r3, r3, #17
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002efc:	f7fe fad6 	bl	80014ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f00:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8002f02:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f04:	04ad      	lsls	r5, r5, #18
 8002f06:	e005      	b.n	8002f14 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe fad0 	bl	80014ac <HAL_GetTick>
 8002f0c:	1b00      	subs	r0, r0, r4
 8002f0e:	2802      	cmp	r0, #2
 8002f10:	d900      	bls.n	8002f14 <HAL_RCC_OscConfig+0x498>
 8002f12:	e6ee      	b.n	8002cf2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f14:	6833      	ldr	r3, [r6, #0]
 8002f16:	422b      	tst	r3, r5
 8002f18:	d0f6      	beq.n	8002f08 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	e6a7      	b.n	8002c6e <HAL_RCC_OscConfig+0x1f2>
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	40021000 	.word	0x40021000
 8002f24:	efffffff 	.word	0xefffffff
 8002f28:	feffffff 	.word	0xfeffffff
 8002f2c:	ffc2ffff 	.word	0xffc2ffff

08002f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f32:	46ce      	mov	lr, r9
 8002f34:	4647      	mov	r7, r8
 8002f36:	0004      	movs	r4, r0
 8002f38:	000d      	movs	r5, r1
 8002f3a:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	d00d      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f40:	2301      	movs	r3, #1
 8002f42:	494a      	ldr	r1, [pc, #296]	; (800306c <HAL_RCC_ClockConfig+0x13c>)
 8002f44:	680a      	ldr	r2, [r1, #0]
 8002f46:	401a      	ands	r2, r3
 8002f48:	42aa      	cmp	r2, r5
 8002f4a:	d20c      	bcs.n	8002f66 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4c:	680a      	ldr	r2, [r1, #0]
 8002f4e:	439a      	bics	r2, r3
 8002f50:	432a      	orrs	r2, r5
 8002f52:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f54:	680a      	ldr	r2, [r1, #0]
 8002f56:	4013      	ands	r3, r2
 8002f58:	42ab      	cmp	r3, r5
 8002f5a:	d004      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8002f5c:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8002f5e:	bcc0      	pop	{r6, r7}
 8002f60:	46b9      	mov	r9, r7
 8002f62:	46b0      	mov	r8, r6
 8002f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	079a      	lsls	r2, r3, #30
 8002f6a:	d50e      	bpl.n	8002f8a <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	075a      	lsls	r2, r3, #29
 8002f6e:	d505      	bpl.n	8002f7c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f70:	22e0      	movs	r2, #224	; 0xe0
 8002f72:	493f      	ldr	r1, [pc, #252]	; (8003070 <HAL_RCC_ClockConfig+0x140>)
 8002f74:	00d2      	lsls	r2, r2, #3
 8002f76:	6848      	ldr	r0, [r1, #4]
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f7c:	20f0      	movs	r0, #240	; 0xf0
 8002f7e:	493c      	ldr	r1, [pc, #240]	; (8003070 <HAL_RCC_ClockConfig+0x140>)
 8002f80:	684a      	ldr	r2, [r1, #4]
 8002f82:	4382      	bics	r2, r0
 8002f84:	68a0      	ldr	r0, [r4, #8]
 8002f86:	4302      	orrs	r2, r0
 8002f88:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f8a:	07db      	lsls	r3, r3, #31
 8002f8c:	d522      	bpl.n	8002fd4 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	4b38      	ldr	r3, [pc, #224]	; (8003070 <HAL_RCC_ClockConfig+0x140>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f90:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f94:	2a01      	cmp	r2, #1
 8002f96:	d05b      	beq.n	8003050 <HAL_RCC_ClockConfig+0x120>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f98:	2a02      	cmp	r2, #2
 8002f9a:	d056      	beq.n	800304a <HAL_RCC_ClockConfig+0x11a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9c:	079b      	lsls	r3, r3, #30
 8002f9e:	d5dd      	bpl.n	8002f5c <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fa0:	2103      	movs	r1, #3
 8002fa2:	4e33      	ldr	r6, [pc, #204]	; (8003070 <HAL_RCC_ClockConfig+0x140>)
 8002fa4:	6873      	ldr	r3, [r6, #4]
 8002fa6:	438b      	bics	r3, r1
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002fac:	f7fe fa7e 	bl	80014ac <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb0:	230c      	movs	r3, #12
 8002fb2:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb4:	4b2f      	ldr	r3, [pc, #188]	; (8003074 <HAL_RCC_ClockConfig+0x144>)
    tickstart = HAL_GetTick();
 8002fb6:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb8:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	e004      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbc:	f7fe fa76 	bl	80014ac <HAL_GetTick>
 8002fc0:	1bc0      	subs	r0, r0, r7
 8002fc2:	4548      	cmp	r0, r9
 8002fc4:	d847      	bhi.n	8003056 <HAL_RCC_ClockConfig+0x126>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	4643      	mov	r3, r8
 8002fc8:	6872      	ldr	r2, [r6, #4]
 8002fca:	401a      	ands	r2, r3
 8002fcc:	6863      	ldr	r3, [r4, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d1f3      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	4a25      	ldr	r2, [pc, #148]	; (800306c <HAL_RCC_ClockConfig+0x13c>)
 8002fd8:	6813      	ldr	r3, [r2, #0]
 8002fda:	400b      	ands	r3, r1
 8002fdc:	42ab      	cmp	r3, r5
 8002fde:	d905      	bls.n	8002fec <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe0:	6813      	ldr	r3, [r2, #0]
 8002fe2:	438b      	bics	r3, r1
 8002fe4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	4219      	tst	r1, r3
 8002fea:	d1b7      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	075b      	lsls	r3, r3, #29
 8002ff0:	d506      	bpl.n	8003000 <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff2:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <HAL_RCC_ClockConfig+0x140>)
 8002ff4:	4920      	ldr	r1, [pc, #128]	; (8003078 <HAL_RCC_ClockConfig+0x148>)
 8002ff6:	6853      	ldr	r3, [r2, #4]
 8002ff8:	400b      	ands	r3, r1
 8002ffa:	68e1      	ldr	r1, [r4, #12]
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	6053      	str	r3, [r2, #4]
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003000:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8003002:	491b      	ldr	r1, [pc, #108]	; (8003070 <HAL_RCC_ClockConfig+0x140>)
 8003004:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003006:	4013      	ands	r3, r2
 8003008:	2b08      	cmp	r3, #8
 800300a:	d00e      	beq.n	800302a <HAL_RCC_ClockConfig+0xfa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800300c:	481b      	ldr	r0, [pc, #108]	; (800307c <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800300e:	4b18      	ldr	r3, [pc, #96]	; (8003070 <HAL_RCC_ClockConfig+0x140>)
 8003010:	4a1b      	ldr	r2, [pc, #108]	; (8003080 <HAL_RCC_ClockConfig+0x150>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	0f1b      	lsrs	r3, r3, #28
 8003018:	5cd3      	ldrb	r3, [r2, r3]
 800301a:	40d8      	lsrs	r0, r3
 800301c:	4b19      	ldr	r3, [pc, #100]	; (8003084 <HAL_RCC_ClockConfig+0x154>)
 800301e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003020:	2003      	movs	r0, #3
 8003022:	f7fe fa01 	bl	8001428 <HAL_InitTick>
  return HAL_OK;
 8003026:	2000      	movs	r0, #0
 8003028:	e799      	b.n	8002f5e <HAL_RCC_ClockConfig+0x2e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800302a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800302c:	3307      	adds	r3, #7
 800302e:	0c90      	lsrs	r0, r2, #18
 8003030:	4018      	ands	r0, r3
 8003032:	4c15      	ldr	r4, [pc, #84]	; (8003088 <HAL_RCC_ClockConfig+0x158>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003034:	400b      	ands	r3, r1
 8003036:	4915      	ldr	r1, [pc, #84]	; (800308c <HAL_RCC_ClockConfig+0x15c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003038:	5c24      	ldrb	r4, [r4, r0]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800303a:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800303c:	03d3      	lsls	r3, r2, #15
 800303e:	d50c      	bpl.n	800305a <HAL_RCC_ClockConfig+0x12a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003040:	480e      	ldr	r0, [pc, #56]	; (800307c <HAL_RCC_ClockConfig+0x14c>)
 8003042:	f7fd f86b 	bl	800011c <__udivsi3>
 8003046:	4360      	muls	r0, r4
 8003048:	e7e1      	b.n	800300e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304a:	019b      	lsls	r3, r3, #6
 800304c:	d4a8      	bmi.n	8002fa0 <HAL_RCC_ClockConfig+0x70>
 800304e:	e785      	b.n	8002f5c <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003050:	039b      	lsls	r3, r3, #14
 8003052:	d4a5      	bmi.n	8002fa0 <HAL_RCC_ClockConfig+0x70>
 8003054:	e782      	b.n	8002f5c <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8003056:	2003      	movs	r0, #3
 8003058:	e781      	b.n	8002f5e <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800305a:	0163      	lsls	r3, r4, #5
 800305c:	1b1b      	subs	r3, r3, r4
 800305e:	0198      	lsls	r0, r3, #6
 8003060:	1ac0      	subs	r0, r0, r3
 8003062:	00c0      	lsls	r0, r0, #3
 8003064:	1900      	adds	r0, r0, r4
 8003066:	0200      	lsls	r0, r0, #8
 8003068:	e7d1      	b.n	800300e <HAL_RCC_ClockConfig+0xde>
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	40022000 	.word	0x40022000
 8003070:	40021000 	.word	0x40021000
 8003074:	00001388 	.word	0x00001388
 8003078:	fffff8ff 	.word	0xfffff8ff
 800307c:	007a1200 	.word	0x007a1200
 8003080:	080064dc 	.word	0x080064dc
 8003084:	20000000 	.word	0x20000000
 8003088:	080064f4 	.word	0x080064f4
 800308c:	08006504 	.word	0x08006504

08003090 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8003090:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8003092:	4910      	ldr	r1, [pc, #64]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x44>)
{
 8003094:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8003096:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003098:	4013      	ands	r3, r2
 800309a:	2b08      	cmp	r3, #8
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x12>
      sysclockfreq = HSE_VALUE;
 800309e:	480e      	ldr	r0, [pc, #56]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80030a0:	bd10      	pop	{r4, pc}
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80030a2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80030a4:	3307      	adds	r3, #7
 80030a6:	0c90      	lsrs	r0, r2, #18
 80030a8:	4018      	ands	r0, r3
 80030aa:	4c0c      	ldr	r4, [pc, #48]	; (80030dc <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80030ac:	400b      	ands	r3, r1
 80030ae:	490c      	ldr	r1, [pc, #48]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x50>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80030b0:	5c24      	ldrb	r4, [r4, r0]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80030b2:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80030b4:	03d3      	lsls	r3, r2, #15
 80030b6:	d504      	bpl.n	80030c2 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030b8:	4807      	ldr	r0, [pc, #28]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x48>)
 80030ba:	f7fd f82f 	bl	800011c <__udivsi3>
 80030be:	4360      	muls	r0, r4
 80030c0:	e7ee      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x10>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030c2:	0163      	lsls	r3, r4, #5
 80030c4:	1b1b      	subs	r3, r3, r4
 80030c6:	0198      	lsls	r0, r3, #6
 80030c8:	1ac0      	subs	r0, r0, r3
 80030ca:	00c0      	lsls	r0, r0, #3
 80030cc:	1900      	adds	r0, r0, r4
 80030ce:	0200      	lsls	r0, r0, #8
 80030d0:	e7e6      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x10>
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	40021000 	.word	0x40021000
 80030d8:	007a1200 	.word	0x007a1200
 80030dc:	080064f4 	.word	0x080064f4
 80030e0:	08006504 	.word	0x08006504

080030e4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80030e4:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80030e6:	4a05      	ldr	r2, [pc, #20]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	055b      	lsls	r3, r3, #21
 80030ec:	0f5b      	lsrs	r3, r3, #29
 80030ee:	5cd3      	ldrb	r3, [r2, r3]
 80030f0:	4a03      	ldr	r2, [pc, #12]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80030f2:	6810      	ldr	r0, [r2, #0]
 80030f4:	40d8      	lsrs	r0, r3
}    
 80030f6:	4770      	bx	lr
 80030f8:	40021000 	.word	0x40021000
 80030fc:	080064ec 	.word	0x080064ec
 8003100:	20000000 	.word	0x20000000

08003104 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003106:	46ce      	mov	lr, r9
 8003108:	4647      	mov	r7, r8
 800310a:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800310c:	6803      	ldr	r3, [r0, #0]
{
 800310e:	0004      	movs	r4, r0
 8003110:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003112:	03da      	lsls	r2, r3, #15
 8003114:	d530      	bpl.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003116:	2280      	movs	r2, #128	; 0x80
 8003118:	4b43      	ldr	r3, [pc, #268]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800311a:	0552      	lsls	r2, r2, #21
 800311c:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800311e:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003120:	4211      	tst	r1, r2
 8003122:	d041      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	2680      	movs	r6, #128	; 0x80
 8003126:	4d41      	ldr	r5, [pc, #260]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003128:	0076      	lsls	r6, r6, #1
 800312a:	682b      	ldr	r3, [r5, #0]
 800312c:	4233      	tst	r3, r6
 800312e:	d049      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003130:	4d3d      	ldr	r5, [pc, #244]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003132:	22c0      	movs	r2, #192	; 0xc0
 8003134:	6a2b      	ldr	r3, [r5, #32]
 8003136:	0092      	lsls	r2, r2, #2
 8003138:	0018      	movs	r0, r3
 800313a:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800313c:	4213      	tst	r3, r2
 800313e:	d063      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003140:	6861      	ldr	r1, [r4, #4]
 8003142:	400a      	ands	r2, r1
 8003144:	4282      	cmp	r2, r0
 8003146:	d00e      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003148:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800314a:	6a28      	ldr	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800314c:	6a2e      	ldr	r6, [r5, #32]
 800314e:	0252      	lsls	r2, r2, #9
 8003150:	4332      	orrs	r2, r6
 8003152:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003154:	6a2a      	ldr	r2, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003156:	4b36      	ldr	r3, [pc, #216]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003158:	4e36      	ldr	r6, [pc, #216]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800315a:	4003      	ands	r3, r0
      __HAL_RCC_BACKUPRESET_RELEASE();
 800315c:	4032      	ands	r2, r6
 800315e:	622a      	str	r2, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003160:	622b      	str	r3, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003162:	07c3      	lsls	r3, r0, #31
 8003164:	d43f      	bmi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003166:	4a30      	ldr	r2, [pc, #192]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003168:	4831      	ldr	r0, [pc, #196]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800316a:	6a13      	ldr	r3, [r2, #32]
 800316c:	4003      	ands	r3, r0
 800316e:	430b      	orrs	r3, r1
 8003170:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003172:	2f01      	cmp	r7, #1
 8003174:	d051      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	07da      	lsls	r2, r3, #31
 800317a:	d506      	bpl.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800317c:	2003      	movs	r0, #3
 800317e:	492a      	ldr	r1, [pc, #168]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003180:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003182:	4382      	bics	r2, r0
 8003184:	68a0      	ldr	r0, [r4, #8]
 8003186:	4302      	orrs	r2, r0
 8003188:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800318a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800318c:	069b      	lsls	r3, r3, #26
 800318e:	d506      	bpl.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003190:	2110      	movs	r1, #16
 8003192:	4a25      	ldr	r2, [pc, #148]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003194:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003196:	438b      	bics	r3, r1
 8003198:	68e1      	ldr	r1, [r4, #12]
 800319a:	430b      	orrs	r3, r1
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800319e:	b003      	add	sp, #12
 80031a0:	bcc0      	pop	{r6, r7}
 80031a2:	46b9      	mov	r9, r7
 80031a4:	46b0      	mov	r8, r6
 80031a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a8:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	4d1f      	ldr	r5, [pc, #124]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80031ae:	4311      	orrs	r1, r2
 80031b0:	61d9      	str	r1, [r3, #28]
 80031b2:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b4:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80031b6:	401a      	ands	r2, r3
 80031b8:	9201      	str	r2, [sp, #4]
 80031ba:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031bc:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 80031be:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	4233      	tst	r3, r6
 80031c2:	d1b5      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c4:	682b      	ldr	r3, [r5, #0]
 80031c6:	4333      	orrs	r3, r6
 80031c8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80031ca:	f7fe f96f 	bl	80014ac <HAL_GetTick>
 80031ce:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d0:	682b      	ldr	r3, [r5, #0]
 80031d2:	4233      	tst	r3, r6
 80031d4:	d1ac      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d6:	f7fe f969 	bl	80014ac <HAL_GetTick>
 80031da:	4643      	mov	r3, r8
 80031dc:	1ac0      	subs	r0, r0, r3
 80031de:	2864      	cmp	r0, #100	; 0x64
 80031e0:	d9f6      	bls.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 80031e2:	2003      	movs	r0, #3
 80031e4:	e7db      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 80031e6:	f7fe f961 	bl	80014ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ea:	2302      	movs	r3, #2
 80031ec:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 80031f0:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	e004      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7fe f959 	bl	80014ac <HAL_GetTick>
 80031fa:	1b80      	subs	r0, r0, r6
 80031fc:	4548      	cmp	r0, r9
 80031fe:	d8f0      	bhi.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003200:	4642      	mov	r2, r8
 8003202:	6a2b      	ldr	r3, [r5, #32]
 8003204:	421a      	tst	r2, r3
 8003206:	d0f6      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003208:	4a07      	ldr	r2, [pc, #28]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800320a:	4809      	ldr	r0, [pc, #36]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800320c:	6a13      	ldr	r3, [r2, #32]
 800320e:	6861      	ldr	r1, [r4, #4]
 8003210:	4003      	ands	r3, r0
 8003212:	430b      	orrs	r3, r1
 8003214:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 8003216:	2f01      	cmp	r7, #1
 8003218:	d1ad      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 800321a:	69d3      	ldr	r3, [r2, #28]
 800321c:	4907      	ldr	r1, [pc, #28]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800321e:	400b      	ands	r3, r1
 8003220:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	e7a8      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	40021000 	.word	0x40021000
 800322c:	40007000 	.word	0x40007000
 8003230:	fffffcff 	.word	0xfffffcff
 8003234:	fffeffff 	.word	0xfffeffff
 8003238:	00001388 	.word	0x00001388
 800323c:	efffffff 	.word	0xefffffff

08003240 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003242:	46d6      	mov	lr, sl
 8003244:	464f      	mov	r7, r9
 8003246:	4646      	mov	r6, r8
 8003248:	b5c0      	push	{r6, r7, lr}
 800324a:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800324c:	466b      	mov	r3, sp
 800324e:	1cdc      	adds	r4, r3, #3
 8003250:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003252:	0016      	movs	r6, r2
 8003254:	000f      	movs	r7, r1
  __IO uint8_t  tmpreg8 = 0;
 8003256:	7023      	strb	r3, [r4, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003258:	4680      	mov	r8, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800325a:	f7fe f927 	bl	80014ac <HAL_GetTick>
 800325e:	19f6      	adds	r6, r6, r7
 8003260:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8003262:	f7fe f923 	bl	80014ac <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003266:	4643      	mov	r3, r8
 8003268:	681d      	ldr	r5, [r3, #0]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800326a:	4b37      	ldr	r3, [pc, #220]	; (8003348 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
  tmp_tickstart = HAL_GetTick();
 800326c:	4681      	mov	r9, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	0093      	lsls	r3, r2, #2
 8003272:	189a      	adds	r2, r3, r2
 8003274:	00d3      	lsls	r3, r2, #3
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	0d1b      	lsrs	r3, r3, #20
 800327a:	4373      	muls	r3, r6
 800327c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800327e:	23c0      	movs	r3, #192	; 0xc0
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	002a      	movs	r2, r5
 8003284:	469a      	mov	sl, r3
 8003286:	1c7b      	adds	r3, r7, #1
 8003288:	d112      	bne.n	80032b0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x70>
 800328a:	21c0      	movs	r1, #192	; 0xc0
 800328c:	6893      	ldr	r3, [r2, #8]
 800328e:	00c9      	lsls	r1, r1, #3
 8003290:	420b      	tst	r3, r1
 8003292:	d006      	beq.n	80032a2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003294:	7b2b      	ldrb	r3, [r5, #12]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	7023      	strb	r3, [r4, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800329a:	7823      	ldrb	r3, [r4, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800329c:	6893      	ldr	r3, [r2, #8]
 800329e:	420b      	tst	r3, r1
 80032a0:	d1f8      	bne.n	8003294 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      }
      count--;
    }
  }

  return HAL_OK;
 80032a2:	2000      	movs	r0, #0
}
 80032a4:	b002      	add	sp, #8
 80032a6:	bce0      	pop	{r5, r6, r7}
 80032a8:	46ba      	mov	sl, r7
 80032aa:	46b1      	mov	r9, r6
 80032ac:	46a8      	mov	r8, r5
 80032ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 80032b0:	6893      	ldr	r3, [r2, #8]
 80032b2:	4652      	mov	r2, sl
 80032b4:	4213      	tst	r3, r2
 80032b6:	d0f4      	beq.n	80032a2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
      tmpreg8 = *ptmpreg8;
 80032b8:	7b2b      	ldrb	r3, [r5, #12]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	7023      	strb	r3, [r4, #0]
      UNUSED(tmpreg8);
 80032be:	7823      	ldrb	r3, [r4, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032c0:	f7fe f8f4 	bl	80014ac <HAL_GetTick>
 80032c4:	464b      	mov	r3, r9
 80032c6:	1ac0      	subs	r0, r0, r3
 80032c8:	42b0      	cmp	r0, r6
 80032ca:	d20a      	bcs.n	80032e2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa2>
      if (count == 0U)
 80032cc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80032ce:	1e5a      	subs	r2, r3, #1
 80032d0:	4193      	sbcs	r3, r2
 80032d2:	425b      	negs	r3, r3
 80032d4:	401e      	ands	r6, r3
      count--;
 80032d6:	9b01      	ldr	r3, [sp, #4]
 80032d8:	3b01      	subs	r3, #1
 80032da:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 80032dc:	4643      	mov	r3, r8
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	e7d1      	b.n	8003286 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032e2:	4643      	mov	r3, r8
 80032e4:	21e0      	movs	r1, #224	; 0xe0
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ec:	4641      	mov	r1, r8
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ee:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032f0:	2282      	movs	r2, #130	; 0x82
 80032f2:	6849      	ldr	r1, [r1, #4]
 80032f4:	0052      	lsls	r2, r2, #1
 80032f6:	4291      	cmp	r1, r2
 80032f8:	d016      	beq.n	8003328 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032fa:	4642      	mov	r2, r8
 80032fc:	2180      	movs	r1, #128	; 0x80
 80032fe:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003300:	0189      	lsls	r1, r1, #6
 8003302:	428a      	cmp	r2, r1
 8003304:	d008      	beq.n	8003318 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
        hspi->State = HAL_SPI_STATE_READY;
 8003306:	235d      	movs	r3, #93	; 0x5d
 8003308:	2201      	movs	r2, #1
 800330a:	4641      	mov	r1, r8
 800330c:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 800330e:	2200      	movs	r2, #0
 8003310:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8003312:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8003314:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8003316:	e7c5      	b.n	80032a4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x64>
          SPI_RESET_CRC(hspi);
 8003318:	6819      	ldr	r1, [r3, #0]
 800331a:	480c      	ldr	r0, [pc, #48]	; (800334c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x10c>)
 800331c:	4001      	ands	r1, r0
 800331e:	6019      	str	r1, [r3, #0]
 8003320:	6819      	ldr	r1, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	e7ee      	b.n	8003306 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc6>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003328:	4642      	mov	r2, r8
 800332a:	2180      	movs	r1, #128	; 0x80
 800332c:	6892      	ldr	r2, [r2, #8]
 800332e:	0209      	lsls	r1, r1, #8
 8003330:	428a      	cmp	r2, r1
 8003332:	d003      	beq.n	800333c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003334:	2180      	movs	r1, #128	; 0x80
 8003336:	00c9      	lsls	r1, r1, #3
 8003338:	428a      	cmp	r2, r1
 800333a:	d1de      	bne.n	80032fa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
          __HAL_SPI_DISABLE(hspi);
 800333c:	2140      	movs	r1, #64	; 0x40
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	438a      	bics	r2, r1
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	e7d9      	b.n	80032fa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	20000000 	.word	0x20000000
 800334c:	ffffdfff 	.word	0xffffdfff

08003350 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003352:	46de      	mov	lr, fp
 8003354:	4657      	mov	r7, sl
 8003356:	464e      	mov	r6, r9
 8003358:	4645      	mov	r5, r8
 800335a:	b5e0      	push	{r5, r6, r7, lr}
 800335c:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 800335e:	466b      	mov	r3, sp
{
 8003360:	0017      	movs	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8003362:	2200      	movs	r2, #0
{
 8003364:	000d      	movs	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 8003366:	71da      	strb	r2, [r3, #7]
{
 8003368:	0004      	movs	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800336a:	f7fe f89f 	bl	80014ac <HAL_GetTick>
 800336e:	19eb      	adds	r3, r5, r7
 8003370:	1a1e      	subs	r6, r3, r0
 8003372:	469a      	mov	sl, r3
  tmp_tickstart = HAL_GetTick();
 8003374:	f7fe f89a 	bl	80014ac <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003378:	4b47      	ldr	r3, [pc, #284]	; (8003498 <SPI_EndRxTxTransaction+0x148>)
  tmp_tickstart = HAL_GetTick();
 800337a:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	4699      	mov	r9, r3
 8003380:	0093      	lsls	r3, r2, #2
 8003382:	189a      	adds	r2, r3, r2
 8003384:	00d3      	lsls	r3, r2, #3
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	0d1b      	lsrs	r3, r3, #20
 800338a:	4373      	muls	r3, r6
 800338c:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 800338e:	23c0      	movs	r3, #192	; 0xc0
 8003390:	015b      	lsls	r3, r3, #5
 8003392:	469b      	mov	fp, r3
 8003394:	6822      	ldr	r2, [r4, #0]
 8003396:	1c6b      	adds	r3, r5, #1
 8003398:	d14a      	bne.n	8003430 <SPI_EndRxTxTransaction+0xe0>
 800339a:	21c0      	movs	r1, #192	; 0xc0
 800339c:	0149      	lsls	r1, r1, #5
 800339e:	6893      	ldr	r3, [r2, #8]
 80033a0:	420b      	tst	r3, r1
 80033a2:	d1fc      	bne.n	800339e <SPI_EndRxTxTransaction+0x4e>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033a4:	f7fe f882 	bl	80014ac <HAL_GetTick>
 80033a8:	4653      	mov	r3, sl
 80033aa:	1a1e      	subs	r6, r3, r0
  tmp_tickstart = HAL_GetTick();
 80033ac:	f7fe f87e 	bl	80014ac <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033b0:	464b      	mov	r3, r9
 80033b2:	681b      	ldr	r3, [r3, #0]
  tmp_tickstart = HAL_GetTick();
 80033b4:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033b6:	015b      	lsls	r3, r3, #5
 80033b8:	0d1b      	lsrs	r3, r3, #20
 80033ba:	4373      	muls	r3, r6
 80033bc:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	4699      	mov	r9, r3
 80033c2:	6822      	ldr	r2, [r4, #0]
 80033c4:	1c6b      	adds	r3, r5, #1
 80033c6:	d146      	bne.n	8003456 <SPI_EndRxTxTransaction+0x106>
 80033c8:	2180      	movs	r1, #128	; 0x80
 80033ca:	6893      	ldr	r3, [r2, #8]
 80033cc:	4219      	tst	r1, r3
 80033ce:	d1fc      	bne.n	80033ca <SPI_EndRxTxTransaction+0x7a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033d0:	003a      	movs	r2, r7
 80033d2:	0029      	movs	r1, r5
 80033d4:	0020      	movs	r0, r4
 80033d6:	f7ff ff33 	bl	8003240 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80033da:	2800      	cmp	r0, #0
 80033dc:	d122      	bne.n	8003424 <SPI_EndRxTxTransaction+0xd4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80033de:	b005      	add	sp, #20
 80033e0:	bcf0      	pop	{r4, r5, r6, r7}
 80033e2:	46bb      	mov	fp, r7
 80033e4:	46b2      	mov	sl, r6
 80033e6:	46a9      	mov	r9, r5
 80033e8:	46a0      	mov	r8, r4
 80033ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033ec:	21e0      	movs	r1, #224	; 0xe0
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	438a      	bics	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033f6:	2282      	movs	r2, #130	; 0x82
 80033f8:	6861      	ldr	r1, [r4, #4]
 80033fa:	0052      	lsls	r2, r2, #1
 80033fc:	4291      	cmp	r1, r2
 80033fe:	d03d      	beq.n	800347c <SPI_EndRxTxTransaction+0x12c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003400:	2180      	movs	r1, #128	; 0x80
 8003402:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003404:	0189      	lsls	r1, r1, #6
 8003406:	428a      	cmp	r2, r1
 8003408:	d106      	bne.n	8003418 <SPI_EndRxTxTransaction+0xc8>
          SPI_RESET_CRC(hspi);
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	4823      	ldr	r0, [pc, #140]	; (800349c <SPI_EndRxTxTransaction+0x14c>)
 800340e:	4001      	ands	r1, r0
 8003410:	6019      	str	r1, [r3, #0]
 8003412:	6819      	ldr	r1, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003418:	235d      	movs	r3, #93	; 0x5d
 800341a:	2201      	movs	r2, #1
 800341c:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hspi);
 800341e:	2200      	movs	r2, #0
 8003420:	3b01      	subs	r3, #1
 8003422:	54e2      	strb	r2, [r4, r3]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003424:	2220      	movs	r2, #32
 8003426:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003428:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800342a:	4313      	orrs	r3, r2
 800342c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800342e:	e7d6      	b.n	80033de <SPI_EndRxTxTransaction+0x8e>
  while ((hspi->Instance->SR & Fifo) != State)
 8003430:	6893      	ldr	r3, [r2, #8]
 8003432:	465a      	mov	r2, fp
 8003434:	4213      	tst	r3, r2
 8003436:	d0b5      	beq.n	80033a4 <SPI_EndRxTxTransaction+0x54>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003438:	f7fe f838 	bl	80014ac <HAL_GetTick>
 800343c:	4643      	mov	r3, r8
 800343e:	1ac0      	subs	r0, r0, r3
 8003440:	42b0      	cmp	r0, r6
 8003442:	d2d3      	bcs.n	80033ec <SPI_EndRxTxTransaction+0x9c>
      if (count == 0U)
 8003444:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 8003446:	1e5a      	subs	r2, r3, #1
 8003448:	4193      	sbcs	r3, r2
 800344a:	425b      	negs	r3, r3
 800344c:	401e      	ands	r6, r3
      count--;
 800344e:	9b02      	ldr	r3, [sp, #8]
 8003450:	3b01      	subs	r3, #1
 8003452:	9302      	str	r3, [sp, #8]
 8003454:	e79e      	b.n	8003394 <SPI_EndRxTxTransaction+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003456:	6893      	ldr	r3, [r2, #8]
 8003458:	464a      	mov	r2, r9
 800345a:	421a      	tst	r2, r3
 800345c:	d0b8      	beq.n	80033d0 <SPI_EndRxTxTransaction+0x80>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800345e:	f7fe f825 	bl	80014ac <HAL_GetTick>
 8003462:	4643      	mov	r3, r8
 8003464:	1ac0      	subs	r0, r0, r3
 8003466:	42b0      	cmp	r0, r6
 8003468:	d2c0      	bcs.n	80033ec <SPI_EndRxTxTransaction+0x9c>
      if (count == 0U)
 800346a:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 800346c:	1e5a      	subs	r2, r3, #1
 800346e:	4193      	sbcs	r3, r2
 8003470:	425b      	negs	r3, r3
 8003472:	401e      	ands	r6, r3
      count--;
 8003474:	9b03      	ldr	r3, [sp, #12]
 8003476:	3b01      	subs	r3, #1
 8003478:	9303      	str	r3, [sp, #12]
 800347a:	e7a2      	b.n	80033c2 <SPI_EndRxTxTransaction+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800347c:	2180      	movs	r1, #128	; 0x80
 800347e:	68a2      	ldr	r2, [r4, #8]
 8003480:	0209      	lsls	r1, r1, #8
 8003482:	428a      	cmp	r2, r1
 8003484:	d003      	beq.n	800348e <SPI_EndRxTxTransaction+0x13e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003486:	2180      	movs	r1, #128	; 0x80
 8003488:	00c9      	lsls	r1, r1, #3
 800348a:	428a      	cmp	r2, r1
 800348c:	d1b8      	bne.n	8003400 <SPI_EndRxTxTransaction+0xb0>
          __HAL_SPI_DISABLE(hspi);
 800348e:	2140      	movs	r1, #64	; 0x40
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	438a      	bics	r2, r1
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e7b3      	b.n	8003400 <SPI_EndRxTxTransaction+0xb0>
 8003498:	20000000 	.word	0x20000000
 800349c:	ffffdfff 	.word	0xffffdfff

080034a0 <HAL_SPI_Init>:
{
 80034a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034a2:	46d6      	mov	lr, sl
 80034a4:	464f      	mov	r7, r9
 80034a6:	4646      	mov	r6, r8
 80034a8:	0004      	movs	r4, r0
 80034aa:	b5c0      	push	{r6, r7, lr}
  if (hspi == NULL)
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d100      	bne.n	80034b2 <HAL_SPI_Init+0x12>
 80034b0:	e08e      	b.n	80035d0 <HAL_SPI_Init+0x130>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80034b4:	2d00      	cmp	r5, #0
 80034b6:	d065      	beq.n	8003584 <HAL_SPI_Init+0xe4>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034b8:	2300      	movs	r3, #0
 80034ba:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034bc:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034be:	2300      	movs	r3, #0
 80034c0:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80034c2:	335d      	adds	r3, #93	; 0x5d
 80034c4:	5ce3      	ldrb	r3, [r4, r3]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d068      	beq.n	800359e <HAL_SPI_Init+0xfe>
  hspi->State = HAL_SPI_STATE_BUSY;
 80034cc:	235d      	movs	r3, #93	; 0x5d
 80034ce:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 80034d0:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80034d2:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 80034d4:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034d6:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80034d8:	6813      	ldr	r3, [r2, #0]
 80034da:	438b      	bics	r3, r1
 80034dc:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034de:	23e0      	movs	r3, #224	; 0xe0
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4298      	cmp	r0, r3
 80034e4:	d962      	bls.n	80035ac <HAL_SPI_Init+0x10c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034e6:	23f0      	movs	r3, #240	; 0xf0
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	4298      	cmp	r0, r3
 80034ec:	d000      	beq.n	80034f0 <HAL_SPI_Init+0x50>
 80034ee:	e071      	b.n	80035d4 <HAL_SPI_Init+0x134>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80034f4:	019b      	lsls	r3, r3, #6
 80034f6:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034f8:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034fa:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034fc:	469a      	mov	sl, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034fe:	2382      	movs	r3, #130	; 0x82
 8003500:	6866      	ldr	r6, [r4, #4]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4033      	ands	r3, r6
 8003506:	2684      	movs	r6, #132	; 0x84
 8003508:	68a7      	ldr	r7, [r4, #8]
 800350a:	0236      	lsls	r6, r6, #8
 800350c:	403e      	ands	r6, r7
 800350e:	4333      	orrs	r3, r6
 8003510:	2602      	movs	r6, #2
 8003512:	6927      	ldr	r7, [r4, #16]
 8003514:	69a1      	ldr	r1, [r4, #24]
 8003516:	403e      	ands	r6, r7
 8003518:	4333      	orrs	r3, r6
 800351a:	2601      	movs	r6, #1
 800351c:	6967      	ldr	r7, [r4, #20]
 800351e:	46b1      	mov	r9, r6
 8003520:	4037      	ands	r7, r6
 8003522:	433b      	orrs	r3, r7
 8003524:	2780      	movs	r7, #128	; 0x80
 8003526:	00bf      	lsls	r7, r7, #2
 8003528:	400f      	ands	r7, r1
 800352a:	433b      	orrs	r3, r7
 800352c:	2738      	movs	r7, #56	; 0x38
 800352e:	69e6      	ldr	r6, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003530:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003532:	4037      	ands	r7, r6
 8003534:	2680      	movs	r6, #128	; 0x80
 8003536:	433b      	orrs	r3, r7
 8003538:	0037      	movs	r7, r6
 800353a:	6a26      	ldr	r6, [r4, #32]
 800353c:	4037      	ands	r7, r6
 800353e:	4666      	mov	r6, ip
 8003540:	433b      	orrs	r3, r7
 8003542:	4333      	orrs	r3, r6
 8003544:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003546:	2308      	movs	r3, #8
 8003548:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800354a:	4657      	mov	r7, sl
 800354c:	4033      	ands	r3, r6
 800354e:	26f0      	movs	r6, #240	; 0xf0
 8003550:	0136      	lsls	r6, r6, #4
 8003552:	4030      	ands	r0, r6
 8003554:	4318      	orrs	r0, r3
 8003556:	2304      	movs	r3, #4
 8003558:	4019      	ands	r1, r3
 800355a:	4308      	orrs	r0, r1
 800355c:	2110      	movs	r1, #16
 800355e:	400d      	ands	r5, r1
 8003560:	4305      	orrs	r5, r0
 8003562:	432f      	orrs	r7, r5
 8003564:	6057      	str	r7, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003566:	69d3      	ldr	r3, [r2, #28]
 8003568:	491c      	ldr	r1, [pc, #112]	; (80035dc <HAL_SPI_Init+0x13c>)
  return HAL_OK;
 800356a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800356c:	400b      	ands	r3, r1
 800356e:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003570:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003572:	464a      	mov	r2, r9
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003574:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003576:	335d      	adds	r3, #93	; 0x5d
 8003578:	54e2      	strb	r2, [r4, r3]
}
 800357a:	bce0      	pop	{r5, r6, r7}
 800357c:	46ba      	mov	sl, r7
 800357e:	46b1      	mov	r9, r6
 8003580:	46a8      	mov	r8, r5
 8003582:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003584:	2382      	movs	r3, #130	; 0x82
 8003586:	6842      	ldr	r2, [r0, #4]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	429a      	cmp	r2, r3
 800358c:	d097      	beq.n	80034be <HAL_SPI_Init+0x1e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800358e:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003590:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003592:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003594:	335d      	adds	r3, #93	; 0x5d
 8003596:	5ce3      	ldrb	r3, [r4, r3]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d196      	bne.n	80034cc <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 800359e:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 80035a0:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80035a2:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 80035a4:	f7fd fd4a 	bl	800103c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80035aa:	e78f      	b.n	80034cc <HAL_SPI_Init+0x2c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035ac:	4298      	cmp	r0, r3
 80035ae:	d006      	beq.n	80035be <HAL_SPI_Init+0x11e>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	015b      	lsls	r3, r3, #5
 80035b4:	469a      	mov	sl, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	469c      	mov	ip, r3
 80035ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80035bc:	e79f      	b.n	80034fe <HAL_SPI_Init+0x5e>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80035c2:	019b      	lsls	r3, r3, #6
 80035c4:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035ca:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035cc:	469a      	mov	sl, r3
 80035ce:	e796      	b.n	80034fe <HAL_SPI_Init+0x5e>
    return HAL_ERROR;
 80035d0:	2001      	movs	r0, #1
 80035d2:	e7d2      	b.n	800357a <HAL_SPI_Init+0xda>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035d4:	2300      	movs	r3, #0
 80035d6:	469a      	mov	sl, r3
 80035d8:	e7ed      	b.n	80035b6 <HAL_SPI_Init+0x116>
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	fffff7ff 	.word	0xfffff7ff

080035e0 <HAL_SPI_TransmitReceive>:
{
 80035e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e2:	46ce      	mov	lr, r9
 80035e4:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80035e6:	235c      	movs	r3, #92	; 0x5c
{
 80035e8:	b500      	push	{lr}
 80035ea:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80035ec:	5cc2      	ldrb	r2, [r0, r3]
{
 80035ee:	0004      	movs	r4, r0
 80035f0:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 80035f2:	2a01      	cmp	r2, #1
 80035f4:	d100      	bne.n	80035f8 <HAL_SPI_TransmitReceive+0x18>
 80035f6:	e099      	b.n	800372c <HAL_SPI_TransmitReceive+0x14c>
 80035f8:	2201      	movs	r2, #1
 80035fa:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80035fc:	f7fd ff56 	bl	80014ac <HAL_GetTick>
  tmp_state           = hspi->State;
 8003600:	235d      	movs	r3, #93	; 0x5d
 8003602:	5ce3      	ldrb	r3, [r4, r3]
  tickstart = HAL_GetTick();
 8003604:	0007      	movs	r7, r0
  tmp_mode            = hspi->Init.Mode;
 8003606:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8003608:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800360a:	2b01      	cmp	r3, #1
 800360c:	d00f      	beq.n	800362e <HAL_SPI_TransmitReceive+0x4e>
 800360e:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8003610:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	429a      	cmp	r2, r3
 8003616:	d005      	beq.n	8003624 <HAL_SPI_TransmitReceive+0x44>
  __HAL_UNLOCK(hspi);
 8003618:	235c      	movs	r3, #92	; 0x5c
 800361a:	2200      	movs	r2, #0
 800361c:	54e2      	strb	r2, [r4, r3]
}
 800361e:	bc80      	pop	{r7}
 8003620:	46b9      	mov	r9, r7
 8003622:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003624:	68a3      	ldr	r3, [r4, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f6      	bne.n	8003618 <HAL_SPI_TransmitReceive+0x38>
 800362a:	2904      	cmp	r1, #4
 800362c:	d1f4      	bne.n	8003618 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800362e:	2d00      	cmp	r5, #0
 8003630:	d100      	bne.n	8003634 <HAL_SPI_TransmitReceive+0x54>
 8003632:	e079      	b.n	8003728 <HAL_SPI_TransmitReceive+0x148>
 8003634:	464b      	mov	r3, r9
 8003636:	2b00      	cmp	r3, #0
 8003638:	d076      	beq.n	8003728 <HAL_SPI_TransmitReceive+0x148>
 800363a:	2e00      	cmp	r6, #0
 800363c:	d074      	beq.n	8003728 <HAL_SPI_TransmitReceive+0x148>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800363e:	235d      	movs	r3, #93	; 0x5d
 8003640:	5ce1      	ldrb	r1, [r4, r3]
 8003642:	2904      	cmp	r1, #4
 8003644:	d001      	beq.n	800364a <HAL_SPI_TransmitReceive+0x6a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003646:	2105      	movs	r1, #5
 8003648:	54e1      	strb	r1, [r4, r3]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800364a:	4649      	mov	r1, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800364c:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800364e:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003650:	2146      	movs	r1, #70	; 0x46
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003652:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8003654:	5266      	strh	r6, [r4, r1]
  hspi->RxXferSize  = Size;
 8003656:	3902      	subs	r1, #2
 8003658:	5266      	strh	r6, [r4, r1]
  hspi->RxISR       = NULL;
 800365a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800365c:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800365e:	23e0      	movs	r3, #224	; 0xe0
 8003660:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003662:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003664:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003666:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4299      	cmp	r1, r3
 800366c:	d960      	bls.n	8003730 <HAL_SPI_TransmitReceive+0x150>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	4880      	ldr	r0, [pc, #512]	; (8003874 <HAL_SPI_TransmitReceive+0x294>)
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	4001      	ands	r1, r0
 8003676:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003678:	2140      	movs	r1, #64	; 0x40
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	4201      	tst	r1, r0
 800367e:	d102      	bne.n	8003686 <HAL_SPI_TransmitReceive+0xa6>
    __HAL_SPI_ENABLE(hspi);
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	4301      	orrs	r1, r0
 8003684:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003686:	2a00      	cmp	r2, #0
 8003688:	d000      	beq.n	800368c <HAL_SPI_TransmitReceive+0xac>
 800368a:	e0b1      	b.n	80037f0 <HAL_SPI_TransmitReceive+0x210>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800368c:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800368e:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003690:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8003692:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003694:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003696:	3b01      	subs	r3, #1
 8003698:	b29b      	uxth	r3, r3
 800369a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800369c:	9b06      	ldr	r3, [sp, #24]
 800369e:	3301      	adds	r3, #1
 80036a0:	d000      	beq.n	80036a4 <HAL_SPI_TransmitReceive+0xc4>
 80036a2:	e0ad      	b.n	8003800 <HAL_SPI_TransmitReceive+0x220>
{
 80036a4:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036a6:	2646      	movs	r6, #70	; 0x46
{
 80036a8:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036aa:	2502      	movs	r5, #2
 80036ac:	e029      	b.n	8003702 <HAL_SPI_TransmitReceive+0x122>
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	4215      	tst	r5, r2
 80036b4:	d010      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0xf8>
 80036b6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80036b8:	2a00      	cmp	r2, #0
 80036ba:	d00d      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0xf8>
 80036bc:	464a      	mov	r2, r9
 80036be:	2a01      	cmp	r2, #1
 80036c0:	d10a      	bne.n	80036d8 <HAL_SPI_TransmitReceive+0xf8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80036c4:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036c6:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c8:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ca:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80036cc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80036ce:	3a01      	subs	r2, #1
 80036d0:	b292      	uxth	r2, r2
 80036d2:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 80036d4:	2200      	movs	r2, #0
 80036d6:	4691      	mov	r9, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036d8:	2201      	movs	r2, #1
 80036da:	0010      	movs	r0, r2
 80036dc:	6899      	ldr	r1, [r3, #8]
 80036de:	4008      	ands	r0, r1
 80036e0:	420a      	tst	r2, r1
 80036e2:	d00c      	beq.n	80036fe <HAL_SPI_TransmitReceive+0x11e>
 80036e4:	5ba2      	ldrh	r2, [r4, r6]
 80036e6:	2a00      	cmp	r2, #0
 80036e8:	d009      	beq.n	80036fe <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 80036ea:	4681      	mov	r9, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036f2:	3302      	adds	r3, #2
 80036f4:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80036f6:	5ba3      	ldrh	r3, [r4, r6]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	53a3      	strh	r3, [r4, r6]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036fe:	f7fd fed5 	bl	80014ac <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003702:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1d2      	bne.n	80036ae <HAL_SPI_TransmitReceive+0xce>
 8003708:	5ba3      	ldrh	r3, [r4, r6]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1cf      	bne.n	80036ae <HAL_SPI_TransmitReceive+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800370e:	003a      	movs	r2, r7
 8003710:	0020      	movs	r0, r4
 8003712:	9906      	ldr	r1, [sp, #24]
 8003714:	f7ff fe1c 	bl	8003350 <SPI_EndRxTxTransaction>
 8003718:	2800      	cmp	r0, #0
 800371a:	d002      	beq.n	8003722 <HAL_SPI_TransmitReceive+0x142>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800371c:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 800371e:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003720:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003722:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003724:	2b00      	cmp	r3, #0
 8003726:	d067      	beq.n	80037f8 <HAL_SPI_TransmitReceive+0x218>
    errorcode = HAL_ERROR;
 8003728:	2001      	movs	r0, #1
 800372a:	e775      	b.n	8003618 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 800372c:	2002      	movs	r0, #2
 800372e:	e776      	b.n	800361e <HAL_SPI_TransmitReceive+0x3e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003730:	2180      	movs	r1, #128	; 0x80
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	0149      	lsls	r1, r1, #5
 8003736:	6858      	ldr	r0, [r3, #4]
 8003738:	4301      	orrs	r1, r0
 800373a:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800373c:	2140      	movs	r1, #64	; 0x40
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	4201      	tst	r1, r0
 8003742:	d102      	bne.n	800374a <HAL_SPI_TransmitReceive+0x16a>
    __HAL_SPI_ENABLE(hspi);
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	4301      	orrs	r1, r0
 8003748:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800374a:	2a00      	cmp	r2, #0
 800374c:	d14d      	bne.n	80037ea <HAL_SPI_TransmitReceive+0x20a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800374e:	782a      	ldrb	r2, [r5, #0]
 8003750:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003752:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003754:	3301      	adds	r3, #1
 8003756:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003758:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800375a:	3b01      	subs	r3, #1
 800375c:	b29b      	uxth	r3, r3
 800375e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003760:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003762:	2646      	movs	r6, #70	; 0x46
        txallowed = 1U;
 8003764:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003766:	2502      	movs	r5, #2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003768:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800376a:	2b00      	cmp	r3, #0
 800376c:	d102      	bne.n	8003774 <HAL_SPI_TransmitReceive+0x194>
 800376e:	5ba3      	ldrh	r3, [r4, r6]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0cc      	beq.n	800370e <HAL_SPI_TransmitReceive+0x12e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	4215      	tst	r5, r2
 800377a:	d012      	beq.n	80037a2 <HAL_SPI_TransmitReceive+0x1c2>
 800377c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800377e:	2a00      	cmp	r2, #0
 8003780:	d00f      	beq.n	80037a2 <HAL_SPI_TransmitReceive+0x1c2>
 8003782:	464a      	mov	r2, r9
 8003784:	2a01      	cmp	r2, #1
 8003786:	d10c      	bne.n	80037a2 <HAL_SPI_TransmitReceive+0x1c2>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003788:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800378a:	7812      	ldrb	r2, [r2, #0]
 800378c:	731a      	strb	r2, [r3, #12]
        txallowed = 0U;
 800378e:	2200      	movs	r2, #0
 8003790:	4691      	mov	r9, r2
        hspi->pTxBuffPtr++;
 8003792:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003794:	3301      	adds	r3, #1
 8003796:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003798:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800379a:	3b01      	subs	r3, #1
 800379c:	b29b      	uxth	r3, r3
 800379e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	2101      	movs	r1, #1
 80037a4:	0008      	movs	r0, r1
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	4010      	ands	r0, r2
 80037aa:	4211      	tst	r1, r2
 80037ac:	d00d      	beq.n	80037ca <HAL_SPI_TransmitReceive+0x1ea>
 80037ae:	5ba2      	ldrh	r2, [r4, r6]
 80037b0:	2a00      	cmp	r2, #0
 80037b2:	d00a      	beq.n	80037ca <HAL_SPI_TransmitReceive+0x1ea>
        txallowed = 1U;
 80037b4:	4681      	mov	r9, r0
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037b6:	7b1b      	ldrb	r3, [r3, #12]
 80037b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80037ba:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 80037bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037be:	3301      	adds	r3, #1
 80037c0:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80037c2:	5ba3      	ldrh	r3, [r4, r6]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	53a3      	strh	r3, [r4, r6]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037ca:	f7fd fe6f 	bl	80014ac <HAL_GetTick>
 80037ce:	9b06      	ldr	r3, [sp, #24]
 80037d0:	1bc0      	subs	r0, r0, r7
 80037d2:	4298      	cmp	r0, r3
 80037d4:	d306      	bcc.n	80037e4 <HAL_SPI_TransmitReceive+0x204>
 80037d6:	3301      	adds	r3, #1
 80037d8:	d0c6      	beq.n	8003768 <HAL_SPI_TransmitReceive+0x188>
        hspi->State = HAL_SPI_STATE_READY;
 80037da:	235d      	movs	r3, #93	; 0x5d
 80037dc:	2201      	movs	r2, #1
        errorcode = HAL_TIMEOUT;
 80037de:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 80037e0:	54e2      	strb	r2, [r4, r3]
        goto error;
 80037e2:	e719      	b.n	8003618 <HAL_SPI_TransmitReceive+0x38>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1bf      	bne.n	8003768 <HAL_SPI_TransmitReceive+0x188>
 80037e8:	e7f7      	b.n	80037da <HAL_SPI_TransmitReceive+0x1fa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ea:	2e01      	cmp	r6, #1
 80037ec:	d1b8      	bne.n	8003760 <HAL_SPI_TransmitReceive+0x180>
 80037ee:	e7ae      	b.n	800374e <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037f0:	2e01      	cmp	r6, #1
 80037f2:	d000      	beq.n	80037f6 <HAL_SPI_TransmitReceive+0x216>
 80037f4:	e752      	b.n	800369c <HAL_SPI_TransmitReceive+0xbc>
 80037f6:	e749      	b.n	800368c <HAL_SPI_TransmitReceive+0xac>
    hspi->State = HAL_SPI_STATE_READY;
 80037f8:	2201      	movs	r2, #1
 80037fa:	335d      	adds	r3, #93	; 0x5d
 80037fc:	54e2      	strb	r2, [r4, r3]
 80037fe:	e70b      	b.n	8003618 <HAL_SPI_TransmitReceive+0x38>
        txallowed = 1U;
 8003800:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003802:	2646      	movs	r6, #70	; 0x46
        txallowed = 1U;
 8003804:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003806:	2502      	movs	r5, #2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003808:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800380a:	2b00      	cmp	r3, #0
 800380c:	d103      	bne.n	8003816 <HAL_SPI_TransmitReceive+0x236>
 800380e:	5ba3      	ldrh	r3, [r4, r6]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d100      	bne.n	8003816 <HAL_SPI_TransmitReceive+0x236>
 8003814:	e77b      	b.n	800370e <HAL_SPI_TransmitReceive+0x12e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	4215      	tst	r5, r2
 800381c:	d010      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x260>
 800381e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003820:	2a00      	cmp	r2, #0
 8003822:	d00d      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x260>
 8003824:	464a      	mov	r2, r9
 8003826:	2a01      	cmp	r2, #1
 8003828:	d10a      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x260>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800382a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800382c:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800382e:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003830:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003832:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003834:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003836:	3a01      	subs	r2, #1
 8003838:	b292      	uxth	r2, r2
 800383a:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 800383c:	2200      	movs	r2, #0
 800383e:	4691      	mov	r9, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003840:	2101      	movs	r1, #1
 8003842:	0008      	movs	r0, r1
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	4010      	ands	r0, r2
 8003848:	4211      	tst	r1, r2
 800384a:	d00c      	beq.n	8003866 <HAL_SPI_TransmitReceive+0x286>
 800384c:	5ba2      	ldrh	r2, [r4, r6]
 800384e:	2a00      	cmp	r2, #0
 8003850:	d009      	beq.n	8003866 <HAL_SPI_TransmitReceive+0x286>
        txallowed = 1U;
 8003852:	4681      	mov	r9, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003858:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800385a:	3302      	adds	r3, #2
 800385c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800385e:	5ba3      	ldrh	r3, [r4, r6]
 8003860:	3b01      	subs	r3, #1
 8003862:	b29b      	uxth	r3, r3
 8003864:	53a3      	strh	r3, [r4, r6]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003866:	f7fd fe21 	bl	80014ac <HAL_GetTick>
 800386a:	9b06      	ldr	r3, [sp, #24]
 800386c:	1bc0      	subs	r0, r0, r7
 800386e:	4298      	cmp	r0, r3
 8003870:	d3ca      	bcc.n	8003808 <HAL_SPI_TransmitReceive+0x228>
 8003872:	e7b2      	b.n	80037da <HAL_SPI_TransmitReceive+0x1fa>
 8003874:	ffffefff 	.word	0xffffefff

08003878 <HAL_SPI_ErrorCallback>:
 8003878:	4770      	bx	lr
 800387a:	46c0      	nop			; (mov r8, r8)

0800387c <HAL_SPI_IRQHandler>:
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800387c:	2101      	movs	r1, #1
{
 800387e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003880:	000e      	movs	r6, r1
  uint32_t itsource = hspi->Instance->CR2;
 8003882:	6802      	ldr	r2, [r0, #0]
{
 8003884:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8003886:	6855      	ldr	r5, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003888:	6893      	ldr	r3, [r2, #8]
{
 800388a:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800388c:	0998      	lsrs	r0, r3, #6
 800388e:	4006      	ands	r6, r0
 8003890:	4201      	tst	r1, r0
 8003892:	d105      	bne.n	80038a0 <HAL_SPI_IRQHandler+0x24>
 8003894:	4219      	tst	r1, r3
 8003896:	d003      	beq.n	80038a0 <HAL_SPI_IRQHandler+0x24>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003898:	09a8      	lsrs	r0, r5, #6
 800389a:	4201      	tst	r1, r0
 800389c:	d000      	beq.n	80038a0 <HAL_SPI_IRQHandler+0x24>
 800389e:	e088      	b.n	80039b2 <HAL_SPI_IRQHandler+0x136>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80038a0:	2101      	movs	r1, #1
 80038a2:	0798      	lsls	r0, r3, #30
 80038a4:	d503      	bpl.n	80038ae <HAL_SPI_IRQHandler+0x32>
 80038a6:	09e8      	lsrs	r0, r5, #7
 80038a8:	4201      	tst	r1, r0
 80038aa:	d000      	beq.n	80038ae <HAL_SPI_IRQHandler+0x32>
 80038ac:	e07d      	b.n	80039aa <HAL_SPI_IRQHandler+0x12e>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038ae:	2001      	movs	r0, #1
 80038b0:	0007      	movs	r7, r0
 80038b2:	0959      	lsrs	r1, r3, #5
 80038b4:	400f      	ands	r7, r1
 80038b6:	4208      	tst	r0, r1
 80038b8:	d051      	beq.n	800395e <HAL_SPI_IRQHandler+0xe2>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80038ba:	0969      	lsrs	r1, r5, #5
 80038bc:	4208      	tst	r0, r1
 80038be:	d04c      	beq.n	800395a <HAL_SPI_IRQHandler+0xde>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038c0:	2e00      	cmp	r6, #0
 80038c2:	d00f      	beq.n	80038e4 <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80038c4:	215d      	movs	r1, #93	; 0x5d
 80038c6:	5c61      	ldrb	r1, [r4, r1]
 80038c8:	2903      	cmp	r1, #3
 80038ca:	d100      	bne.n	80038ce <HAL_SPI_IRQHandler+0x52>
 80038cc:	e075      	b.n	80039ba <HAL_SPI_IRQHandler+0x13e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80038ce:	2004      	movs	r0, #4
 80038d0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80038d2:	4301      	orrs	r1, r0
 80038d4:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038d6:	2100      	movs	r1, #0
 80038d8:	9100      	str	r1, [sp, #0]
 80038da:	68d1      	ldr	r1, [r2, #12]
 80038dc:	9100      	str	r1, [sp, #0]
 80038de:	6891      	ldr	r1, [r2, #8]
 80038e0:	9100      	str	r1, [sp, #0]
 80038e2:	9900      	ldr	r1, [sp, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80038e4:	2001      	movs	r0, #1
 80038e6:	6e21      	ldr	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80038e8:	2640      	movs	r6, #64	; 0x40
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80038ea:	4301      	orrs	r1, r0
 80038ec:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80038ee:	2100      	movs	r1, #0
 80038f0:	9102      	str	r1, [sp, #8]
 80038f2:	6891      	ldr	r1, [r2, #8]
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80038f4:	0a1b      	lsrs	r3, r3, #8
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80038f6:	9102      	str	r1, [sp, #8]
 80038f8:	6811      	ldr	r1, [r2, #0]
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80038fa:	4018      	ands	r0, r3
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80038fc:	43b1      	bics	r1, r6
 80038fe:	6011      	str	r1, [r2, #0]
 8003900:	9902      	ldr	r1, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003902:	2800      	cmp	r0, #0
 8003904:	d147      	bne.n	8003996 <HAL_SPI_IRQHandler+0x11a>
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003906:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003908:	2b00      	cmp	r3, #0
 800390a:	d026      	beq.n	800395a <HAL_SPI_IRQHandler+0xde>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800390c:	21e0      	movs	r1, #224	; 0xe0
 800390e:	6853      	ldr	r3, [r2, #4]
 8003910:	438b      	bics	r3, r1
 8003912:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003914:	235d      	movs	r3, #93	; 0x5d
 8003916:	39df      	subs	r1, #223	; 0xdf
 8003918:	54e1      	strb	r1, [r4, r3]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800391a:	3102      	adds	r1, #2
 800391c:	4229      	tst	r1, r5
 800391e:	d054      	beq.n	80039ca <HAL_SPI_IRQHandler+0x14e>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003920:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8003922:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003924:	438b      	bics	r3, r1
 8003926:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8003928:	2800      	cmp	r0, #0
 800392a:	d009      	beq.n	8003940 <HAL_SPI_IRQHandler+0xc4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800392c:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <HAL_SPI_IRQHandler+0x158>)
 800392e:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003930:	f7fe f9e4 	bl	8001cfc <HAL_DMA_Abort_IT>
 8003934:	2800      	cmp	r0, #0
 8003936:	d003      	beq.n	8003940 <HAL_SPI_IRQHandler+0xc4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003938:	2240      	movs	r2, #64	; 0x40
 800393a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800393c:	4313      	orrs	r3, r2
 800393e:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003940:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003942:	2800      	cmp	r0, #0
 8003944:	d009      	beq.n	800395a <HAL_SPI_IRQHandler+0xde>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003946:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <HAL_SPI_IRQHandler+0x158>)
 8003948:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800394a:	f7fe f9d7 	bl	8001cfc <HAL_DMA_Abort_IT>
 800394e:	2800      	cmp	r0, #0
 8003950:	d003      	beq.n	800395a <HAL_SPI_IRQHandler+0xde>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003952:	2240      	movs	r2, #64	; 0x40
 8003954:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003956:	4313      	orrs	r3, r2
 8003958:	6623      	str	r3, [r4, #96]	; 0x60
}
 800395a:	b005      	add	sp, #20
 800395c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800395e:	2e00      	cmp	r6, #0
 8003960:	d013      	beq.n	800398a <HAL_SPI_IRQHandler+0x10e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003962:	0969      	lsrs	r1, r5, #5
 8003964:	4208      	tst	r0, r1
 8003966:	d0f8      	beq.n	800395a <HAL_SPI_IRQHandler+0xde>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003968:	215d      	movs	r1, #93	; 0x5d
 800396a:	5c61      	ldrb	r1, [r4, r1]
 800396c:	2903      	cmp	r1, #3
 800396e:	d024      	beq.n	80039ba <HAL_SPI_IRQHandler+0x13e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003970:	2604      	movs	r6, #4
 8003972:	6e21      	ldr	r1, [r4, #96]	; 0x60
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003974:	0a1b      	lsrs	r3, r3, #8
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003976:	4331      	orrs	r1, r6
 8003978:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800397a:	9700      	str	r7, [sp, #0]
 800397c:	68d1      	ldr	r1, [r2, #12]
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800397e:	4018      	ands	r0, r3
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003980:	9100      	str	r1, [sp, #0]
 8003982:	6891      	ldr	r1, [r2, #8]
 8003984:	9100      	str	r1, [sp, #0]
 8003986:	9900      	ldr	r1, [sp, #0]
 8003988:	e7bb      	b.n	8003902 <HAL_SPI_IRQHandler+0x86>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800398a:	0a1b      	lsrs	r3, r3, #8
 800398c:	4218      	tst	r0, r3
 800398e:	d0e4      	beq.n	800395a <HAL_SPI_IRQHandler+0xde>
 8003990:	096b      	lsrs	r3, r5, #5
 8003992:	4218      	tst	r0, r3
 8003994:	d0e1      	beq.n	800395a <HAL_SPI_IRQHandler+0xde>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003996:	2108      	movs	r1, #8
 8003998:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800399a:	430b      	orrs	r3, r1
 800399c:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800399e:	2300      	movs	r3, #0
 80039a0:	9303      	str	r3, [sp, #12]
 80039a2:	6893      	ldr	r3, [r2, #8]
 80039a4:	9303      	str	r3, [sp, #12]
 80039a6:	9b03      	ldr	r3, [sp, #12]
 80039a8:	e7ad      	b.n	8003906 <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 80039aa:	0020      	movs	r0, r4
 80039ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80039ae:	4798      	blx	r3
    return;
 80039b0:	e7d3      	b.n	800395a <HAL_SPI_IRQHandler+0xde>
    hspi->RxISR(hspi);
 80039b2:	0020      	movs	r0, r4
 80039b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80039b6:	4798      	blx	r3
    return;
 80039b8:	e7cf      	b.n	800395a <HAL_SPI_IRQHandler+0xde>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039ba:	2300      	movs	r3, #0
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	68d3      	ldr	r3, [r2, #12]
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	6893      	ldr	r3, [r2, #8]
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	9b01      	ldr	r3, [sp, #4]
        return;
 80039c8:	e7c7      	b.n	800395a <HAL_SPI_IRQHandler+0xde>
        HAL_SPI_ErrorCallback(hspi);
 80039ca:	0020      	movs	r0, r4
 80039cc:	f7ff ff54 	bl	8003878 <HAL_SPI_ErrorCallback>
 80039d0:	e7c3      	b.n	800395a <HAL_SPI_IRQHandler+0xde>
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	080039d9 	.word	0x080039d9

080039d8 <SPI_DMAAbortOnError>:
  hspi->RxXferCount = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	2246      	movs	r2, #70	; 0x46
{
 80039dc:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039de:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 80039e0:	5283      	strh	r3, [r0, r2]
  hspi->TxXferCount = 0U;
 80039e2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80039e4:	f7ff ff48 	bl	8003878 <HAL_SPI_ErrorCallback>
}
 80039e8:	bd10      	pop	{r4, pc}
 80039ea:	46c0      	nop			; (mov r8, r8)

080039ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039ec:	b510      	push	{r4, lr}
 80039ee:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f0:	d066      	beq.n	8003ac0 <HAL_TIM_Base_Init+0xd4>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f2:	233d      	movs	r3, #61	; 0x3d
 80039f4:	5cc3      	ldrb	r3, [r0, r3]
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d041      	beq.n	8003a80 <HAL_TIM_Base_Init+0x94>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	233d      	movs	r3, #61	; 0x3d
 80039fe:	2202      	movs	r2, #2
 8003a00:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a02:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a04:	492f      	ldr	r1, [pc, #188]	; (8003ac4 <HAL_TIM_Base_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8003a06:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a08:	428a      	cmp	r2, r1
 8003a0a:	d045      	beq.n	8003a98 <HAL_TIM_Base_Init+0xac>
 8003a0c:	2180      	movs	r1, #128	; 0x80
 8003a0e:	05c9      	lsls	r1, r1, #23
 8003a10:	428a      	cmp	r2, r1
 8003a12:	d02c      	beq.n	8003a6e <HAL_TIM_Base_Init+0x82>
 8003a14:	492c      	ldr	r1, [pc, #176]	; (8003ac8 <HAL_TIM_Base_Init+0xdc>)
 8003a16:	428a      	cmp	r2, r1
 8003a18:	d029      	beq.n	8003a6e <HAL_TIM_Base_Init+0x82>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a1a:	492c      	ldr	r1, [pc, #176]	; (8003acc <HAL_TIM_Base_Init+0xe0>)
 8003a1c:	428a      	cmp	r2, r1
 8003a1e:	d02a      	beq.n	8003a76 <HAL_TIM_Base_Init+0x8a>
 8003a20:	492b      	ldr	r1, [pc, #172]	; (8003ad0 <HAL_TIM_Base_Init+0xe4>)
 8003a22:	428a      	cmp	r2, r1
 8003a24:	d03c      	beq.n	8003aa0 <HAL_TIM_Base_Init+0xb4>
 8003a26:	492b      	ldr	r1, [pc, #172]	; (8003ad4 <HAL_TIM_Base_Init+0xe8>)
 8003a28:	428a      	cmp	r2, r1
 8003a2a:	d039      	beq.n	8003aa0 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a2c:	2180      	movs	r1, #128	; 0x80
 8003a2e:	438b      	bics	r3, r1
 8003a30:	69a1      	ldr	r1, [r4, #24]
 8003a32:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8003a34:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a36:	68e3      	ldr	r3, [r4, #12]
 8003a38:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a3a:	6863      	ldr	r3, [r4, #4]
 8003a3c:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a42:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8003a44:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a46:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	3a08      	subs	r2, #8
 8003a4a:	54a3      	strb	r3, [r4, r2]
 8003a4c:	3201      	adds	r2, #1
 8003a4e:	54a3      	strb	r3, [r4, r2]
 8003a50:	3201      	adds	r2, #1
 8003a52:	54a3      	strb	r3, [r4, r2]
 8003a54:	3201      	adds	r2, #1
 8003a56:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a58:	3201      	adds	r2, #1
 8003a5a:	54a3      	strb	r3, [r4, r2]
 8003a5c:	3201      	adds	r2, #1
 8003a5e:	54a3      	strb	r3, [r4, r2]
 8003a60:	3201      	adds	r2, #1
 8003a62:	54a3      	strb	r3, [r4, r2]
 8003a64:	3201      	adds	r2, #1
 8003a66:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003a68:	3a08      	subs	r2, #8
 8003a6a:	54a3      	strb	r3, [r4, r2]
}
 8003a6c:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a6e:	2170      	movs	r1, #112	; 0x70
 8003a70:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8003a72:	68a1      	ldr	r1, [r4, #8]
 8003a74:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a76:	4918      	ldr	r1, [pc, #96]	; (8003ad8 <HAL_TIM_Base_Init+0xec>)
 8003a78:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a7a:	6921      	ldr	r1, [r4, #16]
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	e7d5      	b.n	8003a2c <HAL_TIM_Base_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 8003a80:	333c      	adds	r3, #60	; 0x3c
 8003a82:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8003a84:	f7fd fb14 	bl	80010b0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	233d      	movs	r3, #61	; 0x3d
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a8e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a90:	490c      	ldr	r1, [pc, #48]	; (8003ac4 <HAL_TIM_Base_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8003a92:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a94:	428a      	cmp	r2, r1
 8003a96:	d1b9      	bne.n	8003a0c <HAL_TIM_Base_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a98:	2170      	movs	r1, #112	; 0x70
 8003a9a:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8003a9c:	68a1      	ldr	r1, [r4, #8]
 8003a9e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aa0:	490d      	ldr	r1, [pc, #52]	; (8003ad8 <HAL_TIM_Base_Init+0xec>)
 8003aa2:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aa4:	6921      	ldr	r1, [r4, #16]
 8003aa6:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa8:	2180      	movs	r1, #128	; 0x80
 8003aaa:	438b      	bics	r3, r1
 8003aac:	69a1      	ldr	r1, [r4, #24]
 8003aae:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003ab0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab2:	68e3      	ldr	r3, [r4, #12]
 8003ab4:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ab6:	6863      	ldr	r3, [r4, #4]
 8003ab8:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003aba:	6963      	ldr	r3, [r4, #20]
 8003abc:	6313      	str	r3, [r2, #48]	; 0x30
 8003abe:	e7be      	b.n	8003a3e <HAL_TIM_Base_Init+0x52>
    return HAL_ERROR;
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	e7d3      	b.n	8003a6c <HAL_TIM_Base_Init+0x80>
 8003ac4:	40012c00 	.word	0x40012c00
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40002000 	.word	0x40002000
 8003ad0:	40014400 	.word	0x40014400
 8003ad4:	40014800 	.word	0x40014800
 8003ad8:	fffffcff 	.word	0xfffffcff

08003adc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003adc:	223d      	movs	r2, #61	; 0x3d
 8003ade:	5c81      	ldrb	r1, [r0, r2]
{
 8003ae0:	0003      	movs	r3, r0
    return HAL_ERROR;
 8003ae2:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8003ae4:	2901      	cmp	r1, #1
 8003ae6:	d113      	bne.n	8003b10 <HAL_TIM_Base_Start_IT+0x34>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	3101      	adds	r1, #1
 8003aea:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	4302      	orrs	r2, r0
 8003af2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af4:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <HAL_TIM_Base_Start_IT+0x50>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00b      	beq.n	8003b12 <HAL_TIM_Base_Start_IT+0x36>
 8003afa:	2280      	movs	r2, #128	; 0x80
 8003afc:	05d2      	lsls	r2, r2, #23
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <HAL_TIM_Base_Start_IT+0x36>
 8003b02:	4a0b      	ldr	r2, [pc, #44]	; (8003b30 <HAL_TIM_Base_Start_IT+0x54>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d004      	beq.n	8003b12 <HAL_TIM_Base_Start_IT+0x36>
    __HAL_TIM_ENABLE(htim);
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4310      	orrs	r0, r2
 8003b0c:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8003b0e:	2000      	movs	r0, #0
}
 8003b10:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b12:	2207      	movs	r2, #7
 8003b14:	6899      	ldr	r1, [r3, #8]
 8003b16:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b18:	2a06      	cmp	r2, #6
 8003b1a:	d005      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x4c>
      __HAL_TIM_ENABLE(htim);
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8003b20:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8003b22:	430a      	orrs	r2, r1
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e7f3      	b.n	8003b10 <HAL_TIM_Base_Start_IT+0x34>
  return HAL_OK;
 8003b28:	2000      	movs	r0, #0
 8003b2a:	e7f1      	b.n	8003b10 <HAL_TIM_Base_Start_IT+0x34>
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	40000400 	.word	0x40000400

08003b34 <HAL_TIM_PWM_MspInit>:
 8003b34:	4770      	bx	lr
 8003b36:	46c0      	nop			; (mov r8, r8)

08003b38 <HAL_TIM_PWM_Init>:
{
 8003b38:	b510      	push	{r4, lr}
 8003b3a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003b3c:	d066      	beq.n	8003c0c <HAL_TIM_PWM_Init+0xd4>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3e:	233d      	movs	r3, #61	; 0x3d
 8003b40:	5cc3      	ldrb	r3, [r0, r3]
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d041      	beq.n	8003bcc <HAL_TIM_PWM_Init+0x94>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	233d      	movs	r3, #61	; 0x3d
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b4e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b50:	492f      	ldr	r1, [pc, #188]	; (8003c10 <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8003b52:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b54:	428a      	cmp	r2, r1
 8003b56:	d045      	beq.n	8003be4 <HAL_TIM_PWM_Init+0xac>
 8003b58:	2180      	movs	r1, #128	; 0x80
 8003b5a:	05c9      	lsls	r1, r1, #23
 8003b5c:	428a      	cmp	r2, r1
 8003b5e:	d02c      	beq.n	8003bba <HAL_TIM_PWM_Init+0x82>
 8003b60:	492c      	ldr	r1, [pc, #176]	; (8003c14 <HAL_TIM_PWM_Init+0xdc>)
 8003b62:	428a      	cmp	r2, r1
 8003b64:	d029      	beq.n	8003bba <HAL_TIM_PWM_Init+0x82>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b66:	492c      	ldr	r1, [pc, #176]	; (8003c18 <HAL_TIM_PWM_Init+0xe0>)
 8003b68:	428a      	cmp	r2, r1
 8003b6a:	d02a      	beq.n	8003bc2 <HAL_TIM_PWM_Init+0x8a>
 8003b6c:	492b      	ldr	r1, [pc, #172]	; (8003c1c <HAL_TIM_PWM_Init+0xe4>)
 8003b6e:	428a      	cmp	r2, r1
 8003b70:	d03c      	beq.n	8003bec <HAL_TIM_PWM_Init+0xb4>
 8003b72:	492b      	ldr	r1, [pc, #172]	; (8003c20 <HAL_TIM_PWM_Init+0xe8>)
 8003b74:	428a      	cmp	r2, r1
 8003b76:	d039      	beq.n	8003bec <HAL_TIM_PWM_Init+0xb4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b78:	2180      	movs	r1, #128	; 0x80
 8003b7a:	438b      	bics	r3, r1
 8003b7c:	69a1      	ldr	r1, [r4, #24]
 8003b7e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003b80:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b82:	68e3      	ldr	r3, [r4, #12]
 8003b84:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b86:	6863      	ldr	r3, [r4, #4]
 8003b88:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b8e:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8003b90:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b92:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	3a08      	subs	r2, #8
 8003b96:	54a3      	strb	r3, [r4, r2]
 8003b98:	3201      	adds	r2, #1
 8003b9a:	54a3      	strb	r3, [r4, r2]
 8003b9c:	3201      	adds	r2, #1
 8003b9e:	54a3      	strb	r3, [r4, r2]
 8003ba0:	3201      	adds	r2, #1
 8003ba2:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba4:	3201      	adds	r2, #1
 8003ba6:	54a3      	strb	r3, [r4, r2]
 8003ba8:	3201      	adds	r2, #1
 8003baa:	54a3      	strb	r3, [r4, r2]
 8003bac:	3201      	adds	r2, #1
 8003bae:	54a3      	strb	r3, [r4, r2]
 8003bb0:	3201      	adds	r2, #1
 8003bb2:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	3a08      	subs	r2, #8
 8003bb6:	54a3      	strb	r3, [r4, r2]
}
 8003bb8:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bba:	2170      	movs	r1, #112	; 0x70
 8003bbc:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8003bbe:	68a1      	ldr	r1, [r4, #8]
 8003bc0:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bc2:	4918      	ldr	r1, [pc, #96]	; (8003c24 <HAL_TIM_PWM_Init+0xec>)
 8003bc4:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bc6:	6921      	ldr	r1, [r4, #16]
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	e7d5      	b.n	8003b78 <HAL_TIM_PWM_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 8003bcc:	333c      	adds	r3, #60	; 0x3c
 8003bce:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8003bd0:	f7ff ffb0 	bl	8003b34 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd4:	233d      	movs	r3, #61	; 0x3d
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bda:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bdc:	490c      	ldr	r1, [pc, #48]	; (8003c10 <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8003bde:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be0:	428a      	cmp	r2, r1
 8003be2:	d1b9      	bne.n	8003b58 <HAL_TIM_PWM_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be4:	2170      	movs	r1, #112	; 0x70
 8003be6:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8003be8:	68a1      	ldr	r1, [r4, #8]
 8003bea:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bec:	490d      	ldr	r1, [pc, #52]	; (8003c24 <HAL_TIM_PWM_Init+0xec>)
 8003bee:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bf0:	6921      	ldr	r1, [r4, #16]
 8003bf2:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bf4:	2180      	movs	r1, #128	; 0x80
 8003bf6:	438b      	bics	r3, r1
 8003bf8:	69a1      	ldr	r1, [r4, #24]
 8003bfa:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003bfc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bfe:	68e3      	ldr	r3, [r4, #12]
 8003c00:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003c02:	6863      	ldr	r3, [r4, #4]
 8003c04:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003c06:	6963      	ldr	r3, [r4, #20]
 8003c08:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0a:	e7be      	b.n	8003b8a <HAL_TIM_PWM_Init+0x52>
    return HAL_ERROR;
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	e7d3      	b.n	8003bb8 <HAL_TIM_PWM_Init+0x80>
 8003c10:	40012c00 	.word	0x40012c00
 8003c14:	40000400 	.word	0x40000400
 8003c18:	40002000 	.word	0x40002000
 8003c1c:	40014400 	.word	0x40014400
 8003c20:	40014800 	.word	0x40014800
 8003c24:	fffffcff 	.word	0xfffffcff

08003c28 <HAL_TIM_PWM_Start>:
 8003c28:	2900      	cmp	r1, #0
 8003c2a:	d126      	bne.n	8003c7a <HAL_TIM_PWM_Start+0x52>
 8003c2c:	233e      	movs	r3, #62	; 0x3e
 8003c2e:	5cc2      	ldrb	r2, [r0, r3]
 8003c30:	2a01      	cmp	r2, #1
 8003c32:	d136      	bne.n	8003ca2 <HAL_TIM_PWM_Start+0x7a>
 8003c34:	2202      	movs	r2, #2
 8003c36:	54c2      	strb	r2, [r0, r3]
 8003c38:	221f      	movs	r2, #31
 8003c3a:	4011      	ands	r1, r2
 8003c3c:	3a1e      	subs	r2, #30
 8003c3e:	408a      	lsls	r2, r1
 8003c40:	6803      	ldr	r3, [r0, #0]
 8003c42:	6a19      	ldr	r1, [r3, #32]
 8003c44:	4391      	bics	r1, r2
 8003c46:	6219      	str	r1, [r3, #32]
 8003c48:	6a19      	ldr	r1, [r3, #32]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	621a      	str	r2, [r3, #32]
 8003c4e:	4a23      	ldr	r2, [pc, #140]	; (8003cdc <HAL_TIM_PWM_Start+0xb4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d028      	beq.n	8003ca6 <HAL_TIM_PWM_Start+0x7e>
 8003c54:	4a22      	ldr	r2, [pc, #136]	; (8003ce0 <HAL_TIM_PWM_Start+0xb8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d031      	beq.n	8003cbe <HAL_TIM_PWM_Start+0x96>
 8003c5a:	4a22      	ldr	r2, [pc, #136]	; (8003ce4 <HAL_TIM_PWM_Start+0xbc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d02e      	beq.n	8003cbe <HAL_TIM_PWM_Start+0x96>
 8003c60:	2280      	movs	r2, #128	; 0x80
 8003c62:	05d2      	lsls	r2, r2, #23
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d023      	beq.n	8003cb0 <HAL_TIM_PWM_Start+0x88>
 8003c68:	4a1f      	ldr	r2, [pc, #124]	; (8003ce8 <HAL_TIM_PWM_Start+0xc0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d020      	beq.n	8003cb0 <HAL_TIM_PWM_Start+0x88>
 8003c6e:	2101      	movs	r1, #1
 8003c70:	2000      	movs	r0, #0
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	4770      	bx	lr
 8003c7a:	2904      	cmp	r1, #4
 8003c7c:	d025      	beq.n	8003cca <HAL_TIM_PWM_Start+0xa2>
 8003c7e:	2908      	cmp	r1, #8
 8003c80:	d00b      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x72>
 8003c82:	2341      	movs	r3, #65	; 0x41
 8003c84:	5cc2      	ldrb	r2, [r0, r3]
 8003c86:	2a01      	cmp	r2, #1
 8003c88:	d10b      	bne.n	8003ca2 <HAL_TIM_PWM_Start+0x7a>
 8003c8a:	2904      	cmp	r1, #4
 8003c8c:	d021      	beq.n	8003cd2 <HAL_TIM_PWM_Start+0xaa>
 8003c8e:	2908      	cmp	r1, #8
 8003c90:	d1d0      	bne.n	8003c34 <HAL_TIM_PWM_Start+0xc>
 8003c92:	2340      	movs	r3, #64	; 0x40
 8003c94:	2202      	movs	r2, #2
 8003c96:	54c2      	strb	r2, [r0, r3]
 8003c98:	e7ce      	b.n	8003c38 <HAL_TIM_PWM_Start+0x10>
 8003c9a:	2340      	movs	r3, #64	; 0x40
 8003c9c:	5cc3      	ldrb	r3, [r0, r3]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d0f7      	beq.n	8003c92 <HAL_TIM_PWM_Start+0x6a>
 8003ca2:	2001      	movs	r0, #1
 8003ca4:	e7e8      	b.n	8003c78 <HAL_TIM_PWM_Start+0x50>
 8003ca6:	2280      	movs	r2, #128	; 0x80
 8003ca8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003caa:	0212      	lsls	r2, r2, #8
 8003cac:	430a      	orrs	r2, r1
 8003cae:	645a      	str	r2, [r3, #68]	; 0x44
 8003cb0:	2207      	movs	r2, #7
 8003cb2:	6899      	ldr	r1, [r3, #8]
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	2a06      	cmp	r2, #6
 8003cb8:	d1d9      	bne.n	8003c6e <HAL_TIM_PWM_Start+0x46>
 8003cba:	2000      	movs	r0, #0
 8003cbc:	e7dc      	b.n	8003c78 <HAL_TIM_PWM_Start+0x50>
 8003cbe:	2280      	movs	r2, #128	; 0x80
 8003cc0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003cc2:	0212      	lsls	r2, r2, #8
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	645a      	str	r2, [r3, #68]	; 0x44
 8003cc8:	e7ca      	b.n	8003c60 <HAL_TIM_PWM_Start+0x38>
 8003cca:	233f      	movs	r3, #63	; 0x3f
 8003ccc:	5cc3      	ldrb	r3, [r0, r3]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d1e7      	bne.n	8003ca2 <HAL_TIM_PWM_Start+0x7a>
 8003cd2:	233f      	movs	r3, #63	; 0x3f
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	54c2      	strb	r2, [r0, r3]
 8003cd8:	e7ae      	b.n	8003c38 <HAL_TIM_PWM_Start+0x10>
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	40012c00 	.word	0x40012c00
 8003ce0:	40014400 	.word	0x40014400
 8003ce4:	40014800 	.word	0x40014800
 8003ce8:	40000400 	.word	0x40000400

08003cec <HAL_TIM_PWM_ConfigChannel>:
{
 8003cec:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003cee:	203c      	movs	r0, #60	; 0x3c
{
 8003cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003cf2:	5c1c      	ldrb	r4, [r3, r0]
 8003cf4:	2c01      	cmp	r4, #1
 8003cf6:	d100      	bne.n	8003cfa <HAL_TIM_PWM_ConfigChannel+0xe>
 8003cf8:	e0df      	b.n	8003eba <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8003cfa:	2401      	movs	r4, #1
 8003cfc:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 8003cfe:	2a08      	cmp	r2, #8
 8003d00:	d100      	bne.n	8003d04 <HAL_TIM_PWM_ConfigChannel+0x18>
 8003d02:	e0ad      	b.n	8003e60 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003d04:	d834      	bhi.n	8003d70 <HAL_TIM_PWM_ConfigChannel+0x84>
 8003d06:	2a00      	cmp	r2, #0
 8003d08:	d100      	bne.n	8003d0c <HAL_TIM_PWM_ConfigChannel+0x20>
 8003d0a:	e07e      	b.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x11e>
 8003d0c:	2a04      	cmp	r2, #4
 8003d0e:	d161      	bne.n	8003dd4 <HAL_TIM_PWM_ConfigChannel+0xe8>
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d10:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d12:	681a      	ldr	r2, [r3, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d14:	4d78      	ldr	r5, [pc, #480]	; (8003ef8 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d16:	6a10      	ldr	r0, [r2, #32]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d18:	4f78      	ldr	r7, [pc, #480]	; (8003efc <HAL_TIM_PWM_ConfigChannel+0x210>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d1a:	43a0      	bics	r0, r4
 8003d1c:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003d1e:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003d20:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8003d22:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d24:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d26:	680d      	ldr	r5, [r1, #0]
 8003d28:	022d      	lsls	r5, r5, #8
 8003d2a:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8003d2c:	2420      	movs	r4, #32
 8003d2e:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d30:	688c      	ldr	r4, [r1, #8]
 8003d32:	0124      	lsls	r4, r4, #4
 8003d34:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d36:	42ba      	cmp	r2, r7
 8003d38:	d057      	beq.n	8003dea <HAL_TIM_PWM_ConfigChannel+0xfe>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d3a:	4f71      	ldr	r7, [pc, #452]	; (8003f00 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003d3c:	42ba      	cmp	r2, r7
 8003d3e:	d05c      	beq.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x10e>
 8003d40:	4f70      	ldr	r7, [pc, #448]	; (8003f04 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8003d42:	42ba      	cmp	r2, r7
 8003d44:	d059      	beq.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x10e>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d46:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003d48:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003d4a:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003d4c:	6390      	str	r0, [r2, #56]	; 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d4e:	2080      	movs	r0, #128	; 0x80

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d50:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d52:	6994      	ldr	r4, [r2, #24]
 8003d54:	0100      	lsls	r0, r0, #4
 8003d56:	4320      	orrs	r0, r4
 8003d58:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d5a:	6990      	ldr	r0, [r2, #24]
 8003d5c:	4c6a      	ldr	r4, [pc, #424]	; (8003f08 <HAL_TIM_PWM_ConfigChannel+0x21c>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d5e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d60:	4020      	ands	r0, r4
 8003d62:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d64:	6990      	ldr	r0, [r2, #24]
 8003d66:	0209      	lsls	r1, r1, #8
 8003d68:	4301      	orrs	r1, r0
 8003d6a:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6c:	2000      	movs	r0, #0
      break;
 8003d6e:	e032      	b.n	8003dd6 <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 8003d70:	2a0c      	cmp	r2, #12
 8003d72:	d12f      	bne.n	8003dd4 <HAL_TIM_PWM_ConfigChannel+0xe8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d74:	681a      	ldr	r2, [r3, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d76:	4c65      	ldr	r4, [pc, #404]	; (8003f0c <HAL_TIM_PWM_ConfigChannel+0x220>)
 8003d78:	6a10      	ldr	r0, [r2, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d7a:	4d5f      	ldr	r5, [pc, #380]	; (8003ef8 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d7c:	4020      	ands	r0, r4
 8003d7e:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003d80:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003d82:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8003d84:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d86:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d88:	680d      	ldr	r5, [r1, #0]
 8003d8a:	022d      	lsls	r5, r5, #8
 8003d8c:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d8e:	4c60      	ldr	r4, [pc, #384]	; (8003f10 <HAL_TIM_PWM_ConfigChannel+0x224>)
 8003d90:	4004      	ands	r4, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d92:	6888      	ldr	r0, [r1, #8]
 8003d94:	0300      	lsls	r0, r0, #12
 8003d96:	4320      	orrs	r0, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d98:	4c58      	ldr	r4, [pc, #352]	; (8003efc <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003d9a:	42a2      	cmp	r2, r4
 8003d9c:	d01f      	beq.n	8003dde <HAL_TIM_PWM_ConfigChannel+0xf2>
 8003d9e:	4c58      	ldr	r4, [pc, #352]	; (8003f00 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003da0:	42a2      	cmp	r2, r4
 8003da2:	d01c      	beq.n	8003dde <HAL_TIM_PWM_ConfigChannel+0xf2>
 8003da4:	4c57      	ldr	r4, [pc, #348]	; (8003f04 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8003da6:	42a2      	cmp	r2, r4
 8003da8:	d019      	beq.n	8003dde <HAL_TIM_PWM_ConfigChannel+0xf2>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003daa:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003dac:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003dae:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003db0:	6414      	str	r4, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db2:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003db4:	2080      	movs	r0, #128	; 0x80
 8003db6:	69d4      	ldr	r4, [r2, #28]
 8003db8:	0100      	lsls	r0, r0, #4
 8003dba:	4320      	orrs	r0, r4
 8003dbc:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dbe:	69d0      	ldr	r0, [r2, #28]
 8003dc0:	4c51      	ldr	r4, [pc, #324]	; (8003f08 <HAL_TIM_PWM_ConfigChannel+0x21c>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dc2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dc4:	4020      	ands	r0, r4
 8003dc6:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dc8:	69d0      	ldr	r0, [r2, #28]
 8003dca:	0209      	lsls	r1, r1, #8
 8003dcc:	4301      	orrs	r1, r0
 8003dce:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd0:	2000      	movs	r0, #0
      break;
 8003dd2:	e000      	b.n	8003dd6 <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 8003dd4:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003dd6:	223c      	movs	r2, #60	; 0x3c
 8003dd8:	2100      	movs	r1, #0
 8003dda:	5499      	strb	r1, [r3, r2]
}
 8003ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dde:	4c4d      	ldr	r4, [pc, #308]	; (8003f14 <HAL_TIM_PWM_ConfigChannel+0x228>)
 8003de0:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003de2:	694e      	ldr	r6, [r1, #20]
 8003de4:	01b6      	lsls	r6, r6, #6
 8003de6:	4326      	orrs	r6, r4
 8003de8:	e7df      	b.n	8003daa <HAL_TIM_PWM_ConfigChannel+0xbe>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dea:	2080      	movs	r0, #128	; 0x80
 8003dec:	4384      	bics	r4, r0
 8003dee:	0020      	movs	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003df0:	68cc      	ldr	r4, [r1, #12]
 8003df2:	0124      	lsls	r4, r4, #4
 8003df4:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 8003df6:	2040      	movs	r0, #64	; 0x40
 8003df8:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dfa:	4847      	ldr	r0, [pc, #284]	; (8003f18 <HAL_TIM_PWM_ConfigChannel+0x22c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dfc:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dfe:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e00:	698e      	ldr	r6, [r1, #24]
 8003e02:	433e      	orrs	r6, r7
 8003e04:	00b6      	lsls	r6, r6, #2
 8003e06:	4306      	orrs	r6, r0
 8003e08:	e79d      	b.n	8003d46 <HAL_TIM_PWM_ConfigChannel+0x5a>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e0a:	2773      	movs	r7, #115	; 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e0c:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003e0e:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e10:	6a10      	ldr	r0, [r2, #32]
 8003e12:	43a0      	bics	r0, r4
 8003e14:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003e16:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003e18:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8003e1a:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e1c:	43bc      	bics	r4, r7
  tmpccer &= ~TIM_CCER_CC1P;
 8003e1e:	3f71      	subs	r7, #113	; 0x71
 8003e20:	43b8      	bics	r0, r7
  tmpccmrx |= OC_Config->OCMode;
 8003e22:	432c      	orrs	r4, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e24:	4f35      	ldr	r7, [pc, #212]	; (8003efc <HAL_TIM_PWM_ConfigChannel+0x210>)
  tmpccer |= OC_Config->OCPolarity;
 8003e26:	688d      	ldr	r5, [r1, #8]
 8003e28:	4328      	orrs	r0, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e2a:	42ba      	cmp	r2, r7
 8003e2c:	d047      	beq.n	8003ebe <HAL_TIM_PWM_ConfigChannel+0x1d2>
 8003e2e:	4d34      	ldr	r5, [pc, #208]	; (8003f00 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003e30:	42aa      	cmp	r2, r5
 8003e32:	d044      	beq.n	8003ebe <HAL_TIM_PWM_ConfigChannel+0x1d2>
 8003e34:	4d33      	ldr	r5, [pc, #204]	; (8003f04 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8003e36:	42aa      	cmp	r2, r5
 8003e38:	d041      	beq.n	8003ebe <HAL_TIM_PWM_ConfigChannel+0x1d2>
  TIMx->CR2 = tmpcr2;
 8003e3a:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003e3c:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003e3e:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e40:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8003e42:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e44:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8003e46:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e48:	6990      	ldr	r0, [r2, #24]
 8003e4a:	4320      	orrs	r0, r4
 8003e4c:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e4e:	6990      	ldr	r0, [r2, #24]
 8003e50:	3c04      	subs	r4, #4
 8003e52:	43a0      	bics	r0, r4
 8003e54:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e56:	6990      	ldr	r0, [r2, #24]
 8003e58:	4301      	orrs	r1, r0
 8003e5a:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5c:	2000      	movs	r0, #0
      break;
 8003e5e:	e7ba      	b.n	8003dd6 <HAL_TIM_PWM_ConfigChannel+0xea>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e60:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e62:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e64:	4c2d      	ldr	r4, [pc, #180]	; (8003f1c <HAL_TIM_PWM_ConfigChannel+0x230>)
 8003e66:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003e68:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e6a:	4020      	ands	r0, r4
 8003e6c:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003e6e:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003e70:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8003e72:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e74:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8003e76:	4327      	orrs	r7, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8003e78:	4c29      	ldr	r4, [pc, #164]	; (8003f20 <HAL_TIM_PWM_ConfigChannel+0x234>)
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e7a:	4e20      	ldr	r6, [pc, #128]	; (8003efc <HAL_TIM_PWM_ConfigChannel+0x210>)
  tmpccer &= ~TIM_CCER_CC3P;
 8003e7c:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e7e:	688c      	ldr	r4, [r1, #8]
 8003e80:	0224      	lsls	r4, r4, #8
 8003e82:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e84:	42b2      	cmp	r2, r6
 8003e86:	d027      	beq.n	8003ed8 <HAL_TIM_PWM_ConfigChannel+0x1ec>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e88:	4e1d      	ldr	r6, [pc, #116]	; (8003f00 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003e8a:	42b2      	cmp	r2, r6
 8003e8c:	d02b      	beq.n	8003ee6 <HAL_TIM_PWM_ConfigChannel+0x1fa>
 8003e8e:	481d      	ldr	r0, [pc, #116]	; (8003f04 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8003e90:	4282      	cmp	r2, r0
 8003e92:	d028      	beq.n	8003ee6 <HAL_TIM_PWM_ConfigChannel+0x1fa>
  TIMx->CCR3 = OC_Config->Pulse;
 8003e94:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003e96:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003e98:	61d7      	str	r7, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003e9a:	63d0      	str	r0, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003e9c:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e9e:	2408      	movs	r4, #8
 8003ea0:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ea2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ea4:	4320      	orrs	r0, r4
 8003ea6:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ea8:	69d0      	ldr	r0, [r2, #28]
 8003eaa:	3c04      	subs	r4, #4
 8003eac:	43a0      	bics	r0, r4
 8003eae:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eb0:	69d0      	ldr	r0, [r2, #28]
 8003eb2:	4301      	orrs	r1, r0
 8003eb4:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb6:	2000      	movs	r0, #0
      break;
 8003eb8:	e78d      	b.n	8003dd6 <HAL_TIM_PWM_ConfigChannel+0xea>
  __HAL_LOCK(htim);
 8003eba:	2002      	movs	r0, #2
 8003ebc:	e78e      	b.n	8003ddc <HAL_TIM_PWM_ConfigChannel+0xf0>
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ebe:	2508      	movs	r5, #8
 8003ec0:	43a8      	bics	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 8003ec2:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ec4:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8003ec6:	4328      	orrs	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ec8:	2504      	movs	r5, #4
 8003eca:	43a8      	bics	r0, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ecc:	4d15      	ldr	r5, [pc, #84]	; (8003f24 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8003ece:	4035      	ands	r5, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ed0:	694e      	ldr	r6, [r1, #20]
 8003ed2:	433e      	orrs	r6, r7
 8003ed4:	432e      	orrs	r6, r5
 8003ed6:	e7b0      	b.n	8003e3a <HAL_TIM_PWM_ConfigChannel+0x14e>
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ed8:	4813      	ldr	r0, [pc, #76]	; (8003f28 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8003eda:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003edc:	68cc      	ldr	r4, [r1, #12]
 8003ede:	0224      	lsls	r4, r4, #8
 8003ee0:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ee2:	4809      	ldr	r0, [pc, #36]	; (8003f08 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8003ee4:	4004      	ands	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ee6:	4811      	ldr	r0, [pc, #68]	; (8003f2c <HAL_TIM_PWM_ConfigChannel+0x240>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ee8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eea:	4028      	ands	r0, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eec:	698d      	ldr	r5, [r1, #24]
 8003eee:	4335      	orrs	r5, r6
 8003ef0:	012d      	lsls	r5, r5, #4
 8003ef2:	4305      	orrs	r5, r0
 8003ef4:	e7ce      	b.n	8003e94 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	ffff8cff 	.word	0xffff8cff
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40014400 	.word	0x40014400
 8003f04:	40014800 	.word	0x40014800
 8003f08:	fffffbff 	.word	0xfffffbff
 8003f0c:	ffffefff 	.word	0xffffefff
 8003f10:	ffffdfff 	.word	0xffffdfff
 8003f14:	ffffbfff 	.word	0xffffbfff
 8003f18:	fffff3ff 	.word	0xfffff3ff
 8003f1c:	fffffeff 	.word	0xfffffeff
 8003f20:	fffffdff 	.word	0xfffffdff
 8003f24:	fffffcff 	.word	0xfffffcff
 8003f28:	fffff7ff 	.word	0xfffff7ff
 8003f2c:	ffffcfff 	.word	0xffffcfff

08003f30 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003f30:	233c      	movs	r3, #60	; 0x3c
{
 8003f32:	b570      	push	{r4, r5, r6, lr}
 8003f34:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8003f36:	5cc0      	ldrb	r0, [r0, r3]
 8003f38:	2801      	cmp	r0, #1
 8003f3a:	d100      	bne.n	8003f3e <HAL_TIM_ConfigClockSource+0xe>
 8003f3c:	e077      	b.n	800402e <HAL_TIM_ConfigClockSource+0xfe>
 8003f3e:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003f40:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003f42:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8003f44:	3301      	adds	r3, #1
 8003f46:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8003f48:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f4a:	4d54      	ldr	r5, [pc, #336]	; (800409c <HAL_TIM_ConfigClockSource+0x16c>)
  tmpsmcr = htim->Instance->SMCR;
 8003f4c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f4e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8003f50:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003f52:	680b      	ldr	r3, [r1, #0]
 8003f54:	2b60      	cmp	r3, #96	; 0x60
 8003f56:	d100      	bne.n	8003f5a <HAL_TIM_ConfigClockSource+0x2a>
 8003f58:	e06b      	b.n	8004032 <HAL_TIM_ConfigClockSource+0x102>
 8003f5a:	d825      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x78>
 8003f5c:	2b40      	cmp	r3, #64	; 0x40
 8003f5e:	d100      	bne.n	8003f62 <HAL_TIM_ConfigClockSource+0x32>
 8003f60:	e082      	b.n	8004068 <HAL_TIM_ConfigClockSource+0x138>
 8003f62:	d954      	bls.n	800400e <HAL_TIM_ConfigClockSource+0xde>
 8003f64:	2b50      	cmp	r3, #80	; 0x50
 8003f66:	d13d      	bne.n	8003fe4 <HAL_TIM_ConfigClockSource+0xb4>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f68:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f6a:	6a03      	ldr	r3, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f6e:	43a3      	bics	r3, r4
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f70:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f72:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f74:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f76:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f78:	43a3      	bics	r3, r4
 8003f7a:	001c      	movs	r4, r3
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f7c:	010b      	lsls	r3, r1, #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f7e:	210a      	movs	r1, #10
 8003f80:	438e      	bics	r6, r1
 8003f82:	0031      	movs	r1, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f84:	4323      	orrs	r3, r4
  tmpccer |= TIM_ICPolarity;
 8003f86:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f88:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003f8a:	6201      	str	r1, [r0, #32]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f8c:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003f8e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f90:	438b      	bics	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f92:	3919      	subs	r1, #25
 8003f94:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f96:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003f98:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f9a:	233d      	movs	r3, #61	; 0x3d
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	54d1      	strb	r1, [r2, r3]
}
 8003fa6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003fa8:	2480      	movs	r4, #128	; 0x80
 8003faa:	0164      	lsls	r4, r4, #5
 8003fac:	42a3      	cmp	r3, r4
 8003fae:	d03c      	beq.n	800402a <HAL_TIM_ConfigClockSource+0xfa>
 8003fb0:	2480      	movs	r4, #128	; 0x80
 8003fb2:	01a4      	lsls	r4, r4, #6
 8003fb4:	42a3      	cmp	r3, r4
 8003fb6:	d117      	bne.n	8003fe8 <HAL_TIM_ConfigClockSource+0xb8>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fb8:	6883      	ldr	r3, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fba:	4c39      	ldr	r4, [pc, #228]	; (80040a0 <HAL_TIM_ConfigClockSource+0x170>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fbc:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fbe:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fc0:	688b      	ldr	r3, [r1, #8]
 8003fc2:	68c9      	ldr	r1, [r1, #12]
 8003fc4:	432b      	orrs	r3, r5
 8003fc6:	0209      	lsls	r1, r1, #8
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fcc:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fce:	2380      	movs	r3, #128	; 0x80
 8003fd0:	6881      	ldr	r1, [r0, #8]
 8003fd2:	01db      	lsls	r3, r3, #7
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd8:	2000      	movs	r0, #0
      break;
 8003fda:	e7de      	b.n	8003f9a <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8003fdc:	2110      	movs	r1, #16
 8003fde:	001c      	movs	r4, r3
 8003fe0:	438c      	bics	r4, r1
 8003fe2:	d019      	beq.n	8004018 <HAL_TIM_ConfigClockSource+0xe8>
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	e7d8      	b.n	8003f9a <HAL_TIM_ConfigClockSource+0x6a>
 8003fe8:	2b70      	cmp	r3, #112	; 0x70
 8003fea:	d1fb      	bne.n	8003fe4 <HAL_TIM_ConfigClockSource+0xb4>
  tmpsmcr = TIMx->SMCR;
 8003fec:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fee:	4c2c      	ldr	r4, [pc, #176]	; (80040a0 <HAL_TIM_ConfigClockSource+0x170>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ff0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff2:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ff4:	688b      	ldr	r3, [r1, #8]
 8003ff6:	68c9      	ldr	r1, [r1, #12]
 8003ff8:	432b      	orrs	r3, r5
 8003ffa:	0209      	lsls	r1, r1, #8
 8003ffc:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ffe:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004000:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8004002:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004004:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004006:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8004008:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800400a:	2000      	movs	r0, #0
      break;
 800400c:	e7c5      	b.n	8003f9a <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800400e:	2b20      	cmp	r3, #32
 8004010:	d002      	beq.n	8004018 <HAL_TIM_ConfigClockSource+0xe8>
 8004012:	d9e3      	bls.n	8003fdc <HAL_TIM_ConfigClockSource+0xac>
 8004014:	2b30      	cmp	r3, #48	; 0x30
 8004016:	d1e5      	bne.n	8003fe4 <HAL_TIM_ConfigClockSource+0xb4>
  tmpsmcr &= ~TIM_SMCR_TS;
 8004018:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800401a:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800401c:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800401e:	430b      	orrs	r3, r1
 8004020:	2107      	movs	r1, #7
 8004022:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004024:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004026:	2000      	movs	r0, #0
}
 8004028:	e7b7      	b.n	8003f9a <HAL_TIM_ConfigClockSource+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 800402a:	2000      	movs	r0, #0
 800402c:	e7b5      	b.n	8003f9a <HAL_TIM_ConfigClockSource+0x6a>
  __HAL_LOCK(htim);
 800402e:	2002      	movs	r0, #2
 8004030:	e7b9      	b.n	8003fa6 <HAL_TIM_ConfigClockSource+0x76>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004032:	68cd      	ldr	r5, [r1, #12]
 8004034:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004036:	2110      	movs	r1, #16
 8004038:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800403a:	4e1a      	ldr	r6, [pc, #104]	; (80040a4 <HAL_TIM_ConfigClockSource+0x174>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800403c:	438b      	bics	r3, r1
 800403e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004040:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8004042:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004044:	400e      	ands	r6, r1
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004046:	0329      	lsls	r1, r5, #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004048:	25a0      	movs	r5, #160	; 0xa0
 800404a:	43ab      	bics	r3, r5
 800404c:	001d      	movs	r5, r3
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800404e:	4331      	orrs	r1, r6
  TIMx->CCMR1 = tmpccmr1 ;
 8004050:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004052:	2170      	movs	r1, #112	; 0x70
  tmpccer |= (TIM_ICPolarity << 4U);
 8004054:	0123      	lsls	r3, r4, #4
 8004056:	432b      	orrs	r3, r5
  TIMx->CCER = tmpccer;
 8004058:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800405a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800405c:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800405e:	3909      	subs	r1, #9
 8004060:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004062:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004064:	2000      	movs	r0, #0
}
 8004066:	e798      	b.n	8003f9a <HAL_TIM_ConfigClockSource+0x6a>
  tmpccer = TIMx->CCER;
 8004068:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406a:	6a03      	ldr	r3, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800406c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406e:	43a3      	bics	r3, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004070:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004072:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004074:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004076:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004078:	43a3      	bics	r3, r4
 800407a:	001c      	movs	r4, r3
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800407c:	010b      	lsls	r3, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800407e:	210a      	movs	r1, #10
 8004080:	438e      	bics	r6, r1
 8004082:	0031      	movs	r1, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004084:	4323      	orrs	r3, r4
  tmpccer |= TIM_ICPolarity;
 8004086:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8004088:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800408a:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800408c:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800408e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004090:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004092:	3929      	subs	r1, #41	; 0x29
 8004094:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004096:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004098:	2000      	movs	r0, #0
}
 800409a:	e77e      	b.n	8003f9a <HAL_TIM_ConfigClockSource+0x6a>
 800409c:	ffff0088 	.word	0xffff0088
 80040a0:	ffff00ff 	.word	0xffff00ff
 80040a4:	ffff0fff 	.word	0xffff0fff

080040a8 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80040a8:	233c      	movs	r3, #60	; 0x3c
{
 80040aa:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80040ac:	5cc2      	ldrb	r2, [r0, r3]
 80040ae:	2a01      	cmp	r2, #1
 80040b0:	d04d      	beq.n	800414e <HAL_TIM_SlaveConfigSynchro+0xa6>
 80040b2:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80040b4:	2202      	movs	r2, #2
  tmpsmcr &= ~TIM_SMCR_SMS;
 80040b6:	2607      	movs	r6, #7
  __HAL_LOCK(htim);
 80040b8:	54c5      	strb	r5, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80040ba:	3301      	adds	r3, #1
 80040bc:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 80040be:	6804      	ldr	r4, [r0, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80040c0:	3333      	adds	r3, #51	; 0x33
  tmpsmcr = htim->Instance->SMCR;
 80040c2:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80040c4:	439a      	bics	r2, r3
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80040c6:	684b      	ldr	r3, [r1, #4]
 80040c8:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 80040ca:	43b2      	bics	r2, r6
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80040cc:	680e      	ldr	r6, [r1, #0]
 80040ce:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 80040d0:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80040d2:	2b50      	cmp	r3, #80	; 0x50
 80040d4:	d060      	beq.n	8004198 <HAL_TIM_SlaveConfigSynchro+0xf0>
 80040d6:	d90f      	bls.n	80040f8 <HAL_TIM_SlaveConfigSynchro+0x50>
 80040d8:	2b60      	cmp	r3, #96	; 0x60
 80040da:	d03a      	beq.n	8004152 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80040dc:	2b70      	cmp	r3, #112	; 0x70
 80040de:	d10e      	bne.n	80040fe <HAL_TIM_SlaveConfigSynchro+0x56>
  tmpsmcr = TIMx->SMCR;
 80040e0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040e2:	4a37      	ldr	r2, [pc, #220]	; (80041c0 <HAL_TIM_SlaveConfigSynchro+0x118>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040e4:	688d      	ldr	r5, [r1, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040e6:	401a      	ands	r2, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040e8:	68cb      	ldr	r3, [r1, #12]
 80040ea:	6909      	ldr	r1, [r1, #16]
 80040ec:	432b      	orrs	r3, r5
 80040ee:	0209      	lsls	r1, r1, #8
 80040f0:	430b      	orrs	r3, r1
 80040f2:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80040f4:	60a3      	str	r3, [r4, #8]
 80040f6:	e00f      	b.n	8004118 <HAL_TIM_SlaveConfigSynchro+0x70>
  switch (sSlaveConfig->InputTrigger)
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	d03e      	beq.n	800417a <HAL_TIM_SlaveConfigSynchro+0xd2>
 80040fc:	d907      	bls.n	800410e <HAL_TIM_SlaveConfigSynchro+0x66>
    htim->State = HAL_TIM_STATE_READY;
 80040fe:	233d      	movs	r3, #61	; 0x3d
 8004100:	2201      	movs	r2, #1
 8004102:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(htim);
 8004104:	2200      	movs	r2, #0
 8004106:	3b01      	subs	r3, #1
 8004108:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 800410a:	2001      	movs	r0, #1
 800410c:	e013      	b.n	8004136 <HAL_TIM_SlaveConfigSynchro+0x8e>
  switch (sSlaveConfig->InputTrigger)
 800410e:	2b20      	cmp	r3, #32
 8004110:	d002      	beq.n	8004118 <HAL_TIM_SlaveConfigSynchro+0x70>
 8004112:	d911      	bls.n	8004138 <HAL_TIM_SlaveConfigSynchro+0x90>
 8004114:	2b30      	cmp	r3, #48	; 0x30
 8004116:	d1f2      	bne.n	80040fe <HAL_TIM_SlaveConfigSynchro+0x56>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004118:	2240      	movs	r2, #64	; 0x40
 800411a:	68e3      	ldr	r3, [r4, #12]
 800411c:	4393      	bics	r3, r2
 800411e:	60e3      	str	r3, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004120:	68e3      	ldr	r3, [r4, #12]
 8004122:	4a28      	ldr	r2, [pc, #160]	; (80041c4 <HAL_TIM_SlaveConfigSynchro+0x11c>)
 8004124:	4013      	ands	r3, r2
 8004126:	60e3      	str	r3, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004128:	2201      	movs	r2, #1
 800412a:	233d      	movs	r3, #61	; 0x3d
 800412c:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 800412e:	2200      	movs	r2, #0
 8004130:	3b01      	subs	r3, #1
 8004132:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8004134:	2000      	movs	r0, #0
}
 8004136:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 8004138:	2210      	movs	r2, #16
 800413a:	4393      	bics	r3, r2
 800413c:	d0ec      	beq.n	8004118 <HAL_TIM_SlaveConfigSynchro+0x70>
    htim->State = HAL_TIM_STATE_READY;
 800413e:	233d      	movs	r3, #61	; 0x3d
 8004140:	2201      	movs	r2, #1
 8004142:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(htim);
 8004144:	2200      	movs	r2, #0
 8004146:	3b01      	subs	r3, #1
 8004148:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 800414a:	2001      	movs	r0, #1
 800414c:	e7f3      	b.n	8004136 <HAL_TIM_SlaveConfigSynchro+0x8e>
  __HAL_LOCK(htim);
 800414e:	2002      	movs	r0, #2
 8004150:	e7f1      	b.n	8004136 <HAL_TIM_SlaveConfigSynchro+0x8e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004152:	690d      	ldr	r5, [r1, #16]
 8004154:	688a      	ldr	r2, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004156:	2110      	movs	r1, #16
 8004158:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800415a:	4e1b      	ldr	r6, [pc, #108]	; (80041c8 <HAL_TIM_SlaveConfigSynchro+0x120>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800415c:	438b      	bics	r3, r1
 800415e:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004160:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8004162:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004164:	400e      	ands	r6, r1
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004166:	0329      	lsls	r1, r5, #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004168:	25a0      	movs	r5, #160	; 0xa0
 800416a:	43ab      	bics	r3, r5
 800416c:	001d      	movs	r5, r3
  tmpccer |= (TIM_ICPolarity << 4U);
 800416e:	0113      	lsls	r3, r2, #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004170:	4331      	orrs	r1, r6
  tmpccer |= (TIM_ICPolarity << 4U);
 8004172:	432b      	orrs	r3, r5
  TIMx->CCMR1 = tmpccmr1 ;
 8004174:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8004176:	6223      	str	r3, [r4, #32]
 8004178:	e7ce      	b.n	8004118 <HAL_TIM_SlaveConfigSynchro+0x70>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800417a:	2e05      	cmp	r6, #5
 800417c:	d0bf      	beq.n	80040fe <HAL_TIM_SlaveConfigSynchro+0x56>
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800417e:	22f0      	movs	r2, #240	; 0xf0
      tmpccer = htim->Instance->CCER;
 8004180:	6a26      	ldr	r6, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004182:	6a23      	ldr	r3, [r4, #32]
 8004184:	43ab      	bics	r3, r5
 8004186:	6223      	str	r3, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004188:	69a5      	ldr	r5, [r4, #24]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800418a:	690b      	ldr	r3, [r1, #16]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800418c:	4395      	bics	r5, r2
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	432b      	orrs	r3, r5
      htim->Instance->CCMR1 = tmpccmr1;
 8004192:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8004194:	6226      	str	r6, [r4, #32]
 8004196:	e7bf      	b.n	8004118 <HAL_TIM_SlaveConfigSynchro+0x70>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004198:	690a      	ldr	r2, [r1, #16]
 800419a:	688e      	ldr	r6, [r1, #8]
  tmpccer = TIMx->CCER;
 800419c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800419e:	6a23      	ldr	r3, [r4, #32]
 80041a0:	43ab      	bics	r3, r5
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041a2:	25f0      	movs	r5, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a4:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a6:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041a8:	43ab      	bics	r3, r5
 80041aa:	001d      	movs	r5, r3
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041ac:	0113      	lsls	r3, r2, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ae:	220a      	movs	r2, #10
 80041b0:	4391      	bics	r1, r2
 80041b2:	000a      	movs	r2, r1
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041b4:	432b      	orrs	r3, r5
  tmpccer |= TIM_ICPolarity;
 80041b6:	4332      	orrs	r2, r6
  TIMx->CCMR1 = tmpccmr1;
 80041b8:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80041ba:	6222      	str	r2, [r4, #32]
 80041bc:	e7ac      	b.n	8004118 <HAL_TIM_SlaveConfigSynchro+0x70>
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	ffff00ff 	.word	0xffff00ff
 80041c4:	ffffbfff 	.word	0xffffbfff
 80041c8:	ffff0fff 	.word	0xffff0fff

080041cc <HAL_TIM_OC_DelayElapsedCallback>:
 80041cc:	4770      	bx	lr
 80041ce:	46c0      	nop			; (mov r8, r8)

080041d0 <HAL_TIM_IC_CaptureCallback>:
 80041d0:	4770      	bx	lr
 80041d2:	46c0      	nop			; (mov r8, r8)

080041d4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80041d4:	4770      	bx	lr
 80041d6:	46c0      	nop			; (mov r8, r8)

080041d8 <HAL_TIM_TriggerCallback>:
 80041d8:	4770      	bx	lr
 80041da:	46c0      	nop			; (mov r8, r8)

080041dc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041dc:	2202      	movs	r2, #2
 80041de:	6803      	ldr	r3, [r0, #0]
{
 80041e0:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041e2:	6919      	ldr	r1, [r3, #16]
{
 80041e4:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041e6:	420a      	tst	r2, r1
 80041e8:	d002      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ea:	68d9      	ldr	r1, [r3, #12]
 80041ec:	420a      	tst	r2, r1
 80041ee:	d165      	bne.n	80042bc <HAL_TIM_IRQHandler+0xe0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041f0:	2204      	movs	r2, #4
 80041f2:	6919      	ldr	r1, [r3, #16]
 80041f4:	420a      	tst	r2, r1
 80041f6:	d002      	beq.n	80041fe <HAL_TIM_IRQHandler+0x22>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041f8:	68d9      	ldr	r1, [r3, #12]
 80041fa:	420a      	tst	r2, r1
 80041fc:	d14b      	bne.n	8004296 <HAL_TIM_IRQHandler+0xba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041fe:	2208      	movs	r2, #8
 8004200:	6919      	ldr	r1, [r3, #16]
 8004202:	420a      	tst	r2, r1
 8004204:	d002      	beq.n	800420c <HAL_TIM_IRQHandler+0x30>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004206:	68d9      	ldr	r1, [r3, #12]
 8004208:	420a      	tst	r2, r1
 800420a:	d133      	bne.n	8004274 <HAL_TIM_IRQHandler+0x98>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800420c:	2210      	movs	r2, #16
 800420e:	6919      	ldr	r1, [r3, #16]
 8004210:	420a      	tst	r2, r1
 8004212:	d002      	beq.n	800421a <HAL_TIM_IRQHandler+0x3e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004214:	68d9      	ldr	r1, [r3, #12]
 8004216:	420a      	tst	r2, r1
 8004218:	d11c      	bne.n	8004254 <HAL_TIM_IRQHandler+0x78>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800421a:	2201      	movs	r2, #1
 800421c:	6919      	ldr	r1, [r3, #16]
 800421e:	420a      	tst	r2, r1
 8004220:	d002      	beq.n	8004228 <HAL_TIM_IRQHandler+0x4c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004222:	68d9      	ldr	r1, [r3, #12]
 8004224:	420a      	tst	r2, r1
 8004226:	d15c      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004228:	2280      	movs	r2, #128	; 0x80
 800422a:	6919      	ldr	r1, [r3, #16]
 800422c:	420a      	tst	r2, r1
 800422e:	d002      	beq.n	8004236 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004230:	68d9      	ldr	r1, [r3, #12]
 8004232:	420a      	tst	r2, r1
 8004234:	d15c      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x114>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004236:	2240      	movs	r2, #64	; 0x40
 8004238:	6919      	ldr	r1, [r3, #16]
 800423a:	420a      	tst	r2, r1
 800423c:	d002      	beq.n	8004244 <HAL_TIM_IRQHandler+0x68>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800423e:	68d9      	ldr	r1, [r3, #12]
 8004240:	420a      	tst	r2, r1
 8004242:	d15d      	bne.n	8004300 <HAL_TIM_IRQHandler+0x124>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004244:	2220      	movs	r2, #32
 8004246:	6919      	ldr	r1, [r3, #16]
 8004248:	420a      	tst	r2, r1
 800424a:	d002      	beq.n	8004252 <HAL_TIM_IRQHandler+0x76>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800424c:	68d9      	ldr	r1, [r3, #12]
 800424e:	420a      	tst	r2, r1
 8004250:	d141      	bne.n	80042d6 <HAL_TIM_IRQHandler+0xfa>
}
 8004252:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004254:	3a21      	subs	r2, #33	; 0x21
 8004256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004258:	3219      	adds	r2, #25
 800425a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800425c:	69da      	ldr	r2, [r3, #28]
 800425e:	23c0      	movs	r3, #192	; 0xc0
 8004260:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004262:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004264:	421a      	tst	r2, r3
 8004266:	d05e      	beq.n	8004326 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004268:	f7ff ffb2 	bl	80041d0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426c:	2300      	movs	r3, #0
 800426e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004270:	6823      	ldr	r3, [r4, #0]
 8004272:	e7d2      	b.n	800421a <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004274:	3a11      	subs	r2, #17
 8004276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004278:	320d      	adds	r2, #13
 800427a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800427c:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800427e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004280:	079b      	lsls	r3, r3, #30
 8004282:	d14d      	bne.n	8004320 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004284:	f7ff ffa2 	bl	80041cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004288:	0020      	movs	r0, r4
 800428a:	f7ff ffa3 	bl	80041d4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428e:	2300      	movs	r3, #0
 8004290:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	e7ba      	b.n	800420c <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004296:	3a09      	subs	r2, #9
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800429a:	3207      	adds	r2, #7
 800429c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800429e:	699a      	ldr	r2, [r3, #24]
 80042a0:	23c0      	movs	r3, #192	; 0xc0
 80042a2:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80042a4:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a6:	421a      	tst	r2, r3
 80042a8:	d137      	bne.n	800431a <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042aa:	f7ff ff8f 	bl	80041cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ae:	0020      	movs	r0, r4
 80042b0:	f7ff ff90 	bl	80041d4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b4:	2300      	movs	r3, #0
 80042b6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	e7a0      	b.n	80041fe <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042bc:	3a05      	subs	r2, #5
 80042be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042c0:	3204      	adds	r2, #4
 80042c2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	079b      	lsls	r3, r3, #30
 80042c8:	d021      	beq.n	800430e <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 80042ca:	f7ff ff81 	bl	80041d0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ce:	2300      	movs	r3, #0
 80042d0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	e78c      	b.n	80041f0 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042d6:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 80042d8:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042da:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80042dc:	f000 f8d2 	bl	8004484 <HAL_TIMEx_CommutCallback>
}
 80042e0:	e7b7      	b.n	8004252 <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042e2:	3a03      	subs	r2, #3
 80042e4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80042e6:	0020      	movs	r0, r4
 80042e8:	f7fc fb5c 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	e79b      	b.n	8004228 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042f0:	3a02      	subs	r2, #2
 80042f2:	3aff      	subs	r2, #255	; 0xff
 80042f4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80042f6:	0020      	movs	r0, r4
 80042f8:	f000 f8c6 	bl	8004488 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	e79a      	b.n	8004236 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004300:	3a81      	subs	r2, #129	; 0x81
 8004302:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004304:	0020      	movs	r0, r4
 8004306:	f7ff ff67 	bl	80041d8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	e79a      	b.n	8004244 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800430e:	f7ff ff5d 	bl	80041cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004312:	0020      	movs	r0, r4
 8004314:	f7ff ff5e 	bl	80041d4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004318:	e7d9      	b.n	80042ce <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 800431a:	f7ff ff59 	bl	80041d0 <HAL_TIM_IC_CaptureCallback>
 800431e:	e7c9      	b.n	80042b4 <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 8004320:	f7ff ff56 	bl	80041d0 <HAL_TIM_IC_CaptureCallback>
 8004324:	e7b3      	b.n	800428e <HAL_TIM_IRQHandler+0xb2>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004326:	f7ff ff51 	bl	80041cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432a:	0020      	movs	r0, r4
 800432c:	f7ff ff52 	bl	80041d4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004330:	e79c      	b.n	800426c <HAL_TIM_IRQHandler+0x90>
 8004332:	46c0      	nop			; (mov r8, r8)

08004334 <HAL_TIMEx_PWMN_Start>:
 8004334:	2900      	cmp	r1, #0
 8004336:	d125      	bne.n	8004384 <HAL_TIMEx_PWMN_Start+0x50>
 8004338:	2342      	movs	r3, #66	; 0x42
 800433a:	5cc2      	ldrb	r2, [r0, r3]
 800433c:	2a01      	cmp	r2, #1
 800433e:	d129      	bne.n	8004394 <HAL_TIMEx_PWMN_Start+0x60>
 8004340:	2202      	movs	r2, #2
 8004342:	54c2      	strb	r2, [r0, r3]
 8004344:	221f      	movs	r2, #31
 8004346:	4011      	ands	r1, r2
 8004348:	3a1b      	subs	r2, #27
 800434a:	408a      	lsls	r2, r1
 800434c:	6803      	ldr	r3, [r0, #0]
 800434e:	6a19      	ldr	r1, [r3, #32]
 8004350:	4391      	bics	r1, r2
 8004352:	6219      	str	r1, [r3, #32]
 8004354:	6a19      	ldr	r1, [r3, #32]
 8004356:	430a      	orrs	r2, r1
 8004358:	621a      	str	r2, [r3, #32]
 800435a:	2280      	movs	r2, #128	; 0x80
 800435c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800435e:	0212      	lsls	r2, r2, #8
 8004360:	430a      	orrs	r2, r1
 8004362:	645a      	str	r2, [r3, #68]	; 0x44
 8004364:	4a15      	ldr	r2, [pc, #84]	; (80043bc <HAL_TIMEx_PWMN_Start+0x88>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d016      	beq.n	8004398 <HAL_TIMEx_PWMN_Start+0x64>
 800436a:	2280      	movs	r2, #128	; 0x80
 800436c:	05d2      	lsls	r2, r2, #23
 800436e:	4293      	cmp	r3, r2
 8004370:	d012      	beq.n	8004398 <HAL_TIMEx_PWMN_Start+0x64>
 8004372:	4a13      	ldr	r2, [pc, #76]	; (80043c0 <HAL_TIMEx_PWMN_Start+0x8c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00f      	beq.n	8004398 <HAL_TIMEx_PWMN_Start+0x64>
 8004378:	2101      	movs	r1, #1
 800437a:	2000      	movs	r0, #0
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	4770      	bx	lr
 8004384:	2904      	cmp	r1, #4
 8004386:	d00e      	beq.n	80043a6 <HAL_TIMEx_PWMN_Start+0x72>
 8004388:	2908      	cmp	r1, #8
 800438a:	d011      	beq.n	80043b0 <HAL_TIMEx_PWMN_Start+0x7c>
 800438c:	2345      	movs	r3, #69	; 0x45
 800438e:	5cc2      	ldrb	r2, [r0, r3]
 8004390:	2a01      	cmp	r2, #1
 8004392:	d0d5      	beq.n	8004340 <HAL_TIMEx_PWMN_Start+0xc>
 8004394:	2001      	movs	r0, #1
 8004396:	e7f4      	b.n	8004382 <HAL_TIMEx_PWMN_Start+0x4e>
 8004398:	2207      	movs	r2, #7
 800439a:	6899      	ldr	r1, [r3, #8]
 800439c:	400a      	ands	r2, r1
 800439e:	2a06      	cmp	r2, #6
 80043a0:	d1ea      	bne.n	8004378 <HAL_TIMEx_PWMN_Start+0x44>
 80043a2:	2000      	movs	r0, #0
 80043a4:	e7ed      	b.n	8004382 <HAL_TIMEx_PWMN_Start+0x4e>
 80043a6:	2343      	movs	r3, #67	; 0x43
 80043a8:	5cc2      	ldrb	r2, [r0, r3]
 80043aa:	2a01      	cmp	r2, #1
 80043ac:	d0c8      	beq.n	8004340 <HAL_TIMEx_PWMN_Start+0xc>
 80043ae:	e7f1      	b.n	8004394 <HAL_TIMEx_PWMN_Start+0x60>
 80043b0:	2344      	movs	r3, #68	; 0x44
 80043b2:	5cc2      	ldrb	r2, [r0, r3]
 80043b4:	2a01      	cmp	r2, #1
 80043b6:	d0c3      	beq.n	8004340 <HAL_TIMEx_PWMN_Start+0xc>
 80043b8:	e7ec      	b.n	8004394 <HAL_TIMEx_PWMN_Start+0x60>
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	40012c00 	.word	0x40012c00
 80043c0:	40000400 	.word	0x40000400

080043c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043c4:	233c      	movs	r3, #60	; 0x3c
{
 80043c6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80043c8:	5cc3      	ldrb	r3, [r0, r3]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d021      	beq.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ce:	233d      	movs	r3, #61	; 0x3d
 80043d0:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043d2:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 80043d6:	6803      	ldr	r3, [r0, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80043da:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80043dc:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043de:	680d      	ldr	r5, [r1, #0]
 80043e0:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e4:	4a0c      	ldr	r2, [pc, #48]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d006      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80043ea:	2280      	movs	r2, #128	; 0x80
 80043ec:	05d2      	lsls	r2, r2, #23
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d002      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80043f2:	4a0a      	ldr	r2, [pc, #40]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d104      	bne.n	8004402 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043f8:	2280      	movs	r2, #128	; 0x80
 80043fa:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043fc:	684a      	ldr	r2, [r1, #4]
 80043fe:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004400:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004402:	233d      	movs	r3, #61	; 0x3d
 8004404:	2201      	movs	r2, #1
 8004406:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8004408:	2200      	movs	r2, #0
 800440a:	3b01      	subs	r3, #1
 800440c:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800440e:	2000      	movs	r0, #0
}
 8004410:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8004412:	2002      	movs	r0, #2
 8004414:	e7fc      	b.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004416:	46c0      	nop			; (mov r8, r8)
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40000400 	.word	0x40000400

08004420 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004420:	223c      	movs	r2, #60	; 0x3c
{
 8004422:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8004424:	5c83      	ldrb	r3, [r0, r2]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d01e      	beq.n	8004468 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800442a:	68cc      	ldr	r4, [r1, #12]
 800442c:	4b0f      	ldr	r3, [pc, #60]	; (800446c <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 800442e:	4023      	ands	r3, r4
 8004430:	688c      	ldr	r4, [r1, #8]
 8004432:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004434:	4c0e      	ldr	r4, [pc, #56]	; (8004470 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8004436:	4023      	ands	r3, r4
 8004438:	684c      	ldr	r4, [r1, #4]
 800443a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800443c:	4c0d      	ldr	r4, [pc, #52]	; (8004474 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 800443e:	4023      	ands	r3, r4
 8004440:	680c      	ldr	r4, [r1, #0]
 8004442:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004444:	4c0c      	ldr	r4, [pc, #48]	; (8004478 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8004446:	4023      	ands	r3, r4
 8004448:	690c      	ldr	r4, [r1, #16]
 800444a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800444c:	4c0b      	ldr	r4, [pc, #44]	; (800447c <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 800444e:	4023      	ands	r3, r4
 8004450:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004452:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004454:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004456:	4c0a      	ldr	r4, [pc, #40]	; (8004480 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8004458:	4023      	ands	r3, r4
 800445a:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800445c:	6801      	ldr	r1, [r0, #0]
 800445e:	644b      	str	r3, [r1, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004460:	2300      	movs	r3, #0
 8004462:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8004464:	2000      	movs	r0, #0
}
 8004466:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8004468:	2002      	movs	r0, #2
 800446a:	e7fc      	b.n	8004466 <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 800446c:	fffffcff 	.word	0xfffffcff
 8004470:	fffffbff 	.word	0xfffffbff
 8004474:	fffff7ff 	.word	0xfffff7ff
 8004478:	ffffefff 	.word	0xffffefff
 800447c:	ffffdfff 	.word	0xffffdfff
 8004480:	ffffbfff 	.word	0xffffbfff

08004484 <HAL_TIMEx_CommutCallback>:
 8004484:	4770      	bx	lr
 8004486:	46c0      	nop			; (mov r8, r8)

08004488 <HAL_TIMEx_BreakCallback>:
 8004488:	4770      	bx	lr
 800448a:	46c0      	nop			; (mov r8, r8)

0800448c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	4657      	mov	r7, sl
 8004490:	464e      	mov	r6, r9
 8004492:	4645      	mov	r5, r8
 8004494:	46de      	mov	lr, fp
 8004496:	b5e0      	push	{r5, r6, r7, lr}
 8004498:	001e      	movs	r6, r3
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800449a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 800449c:	0005      	movs	r5, r0
 800449e:	000f      	movs	r7, r1
 80044a0:	0014      	movs	r4, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80044a2:	2b20      	cmp	r3, #32
 80044a4:	d000      	beq.n	80044a8 <HAL_UART_Transmit+0x1c>
 80044a6:	e0a8      	b.n	80045fa <HAL_UART_Transmit+0x16e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a8:	2900      	cmp	r1, #0
 80044aa:	d04a      	beq.n	8004542 <HAL_UART_Transmit+0xb6>
 80044ac:	2a00      	cmp	r2, #0
 80044ae:	d048      	beq.n	8004542 <HAL_UART_Transmit+0xb6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	6882      	ldr	r2, [r0, #8]
 80044b4:	015b      	lsls	r3, r3, #5
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d104      	bne.n	80044c4 <HAL_UART_Transmit+0x38>
 80044ba:	6903      	ldr	r3, [r0, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_UART_Transmit+0x38>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044c0:	07cb      	lsls	r3, r1, #31
 80044c2:	d43e      	bmi.n	8004542 <HAL_UART_Transmit+0xb6>
      {
        return  HAL_ERROR;
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c4:	2200      	movs	r2, #0
 80044c6:	2384      	movs	r3, #132	; 0x84
 80044c8:	50ea      	str	r2, [r5, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ca:	3b63      	subs	r3, #99	; 0x63
 80044cc:	67eb      	str	r3, [r5, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ce:	f7fc ffed 	bl	80014ac <HAL_GetTick>

    huart->TxXferSize  = Size;
 80044d2:	2350      	movs	r3, #80	; 0x50
      pdata16bits = (const uint16_t *) pData;
    }
    else
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
 80044d4:	2200      	movs	r2, #0
    huart->TxXferSize  = Size;
 80044d6:	52ec      	strh	r4, [r5, r3]
    huart->TxXferCount = Size;
 80044d8:	3302      	adds	r3, #2
 80044da:	52ec      	strh	r4, [r5, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044dc:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 80044de:	4692      	mov	sl, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e0:	68aa      	ldr	r2, [r5, #8]
    tickstart = HAL_GetTick();
 80044e2:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e4:	015b      	lsls	r3, r3, #5
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d100      	bne.n	80044ec <HAL_UART_Transmit+0x60>
 80044ea:	e0a3      	b.n	8004634 <HAL_UART_Transmit+0x1a8>
    }

    while (huart->TxXferCount > 0U)
 80044ec:	2352      	movs	r3, #82	; 0x52
 80044ee:	5aeb      	ldrh	r3, [r5, r3]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d100      	bne.n	80044f6 <HAL_UART_Transmit+0x6a>
 80044f4:	e0d6      	b.n	80046a4 <HAL_UART_Transmit+0x218>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044f6:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f8:	2480      	movs	r4, #128	; 0x80
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044fa:	4691      	mov	r9, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044fc:	682b      	ldr	r3, [r5, #0]
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044fe:	2208      	movs	r2, #8
 8004500:	4693      	mov	fp, r2
 8004502:	1c72      	adds	r2, r6, #1
 8004504:	d124      	bne.n	8004550 <HAL_UART_Transmit+0xc4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004506:	69da      	ldr	r2, [r3, #28]
 8004508:	4214      	tst	r4, r2
 800450a:	d0fc      	beq.n	8004506 <HAL_UART_Transmit+0x7a>
      if (pdata8bits == NULL)
 800450c:	2f00      	cmp	r7, #0
 800450e:	d06b      	beq.n	80045e8 <HAL_UART_Transmit+0x15c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004510:	783a      	ldrb	r2, [r7, #0]
        pdata8bits++;
 8004512:	3701      	adds	r7, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004514:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8004516:	2152      	movs	r1, #82	; 0x52
 8004518:	5a6a      	ldrh	r2, [r5, r1]
 800451a:	3a01      	subs	r2, #1
 800451c:	b292      	uxth	r2, r2
 800451e:	526a      	strh	r2, [r5, r1]
    while (huart->TxXferCount > 0U)
 8004520:	5a6a      	ldrh	r2, [r5, r1]
 8004522:	2a00      	cmp	r2, #0
 8004524:	d1eb      	bne.n	80044fe <HAL_UART_Transmit+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004526:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004528:	2440      	movs	r4, #64	; 0x40
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800452a:	4691      	mov	r9, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800452c:	2708      	movs	r7, #8
 800452e:	1c72      	adds	r2, r6, #1
 8004530:	d165      	bne.n	80045fe <HAL_UART_Transmit+0x172>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004532:	2140      	movs	r1, #64	; 0x40
 8004534:	69da      	ldr	r2, [r3, #28]
 8004536:	4211      	tst	r1, r2
 8004538:	d0fc      	beq.n	8004534 <HAL_UART_Transmit+0xa8>
    huart->gState = HAL_UART_STATE_READY;
 800453a:	2320      	movs	r3, #32
    return HAL_OK;
 800453c:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 800453e:	67eb      	str	r3, [r5, #124]	; 0x7c
    return HAL_OK;
 8004540:	e000      	b.n	8004544 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 8004542:	2001      	movs	r0, #1
}
 8004544:	bcf0      	pop	{r4, r5, r6, r7}
 8004546:	46bb      	mov	fp, r7
 8004548:	46b2      	mov	sl, r6
 800454a:	46a9      	mov	r9, r5
 800454c:	46a0      	mov	r8, r4
 800454e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004550:	69da      	ldr	r2, [r3, #28]
 8004552:	4214      	tst	r4, r2
 8004554:	d1da      	bne.n	800450c <HAL_UART_Transmit+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004556:	f7fc ffa9 	bl	80014ac <HAL_GetTick>
 800455a:	4643      	mov	r3, r8
 800455c:	1ac0      	subs	r0, r0, r3
 800455e:	4286      	cmp	r6, r0
 8004560:	d33e      	bcc.n	80045e0 <HAL_UART_Transmit+0x154>
 8004562:	2e00      	cmp	r6, #0
 8004564:	d03c      	beq.n	80045e0 <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004566:	4649      	mov	r1, r9
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4211      	tst	r1, r2
 800456e:	d0c8      	beq.n	8004502 <HAL_UART_Transmit+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004570:	4659      	mov	r1, fp
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	4211      	tst	r1, r2
 8004576:	d164      	bne.n	8004642 <HAL_UART_Transmit+0x1b6>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004578:	2280      	movs	r2, #128	; 0x80
 800457a:	69d9      	ldr	r1, [r3, #28]
 800457c:	0112      	lsls	r2, r2, #4
 800457e:	4211      	tst	r1, r2
 8004580:	d0bf      	beq.n	8004502 <HAL_UART_Transmit+0x76>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004582:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004584:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004588:	2201      	movs	r2, #1
 800458a:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800458e:	6829      	ldr	r1, [r5, #0]
 8004590:	4c46      	ldr	r4, [pc, #280]	; (80046ac <HAL_UART_Transmit+0x220>)
 8004592:	680b      	ldr	r3, [r1, #0]
 8004594:	4023      	ands	r3, r4
 8004596:	600b      	str	r3, [r1, #0]
 8004598:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800459c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a4:	6829      	ldr	r1, [r5, #0]
 80045a6:	688b      	ldr	r3, [r1, #8]
 80045a8:	4393      	bics	r3, r2
 80045aa:	608b      	str	r3, [r1, #8]
 80045ac:	f380 8810 	msr	PRIMASK, r0

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d10a      	bne.n	80045cc <HAL_UART_Transmit+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ba:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045be:	2010      	movs	r0, #16
 80045c0:	682a      	ldr	r2, [r5, #0]
 80045c2:	6813      	ldr	r3, [r2, #0]
 80045c4:	4383      	bics	r3, r0
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045cc:	2220      	movs	r2, #32
 80045ce:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045d0:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80045d2:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d4:	2300      	movs	r3, #0
 80045d6:	662b      	str	r3, [r5, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045d8:	66ab      	str	r3, [r5, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045da:	506a      	str	r2, [r5, r1]
          __HAL_UNLOCK(huart);
 80045dc:	3258      	adds	r2, #88	; 0x58
 80045de:	54ab      	strb	r3, [r5, r2]
      huart->gState = HAL_UART_STATE_READY;
 80045e0:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80045e2:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 80045e4:	67eb      	str	r3, [r5, #124]	; 0x7c
      return HAL_TIMEOUT;
 80045e6:	e7ad      	b.n	8004544 <HAL_UART_Transmit+0xb8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045e8:	4652      	mov	r2, sl
 80045ea:	8812      	ldrh	r2, [r2, #0]
 80045ec:	05d2      	lsls	r2, r2, #23
 80045ee:	0dd2      	lsrs	r2, r2, #23
 80045f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045f2:	2202      	movs	r2, #2
 80045f4:	4694      	mov	ip, r2
 80045f6:	44e2      	add	sl, ip
 80045f8:	e78d      	b.n	8004516 <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 80045fa:	2002      	movs	r0, #2
 80045fc:	e7a2      	b.n	8004544 <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	421c      	tst	r4, r3
 8004602:	d19a      	bne.n	800453a <HAL_UART_Transmit+0xae>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004604:	f7fc ff52 	bl	80014ac <HAL_GetTick>
 8004608:	4643      	mov	r3, r8
 800460a:	1ac0      	subs	r0, r0, r3
 800460c:	4286      	cmp	r6, r0
 800460e:	d3e7      	bcc.n	80045e0 <HAL_UART_Transmit+0x154>
 8004610:	2e00      	cmp	r6, #0
 8004612:	d0e5      	beq.n	80045e0 <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004614:	4649      	mov	r1, r9
 8004616:	682b      	ldr	r3, [r5, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4211      	tst	r1, r2
 800461c:	d100      	bne.n	8004620 <HAL_UART_Transmit+0x194>
 800461e:	e786      	b.n	800452e <HAL_UART_Transmit+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004620:	69da      	ldr	r2, [r3, #28]
 8004622:	4217      	tst	r7, r2
 8004624:	d140      	bne.n	80046a8 <HAL_UART_Transmit+0x21c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004626:	2280      	movs	r2, #128	; 0x80
 8004628:	69d9      	ldr	r1, [r3, #28]
 800462a:	0112      	lsls	r2, r2, #4
 800462c:	4211      	tst	r1, r2
 800462e:	d100      	bne.n	8004632 <HAL_UART_Transmit+0x1a6>
 8004630:	e77d      	b.n	800452e <HAL_UART_Transmit+0xa2>
 8004632:	e7a6      	b.n	8004582 <HAL_UART_Transmit+0xf6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004634:	692b      	ldr	r3, [r5, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d000      	beq.n	800463c <HAL_UART_Transmit+0x1b0>
 800463a:	e757      	b.n	80044ec <HAL_UART_Transmit+0x60>
 800463c:	46ba      	mov	sl, r7
      pdata8bits  = NULL;
 800463e:	2700      	movs	r7, #0
 8004640:	e754      	b.n	80044ec <HAL_UART_Transmit+0x60>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004642:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004644:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004648:	2201      	movs	r2, #1
 800464a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800464e:	6829      	ldr	r1, [r5, #0]
 8004650:	4c16      	ldr	r4, [pc, #88]	; (80046ac <HAL_UART_Transmit+0x220>)
 8004652:	680b      	ldr	r3, [r1, #0]
 8004654:	4023      	ands	r3, r4
 8004656:	600b      	str	r3, [r1, #0]
 8004658:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800465c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004660:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004664:	6829      	ldr	r1, [r5, #0]
 8004666:	688b      	ldr	r3, [r1, #8]
 8004668:	4393      	bics	r3, r2
 800466a:	608b      	str	r3, [r1, #8]
 800466c:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004670:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004672:	2b01      	cmp	r3, #1
 8004674:	d10a      	bne.n	800468c <HAL_UART_Transmit+0x200>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004676:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467e:	2010      	movs	r0, #16
 8004680:	682a      	ldr	r2, [r5, #0]
 8004682:	6813      	ldr	r3, [r2, #0]
 8004684:	4383      	bics	r3, r0
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 800468c:	2380      	movs	r3, #128	; 0x80
 800468e:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004690:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004692:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004694:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004696:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004698:	662b      	str	r3, [r5, #96]	; 0x60
  huart->RxISR = NULL;
 800469a:	66ab      	str	r3, [r5, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800469c:	50a9      	str	r1, [r5, r2]
           __HAL_UNLOCK(huart);
 800469e:	3a0c      	subs	r2, #12
 80046a0:	54ab      	strb	r3, [r5, r2]
 80046a2:	e79d      	b.n	80045e0 <HAL_UART_Transmit+0x154>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a4:	682b      	ldr	r3, [r5, #0]
 80046a6:	e73e      	b.n	8004526 <HAL_UART_Transmit+0x9a>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046a8:	621f      	str	r7, [r3, #32]
 80046aa:	e7cb      	b.n	8004644 <HAL_UART_Transmit+0x1b8>
 80046ac:	fffffedf 	.word	0xfffffedf

080046b0 <HAL_UART_Transmit_DMA>:
{
 80046b0:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80046b2:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	0004      	movs	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80046b8:	2a20      	cmp	r2, #32
 80046ba:	d140      	bne.n	800473e <HAL_UART_Transmit_DMA+0x8e>
    if ((pData == NULL) || (Size == 0U))
 80046bc:	2900      	cmp	r1, #0
 80046be:	d02b      	beq.n	8004718 <HAL_UART_Transmit_DMA+0x68>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d029      	beq.n	8004718 <HAL_UART_Transmit_DMA+0x68>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c4:	2280      	movs	r2, #128	; 0x80
 80046c6:	6880      	ldr	r0, [r0, #8]
 80046c8:	0152      	lsls	r2, r2, #5
 80046ca:	4290      	cmp	r0, r2
 80046cc:	d01f      	beq.n	800470e <HAL_UART_Transmit_DMA+0x5e>
    huart->TxXferSize  = Size;
 80046ce:	2250      	movs	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 80046d0:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80046d2:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 80046d4:	3202      	adds	r2, #2
 80046d6:	52a3      	strh	r3, [r4, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d8:	2021      	movs	r0, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046da:	2584      	movs	r5, #132	; 0x84
 80046dc:	2200      	movs	r2, #0
 80046de:	5162      	str	r2, [r4, r5]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046e0:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (huart->hdmatx != NULL)
 80046e2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d019      	beq.n	800471c <HAL_UART_Transmit_DMA+0x6c>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80046e8:	4e16      	ldr	r6, [pc, #88]	; (8004744 <HAL_UART_Transmit_DMA+0x94>)
      huart->hdmatx->XferAbortCallback = NULL;
 80046ea:	6342      	str	r2, [r0, #52]	; 0x34
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80046ec:	6286      	str	r6, [r0, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80046ee:	4e16      	ldr	r6, [pc, #88]	; (8004748 <HAL_UART_Transmit_DMA+0x98>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80046f0:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80046f2:	62c6      	str	r6, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80046f4:	4e15      	ldr	r6, [pc, #84]	; (800474c <HAL_UART_Transmit_DMA+0x9c>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80046f6:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80046f8:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80046fa:	f7fd fa9f 	bl	8001c3c <HAL_DMA_Start_IT>
 80046fe:	2800      	cmp	r0, #0
 8004700:	d00c      	beq.n	800471c <HAL_UART_Transmit_DMA+0x6c>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004702:	2310      	movs	r3, #16
 8004704:	5163      	str	r3, [r4, r5]
        huart->gState = HAL_UART_STATE_READY;
 8004706:	3310      	adds	r3, #16
        return HAL_ERROR;
 8004708:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 800470a:	67e3      	str	r3, [r4, #124]	; 0x7c
        return HAL_ERROR;
 800470c:	e005      	b.n	800471a <HAL_UART_Transmit_DMA+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800470e:	6922      	ldr	r2, [r4, #16]
 8004710:	2a00      	cmp	r2, #0
 8004712:	d1dc      	bne.n	80046ce <HAL_UART_Transmit_DMA+0x1e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004714:	07ca      	lsls	r2, r1, #31
 8004716:	d5da      	bpl.n	80046ce <HAL_UART_Transmit_DMA+0x1e>
      return HAL_ERROR;
 8004718:	2001      	movs	r0, #1
}
 800471a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800471c:	2240      	movs	r2, #64	; 0x40
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004722:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004726:	2301      	movs	r3, #1
 8004728:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800472c:	2080      	movs	r0, #128	; 0x80
 800472e:	6822      	ldr	r2, [r4, #0]
 8004730:	6893      	ldr	r3, [r2, #8]
 8004732:	4303      	orrs	r3, r0
 8004734:	6093      	str	r3, [r2, #8]
 8004736:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 800473a:	2000      	movs	r0, #0
 800473c:	e7ed      	b.n	800471a <HAL_UART_Transmit_DMA+0x6a>
    return HAL_BUSY;
 800473e:	2002      	movs	r0, #2
 8004740:	e7eb      	b.n	800471a <HAL_UART_Transmit_DMA+0x6a>
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	08004755 	.word	0x08004755
 8004748:	080047a1 	.word	0x080047a1
 800474c:	080047b1 	.word	0x080047b1

08004750 <HAL_UART_TxCpltCallback>:
 8004750:	4770      	bx	lr
 8004752:	46c0      	nop			; (mov r8, r8)

08004754 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004754:	6982      	ldr	r2, [r0, #24]
{
 8004756:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004758:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800475a:	2a20      	cmp	r2, #32
 800475c:	d01a      	beq.n	8004794 <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 800475e:	2252      	movs	r2, #82	; 0x52
 8004760:	2100      	movs	r1, #0
 8004762:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004764:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004768:	3101      	adds	r1, #1
 800476a:	f381 8810 	msr	PRIMASK, r1

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800476e:	2480      	movs	r4, #128	; 0x80
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	6882      	ldr	r2, [r0, #8]
 8004774:	43a2      	bics	r2, r4
 8004776:	6082      	str	r2, [r0, #8]
 8004778:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800477c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004780:	f381 8810 	msr	PRIMASK, r1

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	313f      	adds	r1, #63	; 0x3f
 8004788:	6813      	ldr	r3, [r2, #0]
 800478a:	430b      	orrs	r3, r1
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	f380 8810 	msr	PRIMASK, r0
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004792:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8004794:	0018      	movs	r0, r3
 8004796:	f7ff ffdb 	bl	8004750 <HAL_UART_TxCpltCallback>
}
 800479a:	e7fa      	b.n	8004792 <UART_DMATransmitCplt+0x3e>

0800479c <HAL_UART_TxHalfCpltCallback>:
 800479c:	4770      	bx	lr
 800479e:	46c0      	nop			; (mov r8, r8)

080047a0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80047a0:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80047a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80047a4:	f7ff fffa 	bl	800479c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047a8:	bd10      	pop	{r4, pc}
 80047aa:	46c0      	nop			; (mov r8, r8)

080047ac <HAL_UART_ErrorCallback>:
 80047ac:	4770      	bx	lr
 80047ae:	46c0      	nop			; (mov r8, r8)

080047b0 <UART_DMAError>:
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80047b0:	2280      	movs	r2, #128	; 0x80
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80047b4:	b570      	push	{r4, r5, r6, lr}

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80047b6:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80047b8:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80047ba:	5884      	ldr	r4, [r0, r2]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80047bc:	6899      	ldr	r1, [r3, #8]
 80047be:	420a      	tst	r2, r1
 80047c0:	d001      	beq.n	80047c6 <UART_DMAError+0x16>
 80047c2:	2d21      	cmp	r5, #33	; 0x21
 80047c4:	d00c      	beq.n	80047e0 <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	065b      	lsls	r3, r3, #25
 80047ca:	d501      	bpl.n	80047d0 <UART_DMAError+0x20>
 80047cc:	2c22      	cmp	r4, #34	; 0x22
 80047ce:	d01a      	beq.n	8004806 <UART_DMAError+0x56>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047d0:	2284      	movs	r2, #132	; 0x84
 80047d2:	2110      	movs	r1, #16
 80047d4:	5883      	ldr	r3, [r0, r2]
 80047d6:	430b      	orrs	r3, r1
 80047d8:	5083      	str	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047da:	f7ff ffe7 	bl	80047ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047de:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 80047e0:	2352      	movs	r3, #82	; 0x52
 80047e2:	2200      	movs	r2, #0
 80047e4:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ea:	3b51      	subs	r3, #81	; 0x51
 80047ec:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047f0:	6802      	ldr	r2, [r0, #0]
 80047f2:	359f      	adds	r5, #159	; 0x9f
 80047f4:	6813      	ldr	r3, [r2, #0]
 80047f6:	43ab      	bics	r3, r5
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	f381 8810 	msr	PRIMASK, r1
  huart->gState = HAL_UART_STATE_READY;
 80047fe:	2320      	movs	r3, #32
 8004800:	67c3      	str	r3, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004802:	6803      	ldr	r3, [r0, #0]
}
 8004804:	e7df      	b.n	80047c6 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 8004806:	235a      	movs	r3, #90	; 0x5a
 8004808:	2200      	movs	r2, #0
 800480a:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800480c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004810:	3201      	adds	r2, #1
 8004812:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004816:	6801      	ldr	r1, [r0, #0]
 8004818:	4d12      	ldr	r5, [pc, #72]	; (8004864 <UART_DMAError+0xb4>)
 800481a:	680b      	ldr	r3, [r1, #0]
 800481c:	402b      	ands	r3, r5
 800481e:	600b      	str	r3, [r1, #0]
 8004820:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004824:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004828:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482c:	6801      	ldr	r1, [r0, #0]
 800482e:	688b      	ldr	r3, [r1, #8]
 8004830:	4393      	bics	r3, r2
 8004832:	608b      	str	r3, [r1, #8]
 8004834:	f384 8810 	msr	PRIMASK, r4
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004838:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800483a:	2b01      	cmp	r3, #1
 800483c:	d10a      	bne.n	8004854 <UART_DMAError+0xa4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800483e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004842:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004846:	2410      	movs	r4, #16
 8004848:	6802      	ldr	r2, [r0, #0]
 800484a:	6813      	ldr	r3, [r2, #0]
 800484c:	43a3      	bics	r3, r4
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004854:	2380      	movs	r3, #128	; 0x80
 8004856:	2220      	movs	r2, #32
 8004858:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485a:	2300      	movs	r3, #0
 800485c:	6603      	str	r3, [r0, #96]	; 0x60
  huart->RxISR = NULL;
 800485e:	6683      	str	r3, [r0, #104]	; 0x68
}
 8004860:	e7b6      	b.n	80047d0 <UART_DMAError+0x20>
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	fffffedf 	.word	0xfffffedf

08004868 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	225a      	movs	r2, #90	; 0x5a
{
 800486c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800486e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8004870:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8004872:	3a08      	subs	r2, #8
 8004874:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004876:	f7ff ff99 	bl	80047ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800487a:	bd10      	pop	{r4, pc}

0800487c <HAL_UARTEx_RxEventCallback>:
}
 800487c:	4770      	bx	lr
 800487e:	46c0      	nop			; (mov r8, r8)

08004880 <HAL_UART_IRQHandler>:
{
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004882:	46ce      	mov	lr, r9
 8004884:	4647      	mov	r7, r8
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004886:	6802      	ldr	r2, [r0, #0]
{
 8004888:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800488a:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800488c:	48c7      	ldr	r0, [pc, #796]	; (8004bac <HAL_UART_IRQHandler+0x32c>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800488e:	6811      	ldr	r1, [r2, #0]
{
 8004890:	b580      	push	{r7, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004892:	6895      	ldr	r5, [r2, #8]
  if (errorflags == 0U)
 8004894:	4203      	tst	r3, r0
 8004896:	d000      	beq.n	800489a <HAL_UART_IRQHandler+0x1a>
 8004898:	e07e      	b.n	8004998 <HAL_UART_IRQHandler+0x118>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800489a:	2020      	movs	r0, #32
 800489c:	4218      	tst	r0, r3
 800489e:	d002      	beq.n	80048a6 <HAL_UART_IRQHandler+0x26>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048a0:	4208      	tst	r0, r1
 80048a2:	d000      	beq.n	80048a6 <HAL_UART_IRQHandler+0x26>
 80048a4:	e118      	b.n	8004ad8 <HAL_UART_IRQHandler+0x258>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80048a8:	2801      	cmp	r0, #1
 80048aa:	d01b      	beq.n	80048e4 <HAL_UART_IRQHandler+0x64>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80048ac:	2080      	movs	r0, #128	; 0x80
 80048ae:	0340      	lsls	r0, r0, #13
 80048b0:	4203      	tst	r3, r0
 80048b2:	d002      	beq.n	80048ba <HAL_UART_IRQHandler+0x3a>
 80048b4:	026d      	lsls	r5, r5, #9
 80048b6:	d500      	bpl.n	80048ba <HAL_UART_IRQHandler+0x3a>
 80048b8:	e113      	b.n	8004ae2 <HAL_UART_IRQHandler+0x262>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80048ba:	2280      	movs	r2, #128	; 0x80
 80048bc:	421a      	tst	r2, r3
 80048be:	d109      	bne.n	80048d4 <HAL_UART_IRQHandler+0x54>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048c0:	2240      	movs	r2, #64	; 0x40
 80048c2:	421a      	tst	r2, r3
 80048c4:	d002      	beq.n	80048cc <HAL_UART_IRQHandler+0x4c>
 80048c6:	420a      	tst	r2, r1
 80048c8:	d000      	beq.n	80048cc <HAL_UART_IRQHandler+0x4c>
 80048ca:	e113      	b.n	8004af4 <HAL_UART_IRQHandler+0x274>
}
 80048cc:	bcc0      	pop	{r6, r7}
 80048ce:	46b9      	mov	r9, r7
 80048d0:	46b0      	mov	r8, r6
 80048d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80048d4:	420a      	tst	r2, r1
 80048d6:	d0f3      	beq.n	80048c0 <HAL_UART_IRQHandler+0x40>
    if (huart->TxISR != NULL)
 80048d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f6      	beq.n	80048cc <HAL_UART_IRQHandler+0x4c>
      huart->TxISR(huart);
 80048de:	0020      	movs	r0, r4
 80048e0:	4798      	blx	r3
 80048e2:	e7f3      	b.n	80048cc <HAL_UART_IRQHandler+0x4c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048e4:	2610      	movs	r6, #16
 80048e6:	421e      	tst	r6, r3
 80048e8:	d0e0      	beq.n	80048ac <HAL_UART_IRQHandler+0x2c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048ea:	420e      	tst	r6, r1
 80048ec:	d0de      	beq.n	80048ac <HAL_UART_IRQHandler+0x2c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ee:	2340      	movs	r3, #64	; 0x40
 80048f0:	001d      	movs	r5, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048f2:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f4:	6892      	ldr	r2, [r2, #8]
 80048f6:	4015      	ands	r5, r2
 80048f8:	4213      	tst	r3, r2
 80048fa:	d100      	bne.n	80048fe <HAL_UART_IRQHandler+0x7e>
 80048fc:	e114      	b.n	8004b28 <HAL_UART_IRQHandler+0x2a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048fe:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8004900:	682a      	ldr	r2, [r5, #0]
 8004902:	6852      	ldr	r2, [r2, #4]
 8004904:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004906:	2a00      	cmp	r2, #0
 8004908:	d0e0      	beq.n	80048cc <HAL_UART_IRQHandler+0x4c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800490a:	2158      	movs	r1, #88	; 0x58
 800490c:	4688      	mov	r8, r1
 800490e:	5a61      	ldrh	r1, [r4, r1]
 8004910:	4291      	cmp	r1, r2
 8004912:	d9db      	bls.n	80048cc <HAL_UART_IRQHandler+0x4c>
        huart->RxXferCount = nb_remaining_rx_data;
 8004914:	275a      	movs	r7, #90	; 0x5a
 8004916:	53e2      	strh	r2, [r4, r7]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004918:	69aa      	ldr	r2, [r5, #24]
 800491a:	2a20      	cmp	r2, #32
 800491c:	d032      	beq.n	8004984 <HAL_UART_IRQHandler+0x104>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800491e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004922:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004926:	6821      	ldr	r1, [r4, #0]
 8004928:	4fa1      	ldr	r7, [pc, #644]	; (8004bb0 <HAL_UART_IRQHandler+0x330>)
 800492a:	680a      	ldr	r2, [r1, #0]
 800492c:	403a      	ands	r2, r7
 800492e:	600a      	str	r2, [r1, #0]
 8004930:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004934:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004938:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493c:	6821      	ldr	r1, [r4, #0]
 800493e:	688a      	ldr	r2, [r1, #8]
 8004940:	4382      	bics	r2, r0
 8004942:	608a      	str	r2, [r1, #8]
 8004944:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004948:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494c:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004950:	6821      	ldr	r1, [r4, #0]
 8004952:	688a      	ldr	r2, [r1, #8]
 8004954:	439a      	bics	r2, r3
 8004956:	608a      	str	r2, [r1, #8]
 8004958:	f385 8810 	msr	PRIMASK, r5
          huart->RxState = HAL_UART_STATE_READY;
 800495c:	2220      	movs	r2, #32
 800495e:	3340      	adds	r3, #64	; 0x40
 8004960:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004962:	2300      	movs	r3, #0
 8004964:	6623      	str	r3, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004966:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496a:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800496e:	6822      	ldr	r2, [r4, #0]
 8004970:	6813      	ldr	r3, [r2, #0]
 8004972:	43b3      	bics	r3, r6
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 800497a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800497c:	f7fd f99e 	bl	8001cbc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004980:	4643      	mov	r3, r8
 8004982:	5ae1      	ldrh	r1, [r4, r3]
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004984:	2302      	movs	r3, #2
 8004986:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004988:	3358      	adds	r3, #88	; 0x58
 800498a:	5ae3      	ldrh	r3, [r4, r3]
 800498c:	0020      	movs	r0, r4
 800498e:	1ac9      	subs	r1, r1, r3
 8004990:	b289      	uxth	r1, r1
 8004992:	f7ff ff73 	bl	800487c <HAL_UARTEx_RxEventCallback>
 8004996:	e799      	b.n	80048cc <HAL_UART_IRQHandler+0x4c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004998:	2601      	movs	r6, #1
 800499a:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800499c:	4885      	ldr	r0, [pc, #532]	; (8004bb4 <HAL_UART_IRQHandler+0x334>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 800499e:	402f      	ands	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80049a0:	4008      	ands	r0, r1
 80049a2:	4338      	orrs	r0, r7
 80049a4:	d100      	bne.n	80049a8 <HAL_UART_IRQHandler+0x128>
 80049a6:	e77e      	b.n	80048a6 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049a8:	421e      	tst	r6, r3
 80049aa:	d006      	beq.n	80049ba <HAL_UART_IRQHandler+0x13a>
 80049ac:	05c8      	lsls	r0, r1, #23
 80049ae:	d504      	bpl.n	80049ba <HAL_UART_IRQHandler+0x13a>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049b0:	2584      	movs	r5, #132	; 0x84
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049b2:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049b4:	5960      	ldr	r0, [r4, r5]
 80049b6:	4306      	orrs	r6, r0
 80049b8:	5166      	str	r6, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049ba:	2002      	movs	r0, #2
 80049bc:	4218      	tst	r0, r3
 80049be:	d100      	bne.n	80049c2 <HAL_UART_IRQHandler+0x142>
 80049c0:	e084      	b.n	8004acc <HAL_UART_IRQHandler+0x24c>
 80049c2:	2f00      	cmp	r7, #0
 80049c4:	d00e      	beq.n	80049e4 <HAL_UART_IRQHandler+0x164>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049c6:	2684      	movs	r6, #132	; 0x84
 80049c8:	2504      	movs	r5, #4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049ca:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049cc:	59a0      	ldr	r0, [r4, r6]
 80049ce:	4328      	orrs	r0, r5
 80049d0:	51a0      	str	r0, [r4, r6]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049d2:	421d      	tst	r5, r3
 80049d4:	d006      	beq.n	80049e4 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049d6:	2004      	movs	r0, #4
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049d8:	2584      	movs	r5, #132	; 0x84
 80049da:	2602      	movs	r6, #2
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049dc:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049de:	5960      	ldr	r0, [r4, r5]
 80049e0:	4330      	orrs	r0, r6
 80049e2:	5160      	str	r0, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 80049e4:	2508      	movs	r5, #8
 80049e6:	421d      	tst	r5, r3
 80049e8:	d008      	beq.n	80049fc <HAL_UART_IRQHandler+0x17c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049ea:	2020      	movs	r0, #32
 80049ec:	4008      	ands	r0, r1
 80049ee:	4307      	orrs	r7, r0
 80049f0:	d004      	beq.n	80049fc <HAL_UART_IRQHandler+0x17c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049f2:	2684      	movs	r6, #132	; 0x84
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049f4:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049f6:	59a0      	ldr	r0, [r4, r6]
 80049f8:	4305      	orrs	r5, r0
 80049fa:	51a5      	str	r5, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049fc:	2080      	movs	r0, #128	; 0x80
 80049fe:	0100      	lsls	r0, r0, #4
 8004a00:	4203      	tst	r3, r0
 8004a02:	d007      	beq.n	8004a14 <HAL_UART_IRQHandler+0x194>
 8004a04:	014d      	lsls	r5, r1, #5
 8004a06:	d505      	bpl.n	8004a14 <HAL_UART_IRQHandler+0x194>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a08:	2584      	movs	r5, #132	; 0x84
 8004a0a:	2620      	movs	r6, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a0c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a0e:	5960      	ldr	r0, [r4, r5]
 8004a10:	4330      	orrs	r0, r6
 8004a12:	5160      	str	r0, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a14:	2084      	movs	r0, #132	; 0x84
 8004a16:	5820      	ldr	r0, [r4, r0]
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d100      	bne.n	8004a1e <HAL_UART_IRQHandler+0x19e>
 8004a1c:	e756      	b.n	80048cc <HAL_UART_IRQHandler+0x4c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a1e:	2020      	movs	r0, #32
 8004a20:	4218      	tst	r0, r3
 8004a22:	d001      	beq.n	8004a28 <HAL_UART_IRQHandler+0x1a8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a24:	4208      	tst	r0, r1
 8004a26:	d178      	bne.n	8004b1a <HAL_UART_IRQHandler+0x29a>
      errorcode = huart->ErrorCode;
 8004a28:	2684      	movs	r6, #132	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a2a:	2540      	movs	r5, #64	; 0x40
      errorcode = huart->ErrorCode;
 8004a2c:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a2e:	6893      	ldr	r3, [r2, #8]
 8004a30:	401d      	ands	r5, r3
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a32:	2328      	movs	r3, #40	; 0x28
 8004a34:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a36:	431d      	orrs	r5, r3
 8004a38:	d100      	bne.n	8004a3c <HAL_UART_IRQHandler+0x1bc>
 8004a3a:	e0b2      	b.n	8004ba2 <HAL_UART_IRQHandler+0x322>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a3c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a40:	2201      	movs	r2, #1
 8004a42:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a46:	6821      	ldr	r1, [r4, #0]
 8004a48:	4d5b      	ldr	r5, [pc, #364]	; (8004bb8 <HAL_UART_IRQHandler+0x338>)
 8004a4a:	680b      	ldr	r3, [r1, #0]
 8004a4c:	402b      	ands	r3, r5
 8004a4e:	600b      	str	r3, [r1, #0]
 8004a50:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a54:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a58:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5c:	6821      	ldr	r1, [r4, #0]
 8004a5e:	688b      	ldr	r3, [r1, #8]
 8004a60:	4393      	bics	r3, r2
 8004a62:	608b      	str	r3, [r1, #8]
 8004a64:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a68:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d10a      	bne.n	8004a84 <HAL_UART_IRQHandler+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a6e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a72:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a76:	2010      	movs	r0, #16
 8004a78:	6822      	ldr	r2, [r4, #0]
 8004a7a:	6813      	ldr	r3, [r2, #0]
 8004a7c:	4383      	bics	r3, r0
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004a84:	2380      	movs	r3, #128	; 0x80
 8004a86:	2220      	movs	r2, #32
 8004a88:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8004a8e:	66a3      	str	r3, [r4, #104]	; 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	3220      	adds	r2, #32
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	421a      	tst	r2, r3
 8004a98:	d028      	beq.n	8004aec <HAL_UART_IRQHandler+0x26c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a9a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aa4:	6821      	ldr	r1, [r4, #0]
 8004aa6:	688b      	ldr	r3, [r1, #8]
 8004aa8:	4393      	bics	r3, r2
 8004aaa:	608b      	str	r3, [r1, #8]
 8004aac:	f380 8810 	msr	PRIMASK, r0
          if (huart->hdmarx != NULL)
 8004ab0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	d01a      	beq.n	8004aec <HAL_UART_IRQHandler+0x26c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ab6:	4b41      	ldr	r3, [pc, #260]	; (8004bbc <HAL_UART_IRQHandler+0x33c>)
 8004ab8:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004aba:	f7fd f91f 	bl	8001cfc <HAL_DMA_Abort_IT>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d100      	bne.n	8004ac4 <HAL_UART_IRQHandler+0x244>
 8004ac2:	e703      	b.n	80048cc <HAL_UART_IRQHandler+0x4c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ac4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004ac6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ac8:	4798      	blx	r3
 8004aca:	e6ff      	b.n	80048cc <HAL_UART_IRQHandler+0x4c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004acc:	0758      	lsls	r0, r3, #29
 8004ace:	d589      	bpl.n	80049e4 <HAL_UART_IRQHandler+0x164>
 8004ad0:	2f00      	cmp	r7, #0
 8004ad2:	d000      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x256>
 8004ad4:	e77f      	b.n	80049d6 <HAL_UART_IRQHandler+0x156>
 8004ad6:	e785      	b.n	80049e4 <HAL_UART_IRQHandler+0x164>
      if (huart->RxISR != NULL)
 8004ad8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d000      	beq.n	8004ae0 <HAL_UART_IRQHandler+0x260>
 8004ade:	e6fe      	b.n	80048de <HAL_UART_IRQHandler+0x5e>
 8004ae0:	e6f4      	b.n	80048cc <HAL_UART_IRQHandler+0x4c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ae2:	6210      	str	r0, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004ae4:	0020      	movs	r0, r4
 8004ae6:	f000 faed 	bl	80050c4 <HAL_UARTEx_WakeupCallback>
    return;
 8004aea:	e6ef      	b.n	80048cc <HAL_UART_IRQHandler+0x4c>
            HAL_UART_ErrorCallback(huart);
 8004aec:	0020      	movs	r0, r4
 8004aee:	f7ff fe5d 	bl	80047ac <HAL_UART_ErrorCallback>
 8004af2:	e6eb      	b.n	80048cc <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af8:	2301      	movs	r3, #1
 8004afa:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004afe:	6821      	ldr	r1, [r4, #0]
 8004b00:	680b      	ldr	r3, [r1, #0]
 8004b02:	4393      	bics	r3, r2
 8004b04:	600b      	str	r3, [r1, #0]
 8004b06:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b0a:	2320      	movs	r3, #32
 8004b0c:	67e3      	str	r3, [r4, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b0e:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b10:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8004b12:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_TxCpltCallback(huart);
 8004b14:	f7ff fe1c 	bl	8004750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b18:	e6d8      	b.n	80048cc <HAL_UART_IRQHandler+0x4c>
        if (huart->RxISR != NULL)
 8004b1a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d083      	beq.n	8004a28 <HAL_UART_IRQHandler+0x1a8>
          huart->RxISR(huart);
 8004b20:	0020      	movs	r0, r4
 8004b22:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b24:	6822      	ldr	r2, [r4, #0]
 8004b26:	e77f      	b.n	8004a28 <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b28:	225a      	movs	r2, #90	; 0x5a
 8004b2a:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 8004b2c:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b2e:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8004b30:	2a00      	cmp	r2, #0
 8004b32:	d100      	bne.n	8004b36 <HAL_UART_IRQHandler+0x2b6>
 8004b34:	e6ca      	b.n	80048cc <HAL_UART_IRQHandler+0x4c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b36:	2258      	movs	r2, #88	; 0x58
 8004b38:	5aa1      	ldrh	r1, [r4, r2]
 8004b3a:	1ac9      	subs	r1, r1, r3
 8004b3c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004b3e:	2900      	cmp	r1, #0
 8004b40:	d100      	bne.n	8004b44 <HAL_UART_IRQHandler+0x2c4>
 8004b42:	e6c3      	b.n	80048cc <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b44:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b48:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	4699      	mov	r9, r3
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4698      	mov	r8, r3
 8004b54:	4642      	mov	r2, r8
 8004b56:	4b18      	ldr	r3, [pc, #96]	; (8004bb8 <HAL_UART_IRQHandler+0x338>)
 8004b58:	401a      	ands	r2, r3
 8004b5a:	0013      	movs	r3, r2
 8004b5c:	464a      	mov	r2, r9
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b64:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b68:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6c:	6822      	ldr	r2, [r4, #0]
 8004b6e:	6893      	ldr	r3, [r2, #8]
 8004b70:	4383      	bics	r3, r0
 8004b72:	6093      	str	r3, [r2, #8]
 8004b74:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8004b78:	2380      	movs	r3, #128	; 0x80
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7e:	6625      	str	r5, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8004b80:	66a5      	str	r5, [r4, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b82:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b86:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8a:	6822      	ldr	r2, [r4, #0]
 8004b8c:	6813      	ldr	r3, [r2, #0]
 8004b8e:	43b3      	bics	r3, r6
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	f385 8810 	msr	PRIMASK, r5
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b96:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b98:	0020      	movs	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b9a:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b9c:	f7ff fe6e 	bl	800487c <HAL_UARTEx_RxEventCallback>
 8004ba0:	e694      	b.n	80048cc <HAL_UART_IRQHandler+0x4c>
        HAL_UART_ErrorCallback(huart);
 8004ba2:	0020      	movs	r0, r4
 8004ba4:	f7ff fe02 	bl	80047ac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba8:	51a5      	str	r5, [r4, r6]
 8004baa:	e68f      	b.n	80048cc <HAL_UART_IRQHandler+0x4c>
 8004bac:	0000080f 	.word	0x0000080f
 8004bb0:	fffffeff 	.word	0xfffffeff
 8004bb4:	04000120 	.word	0x04000120
 8004bb8:	fffffedf 	.word	0xfffffedf
 8004bbc:	08004869 	.word	0x08004869

08004bc0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004bc2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bc4:	07da      	lsls	r2, r3, #31
 8004bc6:	d506      	bpl.n	8004bd6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bc8:	6801      	ldr	r1, [r0, #0]
 8004bca:	4c28      	ldr	r4, [pc, #160]	; (8004c6c <UART_AdvFeatureConfig+0xac>)
 8004bcc:	684a      	ldr	r2, [r1, #4]
 8004bce:	4022      	ands	r2, r4
 8004bd0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004bd2:	4322      	orrs	r2, r4
 8004bd4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bd6:	079a      	lsls	r2, r3, #30
 8004bd8:	d506      	bpl.n	8004be8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bda:	6801      	ldr	r1, [r0, #0]
 8004bdc:	4c24      	ldr	r4, [pc, #144]	; (8004c70 <UART_AdvFeatureConfig+0xb0>)
 8004bde:	684a      	ldr	r2, [r1, #4]
 8004be0:	4022      	ands	r2, r4
 8004be2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004be4:	4322      	orrs	r2, r4
 8004be6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004be8:	075a      	lsls	r2, r3, #29
 8004bea:	d506      	bpl.n	8004bfa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bec:	6801      	ldr	r1, [r0, #0]
 8004bee:	4c21      	ldr	r4, [pc, #132]	; (8004c74 <UART_AdvFeatureConfig+0xb4>)
 8004bf0:	684a      	ldr	r2, [r1, #4]
 8004bf2:	4022      	ands	r2, r4
 8004bf4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004bf6:	4322      	orrs	r2, r4
 8004bf8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bfa:	071a      	lsls	r2, r3, #28
 8004bfc:	d506      	bpl.n	8004c0c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bfe:	6801      	ldr	r1, [r0, #0]
 8004c00:	4c1d      	ldr	r4, [pc, #116]	; (8004c78 <UART_AdvFeatureConfig+0xb8>)
 8004c02:	684a      	ldr	r2, [r1, #4]
 8004c04:	4022      	ands	r2, r4
 8004c06:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004c08:	4322      	orrs	r2, r4
 8004c0a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c0c:	06da      	lsls	r2, r3, #27
 8004c0e:	d506      	bpl.n	8004c1e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c10:	6801      	ldr	r1, [r0, #0]
 8004c12:	4c1a      	ldr	r4, [pc, #104]	; (8004c7c <UART_AdvFeatureConfig+0xbc>)
 8004c14:	688a      	ldr	r2, [r1, #8]
 8004c16:	4022      	ands	r2, r4
 8004c18:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004c1a:	4322      	orrs	r2, r4
 8004c1c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c1e:	069a      	lsls	r2, r3, #26
 8004c20:	d506      	bpl.n	8004c30 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c22:	6801      	ldr	r1, [r0, #0]
 8004c24:	4c16      	ldr	r4, [pc, #88]	; (8004c80 <UART_AdvFeatureConfig+0xc0>)
 8004c26:	688a      	ldr	r2, [r1, #8]
 8004c28:	4022      	ands	r2, r4
 8004c2a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004c2c:	4322      	orrs	r2, r4
 8004c2e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c30:	065a      	lsls	r2, r3, #25
 8004c32:	d50a      	bpl.n	8004c4a <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c34:	6801      	ldr	r1, [r0, #0]
 8004c36:	4d13      	ldr	r5, [pc, #76]	; (8004c84 <UART_AdvFeatureConfig+0xc4>)
 8004c38:	684a      	ldr	r2, [r1, #4]
 8004c3a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004c3c:	402a      	ands	r2, r5
 8004c3e:	4322      	orrs	r2, r4
 8004c40:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c42:	2280      	movs	r2, #128	; 0x80
 8004c44:	0352      	lsls	r2, r2, #13
 8004c46:	4294      	cmp	r4, r2
 8004c48:	d009      	beq.n	8004c5e <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c4a:	061b      	lsls	r3, r3, #24
 8004c4c:	d506      	bpl.n	8004c5c <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c4e:	6802      	ldr	r2, [r0, #0]
 8004c50:	490d      	ldr	r1, [pc, #52]	; (8004c88 <UART_AdvFeatureConfig+0xc8>)
 8004c52:	6853      	ldr	r3, [r2, #4]
 8004c54:	400b      	ands	r3, r1
 8004c56:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	6053      	str	r3, [r2, #4]
}
 8004c5c:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c5e:	684a      	ldr	r2, [r1, #4]
 8004c60:	4c0a      	ldr	r4, [pc, #40]	; (8004c8c <UART_AdvFeatureConfig+0xcc>)
 8004c62:	4022      	ands	r2, r4
 8004c64:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004c66:	4322      	orrs	r2, r4
 8004c68:	604a      	str	r2, [r1, #4]
 8004c6a:	e7ee      	b.n	8004c4a <UART_AdvFeatureConfig+0x8a>
 8004c6c:	fffdffff 	.word	0xfffdffff
 8004c70:	fffeffff 	.word	0xfffeffff
 8004c74:	fffbffff 	.word	0xfffbffff
 8004c78:	ffff7fff 	.word	0xffff7fff
 8004c7c:	ffffefff 	.word	0xffffefff
 8004c80:	ffffdfff 	.word	0xffffdfff
 8004c84:	ffefffff 	.word	0xffefffff
 8004c88:	fff7ffff 	.word	0xfff7ffff
 8004c8c:	ff9fffff 	.word	0xff9fffff

08004c90 <UART_CheckIdleState>:
{
 8004c90:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c92:	2384      	movs	r3, #132	; 0x84
 8004c94:	2200      	movs	r2, #0
{
 8004c96:	46c6      	mov	lr, r8
 8004c98:	0004      	movs	r4, r0
 8004c9a:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9c:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8004c9e:	f7fc fc05 	bl	80014ac <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ca2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004ca4:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	0712      	lsls	r2, r2, #28
 8004caa:	d40f      	bmi.n	8004ccc <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	0752      	lsls	r2, r2, #29
 8004cb0:	d43e      	bmi.n	8004d30 <UART_CheckIdleState+0xa0>
  huart->gState = HAL_UART_STATE_READY;
 8004cb2:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 8004cb4:	2280      	movs	r2, #128	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8004cb6:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cb8:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cba:	2300      	movs	r3, #0
  return HAL_OK;
 8004cbc:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8004cbe:	3a08      	subs	r2, #8
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc0:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cc2:	6663      	str	r3, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8004cc4:	54a3      	strb	r3, [r4, r2]
}
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	46b8      	mov	r8, r7
 8004cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ccc:	69da      	ldr	r2, [r3, #28]
 8004cce:	0292      	lsls	r2, r2, #10
 8004cd0:	d4ec      	bmi.n	8004cac <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd2:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cd4:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cd6:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cd8:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cda:	04b6      	lsls	r6, r6, #18
 8004cdc:	e010      	b.n	8004d00 <UART_CheckIdleState+0x70>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4217      	tst	r7, r2
 8004ce4:	d009      	beq.n	8004cfa <UART_CheckIdleState+0x6a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ce6:	4641      	mov	r1, r8
 8004ce8:	69da      	ldr	r2, [r3, #28]
 8004cea:	4211      	tst	r1, r2
 8004cec:	d15e      	bne.n	8004dac <UART_CheckIdleState+0x11c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cee:	2280      	movs	r2, #128	; 0x80
 8004cf0:	69d9      	ldr	r1, [r3, #28]
 8004cf2:	0112      	lsls	r2, r2, #4
 8004cf4:	4211      	tst	r1, r2
 8004cf6:	d000      	beq.n	8004cfa <UART_CheckIdleState+0x6a>
 8004cf8:	e089      	b.n	8004e0e <UART_CheckIdleState+0x17e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cfa:	69da      	ldr	r2, [r3, #28]
 8004cfc:	0292      	lsls	r2, r2, #10
 8004cfe:	d4d5      	bmi.n	8004cac <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d00:	f7fc fbd4 	bl	80014ac <HAL_GetTick>
 8004d04:	1b40      	subs	r0, r0, r5
 8004d06:	42b0      	cmp	r0, r6
 8004d08:	d3e9      	bcc.n	8004cde <UART_CheckIdleState+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d0a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d14:	2080      	movs	r0, #128	; 0x80
 8004d16:	6822      	ldr	r2, [r4, #0]
 8004d18:	6813      	ldr	r3, [r2, #0]
 8004d1a:	4383      	bics	r3, r0
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8004d22:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 8004d24:	2200      	movs	r2, #0
      huart->gState = HAL_UART_STATE_READY;
 8004d26:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8004d28:	3358      	adds	r3, #88	; 0x58
 8004d2a:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004d2c:	387d      	subs	r0, #125	; 0x7d
 8004d2e:	e7ca      	b.n	8004cc6 <UART_CheckIdleState+0x36>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	025b      	lsls	r3, r3, #9
 8004d34:	d4bd      	bmi.n	8004cb2 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d36:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d38:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d3a:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d3c:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3e:	04b6      	lsls	r6, r6, #18
 8004d40:	e011      	b.n	8004d66 <UART_CheckIdleState+0xd6>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4217      	tst	r7, r2
 8004d48:	d00a      	beq.n	8004d60 <UART_CheckIdleState+0xd0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d4a:	4641      	mov	r1, r8
 8004d4c:	69da      	ldr	r2, [r3, #28]
 8004d4e:	4211      	tst	r1, r2
 8004d50:	d000      	beq.n	8004d54 <UART_CheckIdleState+0xc4>
 8004d52:	e08c      	b.n	8004e6e <UART_CheckIdleState+0x1de>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d54:	2280      	movs	r2, #128	; 0x80
 8004d56:	69d9      	ldr	r1, [r3, #28]
 8004d58:	0112      	lsls	r2, r2, #4
 8004d5a:	4211      	tst	r1, r2
 8004d5c:	d000      	beq.n	8004d60 <UART_CheckIdleState+0xd0>
 8004d5e:	e0b7      	b.n	8004ed0 <UART_CheckIdleState+0x240>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	025b      	lsls	r3, r3, #9
 8004d64:	d4a5      	bmi.n	8004cb2 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d66:	f7fc fba1 	bl	80014ac <HAL_GetTick>
 8004d6a:	1b40      	subs	r0, r0, r5
 8004d6c:	42b0      	cmp	r0, r6
 8004d6e:	d3e8      	bcc.n	8004d42 <UART_CheckIdleState+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d70:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d74:	2201      	movs	r2, #1
 8004d76:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d7a:	6821      	ldr	r1, [r4, #0]
 8004d7c:	4d6c      	ldr	r5, [pc, #432]	; (8004f30 <UART_CheckIdleState+0x2a0>)
 8004d7e:	680b      	ldr	r3, [r1, #0]
 8004d80:	402b      	ands	r3, r5
 8004d82:	600b      	str	r3, [r1, #0]
 8004d84:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d88:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d8c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d90:	6821      	ldr	r1, [r4, #0]
 8004d92:	688b      	ldr	r3, [r1, #8]
 8004d94:	4393      	bics	r3, r2
 8004d96:	608b      	str	r3, [r1, #8]
 8004d98:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004d9c:	2380      	movs	r3, #128	; 0x80
 8004d9e:	321f      	adds	r2, #31
 8004da0:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8004da2:	2200      	movs	r2, #0
 8004da4:	3b08      	subs	r3, #8
      return HAL_TIMEOUT;
 8004da6:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8004da8:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004daa:	e78c      	b.n	8004cc6 <UART_CheckIdleState+0x36>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dac:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dae:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db2:	2201      	movs	r2, #1
 8004db4:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004db8:	6821      	ldr	r1, [r4, #0]
 8004dba:	4d5d      	ldr	r5, [pc, #372]	; (8004f30 <UART_CheckIdleState+0x2a0>)
 8004dbc:	680b      	ldr	r3, [r1, #0]
 8004dbe:	402b      	ands	r3, r5
 8004dc0:	600b      	str	r3, [r1, #0]
 8004dc2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dca:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dce:	6821      	ldr	r1, [r4, #0]
 8004dd0:	688b      	ldr	r3, [r1, #8]
 8004dd2:	4393      	bics	r3, r2
 8004dd4:	608b      	str	r3, [r1, #8]
 8004dd6:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dda:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d10a      	bne.n	8004df6 <UART_CheckIdleState+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de8:	2010      	movs	r0, #16
 8004dea:	6822      	ldr	r2, [r4, #0]
 8004dec:	6813      	ldr	r3, [r2, #0]
 8004dee:	4383      	bics	r3, r0
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004df6:	2380      	movs	r3, #128	; 0x80
 8004df8:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dfa:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004dfc:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfe:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e00:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e02:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8004e04:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e06:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8004e08:	3a0c      	subs	r2, #12
 8004e0a:	54a3      	strb	r3, [r4, r2]
 8004e0c:	e77d      	b.n	8004d0a <UART_CheckIdleState+0x7a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e0e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e10:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e14:	2201      	movs	r2, #1
 8004e16:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e1a:	6821      	ldr	r1, [r4, #0]
 8004e1c:	4d44      	ldr	r5, [pc, #272]	; (8004f30 <UART_CheckIdleState+0x2a0>)
 8004e1e:	680b      	ldr	r3, [r1, #0]
 8004e20:	402b      	ands	r3, r5
 8004e22:	600b      	str	r3, [r1, #0]
 8004e24:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e28:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e30:	6821      	ldr	r1, [r4, #0]
 8004e32:	688b      	ldr	r3, [r1, #8]
 8004e34:	4393      	bics	r3, r2
 8004e36:	608b      	str	r3, [r1, #8]
 8004e38:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e3c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d10a      	bne.n	8004e58 <UART_CheckIdleState+0x1c8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e42:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e46:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4a:	2010      	movs	r0, #16
 8004e4c:	6822      	ldr	r2, [r4, #0]
 8004e4e:	6813      	ldr	r3, [r2, #0]
 8004e50:	4383      	bics	r3, r0
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004e58:	2220      	movs	r2, #32
 8004e5a:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e5c:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004e5e:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e60:	2300      	movs	r3, #0
 8004e62:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8004e64:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e66:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8004e68:	3258      	adds	r2, #88	; 0x58
 8004e6a:	54a3      	strb	r3, [r4, r2]
 8004e6c:	e74d      	b.n	8004d0a <UART_CheckIdleState+0x7a>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e6e:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e70:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e74:	2201      	movs	r2, #1
 8004e76:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e7a:	6821      	ldr	r1, [r4, #0]
 8004e7c:	4d2c      	ldr	r5, [pc, #176]	; (8004f30 <UART_CheckIdleState+0x2a0>)
 8004e7e:	680b      	ldr	r3, [r1, #0]
 8004e80:	402b      	ands	r3, r5
 8004e82:	600b      	str	r3, [r1, #0]
 8004e84:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e88:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e90:	6821      	ldr	r1, [r4, #0]
 8004e92:	688b      	ldr	r3, [r1, #8]
 8004e94:	4393      	bics	r3, r2
 8004e96:	608b      	str	r3, [r1, #8]
 8004e98:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d10a      	bne.n	8004eb8 <UART_CheckIdleState+0x228>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea6:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eaa:	2010      	movs	r0, #16
 8004eac:	6822      	ldr	r2, [r4, #0]
 8004eae:	6813      	ldr	r3, [r2, #0]
 8004eb0:	4383      	bics	r3, r0
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004eb8:	2380      	movs	r3, #128	; 0x80
 8004eba:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ebc:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec0:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ec2:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec4:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8004ec6:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ec8:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8004eca:	3a0c      	subs	r2, #12
 8004ecc:	54a3      	strb	r3, [r4, r2]
 8004ece:	e74f      	b.n	8004d70 <UART_CheckIdleState+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ed0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004edc:	6821      	ldr	r1, [r4, #0]
 8004ede:	4d14      	ldr	r5, [pc, #80]	; (8004f30 <UART_CheckIdleState+0x2a0>)
 8004ee0:	680b      	ldr	r3, [r1, #0]
 8004ee2:	402b      	ands	r3, r5
 8004ee4:	600b      	str	r3, [r1, #0]
 8004ee6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eea:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eee:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef2:	6821      	ldr	r1, [r4, #0]
 8004ef4:	688b      	ldr	r3, [r1, #8]
 8004ef6:	4393      	bics	r3, r2
 8004ef8:	608b      	str	r3, [r1, #8]
 8004efa:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d10a      	bne.n	8004f1a <UART_CheckIdleState+0x28a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f04:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f08:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f0c:	2010      	movs	r0, #16
 8004f0e:	6822      	ldr	r2, [r4, #0]
 8004f10:	6813      	ldr	r3, [r2, #0]
 8004f12:	4383      	bics	r3, r0
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f1e:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004f20:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f22:	2300      	movs	r3, #0
 8004f24:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8004f26:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f28:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8004f2a:	3258      	adds	r2, #88	; 0x58
 8004f2c:	54a3      	strb	r3, [r4, r2]
 8004f2e:	e71f      	b.n	8004d70 <UART_CheckIdleState+0xe0>
 8004f30:	fffffedf 	.word	0xfffffedf

08004f34 <HAL_UART_Init>:
{
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004f38:	d100      	bne.n	8004f3c <HAL_UART_Init+0x8>
 8004f3a:	e07c      	b.n	8005036 <HAL_UART_Init+0x102>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004f3c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d100      	bne.n	8004f44 <HAL_UART_Init+0x10>
 8004f42:	e073      	b.n	800502c <HAL_UART_Init+0xf8>
  huart->gState = HAL_UART_STATE_BUSY;
 8004f44:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004f46:	2101      	movs	r1, #1
 8004f48:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004f4a:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004f4c:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f4e:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8004f50:	438b      	bics	r3, r1
 8004f52:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f54:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f56:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f58:	432b      	orrs	r3, r5
 8004f5a:	6965      	ldr	r5, [r4, #20]
 8004f5c:	69e1      	ldr	r1, [r4, #28]
 8004f5e:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f60:	4d4e      	ldr	r5, [pc, #312]	; (800509c <HAL_UART_Init+0x168>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f62:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f64:	4028      	ands	r0, r5
 8004f66:	4303      	orrs	r3, r0
 8004f68:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f6a:	6853      	ldr	r3, [r2, #4]
 8004f6c:	484c      	ldr	r0, [pc, #304]	; (80050a0 <HAL_UART_Init+0x16c>)
  tmpreg |= huart->Init.OneBitSampling;
 8004f6e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f70:	4003      	ands	r3, r0
 8004f72:	68e0      	ldr	r0, [r4, #12]
 8004f74:	4303      	orrs	r3, r0
 8004f76:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8004f78:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f7a:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8004f7c:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f7e:	4d49      	ldr	r5, [pc, #292]	; (80050a4 <HAL_UART_Init+0x170>)
 8004f80:	4028      	ands	r0, r5
 8004f82:	4303      	orrs	r3, r0
 8004f84:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f86:	4b48      	ldr	r3, [pc, #288]	; (80050a8 <HAL_UART_Init+0x174>)
 8004f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d912      	bls.n	8004fba <HAL_UART_Init+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f94:	2380      	movs	r3, #128	; 0x80
 8004f96:	021b      	lsls	r3, r3, #8
 8004f98:	4299      	cmp	r1, r3
 8004f9a:	d100      	bne.n	8004f9e <HAL_UART_Init+0x6a>
 8004f9c:	e07a      	b.n	8005094 <HAL_UART_Init+0x160>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f9e:	f7fe f8a1 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	d117      	bne.n	8004fd6 <HAL_UART_Init+0xa2>
  huart->RxISR = NULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8004faa:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d024      	beq.n	8004ffc <HAL_UART_Init+0xc8>
    UART_AdvFeatureConfig(huart);
 8004fb2:	0020      	movs	r0, r4
 8004fb4:	f7ff fe04 	bl	8004bc0 <UART_AdvFeatureConfig>
 8004fb8:	e020      	b.n	8004ffc <HAL_UART_Init+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fba:	2080      	movs	r0, #128	; 0x80
 8004fbc:	4a3b      	ldr	r2, [pc, #236]	; (80050ac <HAL_UART_Init+0x178>)
 8004fbe:	0200      	lsls	r0, r0, #8
 8004fc0:	5cd3      	ldrb	r3, [r2, r3]
 8004fc2:	4281      	cmp	r1, r0
 8004fc4:	d039      	beq.n	800503a <HAL_UART_Init+0x106>
    switch (clocksource)
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d05a      	beq.n	8005080 <HAL_UART_Init+0x14c>
 8004fca:	d828      	bhi.n	800501e <HAL_UART_Init+0xea>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0e6      	beq.n	8004f9e <HAL_UART_Init+0x6a>
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d126      	bne.n	8005022 <HAL_UART_Init+0xee>
        pclk = (uint32_t) HSI_VALUE;
 8004fd4:	4836      	ldr	r0, [pc, #216]	; (80050b0 <HAL_UART_Init+0x17c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fd6:	6863      	ldr	r3, [r4, #4]
 8004fd8:	6861      	ldr	r1, [r4, #4]
 8004fda:	085b      	lsrs	r3, r3, #1
 8004fdc:	1818      	adds	r0, r3, r0
 8004fde:	f7fb f89d 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fe2:	0002      	movs	r2, r0
 8004fe4:	4b33      	ldr	r3, [pc, #204]	; (80050b4 <HAL_UART_Init+0x180>)
 8004fe6:	3a10      	subs	r2, #16
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d81a      	bhi.n	8005022 <HAL_UART_Init+0xee>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8004ff4:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1da      	bne.n	8004fb2 <HAL_UART_Init+0x7e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	492e      	ldr	r1, [pc, #184]	; (80050b8 <HAL_UART_Init+0x184>)
 8005000:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005002:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005004:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005006:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005008:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	438a      	bics	r2, r1
 800500e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	3929      	subs	r1, #41	; 0x29
 8005014:	430a      	orrs	r2, r1
 8005016:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005018:	f7ff fe3a 	bl	8004c90 <UART_CheckIdleState>
 800501c:	e005      	b.n	800502a <HAL_UART_Init+0xf6>
    switch (clocksource)
 800501e:	2b08      	cmp	r3, #8
 8005020:	d0d9      	beq.n	8004fd6 <HAL_UART_Init+0xa2>
  huart->RxISR = NULL;
 8005022:	2300      	movs	r3, #0
    return HAL_ERROR;
 8005024:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8005026:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8005028:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800502a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800502c:	2278      	movs	r2, #120	; 0x78
 800502e:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8005030:	f7fc f8de 	bl	80011f0 <HAL_UART_MspInit>
 8005034:	e786      	b.n	8004f44 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8005036:	2001      	movs	r0, #1
 8005038:	e7f7      	b.n	800502a <HAL_UART_Init+0xf6>
    switch (clocksource)
 800503a:	2b04      	cmp	r3, #4
 800503c:	d023      	beq.n	8005086 <HAL_UART_Init+0x152>
 800503e:	d81a      	bhi.n	8005076 <HAL_UART_Init+0x142>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d027      	beq.n	8005094 <HAL_UART_Init+0x160>
 8005044:	2b02      	cmp	r3, #2
 8005046:	d1ec      	bne.n	8005022 <HAL_UART_Init+0xee>
 8005048:	481c      	ldr	r0, [pc, #112]	; (80050bc <HAL_UART_Init+0x188>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800504a:	6863      	ldr	r3, [r4, #4]
 800504c:	6861      	ldr	r1, [r4, #4]
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	1818      	adds	r0, r3, r0
 8005052:	f7fb f863 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005056:	0002      	movs	r2, r0
 8005058:	4b16      	ldr	r3, [pc, #88]	; (80050b4 <HAL_UART_Init+0x180>)
 800505a:	3a10      	subs	r2, #16
 800505c:	429a      	cmp	r2, r3
 800505e:	d8e0      	bhi.n	8005022 <HAL_UART_Init+0xee>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005060:	4b17      	ldr	r3, [pc, #92]	; (80050c0 <HAL_UART_Init+0x18c>)
        huart->Instance->BRR = brrtemp;
 8005062:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005064:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005066:	0700      	lsls	r0, r0, #28
 8005068:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800506a:	4318      	orrs	r0, r3
  huart->RxISR = NULL;
 800506c:	2300      	movs	r3, #0
        huart->Instance->BRR = brrtemp;
 800506e:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 8005070:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8005072:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005074:	e7bf      	b.n	8004ff6 <HAL_UART_Init+0xc2>
    switch (clocksource)
 8005076:	2b08      	cmp	r3, #8
 8005078:	d1d3      	bne.n	8005022 <HAL_UART_Init+0xee>
 800507a:	2080      	movs	r0, #128	; 0x80
 800507c:	0240      	lsls	r0, r0, #9
 800507e:	e7e4      	b.n	800504a <HAL_UART_Init+0x116>
        pclk = HAL_RCC_GetSysClockFreq();
 8005080:	f7fe f806 	bl	8003090 <HAL_RCC_GetSysClockFreq>
        break;
 8005084:	e78d      	b.n	8004fa2 <HAL_UART_Init+0x6e>
        pclk = HAL_RCC_GetSysClockFreq();
 8005086:	f7fe f803 	bl	8003090 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800508a:	2800      	cmp	r0, #0
 800508c:	d100      	bne.n	8005090 <HAL_UART_Init+0x15c>
 800508e:	e78a      	b.n	8004fa6 <HAL_UART_Init+0x72>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005090:	0040      	lsls	r0, r0, #1
 8005092:	e7da      	b.n	800504a <HAL_UART_Init+0x116>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005094:	f7fe f826 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
        break;
 8005098:	e7f7      	b.n	800508a <HAL_UART_Init+0x156>
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	ffff69f3 	.word	0xffff69f3
 80050a0:	ffffcfff 	.word	0xffffcfff
 80050a4:	fffff4ff 	.word	0xfffff4ff
 80050a8:	40021000 	.word	0x40021000
 80050ac:	08006514 	.word	0x08006514
 80050b0:	007a1200 	.word	0x007a1200
 80050b4:	0000ffef 	.word	0x0000ffef
 80050b8:	ffffb7ff 	.word	0xffffb7ff
 80050bc:	00f42400 	.word	0x00f42400
 80050c0:	0000fff0 	.word	0x0000fff0

080050c4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050c4:	4770      	bx	lr
 80050c6:	46c0      	nop			; (mov r8, r8)

080050c8 <__errno>:
 80050c8:	4b01      	ldr	r3, [pc, #4]	; (80050d0 <__errno+0x8>)
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	4770      	bx	lr
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	2000000c 	.word	0x2000000c

080050d4 <__libc_init_array>:
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	2600      	movs	r6, #0
 80050d8:	4d0c      	ldr	r5, [pc, #48]	; (800510c <__libc_init_array+0x38>)
 80050da:	4c0d      	ldr	r4, [pc, #52]	; (8005110 <__libc_init_array+0x3c>)
 80050dc:	1b64      	subs	r4, r4, r5
 80050de:	10a4      	asrs	r4, r4, #2
 80050e0:	42a6      	cmp	r6, r4
 80050e2:	d109      	bne.n	80050f8 <__libc_init_array+0x24>
 80050e4:	2600      	movs	r6, #0
 80050e6:	f001 f8cf 	bl	8006288 <_init>
 80050ea:	4d0a      	ldr	r5, [pc, #40]	; (8005114 <__libc_init_array+0x40>)
 80050ec:	4c0a      	ldr	r4, [pc, #40]	; (8005118 <__libc_init_array+0x44>)
 80050ee:	1b64      	subs	r4, r4, r5
 80050f0:	10a4      	asrs	r4, r4, #2
 80050f2:	42a6      	cmp	r6, r4
 80050f4:	d105      	bne.n	8005102 <__libc_init_array+0x2e>
 80050f6:	bd70      	pop	{r4, r5, r6, pc}
 80050f8:	00b3      	lsls	r3, r6, #2
 80050fa:	58eb      	ldr	r3, [r5, r3]
 80050fc:	4798      	blx	r3
 80050fe:	3601      	adds	r6, #1
 8005100:	e7ee      	b.n	80050e0 <__libc_init_array+0xc>
 8005102:	00b3      	lsls	r3, r6, #2
 8005104:	58eb      	ldr	r3, [r5, r3]
 8005106:	4798      	blx	r3
 8005108:	3601      	adds	r6, #1
 800510a:	e7f2      	b.n	80050f2 <__libc_init_array+0x1e>
 800510c:	080065b0 	.word	0x080065b0
 8005110:	080065b0 	.word	0x080065b0
 8005114:	080065b0 	.word	0x080065b0
 8005118:	080065b4 	.word	0x080065b4

0800511c <memset>:
 800511c:	0003      	movs	r3, r0
 800511e:	1882      	adds	r2, r0, r2
 8005120:	4293      	cmp	r3, r2
 8005122:	d100      	bne.n	8005126 <memset+0xa>
 8005124:	4770      	bx	lr
 8005126:	7019      	strb	r1, [r3, #0]
 8005128:	3301      	adds	r3, #1
 800512a:	e7f9      	b.n	8005120 <memset+0x4>

0800512c <_puts_r>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	0005      	movs	r5, r0
 8005130:	000e      	movs	r6, r1
 8005132:	2800      	cmp	r0, #0
 8005134:	d004      	beq.n	8005140 <_puts_r+0x14>
 8005136:	6983      	ldr	r3, [r0, #24]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <_puts_r+0x14>
 800513c:	f000 fa8e 	bl	800565c <__sinit>
 8005140:	69ab      	ldr	r3, [r5, #24]
 8005142:	68ac      	ldr	r4, [r5, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d102      	bne.n	800514e <_puts_r+0x22>
 8005148:	0028      	movs	r0, r5
 800514a:	f000 fa87 	bl	800565c <__sinit>
 800514e:	4b2d      	ldr	r3, [pc, #180]	; (8005204 <_puts_r+0xd8>)
 8005150:	429c      	cmp	r4, r3
 8005152:	d122      	bne.n	800519a <_puts_r+0x6e>
 8005154:	686c      	ldr	r4, [r5, #4]
 8005156:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005158:	07db      	lsls	r3, r3, #31
 800515a:	d405      	bmi.n	8005168 <_puts_r+0x3c>
 800515c:	89a3      	ldrh	r3, [r4, #12]
 800515e:	059b      	lsls	r3, r3, #22
 8005160:	d402      	bmi.n	8005168 <_puts_r+0x3c>
 8005162:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005164:	f000 fb1b 	bl	800579e <__retarget_lock_acquire_recursive>
 8005168:	89a3      	ldrh	r3, [r4, #12]
 800516a:	071b      	lsls	r3, r3, #28
 800516c:	d502      	bpl.n	8005174 <_puts_r+0x48>
 800516e:	6923      	ldr	r3, [r4, #16]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d129      	bne.n	80051c8 <_puts_r+0x9c>
 8005174:	0021      	movs	r1, r4
 8005176:	0028      	movs	r0, r5
 8005178:	f000 f8ca 	bl	8005310 <__swsetup_r>
 800517c:	2800      	cmp	r0, #0
 800517e:	d023      	beq.n	80051c8 <_puts_r+0x9c>
 8005180:	2501      	movs	r5, #1
 8005182:	426d      	negs	r5, r5
 8005184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005186:	07db      	lsls	r3, r3, #31
 8005188:	d405      	bmi.n	8005196 <_puts_r+0x6a>
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	059b      	lsls	r3, r3, #22
 800518e:	d402      	bmi.n	8005196 <_puts_r+0x6a>
 8005190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005192:	f000 fb05 	bl	80057a0 <__retarget_lock_release_recursive>
 8005196:	0028      	movs	r0, r5
 8005198:	bd70      	pop	{r4, r5, r6, pc}
 800519a:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <_puts_r+0xdc>)
 800519c:	429c      	cmp	r4, r3
 800519e:	d101      	bne.n	80051a4 <_puts_r+0x78>
 80051a0:	68ac      	ldr	r4, [r5, #8]
 80051a2:	e7d8      	b.n	8005156 <_puts_r+0x2a>
 80051a4:	4b19      	ldr	r3, [pc, #100]	; (800520c <_puts_r+0xe0>)
 80051a6:	429c      	cmp	r4, r3
 80051a8:	d1d5      	bne.n	8005156 <_puts_r+0x2a>
 80051aa:	68ec      	ldr	r4, [r5, #12]
 80051ac:	e7d3      	b.n	8005156 <_puts_r+0x2a>
 80051ae:	3601      	adds	r6, #1
 80051b0:	60a3      	str	r3, [r4, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	da04      	bge.n	80051c0 <_puts_r+0x94>
 80051b6:	69a2      	ldr	r2, [r4, #24]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	dc16      	bgt.n	80051ea <_puts_r+0xbe>
 80051bc:	290a      	cmp	r1, #10
 80051be:	d014      	beq.n	80051ea <_puts_r+0xbe>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	6022      	str	r2, [r4, #0]
 80051c6:	7019      	strb	r1, [r3, #0]
 80051c8:	68a3      	ldr	r3, [r4, #8]
 80051ca:	7831      	ldrb	r1, [r6, #0]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	2900      	cmp	r1, #0
 80051d0:	d1ed      	bne.n	80051ae <_puts_r+0x82>
 80051d2:	60a3      	str	r3, [r4, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	da0f      	bge.n	80051f8 <_puts_r+0xcc>
 80051d8:	0028      	movs	r0, r5
 80051da:	0022      	movs	r2, r4
 80051dc:	310a      	adds	r1, #10
 80051de:	f000 f841 	bl	8005264 <__swbuf_r>
 80051e2:	250a      	movs	r5, #10
 80051e4:	1c43      	adds	r3, r0, #1
 80051e6:	d1cd      	bne.n	8005184 <_puts_r+0x58>
 80051e8:	e7ca      	b.n	8005180 <_puts_r+0x54>
 80051ea:	0022      	movs	r2, r4
 80051ec:	0028      	movs	r0, r5
 80051ee:	f000 f839 	bl	8005264 <__swbuf_r>
 80051f2:	1c43      	adds	r3, r0, #1
 80051f4:	d1e8      	bne.n	80051c8 <_puts_r+0x9c>
 80051f6:	e7c3      	b.n	8005180 <_puts_r+0x54>
 80051f8:	250a      	movs	r5, #10
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	6022      	str	r2, [r4, #0]
 8005200:	701d      	strb	r5, [r3, #0]
 8005202:	e7bf      	b.n	8005184 <_puts_r+0x58>
 8005204:	0800653c 	.word	0x0800653c
 8005208:	0800655c 	.word	0x0800655c
 800520c:	0800651c 	.word	0x0800651c

08005210 <puts>:
 8005210:	b510      	push	{r4, lr}
 8005212:	4b03      	ldr	r3, [pc, #12]	; (8005220 <puts+0x10>)
 8005214:	0001      	movs	r1, r0
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	f7ff ff88 	bl	800512c <_puts_r>
 800521c:	bd10      	pop	{r4, pc}
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	2000000c 	.word	0x2000000c

08005224 <siprintf>:
 8005224:	b40e      	push	{r1, r2, r3}
 8005226:	b500      	push	{lr}
 8005228:	490b      	ldr	r1, [pc, #44]	; (8005258 <siprintf+0x34>)
 800522a:	b09c      	sub	sp, #112	; 0x70
 800522c:	ab1d      	add	r3, sp, #116	; 0x74
 800522e:	9002      	str	r0, [sp, #8]
 8005230:	9006      	str	r0, [sp, #24]
 8005232:	9107      	str	r1, [sp, #28]
 8005234:	9104      	str	r1, [sp, #16]
 8005236:	4809      	ldr	r0, [pc, #36]	; (800525c <siprintf+0x38>)
 8005238:	4909      	ldr	r1, [pc, #36]	; (8005260 <siprintf+0x3c>)
 800523a:	cb04      	ldmia	r3!, {r2}
 800523c:	9105      	str	r1, [sp, #20]
 800523e:	6800      	ldr	r0, [r0, #0]
 8005240:	a902      	add	r1, sp, #8
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	f000 fc5e 	bl	8005b04 <_svfiprintf_r>
 8005248:	2300      	movs	r3, #0
 800524a:	9a02      	ldr	r2, [sp, #8]
 800524c:	7013      	strb	r3, [r2, #0]
 800524e:	b01c      	add	sp, #112	; 0x70
 8005250:	bc08      	pop	{r3}
 8005252:	b003      	add	sp, #12
 8005254:	4718      	bx	r3
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	7fffffff 	.word	0x7fffffff
 800525c:	2000000c 	.word	0x2000000c
 8005260:	ffff0208 	.word	0xffff0208

08005264 <__swbuf_r>:
 8005264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005266:	0005      	movs	r5, r0
 8005268:	000e      	movs	r6, r1
 800526a:	0014      	movs	r4, r2
 800526c:	2800      	cmp	r0, #0
 800526e:	d004      	beq.n	800527a <__swbuf_r+0x16>
 8005270:	6983      	ldr	r3, [r0, #24]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <__swbuf_r+0x16>
 8005276:	f000 f9f1 	bl	800565c <__sinit>
 800527a:	4b22      	ldr	r3, [pc, #136]	; (8005304 <__swbuf_r+0xa0>)
 800527c:	429c      	cmp	r4, r3
 800527e:	d12e      	bne.n	80052de <__swbuf_r+0x7a>
 8005280:	686c      	ldr	r4, [r5, #4]
 8005282:	69a3      	ldr	r3, [r4, #24]
 8005284:	60a3      	str	r3, [r4, #8]
 8005286:	89a3      	ldrh	r3, [r4, #12]
 8005288:	071b      	lsls	r3, r3, #28
 800528a:	d532      	bpl.n	80052f2 <__swbuf_r+0x8e>
 800528c:	6923      	ldr	r3, [r4, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d02f      	beq.n	80052f2 <__swbuf_r+0x8e>
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	6922      	ldr	r2, [r4, #16]
 8005296:	b2f7      	uxtb	r7, r6
 8005298:	1a98      	subs	r0, r3, r2
 800529a:	6963      	ldr	r3, [r4, #20]
 800529c:	b2f6      	uxtb	r6, r6
 800529e:	4283      	cmp	r3, r0
 80052a0:	dc05      	bgt.n	80052ae <__swbuf_r+0x4a>
 80052a2:	0021      	movs	r1, r4
 80052a4:	0028      	movs	r0, r5
 80052a6:	f000 f937 	bl	8005518 <_fflush_r>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d127      	bne.n	80052fe <__swbuf_r+0x9a>
 80052ae:	68a3      	ldr	r3, [r4, #8]
 80052b0:	3001      	adds	r0, #1
 80052b2:	3b01      	subs	r3, #1
 80052b4:	60a3      	str	r3, [r4, #8]
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	6022      	str	r2, [r4, #0]
 80052bc:	701f      	strb	r7, [r3, #0]
 80052be:	6963      	ldr	r3, [r4, #20]
 80052c0:	4283      	cmp	r3, r0
 80052c2:	d004      	beq.n	80052ce <__swbuf_r+0x6a>
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	07db      	lsls	r3, r3, #31
 80052c8:	d507      	bpl.n	80052da <__swbuf_r+0x76>
 80052ca:	2e0a      	cmp	r6, #10
 80052cc:	d105      	bne.n	80052da <__swbuf_r+0x76>
 80052ce:	0021      	movs	r1, r4
 80052d0:	0028      	movs	r0, r5
 80052d2:	f000 f921 	bl	8005518 <_fflush_r>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d111      	bne.n	80052fe <__swbuf_r+0x9a>
 80052da:	0030      	movs	r0, r6
 80052dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052de:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <__swbuf_r+0xa4>)
 80052e0:	429c      	cmp	r4, r3
 80052e2:	d101      	bne.n	80052e8 <__swbuf_r+0x84>
 80052e4:	68ac      	ldr	r4, [r5, #8]
 80052e6:	e7cc      	b.n	8005282 <__swbuf_r+0x1e>
 80052e8:	4b08      	ldr	r3, [pc, #32]	; (800530c <__swbuf_r+0xa8>)
 80052ea:	429c      	cmp	r4, r3
 80052ec:	d1c9      	bne.n	8005282 <__swbuf_r+0x1e>
 80052ee:	68ec      	ldr	r4, [r5, #12]
 80052f0:	e7c7      	b.n	8005282 <__swbuf_r+0x1e>
 80052f2:	0021      	movs	r1, r4
 80052f4:	0028      	movs	r0, r5
 80052f6:	f000 f80b 	bl	8005310 <__swsetup_r>
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d0c9      	beq.n	8005292 <__swbuf_r+0x2e>
 80052fe:	2601      	movs	r6, #1
 8005300:	4276      	negs	r6, r6
 8005302:	e7ea      	b.n	80052da <__swbuf_r+0x76>
 8005304:	0800653c 	.word	0x0800653c
 8005308:	0800655c 	.word	0x0800655c
 800530c:	0800651c 	.word	0x0800651c

08005310 <__swsetup_r>:
 8005310:	4b37      	ldr	r3, [pc, #220]	; (80053f0 <__swsetup_r+0xe0>)
 8005312:	b570      	push	{r4, r5, r6, lr}
 8005314:	681d      	ldr	r5, [r3, #0]
 8005316:	0006      	movs	r6, r0
 8005318:	000c      	movs	r4, r1
 800531a:	2d00      	cmp	r5, #0
 800531c:	d005      	beq.n	800532a <__swsetup_r+0x1a>
 800531e:	69ab      	ldr	r3, [r5, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d102      	bne.n	800532a <__swsetup_r+0x1a>
 8005324:	0028      	movs	r0, r5
 8005326:	f000 f999 	bl	800565c <__sinit>
 800532a:	4b32      	ldr	r3, [pc, #200]	; (80053f4 <__swsetup_r+0xe4>)
 800532c:	429c      	cmp	r4, r3
 800532e:	d10f      	bne.n	8005350 <__swsetup_r+0x40>
 8005330:	686c      	ldr	r4, [r5, #4]
 8005332:	230c      	movs	r3, #12
 8005334:	5ee2      	ldrsh	r2, [r4, r3]
 8005336:	b293      	uxth	r3, r2
 8005338:	0711      	lsls	r1, r2, #28
 800533a:	d42d      	bmi.n	8005398 <__swsetup_r+0x88>
 800533c:	06d9      	lsls	r1, r3, #27
 800533e:	d411      	bmi.n	8005364 <__swsetup_r+0x54>
 8005340:	2309      	movs	r3, #9
 8005342:	2001      	movs	r0, #1
 8005344:	6033      	str	r3, [r6, #0]
 8005346:	3337      	adds	r3, #55	; 0x37
 8005348:	4313      	orrs	r3, r2
 800534a:	81a3      	strh	r3, [r4, #12]
 800534c:	4240      	negs	r0, r0
 800534e:	bd70      	pop	{r4, r5, r6, pc}
 8005350:	4b29      	ldr	r3, [pc, #164]	; (80053f8 <__swsetup_r+0xe8>)
 8005352:	429c      	cmp	r4, r3
 8005354:	d101      	bne.n	800535a <__swsetup_r+0x4a>
 8005356:	68ac      	ldr	r4, [r5, #8]
 8005358:	e7eb      	b.n	8005332 <__swsetup_r+0x22>
 800535a:	4b28      	ldr	r3, [pc, #160]	; (80053fc <__swsetup_r+0xec>)
 800535c:	429c      	cmp	r4, r3
 800535e:	d1e8      	bne.n	8005332 <__swsetup_r+0x22>
 8005360:	68ec      	ldr	r4, [r5, #12]
 8005362:	e7e6      	b.n	8005332 <__swsetup_r+0x22>
 8005364:	075b      	lsls	r3, r3, #29
 8005366:	d513      	bpl.n	8005390 <__swsetup_r+0x80>
 8005368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800536a:	2900      	cmp	r1, #0
 800536c:	d008      	beq.n	8005380 <__swsetup_r+0x70>
 800536e:	0023      	movs	r3, r4
 8005370:	3344      	adds	r3, #68	; 0x44
 8005372:	4299      	cmp	r1, r3
 8005374:	d002      	beq.n	800537c <__swsetup_r+0x6c>
 8005376:	0030      	movs	r0, r6
 8005378:	f000 fa80 	bl	800587c <_free_r>
 800537c:	2300      	movs	r3, #0
 800537e:	6363      	str	r3, [r4, #52]	; 0x34
 8005380:	2224      	movs	r2, #36	; 0x24
 8005382:	89a3      	ldrh	r3, [r4, #12]
 8005384:	4393      	bics	r3, r2
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	2300      	movs	r3, #0
 800538a:	6063      	str	r3, [r4, #4]
 800538c:	6923      	ldr	r3, [r4, #16]
 800538e:	6023      	str	r3, [r4, #0]
 8005390:	2308      	movs	r3, #8
 8005392:	89a2      	ldrh	r2, [r4, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	81a3      	strh	r3, [r4, #12]
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10b      	bne.n	80053b6 <__swsetup_r+0xa6>
 800539e:	21a0      	movs	r1, #160	; 0xa0
 80053a0:	2280      	movs	r2, #128	; 0x80
 80053a2:	89a3      	ldrh	r3, [r4, #12]
 80053a4:	0089      	lsls	r1, r1, #2
 80053a6:	0092      	lsls	r2, r2, #2
 80053a8:	400b      	ands	r3, r1
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d003      	beq.n	80053b6 <__swsetup_r+0xa6>
 80053ae:	0021      	movs	r1, r4
 80053b0:	0030      	movs	r0, r6
 80053b2:	f000 fa1f 	bl	80057f4 <__smakebuf_r>
 80053b6:	220c      	movs	r2, #12
 80053b8:	5ea3      	ldrsh	r3, [r4, r2]
 80053ba:	2001      	movs	r0, #1
 80053bc:	001a      	movs	r2, r3
 80053be:	b299      	uxth	r1, r3
 80053c0:	4002      	ands	r2, r0
 80053c2:	4203      	tst	r3, r0
 80053c4:	d00f      	beq.n	80053e6 <__swsetup_r+0xd6>
 80053c6:	2200      	movs	r2, #0
 80053c8:	60a2      	str	r2, [r4, #8]
 80053ca:	6962      	ldr	r2, [r4, #20]
 80053cc:	4252      	negs	r2, r2
 80053ce:	61a2      	str	r2, [r4, #24]
 80053d0:	2000      	movs	r0, #0
 80053d2:	6922      	ldr	r2, [r4, #16]
 80053d4:	4282      	cmp	r2, r0
 80053d6:	d1ba      	bne.n	800534e <__swsetup_r+0x3e>
 80053d8:	060a      	lsls	r2, r1, #24
 80053da:	d5b8      	bpl.n	800534e <__swsetup_r+0x3e>
 80053dc:	2240      	movs	r2, #64	; 0x40
 80053de:	4313      	orrs	r3, r2
 80053e0:	81a3      	strh	r3, [r4, #12]
 80053e2:	3801      	subs	r0, #1
 80053e4:	e7b3      	b.n	800534e <__swsetup_r+0x3e>
 80053e6:	0788      	lsls	r0, r1, #30
 80053e8:	d400      	bmi.n	80053ec <__swsetup_r+0xdc>
 80053ea:	6962      	ldr	r2, [r4, #20]
 80053ec:	60a2      	str	r2, [r4, #8]
 80053ee:	e7ef      	b.n	80053d0 <__swsetup_r+0xc0>
 80053f0:	2000000c 	.word	0x2000000c
 80053f4:	0800653c 	.word	0x0800653c
 80053f8:	0800655c 	.word	0x0800655c
 80053fc:	0800651c 	.word	0x0800651c

08005400 <__sflush_r>:
 8005400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005402:	898b      	ldrh	r3, [r1, #12]
 8005404:	0005      	movs	r5, r0
 8005406:	000c      	movs	r4, r1
 8005408:	071a      	lsls	r2, r3, #28
 800540a:	d45f      	bmi.n	80054cc <__sflush_r+0xcc>
 800540c:	684a      	ldr	r2, [r1, #4]
 800540e:	2a00      	cmp	r2, #0
 8005410:	dc04      	bgt.n	800541c <__sflush_r+0x1c>
 8005412:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005414:	2a00      	cmp	r2, #0
 8005416:	dc01      	bgt.n	800541c <__sflush_r+0x1c>
 8005418:	2000      	movs	r0, #0
 800541a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800541c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800541e:	2f00      	cmp	r7, #0
 8005420:	d0fa      	beq.n	8005418 <__sflush_r+0x18>
 8005422:	2200      	movs	r2, #0
 8005424:	2180      	movs	r1, #128	; 0x80
 8005426:	682e      	ldr	r6, [r5, #0]
 8005428:	602a      	str	r2, [r5, #0]
 800542a:	001a      	movs	r2, r3
 800542c:	0149      	lsls	r1, r1, #5
 800542e:	400a      	ands	r2, r1
 8005430:	420b      	tst	r3, r1
 8005432:	d034      	beq.n	800549e <__sflush_r+0x9e>
 8005434:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005436:	89a3      	ldrh	r3, [r4, #12]
 8005438:	075b      	lsls	r3, r3, #29
 800543a:	d506      	bpl.n	800544a <__sflush_r+0x4a>
 800543c:	6863      	ldr	r3, [r4, #4]
 800543e:	1ac0      	subs	r0, r0, r3
 8005440:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <__sflush_r+0x4a>
 8005446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005448:	1ac0      	subs	r0, r0, r3
 800544a:	0002      	movs	r2, r0
 800544c:	6a21      	ldr	r1, [r4, #32]
 800544e:	2300      	movs	r3, #0
 8005450:	0028      	movs	r0, r5
 8005452:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005454:	47b8      	blx	r7
 8005456:	89a1      	ldrh	r1, [r4, #12]
 8005458:	1c43      	adds	r3, r0, #1
 800545a:	d106      	bne.n	800546a <__sflush_r+0x6a>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	2b1d      	cmp	r3, #29
 8005460:	d831      	bhi.n	80054c6 <__sflush_r+0xc6>
 8005462:	4a2c      	ldr	r2, [pc, #176]	; (8005514 <__sflush_r+0x114>)
 8005464:	40da      	lsrs	r2, r3
 8005466:	07d3      	lsls	r3, r2, #31
 8005468:	d52d      	bpl.n	80054c6 <__sflush_r+0xc6>
 800546a:	2300      	movs	r3, #0
 800546c:	6063      	str	r3, [r4, #4]
 800546e:	6923      	ldr	r3, [r4, #16]
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	04cb      	lsls	r3, r1, #19
 8005474:	d505      	bpl.n	8005482 <__sflush_r+0x82>
 8005476:	1c43      	adds	r3, r0, #1
 8005478:	d102      	bne.n	8005480 <__sflush_r+0x80>
 800547a:	682b      	ldr	r3, [r5, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d100      	bne.n	8005482 <__sflush_r+0x82>
 8005480:	6560      	str	r0, [r4, #84]	; 0x54
 8005482:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005484:	602e      	str	r6, [r5, #0]
 8005486:	2900      	cmp	r1, #0
 8005488:	d0c6      	beq.n	8005418 <__sflush_r+0x18>
 800548a:	0023      	movs	r3, r4
 800548c:	3344      	adds	r3, #68	; 0x44
 800548e:	4299      	cmp	r1, r3
 8005490:	d002      	beq.n	8005498 <__sflush_r+0x98>
 8005492:	0028      	movs	r0, r5
 8005494:	f000 f9f2 	bl	800587c <_free_r>
 8005498:	2000      	movs	r0, #0
 800549a:	6360      	str	r0, [r4, #52]	; 0x34
 800549c:	e7bd      	b.n	800541a <__sflush_r+0x1a>
 800549e:	2301      	movs	r3, #1
 80054a0:	0028      	movs	r0, r5
 80054a2:	6a21      	ldr	r1, [r4, #32]
 80054a4:	47b8      	blx	r7
 80054a6:	1c43      	adds	r3, r0, #1
 80054a8:	d1c5      	bne.n	8005436 <__sflush_r+0x36>
 80054aa:	682b      	ldr	r3, [r5, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0c2      	beq.n	8005436 <__sflush_r+0x36>
 80054b0:	2b1d      	cmp	r3, #29
 80054b2:	d001      	beq.n	80054b8 <__sflush_r+0xb8>
 80054b4:	2b16      	cmp	r3, #22
 80054b6:	d101      	bne.n	80054bc <__sflush_r+0xbc>
 80054b8:	602e      	str	r6, [r5, #0]
 80054ba:	e7ad      	b.n	8005418 <__sflush_r+0x18>
 80054bc:	2340      	movs	r3, #64	; 0x40
 80054be:	89a2      	ldrh	r2, [r4, #12]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	81a3      	strh	r3, [r4, #12]
 80054c4:	e7a9      	b.n	800541a <__sflush_r+0x1a>
 80054c6:	2340      	movs	r3, #64	; 0x40
 80054c8:	430b      	orrs	r3, r1
 80054ca:	e7fa      	b.n	80054c2 <__sflush_r+0xc2>
 80054cc:	690f      	ldr	r7, [r1, #16]
 80054ce:	2f00      	cmp	r7, #0
 80054d0:	d0a2      	beq.n	8005418 <__sflush_r+0x18>
 80054d2:	680a      	ldr	r2, [r1, #0]
 80054d4:	600f      	str	r7, [r1, #0]
 80054d6:	1bd2      	subs	r2, r2, r7
 80054d8:	9201      	str	r2, [sp, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	079b      	lsls	r3, r3, #30
 80054de:	d100      	bne.n	80054e2 <__sflush_r+0xe2>
 80054e0:	694a      	ldr	r2, [r1, #20]
 80054e2:	60a2      	str	r2, [r4, #8]
 80054e4:	9b01      	ldr	r3, [sp, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	dc00      	bgt.n	80054ec <__sflush_r+0xec>
 80054ea:	e795      	b.n	8005418 <__sflush_r+0x18>
 80054ec:	003a      	movs	r2, r7
 80054ee:	0028      	movs	r0, r5
 80054f0:	9b01      	ldr	r3, [sp, #4]
 80054f2:	6a21      	ldr	r1, [r4, #32]
 80054f4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80054f6:	47b0      	blx	r6
 80054f8:	2800      	cmp	r0, #0
 80054fa:	dc06      	bgt.n	800550a <__sflush_r+0x10a>
 80054fc:	2340      	movs	r3, #64	; 0x40
 80054fe:	2001      	movs	r0, #1
 8005500:	89a2      	ldrh	r2, [r4, #12]
 8005502:	4240      	negs	r0, r0
 8005504:	4313      	orrs	r3, r2
 8005506:	81a3      	strh	r3, [r4, #12]
 8005508:	e787      	b.n	800541a <__sflush_r+0x1a>
 800550a:	9b01      	ldr	r3, [sp, #4]
 800550c:	183f      	adds	r7, r7, r0
 800550e:	1a1b      	subs	r3, r3, r0
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	e7e7      	b.n	80054e4 <__sflush_r+0xe4>
 8005514:	20400001 	.word	0x20400001

08005518 <_fflush_r>:
 8005518:	690b      	ldr	r3, [r1, #16]
 800551a:	b570      	push	{r4, r5, r6, lr}
 800551c:	0005      	movs	r5, r0
 800551e:	000c      	movs	r4, r1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d102      	bne.n	800552a <_fflush_r+0x12>
 8005524:	2500      	movs	r5, #0
 8005526:	0028      	movs	r0, r5
 8005528:	bd70      	pop	{r4, r5, r6, pc}
 800552a:	2800      	cmp	r0, #0
 800552c:	d004      	beq.n	8005538 <_fflush_r+0x20>
 800552e:	6983      	ldr	r3, [r0, #24]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <_fflush_r+0x20>
 8005534:	f000 f892 	bl	800565c <__sinit>
 8005538:	4b14      	ldr	r3, [pc, #80]	; (800558c <_fflush_r+0x74>)
 800553a:	429c      	cmp	r4, r3
 800553c:	d11b      	bne.n	8005576 <_fflush_r+0x5e>
 800553e:	686c      	ldr	r4, [r5, #4]
 8005540:	220c      	movs	r2, #12
 8005542:	5ea3      	ldrsh	r3, [r4, r2]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0ed      	beq.n	8005524 <_fflush_r+0xc>
 8005548:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800554a:	07d2      	lsls	r2, r2, #31
 800554c:	d404      	bmi.n	8005558 <_fflush_r+0x40>
 800554e:	059b      	lsls	r3, r3, #22
 8005550:	d402      	bmi.n	8005558 <_fflush_r+0x40>
 8005552:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005554:	f000 f923 	bl	800579e <__retarget_lock_acquire_recursive>
 8005558:	0028      	movs	r0, r5
 800555a:	0021      	movs	r1, r4
 800555c:	f7ff ff50 	bl	8005400 <__sflush_r>
 8005560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005562:	0005      	movs	r5, r0
 8005564:	07db      	lsls	r3, r3, #31
 8005566:	d4de      	bmi.n	8005526 <_fflush_r+0xe>
 8005568:	89a3      	ldrh	r3, [r4, #12]
 800556a:	059b      	lsls	r3, r3, #22
 800556c:	d4db      	bmi.n	8005526 <_fflush_r+0xe>
 800556e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005570:	f000 f916 	bl	80057a0 <__retarget_lock_release_recursive>
 8005574:	e7d7      	b.n	8005526 <_fflush_r+0xe>
 8005576:	4b06      	ldr	r3, [pc, #24]	; (8005590 <_fflush_r+0x78>)
 8005578:	429c      	cmp	r4, r3
 800557a:	d101      	bne.n	8005580 <_fflush_r+0x68>
 800557c:	68ac      	ldr	r4, [r5, #8]
 800557e:	e7df      	b.n	8005540 <_fflush_r+0x28>
 8005580:	4b04      	ldr	r3, [pc, #16]	; (8005594 <_fflush_r+0x7c>)
 8005582:	429c      	cmp	r4, r3
 8005584:	d1dc      	bne.n	8005540 <_fflush_r+0x28>
 8005586:	68ec      	ldr	r4, [r5, #12]
 8005588:	e7da      	b.n	8005540 <_fflush_r+0x28>
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	0800653c 	.word	0x0800653c
 8005590:	0800655c 	.word	0x0800655c
 8005594:	0800651c 	.word	0x0800651c

08005598 <std>:
 8005598:	2300      	movs	r3, #0
 800559a:	b510      	push	{r4, lr}
 800559c:	0004      	movs	r4, r0
 800559e:	6003      	str	r3, [r0, #0]
 80055a0:	6043      	str	r3, [r0, #4]
 80055a2:	6083      	str	r3, [r0, #8]
 80055a4:	8181      	strh	r1, [r0, #12]
 80055a6:	6643      	str	r3, [r0, #100]	; 0x64
 80055a8:	0019      	movs	r1, r3
 80055aa:	81c2      	strh	r2, [r0, #14]
 80055ac:	6103      	str	r3, [r0, #16]
 80055ae:	6143      	str	r3, [r0, #20]
 80055b0:	6183      	str	r3, [r0, #24]
 80055b2:	2208      	movs	r2, #8
 80055b4:	305c      	adds	r0, #92	; 0x5c
 80055b6:	f7ff fdb1 	bl	800511c <memset>
 80055ba:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <std+0x38>)
 80055bc:	6224      	str	r4, [r4, #32]
 80055be:	6263      	str	r3, [r4, #36]	; 0x24
 80055c0:	4b04      	ldr	r3, [pc, #16]	; (80055d4 <std+0x3c>)
 80055c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80055c4:	4b04      	ldr	r3, [pc, #16]	; (80055d8 <std+0x40>)
 80055c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055c8:	4b04      	ldr	r3, [pc, #16]	; (80055dc <std+0x44>)
 80055ca:	6323      	str	r3, [r4, #48]	; 0x30
 80055cc:	bd10      	pop	{r4, pc}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	0800602d 	.word	0x0800602d
 80055d4:	08006055 	.word	0x08006055
 80055d8:	0800608d 	.word	0x0800608d
 80055dc:	080060b9 	.word	0x080060b9

080055e0 <_cleanup_r>:
 80055e0:	b510      	push	{r4, lr}
 80055e2:	4902      	ldr	r1, [pc, #8]	; (80055ec <_cleanup_r+0xc>)
 80055e4:	f000 f8ba 	bl	800575c <_fwalk_reent>
 80055e8:	bd10      	pop	{r4, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	08005519 	.word	0x08005519

080055f0 <__sfmoreglue>:
 80055f0:	b570      	push	{r4, r5, r6, lr}
 80055f2:	2568      	movs	r5, #104	; 0x68
 80055f4:	1e4a      	subs	r2, r1, #1
 80055f6:	4355      	muls	r5, r2
 80055f8:	000e      	movs	r6, r1
 80055fa:	0029      	movs	r1, r5
 80055fc:	3174      	adds	r1, #116	; 0x74
 80055fe:	f000 f9a9 	bl	8005954 <_malloc_r>
 8005602:	1e04      	subs	r4, r0, #0
 8005604:	d008      	beq.n	8005618 <__sfmoreglue+0x28>
 8005606:	2100      	movs	r1, #0
 8005608:	002a      	movs	r2, r5
 800560a:	6001      	str	r1, [r0, #0]
 800560c:	6046      	str	r6, [r0, #4]
 800560e:	300c      	adds	r0, #12
 8005610:	60a0      	str	r0, [r4, #8]
 8005612:	3268      	adds	r2, #104	; 0x68
 8005614:	f7ff fd82 	bl	800511c <memset>
 8005618:	0020      	movs	r0, r4
 800561a:	bd70      	pop	{r4, r5, r6, pc}

0800561c <__sfp_lock_acquire>:
 800561c:	b510      	push	{r4, lr}
 800561e:	4802      	ldr	r0, [pc, #8]	; (8005628 <__sfp_lock_acquire+0xc>)
 8005620:	f000 f8bd 	bl	800579e <__retarget_lock_acquire_recursive>
 8005624:	bd10      	pop	{r4, pc}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	2000043d 	.word	0x2000043d

0800562c <__sfp_lock_release>:
 800562c:	b510      	push	{r4, lr}
 800562e:	4802      	ldr	r0, [pc, #8]	; (8005638 <__sfp_lock_release+0xc>)
 8005630:	f000 f8b6 	bl	80057a0 <__retarget_lock_release_recursive>
 8005634:	bd10      	pop	{r4, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	2000043d 	.word	0x2000043d

0800563c <__sinit_lock_acquire>:
 800563c:	b510      	push	{r4, lr}
 800563e:	4802      	ldr	r0, [pc, #8]	; (8005648 <__sinit_lock_acquire+0xc>)
 8005640:	f000 f8ad 	bl	800579e <__retarget_lock_acquire_recursive>
 8005644:	bd10      	pop	{r4, pc}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	2000043e 	.word	0x2000043e

0800564c <__sinit_lock_release>:
 800564c:	b510      	push	{r4, lr}
 800564e:	4802      	ldr	r0, [pc, #8]	; (8005658 <__sinit_lock_release+0xc>)
 8005650:	f000 f8a6 	bl	80057a0 <__retarget_lock_release_recursive>
 8005654:	bd10      	pop	{r4, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	2000043e 	.word	0x2000043e

0800565c <__sinit>:
 800565c:	b513      	push	{r0, r1, r4, lr}
 800565e:	0004      	movs	r4, r0
 8005660:	f7ff ffec 	bl	800563c <__sinit_lock_acquire>
 8005664:	69a3      	ldr	r3, [r4, #24]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <__sinit+0x14>
 800566a:	f7ff ffef 	bl	800564c <__sinit_lock_release>
 800566e:	bd13      	pop	{r0, r1, r4, pc}
 8005670:	64a3      	str	r3, [r4, #72]	; 0x48
 8005672:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005674:	6523      	str	r3, [r4, #80]	; 0x50
 8005676:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <__sinit+0x68>)
 8005678:	4a13      	ldr	r2, [pc, #76]	; (80056c8 <__sinit+0x6c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	62a2      	str	r2, [r4, #40]	; 0x28
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	42a3      	cmp	r3, r4
 8005682:	d101      	bne.n	8005688 <__sinit+0x2c>
 8005684:	2301      	movs	r3, #1
 8005686:	61a3      	str	r3, [r4, #24]
 8005688:	0020      	movs	r0, r4
 800568a:	f000 f81f 	bl	80056cc <__sfp>
 800568e:	6060      	str	r0, [r4, #4]
 8005690:	0020      	movs	r0, r4
 8005692:	f000 f81b 	bl	80056cc <__sfp>
 8005696:	60a0      	str	r0, [r4, #8]
 8005698:	0020      	movs	r0, r4
 800569a:	f000 f817 	bl	80056cc <__sfp>
 800569e:	2200      	movs	r2, #0
 80056a0:	2104      	movs	r1, #4
 80056a2:	60e0      	str	r0, [r4, #12]
 80056a4:	6860      	ldr	r0, [r4, #4]
 80056a6:	f7ff ff77 	bl	8005598 <std>
 80056aa:	2201      	movs	r2, #1
 80056ac:	2109      	movs	r1, #9
 80056ae:	68a0      	ldr	r0, [r4, #8]
 80056b0:	f7ff ff72 	bl	8005598 <std>
 80056b4:	2202      	movs	r2, #2
 80056b6:	2112      	movs	r1, #18
 80056b8:	68e0      	ldr	r0, [r4, #12]
 80056ba:	f7ff ff6d 	bl	8005598 <std>
 80056be:	2301      	movs	r3, #1
 80056c0:	61a3      	str	r3, [r4, #24]
 80056c2:	e7d2      	b.n	800566a <__sinit+0xe>
 80056c4:	08006518 	.word	0x08006518
 80056c8:	080055e1 	.word	0x080055e1

080056cc <__sfp>:
 80056cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ce:	0007      	movs	r7, r0
 80056d0:	f7ff ffa4 	bl	800561c <__sfp_lock_acquire>
 80056d4:	4b1f      	ldr	r3, [pc, #124]	; (8005754 <__sfp+0x88>)
 80056d6:	681e      	ldr	r6, [r3, #0]
 80056d8:	69b3      	ldr	r3, [r6, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d102      	bne.n	80056e4 <__sfp+0x18>
 80056de:	0030      	movs	r0, r6
 80056e0:	f7ff ffbc 	bl	800565c <__sinit>
 80056e4:	3648      	adds	r6, #72	; 0x48
 80056e6:	68b4      	ldr	r4, [r6, #8]
 80056e8:	6873      	ldr	r3, [r6, #4]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	d504      	bpl.n	80056f8 <__sfp+0x2c>
 80056ee:	6833      	ldr	r3, [r6, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d022      	beq.n	800573a <__sfp+0x6e>
 80056f4:	6836      	ldr	r6, [r6, #0]
 80056f6:	e7f6      	b.n	80056e6 <__sfp+0x1a>
 80056f8:	220c      	movs	r2, #12
 80056fa:	5ea5      	ldrsh	r5, [r4, r2]
 80056fc:	2d00      	cmp	r5, #0
 80056fe:	d11a      	bne.n	8005736 <__sfp+0x6a>
 8005700:	0020      	movs	r0, r4
 8005702:	4b15      	ldr	r3, [pc, #84]	; (8005758 <__sfp+0x8c>)
 8005704:	3058      	adds	r0, #88	; 0x58
 8005706:	60e3      	str	r3, [r4, #12]
 8005708:	6665      	str	r5, [r4, #100]	; 0x64
 800570a:	f000 f847 	bl	800579c <__retarget_lock_init_recursive>
 800570e:	f7ff ff8d 	bl	800562c <__sfp_lock_release>
 8005712:	0020      	movs	r0, r4
 8005714:	2208      	movs	r2, #8
 8005716:	0029      	movs	r1, r5
 8005718:	6025      	str	r5, [r4, #0]
 800571a:	60a5      	str	r5, [r4, #8]
 800571c:	6065      	str	r5, [r4, #4]
 800571e:	6125      	str	r5, [r4, #16]
 8005720:	6165      	str	r5, [r4, #20]
 8005722:	61a5      	str	r5, [r4, #24]
 8005724:	305c      	adds	r0, #92	; 0x5c
 8005726:	f7ff fcf9 	bl	800511c <memset>
 800572a:	6365      	str	r5, [r4, #52]	; 0x34
 800572c:	63a5      	str	r5, [r4, #56]	; 0x38
 800572e:	64a5      	str	r5, [r4, #72]	; 0x48
 8005730:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005732:	0020      	movs	r0, r4
 8005734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005736:	3468      	adds	r4, #104	; 0x68
 8005738:	e7d7      	b.n	80056ea <__sfp+0x1e>
 800573a:	2104      	movs	r1, #4
 800573c:	0038      	movs	r0, r7
 800573e:	f7ff ff57 	bl	80055f0 <__sfmoreglue>
 8005742:	1e04      	subs	r4, r0, #0
 8005744:	6030      	str	r0, [r6, #0]
 8005746:	d1d5      	bne.n	80056f4 <__sfp+0x28>
 8005748:	f7ff ff70 	bl	800562c <__sfp_lock_release>
 800574c:	230c      	movs	r3, #12
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	e7ef      	b.n	8005732 <__sfp+0x66>
 8005752:	46c0      	nop			; (mov r8, r8)
 8005754:	08006518 	.word	0x08006518
 8005758:	ffff0001 	.word	0xffff0001

0800575c <_fwalk_reent>:
 800575c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800575e:	0004      	movs	r4, r0
 8005760:	0006      	movs	r6, r0
 8005762:	2700      	movs	r7, #0
 8005764:	9101      	str	r1, [sp, #4]
 8005766:	3448      	adds	r4, #72	; 0x48
 8005768:	6863      	ldr	r3, [r4, #4]
 800576a:	68a5      	ldr	r5, [r4, #8]
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	9b00      	ldr	r3, [sp, #0]
 8005770:	3b01      	subs	r3, #1
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	d504      	bpl.n	8005780 <_fwalk_reent+0x24>
 8005776:	6824      	ldr	r4, [r4, #0]
 8005778:	2c00      	cmp	r4, #0
 800577a:	d1f5      	bne.n	8005768 <_fwalk_reent+0xc>
 800577c:	0038      	movs	r0, r7
 800577e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005780:	89ab      	ldrh	r3, [r5, #12]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d908      	bls.n	8005798 <_fwalk_reent+0x3c>
 8005786:	220e      	movs	r2, #14
 8005788:	5eab      	ldrsh	r3, [r5, r2]
 800578a:	3301      	adds	r3, #1
 800578c:	d004      	beq.n	8005798 <_fwalk_reent+0x3c>
 800578e:	0029      	movs	r1, r5
 8005790:	0030      	movs	r0, r6
 8005792:	9b01      	ldr	r3, [sp, #4]
 8005794:	4798      	blx	r3
 8005796:	4307      	orrs	r7, r0
 8005798:	3568      	adds	r5, #104	; 0x68
 800579a:	e7e8      	b.n	800576e <_fwalk_reent+0x12>

0800579c <__retarget_lock_init_recursive>:
 800579c:	4770      	bx	lr

0800579e <__retarget_lock_acquire_recursive>:
 800579e:	4770      	bx	lr

080057a0 <__retarget_lock_release_recursive>:
 80057a0:	4770      	bx	lr
	...

080057a4 <__swhatbuf_r>:
 80057a4:	b570      	push	{r4, r5, r6, lr}
 80057a6:	000e      	movs	r6, r1
 80057a8:	001d      	movs	r5, r3
 80057aa:	230e      	movs	r3, #14
 80057ac:	5ec9      	ldrsh	r1, [r1, r3]
 80057ae:	0014      	movs	r4, r2
 80057b0:	b096      	sub	sp, #88	; 0x58
 80057b2:	2900      	cmp	r1, #0
 80057b4:	da08      	bge.n	80057c8 <__swhatbuf_r+0x24>
 80057b6:	220c      	movs	r2, #12
 80057b8:	5eb3      	ldrsh	r3, [r6, r2]
 80057ba:	2200      	movs	r2, #0
 80057bc:	602a      	str	r2, [r5, #0]
 80057be:	061b      	lsls	r3, r3, #24
 80057c0:	d411      	bmi.n	80057e6 <__swhatbuf_r+0x42>
 80057c2:	2380      	movs	r3, #128	; 0x80
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	e00f      	b.n	80057e8 <__swhatbuf_r+0x44>
 80057c8:	466a      	mov	r2, sp
 80057ca:	f000 fca1 	bl	8006110 <_fstat_r>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	dbf1      	blt.n	80057b6 <__swhatbuf_r+0x12>
 80057d2:	23f0      	movs	r3, #240	; 0xf0
 80057d4:	9901      	ldr	r1, [sp, #4]
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	4019      	ands	r1, r3
 80057da:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <__swhatbuf_r+0x4c>)
 80057dc:	18c9      	adds	r1, r1, r3
 80057de:	424b      	negs	r3, r1
 80057e0:	4159      	adcs	r1, r3
 80057e2:	6029      	str	r1, [r5, #0]
 80057e4:	e7ed      	b.n	80057c2 <__swhatbuf_r+0x1e>
 80057e6:	2340      	movs	r3, #64	; 0x40
 80057e8:	2000      	movs	r0, #0
 80057ea:	6023      	str	r3, [r4, #0]
 80057ec:	b016      	add	sp, #88	; 0x58
 80057ee:	bd70      	pop	{r4, r5, r6, pc}
 80057f0:	ffffe000 	.word	0xffffe000

080057f4 <__smakebuf_r>:
 80057f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057f6:	2602      	movs	r6, #2
 80057f8:	898b      	ldrh	r3, [r1, #12]
 80057fa:	0005      	movs	r5, r0
 80057fc:	000c      	movs	r4, r1
 80057fe:	4233      	tst	r3, r6
 8005800:	d006      	beq.n	8005810 <__smakebuf_r+0x1c>
 8005802:	0023      	movs	r3, r4
 8005804:	3347      	adds	r3, #71	; 0x47
 8005806:	6023      	str	r3, [r4, #0]
 8005808:	6123      	str	r3, [r4, #16]
 800580a:	2301      	movs	r3, #1
 800580c:	6163      	str	r3, [r4, #20]
 800580e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005810:	466a      	mov	r2, sp
 8005812:	ab01      	add	r3, sp, #4
 8005814:	f7ff ffc6 	bl	80057a4 <__swhatbuf_r>
 8005818:	9900      	ldr	r1, [sp, #0]
 800581a:	0007      	movs	r7, r0
 800581c:	0028      	movs	r0, r5
 800581e:	f000 f899 	bl	8005954 <_malloc_r>
 8005822:	2800      	cmp	r0, #0
 8005824:	d108      	bne.n	8005838 <__smakebuf_r+0x44>
 8005826:	220c      	movs	r2, #12
 8005828:	5ea3      	ldrsh	r3, [r4, r2]
 800582a:	059a      	lsls	r2, r3, #22
 800582c:	d4ef      	bmi.n	800580e <__smakebuf_r+0x1a>
 800582e:	2203      	movs	r2, #3
 8005830:	4393      	bics	r3, r2
 8005832:	431e      	orrs	r6, r3
 8005834:	81a6      	strh	r6, [r4, #12]
 8005836:	e7e4      	b.n	8005802 <__smakebuf_r+0xe>
 8005838:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <__smakebuf_r+0x84>)
 800583a:	62ab      	str	r3, [r5, #40]	; 0x28
 800583c:	2380      	movs	r3, #128	; 0x80
 800583e:	89a2      	ldrh	r2, [r4, #12]
 8005840:	6020      	str	r0, [r4, #0]
 8005842:	4313      	orrs	r3, r2
 8005844:	81a3      	strh	r3, [r4, #12]
 8005846:	9b00      	ldr	r3, [sp, #0]
 8005848:	6120      	str	r0, [r4, #16]
 800584a:	6163      	str	r3, [r4, #20]
 800584c:	9b01      	ldr	r3, [sp, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00d      	beq.n	800586e <__smakebuf_r+0x7a>
 8005852:	0028      	movs	r0, r5
 8005854:	230e      	movs	r3, #14
 8005856:	5ee1      	ldrsh	r1, [r4, r3]
 8005858:	f000 fc6c 	bl	8006134 <_isatty_r>
 800585c:	2800      	cmp	r0, #0
 800585e:	d006      	beq.n	800586e <__smakebuf_r+0x7a>
 8005860:	2203      	movs	r2, #3
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	4393      	bics	r3, r2
 8005866:	001a      	movs	r2, r3
 8005868:	2301      	movs	r3, #1
 800586a:	4313      	orrs	r3, r2
 800586c:	81a3      	strh	r3, [r4, #12]
 800586e:	89a0      	ldrh	r0, [r4, #12]
 8005870:	4307      	orrs	r7, r0
 8005872:	81a7      	strh	r7, [r4, #12]
 8005874:	e7cb      	b.n	800580e <__smakebuf_r+0x1a>
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	080055e1 	.word	0x080055e1

0800587c <_free_r>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	0005      	movs	r5, r0
 8005880:	2900      	cmp	r1, #0
 8005882:	d010      	beq.n	80058a6 <_free_r+0x2a>
 8005884:	1f0c      	subs	r4, r1, #4
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	da00      	bge.n	800588e <_free_r+0x12>
 800588c:	18e4      	adds	r4, r4, r3
 800588e:	0028      	movs	r0, r5
 8005890:	f000 fc9e 	bl	80061d0 <__malloc_lock>
 8005894:	4a1d      	ldr	r2, [pc, #116]	; (800590c <_free_r+0x90>)
 8005896:	6813      	ldr	r3, [r2, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d105      	bne.n	80058a8 <_free_r+0x2c>
 800589c:	6063      	str	r3, [r4, #4]
 800589e:	6014      	str	r4, [r2, #0]
 80058a0:	0028      	movs	r0, r5
 80058a2:	f000 fc9d 	bl	80061e0 <__malloc_unlock>
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	42a3      	cmp	r3, r4
 80058aa:	d908      	bls.n	80058be <_free_r+0x42>
 80058ac:	6821      	ldr	r1, [r4, #0]
 80058ae:	1860      	adds	r0, r4, r1
 80058b0:	4283      	cmp	r3, r0
 80058b2:	d1f3      	bne.n	800589c <_free_r+0x20>
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	1841      	adds	r1, r0, r1
 80058ba:	6021      	str	r1, [r4, #0]
 80058bc:	e7ee      	b.n	800589c <_free_r+0x20>
 80058be:	001a      	movs	r2, r3
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <_free_r+0x4e>
 80058c6:	42a3      	cmp	r3, r4
 80058c8:	d9f9      	bls.n	80058be <_free_r+0x42>
 80058ca:	6811      	ldr	r1, [r2, #0]
 80058cc:	1850      	adds	r0, r2, r1
 80058ce:	42a0      	cmp	r0, r4
 80058d0:	d10b      	bne.n	80058ea <_free_r+0x6e>
 80058d2:	6820      	ldr	r0, [r4, #0]
 80058d4:	1809      	adds	r1, r1, r0
 80058d6:	1850      	adds	r0, r2, r1
 80058d8:	6011      	str	r1, [r2, #0]
 80058da:	4283      	cmp	r3, r0
 80058dc:	d1e0      	bne.n	80058a0 <_free_r+0x24>
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	1841      	adds	r1, r0, r1
 80058e4:	6011      	str	r1, [r2, #0]
 80058e6:	6053      	str	r3, [r2, #4]
 80058e8:	e7da      	b.n	80058a0 <_free_r+0x24>
 80058ea:	42a0      	cmp	r0, r4
 80058ec:	d902      	bls.n	80058f4 <_free_r+0x78>
 80058ee:	230c      	movs	r3, #12
 80058f0:	602b      	str	r3, [r5, #0]
 80058f2:	e7d5      	b.n	80058a0 <_free_r+0x24>
 80058f4:	6821      	ldr	r1, [r4, #0]
 80058f6:	1860      	adds	r0, r4, r1
 80058f8:	4283      	cmp	r3, r0
 80058fa:	d103      	bne.n	8005904 <_free_r+0x88>
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	1841      	adds	r1, r0, r1
 8005902:	6021      	str	r1, [r4, #0]
 8005904:	6063      	str	r3, [r4, #4]
 8005906:	6054      	str	r4, [r2, #4]
 8005908:	e7ca      	b.n	80058a0 <_free_r+0x24>
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	20000440 	.word	0x20000440

08005910 <sbrk_aligned>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	4e0f      	ldr	r6, [pc, #60]	; (8005950 <sbrk_aligned+0x40>)
 8005914:	000d      	movs	r5, r1
 8005916:	6831      	ldr	r1, [r6, #0]
 8005918:	0004      	movs	r4, r0
 800591a:	2900      	cmp	r1, #0
 800591c:	d102      	bne.n	8005924 <sbrk_aligned+0x14>
 800591e:	f000 fb73 	bl	8006008 <_sbrk_r>
 8005922:	6030      	str	r0, [r6, #0]
 8005924:	0029      	movs	r1, r5
 8005926:	0020      	movs	r0, r4
 8005928:	f000 fb6e 	bl	8006008 <_sbrk_r>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	d00a      	beq.n	8005946 <sbrk_aligned+0x36>
 8005930:	2303      	movs	r3, #3
 8005932:	1cc5      	adds	r5, r0, #3
 8005934:	439d      	bics	r5, r3
 8005936:	42a8      	cmp	r0, r5
 8005938:	d007      	beq.n	800594a <sbrk_aligned+0x3a>
 800593a:	1a29      	subs	r1, r5, r0
 800593c:	0020      	movs	r0, r4
 800593e:	f000 fb63 	bl	8006008 <_sbrk_r>
 8005942:	1c43      	adds	r3, r0, #1
 8005944:	d101      	bne.n	800594a <sbrk_aligned+0x3a>
 8005946:	2501      	movs	r5, #1
 8005948:	426d      	negs	r5, r5
 800594a:	0028      	movs	r0, r5
 800594c:	bd70      	pop	{r4, r5, r6, pc}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	20000444 	.word	0x20000444

08005954 <_malloc_r>:
 8005954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005956:	2203      	movs	r2, #3
 8005958:	1ccb      	adds	r3, r1, #3
 800595a:	4393      	bics	r3, r2
 800595c:	3308      	adds	r3, #8
 800595e:	0006      	movs	r6, r0
 8005960:	001f      	movs	r7, r3
 8005962:	2b0c      	cmp	r3, #12
 8005964:	d232      	bcs.n	80059cc <_malloc_r+0x78>
 8005966:	270c      	movs	r7, #12
 8005968:	42b9      	cmp	r1, r7
 800596a:	d831      	bhi.n	80059d0 <_malloc_r+0x7c>
 800596c:	0030      	movs	r0, r6
 800596e:	f000 fc2f 	bl	80061d0 <__malloc_lock>
 8005972:	4d32      	ldr	r5, [pc, #200]	; (8005a3c <_malloc_r+0xe8>)
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	001c      	movs	r4, r3
 8005978:	2c00      	cmp	r4, #0
 800597a:	d12e      	bne.n	80059da <_malloc_r+0x86>
 800597c:	0039      	movs	r1, r7
 800597e:	0030      	movs	r0, r6
 8005980:	f7ff ffc6 	bl	8005910 <sbrk_aligned>
 8005984:	0004      	movs	r4, r0
 8005986:	1c43      	adds	r3, r0, #1
 8005988:	d11e      	bne.n	80059c8 <_malloc_r+0x74>
 800598a:	682c      	ldr	r4, [r5, #0]
 800598c:	0025      	movs	r5, r4
 800598e:	2d00      	cmp	r5, #0
 8005990:	d14a      	bne.n	8005a28 <_malloc_r+0xd4>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	0029      	movs	r1, r5
 8005996:	18e3      	adds	r3, r4, r3
 8005998:	0030      	movs	r0, r6
 800599a:	9301      	str	r3, [sp, #4]
 800599c:	f000 fb34 	bl	8006008 <_sbrk_r>
 80059a0:	9b01      	ldr	r3, [sp, #4]
 80059a2:	4283      	cmp	r3, r0
 80059a4:	d143      	bne.n	8005a2e <_malloc_r+0xda>
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	3703      	adds	r7, #3
 80059aa:	1aff      	subs	r7, r7, r3
 80059ac:	2303      	movs	r3, #3
 80059ae:	439f      	bics	r7, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	2f0c      	cmp	r7, #12
 80059b4:	d200      	bcs.n	80059b8 <_malloc_r+0x64>
 80059b6:	270c      	movs	r7, #12
 80059b8:	0039      	movs	r1, r7
 80059ba:	0030      	movs	r0, r6
 80059bc:	f7ff ffa8 	bl	8005910 <sbrk_aligned>
 80059c0:	1c43      	adds	r3, r0, #1
 80059c2:	d034      	beq.n	8005a2e <_malloc_r+0xda>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	19df      	adds	r7, r3, r7
 80059c8:	6027      	str	r7, [r4, #0]
 80059ca:	e013      	b.n	80059f4 <_malloc_r+0xa0>
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	dacb      	bge.n	8005968 <_malloc_r+0x14>
 80059d0:	230c      	movs	r3, #12
 80059d2:	2500      	movs	r5, #0
 80059d4:	6033      	str	r3, [r6, #0]
 80059d6:	0028      	movs	r0, r5
 80059d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059da:	6822      	ldr	r2, [r4, #0]
 80059dc:	1bd1      	subs	r1, r2, r7
 80059de:	d420      	bmi.n	8005a22 <_malloc_r+0xce>
 80059e0:	290b      	cmp	r1, #11
 80059e2:	d917      	bls.n	8005a14 <_malloc_r+0xc0>
 80059e4:	19e2      	adds	r2, r4, r7
 80059e6:	6027      	str	r7, [r4, #0]
 80059e8:	42a3      	cmp	r3, r4
 80059ea:	d111      	bne.n	8005a10 <_malloc_r+0xbc>
 80059ec:	602a      	str	r2, [r5, #0]
 80059ee:	6863      	ldr	r3, [r4, #4]
 80059f0:	6011      	str	r1, [r2, #0]
 80059f2:	6053      	str	r3, [r2, #4]
 80059f4:	0030      	movs	r0, r6
 80059f6:	0025      	movs	r5, r4
 80059f8:	f000 fbf2 	bl	80061e0 <__malloc_unlock>
 80059fc:	2207      	movs	r2, #7
 80059fe:	350b      	adds	r5, #11
 8005a00:	1d23      	adds	r3, r4, #4
 8005a02:	4395      	bics	r5, r2
 8005a04:	1aea      	subs	r2, r5, r3
 8005a06:	429d      	cmp	r5, r3
 8005a08:	d0e5      	beq.n	80059d6 <_malloc_r+0x82>
 8005a0a:	1b5b      	subs	r3, r3, r5
 8005a0c:	50a3      	str	r3, [r4, r2]
 8005a0e:	e7e2      	b.n	80059d6 <_malloc_r+0x82>
 8005a10:	605a      	str	r2, [r3, #4]
 8005a12:	e7ec      	b.n	80059ee <_malloc_r+0x9a>
 8005a14:	6862      	ldr	r2, [r4, #4]
 8005a16:	42a3      	cmp	r3, r4
 8005a18:	d101      	bne.n	8005a1e <_malloc_r+0xca>
 8005a1a:	602a      	str	r2, [r5, #0]
 8005a1c:	e7ea      	b.n	80059f4 <_malloc_r+0xa0>
 8005a1e:	605a      	str	r2, [r3, #4]
 8005a20:	e7e8      	b.n	80059f4 <_malloc_r+0xa0>
 8005a22:	0023      	movs	r3, r4
 8005a24:	6864      	ldr	r4, [r4, #4]
 8005a26:	e7a7      	b.n	8005978 <_malloc_r+0x24>
 8005a28:	002c      	movs	r4, r5
 8005a2a:	686d      	ldr	r5, [r5, #4]
 8005a2c:	e7af      	b.n	800598e <_malloc_r+0x3a>
 8005a2e:	230c      	movs	r3, #12
 8005a30:	0030      	movs	r0, r6
 8005a32:	6033      	str	r3, [r6, #0]
 8005a34:	f000 fbd4 	bl	80061e0 <__malloc_unlock>
 8005a38:	e7cd      	b.n	80059d6 <_malloc_r+0x82>
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	20000440 	.word	0x20000440

08005a40 <__ssputs_r>:
 8005a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a42:	688e      	ldr	r6, [r1, #8]
 8005a44:	b085      	sub	sp, #20
 8005a46:	0007      	movs	r7, r0
 8005a48:	000c      	movs	r4, r1
 8005a4a:	9203      	str	r2, [sp, #12]
 8005a4c:	9301      	str	r3, [sp, #4]
 8005a4e:	429e      	cmp	r6, r3
 8005a50:	d83c      	bhi.n	8005acc <__ssputs_r+0x8c>
 8005a52:	2390      	movs	r3, #144	; 0x90
 8005a54:	898a      	ldrh	r2, [r1, #12]
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	421a      	tst	r2, r3
 8005a5a:	d034      	beq.n	8005ac6 <__ssputs_r+0x86>
 8005a5c:	6909      	ldr	r1, [r1, #16]
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	6960      	ldr	r0, [r4, #20]
 8005a62:	1a5b      	subs	r3, r3, r1
 8005a64:	9302      	str	r3, [sp, #8]
 8005a66:	2303      	movs	r3, #3
 8005a68:	4343      	muls	r3, r0
 8005a6a:	0fdd      	lsrs	r5, r3, #31
 8005a6c:	18ed      	adds	r5, r5, r3
 8005a6e:	9b01      	ldr	r3, [sp, #4]
 8005a70:	9802      	ldr	r0, [sp, #8]
 8005a72:	3301      	adds	r3, #1
 8005a74:	181b      	adds	r3, r3, r0
 8005a76:	106d      	asrs	r5, r5, #1
 8005a78:	42ab      	cmp	r3, r5
 8005a7a:	d900      	bls.n	8005a7e <__ssputs_r+0x3e>
 8005a7c:	001d      	movs	r5, r3
 8005a7e:	0553      	lsls	r3, r2, #21
 8005a80:	d532      	bpl.n	8005ae8 <__ssputs_r+0xa8>
 8005a82:	0029      	movs	r1, r5
 8005a84:	0038      	movs	r0, r7
 8005a86:	f7ff ff65 	bl	8005954 <_malloc_r>
 8005a8a:	1e06      	subs	r6, r0, #0
 8005a8c:	d109      	bne.n	8005aa2 <__ssputs_r+0x62>
 8005a8e:	230c      	movs	r3, #12
 8005a90:	603b      	str	r3, [r7, #0]
 8005a92:	2340      	movs	r3, #64	; 0x40
 8005a94:	2001      	movs	r0, #1
 8005a96:	89a2      	ldrh	r2, [r4, #12]
 8005a98:	4240      	negs	r0, r0
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	81a3      	strh	r3, [r4, #12]
 8005a9e:	b005      	add	sp, #20
 8005aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aa2:	9a02      	ldr	r2, [sp, #8]
 8005aa4:	6921      	ldr	r1, [r4, #16]
 8005aa6:	f000 fb76 	bl	8006196 <memcpy>
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	4a14      	ldr	r2, [pc, #80]	; (8005b00 <__ssputs_r+0xc0>)
 8005aae:	401a      	ands	r2, r3
 8005ab0:	2380      	movs	r3, #128	; 0x80
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	81a3      	strh	r3, [r4, #12]
 8005ab6:	9b02      	ldr	r3, [sp, #8]
 8005ab8:	6126      	str	r6, [r4, #16]
 8005aba:	18f6      	adds	r6, r6, r3
 8005abc:	6026      	str	r6, [r4, #0]
 8005abe:	6165      	str	r5, [r4, #20]
 8005ac0:	9e01      	ldr	r6, [sp, #4]
 8005ac2:	1aed      	subs	r5, r5, r3
 8005ac4:	60a5      	str	r5, [r4, #8]
 8005ac6:	9b01      	ldr	r3, [sp, #4]
 8005ac8:	429e      	cmp	r6, r3
 8005aca:	d900      	bls.n	8005ace <__ssputs_r+0x8e>
 8005acc:	9e01      	ldr	r6, [sp, #4]
 8005ace:	0032      	movs	r2, r6
 8005ad0:	9903      	ldr	r1, [sp, #12]
 8005ad2:	6820      	ldr	r0, [r4, #0]
 8005ad4:	f000 fb68 	bl	80061a8 <memmove>
 8005ad8:	68a3      	ldr	r3, [r4, #8]
 8005ada:	2000      	movs	r0, #0
 8005adc:	1b9b      	subs	r3, r3, r6
 8005ade:	60a3      	str	r3, [r4, #8]
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	199e      	adds	r6, r3, r6
 8005ae4:	6026      	str	r6, [r4, #0]
 8005ae6:	e7da      	b.n	8005a9e <__ssputs_r+0x5e>
 8005ae8:	002a      	movs	r2, r5
 8005aea:	0038      	movs	r0, r7
 8005aec:	f000 fb80 	bl	80061f0 <_realloc_r>
 8005af0:	1e06      	subs	r6, r0, #0
 8005af2:	d1e0      	bne.n	8005ab6 <__ssputs_r+0x76>
 8005af4:	0038      	movs	r0, r7
 8005af6:	6921      	ldr	r1, [r4, #16]
 8005af8:	f7ff fec0 	bl	800587c <_free_r>
 8005afc:	e7c7      	b.n	8005a8e <__ssputs_r+0x4e>
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	fffffb7f 	.word	0xfffffb7f

08005b04 <_svfiprintf_r>:
 8005b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b06:	b0a1      	sub	sp, #132	; 0x84
 8005b08:	9003      	str	r0, [sp, #12]
 8005b0a:	001d      	movs	r5, r3
 8005b0c:	898b      	ldrh	r3, [r1, #12]
 8005b0e:	000f      	movs	r7, r1
 8005b10:	0016      	movs	r6, r2
 8005b12:	061b      	lsls	r3, r3, #24
 8005b14:	d511      	bpl.n	8005b3a <_svfiprintf_r+0x36>
 8005b16:	690b      	ldr	r3, [r1, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10e      	bne.n	8005b3a <_svfiprintf_r+0x36>
 8005b1c:	2140      	movs	r1, #64	; 0x40
 8005b1e:	f7ff ff19 	bl	8005954 <_malloc_r>
 8005b22:	6038      	str	r0, [r7, #0]
 8005b24:	6138      	str	r0, [r7, #16]
 8005b26:	2800      	cmp	r0, #0
 8005b28:	d105      	bne.n	8005b36 <_svfiprintf_r+0x32>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	9a03      	ldr	r2, [sp, #12]
 8005b2e:	3801      	subs	r0, #1
 8005b30:	6013      	str	r3, [r2, #0]
 8005b32:	b021      	add	sp, #132	; 0x84
 8005b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b36:	2340      	movs	r3, #64	; 0x40
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	ac08      	add	r4, sp, #32
 8005b3e:	6163      	str	r3, [r4, #20]
 8005b40:	3320      	adds	r3, #32
 8005b42:	7663      	strb	r3, [r4, #25]
 8005b44:	3310      	adds	r3, #16
 8005b46:	76a3      	strb	r3, [r4, #26]
 8005b48:	9507      	str	r5, [sp, #28]
 8005b4a:	0035      	movs	r5, r6
 8005b4c:	782b      	ldrb	r3, [r5, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <_svfiprintf_r+0x52>
 8005b52:	2b25      	cmp	r3, #37	; 0x25
 8005b54:	d147      	bne.n	8005be6 <_svfiprintf_r+0xe2>
 8005b56:	1bab      	subs	r3, r5, r6
 8005b58:	9305      	str	r3, [sp, #20]
 8005b5a:	42b5      	cmp	r5, r6
 8005b5c:	d00c      	beq.n	8005b78 <_svfiprintf_r+0x74>
 8005b5e:	0032      	movs	r2, r6
 8005b60:	0039      	movs	r1, r7
 8005b62:	9803      	ldr	r0, [sp, #12]
 8005b64:	f7ff ff6c 	bl	8005a40 <__ssputs_r>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d100      	bne.n	8005b6e <_svfiprintf_r+0x6a>
 8005b6c:	e0ae      	b.n	8005ccc <_svfiprintf_r+0x1c8>
 8005b6e:	6962      	ldr	r2, [r4, #20]
 8005b70:	9b05      	ldr	r3, [sp, #20]
 8005b72:	4694      	mov	ip, r2
 8005b74:	4463      	add	r3, ip
 8005b76:	6163      	str	r3, [r4, #20]
 8005b78:	782b      	ldrb	r3, [r5, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d100      	bne.n	8005b80 <_svfiprintf_r+0x7c>
 8005b7e:	e0a5      	b.n	8005ccc <_svfiprintf_r+0x1c8>
 8005b80:	2201      	movs	r2, #1
 8005b82:	2300      	movs	r3, #0
 8005b84:	4252      	negs	r2, r2
 8005b86:	6062      	str	r2, [r4, #4]
 8005b88:	a904      	add	r1, sp, #16
 8005b8a:	3254      	adds	r2, #84	; 0x54
 8005b8c:	1852      	adds	r2, r2, r1
 8005b8e:	1c6e      	adds	r6, r5, #1
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	60e3      	str	r3, [r4, #12]
 8005b94:	60a3      	str	r3, [r4, #8]
 8005b96:	7013      	strb	r3, [r2, #0]
 8005b98:	65a3      	str	r3, [r4, #88]	; 0x58
 8005b9a:	2205      	movs	r2, #5
 8005b9c:	7831      	ldrb	r1, [r6, #0]
 8005b9e:	4854      	ldr	r0, [pc, #336]	; (8005cf0 <_svfiprintf_r+0x1ec>)
 8005ba0:	f000 faee 	bl	8006180 <memchr>
 8005ba4:	1c75      	adds	r5, r6, #1
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	d11f      	bne.n	8005bea <_svfiprintf_r+0xe6>
 8005baa:	6822      	ldr	r2, [r4, #0]
 8005bac:	06d3      	lsls	r3, r2, #27
 8005bae:	d504      	bpl.n	8005bba <_svfiprintf_r+0xb6>
 8005bb0:	2353      	movs	r3, #83	; 0x53
 8005bb2:	a904      	add	r1, sp, #16
 8005bb4:	185b      	adds	r3, r3, r1
 8005bb6:	2120      	movs	r1, #32
 8005bb8:	7019      	strb	r1, [r3, #0]
 8005bba:	0713      	lsls	r3, r2, #28
 8005bbc:	d504      	bpl.n	8005bc8 <_svfiprintf_r+0xc4>
 8005bbe:	2353      	movs	r3, #83	; 0x53
 8005bc0:	a904      	add	r1, sp, #16
 8005bc2:	185b      	adds	r3, r3, r1
 8005bc4:	212b      	movs	r1, #43	; 0x2b
 8005bc6:	7019      	strb	r1, [r3, #0]
 8005bc8:	7833      	ldrb	r3, [r6, #0]
 8005bca:	2b2a      	cmp	r3, #42	; 0x2a
 8005bcc:	d016      	beq.n	8005bfc <_svfiprintf_r+0xf8>
 8005bce:	0035      	movs	r5, r6
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	200a      	movs	r0, #10
 8005bd4:	68e3      	ldr	r3, [r4, #12]
 8005bd6:	782a      	ldrb	r2, [r5, #0]
 8005bd8:	1c6e      	adds	r6, r5, #1
 8005bda:	3a30      	subs	r2, #48	; 0x30
 8005bdc:	2a09      	cmp	r2, #9
 8005bde:	d94e      	bls.n	8005c7e <_svfiprintf_r+0x17a>
 8005be0:	2900      	cmp	r1, #0
 8005be2:	d111      	bne.n	8005c08 <_svfiprintf_r+0x104>
 8005be4:	e017      	b.n	8005c16 <_svfiprintf_r+0x112>
 8005be6:	3501      	adds	r5, #1
 8005be8:	e7b0      	b.n	8005b4c <_svfiprintf_r+0x48>
 8005bea:	4b41      	ldr	r3, [pc, #260]	; (8005cf0 <_svfiprintf_r+0x1ec>)
 8005bec:	6822      	ldr	r2, [r4, #0]
 8005bee:	1ac0      	subs	r0, r0, r3
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4083      	lsls	r3, r0
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	002e      	movs	r6, r5
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	e7ce      	b.n	8005b9a <_svfiprintf_r+0x96>
 8005bfc:	9b07      	ldr	r3, [sp, #28]
 8005bfe:	1d19      	adds	r1, r3, #4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	9107      	str	r1, [sp, #28]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	db01      	blt.n	8005c0c <_svfiprintf_r+0x108>
 8005c08:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c0a:	e004      	b.n	8005c16 <_svfiprintf_r+0x112>
 8005c0c:	425b      	negs	r3, r3
 8005c0e:	60e3      	str	r3, [r4, #12]
 8005c10:	2302      	movs	r3, #2
 8005c12:	4313      	orrs	r3, r2
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	782b      	ldrb	r3, [r5, #0]
 8005c18:	2b2e      	cmp	r3, #46	; 0x2e
 8005c1a:	d10a      	bne.n	8005c32 <_svfiprintf_r+0x12e>
 8005c1c:	786b      	ldrb	r3, [r5, #1]
 8005c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c20:	d135      	bne.n	8005c8e <_svfiprintf_r+0x18a>
 8005c22:	9b07      	ldr	r3, [sp, #28]
 8005c24:	3502      	adds	r5, #2
 8005c26:	1d1a      	adds	r2, r3, #4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	9207      	str	r2, [sp, #28]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	db2b      	blt.n	8005c88 <_svfiprintf_r+0x184>
 8005c30:	9309      	str	r3, [sp, #36]	; 0x24
 8005c32:	4e30      	ldr	r6, [pc, #192]	; (8005cf4 <_svfiprintf_r+0x1f0>)
 8005c34:	2203      	movs	r2, #3
 8005c36:	0030      	movs	r0, r6
 8005c38:	7829      	ldrb	r1, [r5, #0]
 8005c3a:	f000 faa1 	bl	8006180 <memchr>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d006      	beq.n	8005c50 <_svfiprintf_r+0x14c>
 8005c42:	2340      	movs	r3, #64	; 0x40
 8005c44:	1b80      	subs	r0, r0, r6
 8005c46:	4083      	lsls	r3, r0
 8005c48:	6822      	ldr	r2, [r4, #0]
 8005c4a:	3501      	adds	r5, #1
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	6023      	str	r3, [r4, #0]
 8005c50:	7829      	ldrb	r1, [r5, #0]
 8005c52:	2206      	movs	r2, #6
 8005c54:	4828      	ldr	r0, [pc, #160]	; (8005cf8 <_svfiprintf_r+0x1f4>)
 8005c56:	1c6e      	adds	r6, r5, #1
 8005c58:	7621      	strb	r1, [r4, #24]
 8005c5a:	f000 fa91 	bl	8006180 <memchr>
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d03c      	beq.n	8005cdc <_svfiprintf_r+0x1d8>
 8005c62:	4b26      	ldr	r3, [pc, #152]	; (8005cfc <_svfiprintf_r+0x1f8>)
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d125      	bne.n	8005cb4 <_svfiprintf_r+0x1b0>
 8005c68:	2207      	movs	r2, #7
 8005c6a:	9b07      	ldr	r3, [sp, #28]
 8005c6c:	3307      	adds	r3, #7
 8005c6e:	4393      	bics	r3, r2
 8005c70:	3308      	adds	r3, #8
 8005c72:	9307      	str	r3, [sp, #28]
 8005c74:	6963      	ldr	r3, [r4, #20]
 8005c76:	9a04      	ldr	r2, [sp, #16]
 8005c78:	189b      	adds	r3, r3, r2
 8005c7a:	6163      	str	r3, [r4, #20]
 8005c7c:	e765      	b.n	8005b4a <_svfiprintf_r+0x46>
 8005c7e:	4343      	muls	r3, r0
 8005c80:	0035      	movs	r5, r6
 8005c82:	2101      	movs	r1, #1
 8005c84:	189b      	adds	r3, r3, r2
 8005c86:	e7a6      	b.n	8005bd6 <_svfiprintf_r+0xd2>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	425b      	negs	r3, r3
 8005c8c:	e7d0      	b.n	8005c30 <_svfiprintf_r+0x12c>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	200a      	movs	r0, #10
 8005c92:	001a      	movs	r2, r3
 8005c94:	3501      	adds	r5, #1
 8005c96:	6063      	str	r3, [r4, #4]
 8005c98:	7829      	ldrb	r1, [r5, #0]
 8005c9a:	1c6e      	adds	r6, r5, #1
 8005c9c:	3930      	subs	r1, #48	; 0x30
 8005c9e:	2909      	cmp	r1, #9
 8005ca0:	d903      	bls.n	8005caa <_svfiprintf_r+0x1a6>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0c5      	beq.n	8005c32 <_svfiprintf_r+0x12e>
 8005ca6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ca8:	e7c3      	b.n	8005c32 <_svfiprintf_r+0x12e>
 8005caa:	4342      	muls	r2, r0
 8005cac:	0035      	movs	r5, r6
 8005cae:	2301      	movs	r3, #1
 8005cb0:	1852      	adds	r2, r2, r1
 8005cb2:	e7f1      	b.n	8005c98 <_svfiprintf_r+0x194>
 8005cb4:	ab07      	add	r3, sp, #28
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	003a      	movs	r2, r7
 8005cba:	0021      	movs	r1, r4
 8005cbc:	4b10      	ldr	r3, [pc, #64]	; (8005d00 <_svfiprintf_r+0x1fc>)
 8005cbe:	9803      	ldr	r0, [sp, #12]
 8005cc0:	e000      	b.n	8005cc4 <_svfiprintf_r+0x1c0>
 8005cc2:	bf00      	nop
 8005cc4:	9004      	str	r0, [sp, #16]
 8005cc6:	9b04      	ldr	r3, [sp, #16]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	d1d3      	bne.n	8005c74 <_svfiprintf_r+0x170>
 8005ccc:	89bb      	ldrh	r3, [r7, #12]
 8005cce:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005cd0:	065b      	lsls	r3, r3, #25
 8005cd2:	d400      	bmi.n	8005cd6 <_svfiprintf_r+0x1d2>
 8005cd4:	e72d      	b.n	8005b32 <_svfiprintf_r+0x2e>
 8005cd6:	2001      	movs	r0, #1
 8005cd8:	4240      	negs	r0, r0
 8005cda:	e72a      	b.n	8005b32 <_svfiprintf_r+0x2e>
 8005cdc:	ab07      	add	r3, sp, #28
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	003a      	movs	r2, r7
 8005ce2:	0021      	movs	r1, r4
 8005ce4:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <_svfiprintf_r+0x1fc>)
 8005ce6:	9803      	ldr	r0, [sp, #12]
 8005ce8:	f000 f87c 	bl	8005de4 <_printf_i>
 8005cec:	e7ea      	b.n	8005cc4 <_svfiprintf_r+0x1c0>
 8005cee:	46c0      	nop			; (mov r8, r8)
 8005cf0:	0800657c 	.word	0x0800657c
 8005cf4:	08006582 	.word	0x08006582
 8005cf8:	08006586 	.word	0x08006586
 8005cfc:	00000000 	.word	0x00000000
 8005d00:	08005a41 	.word	0x08005a41

08005d04 <_printf_common>:
 8005d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d06:	0015      	movs	r5, r2
 8005d08:	9301      	str	r3, [sp, #4]
 8005d0a:	688a      	ldr	r2, [r1, #8]
 8005d0c:	690b      	ldr	r3, [r1, #16]
 8005d0e:	000c      	movs	r4, r1
 8005d10:	9000      	str	r0, [sp, #0]
 8005d12:	4293      	cmp	r3, r2
 8005d14:	da00      	bge.n	8005d18 <_printf_common+0x14>
 8005d16:	0013      	movs	r3, r2
 8005d18:	0022      	movs	r2, r4
 8005d1a:	602b      	str	r3, [r5, #0]
 8005d1c:	3243      	adds	r2, #67	; 0x43
 8005d1e:	7812      	ldrb	r2, [r2, #0]
 8005d20:	2a00      	cmp	r2, #0
 8005d22:	d001      	beq.n	8005d28 <_printf_common+0x24>
 8005d24:	3301      	adds	r3, #1
 8005d26:	602b      	str	r3, [r5, #0]
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	069b      	lsls	r3, r3, #26
 8005d2c:	d502      	bpl.n	8005d34 <_printf_common+0x30>
 8005d2e:	682b      	ldr	r3, [r5, #0]
 8005d30:	3302      	adds	r3, #2
 8005d32:	602b      	str	r3, [r5, #0]
 8005d34:	6822      	ldr	r2, [r4, #0]
 8005d36:	2306      	movs	r3, #6
 8005d38:	0017      	movs	r7, r2
 8005d3a:	401f      	ands	r7, r3
 8005d3c:	421a      	tst	r2, r3
 8005d3e:	d027      	beq.n	8005d90 <_printf_common+0x8c>
 8005d40:	0023      	movs	r3, r4
 8005d42:	3343      	adds	r3, #67	; 0x43
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	1e5a      	subs	r2, r3, #1
 8005d48:	4193      	sbcs	r3, r2
 8005d4a:	6822      	ldr	r2, [r4, #0]
 8005d4c:	0692      	lsls	r2, r2, #26
 8005d4e:	d430      	bmi.n	8005db2 <_printf_common+0xae>
 8005d50:	0022      	movs	r2, r4
 8005d52:	9901      	ldr	r1, [sp, #4]
 8005d54:	9800      	ldr	r0, [sp, #0]
 8005d56:	9e08      	ldr	r6, [sp, #32]
 8005d58:	3243      	adds	r2, #67	; 0x43
 8005d5a:	47b0      	blx	r6
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d025      	beq.n	8005dac <_printf_common+0xa8>
 8005d60:	2306      	movs	r3, #6
 8005d62:	6820      	ldr	r0, [r4, #0]
 8005d64:	682a      	ldr	r2, [r5, #0]
 8005d66:	68e1      	ldr	r1, [r4, #12]
 8005d68:	2500      	movs	r5, #0
 8005d6a:	4003      	ands	r3, r0
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d103      	bne.n	8005d78 <_printf_common+0x74>
 8005d70:	1a8d      	subs	r5, r1, r2
 8005d72:	43eb      	mvns	r3, r5
 8005d74:	17db      	asrs	r3, r3, #31
 8005d76:	401d      	ands	r5, r3
 8005d78:	68a3      	ldr	r3, [r4, #8]
 8005d7a:	6922      	ldr	r2, [r4, #16]
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	dd01      	ble.n	8005d84 <_printf_common+0x80>
 8005d80:	1a9b      	subs	r3, r3, r2
 8005d82:	18ed      	adds	r5, r5, r3
 8005d84:	2700      	movs	r7, #0
 8005d86:	42bd      	cmp	r5, r7
 8005d88:	d120      	bne.n	8005dcc <_printf_common+0xc8>
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	e010      	b.n	8005db0 <_printf_common+0xac>
 8005d8e:	3701      	adds	r7, #1
 8005d90:	68e3      	ldr	r3, [r4, #12]
 8005d92:	682a      	ldr	r2, [r5, #0]
 8005d94:	1a9b      	subs	r3, r3, r2
 8005d96:	42bb      	cmp	r3, r7
 8005d98:	ddd2      	ble.n	8005d40 <_printf_common+0x3c>
 8005d9a:	0022      	movs	r2, r4
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	9901      	ldr	r1, [sp, #4]
 8005da0:	9800      	ldr	r0, [sp, #0]
 8005da2:	9e08      	ldr	r6, [sp, #32]
 8005da4:	3219      	adds	r2, #25
 8005da6:	47b0      	blx	r6
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d1f0      	bne.n	8005d8e <_printf_common+0x8a>
 8005dac:	2001      	movs	r0, #1
 8005dae:	4240      	negs	r0, r0
 8005db0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005db2:	2030      	movs	r0, #48	; 0x30
 8005db4:	18e1      	adds	r1, r4, r3
 8005db6:	3143      	adds	r1, #67	; 0x43
 8005db8:	7008      	strb	r0, [r1, #0]
 8005dba:	0021      	movs	r1, r4
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	3145      	adds	r1, #69	; 0x45
 8005dc0:	7809      	ldrb	r1, [r1, #0]
 8005dc2:	18a2      	adds	r2, r4, r2
 8005dc4:	3243      	adds	r2, #67	; 0x43
 8005dc6:	3302      	adds	r3, #2
 8005dc8:	7011      	strb	r1, [r2, #0]
 8005dca:	e7c1      	b.n	8005d50 <_printf_common+0x4c>
 8005dcc:	0022      	movs	r2, r4
 8005dce:	2301      	movs	r3, #1
 8005dd0:	9901      	ldr	r1, [sp, #4]
 8005dd2:	9800      	ldr	r0, [sp, #0]
 8005dd4:	9e08      	ldr	r6, [sp, #32]
 8005dd6:	321a      	adds	r2, #26
 8005dd8:	47b0      	blx	r6
 8005dda:	1c43      	adds	r3, r0, #1
 8005ddc:	d0e6      	beq.n	8005dac <_printf_common+0xa8>
 8005dde:	3701      	adds	r7, #1
 8005de0:	e7d1      	b.n	8005d86 <_printf_common+0x82>
	...

08005de4 <_printf_i>:
 8005de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de6:	b08b      	sub	sp, #44	; 0x2c
 8005de8:	9206      	str	r2, [sp, #24]
 8005dea:	000a      	movs	r2, r1
 8005dec:	3243      	adds	r2, #67	; 0x43
 8005dee:	9307      	str	r3, [sp, #28]
 8005df0:	9005      	str	r0, [sp, #20]
 8005df2:	9204      	str	r2, [sp, #16]
 8005df4:	7e0a      	ldrb	r2, [r1, #24]
 8005df6:	000c      	movs	r4, r1
 8005df8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005dfa:	2a78      	cmp	r2, #120	; 0x78
 8005dfc:	d807      	bhi.n	8005e0e <_printf_i+0x2a>
 8005dfe:	2a62      	cmp	r2, #98	; 0x62
 8005e00:	d809      	bhi.n	8005e16 <_printf_i+0x32>
 8005e02:	2a00      	cmp	r2, #0
 8005e04:	d100      	bne.n	8005e08 <_printf_i+0x24>
 8005e06:	e0c1      	b.n	8005f8c <_printf_i+0x1a8>
 8005e08:	2a58      	cmp	r2, #88	; 0x58
 8005e0a:	d100      	bne.n	8005e0e <_printf_i+0x2a>
 8005e0c:	e08c      	b.n	8005f28 <_printf_i+0x144>
 8005e0e:	0026      	movs	r6, r4
 8005e10:	3642      	adds	r6, #66	; 0x42
 8005e12:	7032      	strb	r2, [r6, #0]
 8005e14:	e022      	b.n	8005e5c <_printf_i+0x78>
 8005e16:	0010      	movs	r0, r2
 8005e18:	3863      	subs	r0, #99	; 0x63
 8005e1a:	2815      	cmp	r0, #21
 8005e1c:	d8f7      	bhi.n	8005e0e <_printf_i+0x2a>
 8005e1e:	f7fa f973 	bl	8000108 <__gnu_thumb1_case_shi>
 8005e22:	0016      	.short	0x0016
 8005e24:	fff6001f 	.word	0xfff6001f
 8005e28:	fff6fff6 	.word	0xfff6fff6
 8005e2c:	001ffff6 	.word	0x001ffff6
 8005e30:	fff6fff6 	.word	0xfff6fff6
 8005e34:	fff6fff6 	.word	0xfff6fff6
 8005e38:	003600a8 	.word	0x003600a8
 8005e3c:	fff6009a 	.word	0xfff6009a
 8005e40:	00b9fff6 	.word	0x00b9fff6
 8005e44:	0036fff6 	.word	0x0036fff6
 8005e48:	fff6fff6 	.word	0xfff6fff6
 8005e4c:	009e      	.short	0x009e
 8005e4e:	0026      	movs	r6, r4
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	3642      	adds	r6, #66	; 0x42
 8005e54:	1d11      	adds	r1, r2, #4
 8005e56:	6019      	str	r1, [r3, #0]
 8005e58:	6813      	ldr	r3, [r2, #0]
 8005e5a:	7033      	strb	r3, [r6, #0]
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e0a7      	b.n	8005fb0 <_printf_i+0x1cc>
 8005e60:	6808      	ldr	r0, [r1, #0]
 8005e62:	6819      	ldr	r1, [r3, #0]
 8005e64:	1d0a      	adds	r2, r1, #4
 8005e66:	0605      	lsls	r5, r0, #24
 8005e68:	d50b      	bpl.n	8005e82 <_printf_i+0x9e>
 8005e6a:	680d      	ldr	r5, [r1, #0]
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	2d00      	cmp	r5, #0
 8005e70:	da03      	bge.n	8005e7a <_printf_i+0x96>
 8005e72:	232d      	movs	r3, #45	; 0x2d
 8005e74:	9a04      	ldr	r2, [sp, #16]
 8005e76:	426d      	negs	r5, r5
 8005e78:	7013      	strb	r3, [r2, #0]
 8005e7a:	4b61      	ldr	r3, [pc, #388]	; (8006000 <_printf_i+0x21c>)
 8005e7c:	270a      	movs	r7, #10
 8005e7e:	9303      	str	r3, [sp, #12]
 8005e80:	e01b      	b.n	8005eba <_printf_i+0xd6>
 8005e82:	680d      	ldr	r5, [r1, #0]
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	0641      	lsls	r1, r0, #25
 8005e88:	d5f1      	bpl.n	8005e6e <_printf_i+0x8a>
 8005e8a:	b22d      	sxth	r5, r5
 8005e8c:	e7ef      	b.n	8005e6e <_printf_i+0x8a>
 8005e8e:	680d      	ldr	r5, [r1, #0]
 8005e90:	6819      	ldr	r1, [r3, #0]
 8005e92:	1d08      	adds	r0, r1, #4
 8005e94:	6018      	str	r0, [r3, #0]
 8005e96:	062e      	lsls	r6, r5, #24
 8005e98:	d501      	bpl.n	8005e9e <_printf_i+0xba>
 8005e9a:	680d      	ldr	r5, [r1, #0]
 8005e9c:	e003      	b.n	8005ea6 <_printf_i+0xc2>
 8005e9e:	066d      	lsls	r5, r5, #25
 8005ea0:	d5fb      	bpl.n	8005e9a <_printf_i+0xb6>
 8005ea2:	680d      	ldr	r5, [r1, #0]
 8005ea4:	b2ad      	uxth	r5, r5
 8005ea6:	4b56      	ldr	r3, [pc, #344]	; (8006000 <_printf_i+0x21c>)
 8005ea8:	2708      	movs	r7, #8
 8005eaa:	9303      	str	r3, [sp, #12]
 8005eac:	2a6f      	cmp	r2, #111	; 0x6f
 8005eae:	d000      	beq.n	8005eb2 <_printf_i+0xce>
 8005eb0:	3702      	adds	r7, #2
 8005eb2:	0023      	movs	r3, r4
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	3343      	adds	r3, #67	; 0x43
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	6863      	ldr	r3, [r4, #4]
 8005ebc:	60a3      	str	r3, [r4, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	db03      	blt.n	8005eca <_printf_i+0xe6>
 8005ec2:	2204      	movs	r2, #4
 8005ec4:	6821      	ldr	r1, [r4, #0]
 8005ec6:	4391      	bics	r1, r2
 8005ec8:	6021      	str	r1, [r4, #0]
 8005eca:	2d00      	cmp	r5, #0
 8005ecc:	d102      	bne.n	8005ed4 <_printf_i+0xf0>
 8005ece:	9e04      	ldr	r6, [sp, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00c      	beq.n	8005eee <_printf_i+0x10a>
 8005ed4:	9e04      	ldr	r6, [sp, #16]
 8005ed6:	0028      	movs	r0, r5
 8005ed8:	0039      	movs	r1, r7
 8005eda:	f7fa f9a5 	bl	8000228 <__aeabi_uidivmod>
 8005ede:	9b03      	ldr	r3, [sp, #12]
 8005ee0:	3e01      	subs	r6, #1
 8005ee2:	5c5b      	ldrb	r3, [r3, r1]
 8005ee4:	7033      	strb	r3, [r6, #0]
 8005ee6:	002b      	movs	r3, r5
 8005ee8:	0005      	movs	r5, r0
 8005eea:	429f      	cmp	r7, r3
 8005eec:	d9f3      	bls.n	8005ed6 <_printf_i+0xf2>
 8005eee:	2f08      	cmp	r7, #8
 8005ef0:	d109      	bne.n	8005f06 <_printf_i+0x122>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	07db      	lsls	r3, r3, #31
 8005ef6:	d506      	bpl.n	8005f06 <_printf_i+0x122>
 8005ef8:	6863      	ldr	r3, [r4, #4]
 8005efa:	6922      	ldr	r2, [r4, #16]
 8005efc:	4293      	cmp	r3, r2
 8005efe:	dc02      	bgt.n	8005f06 <_printf_i+0x122>
 8005f00:	2330      	movs	r3, #48	; 0x30
 8005f02:	3e01      	subs	r6, #1
 8005f04:	7033      	strb	r3, [r6, #0]
 8005f06:	9b04      	ldr	r3, [sp, #16]
 8005f08:	1b9b      	subs	r3, r3, r6
 8005f0a:	6123      	str	r3, [r4, #16]
 8005f0c:	9b07      	ldr	r3, [sp, #28]
 8005f0e:	0021      	movs	r1, r4
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	9805      	ldr	r0, [sp, #20]
 8005f14:	9b06      	ldr	r3, [sp, #24]
 8005f16:	aa09      	add	r2, sp, #36	; 0x24
 8005f18:	f7ff fef4 	bl	8005d04 <_printf_common>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	d14c      	bne.n	8005fba <_printf_i+0x1d6>
 8005f20:	2001      	movs	r0, #1
 8005f22:	4240      	negs	r0, r0
 8005f24:	b00b      	add	sp, #44	; 0x2c
 8005f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f28:	3145      	adds	r1, #69	; 0x45
 8005f2a:	700a      	strb	r2, [r1, #0]
 8005f2c:	4a34      	ldr	r2, [pc, #208]	; (8006000 <_printf_i+0x21c>)
 8005f2e:	9203      	str	r2, [sp, #12]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	6821      	ldr	r1, [r4, #0]
 8005f34:	ca20      	ldmia	r2!, {r5}
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	0608      	lsls	r0, r1, #24
 8005f3a:	d516      	bpl.n	8005f6a <_printf_i+0x186>
 8005f3c:	07cb      	lsls	r3, r1, #31
 8005f3e:	d502      	bpl.n	8005f46 <_printf_i+0x162>
 8005f40:	2320      	movs	r3, #32
 8005f42:	4319      	orrs	r1, r3
 8005f44:	6021      	str	r1, [r4, #0]
 8005f46:	2710      	movs	r7, #16
 8005f48:	2d00      	cmp	r5, #0
 8005f4a:	d1b2      	bne.n	8005eb2 <_printf_i+0xce>
 8005f4c:	2320      	movs	r3, #32
 8005f4e:	6822      	ldr	r2, [r4, #0]
 8005f50:	439a      	bics	r2, r3
 8005f52:	6022      	str	r2, [r4, #0]
 8005f54:	e7ad      	b.n	8005eb2 <_printf_i+0xce>
 8005f56:	2220      	movs	r2, #32
 8005f58:	6809      	ldr	r1, [r1, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	6022      	str	r2, [r4, #0]
 8005f5e:	0022      	movs	r2, r4
 8005f60:	2178      	movs	r1, #120	; 0x78
 8005f62:	3245      	adds	r2, #69	; 0x45
 8005f64:	7011      	strb	r1, [r2, #0]
 8005f66:	4a27      	ldr	r2, [pc, #156]	; (8006004 <_printf_i+0x220>)
 8005f68:	e7e1      	b.n	8005f2e <_printf_i+0x14a>
 8005f6a:	0648      	lsls	r0, r1, #25
 8005f6c:	d5e6      	bpl.n	8005f3c <_printf_i+0x158>
 8005f6e:	b2ad      	uxth	r5, r5
 8005f70:	e7e4      	b.n	8005f3c <_printf_i+0x158>
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	680d      	ldr	r5, [r1, #0]
 8005f76:	1d10      	adds	r0, r2, #4
 8005f78:	6949      	ldr	r1, [r1, #20]
 8005f7a:	6018      	str	r0, [r3, #0]
 8005f7c:	6813      	ldr	r3, [r2, #0]
 8005f7e:	062e      	lsls	r6, r5, #24
 8005f80:	d501      	bpl.n	8005f86 <_printf_i+0x1a2>
 8005f82:	6019      	str	r1, [r3, #0]
 8005f84:	e002      	b.n	8005f8c <_printf_i+0x1a8>
 8005f86:	066d      	lsls	r5, r5, #25
 8005f88:	d5fb      	bpl.n	8005f82 <_printf_i+0x19e>
 8005f8a:	8019      	strh	r1, [r3, #0]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	9e04      	ldr	r6, [sp, #16]
 8005f90:	6123      	str	r3, [r4, #16]
 8005f92:	e7bb      	b.n	8005f0c <_printf_i+0x128>
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	1d11      	adds	r1, r2, #4
 8005f98:	6019      	str	r1, [r3, #0]
 8005f9a:	6816      	ldr	r6, [r2, #0]
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	0030      	movs	r0, r6
 8005fa0:	6862      	ldr	r2, [r4, #4]
 8005fa2:	f000 f8ed 	bl	8006180 <memchr>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d001      	beq.n	8005fae <_printf_i+0x1ca>
 8005faa:	1b80      	subs	r0, r0, r6
 8005fac:	6060      	str	r0, [r4, #4]
 8005fae:	6863      	ldr	r3, [r4, #4]
 8005fb0:	6123      	str	r3, [r4, #16]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	9a04      	ldr	r2, [sp, #16]
 8005fb6:	7013      	strb	r3, [r2, #0]
 8005fb8:	e7a8      	b.n	8005f0c <_printf_i+0x128>
 8005fba:	6923      	ldr	r3, [r4, #16]
 8005fbc:	0032      	movs	r2, r6
 8005fbe:	9906      	ldr	r1, [sp, #24]
 8005fc0:	9805      	ldr	r0, [sp, #20]
 8005fc2:	9d07      	ldr	r5, [sp, #28]
 8005fc4:	47a8      	blx	r5
 8005fc6:	1c43      	adds	r3, r0, #1
 8005fc8:	d0aa      	beq.n	8005f20 <_printf_i+0x13c>
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	079b      	lsls	r3, r3, #30
 8005fce:	d415      	bmi.n	8005ffc <_printf_i+0x218>
 8005fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd2:	68e0      	ldr	r0, [r4, #12]
 8005fd4:	4298      	cmp	r0, r3
 8005fd6:	daa5      	bge.n	8005f24 <_printf_i+0x140>
 8005fd8:	0018      	movs	r0, r3
 8005fda:	e7a3      	b.n	8005f24 <_printf_i+0x140>
 8005fdc:	0022      	movs	r2, r4
 8005fde:	2301      	movs	r3, #1
 8005fe0:	9906      	ldr	r1, [sp, #24]
 8005fe2:	9805      	ldr	r0, [sp, #20]
 8005fe4:	9e07      	ldr	r6, [sp, #28]
 8005fe6:	3219      	adds	r2, #25
 8005fe8:	47b0      	blx	r6
 8005fea:	1c43      	adds	r3, r0, #1
 8005fec:	d098      	beq.n	8005f20 <_printf_i+0x13c>
 8005fee:	3501      	adds	r5, #1
 8005ff0:	68e3      	ldr	r3, [r4, #12]
 8005ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ff4:	1a9b      	subs	r3, r3, r2
 8005ff6:	42ab      	cmp	r3, r5
 8005ff8:	dcf0      	bgt.n	8005fdc <_printf_i+0x1f8>
 8005ffa:	e7e9      	b.n	8005fd0 <_printf_i+0x1ec>
 8005ffc:	2500      	movs	r5, #0
 8005ffe:	e7f7      	b.n	8005ff0 <_printf_i+0x20c>
 8006000:	0800658d 	.word	0x0800658d
 8006004:	0800659e 	.word	0x0800659e

08006008 <_sbrk_r>:
 8006008:	2300      	movs	r3, #0
 800600a:	b570      	push	{r4, r5, r6, lr}
 800600c:	4d06      	ldr	r5, [pc, #24]	; (8006028 <_sbrk_r+0x20>)
 800600e:	0004      	movs	r4, r0
 8006010:	0008      	movs	r0, r1
 8006012:	602b      	str	r3, [r5, #0]
 8006014:	f7fb f9ba 	bl	800138c <_sbrk>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d103      	bne.n	8006024 <_sbrk_r+0x1c>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d000      	beq.n	8006024 <_sbrk_r+0x1c>
 8006022:	6023      	str	r3, [r4, #0]
 8006024:	bd70      	pop	{r4, r5, r6, pc}
 8006026:	46c0      	nop			; (mov r8, r8)
 8006028:	20000448 	.word	0x20000448

0800602c <__sread>:
 800602c:	b570      	push	{r4, r5, r6, lr}
 800602e:	000c      	movs	r4, r1
 8006030:	250e      	movs	r5, #14
 8006032:	5f49      	ldrsh	r1, [r1, r5]
 8006034:	f000 f90c 	bl	8006250 <_read_r>
 8006038:	2800      	cmp	r0, #0
 800603a:	db03      	blt.n	8006044 <__sread+0x18>
 800603c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800603e:	181b      	adds	r3, r3, r0
 8006040:	6563      	str	r3, [r4, #84]	; 0x54
 8006042:	bd70      	pop	{r4, r5, r6, pc}
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	4a02      	ldr	r2, [pc, #8]	; (8006050 <__sread+0x24>)
 8006048:	4013      	ands	r3, r2
 800604a:	81a3      	strh	r3, [r4, #12]
 800604c:	e7f9      	b.n	8006042 <__sread+0x16>
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	ffffefff 	.word	0xffffefff

08006054 <__swrite>:
 8006054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006056:	001f      	movs	r7, r3
 8006058:	898b      	ldrh	r3, [r1, #12]
 800605a:	0005      	movs	r5, r0
 800605c:	000c      	movs	r4, r1
 800605e:	0016      	movs	r6, r2
 8006060:	05db      	lsls	r3, r3, #23
 8006062:	d505      	bpl.n	8006070 <__swrite+0x1c>
 8006064:	230e      	movs	r3, #14
 8006066:	5ec9      	ldrsh	r1, [r1, r3]
 8006068:	2200      	movs	r2, #0
 800606a:	2302      	movs	r3, #2
 800606c:	f000 f874 	bl	8006158 <_lseek_r>
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	4a05      	ldr	r2, [pc, #20]	; (8006088 <__swrite+0x34>)
 8006074:	0028      	movs	r0, r5
 8006076:	4013      	ands	r3, r2
 8006078:	81a3      	strh	r3, [r4, #12]
 800607a:	0032      	movs	r2, r6
 800607c:	230e      	movs	r3, #14
 800607e:	5ee1      	ldrsh	r1, [r4, r3]
 8006080:	003b      	movs	r3, r7
 8006082:	f000 f81f 	bl	80060c4 <_write_r>
 8006086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006088:	ffffefff 	.word	0xffffefff

0800608c <__sseek>:
 800608c:	b570      	push	{r4, r5, r6, lr}
 800608e:	000c      	movs	r4, r1
 8006090:	250e      	movs	r5, #14
 8006092:	5f49      	ldrsh	r1, [r1, r5]
 8006094:	f000 f860 	bl	8006158 <_lseek_r>
 8006098:	89a3      	ldrh	r3, [r4, #12]
 800609a:	1c42      	adds	r2, r0, #1
 800609c:	d103      	bne.n	80060a6 <__sseek+0x1a>
 800609e:	4a05      	ldr	r2, [pc, #20]	; (80060b4 <__sseek+0x28>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	81a3      	strh	r3, [r4, #12]
 80060a4:	bd70      	pop	{r4, r5, r6, pc}
 80060a6:	2280      	movs	r2, #128	; 0x80
 80060a8:	0152      	lsls	r2, r2, #5
 80060aa:	4313      	orrs	r3, r2
 80060ac:	81a3      	strh	r3, [r4, #12]
 80060ae:	6560      	str	r0, [r4, #84]	; 0x54
 80060b0:	e7f8      	b.n	80060a4 <__sseek+0x18>
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	ffffefff 	.word	0xffffefff

080060b8 <__sclose>:
 80060b8:	b510      	push	{r4, lr}
 80060ba:	230e      	movs	r3, #14
 80060bc:	5ec9      	ldrsh	r1, [r1, r3]
 80060be:	f000 f815 	bl	80060ec <_close_r>
 80060c2:	bd10      	pop	{r4, pc}

080060c4 <_write_r>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	0004      	movs	r4, r0
 80060c8:	0008      	movs	r0, r1
 80060ca:	0011      	movs	r1, r2
 80060cc:	001a      	movs	r2, r3
 80060ce:	2300      	movs	r3, #0
 80060d0:	4d05      	ldr	r5, [pc, #20]	; (80060e8 <_write_r+0x24>)
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	f7fb f93e 	bl	8001354 <_write>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d103      	bne.n	80060e4 <_write_r+0x20>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d000      	beq.n	80060e4 <_write_r+0x20>
 80060e2:	6023      	str	r3, [r4, #0]
 80060e4:	bd70      	pop	{r4, r5, r6, pc}
 80060e6:	46c0      	nop			; (mov r8, r8)
 80060e8:	20000448 	.word	0x20000448

080060ec <_close_r>:
 80060ec:	2300      	movs	r3, #0
 80060ee:	b570      	push	{r4, r5, r6, lr}
 80060f0:	4d06      	ldr	r5, [pc, #24]	; (800610c <_close_r+0x20>)
 80060f2:	0004      	movs	r4, r0
 80060f4:	0008      	movs	r0, r1
 80060f6:	602b      	str	r3, [r5, #0]
 80060f8:	f7fb f93a 	bl	8001370 <_close>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d103      	bne.n	8006108 <_close_r+0x1c>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d000      	beq.n	8006108 <_close_r+0x1c>
 8006106:	6023      	str	r3, [r4, #0]
 8006108:	bd70      	pop	{r4, r5, r6, pc}
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	20000448 	.word	0x20000448

08006110 <_fstat_r>:
 8006110:	2300      	movs	r3, #0
 8006112:	b570      	push	{r4, r5, r6, lr}
 8006114:	4d06      	ldr	r5, [pc, #24]	; (8006130 <_fstat_r+0x20>)
 8006116:	0004      	movs	r4, r0
 8006118:	0008      	movs	r0, r1
 800611a:	0011      	movs	r1, r2
 800611c:	602b      	str	r3, [r5, #0]
 800611e:	f7fb f92b 	bl	8001378 <_fstat>
 8006122:	1c43      	adds	r3, r0, #1
 8006124:	d103      	bne.n	800612e <_fstat_r+0x1e>
 8006126:	682b      	ldr	r3, [r5, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d000      	beq.n	800612e <_fstat_r+0x1e>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	20000448 	.word	0x20000448

08006134 <_isatty_r>:
 8006134:	2300      	movs	r3, #0
 8006136:	b570      	push	{r4, r5, r6, lr}
 8006138:	4d06      	ldr	r5, [pc, #24]	; (8006154 <_isatty_r+0x20>)
 800613a:	0004      	movs	r4, r0
 800613c:	0008      	movs	r0, r1
 800613e:	602b      	str	r3, [r5, #0]
 8006140:	f7fb f920 	bl	8001384 <_isatty>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d103      	bne.n	8006150 <_isatty_r+0x1c>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d000      	beq.n	8006150 <_isatty_r+0x1c>
 800614e:	6023      	str	r3, [r4, #0]
 8006150:	bd70      	pop	{r4, r5, r6, pc}
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	20000448 	.word	0x20000448

08006158 <_lseek_r>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	0004      	movs	r4, r0
 800615c:	0008      	movs	r0, r1
 800615e:	0011      	movs	r1, r2
 8006160:	001a      	movs	r2, r3
 8006162:	2300      	movs	r3, #0
 8006164:	4d05      	ldr	r5, [pc, #20]	; (800617c <_lseek_r+0x24>)
 8006166:	602b      	str	r3, [r5, #0]
 8006168:	f7fb f90e 	bl	8001388 <_lseek>
 800616c:	1c43      	adds	r3, r0, #1
 800616e:	d103      	bne.n	8006178 <_lseek_r+0x20>
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d000      	beq.n	8006178 <_lseek_r+0x20>
 8006176:	6023      	str	r3, [r4, #0]
 8006178:	bd70      	pop	{r4, r5, r6, pc}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	20000448 	.word	0x20000448

08006180 <memchr>:
 8006180:	b2c9      	uxtb	r1, r1
 8006182:	1882      	adds	r2, r0, r2
 8006184:	4290      	cmp	r0, r2
 8006186:	d101      	bne.n	800618c <memchr+0xc>
 8006188:	2000      	movs	r0, #0
 800618a:	4770      	bx	lr
 800618c:	7803      	ldrb	r3, [r0, #0]
 800618e:	428b      	cmp	r3, r1
 8006190:	d0fb      	beq.n	800618a <memchr+0xa>
 8006192:	3001      	adds	r0, #1
 8006194:	e7f6      	b.n	8006184 <memchr+0x4>

08006196 <memcpy>:
 8006196:	2300      	movs	r3, #0
 8006198:	b510      	push	{r4, lr}
 800619a:	429a      	cmp	r2, r3
 800619c:	d100      	bne.n	80061a0 <memcpy+0xa>
 800619e:	bd10      	pop	{r4, pc}
 80061a0:	5ccc      	ldrb	r4, [r1, r3]
 80061a2:	54c4      	strb	r4, [r0, r3]
 80061a4:	3301      	adds	r3, #1
 80061a6:	e7f8      	b.n	800619a <memcpy+0x4>

080061a8 <memmove>:
 80061a8:	b510      	push	{r4, lr}
 80061aa:	4288      	cmp	r0, r1
 80061ac:	d902      	bls.n	80061b4 <memmove+0xc>
 80061ae:	188b      	adds	r3, r1, r2
 80061b0:	4298      	cmp	r0, r3
 80061b2:	d303      	bcc.n	80061bc <memmove+0x14>
 80061b4:	2300      	movs	r3, #0
 80061b6:	e007      	b.n	80061c8 <memmove+0x20>
 80061b8:	5c8b      	ldrb	r3, [r1, r2]
 80061ba:	5483      	strb	r3, [r0, r2]
 80061bc:	3a01      	subs	r2, #1
 80061be:	d2fb      	bcs.n	80061b8 <memmove+0x10>
 80061c0:	bd10      	pop	{r4, pc}
 80061c2:	5ccc      	ldrb	r4, [r1, r3]
 80061c4:	54c4      	strb	r4, [r0, r3]
 80061c6:	3301      	adds	r3, #1
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d1fa      	bne.n	80061c2 <memmove+0x1a>
 80061cc:	e7f8      	b.n	80061c0 <memmove+0x18>
	...

080061d0 <__malloc_lock>:
 80061d0:	b510      	push	{r4, lr}
 80061d2:	4802      	ldr	r0, [pc, #8]	; (80061dc <__malloc_lock+0xc>)
 80061d4:	f7ff fae3 	bl	800579e <__retarget_lock_acquire_recursive>
 80061d8:	bd10      	pop	{r4, pc}
 80061da:	46c0      	nop			; (mov r8, r8)
 80061dc:	2000043c 	.word	0x2000043c

080061e0 <__malloc_unlock>:
 80061e0:	b510      	push	{r4, lr}
 80061e2:	4802      	ldr	r0, [pc, #8]	; (80061ec <__malloc_unlock+0xc>)
 80061e4:	f7ff fadc 	bl	80057a0 <__retarget_lock_release_recursive>
 80061e8:	bd10      	pop	{r4, pc}
 80061ea:	46c0      	nop			; (mov r8, r8)
 80061ec:	2000043c 	.word	0x2000043c

080061f0 <_realloc_r>:
 80061f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061f2:	0007      	movs	r7, r0
 80061f4:	000e      	movs	r6, r1
 80061f6:	0014      	movs	r4, r2
 80061f8:	2900      	cmp	r1, #0
 80061fa:	d105      	bne.n	8006208 <_realloc_r+0x18>
 80061fc:	0011      	movs	r1, r2
 80061fe:	f7ff fba9 	bl	8005954 <_malloc_r>
 8006202:	0005      	movs	r5, r0
 8006204:	0028      	movs	r0, r5
 8006206:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006208:	2a00      	cmp	r2, #0
 800620a:	d103      	bne.n	8006214 <_realloc_r+0x24>
 800620c:	f7ff fb36 	bl	800587c <_free_r>
 8006210:	0025      	movs	r5, r4
 8006212:	e7f7      	b.n	8006204 <_realloc_r+0x14>
 8006214:	f000 f830 	bl	8006278 <_malloc_usable_size_r>
 8006218:	9001      	str	r0, [sp, #4]
 800621a:	4284      	cmp	r4, r0
 800621c:	d803      	bhi.n	8006226 <_realloc_r+0x36>
 800621e:	0035      	movs	r5, r6
 8006220:	0843      	lsrs	r3, r0, #1
 8006222:	42a3      	cmp	r3, r4
 8006224:	d3ee      	bcc.n	8006204 <_realloc_r+0x14>
 8006226:	0021      	movs	r1, r4
 8006228:	0038      	movs	r0, r7
 800622a:	f7ff fb93 	bl	8005954 <_malloc_r>
 800622e:	1e05      	subs	r5, r0, #0
 8006230:	d0e8      	beq.n	8006204 <_realloc_r+0x14>
 8006232:	9b01      	ldr	r3, [sp, #4]
 8006234:	0022      	movs	r2, r4
 8006236:	429c      	cmp	r4, r3
 8006238:	d900      	bls.n	800623c <_realloc_r+0x4c>
 800623a:	001a      	movs	r2, r3
 800623c:	0031      	movs	r1, r6
 800623e:	0028      	movs	r0, r5
 8006240:	f7ff ffa9 	bl	8006196 <memcpy>
 8006244:	0031      	movs	r1, r6
 8006246:	0038      	movs	r0, r7
 8006248:	f7ff fb18 	bl	800587c <_free_r>
 800624c:	e7da      	b.n	8006204 <_realloc_r+0x14>
	...

08006250 <_read_r>:
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	0004      	movs	r4, r0
 8006254:	0008      	movs	r0, r1
 8006256:	0011      	movs	r1, r2
 8006258:	001a      	movs	r2, r3
 800625a:	2300      	movs	r3, #0
 800625c:	4d05      	ldr	r5, [pc, #20]	; (8006274 <_read_r+0x24>)
 800625e:	602b      	str	r3, [r5, #0]
 8006260:	f7fb f86a 	bl	8001338 <_read>
 8006264:	1c43      	adds	r3, r0, #1
 8006266:	d103      	bne.n	8006270 <_read_r+0x20>
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d000      	beq.n	8006270 <_read_r+0x20>
 800626e:	6023      	str	r3, [r4, #0]
 8006270:	bd70      	pop	{r4, r5, r6, pc}
 8006272:	46c0      	nop			; (mov r8, r8)
 8006274:	20000448 	.word	0x20000448

08006278 <_malloc_usable_size_r>:
 8006278:	1f0b      	subs	r3, r1, #4
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	1f18      	subs	r0, r3, #4
 800627e:	2b00      	cmp	r3, #0
 8006280:	da01      	bge.n	8006286 <_malloc_usable_size_r+0xe>
 8006282:	580b      	ldr	r3, [r1, r0]
 8006284:	18c0      	adds	r0, r0, r3
 8006286:	4770      	bx	lr

08006288 <_init>:
 8006288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628a:	46c0      	nop			; (mov r8, r8)
 800628c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628e:	bc08      	pop	{r3}
 8006290:	469e      	mov	lr, r3
 8006292:	4770      	bx	lr

08006294 <_fini>:
 8006294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629a:	bc08      	pop	{r3}
 800629c:	469e      	mov	lr, r3
 800629e:	4770      	bx	lr
