
O32controller_FW_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f98  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08005058  08005058  00015058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005314  08005314  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08005314  08005314  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005314  08005314  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005314  08005314  00015314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005318  08005318  00015318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800531c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  2000006c  08005388  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08005388  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a32  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033b8  00000000  00000000  00039b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000ac00  00000000  00000000  0003cec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000db8  00000000  00000000  00047ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000111b  00000000  00000000  00048879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003bb9  00000000  00000000  00049994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b792  00000000  00000000  0004d54d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0006f52b  00000000  00000000  00068cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000317c  00000000  00000000  000d820c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005040 	.word	0x08005040

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08005040 	.word	0x08005040

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <foc_startup>:
static uint8_t temp_coil = 0; //ÂºC from NTC lookup table

static uint8_t overtemp = 0;


void foc_startup() {
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	46de      	mov	lr, fp
 8000224:	4657      	mov	r7, sl
 8000226:	4645      	mov	r5, r8
 8000228:	464e      	mov	r6, r9
 800022a:	b5e0      	push	{r5, r6, r7, lr}


    HAL_ADC_Stop(&hadc); // stop adc before calibration
 800022c:	4f50      	ldr	r7, [pc, #320]	; (8000370 <foc_startup+0x150>)
void foc_startup() {
 800022e:	b083      	sub	sp, #12
    HAL_ADC_Stop(&hadc); // stop adc before calibration
 8000230:	0038      	movs	r0, r7
 8000232:	f001 fa6f 	bl	8001714 <HAL_ADC_Stop>
    HAL_Delay(1);
 8000236:	2001      	movs	r0, #1
 8000238:	f001 f8e2 	bl	8001400 <HAL_Delay>
    HAL_ADCEx_Calibration_Start(&hadc); // seems like this uses VREFINT_CAL
 800023c:	0038      	movs	r0, r7
 800023e:	f001 fbb7 	bl	80019b0 <HAL_ADCEx_Calibration_Start>

    HAL_TIM_Base_Start(&htim1);  // Replace htim1 with your TIM_HandleTypeDef instance
 8000242:	4d4c      	ldr	r5, [pc, #304]	; (8000374 <foc_startup+0x154>)
    TIM1->EGR = TIM_EGR_UG;
 8000244:	4c4c      	ldr	r4, [pc, #304]	; (8000378 <foc_startup+0x158>)
    HAL_TIM_Base_Start(&htim1);  // Replace htim1 with your TIM_HandleTypeDef instance
 8000246:	0028      	movs	r0, r5
 8000248:	f002 feac 	bl	8002fa4 <HAL_TIM_Base_Start>
    TIM1->EGR = TIM_EGR_UG;
 800024c:	2301      	movs	r3, #1
    htim1.Instance->RCR = 1; // Set RCR
 800024e:	682a      	ldr	r2, [r5, #0]
    TIM1->EGR = TIM_EGR_UG;
 8000250:	6163      	str	r3, [r4, #20]
    TIM1->EGR = TIM_EGR_UG;


    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000252:	2100      	movs	r1, #0
    htim1.Instance->RCR = 1; // Set RCR
 8000254:	6313      	str	r3, [r2, #48]	; 0x30
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000256:	0028      	movs	r0, r5
    TIM1->EGR = TIM_EGR_UG;
 8000258:	6163      	str	r3, [r4, #20]
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800025a:	f002 ff5d 	bl	8003118 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); // turn on complementary channel
 800025e:	2100      	movs	r1, #0
 8000260:	0028      	movs	r0, r5
 8000262:	f003 fa7b 	bl	800375c <HAL_TIMEx_PWMN_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000266:	2104      	movs	r1, #4
 8000268:	0028      	movs	r0, r5
 800026a:	f002 ff55 	bl	8003118 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); // turn on complementary channel
 800026e:	2104      	movs	r1, #4
 8000270:	0028      	movs	r0, r5
 8000272:	f003 fa73 	bl	800375c <HAL_TIMEx_PWMN_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000276:	2108      	movs	r1, #8
 8000278:	0028      	movs	r0, r5
 800027a:	f002 ff4d 	bl	8003118 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // turn on complementary channel
 800027e:	0028      	movs	r0, r5

    
    HAL_TIM_Base_Start_IT(&htim2); // 100Hz timer for printing

    TIM1->CCR1 = 0;
 8000280:	2500      	movs	r5, #0
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // turn on complementary channel
 8000282:	2108      	movs	r1, #8
 8000284:	f003 fa6a 	bl	800375c <HAL_TIMEx_PWMN_Start>
    HAL_TIM_Base_Start_IT(&htim2); // 100Hz timer for printing
 8000288:	483c      	ldr	r0, [pc, #240]	; (800037c <foc_startup+0x15c>)
 800028a:	f002 feb5 	bl	8002ff8 <HAL_TIM_Base_Start_IT>
    TIM1->CCR1 = 0;
 800028e:	6365      	str	r5, [r4, #52]	; 0x34
    TIM1->CCR2 = 0;
    TIM1->CCR3 = 0;

    // green, wait 2 seconds, then red to give time for flashing
    LED_RED;
 8000290:	2201      	movs	r2, #1
    TIM1->CCR2 = 0;
 8000292:	63a5      	str	r5, [r4, #56]	; 0x38
    LED_RED;
 8000294:	2101      	movs	r1, #1
    TIM1->CCR3 = 0;
 8000296:	63e5      	str	r5, [r4, #60]	; 0x3c
    LED_RED;
 8000298:	4839      	ldr	r0, [pc, #228]	; (8000380 <foc_startup+0x160>)
 800029a:	f001 fe3d 	bl	8001f18 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 800029e:	20fa      	movs	r0, #250	; 0xfa
 80002a0:	00c0      	lsls	r0, r0, #3
 80002a2:	f001 f8ad 	bl	8001400 <HAL_Delay>
    LED_GREEN;
 80002a6:	2200      	movs	r2, #0
 80002a8:	2101      	movs	r1, #1
 80002aa:	4835      	ldr	r0, [pc, #212]	; (8000380 <foc_startup+0x160>)
 80002ac:	f001 fe34 	bl	8001f18 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80002b0:	2064      	movs	r0, #100	; 0x64
 80002b2:	f001 f8a5 	bl	8001400 <HAL_Delay>

    // get out of standby mode to allow gate drive
    ENABLE_DRIVE;
 80002b6:	2201      	movs	r2, #1
 80002b8:	2180      	movs	r1, #128	; 0x80
 80002ba:	4831      	ldr	r0, [pc, #196]	; (8000380 <foc_startup+0x160>)
 80002bc:	f001 fe2c 	bl	8001f18 <HAL_GPIO_WritePin>
 80002c0:	2201      	movs	r2, #1
 80002c2:	2140      	movs	r1, #64	; 0x40
 80002c4:	482e      	ldr	r0, [pc, #184]	; (8000380 <foc_startup+0x160>)
 80002c6:	f001 fe27 	bl	8001f18 <HAL_GPIO_WritePin>

    // move to step 0
    TIM1->CCR1 = MAX_DUTY/16;
 80002ca:	2363      	movs	r3, #99	; 0x63
    TIM1->CCR2 = 0;
    TIM1->CCR3 = 0;

    HAL_Delay(1000);
 80002cc:	20fa      	movs	r0, #250	; 0xfa
    TIM1->CCR1 = MAX_DUTY/16;
 80002ce:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_Delay(1000);
 80002d0:	0080      	lsls	r0, r0, #2
    TIM1->CCR2 = 0;
 80002d2:	63a5      	str	r5, [r4, #56]	; 0x38
    TIM1->CCR3 = 0;
 80002d4:	63e5      	str	r5, [r4, #60]	; 0x3c
    HAL_Delay(1000);
 80002d6:	f001 f893 	bl	8001400 <HAL_Delay>

    for (int i = 0; i < 10; i++) { // take some measurements to let the sensors settle
 80002da:	4b2a      	ldr	r3, [pc, #168]	; (8000384 <foc_startup+0x164>)
 80002dc:	4c2a      	ldr	r4, [pc, #168]	; (8000388 <foc_startup+0x168>)
 80002de:	469b      	mov	fp, r3
 80002e0:	4b2a      	ldr	r3, [pc, #168]	; (800038c <foc_startup+0x16c>)
    HAL_Delay(1000);
 80002e2:	350a      	adds	r5, #10
 80002e4:	4698      	mov	r8, r3
        HAL_GPIO_WritePin(MAG1_CS_GPIO_Port, MAG1_CS_Pin, 0);
        HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 80002e6:	1ea3      	subs	r3, r4, #2
 80002e8:	469a      	mov	sl, r3
 80002ea:	2301      	movs	r3, #1
 80002ec:	425b      	negs	r3, r3
 80002ee:	4699      	mov	r9, r3
        HAL_GPIO_WritePin(MAG1_CS_GPIO_Port, MAG1_CS_Pin, 0);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2102      	movs	r1, #2
 80002f4:	4822      	ldr	r0, [pc, #136]	; (8000380 <foc_startup+0x160>)
 80002f6:	f001 fe0f 	bl	8001f18 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 80002fa:	464b      	mov	r3, r9
 80002fc:	0022      	movs	r2, r4
 80002fe:	4651      	mov	r1, sl
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	4658      	mov	r0, fp
 8000304:	2302      	movs	r3, #2
 8000306:	f002 fb83 	bl	8002a10 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(MAG1_CS_GPIO_Port, MAG1_CS_Pin, 1);
 800030a:	2201      	movs	r2, #1
 800030c:	2102      	movs	r1, #2
 800030e:	481c      	ldr	r0, [pc, #112]	; (8000380 <foc_startup+0x160>)
 8000310:	f001 fe02 	bl	8001f18 <HAL_GPIO_WritePin>

        HAL_ADC_Start_DMA(&hadc, (uint32_t *)p.adc_vals, NBR_ADC); // start the adc in dma mode

        HAL_UART_Receive(&huart1, p.uart_RX, 1, 1);
 8000314:	0026      	movs	r6, r4
        HAL_ADC_Start_DMA(&hadc, (uint32_t *)p.adc_vals, NBR_ADC); // start the adc in dma mode
 8000316:	0021      	movs	r1, r4
 8000318:	2207      	movs	r2, #7
 800031a:	3910      	subs	r1, #16
 800031c:	0038      	movs	r0, r7
        HAL_UART_Receive(&huart1, p.uart_RX, 1, 1);
 800031e:	3e2e      	subs	r6, #46	; 0x2e
        HAL_ADC_Start_DMA(&hadc, (uint32_t *)p.adc_vals, NBR_ADC); // start the adc in dma mode
 8000320:	f001 fa18 	bl	8001754 <HAL_ADC_Start_DMA>
    for (int i = 0; i < 10; i++) { // take some measurements to let the sensors settle
 8000324:	3d01      	subs	r5, #1
        HAL_UART_Receive(&huart1, p.uart_RX, 1, 1);
 8000326:	2301      	movs	r3, #1
 8000328:	2201      	movs	r2, #1
 800032a:	0031      	movs	r1, r6
 800032c:	4640      	mov	r0, r8
 800032e:	f003 ff73 	bl	8004218 <HAL_UART_Receive>
    for (int i = 0; i < 10; i++) { // take some measurements to let the sensors settle
 8000332:	2d00      	cmp	r5, #0
 8000334:	d1dc      	bne.n	80002f0 <foc_startup+0xd0>
    // stop motor
    TIM1->CCR1 = 0;
    TIM1->CCR2 = 0;
    TIM1->CCR3 = 0;

    m_angle = (uint16_t)((p.spi_RX[0] << 8) + p.spi_RX[1] + 16384); // 0 to 32767
 8000336:	2080      	movs	r0, #128	; 0x80
 8000338:	01c0      	lsls	r0, r0, #7
 800033a:	4684      	mov	ip, r0
    TIM1->CCR1 = 0;
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <foc_startup+0x158>)
    m_angle_prev = m_angle;
 800033e:	4a14      	ldr	r2, [pc, #80]	; (8000390 <foc_startup+0x170>)
    TIM1->CCR1 = 0;
 8000340:	635d      	str	r5, [r3, #52]	; 0x34
    TIM1->CCR2 = 0;
 8000342:	639d      	str	r5, [r3, #56]	; 0x38
    TIM1->CCR3 = 0;
 8000344:	63dd      	str	r5, [r3, #60]	; 0x3c
    m_angle = (uint16_t)((p.spi_RX[0] << 8) + p.spi_RX[1] + 16384); // 0 to 32767
 8000346:	7823      	ldrb	r3, [r4, #0]
 8000348:	7861      	ldrb	r1, [r4, #1]
 800034a:	021b      	lsls	r3, r3, #8
 800034c:	4461      	add	r1, ip
 800034e:	185b      	adds	r3, r3, r1
    m_angle_prev = m_angle;
 8000350:	8013      	strh	r3, [r2, #0]

    if(E_OFFSET == 0){
    	e_offset = (m_angle * PPAIRS - e_offset) & (32768 - 1);         // convert to electrical angle, modulo 32768
    }else{
    	e_offset = E_OFFSET;
 8000352:	4b10      	ldr	r3, [pc, #64]	; (8000394 <foc_startup+0x174>)
 8000354:	4a10      	ldr	r2, [pc, #64]	; (8000398 <foc_startup+0x178>)
    }

    HAL_UARTEx_ReceiveToIdle_IT(&huart1, p.uart_RX, UART_RX_SIZE);
 8000356:	0031      	movs	r1, r6
    	e_offset = E_OFFSET;
 8000358:	801a      	strh	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, p.uart_RX, UART_RX_SIZE);
 800035a:	4640      	mov	r0, r8
 800035c:	2203      	movs	r2, #3
 800035e:	f004 f967 	bl	8004630 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	200000dc 	.word	0x200000dc
 8000374:	20000208 	.word	0x20000208
 8000378:	40012c00 	.word	0x40012c00
 800037c:	20000250 	.word	0x20000250
 8000380:	48001400 	.word	0x48001400
 8000384:	200001a4 	.word	0x200001a4
 8000388:	2000035c 	.word	0x2000035c
 800038c:	20000298 	.word	0x20000298
 8000390:	200000c0 	.word	0x200000c0
 8000394:	200000be 	.word	0x200000be
 8000398:	000057f7 	.word	0x000057f7

0800039c <foc_loop>:

void foc_loop() {
 800039c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800039e:	46de      	mov	lr, fp
 80003a0:	4657      	mov	r7, sl
 80003a2:	464e      	mov	r6, r9
 80003a4:	4645      	mov	r5, r8

    if(!p.adc_conversion_flag) return;
 80003a6:	233f      	movs	r3, #63	; 0x3f
void foc_loop() {
 80003a8:	b5e0      	push	{r5, r6, r7, lr}
    if(!p.adc_conversion_flag) return;
 80003aa:	4cd7      	ldr	r4, [pc, #860]	; (8000708 <foc_loop+0x36c>)
void foc_loop() {
 80003ac:	b087      	sub	sp, #28
    if(!p.adc_conversion_flag) return;
 80003ae:	5ce2      	ldrb	r2, [r4, r3]
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	d106      	bne.n	80003c2 <foc_loop+0x26>
    if(overtemp){
        LED_RED;
    }else{
    	LED_GREEN;
    }
}
 80003b4:	b007      	add	sp, #28
 80003b6:	bcf0      	pop	{r4, r5, r6, r7}
 80003b8:	46bb      	mov	fp, r7
 80003ba:	46b2      	mov	sl, r6
 80003bc:	46a9      	mov	r9, r5
 80003be:	46a0      	mov	r8, r4
 80003c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_GPIO_TogglePin(MAG2_CS_GPIO_Port, MAG2_CS_Pin);
 80003c2:	2180      	movs	r1, #128	; 0x80
 80003c4:	2090      	movs	r0, #144	; 0x90
    p.adc_conversion_flag = 0;
 80003c6:	2200      	movs	r2, #0
    HAL_GPIO_TogglePin(MAG2_CS_GPIO_Port, MAG2_CS_Pin);
 80003c8:	0209      	lsls	r1, r1, #8
 80003ca:	05c0      	lsls	r0, r0, #23
    p.adc_conversion_flag = 0;
 80003cc:	54e2      	strb	r2, [r4, r3]
    HAL_GPIO_TogglePin(MAG2_CS_GPIO_Port, MAG2_CS_Pin);
 80003ce:	f001 fda9 	bl	8001f24 <HAL_GPIO_TogglePin>
    count++;
 80003d2:	4ace      	ldr	r2, [pc, #824]	; (800070c <foc_loop+0x370>)
        HAL_GPIO_WritePin(MAG1_CS_GPIO_Port, MAG1_CS_Pin, 0);
 80003d4:	2102      	movs	r1, #2
    count++;
 80003d6:	6813      	ldr	r3, [r2, #0]
        HAL_GPIO_WritePin(MAG1_CS_GPIO_Port, MAG1_CS_Pin, 0);
 80003d8:	48cd      	ldr	r0, [pc, #820]	; (8000710 <foc_loop+0x374>)
    count++;
 80003da:	3301      	adds	r3, #1
 80003dc:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(MAG1_CS_GPIO_Port, MAG1_CS_Pin, 0);
 80003de:	2200      	movs	r2, #0
 80003e0:	f001 fd9a 	bl	8001f18 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, p.spi_TX, p.spi_RX, 2, HAL_MAX_DELAY);
 80003e4:	2301      	movs	r3, #1
 80003e6:	0022      	movs	r2, r4
 80003e8:	0021      	movs	r1, r4
 80003ea:	425b      	negs	r3, r3
 80003ec:	323c      	adds	r2, #60	; 0x3c
 80003ee:	313a      	adds	r1, #58	; 0x3a
 80003f0:	9300      	str	r3, [sp, #0]
 80003f2:	48c8      	ldr	r0, [pc, #800]	; (8000714 <foc_loop+0x378>)
 80003f4:	3303      	adds	r3, #3
 80003f6:	f002 fb0b 	bl	8002a10 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(MAG1_CS_GPIO_Port, MAG1_CS_Pin, 1);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2102      	movs	r1, #2
 80003fe:	48c4      	ldr	r0, [pc, #784]	; (8000710 <foc_loop+0x374>)
 8000400:	f001 fd8a 	bl	8001f18 <HAL_GPIO_WritePin>
        m_angle = ((uint16_t)(p.spi_RX[0]) << 8) + p.spi_RX[1] + 16384;
 8000404:	2180      	movs	r1, #128	; 0x80
 8000406:	233c      	movs	r3, #60	; 0x3c
 8000408:	223d      	movs	r2, #61	; 0x3d
 800040a:	01c9      	lsls	r1, r1, #7
 800040c:	468c      	mov	ip, r1
 800040e:	5ce3      	ldrb	r3, [r4, r3]
 8000410:	5ca2      	ldrb	r2, [r4, r2]
 8000412:	021b      	lsls	r3, r3, #8
 8000414:	4462      	add	r2, ip
 8000416:	189b      	adds	r3, r3, r2
        e_angle = (m_angle * PPAIRS - e_offset) & (32768 - 1); // convert to electrical angle and modulo
 8000418:	49bf      	ldr	r1, [pc, #764]	; (8000718 <foc_loop+0x37c>)
        m_angle = ((uint16_t)(p.spi_RX[0]) << 8) + p.spi_RX[1] + 16384;
 800041a:	b29b      	uxth	r3, r3
        e_angle = (m_angle * PPAIRS - e_offset) & (32768 - 1); // convert to electrical angle and modulo
 800041c:	8809      	ldrh	r1, [r1, #0]
 800041e:	00da      	lsls	r2, r3, #3
 8000420:	1ad2      	subs	r2, r2, r3
 8000422:	1a52      	subs	r2, r2, r1
        if (m_angle_prev < 8192 && m_angle > 24576) { // detect angle wraparound and increment a revolution
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	48bd      	ldr	r0, [pc, #756]	; (800071c <foc_loop+0x380>)
        e_angle = (m_angle * PPAIRS - e_offset) & (32768 - 1); // convert to electrical angle and modulo
 8000428:	0452      	lsls	r2, r2, #17
        if (m_angle_prev < 8192 && m_angle > 24576) { // detect angle wraparound and increment a revolution
 800042a:	8805      	ldrh	r5, [r0, #0]
        e_angle = (m_angle * PPAIRS - e_offset) & (32768 - 1); // convert to electrical angle and modulo
 800042c:	0c52      	lsrs	r2, r2, #17
        if (m_angle_prev < 8192 && m_angle > 24576) { // detect angle wraparound and increment a revolution
 800042e:	0189      	lsls	r1, r1, #6
 8000430:	428d      	cmp	r5, r1
 8000432:	d300      	bcc.n	8000436 <foc_loop+0x9a>
 8000434:	e0d8      	b.n	80005e8 <foc_loop+0x24c>
 8000436:	21c0      	movs	r1, #192	; 0xc0
 8000438:	01c9      	lsls	r1, r1, #7
 800043a:	428b      	cmp	r3, r1
 800043c:	d900      	bls.n	8000440 <foc_loop+0xa4>
 800043e:	e103      	b.n	8000648 <foc_loop+0x2ac>
            revs -= 32768;
 8000440:	49b7      	ldr	r1, [pc, #732]	; (8000720 <foc_loop+0x384>)
 8000442:	6809      	ldr	r1, [r1, #0]
			e_angle *= -1;
 8000444:	4db7      	ldr	r5, [pc, #732]	; (8000724 <foc_loop+0x388>)
 8000446:	4252      	negs	r2, r2
        m_angle_prev = m_angle;
 8000448:	8003      	strh	r3, [r0, #0]
			e_angle *= -1;
 800044a:	802a      	strh	r2, [r5, #0]
        cont_angle = m_angle + revs;
 800044c:	185b      	adds	r3, r3, r1
			cont_angle *= -1;
 800044e:	4ab6      	ldr	r2, [pc, #728]	; (8000728 <foc_loop+0x38c>)
        I_u = I_u_accum >> ADC_FILT_LVL;
 8000450:	49b6      	ldr	r1, [pc, #728]	; (800072c <foc_loop+0x390>)
			cont_angle *= -1;
 8000452:	425b      	negs	r3, r3
 8000454:	6013      	str	r3, [r2, #0]
 8000456:	4693      	mov	fp, r2
        I_u = I_u_accum >> ADC_FILT_LVL;
 8000458:	680a      	ldr	r2, [r1, #0]
        I_u_accum = I_u_accum - I_u + (p.adc_vals[4] - adc_U_offset);
 800045a:	4eb5      	ldr	r6, [pc, #724]	; (8000730 <foc_loop+0x394>)
        I_u = I_u_accum >> ADC_FILT_LVL;
 800045c:	1110      	asrs	r0, r2, #4
 800045e:	b203      	sxth	r3, r0
 8000460:	4699      	mov	r9, r3
        I_u_accum = I_u_accum - I_u + (p.adc_vals[4] - adc_U_offset);
 8000462:	4648      	mov	r0, r9
 8000464:	46b4      	mov	ip, r6
 8000466:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8000468:	1a12      	subs	r2, r2, r0
        I_v_accum = I_v_accum - I_v + (p.adc_vals[0] - adc_V_offset);
 800046a:	48b2      	ldr	r0, [pc, #712]	; (8000734 <foc_loop+0x398>)
        I_u_accum = I_u_accum - I_u + (p.adc_vals[4] - adc_U_offset);
 800046c:	4463      	add	r3, ip
        I_v_accum = I_v_accum - I_v + (p.adc_vals[0] - adc_V_offset);
 800046e:	4684      	mov	ip, r0
        I_v = I_v_accum >> ADC_FILT_LVL;
 8000470:	4fb1      	ldr	r7, [pc, #708]	; (8000738 <foc_loop+0x39c>)
        I_u_accum = I_u_accum - I_u + (p.adc_vals[4] - adc_U_offset);
 8000472:	189b      	adds	r3, r3, r2
        I_v = I_v_accum >> ADC_FILT_LVL;
 8000474:	683a      	ldr	r2, [r7, #0]
        I_u_accum = I_u_accum - I_u + (p.adc_vals[4] - adc_U_offset);
 8000476:	600b      	str	r3, [r1, #0]
        I_v = I_v_accum >> ADC_FILT_LVL;
 8000478:	4eb0      	ldr	r6, [pc, #704]	; (800073c <foc_loop+0x3a0>)
 800047a:	1111      	asrs	r1, r2, #4
 800047c:	b209      	sxth	r1, r1
 800047e:	8031      	strh	r1, [r6, #0]
        I_v_accum = I_v_accum - I_v + (p.adc_vals[0] - adc_V_offset);
 8000480:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	4463      	add	r3, ip
 8000486:	189b      	adds	r3, r3, r2
        I_w_accum = I_w_accum - I_w + (p.adc_vals[2] - adc_W_offset);
 8000488:	48ad      	ldr	r0, [pc, #692]	; (8000740 <foc_loop+0x3a4>)
        I_v_accum = I_v_accum - I_v + (p.adc_vals[0] - adc_V_offset);
 800048a:	603b      	str	r3, [r7, #0]
        I_w = I_w_accum >> ADC_FILT_LVL;
 800048c:	4bad      	ldr	r3, [pc, #692]	; (8000744 <foc_loop+0x3a8>)
        I_w_accum = I_w_accum - I_w + (p.adc_vals[2] - adc_W_offset);
 800048e:	4680      	mov	r8, r0
        I_w = I_w_accum >> ADC_FILT_LVL;
 8000490:	469c      	mov	ip, r3
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	4fac      	ldr	r7, [pc, #688]	; (8000748 <foc_loop+0x3ac>)
 8000496:	1111      	asrs	r1, r2, #4
 8000498:	b209      	sxth	r1, r1
 800049a:	8039      	strh	r1, [r7, #0]
        I_w_accum = I_w_accum - I_w + (p.adc_vals[2] - adc_W_offset);
 800049c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	4443      	add	r3, r8
 80004a2:	189b      	adds	r3, r3, r2
 80004a4:	4662      	mov	r2, ip
        I_phase = abs16(I_u);
 80004a6:	4648      	mov	r0, r9
        I_w_accum = I_w_accum - I_w + (p.adc_vals[2] - adc_W_offset);
 80004a8:	6013      	str	r3, [r2, #0]
        I_phase = abs16(I_u);
 80004aa:	f000 ff27 	bl	80012fc <abs16>
 80004ae:	4ba7      	ldr	r3, [pc, #668]	; (800074c <foc_loop+0x3b0>)
 80004b0:	4698      	mov	r8, r3
 80004b2:	8018      	strh	r0, [r3, #0]
        if(abs16(I_v) > I_phase) I_phase = abs16(I_v);
 80004b4:	2300      	movs	r3, #0
 80004b6:	5ef0      	ldrsh	r0, [r6, r3]
 80004b8:	f000 ff20 	bl	80012fc <abs16>
 80004bc:	4643      	mov	r3, r8
 80004be:	2200      	movs	r2, #0
 80004c0:	5e9b      	ldrsh	r3, [r3, r2]
 80004c2:	4283      	cmp	r3, r0
 80004c4:	da00      	bge.n	80004c8 <foc_loop+0x12c>
 80004c6:	e0c6      	b.n	8000656 <foc_loop+0x2ba>
        if(abs16(I_w) > I_phase) I_phase = abs16(I_w);
 80004c8:	2300      	movs	r3, #0
 80004ca:	5ef8      	ldrsh	r0, [r7, r3]
 80004cc:	f000 ff16 	bl	80012fc <abs16>
 80004d0:	4643      	mov	r3, r8
 80004d2:	2200      	movs	r2, #0
 80004d4:	5e9b      	ldrsh	r3, [r3, r2]
 80004d6:	4283      	cmp	r3, r0
 80004d8:	da00      	bge.n	80004dc <foc_loop+0x140>
 80004da:	e105      	b.n	80006e8 <foc_loop+0x34c>
        uint8_t angle_lut = e_angle >> 7; // scale e_angle [0,32767] to [0,255] for lookup table
 80004dc:	882b      	ldrh	r3, [r5, #0]
        int16_t Q16_sin_t = sin_lut[angle_lut];
 80004de:	4a9c      	ldr	r2, [pc, #624]	; (8000750 <foc_loop+0x3b4>)
        uint8_t angle_lut = e_angle >> 7; // scale e_angle [0,32767] to [0,255] for lookup table
 80004e0:	09db      	lsrs	r3, r3, #7
 80004e2:	b2db      	uxtb	r3, r3
        int16_t Q16_sin_t = sin_lut[angle_lut];
 80004e4:	0059      	lsls	r1, r3, #1
 80004e6:	5e8f      	ldrsh	r7, [r1, r2]
            Q16_cos_t = sin_lut[(64 - angle_lut) & (256 - 1)]; /// 64 out of 256 is the equilvalent of /// 90Âº/360Âº. &255 is mod256.
 80004e8:	2140      	movs	r1, #64	; 0x40
        if (angle_lut < 64) {
 80004ea:	2b3f      	cmp	r3, #63	; 0x3f
 80004ec:	d900      	bls.n	80004f0 <foc_loop+0x154>
            Q16_cos_t = sin_lut[(63 - angle_lut) & (256 - 1)];
 80004ee:	213f      	movs	r1, #63	; 0x3f
 80004f0:	1ac9      	subs	r1, r1, r3
 80004f2:	23ff      	movs	r3, #255	; 0xff
 80004f4:	400b      	ands	r3, r1
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	5e9d      	ldrsh	r5, [r3, r2]
        int16_t Q16_SQRT3_2_sin_t = (Q16_SQRT3_2 * Q16_sin_t) >> 16;
 80004fa:	4b96      	ldr	r3, [pc, #600]	; (8000754 <foc_loop+0x3b8>)
        int16_t Q16_1_2_sin_t = (Q16_1_2 * Q16_sin_t) >> 16;
 80004fc:	107a      	asrs	r2, r7, #1
        int16_t Q16_SQRT3_2_sin_t = (Q16_SQRT3_2 * Q16_sin_t) >> 16;
 80004fe:	001e      	movs	r6, r3
        int16_t Q16_SQRT3_2_cos_t = (Q16_SQRT3_2 * Q16_cos_t) >> 16;
 8000500:	436b      	muls	r3, r5
 8000502:	141b      	asrs	r3, r3, #16
 8000504:	9303      	str	r3, [sp, #12]
        V_d = 0;
 8000506:	2300      	movs	r3, #0
        int16_t Q16_1_2_sin_t = (Q16_1_2 * Q16_sin_t) >> 16;
 8000508:	9204      	str	r2, [sp, #16]
        V_d = 0;
 800050a:	4a93      	ldr	r2, [pc, #588]	; (8000758 <foc_loop+0x3bc>)
        int16_t Q16_1_2_cos_t = (Q16_1_2 * Q16_cos_t) >> 16;
 800050c:	1069      	asrs	r1, r5, #1
        V_d = 0;
 800050e:	4690      	mov	r8, r2
 8000510:	8013      	strh	r3, [r2, #0]
        V_q = I_q_des << 7;
 8000512:	4b92      	ldr	r3, [pc, #584]	; (800075c <foc_loop+0x3c0>)
        int16_t Q16_1_2_cos_t = (Q16_1_2 * Q16_cos_t) >> 16;
 8000514:	9105      	str	r1, [sp, #20]
        V_q = I_q_des << 7;
 8000516:	469a      	mov	sl, r3
 8000518:	2100      	movs	r1, #0
 800051a:	5e5b      	ldrsh	r3, [r3, r1]
 800051c:	4a90      	ldr	r2, [pc, #576]	; (8000760 <foc_loop+0x3c4>)
 800051e:	01db      	lsls	r3, r3, #7
 8000520:	4691      	mov	r9, r2
 8000522:	8013      	strh	r3, [r2, #0]
        V_d = clip(V_d, -32768, 32767);
 8000524:	498f      	ldr	r1, [pc, #572]	; (8000764 <foc_loop+0x3c8>)
 8000526:	4a90      	ldr	r2, [pc, #576]	; (8000768 <foc_loop+0x3cc>)
 8000528:	2000      	movs	r0, #0
 800052a:	f000 fecd 	bl	80012c8 <clip>
 800052e:	4643      	mov	r3, r8
 8000530:	8018      	strh	r0, [r3, #0]
        V_q = clip(V_q, -32768, 32767);
 8000532:	464b      	mov	r3, r9
 8000534:	498b      	ldr	r1, [pc, #556]	; (8000764 <foc_loop+0x3c8>)
 8000536:	2000      	movs	r0, #0
 8000538:	5e18      	ldrsh	r0, [r3, r0]
 800053a:	4a8b      	ldr	r2, [pc, #556]	; (8000768 <foc_loop+0x3cc>)
 800053c:	f000 fec4 	bl	80012c8 <clip>
 8000540:	464a      	mov	r2, r9
 8000542:	b203      	sxth	r3, r0
 8000544:	8013      	strh	r3, [r2, #0]
        V_u = (Q16_cos_t * V_d - Q16_sin_t * V_q) >> 15;
 8000546:	4642      	mov	r2, r8
 8000548:	2100      	movs	r1, #0
 800054a:	5e52      	ldrsh	r2, [r2, r1]
        int16_t Q16_SQRT3_2_sin_t = (Q16_SQRT3_2 * Q16_sin_t) >> 16;
 800054c:	437e      	muls	r6, r7
        V_u = (Q16_cos_t * V_d - Q16_sin_t * V_q) >> 15;
 800054e:	4355      	muls	r5, r2
 8000550:	435f      	muls	r7, r3
 8000552:	1be8      	subs	r0, r5, r7
 8000554:	13c1      	asrs	r1, r0, #15
        V_v = ((Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * V_d + (Q16_SQRT3_2_cos_t + Q16_1_2_sin_t) * V_q) >> 15;
 8000556:	9804      	ldr	r0, [sp, #16]
 8000558:	9f03      	ldr	r7, [sp, #12]
 800055a:	4684      	mov	ip, r0
        V_w = (-(Q16_SQRT3_2_sin_t + Q16_1_2_cos_t) * V_d - (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * V_q) >> 15;
 800055c:	9805      	ldr	r0, [sp, #20]
        V_v = ((Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * V_d + (Q16_SQRT3_2_cos_t + Q16_1_2_sin_t) * V_q) >> 15;
 800055e:	4467      	add	r7, ip
        V_w = (-(Q16_SQRT3_2_sin_t + Q16_1_2_cos_t) * V_d - (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * V_q) >> 15;
 8000560:	4684      	mov	ip, r0
        V_u = (Q16_cos_t * V_d - Q16_sin_t * V_q) >> 15;
 8000562:	4688      	mov	r8, r1
 8000564:	4d81      	ldr	r5, [pc, #516]	; (800076c <foc_loop+0x3d0>)
        int16_t Q16_SQRT3_2_sin_t = (Q16_SQRT3_2 * Q16_sin_t) >> 16;
 8000566:	1436      	asrs	r6, r6, #16
        V_u = (Q16_cos_t * V_d - Q16_sin_t * V_q) >> 15;
 8000568:	6029      	str	r1, [r5, #0]
        V_v = ((Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * V_d + (Q16_SQRT3_2_cos_t + Q16_1_2_sin_t) * V_q) >> 15;
 800056a:	9905      	ldr	r1, [sp, #20]
        V_w = (-(Q16_SQRT3_2_sin_t + Q16_1_2_cos_t) * V_d - (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * V_q) >> 15;
 800056c:	9804      	ldr	r0, [sp, #16]
        V_v = ((Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * V_d + (Q16_SQRT3_2_cos_t + Q16_1_2_sin_t) * V_q) >> 15;
 800056e:	1a71      	subs	r1, r6, r1
        V_w = (-(Q16_SQRT3_2_sin_t + Q16_1_2_cos_t) * V_d - (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * V_q) >> 15;
 8000570:	4466      	add	r6, ip
 8000572:	4276      	negs	r6, r6
        V_v = ((Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * V_d + (Q16_SQRT3_2_cos_t + Q16_1_2_sin_t) * V_q) >> 15;
 8000574:	4351      	muls	r1, r2
        V_w = (-(Q16_SQRT3_2_sin_t + Q16_1_2_cos_t) * V_d - (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * V_q) >> 15;
 8000576:	4372      	muls	r2, r6
 8000578:	9e03      	ldr	r6, [sp, #12]
        V_v = ((Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * V_d + (Q16_SQRT3_2_cos_t + Q16_1_2_sin_t) * V_q) >> 15;
 800057a:	435f      	muls	r7, r3
        V_w = (-(Q16_SQRT3_2_sin_t + Q16_1_2_cos_t) * V_d - (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * V_q) >> 15;
 800057c:	1a36      	subs	r6, r6, r0
 800057e:	4373      	muls	r3, r6
        V_v = ((Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * V_d + (Q16_SQRT3_2_cos_t + Q16_1_2_sin_t) * V_q) >> 15;
 8000580:	19c9      	adds	r1, r1, r7
        V_w = (-(Q16_SQRT3_2_sin_t + Q16_1_2_cos_t) * V_d - (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * V_q) >> 15;
 8000582:	4e7b      	ldr	r6, [pc, #492]	; (8000770 <foc_loop+0x3d4>)
        V_v = ((Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * V_d + (Q16_SQRT3_2_cos_t + Q16_1_2_sin_t) * V_q) >> 15;
 8000584:	4f7b      	ldr	r7, [pc, #492]	; (8000774 <foc_loop+0x3d8>)
        V_w = (-(Q16_SQRT3_2_sin_t + Q16_1_2_cos_t) * V_d - (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * V_q) >> 15;
 8000586:	1ad2      	subs	r2, r2, r3
        V_v = ((Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * V_d + (Q16_SQRT3_2_cos_t + Q16_1_2_sin_t) * V_q) >> 15;
 8000588:	13c9      	asrs	r1, r1, #15
        V_w = (-(Q16_SQRT3_2_sin_t + Q16_1_2_cos_t) * V_d - (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * V_q) >> 15;
 800058a:	13d2      	asrs	r2, r2, #15
        V_offset = (min3(V_u, V_v, V_w) + max3(V_u, V_v, V_w)) >> 1;
 800058c:	4640      	mov	r0, r8
        V_w = (-(Q16_SQRT3_2_sin_t + Q16_1_2_cos_t) * V_d - (Q16_SQRT3_2_cos_t - Q16_1_2_sin_t) * V_q) >> 15;
 800058e:	6032      	str	r2, [r6, #0]
        V_v = ((Q16_SQRT3_2_sin_t - Q16_1_2_cos_t) * V_d + (Q16_SQRT3_2_cos_t + Q16_1_2_sin_t) * V_q) >> 15;
 8000590:	6039      	str	r1, [r7, #0]
        V_offset = (min3(V_u, V_v, V_w) + max3(V_u, V_v, V_w)) >> 1;
 8000592:	f000 fea3 	bl	80012dc <min3>
 8000596:	6832      	ldr	r2, [r6, #0]
 8000598:	6839      	ldr	r1, [r7, #0]
 800059a:	4680      	mov	r8, r0
 800059c:	6828      	ldr	r0, [r5, #0]
 800059e:	f000 fea5 	bl	80012ec <max3>
        D_u = ((V_u - V_offset) >> log2_V_per_D) + D_mid;
 80005a2:	6829      	ldr	r1, [r5, #0]
        if(I_q_des == 0 || overtemp){
 80005a4:	4655      	mov	r5, sl
        D_w = ((V_w - V_offset) >> log2_V_per_D) + D_mid;
 80005a6:	6833      	ldr	r3, [r6, #0]
        if(I_q_des == 0 || overtemp){
 80005a8:	2600      	movs	r6, #0
 80005aa:	5fad      	ldrsh	r5, [r5, r6]
        D_v = ((V_v - V_offset) >> log2_V_per_D) + D_mid;
 80005ac:	683a      	ldr	r2, [r7, #0]
        if(I_q_des == 0 || overtemp){
 80005ae:	2d00      	cmp	r5, #0
 80005b0:	d130      	bne.n	8000614 <foc_loop+0x278>
 80005b2:	4d71      	ldr	r5, [pc, #452]	; (8000778 <foc_loop+0x3dc>)
            TIM1->CCR1 = 0;
 80005b4:	2200      	movs	r2, #0
 80005b6:	4b71      	ldr	r3, [pc, #452]	; (800077c <foc_loop+0x3e0>)
 80005b8:	635a      	str	r2, [r3, #52]	; 0x34
            TIM1->CCR2 = 0;
 80005ba:	639a      	str	r2, [r3, #56]	; 0x38
            TIM1->CCR3 = 0;
 80005bc:	63da      	str	r2, [r3, #60]	; 0x3c
        temp_pcb = temp_pcb_accum >> TEMP_FILT_LVL;
 80005be:	4970      	ldr	r1, [pc, #448]	; (8000780 <foc_loop+0x3e4>)
 80005c0:	680b      	ldr	r3, [r1, #0]
 80005c2:	121a      	asrs	r2, r3, #8
        temp_pcb_accum = temp_pcb_accum - temp_pcb + p.adc_vals[5];
 80005c4:	b212      	sxth	r2, r2
 80005c6:	1a9b      	subs	r3, r3, r2
 80005c8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80005ca:	189b      	adds	r3, r3, r2
 80005cc:	600b      	str	r3, [r1, #0]
    if (p.uart_received_flag) {
 80005ce:	2341      	movs	r3, #65	; 0x41
 80005d0:	5ce2      	ldrb	r2, [r4, r3]
 80005d2:	2a00      	cmp	r2, #0
 80005d4:	d146      	bne.n	8000664 <foc_loop+0x2c8>
    if(overtemp){
 80005d6:	782b      	ldrb	r3, [r5, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d015      	beq.n	8000608 <foc_loop+0x26c>
        LED_RED;
 80005dc:	2201      	movs	r2, #1
 80005de:	2101      	movs	r1, #1
 80005e0:	484b      	ldr	r0, [pc, #300]	; (8000710 <foc_loop+0x374>)
 80005e2:	f001 fc99 	bl	8001f18 <HAL_GPIO_WritePin>
 80005e6:	e6e5      	b.n	80003b4 <foc_loop+0x18>
        } else if (m_angle < 8192 && m_angle_prev > 24576) {
 80005e8:	428b      	cmp	r3, r1
 80005ea:	d300      	bcc.n	80005ee <foc_loop+0x252>
 80005ec:	e728      	b.n	8000440 <foc_loop+0xa4>
 80005ee:	21c0      	movs	r1, #192	; 0xc0
 80005f0:	01c9      	lsls	r1, r1, #7
 80005f2:	428d      	cmp	r5, r1
 80005f4:	d800      	bhi.n	80005f8 <foc_loop+0x25c>
 80005f6:	e723      	b.n	8000440 <foc_loop+0xa4>
            revs += 32768;
 80005f8:	2680      	movs	r6, #128	; 0x80
 80005fa:	0236      	lsls	r6, r6, #8
 80005fc:	46b4      	mov	ip, r6
 80005fe:	4d48      	ldr	r5, [pc, #288]	; (8000720 <foc_loop+0x384>)
 8000600:	6829      	ldr	r1, [r5, #0]
 8000602:	4461      	add	r1, ip
 8000604:	6029      	str	r1, [r5, #0]
 8000606:	e71d      	b.n	8000444 <foc_loop+0xa8>
    	LED_GREEN;
 8000608:	2200      	movs	r2, #0
 800060a:	2101      	movs	r1, #1
 800060c:	4840      	ldr	r0, [pc, #256]	; (8000710 <foc_loop+0x374>)
 800060e:	f001 fc83 	bl	8001f18 <HAL_GPIO_WritePin>
 8000612:	e6cf      	b.n	80003b4 <foc_loop+0x18>
        if(I_q_des == 0 || overtemp){
 8000614:	4d58      	ldr	r5, [pc, #352]	; (8000778 <foc_loop+0x3dc>)
 8000616:	782e      	ldrb	r6, [r5, #0]
 8000618:	2e00      	cmp	r6, #0
 800061a:	d1cb      	bne.n	80005b4 <foc_loop+0x218>
        V_offset = (min3(V_u, V_v, V_w) + max3(V_u, V_v, V_w)) >> 1;
 800061c:	4440      	add	r0, r8
 800061e:	1040      	asrs	r0, r0, #1
        D_u = ((V_u - V_offset) >> log2_V_per_D) + D_mid;
 8000620:	1a0e      	subs	r6, r1, r0
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	0089      	lsls	r1, r1, #2
 8000626:	468c      	mov	ip, r1
        D_v = ((V_v - V_offset) >> log2_V_per_D) + D_mid;
 8000628:	1a12      	subs	r2, r2, r0
        D_w = ((V_w - V_offset) >> log2_V_per_D) + D_mid;
 800062a:	1a1b      	subs	r3, r3, r0
        D_u = ((V_u - V_offset) >> log2_V_per_D) + D_mid;
 800062c:	11b6      	asrs	r6, r6, #6
        D_v = ((V_v - V_offset) >> log2_V_per_D) + D_mid;
 800062e:	1192      	asrs	r2, r2, #6
        D_w = ((V_w - V_offset) >> log2_V_per_D) + D_mid;
 8000630:	119b      	asrs	r3, r3, #6
            TIM1->CCR1 = D_u;
 8000632:	4952      	ldr	r1, [pc, #328]	; (800077c <foc_loop+0x3e0>)
        D_u = ((V_u - V_offset) >> log2_V_per_D) + D_mid;
 8000634:	4466      	add	r6, ip
        D_v = ((V_v - V_offset) >> log2_V_per_D) + D_mid;
 8000636:	4462      	add	r2, ip
        D_w = ((V_w - V_offset) >> log2_V_per_D) + D_mid;
 8000638:	4463      	add	r3, ip
            TIM1->CCR1 = D_u;
 800063a:	b236      	sxth	r6, r6
            TIM1->CCR2 = D_v;
 800063c:	b212      	sxth	r2, r2
            TIM1->CCR3 = D_w;
 800063e:	b21b      	sxth	r3, r3
            TIM1->CCR1 = D_u;
 8000640:	634e      	str	r6, [r1, #52]	; 0x34
            TIM1->CCR2 = D_v;
 8000642:	638a      	str	r2, [r1, #56]	; 0x38
            TIM1->CCR3 = D_w;
 8000644:	63cb      	str	r3, [r1, #60]	; 0x3c
 8000646:	e7ba      	b.n	80005be <foc_loop+0x222>
            revs -= 32768;
 8000648:	4e46      	ldr	r6, [pc, #280]	; (8000764 <foc_loop+0x3c8>)
 800064a:	4d35      	ldr	r5, [pc, #212]	; (8000720 <foc_loop+0x384>)
 800064c:	46b4      	mov	ip, r6
 800064e:	6829      	ldr	r1, [r5, #0]
 8000650:	4461      	add	r1, ip
 8000652:	6029      	str	r1, [r5, #0]
 8000654:	e6f6      	b.n	8000444 <foc_loop+0xa8>
        if(abs16(I_v) > I_phase) I_phase = abs16(I_v);
 8000656:	2300      	movs	r3, #0
 8000658:	5ef0      	ldrsh	r0, [r6, r3]
 800065a:	f000 fe4f 	bl	80012fc <abs16>
 800065e:	4643      	mov	r3, r8
 8000660:	8018      	strh	r0, [r3, #0]
 8000662:	e731      	b.n	80004c8 <foc_loop+0x12c>
        p.uart_received_flag = 0;
 8000664:	2200      	movs	r2, #0
 8000666:	54e2      	strb	r2, [r4, r3]
        p.uart_cmd[0] = p.uart_RX[0] & CMD_MASK;
 8000668:	7ba3      	ldrb	r3, [r4, #14]
 800066a:	320f      	adds	r2, #15
 800066c:	4393      	bics	r3, r2
 800066e:	8323      	strh	r3, [r4, #24]
        p.uart_cmd[1] = (p.uart_RX[1] << 7) | (p.uart_RX[2]);
 8000670:	7be3      	ldrb	r3, [r4, #15]
 8000672:	7c20      	ldrb	r0, [r4, #16]
 8000674:	01db      	lsls	r3, r3, #7
 8000676:	4318      	orrs	r0, r3
 8000678:	8360      	strh	r0, [r4, #26]
        p.uart_cmd[1] = pad14(p.uart_cmd[1]);
 800067a:	f000 fe45 	bl	8001308 <pad14>
        if (p.uart_cmd[0] == CMD_SET_VOLTAGE) {
 800067e:	2218      	movs	r2, #24
 8000680:	5ea3      	ldrsh	r3, [r4, r2]
        p.uart_cmd[1] = pad14(p.uart_cmd[1]);
 8000682:	8360      	strh	r0, [r4, #26]
        if (p.uart_cmd[0] == CMD_SET_VOLTAGE) {
 8000684:	2b80      	cmp	r3, #128	; 0x80
 8000686:	d036      	beq.n	80006f6 <foc_loop+0x35a>
        } else if (p.uart_cmd[0] == CMD_SET_POSITION) {
 8000688:	2ba0      	cmp	r3, #160	; 0xa0
 800068a:	d038      	beq.n	80006fe <foc_loop+0x362>
        p.uart_TX[0] = (uint8_t)(cont_angle >> 21) & 0b01111111;
 800068c:	465b      	mov	r3, fp
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	237f      	movs	r3, #127	; 0x7f
        RS485_SET_TX;
 8000692:	2090      	movs	r0, #144	; 0x90
        p.uart_TX[0] = (uint8_t)(cont_angle >> 21) & 0b01111111;
 8000694:	1551      	asrs	r1, r2, #21
 8000696:	4019      	ands	r1, r3
 8000698:	7121      	strb	r1, [r4, #4]
        p.uart_TX[1] = (uint8_t)(cont_angle >> 14) & 0b01111111;
 800069a:	1391      	asrs	r1, r2, #14
 800069c:	4019      	ands	r1, r3
 800069e:	7161      	strb	r1, [r4, #5]
        p.uart_TX[2] = (uint8_t)(cont_angle >> 07) & 0b01111111;
 80006a0:	11d1      	asrs	r1, r2, #7
        p.uart_TX[3] = (uint8_t)(cont_angle >> 00) & 0b01111111;
 80006a2:	401a      	ands	r2, r3
 80006a4:	71e2      	strb	r2, [r4, #7]
        p.uart_TX[4] = (uint8_t)(rpm >> (1+7)) & 0b01111111;
 80006a6:	4a37      	ldr	r2, [pc, #220]	; (8000784 <foc_loop+0x3e8>)
        p.uart_TX[2] = (uint8_t)(cont_angle >> 07) & 0b01111111;
 80006a8:	4019      	ands	r1, r3
        p.uart_TX[4] = (uint8_t)(rpm >> (1+7)) & 0b01111111;
 80006aa:	6812      	ldr	r2, [r2, #0]
        p.uart_TX[2] = (uint8_t)(cont_angle >> 07) & 0b01111111;
 80006ac:	71a1      	strb	r1, [r4, #6]
        p.uart_TX[4] = (uint8_t)(rpm >> (1+7)) & 0b01111111;
 80006ae:	1211      	asrs	r1, r2, #8
        p.uart_TX[5] = (uint8_t)(rpm >> (1+0)) & 0b01111111;
 80006b0:	1052      	asrs	r2, r2, #1
 80006b2:	401a      	ands	r2, r3
 80006b4:	7262      	strb	r2, [r4, #9]
        p.uart_TX[6] = (uint8_t)(temp_coil >> 0) & 0b01111111;
 80006b6:	4a34      	ldr	r2, [pc, #208]	; (8000788 <foc_loop+0x3ec>)
        p.uart_TX[4] = (uint8_t)(rpm >> (1+7)) & 0b01111111;
 80006b8:	4019      	ands	r1, r3
        p.uart_TX[6] = (uint8_t)(temp_coil >> 0) & 0b01111111;
 80006ba:	7812      	ldrb	r2, [r2, #0]
        p.uart_TX[4] = (uint8_t)(rpm >> (1+7)) & 0b01111111;
 80006bc:	7221      	strb	r1, [r4, #8]
        p.uart_TX[6] = (uint8_t)(temp_coil >> 0) & 0b01111111;
 80006be:	401a      	ands	r2, r3
 80006c0:	72a2      	strb	r2, [r4, #10]
        p.uart_TX[7] = (uint8_t)(vbus >> 7) & 0b01111111;
 80006c2:	4a32      	ldr	r2, [pc, #200]	; (800078c <foc_loop+0x3f0>)
        RS485_SET_TX;
 80006c4:	05c0      	lsls	r0, r0, #23
        p.uart_TX[7] = (uint8_t)(vbus >> 7) & 0b01111111;
 80006c6:	2100      	movs	r1, #0
 80006c8:	5e51      	ldrsh	r1, [r2, r1]
 80006ca:	11ca      	asrs	r2, r1, #7
 80006cc:	401a      	ands	r2, r3
        p.uart_TX[8] = (uint8_t)(vbus >> 0) & 0b01111111;
 80006ce:	400b      	ands	r3, r1
        p.uart_TX[7] = (uint8_t)(vbus >> 7) & 0b01111111;
 80006d0:	72e2      	strb	r2, [r4, #11]
        RS485_SET_TX;
 80006d2:	2102      	movs	r1, #2
 80006d4:	2201      	movs	r2, #1
        p.uart_TX[8] = (uint8_t)(vbus >> 0) & 0b01111111;
 80006d6:	7323      	strb	r3, [r4, #12]
        RS485_SET_TX;
 80006d8:	f001 fc1e 	bl	8001f18 <HAL_GPIO_WritePin>
        HAL_UART_Transmit_DMA(&huart1, p.uart_TX, 9);
 80006dc:	2209      	movs	r2, #9
 80006de:	1d21      	adds	r1, r4, #4
 80006e0:	482b      	ldr	r0, [pc, #172]	; (8000790 <foc_loop+0x3f4>)
 80006e2:	f003 f8d3 	bl	800388c <HAL_UART_Transmit_DMA>
 80006e6:	e776      	b.n	80005d6 <foc_loop+0x23a>
        if(abs16(I_w) > I_phase) I_phase = abs16(I_w);
 80006e8:	2300      	movs	r3, #0
 80006ea:	5ef8      	ldrsh	r0, [r7, r3]
 80006ec:	f000 fe06 	bl	80012fc <abs16>
 80006f0:	4643      	mov	r3, r8
 80006f2:	8018      	strh	r0, [r3, #0]
 80006f4:	e6f2      	b.n	80004dc <foc_loop+0x140>
            I_q_des = p.uart_cmd[1] >> 1; 
 80006f6:	4653      	mov	r3, sl
 80006f8:	1040      	asrs	r0, r0, #1
 80006fa:	8018      	strh	r0, [r3, #0]
 80006fc:	e7c6      	b.n	800068c <foc_loop+0x2f0>
            cont_angle_des = p.uart_cmd[1] << 13;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <foc_loop+0x3f8>)
 8000700:	0340      	lsls	r0, r0, #13
 8000702:	6018      	str	r0, [r3, #0]
 8000704:	e7c2      	b.n	800068c <foc_loop+0x2f0>
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	20000320 	.word	0x20000320
 800070c:	200000b8 	.word	0x200000b8
 8000710:	48001400 	.word	0x48001400
 8000714:	200001a4 	.word	0x200001a4
 8000718:	200000be 	.word	0x200000be
 800071c:	200000c0 	.word	0x200000c0
 8000720:	200000c4 	.word	0x200000c4
 8000724:	200000bc 	.word	0x200000bc
 8000728:	200000b0 	.word	0x200000b0
 800072c:	2000008c 	.word	0x2000008c
 8000730:	fffff7fd 	.word	0xfffff7fd
 8000734:	fffff80a 	.word	0xfffff80a
 8000738:	20000094 	.word	0x20000094
 800073c:	20000090 	.word	0x20000090
 8000740:	fffff804 	.word	0xfffff804
 8000744:	2000009c 	.word	0x2000009c
 8000748:	20000098 	.word	0x20000098
 800074c:	20000088 	.word	0x20000088
 8000750:	080050c8 	.word	0x080050c8
 8000754:	0000ddb4 	.word	0x0000ddb4
 8000758:	200000a0 	.word	0x200000a0
 800075c:	2000008a 	.word	0x2000008a
 8000760:	200000a2 	.word	0x200000a2
 8000764:	ffff8000 	.word	0xffff8000
 8000768:	00007fff 	.word	0x00007fff
 800076c:	200000a4 	.word	0x200000a4
 8000770:	200000ac 	.word	0x200000ac
 8000774:	200000a8 	.word	0x200000a8
 8000778:	200000c2 	.word	0x200000c2
 800077c:	40012c00 	.word	0x40012c00
 8000780:	200000d0 	.word	0x200000d0
 8000784:	200000c8 	.word	0x200000c8
 8000788:	200000cc 	.word	0x200000cc
 800078c:	200000d4 	.word	0x200000d4
 8000790:	20000298 	.word	0x20000298
 8000794:	20000000 	.word	0x20000000

08000798 <foc_slowloop>:

void foc_slowloop(){
 8000798:	b530      	push	{r4, r5, lr}
    temp_coil = ntc_lut[(p.adc_vals[1]-121)>>5]; //read NTC and use lookup table
 800079a:	4916      	ldr	r1, [pc, #88]	; (80007f4 <foc_slowloop+0x5c>)
 800079c:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <foc_slowloop+0x60>)
 800079e:	8dcb      	ldrh	r3, [r1, #46]	; 0x2e
 80007a0:	3b79      	subs	r3, #121	; 0x79
 80007a2:	115b      	asrs	r3, r3, #5
 80007a4:	5cd3      	ldrb	r3, [r2, r3]
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <foc_slowloop+0x64>)
 80007a8:	7013      	strb	r3, [r2, #0]
    if(temp_coil > OVERTEMP_H){
 80007aa:	2b55      	cmp	r3, #85	; 0x55
 80007ac:	d918      	bls.n	80007e0 <foc_slowloop+0x48>
    	overtemp = 1;
 80007ae:	2201      	movs	r2, #1
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <foc_slowloop+0x68>)
 80007b2:	701a      	strb	r2, [r3, #0]
    }else if(overtemp && temp_coil < OVERTEMP_L){
    	overtemp = 0;
    }

	rpm = ((cont_angle - cont_angle_prev) * 1000 * 60) >> 15; // should be accurate within reasonable RPM range if 32-bit
 80007b4:	4813      	ldr	r0, [pc, #76]	; (8000804 <foc_slowloop+0x6c>)
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <foc_slowloop+0x70>)
 80007b8:	6802      	ldr	r2, [r0, #0]
 80007ba:	681c      	ldr	r4, [r3, #0]
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <foc_slowloop+0x74>)
 80007be:	1aa2      	subs	r2, r4, r2
 80007c0:	4353      	muls	r3, r2
	cont_angle_prev = cont_angle;
 80007c2:	6004      	str	r4, [r0, #0]
	rpm = ((cont_angle - cont_angle_prev) * 1000 * 60) >> 15; // should be accurate within reasonable RPM range if 32-bit
 80007c4:	4d12      	ldr	r5, [pc, #72]	; (8000810 <foc_slowloop+0x78>)

	vbus = vbus_accum >> VBUS_FILT_LVL;
 80007c6:	4813      	ldr	r0, [pc, #76]	; (8000814 <foc_slowloop+0x7c>)
	rpm = ((cont_angle - cont_angle_prev) * 1000 * 60) >> 15; // should be accurate within reasonable RPM range if 32-bit
 80007c8:	13db      	asrs	r3, r3, #15
 80007ca:	602b      	str	r3, [r5, #0]
	vbus = vbus_accum >> VBUS_FILT_LVL;
 80007cc:	6803      	ldr	r3, [r0, #0]
 80007ce:	4c12      	ldr	r4, [pc, #72]	; (8000818 <foc_slowloop+0x80>)
 80007d0:	121a      	asrs	r2, r3, #8
 80007d2:	b212      	sxth	r2, r2
 80007d4:	8022      	strh	r2, [r4, #0]
	vbus_accum = vbus_accum - vbus + p.adc_vals[3];
 80007d6:	1a9b      	subs	r3, r3, r2
 80007d8:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
 80007da:	189b      	adds	r3, r3, r2
 80007dc:	6003      	str	r3, [r0, #0]

}
 80007de:	bd30      	pop	{r4, r5, pc}
    }else if(overtemp && temp_coil < OVERTEMP_L){
 80007e0:	4a07      	ldr	r2, [pc, #28]	; (8000800 <foc_slowloop+0x68>)
 80007e2:	7810      	ldrb	r0, [r2, #0]
 80007e4:	2800      	cmp	r0, #0
 80007e6:	d0e5      	beq.n	80007b4 <foc_slowloop+0x1c>
 80007e8:	2b45      	cmp	r3, #69	; 0x45
 80007ea:	d8e3      	bhi.n	80007b4 <foc_slowloop+0x1c>
    	overtemp = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	7013      	strb	r3, [r2, #0]
 80007f0:	e7e0      	b.n	80007b4 <foc_slowloop+0x1c>
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	20000320 	.word	0x20000320
 80007f8:	08005058 	.word	0x08005058
 80007fc:	200000cc 	.word	0x200000cc
 8000800:	200000c2 	.word	0x200000c2
 8000804:	200000b4 	.word	0x200000b4
 8000808:	200000b0 	.word	0x200000b0
 800080c:	0000ea60 	.word	0x0000ea60
 8000810:	200000c8 	.word	0x200000c8
 8000814:	200000d8 	.word	0x200000d8
 8000818:	200000d4 	.word	0x200000d4

0800081c <__io_putchar>:
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

// overrides printf
int __io_putchar(int ch) {
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800081c:	2301      	movs	r3, #1
int __io_putchar(int ch) {
 800081e:	b500      	push	{lr}
 8000820:	b083      	sub	sp, #12
 8000822:	9001      	str	r0, [sp, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000824:	2201      	movs	r2, #1
 8000826:	425b      	negs	r3, r3
 8000828:	a901      	add	r1, sp, #4
 800082a:	4803      	ldr	r0, [pc, #12]	; (8000838 <__io_putchar+0x1c>)
 800082c:	f003 fc82 	bl	8004134 <HAL_UART_Transmit>
    return ch;
 8000830:	9801      	ldr	r0, [sp, #4]
}
 8000832:	b003      	add	sp, #12
 8000834:	bd00      	pop	{pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	20000298 	.word	0x20000298

0800083c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback whenever a timer rolls over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
    if (htim == &htim2) {
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800083e:	4283      	cmp	r3, r0
 8000840:	d000      	beq.n	8000844 <HAL_TIM_PeriodElapsedCallback+0x8>
        p.clock_1khz_flag = 1;
    }
}
 8000842:	4770      	bx	lr
        p.clock_1khz_flag = 1;
 8000844:	223e      	movs	r2, #62	; 0x3e
 8000846:	2101      	movs	r1, #1
 8000848:	4b02      	ldr	r3, [pc, #8]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800084a:	5499      	strb	r1, [r3, r2]
}
 800084c:	e7f9      	b.n	8000842 <HAL_TIM_PeriodElapsedCallback+0x6>
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	20000250 	.word	0x20000250
 8000854:	20000320 	.word	0x20000320

08000858 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
    p.uart_received_flag = 1; //commutation loop will read and clear
 8000858:	2341      	movs	r3, #65	; 0x41
 800085a:	2201      	movs	r2, #1
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800085c:	b510      	push	{r4, lr}
    p.uart_received_flag = 1; //commutation loop will read and clear
 800085e:	4c0a      	ldr	r4, [pc, #40]	; (8000888 <HAL_UARTEx_RxEventCallback+0x30>)
 8000860:	54e2      	strb	r2, [r4, r3]

    if(p.uart_watchdog >= UART_WATCHDOG_MS){ //if watchdog has disabled motor, enable it again
 8000862:	3b01      	subs	r3, #1
 8000864:	5ce3      	ldrb	r3, [r4, r3]
 8000866:	2b63      	cmp	r3, #99	; 0x63
 8000868:	d803      	bhi.n	8000872 <HAL_UARTEx_RxEventCallback+0x1a>
        ENABLE_DRIVE;
    }
    p.uart_watchdog = 0; //resets watchdog
 800086a:	2340      	movs	r3, #64	; 0x40
 800086c:	2200      	movs	r2, #0
 800086e:	54e2      	strb	r2, [r4, r3]
}
 8000870:	bd10      	pop	{r4, pc}
        ENABLE_DRIVE;
 8000872:	2180      	movs	r1, #128	; 0x80
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <HAL_UARTEx_RxEventCallback+0x34>)
 8000876:	f001 fb4f 	bl	8001f18 <HAL_GPIO_WritePin>
 800087a:	2201      	movs	r2, #1
 800087c:	2140      	movs	r1, #64	; 0x40
 800087e:	4803      	ldr	r0, [pc, #12]	; (800088c <HAL_UARTEx_RxEventCallback+0x34>)
 8000880:	f001 fb4a 	bl	8001f18 <HAL_GPIO_WritePin>
 8000884:	e7f1      	b.n	800086a <HAL_UARTEx_RxEventCallback+0x12>
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	20000320 	.word	0x20000320
 800088c:	48001400 	.word	0x48001400

08000890 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
    RS485_SET_RX;
 8000890:	2090      	movs	r0, #144	; 0x90
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000892:	b510      	push	{r4, lr}
    RS485_SET_RX;
 8000894:	2200      	movs	r2, #0
 8000896:	2102      	movs	r1, #2
 8000898:	05c0      	lsls	r0, r0, #23
 800089a:	f001 fb3d 	bl	8001f18 <HAL_GPIO_WritePin>
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, p.uart_RX, UART_RX_SIZE);
 800089e:	4903      	ldr	r1, [pc, #12]	; (80008ac <HAL_UART_TxCpltCallback+0x1c>)
 80008a0:	2203      	movs	r2, #3
 80008a2:	4803      	ldr	r0, [pc, #12]	; (80008b0 <HAL_UART_TxCpltCallback+0x20>)
 80008a4:	310e      	adds	r1, #14
 80008a6:	f003 fec3 	bl	8004630 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80008aa:	bd10      	pop	{r4, pc}
 80008ac:	20000320 	.word	0x20000320
 80008b0:	20000298 	.word	0x20000298

080008b4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) { // shouldn't happen but just in case of overrun, restart RX
 80008b4:	b530      	push	{r4, r5, lr}
    // clear the uart buffer
    uint8_t temp_buffer[UARTSIZE];
    while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)) {
 80008b6:	4c12      	ldr	r4, [pc, #72]	; (8000900 <HAL_UART_ErrorCallback+0x4c>)
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) { // shouldn't happen but just in case of overrun, restart RX
 80008b8:	b085      	sub	sp, #20
    while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)) {
 80008ba:	6823      	ldr	r3, [r4, #0]
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	069b      	lsls	r3, r3, #26
 80008c0:	d50a      	bpl.n	80008d8 <HAL_UART_ErrorCallback+0x24>
 80008c2:	2520      	movs	r5, #32
        HAL_UART_Receive(&huart1, temp_buffer, 1, 1);
 80008c4:	2301      	movs	r3, #1
 80008c6:	2201      	movs	r2, #1
 80008c8:	0020      	movs	r0, r4
 80008ca:	a901      	add	r1, sp, #4
 80008cc:	f003 fca4 	bl	8004218 <HAL_UART_Receive>
    while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)) {
 80008d0:	6823      	ldr	r3, [r4, #0]
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	421d      	tst	r5, r3
 80008d6:	d1f5      	bne.n	80008c4 <HAL_UART_ErrorCallback+0x10>
    }

    RS485_SET_RX;
 80008d8:	2090      	movs	r0, #144	; 0x90
 80008da:	2200      	movs	r2, #0
 80008dc:	2102      	movs	r1, #2
 80008de:	05c0      	lsls	r0, r0, #23
 80008e0:	f001 fb1a 	bl	8001f18 <HAL_GPIO_WritePin>
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, p.uart_RX, UART_RX_SIZE);
 80008e4:	4907      	ldr	r1, [pc, #28]	; (8000904 <HAL_UART_ErrorCallback+0x50>)
 80008e6:	2203      	movs	r2, #3
 80008e8:	0020      	movs	r0, r4
 80008ea:	310e      	adds	r1, #14
 80008ec:	f003 fea0 	bl	8004630 <HAL_UARTEx_ReceiveToIdle_IT>

    LED_RED;
 80008f0:	2201      	movs	r2, #1
 80008f2:	2101      	movs	r1, #1
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <HAL_UART_ErrorCallback+0x54>)
 80008f6:	f001 fb0f 	bl	8001f18 <HAL_GPIO_WritePin>
}
 80008fa:	b005      	add	sp, #20
 80008fc:	bd30      	pop	{r4, r5, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	20000298 	.word	0x20000298
 8000904:	20000320 	.word	0x20000320
 8000908:	48001400 	.word	0x48001400

0800090c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
    if (hadc->Instance == ADC1) {
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <HAL_ADC_ConvCpltCallback+0x14>)
 800090e:	6802      	ldr	r2, [r0, #0]
 8000910:	429a      	cmp	r2, r3
 8000912:	d000      	beq.n	8000916 <HAL_ADC_ConvCpltCallback+0xa>
        //        LED_GREEN;
//        HAL_GPIO_TogglePin(MAG2_CS_GPIO_Port, MAG2_CS_Pin);
        p.adc_conversion_flag = 1; // allow main loop to continiue
    }
}
 8000914:	4770      	bx	lr
        p.adc_conversion_flag = 1; // allow main loop to continiue
 8000916:	223f      	movs	r2, #63	; 0x3f
 8000918:	2101      	movs	r1, #1
 800091a:	4b02      	ldr	r3, [pc, #8]	; (8000924 <HAL_ADC_ConvCpltCallback+0x18>)
 800091c:	5499      	strb	r1, [r3, r2]
}
 800091e:	e7f9      	b.n	8000914 <HAL_ADC_ConvCpltCallback+0x8>
 8000920:	40012400 	.word	0x40012400
 8000924:	20000320 	.word	0x20000320

08000928 <Error_Handler>:
 * @retval None
 */
void Error_Handler(void) {
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    LED_RED;
 8000928:	2201      	movs	r2, #1
 800092a:	2101      	movs	r1, #1
void Error_Handler(void) {
 800092c:	b510      	push	{r4, lr}
    LED_RED;
 800092e:	4808      	ldr	r0, [pc, #32]	; (8000950 <Error_Handler+0x28>)
 8000930:	f001 faf2 	bl	8001f18 <HAL_GPIO_WritePin>
    printf("ERROR HANDLER \n");
 8000934:	4807      	ldr	r0, [pc, #28]	; (8000954 <Error_Handler+0x2c>)
 8000936:	f003 ffb5 	bl	80048a4 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093a:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800093c:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <Error_Handler+0x30>)
 8000942:	4a06      	ldr	r2, [pc, #24]	; (800095c <Error_Handler+0x34>)
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800094a:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 800094c:	e7fd      	b.n	800094a <Error_Handler+0x22>
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	48001400 	.word	0x48001400
 8000954:	080052c8 	.word	0x080052c8
 8000958:	e000ed00 	.word	0xe000ed00
 800095c:	05fa0004 	.word	0x05fa0004

08000960 <SystemClock_Config>:
void SystemClock_Config(void) {
 8000960:	b530      	push	{r4, r5, lr}
 8000962:	b095      	sub	sp, #84	; 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000964:	222c      	movs	r2, #44	; 0x2c
 8000966:	2100      	movs	r1, #0
 8000968:	a809      	add	r0, sp, #36	; 0x24
 800096a:	f003 ffa5 	bl	80048b8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096e:	2210      	movs	r2, #16
 8000970:	2100      	movs	r1, #0
 8000972:	4668      	mov	r0, sp
 8000974:	f003 ffa0 	bl	80048b8 <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000978:	2210      	movs	r2, #16
 800097a:	2100      	movs	r1, #0
 800097c:	a804      	add	r0, sp, #16
 800097e:	f003 ff9b 	bl	80048b8 <memset>
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI14;
 8000982:	2312      	movs	r3, #18
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	2510      	movs	r5, #16
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI14;
 8000986:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000988:	23e0      	movs	r3, #224	; 0xe0
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098a:	2401      	movs	r4, #1
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098c:	950c      	str	r5, [sp, #48]	; 0x30
    RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800098e:	950e      	str	r5, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000990:	039b      	lsls	r3, r3, #14
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	3d0e      	subs	r5, #14
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000994:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000996:	940b      	str	r4, [sp, #44]	; 0x2c
    RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000998:	940d      	str	r4, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	9510      	str	r5, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800099c:	9312      	str	r3, [sp, #72]	; 0x48
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800099e:	f001 fac9 	bl	8001f34 <HAL_RCC_OscConfig>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d113      	bne.n	80009ce <SystemClock_Config+0x6e>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80009a6:	2307      	movs	r3, #7
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	9002      	str	r0, [sp, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009aa:	9003      	str	r0, [sp, #12]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80009ac:	2101      	movs	r1, #1
 80009ae:	4668      	mov	r0, sp
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80009b0:	9300      	str	r3, [sp, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	9501      	str	r5, [sp, #4]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80009b4:	f001 fd42 	bl	800243c <HAL_RCC_ClockConfig>
 80009b8:	2800      	cmp	r0, #0
 80009ba:	d108      	bne.n	80009ce <SystemClock_Config+0x6e>
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009bc:	9006      	str	r0, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80009be:	a804      	add	r0, sp, #16
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009c0:	9404      	str	r4, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80009c2:	f001 fdd7 	bl	8002574 <HAL_RCCEx_PeriphCLKConfig>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	d101      	bne.n	80009ce <SystemClock_Config+0x6e>
}
 80009ca:	b015      	add	sp, #84	; 0x54
 80009cc:	bd30      	pop	{r4, r5, pc}
        Error_Handler();
 80009ce:	f7ff ffab 	bl	8000928 <Error_Handler>
 80009d2:	46c0      	nop			; (mov r8, r8)

080009d4 <main>:
int main(void) {
 80009d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d6:	46c6      	mov	lr, r8
 80009d8:	b500      	push	{lr}
 80009da:	b0a8      	sub	sp, #160	; 0xa0
    HAL_Init();
 80009dc:	f000 fcee 	bl	80013bc <HAL_Init>
    SystemClock_Config();
 80009e0:	f7ff ffbe 	bl	8000960 <SystemClock_Config>
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	2214      	movs	r2, #20
 80009e6:	2100      	movs	r1, #0
 80009e8:	a820      	add	r0, sp, #128	; 0x80
 80009ea:	f003 ff65 	bl	80048b8 <memset>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	4cef      	ldr	r4, [pc, #956]	; (8000db0 <main+0x3dc>)
 80009f2:	03d2      	lsls	r2, r2, #15
 80009f4:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin | MAG1_CS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 80009f6:	21c3      	movs	r1, #195	; 0xc3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80009f8:	4313      	orrs	r3, r2
 80009fa:	6163      	str	r3, [r4, #20]
 80009fc:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin | MAG1_CS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 80009fe:	48ed      	ldr	r0, [pc, #948]	; (8000db4 <main+0x3e0>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a00:	4013      	ands	r3, r2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a04:	9302      	str	r3, [sp, #8]
 8000a06:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	6963      	ldr	r3, [r4, #20]
 8000a0a:	0292      	lsls	r2, r2, #10
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	6163      	str	r3, [r4, #20]
 8000a10:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4013      	ands	r3, r2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	9303      	str	r3, [sp, #12]
 8000a1a:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1c:	6963      	ldr	r3, [r4, #20]
 8000a1e:	02d2      	lsls	r2, r2, #11
 8000a20:	4313      	orrs	r3, r2
 8000a22:	6163      	str	r3, [r4, #20]
 8000a24:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = USART_DE_Pin;
 8000a26:	2602      	movs	r6, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a28:	4013      	ands	r3, r2
 8000a2a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin | MAG1_CS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_WritePin(GPIOF, LED_STATUS_Pin | MAG1_CS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin, GPIO_PIN_RESET);
 8000a30:	f001 fa72 	bl	8001f18 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, USART_DE_Pin | MAG2_CS_Pin, GPIO_PIN_RESET);
 8000a34:	2090      	movs	r0, #144	; 0x90
 8000a36:	2200      	movs	r2, #0
 8000a38:	49df      	ldr	r1, [pc, #892]	; (8000db8 <main+0x3e4>)
 8000a3a:	05c0      	lsls	r0, r0, #23
 8000a3c:	f001 fa6c 	bl	8001f18 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_STATUS_Pin | MAG1_CS_Pin | OC_TH_STBY2_Pin | OC_TH_STBY1_Pin;
 8000a40:	23c3      	movs	r3, #195	; 0xc3
 8000a42:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	3bc2      	subs	r3, #194	; 0xc2
 8000a46:	4698      	mov	r8, r3
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a48:	48da      	ldr	r0, [pc, #872]	; (8000db4 <main+0x3e0>)
 8000a4a:	a920      	add	r1, sp, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a52:	f001 f963 	bl	8001d1c <HAL_GPIO_Init>
    HAL_GPIO_Init(USART_DE_GPIO_Port, &GPIO_InitStruct);
 8000a56:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	4643      	mov	r3, r8
    HAL_GPIO_Init(USART_DE_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	a920      	add	r1, sp, #128	; 0x80
 8000a5c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Pin = USART_DE_Pin;
 8000a60:	9620      	str	r6, [sp, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a62:	9622      	str	r6, [sp, #136]	; 0x88
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(USART_DE_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f001 f959 	bl	8001d1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OC_SEL_Pin;
 8000a6a:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = OC_SEL_Pin;
 8000a6e:	011b      	lsls	r3, r3, #4
    HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8000a70:	a920      	add	r1, sp, #128	; 0x80
 8000a72:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = OC_SEL_Pin;
 8000a74:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	9521      	str	r5, [sp, #132]	; 0x84
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	9522      	str	r5, [sp, #136]	; 0x88
    HAL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f001 f94f 	bl	8001d1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAG2_CS_Pin;
 8000a7e:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(MAG2_CS_GPIO_Port, &GPIO_InitStruct);
 8000a80:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = MAG2_CS_Pin;
 8000a82:	021b      	lsls	r3, r3, #8
 8000a84:	9320      	str	r3, [sp, #128]	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	4643      	mov	r3, r8
    HAL_GPIO_Init(MAG2_CS_GPIO_Port, &GPIO_InitStruct);
 8000a88:	a920      	add	r1, sp, #128	; 0x80
 8000a8a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	9321      	str	r3, [sp, #132]	; 0x84
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	9522      	str	r5, [sp, #136]	; 0x88
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	9523      	str	r5, [sp, #140]	; 0x8c
    HAL_GPIO_Init(MAG2_CS_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f001 f943 	bl	8001d1c <HAL_GPIO_Init>
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000a96:	4642      	mov	r2, r8
 8000a98:	6963      	ldr	r3, [r4, #20]
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a9a:	2100      	movs	r1, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	6163      	str	r3, [r4, #20]
 8000aa0:	6963      	ldr	r3, [r4, #20]
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000aa2:	2009      	movs	r0, #9
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000aa8:	2200      	movs	r2, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000aaa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000aac:	f000 ffda 	bl	8001a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ab0:	2009      	movs	r0, #9
 8000ab2:	f001 f809 	bl	8001ac8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	200b      	movs	r0, #11
 8000abc:	f000 ffd2 	bl	8001a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000ac0:	200b      	movs	r0, #11
 8000ac2:	f001 f801 	bl	8001ac8 <HAL_NVIC_EnableIRQ>
    HAL_Delay(10);
 8000ac6:	200a      	movs	r0, #10
 8000ac8:	f000 fc9a 	bl	8001400 <HAL_Delay>
    ADC_ChannelConfTypeDef sConfig = {0};
 8000acc:	220c      	movs	r2, #12
 8000ace:	2100      	movs	r1, #0
 8000ad0:	a809      	add	r0, sp, #36	; 0x24
 8000ad2:	f003 fef1 	bl	80048b8 <memset>
    hadc.Instance = ADC1;
 8000ad6:	4cb9      	ldr	r4, [pc, #740]	; (8000dbc <main+0x3e8>)
 8000ad8:	4bb9      	ldr	r3, [pc, #740]	; (8000dc0 <main+0x3ec>)
    hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ada:	2708      	movs	r7, #8
    hadc.Instance = ADC1;
 8000adc:	6023      	str	r3, [r4, #0]
    hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000ade:	4643      	mov	r3, r8
 8000ae0:	6123      	str	r3, [r4, #16]
    hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ae2:	23c2      	movs	r3, #194	; 0xc2
 8000ae4:	33ff      	adds	r3, #255	; 0xff
 8000ae6:	61e3      	str	r3, [r4, #28]
    hadc.Init.DMAContinuousRequests = DISABLE;
 8000ae8:	3b9e      	subs	r3, #158	; 0x9e
 8000aea:	3bff      	subs	r3, #255	; 0xff
 8000aec:	54e5      	strb	r5, [r4, r3]
    hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aee:	4643      	mov	r3, r8
    if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000af0:	0020      	movs	r0, r4
    hadc.Init.LowPowerAutoWait = DISABLE;
 8000af2:	61a5      	str	r5, [r4, #24]
    hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000af4:	6065      	str	r5, [r4, #4]
    hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000af6:	60a5      	str	r5, [r4, #8]
    hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000af8:	60e5      	str	r5, [r4, #12]
    hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000afa:	6167      	str	r7, [r4, #20]
    hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000afc:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000afe:	f000 fd61 	bl	80015c4 <HAL_ADC_Init>
 8000b02:	2800      	cmp	r0, #0
 8000b04:	d000      	beq.n	8000b08 <main+0x134>
 8000b06:	e197      	b.n	8000e38 <main+0x464>
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	015b      	lsls	r3, r3, #5
 8000b0c:	930a      	str	r3, [sp, #40]	; 0x28
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b0e:	2380      	movs	r3, #128	; 0x80
    sConfig.Channel = ADC_CHANNEL_0;
 8000b10:	9009      	str	r0, [sp, #36]	; 0x24
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b12:	055b      	lsls	r3, r3, #21
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b14:	0020      	movs	r0, r4
 8000b16:	a909      	add	r1, sp, #36	; 0x24
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b18:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b1a:	f000 feb5 	bl	8001888 <HAL_ADC_ConfigChannel>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d000      	beq.n	8000b24 <main+0x150>
 8000b22:	e189      	b.n	8000e38 <main+0x464>
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b24:	0020      	movs	r0, r4
 8000b26:	a909      	add	r1, sp, #36	; 0x24
    sConfig.Channel = ADC_CHANNEL_2;
 8000b28:	9609      	str	r6, [sp, #36]	; 0x24
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b2a:	f000 fead 	bl	8001888 <HAL_ADC_ConfigChannel>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	d000      	beq.n	8000b34 <main+0x160>
 8000b32:	e181      	b.n	8000e38 <main+0x464>
    sConfig.Channel = ADC_CHANNEL_3;
 8000b34:	2303      	movs	r3, #3
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b36:	0020      	movs	r0, r4
 8000b38:	a909      	add	r1, sp, #36	; 0x24
    sConfig.Channel = ADC_CHANNEL_3;
 8000b3a:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b3c:	f000 fea4 	bl	8001888 <HAL_ADC_ConfigChannel>
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d000      	beq.n	8000b46 <main+0x172>
 8000b44:	e178      	b.n	8000e38 <main+0x464>
    sConfig.Channel = ADC_CHANNEL_4;
 8000b46:	2304      	movs	r3, #4
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b48:	0020      	movs	r0, r4
 8000b4a:	a909      	add	r1, sp, #36	; 0x24
    sConfig.Channel = ADC_CHANNEL_4;
 8000b4c:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b4e:	f000 fe9b 	bl	8001888 <HAL_ADC_ConfigChannel>
 8000b52:	2800      	cmp	r0, #0
 8000b54:	d000      	beq.n	8000b58 <main+0x184>
 8000b56:	e16f      	b.n	8000e38 <main+0x464>
    sConfig.Channel = ADC_CHANNEL_9;
 8000b58:	2309      	movs	r3, #9
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b5a:	0020      	movs	r0, r4
 8000b5c:	a909      	add	r1, sp, #36	; 0x24
    sConfig.Channel = ADC_CHANNEL_9;
 8000b5e:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b60:	f000 fe92 	bl	8001888 <HAL_ADC_ConfigChannel>
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d000      	beq.n	8000b6a <main+0x196>
 8000b68:	e166      	b.n	8000e38 <main+0x464>
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b6a:	2310      	movs	r3, #16
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b6c:	0020      	movs	r0, r4
 8000b6e:	a909      	add	r1, sp, #36	; 0x24
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b70:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b72:	f000 fe89 	bl	8001888 <HAL_ADC_ConfigChannel>
 8000b76:	2800      	cmp	r0, #0
 8000b78:	d000      	beq.n	8000b7c <main+0x1a8>
 8000b7a:	e15d      	b.n	8000e38 <main+0x464>
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000b7c:	2311      	movs	r3, #17
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b7e:	0020      	movs	r0, r4
 8000b80:	a909      	add	r1, sp, #36	; 0x24
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000b82:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b84:	f000 fe80 	bl	8001888 <HAL_ADC_ConfigChannel>
 8000b88:	1e02      	subs	r2, r0, #0
 8000b8a:	d000      	beq.n	8000b8e <main+0x1ba>
 8000b8c:	e154      	b.n	8000e38 <main+0x464>
    hspi1.Instance = SPI1;
 8000b8e:	4b8d      	ldr	r3, [pc, #564]	; (8000dc4 <main+0x3f0>)
 8000b90:	498d      	ldr	r1, [pc, #564]	; (8000dc8 <main+0x3f4>)
 8000b92:	0018      	movs	r0, r3
 8000b94:	6019      	str	r1, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b96:	2382      	movs	r3, #130	; 0x82
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	6043      	str	r3, [r0, #4]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b9c:	23e0      	movs	r3, #224	; 0xe0
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	60c3      	str	r3, [r0, #12]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	6183      	str	r3, [r0, #24]
    hspi1.Init.CRCPolynomial = 7;
 8000ba8:	3bfa      	subs	r3, #250	; 0xfa
 8000baa:	3bff      	subs	r3, #255	; 0xff
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bac:	6082      	str	r2, [r0, #8]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bae:	6106      	str	r6, [r0, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb0:	6142      	str	r2, [r0, #20]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bb2:	61c7      	str	r7, [r0, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb4:	6202      	str	r2, [r0, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bb6:	6242      	str	r2, [r0, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb8:	6282      	str	r2, [r0, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 8000bba:	62c3      	str	r3, [r0, #44]	; 0x2c
    hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bbc:	6302      	str	r2, [r0, #48]	; 0x30
    hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bbe:	6347      	str	r7, [r0, #52]	; 0x34
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000bc0:	f001 fe80 	bl	80028c4 <HAL_SPI_Init>
 8000bc4:	1e05      	subs	r5, r0, #0
 8000bc6:	d000      	beq.n	8000bca <main+0x1f6>
 8000bc8:	e136      	b.n	8000e38 <main+0x464>
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bca:	2210      	movs	r2, #16
 8000bcc:	2100      	movs	r1, #0
 8000bce:	a810      	add	r0, sp, #64	; 0x40
 8000bd0:	f003 fe72 	bl	80048b8 <memset>
    TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bd4:	2214      	movs	r2, #20
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	a814      	add	r0, sp, #80	; 0x50
 8000bda:	f003 fe6d 	bl	80048b8 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bde:	2208      	movs	r2, #8
 8000be0:	2100      	movs	r1, #0
 8000be2:	a807      	add	r0, sp, #28
 8000be4:	f003 fe68 	bl	80048b8 <memset>
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000be8:	221c      	movs	r2, #28
 8000bea:	2100      	movs	r1, #0
 8000bec:	a819      	add	r0, sp, #100	; 0x64
 8000bee:	f003 fe63 	bl	80048b8 <memset>
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	a820      	add	r0, sp, #128	; 0x80
 8000bf8:	f003 fe5e 	bl	80048b8 <memset>
    htim1.Instance = TIM1;
 8000bfc:	4c73      	ldr	r4, [pc, #460]	; (8000dcc <main+0x3f8>)
 8000bfe:	4b74      	ldr	r3, [pc, #464]	; (8000dd0 <main+0x3fc>)
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000c00:	0020      	movs	r0, r4
    htim1.Instance = TIM1;
 8000c02:	6023      	str	r3, [r4, #0]
    htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c04:	2320      	movs	r3, #32
 8000c06:	60a3      	str	r3, [r4, #8]
    htim1.Init.Period = MAX_DUTY;
 8000c08:	4b72      	ldr	r3, [pc, #456]	; (8000dd4 <main+0x400>)
    htim1.Init.Prescaler = 0;
 8000c0a:	6065      	str	r5, [r4, #4]
    htim1.Init.Period = MAX_DUTY;
 8000c0c:	60e3      	str	r3, [r4, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0e:	6125      	str	r5, [r4, #16]
    htim1.Init.RepetitionCounter = 0; // start with 0, then set RCR1 to create update event every other time on low edge
 8000c10:	6165      	str	r5, [r4, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c12:	61a5      	str	r5, [r4, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000c14:	f002 fc5e 	bl	80034d4 <HAL_TIM_Base_Init>
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d000      	beq.n	8000c1e <main+0x24a>
 8000c1c:	e10c      	b.n	8000e38 <main+0x464>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1e:	2380      	movs	r3, #128	; 0x80
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000c20:	0020      	movs	r0, r4
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c22:	015b      	lsls	r3, r3, #5
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000c24:	a910      	add	r1, sp, #64	; 0x40
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c26:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000c28:	f002 fa7a 	bl	8003120 <HAL_TIM_ConfigClockSource>
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	d000      	beq.n	8000c32 <main+0x25e>
 8000c30:	e102      	b.n	8000e38 <main+0x464>
    if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000c32:	0020      	movs	r0, r4
 8000c34:	f002 fc7a 	bl	800352c <HAL_TIM_PWM_Init>
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	d000      	beq.n	8000c3e <main+0x26a>
 8000c3c:	e0fc      	b.n	8000e38 <main+0x464>
    sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000c3e:	2305      	movs	r3, #5
 8000c40:	9314      	str	r3, [sp, #80]	; 0x50
    sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000c42:	336b      	adds	r3, #107	; 0x6b
 8000c44:	9315      	str	r3, [sp, #84]	; 0x54
    sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 8000c46:	2380      	movs	r3, #128	; 0x80
    sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000c48:	9017      	str	r0, [sp, #92]	; 0x5c
    sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 8000c4a:	021b      	lsls	r3, r3, #8
    sSlaveConfig.TriggerFilter = 0;
 8000c4c:	9018      	str	r0, [sp, #96]	; 0x60
    if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8000c4e:	a914      	add	r1, sp, #80	; 0x50
 8000c50:	0020      	movs	r0, r4
    sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 8000c52:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8000c54:	f002 fb1c 	bl	8003290 <HAL_TIM_SlaveConfigSynchro>
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	d000      	beq.n	8000c5e <main+0x28a>
 8000c5c:	e0ec      	b.n	8000e38 <main+0x464>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	9007      	str	r0, [sp, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c60:	9008      	str	r0, [sp, #32]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000c62:	a907      	add	r1, sp, #28
 8000c64:	0020      	movs	r0, r4
 8000c66:	f002 fd7d 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	d000      	beq.n	8000c70 <main+0x29c>
 8000c6e:	e0e3      	b.n	8000e38 <main+0x464>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c70:	2360      	movs	r3, #96	; 0x60
    sConfigOC.Pulse = 0;
 8000c72:	901a      	str	r0, [sp, #104]	; 0x68
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c74:	901b      	str	r0, [sp, #108]	; 0x6c
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c76:	901c      	str	r0, [sp, #112]	; 0x70
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c78:	901d      	str	r0, [sp, #116]	; 0x74
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c7a:	901e      	str	r0, [sp, #120]	; 0x78
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c7c:	901f      	str	r0, [sp, #124]	; 0x7c
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000c7e:	2200      	movs	r2, #0
 8000c80:	0020      	movs	r0, r4
 8000c82:	a919      	add	r1, sp, #100	; 0x64
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c84:	9319      	str	r3, [sp, #100]	; 0x64
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000c86:	f002 fcb9 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 8000c8a:	2800      	cmp	r0, #0
 8000c8c:	d000      	beq.n	8000c90 <main+0x2bc>
 8000c8e:	e0d3      	b.n	8000e38 <main+0x464>
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8000c90:	2204      	movs	r2, #4
 8000c92:	0020      	movs	r0, r4
 8000c94:	a919      	add	r1, sp, #100	; 0x64
 8000c96:	f002 fcb1 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	d000      	beq.n	8000ca0 <main+0x2cc>
 8000c9e:	e0cb      	b.n	8000e38 <main+0x464>
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000ca0:	2208      	movs	r2, #8
 8000ca2:	0020      	movs	r0, r4
 8000ca4:	a919      	add	r1, sp, #100	; 0x64
 8000ca6:	f002 fca9 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 8000caa:	2800      	cmp	r0, #0
 8000cac:	d000      	beq.n	8000cb0 <main+0x2dc>
 8000cae:	e0c3      	b.n	8000e38 <main+0x464>
    sBreakDeadTimeConfig.DeadTime = 25;
 8000cb0:	2319      	movs	r3, #25
 8000cb2:	9323      	str	r3, [sp, #140]	; 0x8c
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cb4:	2380      	movs	r3, #128	; 0x80
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cb6:	9020      	str	r0, [sp, #128]	; 0x80
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cb8:	9021      	str	r0, [sp, #132]	; 0x84
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cba:	9022      	str	r0, [sp, #136]	; 0x88
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cbc:	9024      	str	r0, [sp, #144]	; 0x90
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cbe:	019b      	lsls	r3, r3, #6
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cc0:	9027      	str	r0, [sp, #156]	; 0x9c
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000cc2:	a920      	add	r1, sp, #128	; 0x80
 8000cc4:	0020      	movs	r0, r4
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cc6:	9325      	str	r3, [sp, #148]	; 0x94
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000cc8:	f002 fd7a 	bl	80037c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ccc:	1e05      	subs	r5, r0, #0
 8000cce:	d000      	beq.n	8000cd2 <main+0x2fe>
 8000cd0:	e0b2      	b.n	8000e38 <main+0x464>
    HAL_TIM_Base_Start_IT(&htim1); // Start TIM1 and enable the update interrupt
 8000cd2:	0020      	movs	r0, r4
 8000cd4:	f002 f990 	bl	8002ff8 <HAL_TIM_Base_Start_IT>
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0); // Set the priority for TIM1 global interrupt
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	200d      	movs	r0, #13
 8000cde:	f000 fec1 	bl	8001a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); // Enable the TIM1 global interrupt
 8000ce2:	200d      	movs	r0, #13
 8000ce4:	f000 fef0 	bl	8001ac8 <HAL_NVIC_EnableIRQ>
    HAL_TIM_MspPostInit(&htim1);
 8000ce8:	0020      	movs	r0, r4
 8000cea:	f000 f9bb 	bl	8001064 <HAL_TIM_MspPostInit>
    huart1.Instance = USART1;
 8000cee:	4c3a      	ldr	r4, [pc, #232]	; (8000dd8 <main+0x404>)
 8000cf0:	4b3a      	ldr	r3, [pc, #232]	; (8000ddc <main+0x408>)
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000cf2:	0020      	movs	r0, r4
    huart1.Instance = USART1;
 8000cf4:	6023      	str	r3, [r4, #0]
    huart1.Init.BaudRate = 1000000;
 8000cf6:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <main+0x40c>)
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf8:	60a5      	str	r5, [r4, #8]
    huart1.Init.BaudRate = 1000000;
 8000cfa:	6063      	str	r3, [r4, #4]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	230c      	movs	r3, #12
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000cfe:	60e5      	str	r5, [r4, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000d00:	6125      	str	r5, [r4, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000d02:	6163      	str	r3, [r4, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d04:	61a5      	str	r5, [r4, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d06:	61e5      	str	r5, [r4, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d08:	6225      	str	r5, [r4, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0a:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000d0c:	f003 fb78 	bl	8004400 <HAL_UART_Init>
 8000d10:	1e06      	subs	r6, r0, #0
 8000d12:	d000      	beq.n	8000d16 <main+0x342>
 8000d14:	e090      	b.n	8000e38 <main+0x464>
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	2210      	movs	r2, #16
 8000d18:	2100      	movs	r1, #0
 8000d1a:	a80c      	add	r0, sp, #48	; 0x30
 8000d1c:	f003 fdcc 	bl	80048b8 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	2208      	movs	r2, #8
 8000d22:	2100      	movs	r1, #0
 8000d24:	a805      	add	r0, sp, #20
 8000d26:	f003 fdc7 	bl	80048b8 <memset>
    htim2.Instance = TIM2;
 8000d2a:	2380      	movs	r3, #128	; 0x80
 8000d2c:	4d2d      	ldr	r5, [pc, #180]	; (8000de4 <main+0x410>)
 8000d2e:	05db      	lsls	r3, r3, #23
 8000d30:	602b      	str	r3, [r5, #0]
    htim2.Init.Prescaler = 63;
 8000d32:	233f      	movs	r3, #63	; 0x3f
 8000d34:	606b      	str	r3, [r5, #4]
    htim2.Init.Period = 999; //100Hz clock
 8000d36:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <main+0x414>)
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000d38:	0028      	movs	r0, r5
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3a:	60ae      	str	r6, [r5, #8]
    htim2.Init.Period = 999; //100Hz clock
 8000d3c:	60eb      	str	r3, [r5, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3e:	612e      	str	r6, [r5, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d40:	61ae      	str	r6, [r5, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000d42:	f002 fbc7 	bl	80034d4 <HAL_TIM_Base_Init>
 8000d46:	2800      	cmp	r0, #0
 8000d48:	d176      	bne.n	8000e38 <main+0x464>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4a:	2380      	movs	r3, #128	; 0x80
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000d4c:	0028      	movs	r0, r5
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4e:	015b      	lsls	r3, r3, #5
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000d50:	a90c      	add	r1, sp, #48	; 0x30
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d52:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000d54:	f002 f9e4 	bl	8003120 <HAL_TIM_ConfigClockSource>
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	d16d      	bne.n	8000e38 <main+0x464>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5c:	9005      	str	r0, [sp, #20]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5e:	9006      	str	r0, [sp, #24]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000d60:	a905      	add	r1, sp, #20
 8000d62:	0028      	movs	r0, r5
 8000d64:	f002 fcfe 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d165      	bne.n	8000e38 <main+0x464>
    HAL_MultiProcessor_Init(&huart1, UART_ADDR, UART_WAKEUPMETHOD_ADDRESSMARK);
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	210b      	movs	r1, #11
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	0020      	movs	r0, r4
 8000d74:	f003 fb78 	bl	8004468 <HAL_MultiProcessor_Init>
    HAL_MultiProcessorEx_AddressLength_Set(&huart1, UART_ADDRESS_DETECT_4B);
 8000d78:	2100      	movs	r1, #0
 8000d7a:	0020      	movs	r0, r4
 8000d7c:	f003 fc40 	bl	8004600 <HAL_MultiProcessorEx_AddressLength_Set>
    HAL_MultiProcessor_EnableMuteMode(&huart1);
 8000d80:	0020      	movs	r0, r4
 8000d82:	f003 fbb9 	bl	80044f8 <HAL_MultiProcessor_EnableMuteMode>
    HAL_MultiProcessor_EnterMuteMode(&huart1);
 8000d86:	0020      	movs	r0, r4
 8000d88:	f003 f87e 	bl	8003e88 <HAL_MultiProcessor_EnterMuteMode>
    DISABLE_DRIVE;
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	4808      	ldr	r0, [pc, #32]	; (8000db4 <main+0x3e0>)
 8000d92:	f001 f8c1 	bl	8001f18 <HAL_GPIO_WritePin>
 8000d96:	2200      	movs	r2, #0
 8000d98:	2140      	movs	r1, #64	; 0x40
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <main+0x3e0>)
 8000d9c:	f001 f8bc 	bl	8001f18 <HAL_GPIO_WritePin>
    RS485_SET_RX;
 8000da0:	2090      	movs	r0, #144	; 0x90
        if(p.clock_1khz_flag){ //watchdog checks if UART has been updated
 8000da2:	253e      	movs	r5, #62	; 0x3e
            p.clock_1khz_flag = 0;
 8000da4:	2700      	movs	r7, #0
    RS485_SET_RX;
 8000da6:	2200      	movs	r2, #0
 8000da8:	2102      	movs	r1, #2
 8000daa:	05c0      	lsls	r0, r0, #23
 8000dac:	e01e      	b.n	8000dec <main+0x418>
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	40021000 	.word	0x40021000
 8000db4:	48001400 	.word	0x48001400
 8000db8:	00008002 	.word	0x00008002
 8000dbc:	200000dc 	.word	0x200000dc
 8000dc0:	40012400 	.word	0x40012400
 8000dc4:	200001a4 	.word	0x200001a4
 8000dc8:	40013000 	.word	0x40013000
 8000dcc:	20000208 	.word	0x20000208
 8000dd0:	40012c00 	.word	0x40012c00
 8000dd4:	0000063f 	.word	0x0000063f
 8000dd8:	20000298 	.word	0x20000298
 8000ddc:	40013800 	.word	0x40013800
 8000de0:	000f4240 	.word	0x000f4240
 8000de4:	20000250 	.word	0x20000250
 8000de8:	000003e7 	.word	0x000003e7
 8000dec:	f001 f894 	bl	8001f18 <HAL_GPIO_WritePin>
        foc_startup();
 8000df0:	f7ff fa16 	bl	8000220 <foc_startup>
        break;
 8000df4:	4c11      	ldr	r4, [pc, #68]	; (8000e3c <main+0x468>)
            p.uart_watchdog++;
 8000df6:	2640      	movs	r6, #64	; 0x40
            foc_loop();
 8000df8:	f7ff fad0 	bl	800039c <foc_loop>
        if(p.clock_1khz_flag){ //watchdog checks if UART has been updated
 8000dfc:	5d63      	ldrb	r3, [r4, r5]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0fa      	beq.n	8000df8 <main+0x424>
            p.clock_1khz_flag = 0;
 8000e02:	5567      	strb	r7, [r4, r5]
                foc_slowloop();
 8000e04:	f7ff fcc8 	bl	8000798 <foc_slowloop>
            p.uart_watchdog++;
 8000e08:	5da3      	ldrb	r3, [r4, r6]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	55a3      	strb	r3, [r4, r6]
            if (p.uart_watchdog >= UART_WATCHDOG_MS) {
 8000e10:	2b63      	cmp	r3, #99	; 0x63
 8000e12:	d9f1      	bls.n	8000df8 <main+0x424>
                p.uart_watchdog = UART_WATCHDOG_MS;
 8000e14:	2364      	movs	r3, #100	; 0x64
                DISABLE_DRIVE;
 8000e16:	2200      	movs	r2, #0
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	4809      	ldr	r0, [pc, #36]	; (8000e40 <main+0x46c>)
                p.uart_watchdog = UART_WATCHDOG_MS;
 8000e1c:	55a3      	strb	r3, [r4, r6]
                DISABLE_DRIVE;
 8000e1e:	f001 f87b 	bl	8001f18 <HAL_GPIO_WritePin>
 8000e22:	2200      	movs	r2, #0
 8000e24:	2140      	movs	r1, #64	; 0x40
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <main+0x46c>)
 8000e28:	f001 f876 	bl	8001f18 <HAL_GPIO_WritePin>
                LED_RED;
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4803      	ldr	r0, [pc, #12]	; (8000e40 <main+0x46c>)
 8000e32:	f001 f871 	bl	8001f18 <HAL_GPIO_WritePin>
 8000e36:	e7de      	b.n	8000df6 <main+0x422>
        Error_Handler();
 8000e38:	f7ff fd76 	bl	8000928 <Error_Handler>
 8000e3c:	20000320 	.word	0x20000320
 8000e40:	48001400 	.word	0x48001400

08000e44 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e44:	2201      	movs	r2, #1
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_MspInit+0x2c>)
{
 8000e48:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	6999      	ldr	r1, [r3, #24]
 8000e4c:	4311      	orrs	r1, r2
 8000e4e:	6199      	str	r1, [r3, #24]
 8000e50:	6999      	ldr	r1, [r3, #24]
 8000e52:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e54:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	9200      	str	r2, [sp, #0]
 8000e58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	69da      	ldr	r2, [r3, #28]
 8000e5c:	0549      	lsls	r1, r1, #21
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	61da      	str	r2, [r3, #28]
 8000e62:	69db      	ldr	r3, [r3, #28]
 8000e64:	400b      	ands	r3, r1
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6a:	b002      	add	sp, #8
 8000e6c:	4770      	bx	lr
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	40021000 	.word	0x40021000

08000e74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e74:	b570      	push	{r4, r5, r6, lr}
 8000e76:	0004      	movs	r4, r0
 8000e78:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	2214      	movs	r2, #20
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	a803      	add	r0, sp, #12
 8000e80:	f003 fd1a 	bl	80048b8 <memset>
  if(hadc->Instance==ADC1)
 8000e84:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <HAL_ADC_MspInit+0xb0>)
 8000e86:	6822      	ldr	r2, [r4, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d001      	beq.n	8000e90 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e8c:	b008      	add	sp, #32
 8000e8e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <HAL_ADC_MspInit+0xb4>)
 8000e94:	0089      	lsls	r1, r1, #2
 8000e96:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	619a      	str	r2, [r3, #24]
 8000e9e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea0:	2503      	movs	r5, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ea2:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ea6:	9200      	str	r2, [sp, #0]
 8000ea8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	695a      	ldr	r2, [r3, #20]
 8000eac:	0289      	lsls	r1, r1, #10
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	615a      	str	r2, [r3, #20]
 8000eb2:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	9201      	str	r2, [sp, #4]
 8000ebc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	695a      	ldr	r2, [r3, #20]
 8000ec0:	02c9      	lsls	r1, r1, #11
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	615a      	str	r2, [r3, #20]
 8000ec6:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2600      	movs	r6, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	400b      	ands	r3, r1
 8000ecc:	9302      	str	r3, [sp, #8]
 8000ece:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = OP_V_O_Pin|NTC_IN_Pin|OP_W_O_Pin|BUS_SENSE_Pin;
 8000ed0:	231d      	movs	r3, #29
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = OP_V_O_Pin|NTC_IN_Pin|OP_W_O_Pin|BUS_SENSE_Pin;
 8000ed4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed6:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f000 ff20 	bl	8001d1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OP_U_O_Pin;
 8000edc:	2302      	movs	r3, #2
    HAL_GPIO_Init(OP_U_O_GPIO_Port, &GPIO_InitStruct);
 8000ede:	4813      	ldr	r0, [pc, #76]	; (8000f2c <HAL_ADC_MspInit+0xb8>)
 8000ee0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = OP_U_O_Pin;
 8000ee2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(OP_U_O_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f000 ff18 	bl	8001d1c <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8000eec:	4d10      	ldr	r5, [pc, #64]	; (8000f30 <HAL_ADC_MspInit+0xbc>)
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_ADC_MspInit+0xc0>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000ef0:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 8000ef2:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ef8:	3380      	adds	r3, #128	; 0x80
 8000efa:	612b      	str	r3, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000f02:	2320      	movs	r3, #32
 8000f04:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	015b      	lsls	r3, r3, #5
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f0a:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0c:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f0e:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000f10:	f000 fe00 	bl	8001b14 <HAL_DMA_Init>
 8000f14:	2800      	cmp	r0, #0
 8000f16:	d102      	bne.n	8000f1e <HAL_ADC_MspInit+0xaa>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000f18:	6325      	str	r5, [r4, #48]	; 0x30
 8000f1a:	626c      	str	r4, [r5, #36]	; 0x24
}
 8000f1c:	e7b6      	b.n	8000e8c <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8000f1e:	f7ff fd03 	bl	8000928 <Error_Handler>
 8000f22:	e7f9      	b.n	8000f18 <HAL_ADC_MspInit+0xa4>
 8000f24:	40012400 	.word	0x40012400
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	48000400 	.word	0x48000400
 8000f30:	2000011c 	.word	0x2000011c
 8000f34:	40020008 	.word	0x40020008

08000f38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f38:	b510      	push	{r4, lr}
 8000f3a:	0004      	movs	r4, r0
 8000f3c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	2214      	movs	r2, #20
 8000f40:	2100      	movs	r1, #0
 8000f42:	a803      	add	r0, sp, #12
 8000f44:	f003 fcb8 	bl	80048b8 <memset>
  if(hspi->Instance==SPI1)
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <HAL_SPI_MspInit+0x6c>)
 8000f4a:	6822      	ldr	r2, [r4, #0]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d001      	beq.n	8000f54 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f50:	b008      	add	sp, #32
 8000f52:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_SPI_MspInit+0x70>)
 8000f58:	0149      	lsls	r1, r1, #5
 8000f5a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	619a      	str	r2, [r3, #24]
 8000f62:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f66:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f6a:	9201      	str	r2, [sp, #4]
 8000f6c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	695a      	ldr	r2, [r3, #20]
 8000f70:	0289      	lsls	r1, r1, #10
 8000f72:	430a      	orrs	r2, r1
 8000f74:	615a      	str	r2, [r3, #20]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	400b      	ands	r3, r1
 8000f7a:	9302      	str	r3, [sp, #8]
 8000f7c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f7e:	23e0      	movs	r3, #224	; 0xe0
 8000f80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	3bde      	subs	r3, #222	; 0xde
 8000f84:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f88:	3301      	adds	r3, #1
 8000f8a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f000 fec6 	bl	8001d1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	2019      	movs	r0, #25
 8000f96:	f000 fd65 	bl	8001a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f9a:	2019      	movs	r0, #25
 8000f9c:	f000 fd94 	bl	8001ac8 <HAL_NVIC_EnableIRQ>
}
 8000fa0:	e7d6      	b.n	8000f50 <HAL_SPI_MspInit+0x18>
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	40013000 	.word	0x40013000
 8000fa8:	40021000 	.word	0x40021000

08000fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fac:	b530      	push	{r4, r5, lr}
 8000fae:	0004      	movs	r4, r0
 8000fb0:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	2214      	movs	r2, #20
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	a805      	add	r0, sp, #20
 8000fb8:	f003 fc7e 	bl	80048b8 <memset>
  if(htim_base->Instance==TIM1)
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	4a26      	ldr	r2, [pc, #152]	; (8001058 <HAL_TIM_Base_MspInit+0xac>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d005      	beq.n	8000fd0 <HAL_TIM_Base_MspInit+0x24>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8000fc4:	2280      	movs	r2, #128	; 0x80
 8000fc6:	05d2      	lsls	r2, r2, #23
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d033      	beq.n	8001034 <HAL_TIM_Base_MspInit+0x88>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fcc:	b00b      	add	sp, #44	; 0x2c
 8000fce:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8000fd4:	0109      	lsls	r1, r1, #4
 8000fd6:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 8000fd8:	2580      	movs	r5, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	619a      	str	r2, [r3, #24]
 8000fde:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2402      	movs	r4, #2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fe2:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fe6:	9201      	str	r2, [sp, #4]
 8000fe8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	695a      	ldr	r2, [r3, #20]
 8000fec:	02c9      	lsls	r1, r1, #11
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	615a      	str	r2, [r3, #20]
 8000ff2:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 8000ff4:	016d      	lsls	r5, r5, #5
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	9202      	str	r2, [sp, #8]
 8000ffc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	695a      	ldr	r2, [r3, #20]
 8001000:	0289      	lsls	r1, r1, #10
 8001002:	430a      	orrs	r2, r1
 8001004:	615a      	str	r2, [r3, #20]
 8001006:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(OC_COMP_INT_GPIO_Port, &GPIO_InitStruct);
 8001008:	4815      	ldr	r0, [pc, #84]	; (8001060 <HAL_TIM_Base_MspInit+0xb4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	400b      	ands	r3, r1
 800100c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(OC_COMP_INT_GPIO_Port, &GPIO_InitStruct);
 800100e:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = OC_COMP_INT_Pin;
 8001012:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001016:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(OC_COMP_INT_GPIO_Port, &GPIO_InitStruct);
 8001018:	f000 fe80 	bl	8001d1c <HAL_GPIO_Init>
    HAL_GPIO_Init(OC_COMP_INT2_GPIO_Port, &GPIO_InitStruct);
 800101c:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
    HAL_GPIO_Init(OC_COMP_INT2_GPIO_Port, &GPIO_InitStruct);
 8001020:	a905      	add	r1, sp, #20
 8001022:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = OC_COMP_INT2_Pin;
 8001024:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800102c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(OC_COMP_INT2_GPIO_Port, &GPIO_InitStruct);
 800102e:	f000 fe75 	bl	8001d1c <HAL_GPIO_Init>
 8001032:	e7cb      	b.n	8000fcc <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001034:	2301      	movs	r3, #1
 8001036:	4a09      	ldr	r2, [pc, #36]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001038:	200f      	movs	r0, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 800103a:	69d1      	ldr	r1, [r2, #28]
 800103c:	4319      	orrs	r1, r3
 800103e:	61d1      	str	r1, [r2, #28]
 8001040:	69d2      	ldr	r2, [r2, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001042:	2100      	movs	r1, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001044:	4013      	ands	r3, r2
 8001046:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800104a:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800104c:	f000 fd0a 	bl	8001a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001050:	200f      	movs	r0, #15
 8001052:	f000 fd39 	bl	8001ac8 <HAL_NVIC_EnableIRQ>
}
 8001056:	e7b9      	b.n	8000fcc <HAL_TIM_Base_MspInit+0x20>
 8001058:	40012c00 	.word	0x40012c00
 800105c:	40021000 	.word	0x40021000
 8001060:	48000400 	.word	0x48000400

08001064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001064:	b510      	push	{r4, lr}
 8001066:	0004      	movs	r4, r0
 8001068:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	2214      	movs	r2, #20
 800106c:	2100      	movs	r1, #0
 800106e:	a803      	add	r0, sp, #12
 8001070:	f003 fc22 	bl	80048b8 <memset>
  if(htim->Instance==TIM1)
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_TIM_MspPostInit+0x74>)
 8001076:	6822      	ldr	r2, [r4, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d001      	beq.n	8001080 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800107c:	b008      	add	sp, #32
 800107e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_TIM_MspPostInit+0x78>)
 8001084:	02c9      	lsls	r1, r1, #11
 8001086:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	430a      	orrs	r2, r1
 800108c:	615a      	str	r2, [r3, #20]
 800108e:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	4813      	ldr	r0, [pc, #76]	; (80010e0 <HAL_TIM_MspPostInit+0x7c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	9201      	str	r2, [sp, #4]
 8001098:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	695a      	ldr	r2, [r3, #20]
 800109c:	0289      	lsls	r1, r1, #10
 800109e:	430a      	orrs	r2, r1
 80010a0:	615a      	str	r2, [r3, #20]
 80010a2:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	400b      	ands	r3, r1
 80010a8:	9302      	str	r3, [sp, #8]
 80010aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|LSW_Pin;
 80010ac:	23e0      	movs	r3, #224	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = LSU_Pin|LSV_Pin|LSW_Pin;
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80010b4:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f000 fe31 	bl	8001d1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HSU_Pin|HSV_Pin|HSW_Pin;
 80010ba:	23e0      	movs	r3, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = HSU_Pin|HSV_Pin|HSW_Pin;
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	a903      	add	r1, sp, #12
 80010c6:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80010ce:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f000 fe24 	bl	8001d1c <HAL_GPIO_Init>
}
 80010d4:	e7d2      	b.n	800107c <HAL_TIM_MspPostInit+0x18>
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	40012c00 	.word	0x40012c00
 80010dc:	40021000 	.word	0x40021000
 80010e0:	48000400 	.word	0x48000400

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b530      	push	{r4, r5, lr}
 80010e6:	0004      	movs	r4, r0
 80010e8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	2214      	movs	r2, #20
 80010ec:	2100      	movs	r1, #0
 80010ee:	a803      	add	r0, sp, #12
 80010f0:	f003 fbe2 	bl	80048b8 <memset>
  if(huart->Instance==USART1)
 80010f4:	4b25      	ldr	r3, [pc, #148]	; (800118c <HAL_UART_MspInit+0xa8>)
 80010f6:	6822      	ldr	r2, [r4, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d001      	beq.n	8001100 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010fc:	b009      	add	sp, #36	; 0x24
 80010fe:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001100:	2180      	movs	r1, #128	; 0x80
 8001102:	4b23      	ldr	r3, [pc, #140]	; (8001190 <HAL_UART_MspInit+0xac>)
 8001104:	01c9      	lsls	r1, r1, #7
 8001106:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	4822      	ldr	r0, [pc, #136]	; (8001194 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800110a:	430a      	orrs	r2, r1
 800110c:	619a      	str	r2, [r3, #24]
 800110e:	699a      	ldr	r2, [r3, #24]
 8001110:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001114:	9201      	str	r2, [sp, #4]
 8001116:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001118:	695a      	ldr	r2, [r3, #20]
 800111a:	02c9      	lsls	r1, r1, #11
 800111c:	430a      	orrs	r2, r1
 800111e:	615a      	str	r2, [r3, #20]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	400b      	ands	r3, r1
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001128:	23c0      	movs	r3, #192	; 0xc0
 800112a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	3bbe      	subs	r3, #190	; 0xbe
 800112e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //pullup on RX matters because receiver goes into high Z when transmitting
 8001130:	3b01      	subs	r3, #1
 8001132:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001136:	3302      	adds	r3, #2
 8001138:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f000 fdef 	bl	8001d1c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800113e:	4d16      	ldr	r5, [pc, #88]	; (8001198 <HAL_UART_MspInit+0xb4>)
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_UART_MspInit+0xb8>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001142:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001144:	602b      	str	r3, [r5, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001146:	2310      	movs	r3, #16
 8001148:	606b      	str	r3, [r5, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800114a:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800114c:	0028      	movs	r0, r5
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800114e:	60ab      	str	r3, [r5, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001150:	60ea      	str	r2, [r5, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001152:	612b      	str	r3, [r5, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001154:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001156:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001158:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800115a:	f000 fcdb 	bl	8001b14 <HAL_DMA_Init>
 800115e:	2800      	cmp	r0, #0
 8001160:	d110      	bne.n	8001184 <HAL_UART_MspInit+0xa0>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_UART_MspInit+0xbc>)
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	6811      	ldr	r1, [r2, #0]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800116a:	201b      	movs	r0, #27
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 800116c:	430b      	orrs	r3, r1
 800116e:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001170:	2100      	movs	r1, #0
 8001172:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001174:	6725      	str	r5, [r4, #112]	; 0x70
 8001176:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001178:	f000 fc74 	bl	8001a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800117c:	201b      	movs	r0, #27
 800117e:	f000 fca3 	bl	8001ac8 <HAL_NVIC_EnableIRQ>
}
 8001182:	e7bb      	b.n	80010fc <HAL_UART_MspInit+0x18>
      Error_Handler();
 8001184:	f7ff fbd0 	bl	8000928 <Error_Handler>
 8001188:	e7eb      	b.n	8001162 <HAL_UART_MspInit+0x7e>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	40013800 	.word	0x40013800
 8001190:	40021000 	.word	0x40021000
 8001194:	48000400 	.word	0x48000400
 8001198:	20000160 	.word	0x20000160
 800119c:	40020044 	.word	0x40020044
 80011a0:	40010000 	.word	0x40010000

080011a4 <NMI_Handler>:
void NMI_Handler(void) {
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 80011a4:	e7fe      	b.n	80011a4 <NMI_Handler>
 80011a6:	46c0      	nop			; (mov r8, r8)

080011a8 <HardFault_Handler>:
 */
void HardFault_Handler(void) {
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 80011a8:	e7fe      	b.n	80011a8 <HardFault_Handler>
 80011aa:	46c0      	nop			; (mov r8, r8)

080011ac <SVC_Handler>:

    /* USER CODE END SVC_IRQn 0 */
    /* USER CODE BEGIN SVC_IRQn 1 */

    /* USER CODE END SVC_IRQn 1 */
}
 80011ac:	4770      	bx	lr
 80011ae:	46c0      	nop			; (mov r8, r8)

080011b0 <PendSV_Handler>:
 80011b0:	4770      	bx	lr
 80011b2:	46c0      	nop			; (mov r8, r8)

080011b4 <SysTick_Handler>:
}

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80011b4:	b510      	push	{r4, lr}
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 80011b6:	f000 f911 	bl	80013dc <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 80011ba:	bd10      	pop	{r4, pc}

080011bc <DMA1_Channel1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel 1 interrupt.
 */
void DMA1_Channel1_IRQHandler(void) {
 80011bc:	b510      	push	{r4, lr}
    /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

    /* USER CODE END DMA1_Channel1_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_adc);
 80011be:	4802      	ldr	r0, [pc, #8]	; (80011c8 <DMA1_Channel1_IRQHandler+0xc>)
 80011c0:	f000 fd5e 	bl	8001c80 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

    /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011c4:	bd10      	pop	{r4, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	2000011c 	.word	0x2000011c

080011cc <DMA1_Channel4_5_IRQHandler>:

/**
 * @brief This function handles DMA1 channel 4 and 5 interrupts.
 */
void DMA1_Channel4_5_IRQHandler(void) {
 80011cc:	b510      	push	{r4, lr}
    /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

    /* USER CODE END DMA1_Channel4_5_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80011ce:	4802      	ldr	r0, [pc, #8]	; (80011d8 <DMA1_Channel4_5_IRQHandler+0xc>)
 80011d0:	f000 fd56 	bl	8001c80 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

    /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80011d4:	bd10      	pop	{r4, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	20000160 	.word	0x20000160

080011dc <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/* Define the ISR for TIM1 interrupt */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void) {
 80011dc:	b510      	push	{r4, lr}
    // center of PWM low period to sample ADCs

    HAL_ADC_Start_DMA(&hadc, (uint32_t *)p.adc_vals, NBR_ADC);
 80011de:	2207      	movs	r2, #7
 80011e0:	4903      	ldr	r1, [pc, #12]	; (80011f0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80011e2:	4804      	ldr	r0, [pc, #16]	; (80011f4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x18>)
 80011e4:	f000 fab6 	bl	8001754 <HAL_ADC_Start_DMA>
    // HAL_GPIO_TogglePin(MAG2_CS_GPIO_Port, MAG2_CS_Pin);

    HAL_TIM_IRQHandler(&htim1); // Call the HAL handler to clear the interrupt
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1c>)
 80011ea:	f002 f87d 	bl	80032e8 <HAL_TIM_IRQHandler>
}
 80011ee:	bd10      	pop	{r4, pc}
 80011f0:	2000034c 	.word	0x2000034c
 80011f4:	200000dc 	.word	0x200000dc
 80011f8:	20000208 	.word	0x20000208

080011fc <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 80011fc:	b510      	push	{r4, lr}
    /* USER CODE BEGIN TIM2_IRQn 0 */

    /* USER CODE END TIM2_IRQn 0 */
    HAL_TIM_IRQHandler(&htim2);
 80011fe:	4802      	ldr	r0, [pc, #8]	; (8001208 <TIM2_IRQHandler+0xc>)
 8001200:	f002 f872 	bl	80032e8 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM2_IRQn 1 */

    /* USER CODE END TIM2_IRQn 1 */
}
 8001204:	bd10      	pop	{r4, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	20000250 	.word	0x20000250

0800120c <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 800120c:	b510      	push	{r4, lr}
    /* USER CODE BEGIN SPI1_IRQn 0 */

    /* USER CODE END SPI1_IRQn 0 */
    HAL_SPI_IRQHandler(&hspi1);
 800120e:	4802      	ldr	r0, [pc, #8]	; (8001218 <SPI1_IRQHandler+0xc>)
 8001210:	f001 fd1e 	bl	8002c50 <HAL_SPI_IRQHandler>
    /* USER CODE BEGIN SPI1_IRQn 1 */

    /* USER CODE END SPI1_IRQn 1 */
}
 8001214:	bd10      	pop	{r4, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	200001a4 	.word	0x200001a4

0800121c <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
 */
void USART1_IRQHandler(void) {
 800121c:	b510      	push	{r4, lr}
    /* USER CODE BEGIN USART1_IRQn 0 */

    /* USER CODE END USART1_IRQn 0 */
    HAL_UART_IRQHandler(&huart1);
 800121e:	4802      	ldr	r0, [pc, #8]	; (8001228 <USART1_IRQHandler+0xc>)
 8001220:	f002 fbf0 	bl	8003a04 <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART1_IRQn 1 */

    /* USER CODE END USART1_IRQn 1 */
}
 8001224:	bd10      	pop	{r4, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	20000298 	.word	0x20000298

0800122c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800122c:	b570      	push	{r4, r5, r6, lr}
 800122e:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001230:	dd07      	ble.n	8001242 <_read+0x16>
 8001232:	000c      	movs	r4, r1
 8001234:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 8001236:	e000      	b.n	800123a <_read+0xe>
 8001238:	bf00      	nop
 800123a:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123c:	3401      	adds	r4, #1
 800123e:	42ac      	cmp	r4, r5
 8001240:	d1f9      	bne.n	8001236 <_read+0xa>
  }

  return len;
}
 8001242:	0030      	movs	r0, r6
 8001244:	bd70      	pop	{r4, r5, r6, pc}
 8001246:	46c0      	nop			; (mov r8, r8)

08001248 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001248:	b570      	push	{r4, r5, r6, lr}
 800124a:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124c:	dd07      	ble.n	800125e <_write+0x16>
 800124e:	000c      	movs	r4, r1
 8001250:	188d      	adds	r5, r1, r2
  {
    __io_putchar(*ptr++);
 8001252:	7820      	ldrb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001254:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 8001256:	f7ff fae1 	bl	800081c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	42ac      	cmp	r4, r5
 800125c:	d1f9      	bne.n	8001252 <_write+0xa>
  }
  return len;
}
 800125e:	0030      	movs	r0, r6
 8001260:	bd70      	pop	{r4, r5, r6, pc}
 8001262:	46c0      	nop			; (mov r8, r8)

08001264 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8001264:	2001      	movs	r0, #1
}
 8001266:	4240      	negs	r0, r0
 8001268:	4770      	bx	lr
 800126a:	46c0      	nop			; (mov r8, r8)

0800126c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	019b      	lsls	r3, r3, #6
  return 0;
}
 8001270:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001272:	604b      	str	r3, [r1, #4]
}
 8001274:	4770      	bx	lr
 8001276:	46c0      	nop			; (mov r8, r8)

08001278 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001278:	2001      	movs	r0, #1
 800127a:	4770      	bx	lr

0800127c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800127c:	2000      	movs	r0, #0
 800127e:	4770      	bx	lr

08001280 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	490c      	ldr	r1, [pc, #48]	; (80012b4 <_sbrk+0x34>)
 8001282:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <_sbrk+0x38>)
{
 8001284:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001286:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001288:	490c      	ldr	r1, [pc, #48]	; (80012bc <_sbrk+0x3c>)
{
 800128a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800128c:	6808      	ldr	r0, [r1, #0]
 800128e:	2800      	cmp	r0, #0
 8001290:	d004      	beq.n	800129c <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001292:	18c3      	adds	r3, r0, r3
 8001294:	4293      	cmp	r3, r2
 8001296:	d806      	bhi.n	80012a6 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001298:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800129a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800129c:	4808      	ldr	r0, [pc, #32]	; (80012c0 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 800129e:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 80012a0:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d9f8      	bls.n	8001298 <_sbrk+0x18>
    errno = ENOMEM;
 80012a6:	f003 fb0f 	bl	80048c8 <__errno>
 80012aa:	230c      	movs	r3, #12
 80012ac:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80012ae:	2001      	movs	r0, #1
 80012b0:	4240      	negs	r0, r0
 80012b2:	e7f2      	b.n	800129a <_sbrk+0x1a>
 80012b4:	00000400 	.word	0x00000400
 80012b8:	20001000 	.word	0x20001000
 80012bc:	20000364 	.word	0x20000364
 80012c0:	200004b8 	.word	0x200004b8

080012c4 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80012c4:	4770      	bx	lr
 80012c6:	46c0      	nop			; (mov r8, r8)

080012c8 <clip>:

// int16_t clip16(int16_t x, int16_t min, int16_t max) {
//     return (x > max ? (max) : (x < min ? min : x));
// }

int32_t clip(int32_t x, int32_t min, int32_t max) {
 80012c8:	0003      	movs	r3, r0
 80012ca:	0010      	movs	r0, r2
    return (x > max ? (max) : (x < min ? min : x));
 80012cc:	4293      	cmp	r3, r2
 80012ce:	dc02      	bgt.n	80012d6 <clip+0xe>
 80012d0:	0018      	movs	r0, r3
 80012d2:	428b      	cmp	r3, r1
 80012d4:	db00      	blt.n	80012d8 <clip+0x10>
}
 80012d6:	4770      	bx	lr
    return (x > max ? (max) : (x < min ? min : x));
 80012d8:	0008      	movs	r0, r1
 80012da:	e7fc      	b.n	80012d6 <clip+0xe>

080012dc <min3>:

int32_t min3(int32_t x, int32_t y, int32_t z){
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 80012dc:	4288      	cmp	r0, r1
 80012de:	db00      	blt.n	80012e2 <min3+0x6>
 80012e0:	0008      	movs	r0, r1
 80012e2:	4290      	cmp	r0, r2
 80012e4:	dd00      	ble.n	80012e8 <min3+0xc>
 80012e6:	0010      	movs	r0, r2
}
 80012e8:	4770      	bx	lr
 80012ea:	46c0      	nop			; (mov r8, r8)

080012ec <max3>:

int32_t max3(int32_t x, int32_t y, int32_t z){
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 80012ec:	4288      	cmp	r0, r1
 80012ee:	dc00      	bgt.n	80012f2 <max3+0x6>
 80012f0:	0008      	movs	r0, r1
 80012f2:	4290      	cmp	r0, r2
 80012f4:	da00      	bge.n	80012f8 <max3+0xc>
 80012f6:	0010      	movs	r0, r2
}
 80012f8:	4770      	bx	lr
 80012fa:	46c0      	nop			; (mov r8, r8)

080012fc <abs16>:

int16_t abs16(int16_t val) {
    return val<0 ? -val : val;
 80012fc:	17c3      	asrs	r3, r0, #31
 80012fe:	18c0      	adds	r0, r0, r3
 8001300:	4058      	eors	r0, r3
 8001302:	b200      	sxth	r0, r0
}
 8001304:	4770      	bx	lr
 8001306:	46c0      	nop			; (mov r8, r8)

08001308 <pad14>:
    if(val < 0) return -val;
    else return val;
}

int16_t pad14(int32_t val) { //sign extend to 16 bits
    return (val & 0x2000) ? (val | 0xC000) : val;
 8001308:	0483      	lsls	r3, r0, #18
 800130a:	d503      	bpl.n	8001314 <pad14+0xc>
 800130c:	4b02      	ldr	r3, [pc, #8]	; (8001318 <pad14+0x10>)
 800130e:	4318      	orrs	r0, r3
 8001310:	b200      	sxth	r0, r0
}
 8001312:	4770      	bx	lr
    return (val & 0x2000) ? (val | 0xC000) : val;
 8001314:	b200      	sxth	r0, r0
 8001316:	e7fc      	b.n	8001312 <pad14+0xa>
 8001318:	ffffc000 	.word	0xffffc000

0800131c <Reset_Handler>:
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <LoopForever+0x2>)
 800131e:	4685      	mov	sp, r0
 8001320:	f7ff ffd0 	bl	80012c4 <SystemInit>
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <LoopForever+0x6>)
 8001326:	490d      	ldr	r1, [pc, #52]	; (800135c <LoopForever+0xa>)
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <LoopForever+0xe>)
 800132a:	2300      	movs	r3, #0
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:
 800132e:	58d4      	ldr	r4, [r2, r3]
 8001330:	50c4      	str	r4, [r0, r3]
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:
 8001334:	18c4      	adds	r4, r0, r3
 8001336:	428c      	cmp	r4, r1
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <LoopForever+0x12>)
 800133c:	4c0a      	ldr	r4, [pc, #40]	; (8001368 <LoopForever+0x16>)
 800133e:	2300      	movs	r3, #0
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:
 8001346:	42a2      	cmp	r2, r4
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>
 800134a:	f003 fac3 	bl	80048d4 <__libc_init_array>
 800134e:	f7ff fb41 	bl	80009d4 <main>

08001352 <LoopForever>:
 8001352:	e7fe      	b.n	8001352 <LoopForever>
 8001354:	20001000 	.word	0x20001000
 8001358:	20000000 	.word	0x20000000
 800135c:	2000006c 	.word	0x2000006c
 8001360:	0800531c 	.word	0x0800531c
 8001364:	2000006c 	.word	0x2000006c
 8001368:	200004b8 	.word	0x200004b8

0800136c <ADC1_IRQHandler>:
 800136c:	e7fe      	b.n	800136c <ADC1_IRQHandler>
	...

08001370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b570      	push	{r4, r5, r6, lr}
 8001372:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001374:	20fa      	movs	r0, #250	; 0xfa
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_InitTick+0x40>)
 8001378:	0080      	lsls	r0, r0, #2
 800137a:	7819      	ldrb	r1, [r3, #0]
 800137c:	f7fe fec4 	bl	8000108 <__udivsi3>
 8001380:	4d0c      	ldr	r5, [pc, #48]	; (80013b4 <HAL_InitTick+0x44>)
 8001382:	0001      	movs	r1, r0
 8001384:	6828      	ldr	r0, [r5, #0]
 8001386:	f7fe febf 	bl	8000108 <__udivsi3>
 800138a:	f000 fba9 	bl	8001ae0 <HAL_SYSTICK_Config>
 800138e:	2800      	cmp	r0, #0
 8001390:	d10c      	bne.n	80013ac <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8001392:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001394:	2c03      	cmp	r4, #3
 8001396:	d900      	bls.n	800139a <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8001398:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139a:	3802      	subs	r0, #2
 800139c:	2200      	movs	r2, #0
 800139e:	0021      	movs	r1, r4
 80013a0:	f000 fb60 	bl	8001a64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <HAL_InitTick+0x48>)
 80013a6:	2000      	movs	r0, #0
 80013a8:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80013aa:	e7f5      	b.n	8001398 <HAL_InitTick+0x28>
    return HAL_ERROR;
 80013ac:	2001      	movs	r0, #1
 80013ae:	e7f3      	b.n	8001398 <HAL_InitTick+0x28>
 80013b0:	20000008 	.word	0x20000008
 80013b4:	20000004 	.word	0x20000004
 80013b8:	2000000c 	.word	0x2000000c

080013bc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013bc:	2110      	movs	r1, #16
 80013be:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_Init+0x1c>)
{
 80013c0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c2:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c4:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c6:	430b      	orrs	r3, r1
 80013c8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ca:	f7ff ffd1 	bl	8001370 <HAL_InitTick>
  HAL_MspInit();
 80013ce:	f7ff fd39 	bl	8000e44 <HAL_MspInit>
}
 80013d2:	2000      	movs	r0, #0
 80013d4:	bd10      	pop	{r4, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	40022000 	.word	0x40022000

080013dc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_IncTick+0x10>)
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <HAL_IncTick+0x14>)
 80013e0:	6811      	ldr	r1, [r2, #0]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	185b      	adds	r3, r3, r1
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	4770      	bx	lr
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	20000368 	.word	0x20000368
 80013f0:	20000008 	.word	0x20000008

080013f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013f4:	4b01      	ldr	r3, [pc, #4]	; (80013fc <HAL_GetTick+0x8>)
 80013f6:	6818      	ldr	r0, [r3, #0]
}
 80013f8:	4770      	bx	lr
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	20000368 	.word	0x20000368

08001400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001400:	b570      	push	{r4, r5, r6, lr}
 8001402:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001404:	f7ff fff6 	bl	80013f4 <HAL_GetTick>
 8001408:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140a:	1c63      	adds	r3, r4, #1
 800140c:	d002      	beq.n	8001414 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <HAL_Delay+0x20>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001414:	f7ff ffee 	bl	80013f4 <HAL_GetTick>
 8001418:	1b40      	subs	r0, r0, r5
 800141a:	42a0      	cmp	r0, r4
 800141c:	d3fa      	bcc.n	8001414 <HAL_Delay+0x14>
  {
  }
}
 800141e:	bd70      	pop	{r4, r5, r6, pc}
 8001420:	20000008 	.word	0x20000008

08001424 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001426:	2303      	movs	r3, #3
 8001428:	6802      	ldr	r2, [r0, #0]
{
 800142a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800142c:	6891      	ldr	r1, [r2, #8]
 800142e:	400b      	ands	r3, r1
 8001430:	2b01      	cmp	r3, #1
 8001432:	d001      	beq.n	8001438 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001434:	2000      	movs	r0, #0
}
 8001436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001438:	6811      	ldr	r1, [r2, #0]
 800143a:	420b      	tst	r3, r1
 800143c:	d00e      	beq.n	800145c <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800143e:	2705      	movs	r7, #5
 8001440:	6893      	ldr	r3, [r2, #8]
 8001442:	401f      	ands	r7, r3
 8001444:	2f01      	cmp	r7, #1
 8001446:	d00d      	beq.n	8001464 <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001448:	2210      	movs	r2, #16
 800144a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800144c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144e:	4313      	orrs	r3, r2
 8001450:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001452:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001454:	3a0f      	subs	r2, #15
 8001456:	4313      	orrs	r3, r2
 8001458:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 800145a:	e7ec      	b.n	8001436 <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 800145c:	68d3      	ldr	r3, [r2, #12]
 800145e:	041b      	lsls	r3, r3, #16
 8001460:	d5e8      	bpl.n	8001434 <ADC_Disable+0x10>
 8001462:	e7ec      	b.n	800143e <ADC_Disable+0x1a>
      __HAL_ADC_DISABLE(hadc);
 8001464:	2102      	movs	r1, #2
 8001466:	6893      	ldr	r3, [r2, #8]
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001468:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 800146a:	430b      	orrs	r3, r1
 800146c:	6093      	str	r3, [r2, #8]
 800146e:	2303      	movs	r3, #3
 8001470:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001472:	f7ff ffbf 	bl	80013f4 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001476:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001478:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	421f      	tst	r7, r3
 800147e:	d0d9      	beq.n	8001434 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001480:	f7ff ffb8 	bl	80013f4 <HAL_GetTick>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001484:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001486:	1b80      	subs	r0, r0, r6
 8001488:	2802      	cmp	r0, #2
 800148a:	d902      	bls.n	8001492 <ADC_Disable+0x6e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	4215      	tst	r5, r2
 8001490:	d103      	bne.n	800149a <ADC_Disable+0x76>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	421d      	tst	r5, r3
 8001496:	d1f3      	bne.n	8001480 <ADC_Disable+0x5c>
 8001498:	e7cc      	b.n	8001434 <ADC_Disable+0x10>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800149a:	2210      	movs	r2, #16
 800149c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          return HAL_ERROR;
 800149e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a0:	4313      	orrs	r3, r2
 80014a2:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014a6:	432b      	orrs	r3, r5
 80014a8:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80014aa:	e7c4      	b.n	8001436 <ADC_Disable+0x12>

080014ac <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80014ac:	2204      	movs	r2, #4
 80014ae:	6803      	ldr	r3, [r0, #0]
{
 80014b0:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80014b2:	6899      	ldr	r1, [r3, #8]
{
 80014b4:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80014b6:	420a      	tst	r2, r1
 80014b8:	d01d      	beq.n	80014f6 <ADC_ConversionStop+0x4a>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014ba:	6899      	ldr	r1, [r3, #8]
 80014bc:	420a      	tst	r2, r1
 80014be:	d006      	beq.n	80014ce <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80014c0:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014c2:	0792      	lsls	r2, r2, #30
 80014c4:	d403      	bmi.n	80014ce <ADC_ConversionStop+0x22>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80014c6:	2110      	movs	r1, #16
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014ce:	f7ff ff91 	bl	80013f4 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014d2:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80014d4:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	075b      	lsls	r3, r3, #29
 80014da:	d50c      	bpl.n	80014f6 <ADC_ConversionStop+0x4a>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014dc:	2504      	movs	r5, #4
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80014de:	f7ff ff89 	bl	80013f4 <HAL_GetTick>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014e2:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80014e4:	1b80      	subs	r0, r0, r6
 80014e6:	2802      	cmp	r0, #2
 80014e8:	d902      	bls.n	80014f0 <ADC_ConversionStop+0x44>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	4215      	tst	r5, r2
 80014ee:	d104      	bne.n	80014fa <ADC_ConversionStop+0x4e>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	421d      	tst	r5, r3
 80014f4:	d1f3      	bne.n	80014de <ADC_ConversionStop+0x32>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014f6:	2000      	movs	r0, #0
}
 80014f8:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014fa:	2210      	movs	r2, #16
 80014fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          return HAL_ERROR;
 80014fe:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001500:	4313      	orrs	r3, r2
 8001502:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001504:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001506:	3a0f      	subs	r2, #15
 8001508:	4313      	orrs	r3, r2
 800150a:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 800150c:	e7f4      	b.n	80014f8 <ADC_ConversionStop+0x4c>
 800150e:	46c0      	nop			; (mov r8, r8)

08001510 <ADC_Enable.constprop.0>:
  __IO uint32_t wait_loop_index = 0U;
 8001510:	2300      	movs	r3, #0
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8001512:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001514:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8001516:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001518:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800151a:	6891      	ldr	r1, [r2, #8]
 800151c:	3303      	adds	r3, #3
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 800151e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001520:	400b      	ands	r3, r1
 8001522:	2b01      	cmp	r3, #1
 8001524:	d037      	beq.n	8001596 <ADC_Enable.constprop.0+0x86>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001526:	6891      	ldr	r1, [r2, #8]
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <ADC_Enable.constprop.0+0xa8>)
 800152a:	4219      	tst	r1, r3
 800152c:	d129      	bne.n	8001582 <ADC_Enable.constprop.0+0x72>
    __HAL_ADC_ENABLE(hadc);
 800152e:	2101      	movs	r1, #1
 8001530:	6893      	ldr	r3, [r2, #8]
 8001532:	430b      	orrs	r3, r1
 8001534:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <ADC_Enable.constprop.0+0xac>)
 8001538:	4921      	ldr	r1, [pc, #132]	; (80015c0 <ADC_Enable.constprop.0+0xb0>)
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	f7fe fde4 	bl	8000108 <__udivsi3>
 8001540:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8001542:	9b01      	ldr	r3, [sp, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <ADC_Enable.constprop.0+0x44>
      wait_loop_index--;
 8001548:	9b01      	ldr	r3, [sp, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800154e:	9b01      	ldr	r3, [sp, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f9      	bne.n	8001548 <ADC_Enable.constprop.0+0x38>
    tickstart = HAL_GetTick();
 8001554:	f7ff ff4e 	bl	80013f4 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001558:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800155a:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800155c:	681b      	ldr	r3, [r3, #0]
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800155e:	2501      	movs	r5, #1
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001560:	07db      	lsls	r3, r3, #31
 8001562:	d40b      	bmi.n	800157c <ADC_Enable.constprop.0+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001564:	f7ff ff46 	bl	80013f4 <HAL_GetTick>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001568:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800156a:	1b80      	subs	r0, r0, r6
 800156c:	2802      	cmp	r0, #2
 800156e:	d902      	bls.n	8001576 <ADC_Enable.constprop.0+0x66>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4215      	tst	r5, r2
 8001574:	d016      	beq.n	80015a4 <ADC_Enable.constprop.0+0x94>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	421d      	tst	r5, r3
 800157a:	d0f3      	beq.n	8001564 <ADC_Enable.constprop.0+0x54>
  return HAL_OK;
 800157c:	2000      	movs	r0, #0
}
 800157e:	b002      	add	sp, #8
 8001580:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001582:	2210      	movs	r2, #16
 8001584:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8001586:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001588:	4313      	orrs	r3, r2
 800158a:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800158e:	3a0f      	subs	r2, #15
 8001590:	4313      	orrs	r3, r2
 8001592:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001594:	e7f3      	b.n	800157e <ADC_Enable.constprop.0+0x6e>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001596:	6811      	ldr	r1, [r2, #0]
 8001598:	420b      	tst	r3, r1
 800159a:	d1ef      	bne.n	800157c <ADC_Enable.constprop.0+0x6c>
 800159c:	68d3      	ldr	r3, [r2, #12]
 800159e:	041b      	lsls	r3, r3, #16
 80015a0:	d4ec      	bmi.n	800157c <ADC_Enable.constprop.0+0x6c>
 80015a2:	e7c0      	b.n	8001526 <ADC_Enable.constprop.0+0x16>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a4:	2210      	movs	r2, #16
 80015a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          return HAL_ERROR;
 80015a8:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015aa:	4313      	orrs	r3, r2
 80015ac:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015b0:	432b      	orrs	r3, r5
 80015b2:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80015b4:	e7e3      	b.n	800157e <ADC_Enable.constprop.0+0x6e>
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	80000017 	.word	0x80000017
 80015bc:	20000004 	.word	0x20000004
 80015c0:	000f4240 	.word	0x000f4240

080015c4 <HAL_ADC_Init>:
{
 80015c4:	b570      	push	{r4, r5, r6, lr}
 80015c6:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80015c8:	d100      	bne.n	80015cc <HAL_ADC_Init+0x8>
 80015ca:	e082      	b.n	80016d2 <HAL_ADC_Init+0x10e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d069      	beq.n	80016a6 <HAL_ADC_Init+0xe2>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015d4:	06db      	lsls	r3, r3, #27
 80015d6:	d460      	bmi.n	800169a <HAL_ADC_Init+0xd6>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80015d8:	6822      	ldr	r2, [r4, #0]
 80015da:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80015dc:	075b      	lsls	r3, r3, #29
 80015de:	d45c      	bmi.n	800169a <HAL_ADC_Init+0xd6>
    ADC_STATE_CLR_SET(hadc->State,
 80015e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015e2:	4949      	ldr	r1, [pc, #292]	; (8001708 <HAL_ADC_Init+0x144>)
 80015e4:	400b      	ands	r3, r1
 80015e6:	3106      	adds	r1, #6
 80015e8:	31ff      	adds	r1, #255	; 0xff
 80015ea:	430b      	orrs	r3, r1
 80015ec:	63a3      	str	r3, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 80015ee:	2303      	movs	r3, #3
 80015f0:	6891      	ldr	r1, [r2, #8]
 80015f2:	400b      	ands	r3, r1
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d05c      	beq.n	80016b2 <HAL_ADC_Init+0xee>
      MODIFY_REG(hadc->Instance->CFGR1,
 80015f8:	2118      	movs	r1, #24
 80015fa:	68d3      	ldr	r3, [r2, #12]
 80015fc:	438b      	bics	r3, r1
 80015fe:	68a1      	ldr	r1, [r4, #8]
 8001600:	430b      	orrs	r3, r1
 8001602:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001604:	6913      	ldr	r3, [r2, #16]
 8001606:	6861      	ldr	r1, [r4, #4]
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	430b      	orrs	r3, r1
 800160e:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001610:	68d3      	ldr	r3, [r2, #12]
 8001612:	493e      	ldr	r1, [pc, #248]	; (800170c <HAL_ADC_Init+0x148>)
 8001614:	400b      	ands	r3, r1
 8001616:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001618:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800161a:	7e61      	ldrb	r1, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800161c:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800161e:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001620:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001622:	7ea0      	ldrb	r0, [r4, #26]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001624:	68e1      	ldr	r1, [r4, #12]
 8001626:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001628:	0341      	lsls	r1, r0, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800162a:	430b      	orrs	r3, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800162c:	2124      	movs	r1, #36	; 0x24
 800162e:	5c61      	ldrb	r1, [r4, r1]
 8001630:	0049      	lsls	r1, r1, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001632:	430b      	orrs	r3, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001634:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001636:	3901      	subs	r1, #1
 8001638:	1e4d      	subs	r5, r1, #1
 800163a:	41a9      	sbcs	r1, r5
 800163c:	0309      	lsls	r1, r1, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800163e:	430b      	orrs	r3, r1
 8001640:	6921      	ldr	r1, [r4, #16]
 8001642:	3902      	subs	r1, #2
 8001644:	424d      	negs	r5, r1
 8001646:	4169      	adcs	r1, r5
 8001648:	0089      	lsls	r1, r1, #2
 800164a:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800164c:	7ee1      	ldrb	r1, [r4, #27]
 800164e:	2901      	cmp	r1, #1
 8001650:	d04b      	beq.n	80016ea <HAL_ADC_Init+0x126>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001652:	20c2      	movs	r0, #194	; 0xc2
 8001654:	69e1      	ldr	r1, [r4, #28]
 8001656:	30ff      	adds	r0, #255	; 0xff
 8001658:	4281      	cmp	r1, r0
 800165a:	d002      	beq.n	8001662 <HAL_ADC_Init+0x9e>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800165c:	6a20      	ldr	r0, [r4, #32]
 800165e:	4301      	orrs	r1, r0
 8001660:	430b      	orrs	r3, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001662:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001664:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001666:	4319      	orrs	r1, r3
 8001668:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800166a:	2180      	movs	r1, #128	; 0x80
 800166c:	0549      	lsls	r1, r1, #21
 800166e:	428d      	cmp	r5, r1
 8001670:	d026      	beq.n	80016c0 <HAL_ADC_Init+0xfc>
 8001672:	1e69      	subs	r1, r5, #1
 8001674:	2906      	cmp	r1, #6
 8001676:	d923      	bls.n	80016c0 <HAL_ADC_Init+0xfc>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001678:	68d2      	ldr	r2, [r2, #12]
 800167a:	4925      	ldr	r1, [pc, #148]	; (8001710 <HAL_ADC_Init+0x14c>)
 800167c:	400a      	ands	r2, r1
 800167e:	429a      	cmp	r2, r3
 8001680:	d029      	beq.n	80016d6 <HAL_ADC_Init+0x112>
      ADC_STATE_CLR_SET(hadc->State,
 8001682:	2212      	movs	r2, #18
 8001684:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      tmp_hal_status = HAL_ERROR;
 8001686:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001688:	4393      	bics	r3, r2
 800168a:	3a02      	subs	r2, #2
 800168c:	4313      	orrs	r3, r2
 800168e:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001690:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001692:	3a0f      	subs	r2, #15
 8001694:	4313      	orrs	r3, r2
 8001696:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8001698:	e004      	b.n	80016a4 <HAL_ADC_Init+0xe0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800169a:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 800169c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800169e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016a0:	4313      	orrs	r3, r2
 80016a2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80016a4:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Lock = HAL_UNLOCKED;
 80016a6:	2234      	movs	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80016a8:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 80016aa:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80016ac:	f7ff fbe2 	bl	8000e74 <HAL_ADC_MspInit>
 80016b0:	e78f      	b.n	80015d2 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80016b2:	6811      	ldr	r1, [r2, #0]
 80016b4:	420b      	tst	r3, r1
 80016b6:	d1ab      	bne.n	8001610 <HAL_ADC_Init+0x4c>
 80016b8:	68d3      	ldr	r3, [r2, #12]
 80016ba:	041b      	lsls	r3, r3, #16
 80016bc:	d4a8      	bmi.n	8001610 <HAL_ADC_Init+0x4c>
 80016be:	e79b      	b.n	80015f8 <HAL_ADC_Init+0x34>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80016c0:	2107      	movs	r1, #7
 80016c2:	6950      	ldr	r0, [r2, #20]
 80016c4:	4388      	bics	r0, r1
 80016c6:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80016c8:	6950      	ldr	r0, [r2, #20]
 80016ca:	4029      	ands	r1, r5
 80016cc:	4301      	orrs	r1, r0
 80016ce:	6151      	str	r1, [r2, #20]
 80016d0:	e7d2      	b.n	8001678 <HAL_ADC_Init+0xb4>
    return HAL_ERROR;
 80016d2:	2001      	movs	r0, #1
 80016d4:	e7e6      	b.n	80016a4 <HAL_ADC_Init+0xe0>
      ADC_CLEAR_ERRORCODE(hadc);
 80016d6:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 80016d8:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80016da:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80016dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016de:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80016e0:	4393      	bics	r3, r2
 80016e2:	3a02      	subs	r2, #2
 80016e4:	4313      	orrs	r3, r2
 80016e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80016e8:	e7dc      	b.n	80016a4 <HAL_ADC_Init+0xe0>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d103      	bne.n	80016f6 <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	0249      	lsls	r1, r1, #9
 80016f2:	430b      	orrs	r3, r1
 80016f4:	e7ad      	b.n	8001652 <HAL_ADC_Init+0x8e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f6:	2520      	movs	r5, #32
 80016f8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016fa:	4328      	orrs	r0, r5
 80016fc:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001700:	4301      	orrs	r1, r0
 8001702:	63e1      	str	r1, [r4, #60]	; 0x3c
 8001704:	e7a5      	b.n	8001652 <HAL_ADC_Init+0x8e>
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	fffffefd 	.word	0xfffffefd
 800170c:	fffe0219 	.word	0xfffe0219
 8001710:	833fffe7 	.word	0x833fffe7

08001714 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8001714:	2334      	movs	r3, #52	; 0x34
{ 
 8001716:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001718:	5cc2      	ldrb	r2, [r0, r3]
{ 
 800171a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800171c:	2a01      	cmp	r2, #1
 800171e:	d014      	beq.n	800174a <HAL_ADC_Stop+0x36>
 8001720:	2501      	movs	r5, #1
 8001722:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001724:	f7ff fec2 	bl	80014ac <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001728:	2800      	cmp	r0, #0
 800172a:	d003      	beq.n	8001734 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800172c:	2334      	movs	r3, #52	; 0x34
 800172e:	2200      	movs	r2, #0
 8001730:	54e2      	strb	r2, [r4, r3]
}
 8001732:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8001734:	0020      	movs	r0, r4
 8001736:	f7ff fe75 	bl	8001424 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800173a:	2800      	cmp	r0, #0
 800173c:	d1f6      	bne.n	800172c <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800173e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001740:	4a03      	ldr	r2, [pc, #12]	; (8001750 <HAL_ADC_Stop+0x3c>)
 8001742:	4013      	ands	r3, r2
 8001744:	432b      	orrs	r3, r5
 8001746:	63a3      	str	r3, [r4, #56]	; 0x38
 8001748:	e7f0      	b.n	800172c <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800174a:	2002      	movs	r0, #2
 800174c:	e7f1      	b.n	8001732 <HAL_ADC_Stop+0x1e>
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	fffffefe 	.word	0xfffffefe

08001754 <HAL_ADC_Start_DMA>:
{
 8001754:	b5d0      	push	{r4, r6, r7, lr}
 8001756:	000e      	movs	r6, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001758:	6801      	ldr	r1, [r0, #0]
{
 800175a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800175c:	688b      	ldr	r3, [r1, #8]
{
 800175e:	0017      	movs	r7, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001760:	075b      	lsls	r3, r3, #29
 8001762:	d435      	bmi.n	80017d0 <HAL_ADC_Start_DMA+0x7c>
    __HAL_LOCK(hadc);
 8001764:	2334      	movs	r3, #52	; 0x34
 8001766:	5cc2      	ldrb	r2, [r0, r3]
 8001768:	2a01      	cmp	r2, #1
 800176a:	d031      	beq.n	80017d0 <HAL_ADC_Start_DMA+0x7c>
 800176c:	2201      	movs	r2, #1
 800176e:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001770:	7e43      	ldrb	r3, [r0, #25]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d004      	beq.n	8001780 <HAL_ADC_Start_DMA+0x2c>
      tmp_hal_status = ADC_Enable(hadc);
 8001776:	f7ff fecb 	bl	8001510 <ADC_Enable.constprop.0>
    if (tmp_hal_status == HAL_OK)
 800177a:	2800      	cmp	r0, #0
 800177c:	d127      	bne.n	80017ce <HAL_ADC_Start_DMA+0x7a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800177e:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8001780:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_ADC_Start_DMA+0x80>)
 8001784:	401a      	ands	r2, r3
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4313      	orrs	r3, r2
 800178c:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 800178e:	2234      	movs	r2, #52	; 0x34
      ADC_CLEAR_ERRORCODE(hadc);
 8001790:	2300      	movs	r3, #0
 8001792:	63e3      	str	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8001794:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001796:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_ADC_Start_DMA+0x84>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800179a:	3a24      	subs	r2, #36	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800179c:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_ADC_Start_DMA+0x88>)
 80017a0:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_ADC_Start_DMA+0x8c>)
 80017a4:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017a6:	231c      	movs	r3, #28
 80017a8:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017aa:	684b      	ldr	r3, [r1, #4]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80017b0:	68cb      	ldr	r3, [r1, #12]
 80017b2:	3a0f      	subs	r2, #15
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017b8:	0032      	movs	r2, r6
 80017ba:	003b      	movs	r3, r7
 80017bc:	3140      	adds	r1, #64	; 0x40
 80017be:	f000 f9dd 	bl	8001b7c <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80017c2:	2104      	movs	r1, #4
 80017c4:	2000      	movs	r0, #0
 80017c6:	6822      	ldr	r2, [r4, #0]
 80017c8:	6893      	ldr	r3, [r2, #8]
 80017ca:	430b      	orrs	r3, r1
 80017cc:	6093      	str	r3, [r2, #8]
}
 80017ce:	bdd0      	pop	{r4, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 80017d0:	2002      	movs	r0, #2
 80017d2:	e7fc      	b.n	80017ce <HAL_ADC_Start_DMA+0x7a>
 80017d4:	fffff0fe 	.word	0xfffff0fe
 80017d8:	080017e5 	.word	0x080017e5
 80017dc:	0800185d 	.word	0x0800185d
 80017e0:	0800186d 	.word	0x0800186d

080017e4 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017e4:	2150      	movs	r1, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80017e8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017ec:	4211      	tst	r1, r2
 80017ee:	d10e      	bne.n	800180e <ADC_DMAConvCplt+0x2a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017f4:	0092      	lsls	r2, r2, #2
 80017f6:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017f8:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80017fa:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	0109      	lsls	r1, r1, #4
 8001800:	68d0      	ldr	r0, [r2, #12]
 8001802:	4208      	tst	r0, r1
 8001804:	d007      	beq.n	8001816 <ADC_DMAConvCplt+0x32>

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001806:	0018      	movs	r0, r3
 8001808:	f7ff f880 	bl	800090c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800180c:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4798      	blx	r3
}
 8001814:	e7fa      	b.n	800180c <ADC_DMAConvCplt+0x28>
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001816:	7e99      	ldrb	r1, [r3, #26]
 8001818:	2900      	cmp	r1, #0
 800181a:	d1f4      	bne.n	8001806 <ADC_DMAConvCplt+0x22>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800181c:	6811      	ldr	r1, [r2, #0]
 800181e:	0709      	lsls	r1, r1, #28
 8001820:	d5f1      	bpl.n	8001806 <ADC_DMAConvCplt+0x22>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001822:	6891      	ldr	r1, [r2, #8]
 8001824:	0749      	lsls	r1, r1, #29
 8001826:	d40b      	bmi.n	8001840 <ADC_DMAConvCplt+0x5c>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001828:	200c      	movs	r0, #12
 800182a:	6851      	ldr	r1, [r2, #4]
 800182c:	4381      	bics	r1, r0
 800182e:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <ADC_DMAConvCplt+0x70>)
 8001834:	400a      	ands	r2, r1
 8001836:	3104      	adds	r1, #4
 8001838:	31ff      	adds	r1, #255	; 0xff
 800183a:	430a      	orrs	r2, r1
 800183c:	639a      	str	r2, [r3, #56]	; 0x38
 800183e:	e7e2      	b.n	8001806 <ADC_DMAConvCplt+0x22>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001840:	2120      	movs	r1, #32
 8001842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001844:	430a      	orrs	r2, r1
 8001846:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001848:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800184a:	391f      	subs	r1, #31
 800184c:	430a      	orrs	r2, r1
 800184e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001850:	e7d9      	b.n	8001806 <ADC_DMAConvCplt+0x22>
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	fffffefe 	.word	0xfffffefe

08001858 <HAL_ADC_ConvHalfCpltCallback>:
 8001858:	4770      	bx	lr
 800185a:	46c0      	nop			; (mov r8, r8)

0800185c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800185c:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800185e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001860:	f7ff fffa 	bl	8001858 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001864:	bd10      	pop	{r4, pc}
 8001866:	46c0      	nop			; (mov r8, r8)

08001868 <HAL_ADC_ErrorCallback>:
 8001868:	4770      	bx	lr
 800186a:	46c0      	nop			; (mov r8, r8)

0800186c <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800186c:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800186e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001870:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001872:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001874:	4313      	orrs	r3, r2
 8001876:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001878:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800187a:	3a3c      	subs	r2, #60	; 0x3c
 800187c:	4313      	orrs	r3, r2
 800187e:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001880:	f7ff fff2 	bl	8001868 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001884:	bd10      	pop	{r4, pc}
 8001886:	46c0      	nop			; (mov r8, r8)

08001888 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001888:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 800188a:	2234      	movs	r2, #52	; 0x34
{
 800188c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001890:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001892:	5c83      	ldrb	r3, [r0, r2]
{
 8001894:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001896:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8001898:	2b01      	cmp	r3, #1
 800189a:	d060      	beq.n	800195e <HAL_ADC_ConfigChannel+0xd6>
 800189c:	2301      	movs	r3, #1
 800189e:	5483      	strb	r3, [r0, r2]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018a0:	6805      	ldr	r5, [r0, #0]
 80018a2:	68aa      	ldr	r2, [r5, #8]
 80018a4:	0752      	lsls	r2, r2, #29
 80018a6:	d509      	bpl.n	80018bc <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018a8:	2220      	movs	r2, #32
 80018aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80018ac:	4313      	orrs	r3, r2
 80018ae:	6383      	str	r3, [r0, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 80018b0:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80018b2:	2334      	movs	r3, #52	; 0x34
 80018b4:	2200      	movs	r2, #0
 80018b6:	54e2      	strb	r2, [r4, r3]
}
 80018b8:	b003      	add	sp, #12
 80018ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 80018bc:	4a36      	ldr	r2, [pc, #216]	; (8001998 <HAL_ADC_ConfigChannel+0x110>)
 80018be:	6848      	ldr	r0, [r1, #4]
 80018c0:	4290      	cmp	r0, r2
 80018c2:	d030      	beq.n	8001926 <HAL_ADC_ConfigChannel+0x9e>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80018c4:	680a      	ldr	r2, [r1, #0]
 80018c6:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80018c8:	4093      	lsls	r3, r2
 80018ca:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018cc:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80018ce:	4338      	orrs	r0, r7
 80018d0:	62a8      	str	r0, [r5, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018d2:	055b      	lsls	r3, r3, #21
 80018d4:	429e      	cmp	r6, r3
 80018d6:	d00f      	beq.n	80018f8 <HAL_ADC_ConfigChannel+0x70>
 80018d8:	3e01      	subs	r6, #1
 80018da:	2e06      	cmp	r6, #6
 80018dc:	d90c      	bls.n	80018f8 <HAL_ADC_ConfigChannel+0x70>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80018de:	2307      	movs	r3, #7
 80018e0:	6888      	ldr	r0, [r1, #8]
 80018e2:	6969      	ldr	r1, [r5, #20]
 80018e4:	4019      	ands	r1, r3
 80018e6:	4288      	cmp	r0, r1
 80018e8:	d006      	beq.n	80018f8 <HAL_ADC_ConfigChannel+0x70>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80018ea:	6969      	ldr	r1, [r5, #20]
 80018ec:	4399      	bics	r1, r3
 80018ee:	6169      	str	r1, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80018f0:	6969      	ldr	r1, [r5, #20]
 80018f2:	4003      	ands	r3, r0
 80018f4:	430b      	orrs	r3, r1
 80018f6:	616b      	str	r3, [r5, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80018f8:	0013      	movs	r3, r2
 80018fa:	3b10      	subs	r3, #16
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d810      	bhi.n	8001922 <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001900:	4926      	ldr	r1, [pc, #152]	; (800199c <HAL_ADC_ConfigChannel+0x114>)
 8001902:	680b      	ldr	r3, [r1, #0]
 8001904:	2a10      	cmp	r2, #16
 8001906:	d02e      	beq.n	8001966 <HAL_ADC_ConfigChannel+0xde>
 8001908:	3a11      	subs	r2, #17
 800190a:	1e50      	subs	r0, r2, #1
 800190c:	4182      	sbcs	r2, r0
 800190e:	20c0      	movs	r0, #192	; 0xc0
 8001910:	4252      	negs	r2, r2
 8001912:	0400      	lsls	r0, r0, #16
 8001914:	4002      	ands	r2, r0
 8001916:	2080      	movs	r0, #128	; 0x80
 8001918:	03c0      	lsls	r0, r0, #15
 800191a:	4684      	mov	ip, r0
 800191c:	4462      	add	r2, ip
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001922:	2000      	movs	r0, #0
 8001924:	e7c5      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001926:	680a      	ldr	r2, [r1, #0]
 8001928:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800192a:	4093      	lsls	r3, r2
 800192c:	4398      	bics	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800192e:	0013      	movs	r3, r2
 8001930:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001932:	62a8      	str	r0, [r5, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001934:	2b02      	cmp	r3, #2
 8001936:	d8f4      	bhi.n	8001922 <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001938:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_ADC_ConfigChannel+0x114>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2a10      	cmp	r2, #16
 800193e:	d010      	beq.n	8001962 <HAL_ADC_ConfigChannel+0xda>
 8001940:	3a11      	subs	r2, #17
 8001942:	4251      	negs	r1, r2
 8001944:	414a      	adcs	r2, r1
 8001946:	21c0      	movs	r1, #192	; 0xc0
 8001948:	4252      	negs	r2, r2
 800194a:	0409      	lsls	r1, r1, #16
 800194c:	400a      	ands	r2, r1
 800194e:	4914      	ldr	r1, [pc, #80]	; (80019a0 <HAL_ADC_ConfigChannel+0x118>)
 8001950:	468c      	mov	ip, r1
 8001952:	4462      	add	r2, ip
 8001954:	401a      	ands	r2, r3
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_ADC_ConfigChannel+0x114>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001958:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e7a9      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 800195e:	2002      	movs	r0, #2
 8001960:	e7aa      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001962:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <HAL_ADC_ConfigChannel+0x11c>)
 8001964:	e7f6      	b.n	8001954 <HAL_ADC_ConfigChannel+0xcc>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001966:	2280      	movs	r2, #128	; 0x80
 8001968:	0412      	lsls	r2, r2, #16
 800196a:	4313      	orrs	r3, r2
 800196c:	600b      	str	r3, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_ADC_ConfigChannel+0x120>)
 8001970:	490e      	ldr	r1, [pc, #56]	; (80019ac <HAL_ADC_ConfigChannel+0x124>)
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	f7fe fbc8 	bl	8000108 <__udivsi3>
 8001978:	0083      	lsls	r3, r0, #2
 800197a:	181b      	adds	r3, r3, r0
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001980:	9b01      	ldr	r3, [sp, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0cd      	beq.n	8001922 <HAL_ADC_ConfigChannel+0x9a>
            wait_loop_index--;
 8001986:	9b01      	ldr	r3, [sp, #4]
 8001988:	3b01      	subs	r3, #1
 800198a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800198c:	9b01      	ldr	r3, [sp, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f9      	bne.n	8001986 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001992:	2000      	movs	r0, #0
 8001994:	e78d      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x2a>
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	00001001 	.word	0x00001001
 800199c:	40012708 	.word	0x40012708
 80019a0:	feffffff 	.word	0xfeffffff
 80019a4:	ff7fffff 	.word	0xff7fffff
 80019a8:	20000004 	.word	0x20000004
 80019ac:	000f4240 	.word	0x000f4240

080019b0 <HAL_ADCEx_Calibration_Start>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019b0:	2334      	movs	r3, #52	; 0x34
{
 80019b2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80019b4:	5cc2      	ldrb	r2, [r0, r3]
{
 80019b6:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80019b8:	2a01      	cmp	r2, #1
 80019ba:	d04e      	beq.n	8001a5a <HAL_ADCEx_Calibration_Start+0xaa>
 80019bc:	2201      	movs	r2, #1
 80019be:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019c0:	6803      	ldr	r3, [r0, #0]
 80019c2:	3202      	adds	r2, #2
 80019c4:	6899      	ldr	r1, [r3, #8]
 80019c6:	400a      	ands	r2, r1
 80019c8:	2a01      	cmp	r2, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_ADCEx_Calibration_Start+0x28>
 80019cc:	6819      	ldr	r1, [r3, #0]
 80019ce:	420a      	tst	r2, r1
 80019d0:	d12e      	bne.n	8001a30 <HAL_ADCEx_Calibration_Start+0x80>
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	0412      	lsls	r2, r2, #16
 80019d6:	d42b      	bmi.n	8001a30 <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80019d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80019da:	4921      	ldr	r1, [pc, #132]	; (8001a60 <HAL_ADCEx_Calibration_Start+0xb0>)
 80019dc:	400a      	ands	r2, r1
 80019de:	3106      	adds	r1, #6
 80019e0:	31ff      	adds	r1, #255	; 0xff
 80019e2:	430a      	orrs	r2, r1
 80019e4:	63a2      	str	r2, [r4, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80019e6:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	3101      	adds	r1, #1
 80019ec:	438a      	bics	r2, r1
 80019ee:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	6899      	ldr	r1, [r3, #8]
 80019f4:	0612      	lsls	r2, r2, #24
 80019f6:	430a      	orrs	r2, r1
 80019f8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80019fa:	f7ff fcfb 	bl	80013f4 <HAL_GetTick>
 80019fe:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	2a00      	cmp	r2, #0
 8001a06:	da1c      	bge.n	8001a42 <HAL_ADCEx_Calibration_Start+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a08:	f7ff fcf4 	bl	80013f4 <HAL_GetTick>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a0c:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a0e:	1b40      	subs	r0, r0, r5
 8001a10:	2802      	cmp	r0, #2
 8001a12:	d9f6      	bls.n	8001a02 <HAL_ADCEx_Calibration_Start+0x52>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	2a00      	cmp	r2, #0
 8001a18:	daf3      	bge.n	8001a02 <HAL_ADCEx_Calibration_Start+0x52>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001a1a:	2212      	movs	r2, #18
 8001a1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);

          return HAL_ERROR;
 8001a1e:	2001      	movs	r0, #1
          ADC_STATE_CLR_SET(hadc->State,
 8001a20:	4393      	bics	r3, r2
 8001a22:	3a02      	subs	r2, #2
 8001a24:	4313      	orrs	r3, r2
 8001a26:	63a3      	str	r3, [r4, #56]	; 0x38
          __HAL_UNLOCK(hadc);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2334      	movs	r3, #52	; 0x34
 8001a2c:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8001a2e:	e007      	b.n	8001a40 <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a30:	2220      	movs	r2, #32
    
    tmp_hal_status = HAL_ERROR;
 8001a32:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a36:	4313      	orrs	r3, r2
 8001a38:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a3a:	2334      	movs	r3, #52	; 0x34
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8001a40:	bd70      	pop	{r4, r5, r6, pc}
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001a42:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001a44:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001a46:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001a48:	430e      	orrs	r6, r1
 8001a4a:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8001a4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a4e:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8001a50:	4393      	bics	r3, r2
 8001a52:	3a02      	subs	r2, #2
 8001a54:	4313      	orrs	r3, r2
 8001a56:	63a3      	str	r3, [r4, #56]	; 0x38
 8001a58:	e7ef      	b.n	8001a3a <HAL_ADCEx_Calibration_Start+0x8a>
  __HAL_LOCK(hadc);
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	e7f0      	b.n	8001a40 <HAL_ADCEx_Calibration_Start+0x90>
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	fffffefd 	.word	0xfffffefd

08001a64 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a64:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8001a66:	2800      	cmp	r0, #0
 8001a68:	db14      	blt.n	8001a94 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_NVIC_SetPriority+0x5c>)
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	469c      	mov	ip, r3
 8001a70:	23ff      	movs	r3, #255	; 0xff
 8001a72:	0884      	lsrs	r4, r0, #2
 8001a74:	4002      	ands	r2, r0
 8001a76:	0018      	movs	r0, r3
 8001a78:	26c0      	movs	r6, #192	; 0xc0
 8001a7a:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a7c:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a7e:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a80:	400b      	ands	r3, r1
 8001a82:	4093      	lsls	r3, r2
 8001a84:	00a4      	lsls	r4, r4, #2
 8001a86:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a88:	00b6      	lsls	r6, r6, #2
 8001a8a:	59a5      	ldr	r5, [r4, r6]
 8001a8c:	4385      	bics	r5, r0
 8001a8e:	432b      	orrs	r3, r5
 8001a90:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001a92:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a94:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <HAL_NVIC_SetPriority+0x60>)
 8001a96:	230f      	movs	r3, #15
 8001a98:	4694      	mov	ip, r2
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	4003      	ands	r3, r0
 8001a9e:	4010      	ands	r0, r2
 8001aa0:	32fc      	adds	r2, #252	; 0xfc
 8001aa2:	0015      	movs	r5, r2
 8001aa4:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001aa6:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aa8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001aaa:	400a      	ands	r2, r1
 8001aac:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aae:	3b08      	subs	r3, #8
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4463      	add	r3, ip
 8001ab6:	69dc      	ldr	r4, [r3, #28]
 8001ab8:	43ac      	bics	r4, r5
 8001aba:	4322      	orrs	r2, r4
 8001abc:	61da      	str	r2, [r3, #28]
 8001abe:	e7e8      	b.n	8001a92 <HAL_NVIC_SetPriority+0x2e>
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	db05      	blt.n	8001ad8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001acc:	221f      	movs	r2, #31
 8001ace:	2301      	movs	r3, #1
 8001ad0:	4002      	ands	r2, r0
 8001ad2:	4093      	lsls	r3, r2
 8001ad4:	4a01      	ldr	r2, [pc, #4]	; (8001adc <HAL_NVIC_EnableIRQ+0x14>)
 8001ad6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ad8:	4770      	bx	lr
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	e000e100 	.word	0xe000e100

08001ae0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae0:	2280      	movs	r2, #128	; 0x80
 8001ae2:	1e43      	subs	r3, r0, #1
 8001ae4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d20e      	bcs.n	8001b0a <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aec:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aee:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af0:	4807      	ldr	r0, [pc, #28]	; (8001b10 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af4:	6a03      	ldr	r3, [r0, #32]
 8001af6:	0609      	lsls	r1, r1, #24
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	430b      	orrs	r3, r1
 8001afe:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b00:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b02:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	3307      	adds	r3, #7
 8001b08:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001b0a:	4770      	bx	lr
 8001b0c:	e000e010 	.word	0xe000e010
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b14:	b570      	push	{r4, r5, r6, lr}
 8001b16:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001b18:	d027      	beq.n	8001b6a <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b1a:	2521      	movs	r5, #33	; 0x21
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b20:	6800      	ldr	r0, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8001b24:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b26:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b28:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8001b2a:	6863      	ldr	r3, [r4, #4]
 8001b2c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b2e:	68e1      	ldr	r1, [r4, #12]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	6921      	ldr	r1, [r4, #16]
 8001b34:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b36:	6961      	ldr	r1, [r4, #20]
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	69a1      	ldr	r1, [r4, #24]
 8001b3c:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b3e:	69e1      	ldr	r1, [r4, #28]
 8001b40:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8001b42:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b44:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_DMA_Init+0x60>)
 8001b48:	2114      	movs	r1, #20
 8001b4a:	469c      	mov	ip, r3
 8001b4c:	4460      	add	r0, ip
 8001b4e:	f7fe fadb 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8001b54:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8001b56:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b58:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b5a:	0080      	lsls	r0, r0, #2
 8001b5c:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8001b5e:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b60:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001b62:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8001b64:	321f      	adds	r2, #31
 8001b66:	54a3      	strb	r3, [r4, r2]
}
 8001b68:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	e7fc      	b.n	8001b68 <HAL_DMA_Init+0x54>
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	ffffc00f 	.word	0xffffc00f
 8001b74:	bffdfff8 	.word	0xbffdfff8
 8001b78:	40020000 	.word	0x40020000

08001b7c <HAL_DMA_Start_IT>:
{
 8001b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001b7e:	2420      	movs	r4, #32
 8001b80:	5d05      	ldrb	r5, [r0, r4]
 8001b82:	2d01      	cmp	r5, #1
 8001b84:	d037      	beq.n	8001bf6 <HAL_DMA_Start_IT+0x7a>
 8001b86:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8001b88:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 8001b8a:	5505      	strb	r5, [r0, r4]
  if (HAL_DMA_STATE_READY == hdma->State)
 8001b8c:	5dc5      	ldrb	r5, [r0, r7]
 8001b8e:	b2ee      	uxtb	r6, r5
 8001b90:	2d01      	cmp	r5, #1
 8001b92:	d003      	beq.n	8001b9c <HAL_DMA_Start_IT+0x20>
    __HAL_UNLOCK(hdma);
 8001b94:	2300      	movs	r3, #0
 8001b96:	5503      	strb	r3, [r0, r4]
    status = HAL_BUSY;
 8001b98:	2002      	movs	r0, #2
}
 8001b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b9c:	3c1e      	subs	r4, #30
 8001b9e:	55c4      	strb	r4, [r0, r7]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	6384      	str	r4, [r0, #56]	; 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ba4:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ba6:	6c07      	ldr	r7, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ba8:	6825      	ldr	r5, [r4, #0]
 8001baa:	43b5      	bics	r5, r6
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bac:	40be      	lsls	r6, r7
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bae:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bb0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001bb2:	606e      	str	r6, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 8001bb4:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bb6:	6843      	ldr	r3, [r0, #4]
 8001bb8:	2b10      	cmp	r3, #16
 8001bba:	d00e      	beq.n	8001bda <HAL_DMA_Start_IT+0x5e>
    if (NULL != hdma->XferHalfCpltCallback)
 8001bbc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = SrcAddress;
 8001bbe:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bc0:	60e2      	str	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00e      	beq.n	8001be4 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bc6:	220e      	movs	r2, #14
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001bce:	2201      	movs	r2, #1
 8001bd0:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd2:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	6023      	str	r3, [r4, #0]
 8001bd8:	e7df      	b.n	8001b9a <HAL_DMA_Start_IT+0x1e>
    if (NULL != hdma->XferHalfCpltCallback)
 8001bda:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8001bdc:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001bde:	60e1      	str	r1, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f0      	bne.n	8001bc6 <HAL_DMA_Start_IT+0x4a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001be4:	220a      	movs	r2, #10
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	3a06      	subs	r2, #6
 8001bf0:	4393      	bics	r3, r2
 8001bf2:	6023      	str	r3, [r4, #0]
 8001bf4:	e7eb      	b.n	8001bce <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8001bf6:	2002      	movs	r0, #2
 8001bf8:	e7cf      	b.n	8001b9a <HAL_DMA_Start_IT+0x1e>
 8001bfa:	46c0      	nop			; (mov r8, r8)

08001bfc <HAL_DMA_Abort>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001bfc:	2221      	movs	r2, #33	; 0x21
{
 8001bfe:	b530      	push	{r4, r5, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c00:	5c81      	ldrb	r1, [r0, r2]
{
 8001c02:	0003      	movs	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c04:	2902      	cmp	r1, #2
 8001c06:	d006      	beq.n	8001c16 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c08:	3a1d      	subs	r2, #29
 8001c0a:	6382      	str	r2, [r0, #56]	; 0x38
    return HAL_ERROR;
 8001c0c:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001c0e:	2220      	movs	r2, #32
 8001c10:	2100      	movs	r1, #0
 8001c12:	5499      	strb	r1, [r3, r2]
}
 8001c14:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c16:	240e      	movs	r4, #14
 8001c18:	6801      	ldr	r1, [r0, #0]
 8001c1a:	6808      	ldr	r0, [r1, #0]
 8001c1c:	43a0      	bics	r0, r4
 8001c1e:	6008      	str	r0, [r1, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c20:	2001      	movs	r0, #1
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c22:	0005      	movs	r5, r0
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c24:	680c      	ldr	r4, [r1, #0]
 8001c26:	4384      	bics	r4, r0
 8001c28:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c2a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001c2c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001c2e:	40a5      	lsls	r5, r4
 8001c30:	604d      	str	r5, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8001c32:	5498      	strb	r0, [r3, r2]
  return HAL_OK;
 8001c34:	2000      	movs	r0, #0
 8001c36:	e7ea      	b.n	8001c0e <HAL_DMA_Abort+0x12>

08001c38 <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c38:	2321      	movs	r3, #33	; 0x21
{
 8001c3a:	b570      	push	{r4, r5, r6, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c3c:	5cc2      	ldrb	r2, [r0, r3]
 8001c3e:	2a02      	cmp	r2, #2
 8001c40:	d003      	beq.n	8001c4a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c42:	3b1d      	subs	r3, #29
 8001c44:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001c46:	2001      	movs	r0, #1
}
 8001c48:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c4a:	240e      	movs	r4, #14
 8001c4c:	6802      	ldr	r2, [r0, #0]
 8001c4e:	6811      	ldr	r1, [r2, #0]
 8001c50:	43a1      	bics	r1, r4
 8001c52:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c54:	2101      	movs	r1, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c56:	000d      	movs	r5, r1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c58:	6814      	ldr	r4, [r2, #0]
 8001c5a:	438c      	bics	r4, r1
 8001c5c:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c5e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001c60:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001c62:	40a5      	lsls	r5, r4
 8001c64:	6055      	str	r5, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001c66:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2320      	movs	r3, #32
 8001c6c:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8001c6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 8001c74:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001c76:	2000      	movs	r0, #0
 8001c78:	e7e6      	b.n	8001c48 <HAL_DMA_Abort_IT+0x10>
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	e7e4      	b.n	8001c48 <HAL_DMA_Abort_IT+0x10>
 8001c7e:	46c0      	nop			; (mov r8, r8)

08001c80 <HAL_DMA_IRQHandler>:
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c80:	2104      	movs	r1, #4
{
 8001c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c84:	000c      	movs	r4, r1
 8001c86:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c88:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c8a:	409c      	lsls	r4, r3
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c8c:	683a      	ldr	r2, [r7, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001c8e:	6806      	ldr	r6, [r0, #0]
 8001c90:	6835      	ldr	r5, [r6, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c92:	4222      	tst	r2, r4
 8001c94:	d00d      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x32>
 8001c96:	4229      	tst	r1, r5
 8001c98:	d00b      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c9a:	6833      	ldr	r3, [r6, #0]
 8001c9c:	069b      	lsls	r3, r3, #26
 8001c9e:	d402      	bmi.n	8001ca6 <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ca0:	6833      	ldr	r3, [r6, #0]
 8001ca2:	438b      	bics	r3, r1
 8001ca4:	6033      	str	r3, [r6, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8001ca6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001ca8:	607c      	str	r4, [r7, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d000      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 8001cae:	4798      	blx	r3
}
 8001cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	000c      	movs	r4, r1
 8001cb6:	409c      	lsls	r4, r3
 8001cb8:	4222      	tst	r2, r4
 8001cba:	d014      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x66>
 8001cbc:	4229      	tst	r1, r5
 8001cbe:	d012      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x66>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cc0:	6833      	ldr	r3, [r6, #0]
 8001cc2:	069b      	lsls	r3, r3, #26
 8001cc4:	d406      	bmi.n	8001cd4 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001cc6:	220a      	movs	r2, #10
 8001cc8:	6833      	ldr	r3, [r6, #0]
 8001cca:	4393      	bics	r3, r2
 8001ccc:	6033      	str	r3, [r6, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001cce:	2321      	movs	r3, #33	; 0x21
 8001cd0:	3a09      	subs	r2, #9
 8001cd2:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001cd8:	607c      	str	r4, [r7, #4]
    __HAL_UNLOCK(hdma);
 8001cda:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 8001cdc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0e6      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 8001ce2:	4798      	blx	r3
 8001ce4:	e7e4      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x30>
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ce6:	2108      	movs	r1, #8
 8001ce8:	000c      	movs	r4, r1
 8001cea:	409c      	lsls	r4, r3
 8001cec:	4222      	tst	r2, r4
 8001cee:	d0df      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x30>
 8001cf0:	4229      	tst	r1, r5
 8001cf2:	d0dd      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cf4:	6832      	ldr	r2, [r6, #0]
 8001cf6:	3106      	adds	r1, #6
 8001cf8:	438a      	bics	r2, r1
 8001cfa:	6032      	str	r2, [r6, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	0011      	movs	r1, r2
 8001d00:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;
 8001d02:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d04:	6079      	str	r1, [r7, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d06:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001d08:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8001d10:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0cc      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 8001d16:	4798      	blx	r3
 8001d18:	e7ca      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x30>
 8001d1a:	46c0      	nop			; (mov r8, r8)

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1e:	46de      	mov	lr, fp
 8001d20:	4657      	mov	r7, sl
 8001d22:	464e      	mov	r6, r9
 8001d24:	4645      	mov	r5, r8
 8001d26:	b5e0      	push	{r5, r6, r7, lr}
 8001d28:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2a:	6809      	ldr	r1, [r1, #0]
 8001d2c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001d2e:	2300      	movs	r3, #0
{
 8001d30:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d32:	2900      	cmp	r1, #0
 8001d34:	d100      	bne.n	8001d38 <HAL_GPIO_Init+0x1c>
 8001d36:	e0d0      	b.n	8001eda <HAL_GPIO_Init+0x1be>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d38:	4c72      	ldr	r4, [pc, #456]	; (8001f04 <HAL_GPIO_Init+0x1e8>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d3a:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3c:	46a3      	mov	fp, r4
 8001d3e:	e064      	b.n	8001e0a <HAL_GPIO_Init+0xee>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d40:	4665      	mov	r5, ip
 8001d42:	2d03      	cmp	r5, #3
 8001d44:	d000      	beq.n	8001d48 <HAL_GPIO_Init+0x2c>
 8001d46:	e0b6      	b.n	8001eb6 <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d48:	4666      	mov	r6, ip
 8001d4a:	4096      	lsls	r6, r2
 8001d4c:	43f5      	mvns	r5, r6
 8001d4e:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 8001d50:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d52:	9d02      	ldr	r5, [sp, #8]
 8001d54:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d56:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d58:	25c0      	movs	r5, #192	; 0xc0
 8001d5a:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 8001d5c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d5e:	422c      	tst	r4, r5
 8001d60:	d04d      	beq.n	8001dfe <HAL_GPIO_Init+0xe2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	465d      	mov	r5, fp
 8001d64:	2601      	movs	r6, #1
 8001d66:	465f      	mov	r7, fp
 8001d68:	69ad      	ldr	r5, [r5, #24]
 8001d6a:	4335      	orrs	r5, r6
 8001d6c:	61bd      	str	r5, [r7, #24]
 8001d6e:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d70:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	4035      	ands	r5, r6
 8001d74:	4e64      	ldr	r6, [pc, #400]	; (8001f08 <HAL_GPIO_Init+0x1ec>)
 8001d76:	9505      	str	r5, [sp, #20]
 8001d78:	46b4      	mov	ip, r6
 8001d7a:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d7c:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d7e:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d80:	00bf      	lsls	r7, r7, #2
 8001d82:	00ad      	lsls	r5, r5, #2
 8001d84:	4465      	add	r5, ip
 8001d86:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d88:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d8a:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d8c:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d8e:	4666      	mov	r6, ip
 8001d90:	40b7      	lsls	r7, r6
 8001d92:	003e      	movs	r6, r7
 8001d94:	464f      	mov	r7, r9
 8001d96:	43b7      	bics	r7, r6
 8001d98:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d9a:	2790      	movs	r7, #144	; 0x90
 8001d9c:	05ff      	lsls	r7, r7, #23
 8001d9e:	42b8      	cmp	r0, r7
 8001da0:	d00e      	beq.n	8001dc0 <HAL_GPIO_Init+0xa4>
 8001da2:	4f5a      	ldr	r7, [pc, #360]	; (8001f0c <HAL_GPIO_Init+0x1f0>)
 8001da4:	42b8      	cmp	r0, r7
 8001da6:	d100      	bne.n	8001daa <HAL_GPIO_Init+0x8e>
 8001da8:	e09e      	b.n	8001ee8 <HAL_GPIO_Init+0x1cc>
 8001daa:	4f59      	ldr	r7, [pc, #356]	; (8001f10 <HAL_GPIO_Init+0x1f4>)
 8001dac:	42b8      	cmp	r0, r7
 8001dae:	d100      	bne.n	8001db2 <HAL_GPIO_Init+0x96>
 8001db0:	e0a1      	b.n	8001ef6 <HAL_GPIO_Init+0x1da>
 8001db2:	4666      	mov	r6, ip
 8001db4:	2705      	movs	r7, #5
 8001db6:	40b7      	lsls	r7, r6
 8001db8:	003e      	movs	r6, r7
 8001dba:	464f      	mov	r7, r9
 8001dbc:	4337      	orrs	r7, r6
 8001dbe:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dc0:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dc2:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dc4:	60ae      	str	r6, [r5, #8]
        temp = EXTI->RTSR;
 8001dc6:	4d53      	ldr	r5, [pc, #332]	; (8001f14 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8001dc8:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dca:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8001dcc:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 8001dce:	68ad      	ldr	r5, [r5, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dd0:	423c      	tst	r4, r7
 8001dd2:	d17f      	bne.n	8001ed4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(iocurrent);
 8001dd4:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001dd6:	4f4f      	ldr	r7, [pc, #316]	; (8001f14 <HAL_GPIO_Init+0x1f8>)
 8001dd8:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 8001dda:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ddc:	02a7      	lsls	r7, r4, #10
 8001dde:	d476      	bmi.n	8001ece <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 8001de0:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001de2:	4f4c      	ldr	r7, [pc, #304]	; (8001f14 <HAL_GPIO_Init+0x1f8>)
 8001de4:	60fd      	str	r5, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001de6:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001de8:	03a7      	lsls	r7, r4, #14
 8001dea:	d46d      	bmi.n	8001ec8 <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 8001dec:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001dee:	4f49      	ldr	r7, [pc, #292]	; (8001f14 <HAL_GPIO_Init+0x1f8>)
 8001df0:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
 8001df2:	683d      	ldr	r5, [r7, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001df4:	03e4      	lsls	r4, r4, #15
 8001df6:	d463      	bmi.n	8001ec0 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 8001df8:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001dfa:	4c46      	ldr	r4, [pc, #280]	; (8001f14 <HAL_GPIO_Init+0x1f8>)
 8001dfc:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfe:	000c      	movs	r4, r1
      }
    }

    position++;
 8001e00:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e02:	40dc      	lsrs	r4, r3
 8001e04:	3202      	adds	r2, #2
 8001e06:	2c00      	cmp	r4, #0
 8001e08:	d067      	beq.n	8001eda <HAL_GPIO_Init+0x1be>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e0a:	2601      	movs	r6, #1
 8001e0c:	000c      	movs	r4, r1
 8001e0e:	409e      	lsls	r6, r3
 8001e10:	4034      	ands	r4, r6
 8001e12:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8001e14:	4231      	tst	r1, r6
 8001e16:	d0f2      	beq.n	8001dfe <HAL_GPIO_Init+0xe2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e18:	4654      	mov	r4, sl
 8001e1a:	2503      	movs	r5, #3
 8001e1c:	6864      	ldr	r4, [r4, #4]
 8001e1e:	4025      	ands	r5, r4
 8001e20:	46ac      	mov	ip, r5
 8001e22:	3d01      	subs	r5, #1
 8001e24:	2d01      	cmp	r5, #1
 8001e26:	d88b      	bhi.n	8001d40 <HAL_GPIO_Init+0x24>
        temp = GPIOx->OSPEEDR;
 8001e28:	6885      	ldr	r5, [r0, #8]
 8001e2a:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e2c:	2503      	movs	r5, #3
 8001e2e:	4095      	lsls	r5, r2
 8001e30:	46a8      	mov	r8, r5
 8001e32:	43ed      	mvns	r5, r5
 8001e34:	464f      	mov	r7, r9
 8001e36:	9502      	str	r5, [sp, #8]
 8001e38:	4645      	mov	r5, r8
 8001e3a:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e3c:	4655      	mov	r5, sl
 8001e3e:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e40:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e42:	002f      	movs	r7, r5
 8001e44:	4097      	lsls	r7, r2
 8001e46:	46b8      	mov	r8, r7
 8001e48:	464f      	mov	r7, r9
 8001e4a:	4645      	mov	r5, r8
 8001e4c:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8001e4e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e50:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e52:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e54:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e56:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e58:	0926      	lsrs	r6, r4, #4
 8001e5a:	402e      	ands	r6, r5
 8001e5c:	409e      	lsls	r6, r3
 8001e5e:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8001e60:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8001e62:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e64:	9d02      	ldr	r5, [sp, #8]
 8001e66:	402e      	ands	r6, r5
 8001e68:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e6a:	4656      	mov	r6, sl
 8001e6c:	68b6      	ldr	r6, [r6, #8]
 8001e6e:	4647      	mov	r7, r8
 8001e70:	4096      	lsls	r6, r2
 8001e72:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8001e74:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e76:	4667      	mov	r7, ip
 8001e78:	4666      	mov	r6, ip
 8001e7a:	4096      	lsls	r6, r2
 8001e7c:	2f02      	cmp	r7, #2
 8001e7e:	d000      	beq.n	8001e82 <HAL_GPIO_Init+0x166>
 8001e80:	e766      	b.n	8001d50 <HAL_GPIO_Init+0x34>
        temp = GPIOx->AFR[position >> 3u];
 8001e82:	08dd      	lsrs	r5, r3, #3
 8001e84:	00ad      	lsls	r5, r5, #2
 8001e86:	46ac      	mov	ip, r5
 8001e88:	4484      	add	ip, r0
 8001e8a:	4665      	mov	r5, ip
 8001e8c:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e8e:	2507      	movs	r5, #7
 8001e90:	401d      	ands	r5, r3
 8001e92:	00ad      	lsls	r5, r5, #2
 8001e94:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 8001e96:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e98:	250f      	movs	r5, #15
 8001e9a:	4647      	mov	r7, r8
 8001e9c:	40bd      	lsls	r5, r7
 8001e9e:	9f03      	ldr	r7, [sp, #12]
 8001ea0:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ea2:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ea4:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ea6:	4647      	mov	r7, r8
 8001ea8:	692d      	ldr	r5, [r5, #16]
 8001eaa:	40bd      	lsls	r5, r7
 8001eac:	9f03      	ldr	r7, [sp, #12]
 8001eae:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8001eb0:	4665      	mov	r5, ip
 8001eb2:	622f      	str	r7, [r5, #32]
 8001eb4:	e74c      	b.n	8001d50 <HAL_GPIO_Init+0x34>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001eb6:	2503      	movs	r5, #3
 8001eb8:	4095      	lsls	r5, r2
 8001eba:	43ed      	mvns	r5, r5
 8001ebc:	9502      	str	r5, [sp, #8]
 8001ebe:	e7d0      	b.n	8001e62 <HAL_GPIO_Init+0x146>
          temp |= iocurrent;
 8001ec0:	9c01      	ldr	r4, [sp, #4]
 8001ec2:	432c      	orrs	r4, r5
 8001ec4:	0025      	movs	r5, r4
 8001ec6:	e798      	b.n	8001dfa <HAL_GPIO_Init+0xde>
          temp |= iocurrent;
 8001ec8:	9f01      	ldr	r7, [sp, #4]
 8001eca:	433d      	orrs	r5, r7
 8001ecc:	e78f      	b.n	8001dee <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 8001ece:	9f01      	ldr	r7, [sp, #4]
 8001ed0:	433d      	orrs	r5, r7
 8001ed2:	e786      	b.n	8001de2 <HAL_GPIO_Init+0xc6>
          temp |= iocurrent;
 8001ed4:	9f01      	ldr	r7, [sp, #4]
 8001ed6:	433d      	orrs	r5, r7
 8001ed8:	e77d      	b.n	8001dd6 <HAL_GPIO_Init+0xba>
  } 
}
 8001eda:	b007      	add	sp, #28
 8001edc:	bcf0      	pop	{r4, r5, r6, r7}
 8001ede:	46bb      	mov	fp, r7
 8001ee0:	46b2      	mov	sl, r6
 8001ee2:	46a9      	mov	r9, r5
 8001ee4:	46a0      	mov	r8, r4
 8001ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ee8:	4667      	mov	r7, ip
 8001eea:	2601      	movs	r6, #1
 8001eec:	40be      	lsls	r6, r7
 8001eee:	464f      	mov	r7, r9
 8001ef0:	4337      	orrs	r7, r6
 8001ef2:	46b9      	mov	r9, r7
 8001ef4:	e764      	b.n	8001dc0 <HAL_GPIO_Init+0xa4>
 8001ef6:	4667      	mov	r7, ip
 8001ef8:	2602      	movs	r6, #2
 8001efa:	40be      	lsls	r6, r7
 8001efc:	464f      	mov	r7, r9
 8001efe:	4337      	orrs	r7, r6
 8001f00:	46b9      	mov	r9, r7
 8001f02:	e75d      	b.n	8001dc0 <HAL_GPIO_Init+0xa4>
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40010000 	.word	0x40010000
 8001f0c:	48000400 	.word	0x48000400
 8001f10:	48000800 	.word	0x48000800
 8001f14:	40010400 	.word	0x40010400

08001f18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f18:	2a00      	cmp	r2, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f1c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f1e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f20:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001f22:	e7fc      	b.n	8001f1e <HAL_GPIO_WritePin+0x6>

08001f24 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f24:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f26:	0013      	movs	r3, r2
 8001f28:	400b      	ands	r3, r1
 8001f2a:	041b      	lsls	r3, r3, #16
 8001f2c:	4391      	bics	r1, r2
 8001f2e:	430b      	orrs	r3, r1
 8001f30:	6183      	str	r3, [r0, #24]
}
 8001f32:	4770      	bx	lr

08001f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f36:	46ce      	mov	lr, r9
 8001f38:	4647      	mov	r7, r8
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	0004      	movs	r4, r0
 8001f3e:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f40:	2800      	cmp	r0, #0
 8001f42:	d100      	bne.n	8001f46 <HAL_RCC_OscConfig+0x12>
 8001f44:	e0ee      	b.n	8002124 <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f46:	6803      	ldr	r3, [r0, #0]
 8001f48:	07da      	lsls	r2, r3, #31
 8001f4a:	d535      	bpl.n	8001fb8 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f4c:	210c      	movs	r1, #12
 8001f4e:	48c3      	ldr	r0, [pc, #780]	; (800225c <HAL_RCC_OscConfig+0x328>)
 8001f50:	6842      	ldr	r2, [r0, #4]
 8001f52:	400a      	ands	r2, r1
 8001f54:	2a04      	cmp	r2, #4
 8001f56:	d100      	bne.n	8001f5a <HAL_RCC_OscConfig+0x26>
 8001f58:	e101      	b.n	800215e <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f5a:	6842      	ldr	r2, [r0, #4]
 8001f5c:	4011      	ands	r1, r2
 8001f5e:	2908      	cmp	r1, #8
 8001f60:	d100      	bne.n	8001f64 <HAL_RCC_OscConfig+0x30>
 8001f62:	e0f8      	b.n	8002156 <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f64:	6863      	ldr	r3, [r4, #4]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d00f      	beq.n	8001f8a <HAL_RCC_OscConfig+0x56>
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d100      	bne.n	8001f70 <HAL_RCC_OscConfig+0x3c>
 8001f6e:	e11e      	b.n	80021ae <HAL_RCC_OscConfig+0x27a>
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d100      	bne.n	8001f76 <HAL_RCC_OscConfig+0x42>
 8001f74:	e1a7      	b.n	80022c6 <HAL_RCC_OscConfig+0x392>
 8001f76:	4bb9      	ldr	r3, [pc, #740]	; (800225c <HAL_RCC_OscConfig+0x328>)
 8001f78:	49b9      	ldr	r1, [pc, #740]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	49b8      	ldr	r1, [pc, #736]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	e005      	b.n	8001f96 <HAL_RCC_OscConfig+0x62>
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	4ab3      	ldr	r2, [pc, #716]	; (800225c <HAL_RCC_OscConfig+0x328>)
 8001f8e:	025b      	lsls	r3, r3, #9
 8001f90:	6811      	ldr	r1, [r2, #0]
 8001f92:	430b      	orrs	r3, r1
 8001f94:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7ff fa2d 	bl	80013f4 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001f9c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4faf      	ldr	r7, [pc, #700]	; (800225c <HAL_RCC_OscConfig+0x328>)
 8001fa0:	02b6      	lsls	r6, r6, #10
 8001fa2:	e005      	b.n	8001fb0 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff fa26 	bl	80013f4 <HAL_GetTick>
 8001fa8:	1b40      	subs	r0, r0, r5
 8001faa:	2864      	cmp	r0, #100	; 0x64
 8001fac:	d900      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x7c>
 8001fae:	e0fc      	b.n	80021aa <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4233      	tst	r3, r6
 8001fb4:	d0f6      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	079a      	lsls	r2, r3, #30
 8001fba:	d529      	bpl.n	8002010 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fbc:	220c      	movs	r2, #12
 8001fbe:	49a7      	ldr	r1, [pc, #668]	; (800225c <HAL_RCC_OscConfig+0x328>)
 8001fc0:	6848      	ldr	r0, [r1, #4]
 8001fc2:	4202      	tst	r2, r0
 8001fc4:	d100      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x94>
 8001fc6:	e0a6      	b.n	8002116 <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fc8:	6848      	ldr	r0, [r1, #4]
 8001fca:	4002      	ands	r2, r0
 8001fcc:	2a08      	cmp	r2, #8
 8001fce:	d100      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x9e>
 8001fd0:	e09d      	b.n	800210e <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fd2:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd4:	4da1      	ldr	r5, [pc, #644]	; (800225c <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d100      	bne.n	8001fdc <HAL_RCC_OscConfig+0xa8>
 8001fda:	e11f      	b.n	800221c <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8001fdc:	2201      	movs	r2, #1
 8001fde:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001fe6:	f7ff fa05 	bl	80013f4 <HAL_GetTick>
 8001fea:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	e005      	b.n	8001ffa <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fee:	f7ff fa01 	bl	80013f4 <HAL_GetTick>
 8001ff2:	1b80      	subs	r0, r0, r6
 8001ff4:	2802      	cmp	r0, #2
 8001ff6:	d900      	bls.n	8001ffa <HAL_RCC_OscConfig+0xc6>
 8001ff8:	e0d7      	b.n	80021aa <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffa:	682b      	ldr	r3, [r5, #0]
 8001ffc:	421f      	tst	r7, r3
 8001ffe:	d0f6      	beq.n	8001fee <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002000:	21f8      	movs	r1, #248	; 0xf8
 8002002:	682a      	ldr	r2, [r5, #0]
 8002004:	6923      	ldr	r3, [r4, #16]
 8002006:	438a      	bics	r2, r1
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4313      	orrs	r3, r2
 800200c:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	071a      	lsls	r2, r3, #28
 8002012:	d42d      	bmi.n	8002070 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002014:	075a      	lsls	r2, r3, #29
 8002016:	d544      	bpl.n	80020a2 <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002018:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800201a:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201c:	4b8f      	ldr	r3, [pc, #572]	; (800225c <HAL_RCC_OscConfig+0x328>)
 800201e:	0552      	lsls	r2, r2, #21
 8002020:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002022:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002024:	4211      	tst	r1, r2
 8002026:	d108      	bne.n	800203a <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002028:	69d9      	ldr	r1, [r3, #28]
 800202a:	4311      	orrs	r1, r2
 800202c:	61d9      	str	r1, [r3, #28]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	4013      	ands	r3, r2
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002036:	2301      	movs	r3, #1
 8002038:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	2780      	movs	r7, #128	; 0x80
 800203c:	4e8a      	ldr	r6, [pc, #552]	; (8002268 <HAL_RCC_OscConfig+0x334>)
 800203e:	007f      	lsls	r7, r7, #1
 8002040:	6833      	ldr	r3, [r6, #0]
 8002042:	423b      	tst	r3, r7
 8002044:	d100      	bne.n	8002048 <HAL_RCC_OscConfig+0x114>
 8002046:	e094      	b.n	8002172 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002048:	68a3      	ldr	r3, [r4, #8]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d100      	bne.n	8002050 <HAL_RCC_OscConfig+0x11c>
 800204e:	e0f8      	b.n	8002242 <HAL_RCC_OscConfig+0x30e>
 8002050:	2b00      	cmp	r3, #0
 8002052:	d100      	bne.n	8002056 <HAL_RCC_OscConfig+0x122>
 8002054:	e0c4      	b.n	80021e0 <HAL_RCC_OscConfig+0x2ac>
 8002056:	2b05      	cmp	r3, #5
 8002058:	d100      	bne.n	800205c <HAL_RCC_OscConfig+0x128>
 800205a:	e140      	b.n	80022de <HAL_RCC_OscConfig+0x3aa>
 800205c:	2101      	movs	r1, #1
 800205e:	4b7f      	ldr	r3, [pc, #508]	; (800225c <HAL_RCC_OscConfig+0x328>)
 8002060:	6a1a      	ldr	r2, [r3, #32]
 8002062:	438a      	bics	r2, r1
 8002064:	621a      	str	r2, [r3, #32]
 8002066:	6a1a      	ldr	r2, [r3, #32]
 8002068:	3103      	adds	r1, #3
 800206a:	438a      	bics	r2, r1
 800206c:	621a      	str	r2, [r3, #32]
 800206e:	e0ec      	b.n	800224a <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002070:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8002072:	4d7a      	ldr	r5, [pc, #488]	; (800225c <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002074:	2b00      	cmp	r3, #0
 8002076:	d05b      	beq.n	8002130 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8002078:	2201      	movs	r2, #1
 800207a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 800207e:	4313      	orrs	r3, r2
 8002080:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002082:	f7ff f9b7 	bl	80013f4 <HAL_GetTick>
 8002086:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002088:	e005      	b.n	8002096 <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800208a:	f7ff f9b3 	bl	80013f4 <HAL_GetTick>
 800208e:	1b80      	subs	r0, r0, r6
 8002090:	2802      	cmp	r0, #2
 8002092:	d900      	bls.n	8002096 <HAL_RCC_OscConfig+0x162>
 8002094:	e089      	b.n	80021aa <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002098:	421f      	tst	r7, r3
 800209a:	d0f6      	beq.n	800208a <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209c:	6823      	ldr	r3, [r4, #0]
 800209e:	075a      	lsls	r2, r3, #29
 80020a0:	d4ba      	bmi.n	8002018 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80020a2:	06db      	lsls	r3, r3, #27
 80020a4:	d512      	bpl.n	80020cc <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80020a6:	6963      	ldr	r3, [r4, #20]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d100      	bne.n	80020ae <HAL_RCC_OscConfig+0x17a>
 80020ac:	e13d      	b.n	800232a <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80020ae:	3305      	adds	r3, #5
 80020b0:	d000      	beq.n	80020b4 <HAL_RCC_OscConfig+0x180>
 80020b2:	e0e9      	b.n	8002288 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020b4:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020b6:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80020b8:	4a68      	ldr	r2, [pc, #416]	; (800225c <HAL_RCC_OscConfig+0x328>)
 80020ba:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80020bc:	438b      	bics	r3, r1
 80020be:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020c0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80020c2:	69a3      	ldr	r3, [r4, #24]
 80020c4:	4381      	bics	r1, r0
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	430b      	orrs	r3, r1
 80020ca:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020cc:	6a23      	ldr	r3, [r4, #32]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d01b      	beq.n	800210a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d2:	220c      	movs	r2, #12
 80020d4:	4d61      	ldr	r5, [pc, #388]	; (800225c <HAL_RCC_OscConfig+0x328>)
 80020d6:	6869      	ldr	r1, [r5, #4]
 80020d8:	400a      	ands	r2, r1
 80020da:	2a08      	cmp	r2, #8
 80020dc:	d100      	bne.n	80020e0 <HAL_RCC_OscConfig+0x1ac>
 80020de:	e108      	b.n	80022f2 <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d100      	bne.n	80020e6 <HAL_RCC_OscConfig+0x1b2>
 80020e4:	e13f      	b.n	8002366 <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e6:	682b      	ldr	r3, [r5, #0]
 80020e8:	4a60      	ldr	r2, [pc, #384]	; (800226c <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ea:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80020ec:	4013      	ands	r3, r2
 80020ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80020f0:	f7ff f980 	bl	80013f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f4:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80020f6:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f8:	e004      	b.n	8002104 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fa:	f7ff f97b 	bl	80013f4 <HAL_GetTick>
 80020fe:	1b00      	subs	r0, r0, r4
 8002100:	2802      	cmp	r0, #2
 8002102:	d852      	bhi.n	80021aa <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002104:	682b      	ldr	r3, [r5, #0]
 8002106:	4233      	tst	r3, r6
 8002108:	d1f7      	bne.n	80020fa <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 800210a:	2000      	movs	r0, #0
 800210c:	e00b      	b.n	8002126 <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800210e:	684a      	ldr	r2, [r1, #4]
 8002110:	03d2      	lsls	r2, r2, #15
 8002112:	d500      	bpl.n	8002116 <HAL_RCC_OscConfig+0x1e2>
 8002114:	e75d      	b.n	8001fd2 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002116:	4a51      	ldr	r2, [pc, #324]	; (800225c <HAL_RCC_OscConfig+0x328>)
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	0792      	lsls	r2, r2, #30
 800211c:	d539      	bpl.n	8002192 <HAL_RCC_OscConfig+0x25e>
 800211e:	68e2      	ldr	r2, [r4, #12]
 8002120:	2a01      	cmp	r2, #1
 8002122:	d036      	beq.n	8002192 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8002124:	2001      	movs	r0, #1
}
 8002126:	b003      	add	sp, #12
 8002128:	bcc0      	pop	{r6, r7}
 800212a:	46b9      	mov	r9, r7
 800212c:	46b0      	mov	r8, r6
 800212e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8002130:	2201      	movs	r2, #1
 8002132:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002134:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8002136:	4393      	bics	r3, r2
 8002138:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800213a:	f7ff f95b 	bl	80013f4 <HAL_GetTick>
 800213e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002140:	e004      	b.n	800214c <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002142:	f7ff f957 	bl	80013f4 <HAL_GetTick>
 8002146:	1b80      	subs	r0, r0, r6
 8002148:	2802      	cmp	r0, #2
 800214a:	d82e      	bhi.n	80021aa <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800214e:	421f      	tst	r7, r3
 8002150:	d1f7      	bne.n	8002142 <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	e7a3      	b.n	800209e <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002156:	6842      	ldr	r2, [r0, #4]
 8002158:	03d2      	lsls	r2, r2, #15
 800215a:	d400      	bmi.n	800215e <HAL_RCC_OscConfig+0x22a>
 800215c:	e702      	b.n	8001f64 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215e:	4a3f      	ldr	r2, [pc, #252]	; (800225c <HAL_RCC_OscConfig+0x328>)
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	0392      	lsls	r2, r2, #14
 8002164:	d400      	bmi.n	8002168 <HAL_RCC_OscConfig+0x234>
 8002166:	e727      	b.n	8001fb8 <HAL_RCC_OscConfig+0x84>
 8002168:	6862      	ldr	r2, [r4, #4]
 800216a:	2a00      	cmp	r2, #0
 800216c:	d000      	beq.n	8002170 <HAL_RCC_OscConfig+0x23c>
 800216e:	e723      	b.n	8001fb8 <HAL_RCC_OscConfig+0x84>
 8002170:	e7d8      	b.n	8002124 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002172:	6833      	ldr	r3, [r6, #0]
 8002174:	433b      	orrs	r3, r7
 8002176:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002178:	f7ff f93c 	bl	80013f4 <HAL_GetTick>
 800217c:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217e:	e004      	b.n	800218a <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002180:	f7ff f938 	bl	80013f4 <HAL_GetTick>
 8002184:	1b40      	subs	r0, r0, r5
 8002186:	2864      	cmp	r0, #100	; 0x64
 8002188:	d80f      	bhi.n	80021aa <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218a:	6833      	ldr	r3, [r6, #0]
 800218c:	423b      	tst	r3, r7
 800218e:	d0f7      	beq.n	8002180 <HAL_RCC_OscConfig+0x24c>
 8002190:	e75a      	b.n	8002048 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002192:	25f8      	movs	r5, #248	; 0xf8
 8002194:	4831      	ldr	r0, [pc, #196]	; (800225c <HAL_RCC_OscConfig+0x328>)
 8002196:	6922      	ldr	r2, [r4, #16]
 8002198:	6801      	ldr	r1, [r0, #0]
 800219a:	00d2      	lsls	r2, r2, #3
 800219c:	43a9      	bics	r1, r5
 800219e:	430a      	orrs	r2, r1
 80021a0:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a2:	071a      	lsls	r2, r3, #28
 80021a4:	d400      	bmi.n	80021a8 <HAL_RCC_OscConfig+0x274>
 80021a6:	e735      	b.n	8002014 <HAL_RCC_OscConfig+0xe0>
 80021a8:	e762      	b.n	8002070 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 80021aa:	2003      	movs	r0, #3
 80021ac:	e7bb      	b.n	8002126 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ae:	4d2b      	ldr	r5, [pc, #172]	; (800225c <HAL_RCC_OscConfig+0x328>)
 80021b0:	4a2b      	ldr	r2, [pc, #172]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80021b2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b4:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b6:	4013      	ands	r3, r2
 80021b8:	602b      	str	r3, [r5, #0]
 80021ba:	682b      	ldr	r3, [r5, #0]
 80021bc:	4a29      	ldr	r2, [pc, #164]	; (8002264 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c0:	4013      	ands	r3, r2
 80021c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80021c4:	f7ff f916 	bl	80013f4 <HAL_GetTick>
 80021c8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ca:	e004      	b.n	80021d6 <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021cc:	f7ff f912 	bl	80013f4 <HAL_GetTick>
 80021d0:	1b80      	subs	r0, r0, r6
 80021d2:	2864      	cmp	r0, #100	; 0x64
 80021d4:	d8e9      	bhi.n	80021aa <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	682b      	ldr	r3, [r5, #0]
 80021d8:	423b      	tst	r3, r7
 80021da:	d1f7      	bne.n	80021cc <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	e6eb      	b.n	8001fb8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e0:	2201      	movs	r2, #1
 80021e2:	4e1e      	ldr	r6, [pc, #120]	; (800225c <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e4:	4d22      	ldr	r5, [pc, #136]	; (8002270 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e6:	6a33      	ldr	r3, [r6, #32]
 80021e8:	4393      	bics	r3, r2
 80021ea:	6233      	str	r3, [r6, #32]
 80021ec:	6a33      	ldr	r3, [r6, #32]
 80021ee:	3203      	adds	r2, #3
 80021f0:	4393      	bics	r3, r2
 80021f2:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80021f4:	f7ff f8fe 	bl	80013f4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 80021fa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fc:	4698      	mov	r8, r3
 80021fe:	e004      	b.n	800220a <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002200:	f7ff f8f8 	bl	80013f4 <HAL_GetTick>
 8002204:	1bc0      	subs	r0, r0, r7
 8002206:	42a8      	cmp	r0, r5
 8002208:	d8cf      	bhi.n	80021aa <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220a:	4642      	mov	r2, r8
 800220c:	6a33      	ldr	r3, [r6, #32]
 800220e:	421a      	tst	r2, r3
 8002210:	d1f6      	bne.n	8002200 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8002212:	464b      	mov	r3, r9
 8002214:	2b01      	cmp	r3, #1
 8002216:	d04f      	beq.n	80022b8 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	e742      	b.n	80020a2 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 800221c:	2201      	movs	r2, #1
 800221e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002220:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8002222:	4393      	bics	r3, r2
 8002224:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002226:	f7ff f8e5 	bl	80013f4 <HAL_GetTick>
 800222a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222c:	e004      	b.n	8002238 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222e:	f7ff f8e1 	bl	80013f4 <HAL_GetTick>
 8002232:	1b80      	subs	r0, r0, r6
 8002234:	2802      	cmp	r0, #2
 8002236:	d8b8      	bhi.n	80021aa <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002238:	682b      	ldr	r3, [r5, #0]
 800223a:	421f      	tst	r7, r3
 800223c:	d1f7      	bne.n	800222e <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	e6e6      	b.n	8002010 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002242:	4906      	ldr	r1, [pc, #24]	; (800225c <HAL_RCC_OscConfig+0x328>)
 8002244:	6a0a      	ldr	r2, [r1, #32]
 8002246:	4313      	orrs	r3, r2
 8002248:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 800224a:	f7ff f8d3 	bl	80013f4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224e:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8002250:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002252:	4698      	mov	r8, r3
 8002254:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002256:	4d06      	ldr	r5, [pc, #24]	; (8002270 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002258:	e011      	b.n	800227e <HAL_RCC_OscConfig+0x34a>
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	40021000 	.word	0x40021000
 8002260:	fffeffff 	.word	0xfffeffff
 8002264:	fffbffff 	.word	0xfffbffff
 8002268:	40007000 	.word	0x40007000
 800226c:	feffffff 	.word	0xfeffffff
 8002270:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002274:	f7ff f8be 	bl	80013f4 <HAL_GetTick>
 8002278:	1b80      	subs	r0, r0, r6
 800227a:	42a8      	cmp	r0, r5
 800227c:	d895      	bhi.n	80021aa <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227e:	4643      	mov	r3, r8
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	421f      	tst	r7, r3
 8002284:	d0f6      	beq.n	8002274 <HAL_RCC_OscConfig+0x340>
 8002286:	e7c4      	b.n	8002212 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002288:	2204      	movs	r2, #4
 800228a:	4d53      	ldr	r5, [pc, #332]	; (80023d8 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800228c:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800228e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002290:	4313      	orrs	r3, r2
 8002292:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002294:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002296:	3a03      	subs	r2, #3
 8002298:	4393      	bics	r3, r2
 800229a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800229c:	f7ff f8aa 	bl	80013f4 <HAL_GetTick>
 80022a0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022a2:	e005      	b.n	80022b0 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022a4:	f7ff f8a6 	bl	80013f4 <HAL_GetTick>
 80022a8:	1b80      	subs	r0, r0, r6
 80022aa:	2802      	cmp	r0, #2
 80022ac:	d900      	bls.n	80022b0 <HAL_RCC_OscConfig+0x37c>
 80022ae:	e77c      	b.n	80021aa <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022b0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80022b2:	421f      	tst	r7, r3
 80022b4:	d1f6      	bne.n	80022a4 <HAL_RCC_OscConfig+0x370>
 80022b6:	e709      	b.n	80020cc <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b8:	4a47      	ldr	r2, [pc, #284]	; (80023d8 <HAL_RCC_OscConfig+0x4a4>)
 80022ba:	4948      	ldr	r1, [pc, #288]	; (80023dc <HAL_RCC_OscConfig+0x4a8>)
 80022bc:	69d3      	ldr	r3, [r2, #28]
 80022be:	400b      	ands	r3, r1
 80022c0:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	e6ed      	b.n	80020a2 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c6:	2280      	movs	r2, #128	; 0x80
 80022c8:	4b43      	ldr	r3, [pc, #268]	; (80023d8 <HAL_RCC_OscConfig+0x4a4>)
 80022ca:	02d2      	lsls	r2, r2, #11
 80022cc:	6819      	ldr	r1, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	2280      	movs	r2, #128	; 0x80
 80022d4:	6819      	ldr	r1, [r3, #0]
 80022d6:	0252      	lsls	r2, r2, #9
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e65b      	b.n	8001f96 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022de:	2104      	movs	r1, #4
 80022e0:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <HAL_RCC_OscConfig+0x4a4>)
 80022e2:	6a1a      	ldr	r2, [r3, #32]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	621a      	str	r2, [r3, #32]
 80022e8:	6a1a      	ldr	r2, [r3, #32]
 80022ea:	3903      	subs	r1, #3
 80022ec:	430a      	orrs	r2, r1
 80022ee:	621a      	str	r2, [r3, #32]
 80022f0:	e7ab      	b.n	800224a <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d100      	bne.n	80022f8 <HAL_RCC_OscConfig+0x3c4>
 80022f6:	e715      	b.n	8002124 <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f8:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 80022fa:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80022fe:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8002300:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 8002302:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002304:	4013      	ands	r3, r2
 8002306:	428b      	cmp	r3, r1
 8002308:	d000      	beq.n	800230c <HAL_RCC_OscConfig+0x3d8>
 800230a:	e70c      	b.n	8002126 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800230c:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002310:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	428b      	cmp	r3, r1
 8002314:	d000      	beq.n	8002318 <HAL_RCC_OscConfig+0x3e4>
 8002316:	e706      	b.n	8002126 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002318:	23f0      	movs	r3, #240	; 0xf0
 800231a:	039b      	lsls	r3, r3, #14
 800231c:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800231e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002320:	1ad2      	subs	r2, r2, r3
 8002322:	1e53      	subs	r3, r2, #1
 8002324:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 8002326:	b2d0      	uxtb	r0, r2
 8002328:	e6fd      	b.n	8002126 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 800232a:	2104      	movs	r1, #4
 800232c:	4d2a      	ldr	r5, [pc, #168]	; (80023d8 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800232e:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002330:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002332:	430a      	orrs	r2, r1
 8002334:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8002336:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002338:	4313      	orrs	r3, r2
 800233a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800233c:	f7ff f85a 	bl	80013f4 <HAL_GetTick>
 8002340:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002342:	e005      	b.n	8002350 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002344:	f7ff f856 	bl	80013f4 <HAL_GetTick>
 8002348:	1b80      	subs	r0, r0, r6
 800234a:	2802      	cmp	r0, #2
 800234c:	d900      	bls.n	8002350 <HAL_RCC_OscConfig+0x41c>
 800234e:	e72c      	b.n	80021aa <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002350:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002352:	421f      	tst	r7, r3
 8002354:	d0f6      	beq.n	8002344 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002356:	21f8      	movs	r1, #248	; 0xf8
 8002358:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800235a:	69a3      	ldr	r3, [r4, #24]
 800235c:	438a      	bics	r2, r1
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4313      	orrs	r3, r2
 8002362:	636b      	str	r3, [r5, #52]	; 0x34
 8002364:	e6b2      	b.n	80020cc <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8002366:	682b      	ldr	r3, [r5, #0]
 8002368:	4a1d      	ldr	r2, [pc, #116]	; (80023e0 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236a:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800236c:	4013      	ands	r3, r2
 800236e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002370:	f7ff f840 	bl	80013f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002374:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8002376:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002378:	e005      	b.n	8002386 <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237a:	f7ff f83b 	bl	80013f4 <HAL_GetTick>
 800237e:	1b80      	subs	r0, r0, r6
 8002380:	2802      	cmp	r0, #2
 8002382:	d900      	bls.n	8002386 <HAL_RCC_OscConfig+0x452>
 8002384:	e711      	b.n	80021aa <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002386:	682b      	ldr	r3, [r5, #0]
 8002388:	423b      	tst	r3, r7
 800238a:	d1f6      	bne.n	800237a <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800238c:	220f      	movs	r2, #15
 800238e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002390:	4e11      	ldr	r6, [pc, #68]	; (80023d8 <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002392:	4393      	bics	r3, r2
 8002394:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002396:	4313      	orrs	r3, r2
 8002398:	62eb      	str	r3, [r5, #44]	; 0x2c
 800239a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800239c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800239e:	686a      	ldr	r2, [r5, #4]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	4910      	ldr	r1, [pc, #64]	; (80023e4 <HAL_RCC_OscConfig+0x4b0>)
 80023a4:	400a      	ands	r2, r1
 80023a6:	4313      	orrs	r3, r2
 80023a8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	682a      	ldr	r2, [r5, #0]
 80023ae:	045b      	lsls	r3, r3, #17
 80023b0:	4313      	orrs	r3, r2
 80023b2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80023b4:	f7ff f81e 	bl	80013f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b8:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80023ba:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023bc:	04ad      	lsls	r5, r5, #18
 80023be:	e005      	b.n	80023cc <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c0:	f7ff f818 	bl	80013f4 <HAL_GetTick>
 80023c4:	1b00      	subs	r0, r0, r4
 80023c6:	2802      	cmp	r0, #2
 80023c8:	d900      	bls.n	80023cc <HAL_RCC_OscConfig+0x498>
 80023ca:	e6ee      	b.n	80021aa <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023cc:	6833      	ldr	r3, [r6, #0]
 80023ce:	422b      	tst	r3, r5
 80023d0:	d0f6      	beq.n	80023c0 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 80023d2:	2000      	movs	r0, #0
 80023d4:	e6a7      	b.n	8002126 <HAL_RCC_OscConfig+0x1f2>
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	40021000 	.word	0x40021000
 80023dc:	efffffff 	.word	0xefffffff
 80023e0:	feffffff 	.word	0xfeffffff
 80023e4:	ffc2ffff 	.word	0xffc2ffff

080023e8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023e8:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80023ea:	4910      	ldr	r1, [pc, #64]	; (800242c <HAL_RCC_GetSysClockFreq+0x44>)
{
 80023ec:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80023ee:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d001      	beq.n	80023fa <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023f6:	480e      	ldr	r0, [pc, #56]	; (8002430 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80023f8:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80023fa:	250f      	movs	r5, #15
 80023fc:	480d      	ldr	r0, [pc, #52]	; (8002434 <HAL_RCC_GetSysClockFreq+0x4c>)
 80023fe:	0c93      	lsrs	r3, r2, #18
 8002400:	402b      	ands	r3, r5
 8002402:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002404:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002406:	03d2      	lsls	r2, r2, #15
 8002408:	d507      	bpl.n	800241a <HAL_RCC_GetSysClockFreq+0x32>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCC_GetSysClockFreq+0x50>)
 800240c:	400d      	ands	r5, r1
 800240e:	5d59      	ldrb	r1, [r3, r5]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002410:	4807      	ldr	r0, [pc, #28]	; (8002430 <HAL_RCC_GetSysClockFreq+0x48>)
 8002412:	f7fd fe79 	bl	8000108 <__udivsi3>
 8002416:	4360      	muls	r0, r4
 8002418:	e7ee      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x10>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800241a:	0162      	lsls	r2, r4, #5
 800241c:	1b12      	subs	r2, r2, r4
 800241e:	0193      	lsls	r3, r2, #6
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	191b      	adds	r3, r3, r4
 8002426:	0218      	lsls	r0, r3, #8
 8002428:	e7e6      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x10>
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	40021000 	.word	0x40021000
 8002430:	007a1200 	.word	0x007a1200
 8002434:	080052f0 	.word	0x080052f0
 8002438:	08005300 	.word	0x08005300

0800243c <HAL_RCC_ClockConfig>:
{
 800243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243e:	46ce      	mov	lr, r9
 8002440:	4647      	mov	r7, r8
 8002442:	0004      	movs	r4, r0
 8002444:	000d      	movs	r5, r1
 8002446:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 8002448:	2800      	cmp	r0, #0
 800244a:	d00d      	beq.n	8002468 <HAL_RCC_ClockConfig+0x2c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800244c:	2301      	movs	r3, #1
 800244e:	493b      	ldr	r1, [pc, #236]	; (800253c <HAL_RCC_ClockConfig+0x100>)
 8002450:	680a      	ldr	r2, [r1, #0]
 8002452:	401a      	ands	r2, r3
 8002454:	42aa      	cmp	r2, r5
 8002456:	d20c      	bcs.n	8002472 <HAL_RCC_ClockConfig+0x36>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002458:	680a      	ldr	r2, [r1, #0]
 800245a:	439a      	bics	r2, r3
 800245c:	432a      	orrs	r2, r5
 800245e:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002460:	680a      	ldr	r2, [r1, #0]
 8002462:	4013      	ands	r3, r2
 8002464:	42ab      	cmp	r3, r5
 8002466:	d004      	beq.n	8002472 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8002468:	2001      	movs	r0, #1
}
 800246a:	bcc0      	pop	{r6, r7}
 800246c:	46b9      	mov	r9, r7
 800246e:	46b0      	mov	r8, r6
 8002470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	079a      	lsls	r2, r3, #30
 8002476:	d50e      	bpl.n	8002496 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002478:	075a      	lsls	r2, r3, #29
 800247a:	d505      	bpl.n	8002488 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800247c:	22e0      	movs	r2, #224	; 0xe0
 800247e:	4930      	ldr	r1, [pc, #192]	; (8002540 <HAL_RCC_ClockConfig+0x104>)
 8002480:	00d2      	lsls	r2, r2, #3
 8002482:	6848      	ldr	r0, [r1, #4]
 8002484:	4302      	orrs	r2, r0
 8002486:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002488:	20f0      	movs	r0, #240	; 0xf0
 800248a:	492d      	ldr	r1, [pc, #180]	; (8002540 <HAL_RCC_ClockConfig+0x104>)
 800248c:	684a      	ldr	r2, [r1, #4]
 800248e:	4382      	bics	r2, r0
 8002490:	68a0      	ldr	r0, [r4, #8]
 8002492:	4302      	orrs	r2, r0
 8002494:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002496:	07db      	lsls	r3, r3, #31
 8002498:	d522      	bpl.n	80024e0 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	4b29      	ldr	r3, [pc, #164]	; (8002540 <HAL_RCC_ClockConfig+0x104>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249c:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a0:	2a01      	cmp	r2, #1
 80024a2:	d046      	beq.n	8002532 <HAL_RCC_ClockConfig+0xf6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a4:	2a02      	cmp	r2, #2
 80024a6:	d041      	beq.n	800252c <HAL_RCC_ClockConfig+0xf0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a8:	079b      	lsls	r3, r3, #30
 80024aa:	d5dd      	bpl.n	8002468 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ac:	2103      	movs	r1, #3
 80024ae:	4e24      	ldr	r6, [pc, #144]	; (8002540 <HAL_RCC_ClockConfig+0x104>)
 80024b0:	6873      	ldr	r3, [r6, #4]
 80024b2:	438b      	bics	r3, r1
 80024b4:	4313      	orrs	r3, r2
 80024b6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80024b8:	f7fe ff9c 	bl	80013f4 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024bc:	230c      	movs	r3, #12
 80024be:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c0:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_RCC_ClockConfig+0x108>)
    tickstart = HAL_GetTick();
 80024c2:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c4:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	e004      	b.n	80024d2 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7fe ff94 	bl	80013f4 <HAL_GetTick>
 80024cc:	1bc0      	subs	r0, r0, r7
 80024ce:	4548      	cmp	r0, r9
 80024d0:	d832      	bhi.n	8002538 <HAL_RCC_ClockConfig+0xfc>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	4643      	mov	r3, r8
 80024d4:	6872      	ldr	r2, [r6, #4]
 80024d6:	401a      	ands	r2, r3
 80024d8:	6863      	ldr	r3, [r4, #4]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	429a      	cmp	r2, r3
 80024de:	d1f3      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024e0:	2101      	movs	r1, #1
 80024e2:	4a16      	ldr	r2, [pc, #88]	; (800253c <HAL_RCC_ClockConfig+0x100>)
 80024e4:	6813      	ldr	r3, [r2, #0]
 80024e6:	400b      	ands	r3, r1
 80024e8:	42ab      	cmp	r3, r5
 80024ea:	d905      	bls.n	80024f8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ec:	6813      	ldr	r3, [r2, #0]
 80024ee:	438b      	bics	r3, r1
 80024f0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	6813      	ldr	r3, [r2, #0]
 80024f4:	4219      	tst	r1, r3
 80024f6:	d1b7      	bne.n	8002468 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	075b      	lsls	r3, r3, #29
 80024fc:	d506      	bpl.n	800250c <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024fe:	4a10      	ldr	r2, [pc, #64]	; (8002540 <HAL_RCC_ClockConfig+0x104>)
 8002500:	4911      	ldr	r1, [pc, #68]	; (8002548 <HAL_RCC_ClockConfig+0x10c>)
 8002502:	6853      	ldr	r3, [r2, #4]
 8002504:	400b      	ands	r3, r1
 8002506:	68e1      	ldr	r1, [r4, #12]
 8002508:	430b      	orrs	r3, r1
 800250a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800250c:	f7ff ff6c 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_ClockConfig+0x104>)
 8002512:	4a0e      	ldr	r2, [pc, #56]	; (800254c <HAL_RCC_ClockConfig+0x110>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	490e      	ldr	r1, [pc, #56]	; (8002550 <HAL_RCC_ClockConfig+0x114>)
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	0f1b      	lsrs	r3, r3, #28
 800251c:	5cd3      	ldrb	r3, [r2, r3]
 800251e:	40d8      	lsrs	r0, r3
 8002520:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002522:	2003      	movs	r0, #3
 8002524:	f7fe ff24 	bl	8001370 <HAL_InitTick>
  return HAL_OK;
 8002528:	2000      	movs	r0, #0
 800252a:	e79e      	b.n	800246a <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252c:	019b      	lsls	r3, r3, #6
 800252e:	d4bd      	bmi.n	80024ac <HAL_RCC_ClockConfig+0x70>
 8002530:	e79a      	b.n	8002468 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	039b      	lsls	r3, r3, #14
 8002534:	d4ba      	bmi.n	80024ac <HAL_RCC_ClockConfig+0x70>
 8002536:	e797      	b.n	8002468 <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8002538:	2003      	movs	r0, #3
 800253a:	e796      	b.n	800246a <HAL_RCC_ClockConfig+0x2e>
 800253c:	40022000 	.word	0x40022000
 8002540:	40021000 	.word	0x40021000
 8002544:	00001388 	.word	0x00001388
 8002548:	fffff8ff 	.word	0xfffff8ff
 800254c:	080052d8 	.word	0x080052d8
 8002550:	20000004 	.word	0x20000004

08002554 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8002556:	4a05      	ldr	r2, [pc, #20]	; (800256c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	4905      	ldr	r1, [pc, #20]	; (8002570 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800255c:	055b      	lsls	r3, r3, #21
 800255e:	0f5b      	lsrs	r3, r3, #29
 8002560:	5ccb      	ldrb	r3, [r1, r3]
 8002562:	6810      	ldr	r0, [r2, #0]
 8002564:	40d8      	lsrs	r0, r3
}    
 8002566:	4770      	bx	lr
 8002568:	40021000 	.word	0x40021000
 800256c:	20000004 	.word	0x20000004
 8002570:	080052e8 	.word	0x080052e8

08002574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002576:	46ce      	mov	lr, r9
 8002578:	4647      	mov	r7, r8
 800257a:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800257c:	6803      	ldr	r3, [r0, #0]
{
 800257e:	0004      	movs	r4, r0
 8002580:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002582:	03da      	lsls	r2, r3, #15
 8002584:	d530      	bpl.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002586:	2280      	movs	r2, #128	; 0x80
 8002588:	4b43      	ldr	r3, [pc, #268]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800258a:	0552      	lsls	r2, r2, #21
 800258c:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800258e:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002590:	4211      	tst	r1, r2
 8002592:	d041      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	2680      	movs	r6, #128	; 0x80
 8002596:	4d41      	ldr	r5, [pc, #260]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8002598:	0076      	lsls	r6, r6, #1
 800259a:	682b      	ldr	r3, [r5, #0]
 800259c:	4233      	tst	r3, r6
 800259e:	d049      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025a0:	4d3d      	ldr	r5, [pc, #244]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80025a2:	23c0      	movs	r3, #192	; 0xc0
 80025a4:	6a2a      	ldr	r2, [r5, #32]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	0010      	movs	r0, r2
 80025aa:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025ac:	421a      	tst	r2, r3
 80025ae:	d063      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80025b0:	6861      	ldr	r1, [r4, #4]
 80025b2:	400b      	ands	r3, r1
 80025b4:	4283      	cmp	r3, r0
 80025b6:	d00e      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025b8:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025ba:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80025bc:	6a2e      	ldr	r6, [r5, #32]
 80025be:	0240      	lsls	r0, r0, #9
 80025c0:	4330      	orrs	r0, r6
 80025c2:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025c4:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025c6:	4a36      	ldr	r2, [pc, #216]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025c8:	4e36      	ldr	r6, [pc, #216]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025ca:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025cc:	4030      	ands	r0, r6
 80025ce:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025d0:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025d2:	07db      	lsls	r3, r3, #31
 80025d4:	d43f      	bmi.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025d6:	4a30      	ldr	r2, [pc, #192]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80025d8:	4831      	ldr	r0, [pc, #196]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80025da:	6a13      	ldr	r3, [r2, #32]
 80025dc:	4003      	ands	r3, r0
 80025de:	430b      	orrs	r3, r1
 80025e0:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025e2:	2f01      	cmp	r7, #1
 80025e4:	d051      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	07da      	lsls	r2, r3, #31
 80025ea:	d506      	bpl.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ec:	2003      	movs	r0, #3
 80025ee:	492a      	ldr	r1, [pc, #168]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80025f0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80025f2:	4382      	bics	r2, r0
 80025f4:	68a0      	ldr	r0, [r4, #8]
 80025f6:	4302      	orrs	r2, r0
 80025f8:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80025fa:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025fc:	069b      	lsls	r3, r3, #26
 80025fe:	d506      	bpl.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002600:	2110      	movs	r1, #16
 8002602:	4a25      	ldr	r2, [pc, #148]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002604:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002606:	438b      	bics	r3, r1
 8002608:	68e1      	ldr	r1, [r4, #12]
 800260a:	430b      	orrs	r3, r1
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800260e:	b003      	add	sp, #12
 8002610:	bcc0      	pop	{r6, r7}
 8002612:	46b9      	mov	r9, r7
 8002614:	46b0      	mov	r8, r6
 8002616:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	4d1f      	ldr	r5, [pc, #124]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800261e:	4311      	orrs	r1, r2
 8002620:	61d9      	str	r1, [r3, #28]
 8002622:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	4013      	ands	r3, r2
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 800262e:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	4233      	tst	r3, r6
 8002632:	d1b5      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002634:	682b      	ldr	r3, [r5, #0]
 8002636:	4333      	orrs	r3, r6
 8002638:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800263a:	f7fe fedb 	bl	80013f4 <HAL_GetTick>
 800263e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	682b      	ldr	r3, [r5, #0]
 8002642:	4233      	tst	r3, r6
 8002644:	d1ac      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002646:	f7fe fed5 	bl	80013f4 <HAL_GetTick>
 800264a:	4643      	mov	r3, r8
 800264c:	1ac0      	subs	r0, r0, r3
 800264e:	2864      	cmp	r0, #100	; 0x64
 8002650:	d9f6      	bls.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 8002652:	2003      	movs	r0, #3
 8002654:	e7db      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8002656:	f7fe fecd 	bl	80013f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265a:	2302      	movs	r3, #2
 800265c:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 8002660:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002662:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002664:	e004      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f7fe fec5 	bl	80013f4 <HAL_GetTick>
 800266a:	1b80      	subs	r0, r0, r6
 800266c:	4548      	cmp	r0, r9
 800266e:	d8f0      	bhi.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	4642      	mov	r2, r8
 8002672:	6a2b      	ldr	r3, [r5, #32]
 8002674:	421a      	tst	r2, r3
 8002676:	d0f6      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002678:	4a07      	ldr	r2, [pc, #28]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800267a:	4809      	ldr	r0, [pc, #36]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800267c:	6a13      	ldr	r3, [r2, #32]
 800267e:	6861      	ldr	r1, [r4, #4]
 8002680:	4003      	ands	r3, r0
 8002682:	430b      	orrs	r3, r1
 8002684:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 8002686:	2f01      	cmp	r7, #1
 8002688:	d1ad      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 800268a:	69d3      	ldr	r3, [r2, #28]
 800268c:	4907      	ldr	r1, [pc, #28]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800268e:	400b      	ands	r3, r1
 8002690:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	e7a8      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	40021000 	.word	0x40021000
 800269c:	40007000 	.word	0x40007000
 80026a0:	fffffcff 	.word	0xfffffcff
 80026a4:	fffeffff 	.word	0xfffeffff
 80026a8:	00001388 	.word	0x00001388
 80026ac:	efffffff 	.word	0xefffffff

080026b0 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80026b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b2:	46de      	mov	lr, fp
 80026b4:	4657      	mov	r7, sl
 80026b6:	464e      	mov	r6, r9
 80026b8:	4645      	mov	r5, r8
 80026ba:	b5e0      	push	{r5, r6, r7, lr}
 80026bc:	b083      	sub	sp, #12
 80026be:	001e      	movs	r6, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80026c0:	466b      	mov	r3, sp
 80026c2:	1cdf      	adds	r7, r3, #3
 80026c4:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80026c6:	0015      	movs	r5, r2
 80026c8:	4681      	mov	r9, r0
 80026ca:	000c      	movs	r4, r1
  __IO uint8_t  tmpreg8 = 0;
 80026cc:	703b      	strb	r3, [r7, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80026ce:	f7fe fe91 	bl	80013f4 <HAL_GetTick>
 80026d2:	1976      	adds	r6, r6, r5
 80026d4:	1a33      	subs	r3, r6, r0
 80026d6:	4698      	mov	r8, r3
  tmp_tickstart = HAL_GetTick();
 80026d8:	f7fe fe8c 	bl	80013f4 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80026dc:	464b      	mov	r3, r9
 80026de:	681b      	ldr	r3, [r3, #0]
  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);

  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80026e0:	26c0      	movs	r6, #192	; 0xc0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80026e2:	469a      	mov	sl, r3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80026e4:	4b34      	ldr	r3, [pc, #208]	; (80027b8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
  tmp_tickstart = HAL_GetTick();
 80026e6:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80026e8:	681b      	ldr	r3, [r3, #0]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80026ea:	00f6      	lsls	r6, r6, #3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80026ec:	009a      	lsls	r2, r3, #2
 80026ee:	18d2      	adds	r2, r2, r3
 80026f0:	00d3      	lsls	r3, r2, #3
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	4642      	mov	r2, r8
 80026f6:	0d1b      	lsrs	r3, r3, #20
 80026f8:	4353      	muls	r3, r2
  while ((hspi->Instance->SR & Fifo) != State)
 80026fa:	4652      	mov	r2, sl
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80026fc:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 80026fe:	e001      	b.n	8002704 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8002700:	1c6b      	adds	r3, r5, #1
 8002702:	d10b      	bne.n	800271c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8002704:	6893      	ldr	r3, [r2, #8]
 8002706:	4223      	tst	r3, r4
 8002708:	d01d      	beq.n	8002746 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x96>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800270a:	42b4      	cmp	r4, r6
 800270c:	d1f8      	bne.n	8002700 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x50>
      tmpreg8 = *ptmpreg8;
 800270e:	4653      	mov	r3, sl
 8002710:	7b1b      	ldrb	r3, [r3, #12]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	703b      	strb	r3, [r7, #0]
      UNUSED(tmpreg8);
 8002716:	783b      	ldrb	r3, [r7, #0]
    if (Timeout != HAL_MAX_DELAY)
 8002718:	1c6b      	adds	r3, r5, #1
 800271a:	d0f3      	beq.n	8002704 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800271c:	f7fe fe6a 	bl	80013f4 <HAL_GetTick>
 8002720:	465b      	mov	r3, fp
 8002722:	1ac0      	subs	r0, r0, r3
 8002724:	4540      	cmp	r0, r8
 8002726:	d216      	bcs.n	8002756 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002728:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 800272a:	1e5a      	subs	r2, r3, #1
 800272c:	4193      	sbcs	r3, r2
 800272e:	4642      	mov	r2, r8
 8002730:	425b      	negs	r3, r3
 8002732:	401a      	ands	r2, r3
      }
      count--;
 8002734:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002736:	4690      	mov	r8, r2
      count--;
 8002738:	3b01      	subs	r3, #1
 800273a:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800273c:	464b      	mov	r3, r9
 800273e:	681a      	ldr	r2, [r3, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002740:	6893      	ldr	r3, [r2, #8]
 8002742:	4223      	tst	r3, r4
 8002744:	d1e1      	bne.n	800270a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
    }
  }

  return HAL_OK;
 8002746:	2000      	movs	r0, #0
}
 8002748:	b003      	add	sp, #12
 800274a:	bcf0      	pop	{r4, r5, r6, r7}
 800274c:	46bb      	mov	fp, r7
 800274e:	46b2      	mov	sl, r6
 8002750:	46a9      	mov	r9, r5
 8002752:	46a0      	mov	r8, r4
 8002754:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002756:	464b      	mov	r3, r9
 8002758:	21e0      	movs	r1, #224	; 0xe0
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002760:	4649      	mov	r1, r9
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002762:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002764:	2282      	movs	r2, #130	; 0x82
 8002766:	6849      	ldr	r1, [r1, #4]
 8002768:	0052      	lsls	r2, r2, #1
 800276a:	4291      	cmp	r1, r2
 800276c:	d015      	beq.n	800279a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800276e:	464a      	mov	r2, r9
 8002770:	2180      	movs	r1, #128	; 0x80
 8002772:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002774:	0189      	lsls	r1, r1, #6
 8002776:	428a      	cmp	r2, r1
 8002778:	d106      	bne.n	8002788 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
          SPI_RESET_CRC(hspi);
 800277a:	6819      	ldr	r1, [r3, #0]
 800277c:	480f      	ldr	r0, [pc, #60]	; (80027bc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x10c>)
 800277e:	4001      	ands	r1, r0
 8002780:	6019      	str	r1, [r3, #0]
 8002782:	6819      	ldr	r1, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002788:	235d      	movs	r3, #93	; 0x5d
 800278a:	2201      	movs	r2, #1
 800278c:	4649      	mov	r1, r9
 800278e:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 8002790:	2200      	movs	r2, #0
 8002792:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8002794:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8002796:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8002798:	e7d6      	b.n	8002748 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800279a:	464a      	mov	r2, r9
 800279c:	2180      	movs	r1, #128	; 0x80
 800279e:	6892      	ldr	r2, [r2, #8]
 80027a0:	0209      	lsls	r1, r1, #8
 80027a2:	428a      	cmp	r2, r1
 80027a4:	d003      	beq.n	80027ae <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027a6:	2180      	movs	r1, #128	; 0x80
 80027a8:	00c9      	lsls	r1, r1, #3
 80027aa:	428a      	cmp	r2, r1
 80027ac:	d1df      	bne.n	800276e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          __HAL_SPI_DISABLE(hspi);
 80027ae:	2140      	movs	r1, #64	; 0x40
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	438a      	bics	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e7da      	b.n	800276e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
 80027b8:	20000004 	.word	0x20000004
 80027bc:	ffffdfff 	.word	0xffffdfff

080027c0 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80027c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027c2:	46c6      	mov	lr, r8
 80027c4:	b500      	push	{lr}
 80027c6:	000c      	movs	r4, r1
 80027c8:	0016      	movs	r6, r2
 80027ca:	b082      	sub	sp, #8
 80027cc:	0007      	movs	r7, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027ce:	f7fe fe11 	bl	80013f4 <HAL_GetTick>
 80027d2:	1936      	adds	r6, r6, r4
 80027d4:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 80027d6:	f7fe fe0d 	bl	80013f4 <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027da:	2580      	movs	r5, #128	; 0x80
  tmp_tickstart = HAL_GetTick();
 80027dc:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027de:	4b26      	ldr	r3, [pc, #152]	; (8002878 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	015b      	lsls	r3, r3, #5
 80027e4:	0d1b      	lsrs	r3, r3, #20
 80027e6:	4373      	muls	r3, r6
 80027e8:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	e001      	b.n	80027f2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	1c63      	adds	r3, r4, #1
 80027f0:	d107      	bne.n	8002802 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027f2:	6893      	ldr	r3, [r2, #8]
 80027f4:	421d      	tst	r5, r3
 80027f6:	d1fa      	bne.n	80027ee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  return HAL_OK;
 80027f8:	2000      	movs	r0, #0
}
 80027fa:	b002      	add	sp, #8
 80027fc:	bc80      	pop	{r7}
 80027fe:	46b8      	mov	r8, r7
 8002800:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002802:	f7fe fdf7 	bl	80013f4 <HAL_GetTick>
 8002806:	4643      	mov	r3, r8
 8002808:	1ac0      	subs	r0, r0, r3
 800280a:	42b0      	cmp	r0, r6
 800280c:	d208      	bcs.n	8002820 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
      if (count == 0U)
 800280e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002810:	1e5a      	subs	r2, r3, #1
 8002812:	4193      	sbcs	r3, r2
 8002814:	425b      	negs	r3, r3
 8002816:	401e      	ands	r6, r3
      count--;
 8002818:	9b01      	ldr	r3, [sp, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	9301      	str	r3, [sp, #4]
 800281e:	e7e4      	b.n	80027ea <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002820:	21e0      	movs	r1, #224	; 0xe0
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	438a      	bics	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800282a:	2282      	movs	r2, #130	; 0x82
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	0052      	lsls	r2, r2, #1
 8002830:	4291      	cmp	r1, r2
 8002832:	d013      	beq.n	800285c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002834:	2180      	movs	r1, #128	; 0x80
 8002836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002838:	0189      	lsls	r1, r1, #6
 800283a:	428a      	cmp	r2, r1
 800283c:	d106      	bne.n	800284c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
          SPI_RESET_CRC(hspi);
 800283e:	6819      	ldr	r1, [r3, #0]
 8002840:	480e      	ldr	r0, [pc, #56]	; (800287c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8002842:	4001      	ands	r1, r0
 8002844:	6019      	str	r1, [r3, #0]
 8002846:	6819      	ldr	r1, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800284c:	235d      	movs	r3, #93	; 0x5d
 800284e:	2201      	movs	r2, #1
 8002850:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 8002852:	2200      	movs	r2, #0
 8002854:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8002856:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8002858:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 800285a:	e7ce      	b.n	80027fa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800285c:	2180      	movs	r1, #128	; 0x80
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	0209      	lsls	r1, r1, #8
 8002862:	428a      	cmp	r2, r1
 8002864:	d003      	beq.n	800286e <SPI_WaitFlagStateUntilTimeout.constprop.0+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	00c9      	lsls	r1, r1, #3
 800286a:	428a      	cmp	r2, r1
 800286c:	d1e2      	bne.n	8002834 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
          __HAL_SPI_DISABLE(hspi);
 800286e:	2140      	movs	r1, #64	; 0x40
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	438a      	bics	r2, r1
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	e7dd      	b.n	8002834 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
 8002878:	20000004 	.word	0x20000004
 800287c:	ffffdfff 	.word	0xffffdfff

08002880 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002882:	0013      	movs	r3, r2
{
 8002884:	000d      	movs	r5, r1
 8002886:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002888:	000a      	movs	r2, r1
 800288a:	21c0      	movs	r1, #192	; 0xc0
 800288c:	0149      	lsls	r1, r1, #5
{
 800288e:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002890:	f7ff ff0e 	bl	80026b0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002894:	2800      	cmp	r0, #0
 8002896:	d10f      	bne.n	80028b8 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002898:	0032      	movs	r2, r6
 800289a:	0029      	movs	r1, r5
 800289c:	0020      	movs	r0, r4
 800289e:	f7ff ff8f 	bl	80027c0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80028a2:	2800      	cmp	r0, #0
 80028a4:	d108      	bne.n	80028b8 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028a6:	21c0      	movs	r1, #192	; 0xc0
 80028a8:	0033      	movs	r3, r6
 80028aa:	002a      	movs	r2, r5
 80028ac:	0020      	movs	r0, r4
 80028ae:	00c9      	lsls	r1, r1, #3
 80028b0:	f7ff fefe 	bl	80026b0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80028b4:	2800      	cmp	r0, #0
 80028b6:	d004      	beq.n	80028c2 <SPI_EndRxTxTransaction+0x42>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028b8:	2220      	movs	r2, #32
    return HAL_TIMEOUT;
 80028ba:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028bc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80028be:	4313      	orrs	r3, r2
 80028c0:	6623      	str	r3, [r4, #96]	; 0x60
  }

  return HAL_OK;
}
 80028c2:	bd70      	pop	{r4, r5, r6, pc}

080028c4 <HAL_SPI_Init>:
{
 80028c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c6:	46de      	mov	lr, fp
 80028c8:	4657      	mov	r7, sl
 80028ca:	464e      	mov	r6, r9
 80028cc:	4645      	mov	r5, r8
 80028ce:	0004      	movs	r4, r0
 80028d0:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 80028d2:	2800      	cmp	r0, #0
 80028d4:	d100      	bne.n	80028d8 <HAL_SPI_Init+0x14>
 80028d6:	e094      	b.n	8002a02 <HAL_SPI_Init+0x13e>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80028da:	2d00      	cmp	r5, #0
 80028dc:	d06b      	beq.n	80029b6 <HAL_SPI_Init+0xf2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028de:	2300      	movs	r3, #0
 80028e0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028e2:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80028e8:	335d      	adds	r3, #93	; 0x5d
 80028ea:	5ce3      	ldrb	r3, [r4, r3]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d06e      	beq.n	80029d0 <HAL_SPI_Init+0x10c>
  hspi->State = HAL_SPI_STATE_BUSY;
 80028f2:	235d      	movs	r3, #93	; 0x5d
 80028f4:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 80028f6:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80028f8:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 80028fa:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028fc:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80028fe:	6813      	ldr	r3, [r2, #0]
 8002900:	438b      	bics	r3, r1
 8002902:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002904:	23e0      	movs	r3, #224	; 0xe0
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4298      	cmp	r0, r3
 800290a:	d968      	bls.n	80029de <HAL_SPI_Init+0x11a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800290c:	23f0      	movs	r3, #240	; 0xf0
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	4298      	cmp	r0, r3
 8002912:	d000      	beq.n	8002916 <HAL_SPI_Init+0x52>
 8002914:	e077      	b.n	8002a06 <HAL_SPI_Init+0x142>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800291a:	019b      	lsls	r3, r3, #6
 800291c:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800291e:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002920:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002922:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002924:	2682      	movs	r6, #130	; 0x82
 8002926:	2784      	movs	r7, #132	; 0x84
 8002928:	6863      	ldr	r3, [r4, #4]
 800292a:	0076      	lsls	r6, r6, #1
 800292c:	4033      	ands	r3, r6
 800292e:	68a6      	ldr	r6, [r4, #8]
 8002930:	023f      	lsls	r7, r7, #8
 8002932:	403e      	ands	r6, r7
 8002934:	2702      	movs	r7, #2
 8002936:	4333      	orrs	r3, r6
 8002938:	6926      	ldr	r6, [r4, #16]
 800293a:	69a1      	ldr	r1, [r4, #24]
 800293c:	403e      	ands	r6, r7
 800293e:	4333      	orrs	r3, r6
 8002940:	2601      	movs	r6, #1
 8002942:	6967      	ldr	r7, [r4, #20]
 8002944:	46b2      	mov	sl, r6
 8002946:	4037      	ands	r7, r6
 8002948:	433b      	orrs	r3, r7
 800294a:	2780      	movs	r7, #128	; 0x80
 800294c:	00bf      	lsls	r7, r7, #2
 800294e:	400f      	ands	r7, r1
 8002950:	433b      	orrs	r3, r7
 8002952:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002954:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002956:	46b8      	mov	r8, r7
 8002958:	2738      	movs	r7, #56	; 0x38
 800295a:	46b9      	mov	r9, r7
 800295c:	4647      	mov	r7, r8
 800295e:	464e      	mov	r6, r9
 8002960:	4037      	ands	r7, r6
 8002962:	6a26      	ldr	r6, [r4, #32]
 8002964:	433b      	orrs	r3, r7
 8002966:	46b0      	mov	r8, r6
 8002968:	2680      	movs	r6, #128	; 0x80
 800296a:	4647      	mov	r7, r8
 800296c:	4037      	ands	r7, r6
 800296e:	4666      	mov	r6, ip
 8002970:	433b      	orrs	r3, r7
 8002972:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002974:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002976:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002978:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800297a:	4033      	ands	r3, r6
 800297c:	26f0      	movs	r6, #240	; 0xf0
 800297e:	0136      	lsls	r6, r6, #4
 8002980:	4030      	ands	r0, r6
 8002982:	4303      	orrs	r3, r0
 8002984:	2004      	movs	r0, #4
 8002986:	4001      	ands	r1, r0
 8002988:	430b      	orrs	r3, r1
 800298a:	2110      	movs	r1, #16
 800298c:	4029      	ands	r1, r5
 800298e:	430b      	orrs	r3, r1
 8002990:	4659      	mov	r1, fp
 8002992:	430b      	orrs	r3, r1
 8002994:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002996:	69d3      	ldr	r3, [r2, #28]
 8002998:	491c      	ldr	r1, [pc, #112]	; (8002a0c <HAL_SPI_Init+0x148>)
  return HAL_OK;
 800299a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800299c:	400b      	ands	r3, r1
 800299e:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029a0:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80029a2:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029a4:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029a6:	335d      	adds	r3, #93	; 0x5d
 80029a8:	54e2      	strb	r2, [r4, r3]
}
 80029aa:	bcf0      	pop	{r4, r5, r6, r7}
 80029ac:	46bb      	mov	fp, r7
 80029ae:	46b2      	mov	sl, r6
 80029b0:	46a9      	mov	r9, r5
 80029b2:	46a0      	mov	r8, r4
 80029b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029b6:	2382      	movs	r3, #130	; 0x82
 80029b8:	6842      	ldr	r2, [r0, #4]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	429a      	cmp	r2, r3
 80029be:	d091      	beq.n	80028e4 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c0:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029c2:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c4:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80029c6:	335d      	adds	r3, #93	; 0x5d
 80029c8:	5ce3      	ldrb	r3, [r4, r3]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d190      	bne.n	80028f2 <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 80029d0:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 80029d2:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80029d4:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 80029d6:	f7fe faaf 	bl	8000f38 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029da:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80029dc:	e789      	b.n	80028f2 <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029de:	4298      	cmp	r0, r3
 80029e0:	d006      	beq.n	80029f0 <HAL_SPI_Init+0x12c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	015b      	lsls	r3, r3, #5
 80029e6:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	469c      	mov	ip, r3
 80029ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80029ee:	e799      	b.n	8002924 <HAL_SPI_Init+0x60>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80029f4:	019b      	lsls	r3, r3, #6
 80029f6:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029fc:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029fe:	469b      	mov	fp, r3
 8002a00:	e790      	b.n	8002924 <HAL_SPI_Init+0x60>
    return HAL_ERROR;
 8002a02:	2001      	movs	r0, #1
 8002a04:	e7d1      	b.n	80029aa <HAL_SPI_Init+0xe6>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a06:	2300      	movs	r3, #0
 8002a08:	469b      	mov	fp, r3
 8002a0a:	e7ed      	b.n	80029e8 <HAL_SPI_Init+0x124>
 8002a0c:	fffff7ff 	.word	0xfffff7ff

08002a10 <HAL_SPI_TransmitReceive>:
{
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a12:	4647      	mov	r7, r8
 8002a14:	46ce      	mov	lr, r9
 8002a16:	b580      	push	{r7, lr}
 8002a18:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8002a1a:	235c      	movs	r3, #92	; 0x5c
{
 8002a1c:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8002a1e:	5cc2      	ldrb	r2, [r0, r3]
{
 8002a20:	0004      	movs	r4, r0
 8002a22:	4688      	mov	r8, r1
 8002a24:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8002a26:	2a01      	cmp	r2, #1
 8002a28:	d100      	bne.n	8002a2c <HAL_SPI_TransmitReceive+0x1c>
 8002a2a:	e0a7      	b.n	8002b7c <HAL_SPI_TransmitReceive+0x16c>
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8002a30:	f7fe fce0 	bl	80013f4 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002a34:	235d      	movs	r3, #93	; 0x5d
 8002a36:	5ce3      	ldrb	r3, [r4, r3]
  tickstart = HAL_GetTick();
 8002a38:	0006      	movs	r6, r0
  tmp_mode            = hspi->Init.Mode;
 8002a3a:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8002a3c:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d010      	beq.n	8002a64 <HAL_SPI_TransmitReceive+0x54>
 8002a42:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8002a44:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d006      	beq.n	8002a5a <HAL_SPI_TransmitReceive+0x4a>
  __HAL_UNLOCK(hspi);
 8002a4c:	235c      	movs	r3, #92	; 0x5c
 8002a4e:	2200      	movs	r2, #0
 8002a50:	54e2      	strb	r2, [r4, r3]
}
 8002a52:	bcc0      	pop	{r6, r7}
 8002a54:	46b9      	mov	r9, r7
 8002a56:	46b0      	mov	r8, r6
 8002a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a5a:	68a3      	ldr	r3, [r4, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f5      	bne.n	8002a4c <HAL_SPI_TransmitReceive+0x3c>
 8002a60:	2904      	cmp	r1, #4
 8002a62:	d1f3      	bne.n	8002a4c <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a64:	4643      	mov	r3, r8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d100      	bne.n	8002a6c <HAL_SPI_TransmitReceive+0x5c>
 8002a6a:	e085      	b.n	8002b78 <HAL_SPI_TransmitReceive+0x168>
 8002a6c:	464b      	mov	r3, r9
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d100      	bne.n	8002a74 <HAL_SPI_TransmitReceive+0x64>
 8002a72:	e081      	b.n	8002b78 <HAL_SPI_TransmitReceive+0x168>
 8002a74:	2f00      	cmp	r7, #0
 8002a76:	d100      	bne.n	8002a7a <HAL_SPI_TransmitReceive+0x6a>
 8002a78:	e07e      	b.n	8002b78 <HAL_SPI_TransmitReceive+0x168>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a7a:	235d      	movs	r3, #93	; 0x5d
 8002a7c:	5ce1      	ldrb	r1, [r4, r3]
 8002a7e:	2904      	cmp	r1, #4
 8002a80:	d001      	beq.n	8002a86 <HAL_SPI_TransmitReceive+0x76>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a82:	2105      	movs	r1, #5
 8002a84:	54e1      	strb	r1, [r4, r3]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a86:	4649      	mov	r1, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a88:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a8a:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002a8c:	2146      	movs	r1, #70	; 0x46
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a8e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8002a90:	5267      	strh	r7, [r4, r1]
  hspi->RxXferSize  = Size;
 8002a92:	3902      	subs	r1, #2
 8002a94:	5267      	strh	r7, [r4, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a96:	4641      	mov	r1, r8
  hspi->RxISR       = NULL;
 8002a98:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002a9a:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a9c:	23e0      	movs	r3, #224	; 0xe0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a9e:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002aa0:	68e1      	ldr	r1, [r4, #12]
  hspi->TxXferCount = Size;
 8002aa2:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002aa4:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4299      	cmp	r1, r3
 8002aaa:	d969      	bls.n	8002b80 <HAL_SPI_TransmitReceive+0x170>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	4866      	ldr	r0, [pc, #408]	; (8002c48 <HAL_SPI_TransmitReceive+0x238>)
 8002ab0:	6859      	ldr	r1, [r3, #4]
 8002ab2:	4001      	ands	r1, r0
 8002ab4:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ab6:	2140      	movs	r1, #64	; 0x40
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	4201      	tst	r1, r0
 8002abc:	d102      	bne.n	8002ac4 <HAL_SPI_TransmitReceive+0xb4>
    __HAL_SPI_ENABLE(hspi);
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	4301      	orrs	r1, r0
 8002ac2:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac4:	2a00      	cmp	r2, #0
 8002ac6:	d000      	beq.n	8002aca <HAL_SPI_TransmitReceive+0xba>
 8002ac8:	e0b6      	b.n	8002c38 <HAL_SPI_TransmitReceive+0x228>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aca:	4642      	mov	r2, r8
 8002acc:	8812      	ldrh	r2, [r2, #0]
 8002ace:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ad0:	4643      	mov	r3, r8
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002ad6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ae2:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ae4:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ae6:	4698      	mov	r8, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ae8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d102      	bne.n	8002af4 <HAL_SPI_TransmitReceive+0xe4>
 8002aee:	5be3      	ldrh	r3, [r4, r7]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d034      	beq.n	8002b5e <HAL_SPI_TransmitReceive+0x14e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002af4:	4641      	mov	r1, r8
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	4211      	tst	r1, r2
 8002afc:	d010      	beq.n	8002b20 <HAL_SPI_TransmitReceive+0x110>
 8002afe:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002b00:	2a00      	cmp	r2, #0
 8002b02:	d00d      	beq.n	8002b20 <HAL_SPI_TransmitReceive+0x110>
 8002b04:	464a      	mov	r2, r9
 8002b06:	2a01      	cmp	r2, #1
 8002b08:	d10a      	bne.n	8002b20 <HAL_SPI_TransmitReceive+0x110>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b0c:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b0e:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b10:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b12:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002b14:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002b16:	3a01      	subs	r2, #1
 8002b18:	b292      	uxth	r2, r2
 8002b1a:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	4691      	mov	r9, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b20:	2101      	movs	r1, #1
 8002b22:	0008      	movs	r0, r1
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	4010      	ands	r0, r2
 8002b28:	4211      	tst	r1, r2
 8002b2a:	d00c      	beq.n	8002b46 <HAL_SPI_TransmitReceive+0x136>
 8002b2c:	5be2      	ldrh	r2, [r4, r7]
 8002b2e:	2a00      	cmp	r2, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_SPI_TransmitReceive+0x136>
        txallowed = 1U;
 8002b32:	4681      	mov	r9, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002b3e:	5be3      	ldrh	r3, [r4, r7]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	53e3      	strh	r3, [r4, r7]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b46:	f7fe fc55 	bl	80013f4 <HAL_GetTick>
 8002b4a:	1b80      	subs	r0, r0, r6
 8002b4c:	42a8      	cmp	r0, r5
 8002b4e:	d3cb      	bcc.n	8002ae8 <HAL_SPI_TransmitReceive+0xd8>
 8002b50:	1c6b      	adds	r3, r5, #1
 8002b52:	d0c9      	beq.n	8002ae8 <HAL_SPI_TransmitReceive+0xd8>
        hspi->State = HAL_SPI_STATE_READY;
 8002b54:	235d      	movs	r3, #93	; 0x5d
 8002b56:	2201      	movs	r2, #1
        errorcode = HAL_TIMEOUT;
 8002b58:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8002b5a:	54e2      	strb	r2, [r4, r3]
        goto error;
 8002b5c:	e776      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x3c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b5e:	0032      	movs	r2, r6
 8002b60:	0029      	movs	r1, r5
 8002b62:	0020      	movs	r0, r4
 8002b64:	f7ff fe8c 	bl	8002880 <SPI_EndRxTxTransaction>
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d002      	beq.n	8002b72 <HAL_SPI_TransmitReceive+0x162>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b6c:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8002b6e:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b70:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b72:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d05b      	beq.n	8002c30 <HAL_SPI_TransmitReceive+0x220>
    errorcode = HAL_ERROR;
 8002b78:	2001      	movs	r0, #1
 8002b7a:	e767      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8002b7c:	2002      	movs	r0, #2
 8002b7e:	e768      	b.n	8002a52 <HAL_SPI_TransmitReceive+0x42>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b80:	2180      	movs	r1, #128	; 0x80
 8002b82:	6823      	ldr	r3, [r4, #0]
 8002b84:	0149      	lsls	r1, r1, #5
 8002b86:	6858      	ldr	r0, [r3, #4]
 8002b88:	4301      	orrs	r1, r0
 8002b8a:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b8c:	2140      	movs	r1, #64	; 0x40
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	4201      	tst	r1, r0
 8002b92:	d102      	bne.n	8002b9a <HAL_SPI_TransmitReceive+0x18a>
    __HAL_SPI_ENABLE(hspi);
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	4301      	orrs	r1, r0
 8002b98:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b9a:	2a00      	cmp	r2, #0
 8002b9c:	d150      	bne.n	8002c40 <HAL_SPI_TransmitReceive+0x230>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b9e:	4642      	mov	r2, r8
 8002ba0:	7812      	ldrb	r2, [r2, #0]
 8002ba2:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ba4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002baa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bb6:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bb8:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bba:	4698      	mov	r8, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bbc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d102      	bne.n	8002bc8 <HAL_SPI_TransmitReceive+0x1b8>
 8002bc2:	5be3      	ldrh	r3, [r4, r7]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ca      	beq.n	8002b5e <HAL_SPI_TransmitReceive+0x14e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bc8:	4641      	mov	r1, r8
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	4211      	tst	r1, r2
 8002bd0:	d012      	beq.n	8002bf8 <HAL_SPI_TransmitReceive+0x1e8>
 8002bd2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002bd4:	2a00      	cmp	r2, #0
 8002bd6:	d00f      	beq.n	8002bf8 <HAL_SPI_TransmitReceive+0x1e8>
 8002bd8:	464a      	mov	r2, r9
 8002bda:	2a01      	cmp	r2, #1
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_SPI_TransmitReceive+0x1e8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002be0:	7812      	ldrb	r2, [r2, #0]
 8002be2:	731a      	strb	r2, [r3, #12]
        txallowed = 0U;
 8002be4:	2200      	movs	r2, #0
 8002be6:	4691      	mov	r9, r2
        hspi->pTxBuffPtr++;
 8002be8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bea:	3301      	adds	r3, #1
 8002bec:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002bee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	0008      	movs	r0, r1
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	4010      	ands	r0, r2
 8002c00:	4211      	tst	r1, r2
 8002c02:	d00d      	beq.n	8002c20 <HAL_SPI_TransmitReceive+0x210>
 8002c04:	5be2      	ldrh	r2, [r4, r7]
 8002c06:	2a00      	cmp	r2, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_SPI_TransmitReceive+0x210>
        txallowed = 1U;
 8002c0a:	4681      	mov	r9, r0
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c0c:	7b1b      	ldrb	r3, [r3, #12]
 8002c0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c10:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8002c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c14:	3301      	adds	r3, #1
 8002c16:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002c18:	5be3      	ldrh	r3, [r4, r7]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	53e3      	strh	r3, [r4, r7]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c20:	f7fe fbe8 	bl	80013f4 <HAL_GetTick>
 8002c24:	1b80      	subs	r0, r0, r6
 8002c26:	42a8      	cmp	r0, r5
 8002c28:	d3c8      	bcc.n	8002bbc <HAL_SPI_TransmitReceive+0x1ac>
 8002c2a:	1c6b      	adds	r3, r5, #1
 8002c2c:	d0c6      	beq.n	8002bbc <HAL_SPI_TransmitReceive+0x1ac>
 8002c2e:	e791      	b.n	8002b54 <HAL_SPI_TransmitReceive+0x144>
    hspi->State = HAL_SPI_STATE_READY;
 8002c30:	2201      	movs	r2, #1
 8002c32:	335d      	adds	r3, #93	; 0x5d
 8002c34:	54e2      	strb	r2, [r4, r3]
 8002c36:	e709      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x3c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c38:	2f01      	cmp	r7, #1
 8002c3a:	d000      	beq.n	8002c3e <HAL_SPI_TransmitReceive+0x22e>
 8002c3c:	e74f      	b.n	8002ade <HAL_SPI_TransmitReceive+0xce>
 8002c3e:	e744      	b.n	8002aca <HAL_SPI_TransmitReceive+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c40:	2f01      	cmp	r7, #1
 8002c42:	d1b6      	bne.n	8002bb2 <HAL_SPI_TransmitReceive+0x1a2>
 8002c44:	e7ab      	b.n	8002b9e <HAL_SPI_TransmitReceive+0x18e>
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	ffffefff 	.word	0xffffefff

08002c4c <HAL_SPI_ErrorCallback>:
 8002c4c:	4770      	bx	lr
 8002c4e:	46c0      	nop			; (mov r8, r8)

08002c50 <HAL_SPI_IRQHandler>:
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c50:	2241      	movs	r2, #65	; 0x41
{
 8002c52:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8002c54:	6801      	ldr	r1, [r0, #0]
{
 8002c56:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8002c58:	6848      	ldr	r0, [r1, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002c5a:	688b      	ldr	r3, [r1, #8]
{
 8002c5c:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c5e:	401a      	ands	r2, r3
 8002c60:	2a01      	cmp	r2, #1
 8002c62:	d060      	beq.n	8002d26 <HAL_SPI_IRQHandler+0xd6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002c64:	079a      	lsls	r2, r3, #30
 8002c66:	d501      	bpl.n	8002c6c <HAL_SPI_IRQHandler+0x1c>
 8002c68:	0602      	lsls	r2, r0, #24
 8002c6a:	d462      	bmi.n	8002d32 <HAL_SPI_IRQHandler+0xe2>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002c6c:	22b0      	movs	r2, #176	; 0xb0
 8002c6e:	0052      	lsls	r2, r2, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c70:	4213      	tst	r3, r2
 8002c72:	d056      	beq.n	8002d22 <HAL_SPI_IRQHandler+0xd2>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002c74:	0682      	lsls	r2, r0, #26
 8002c76:	d554      	bpl.n	8002d22 <HAL_SPI_IRQHandler+0xd2>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c78:	065a      	lsls	r2, r3, #25
 8002c7a:	d50e      	bpl.n	8002c9a <HAL_SPI_IRQHandler+0x4a>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002c7c:	225d      	movs	r2, #93	; 0x5d
 8002c7e:	5ca2      	ldrb	r2, [r4, r2]
 8002c80:	2a03      	cmp	r2, #3
 8002c82:	d05e      	beq.n	8002d42 <HAL_SPI_IRQHandler+0xf2>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002c84:	2504      	movs	r5, #4
 8002c86:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002c88:	432a      	orrs	r2, r5
 8002c8a:	6622      	str	r2, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	9200      	str	r2, [sp, #0]
 8002c90:	68ca      	ldr	r2, [r1, #12]
 8002c92:	9200      	str	r2, [sp, #0]
 8002c94:	688a      	ldr	r2, [r1, #8]
 8002c96:	9200      	str	r2, [sp, #0]
 8002c98:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002c9a:	069a      	lsls	r2, r3, #26
 8002c9c:	d50c      	bpl.n	8002cb8 <HAL_SPI_IRQHandler+0x68>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c9e:	2501      	movs	r5, #1
 8002ca0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002ca2:	432a      	orrs	r2, r5
 8002ca4:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	9202      	str	r2, [sp, #8]
 8002caa:	688a      	ldr	r2, [r1, #8]
 8002cac:	353f      	adds	r5, #63	; 0x3f
 8002cae:	9202      	str	r2, [sp, #8]
 8002cb0:	680a      	ldr	r2, [r1, #0]
 8002cb2:	43aa      	bics	r2, r5
 8002cb4:	600a      	str	r2, [r1, #0]
 8002cb6:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002cb8:	05db      	lsls	r3, r3, #23
 8002cba:	d508      	bpl.n	8002cce <HAL_SPI_IRQHandler+0x7e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9303      	str	r3, [sp, #12]
 8002cc8:	688b      	ldr	r3, [r1, #8]
 8002cca:	9303      	str	r3, [sp, #12]
 8002ccc:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cce:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d026      	beq.n	8002d22 <HAL_SPI_IRQHandler+0xd2>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002cd4:	22e0      	movs	r2, #224	; 0xe0
 8002cd6:	684b      	ldr	r3, [r1, #4]
 8002cd8:	4393      	bics	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8002cdc:	235d      	movs	r3, #93	; 0x5d
 8002cde:	3adf      	subs	r2, #223	; 0xdf
 8002ce0:	54e2      	strb	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002ce2:	3b5a      	subs	r3, #90	; 0x5a
 8002ce4:	4203      	tst	r3, r0
 8002ce6:	d028      	beq.n	8002d3a <HAL_SPI_IRQHandler+0xea>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002ce8:	684a      	ldr	r2, [r1, #4]
        if (hspi->hdmarx != NULL)
 8002cea:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002cec:	439a      	bics	r2, r3
 8002cee:	604a      	str	r2, [r1, #4]
        if (hspi->hdmarx != NULL)
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d009      	beq.n	8002d08 <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cf4:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <HAL_SPI_IRQHandler+0x104>)
 8002cf6:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002cf8:	f7fe ff9e 	bl	8001c38 <HAL_DMA_Abort_IT>
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d00:	2240      	movs	r2, #64	; 0x40
 8002d02:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002d04:	4313      	orrs	r3, r2
 8002d06:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002d08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d0a:	2800      	cmp	r0, #0
 8002d0c:	d009      	beq.n	8002d22 <HAL_SPI_IRQHandler+0xd2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <HAL_SPI_IRQHandler+0x104>)
 8002d10:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002d12:	f7fe ff91 	bl	8001c38 <HAL_DMA_Abort_IT>
 8002d16:	2800      	cmp	r0, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_SPI_IRQHandler+0xd2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d1a:	2240      	movs	r2, #64	; 0x40
 8002d1c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	6623      	str	r3, [r4, #96]	; 0x60
}
 8002d22:	b005      	add	sp, #20
 8002d24:	bd30      	pop	{r4, r5, pc}
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d26:	0642      	lsls	r2, r0, #25
 8002d28:	d59c      	bpl.n	8002c64 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8002d2a:	0020      	movs	r0, r4
 8002d2c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002d2e:	4798      	blx	r3
    return;
 8002d30:	e7f7      	b.n	8002d22 <HAL_SPI_IRQHandler+0xd2>
    hspi->TxISR(hspi);
 8002d32:	0020      	movs	r0, r4
 8002d34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002d36:	4798      	blx	r3
    return;
 8002d38:	e7f3      	b.n	8002d22 <HAL_SPI_IRQHandler+0xd2>
        HAL_SPI_ErrorCallback(hspi);
 8002d3a:	0020      	movs	r0, r4
 8002d3c:	f7ff ff86 	bl	8002c4c <HAL_SPI_ErrorCallback>
 8002d40:	e7ef      	b.n	8002d22 <HAL_SPI_IRQHandler+0xd2>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d42:	2300      	movs	r3, #0
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	68cb      	ldr	r3, [r1, #12]
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	688b      	ldr	r3, [r1, #8]
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	9b01      	ldr	r3, [sp, #4]
        return;
 8002d50:	e7e7      	b.n	8002d22 <HAL_SPI_IRQHandler+0xd2>
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	08002d59 	.word	0x08002d59

08002d58 <SPI_DMAAbortOnError>:
  hspi->RxXferCount = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	2246      	movs	r2, #70	; 0x46
{
 8002d5c:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d5e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8002d60:	5283      	strh	r3, [r0, r2]
  hspi->TxXferCount = 0U;
 8002d62:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8002d64:	f7ff ff72 	bl	8002c4c <HAL_SPI_ErrorCallback>
}
 8002d68:	bd10      	pop	{r4, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)

08002d6c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d6c:	2201      	movs	r2, #1
{
 8002d6e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d70:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d72:	6a03      	ldr	r3, [r0, #32]
 8002d74:	4393      	bics	r3, r2
 8002d76:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002d78:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002d7a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002d7c:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d7e:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d80:	680d      	ldr	r5, [r1, #0]
 8002d82:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d84:	2502      	movs	r5, #2
 8002d86:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d88:	688d      	ldr	r5, [r1, #8]
 8002d8a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d8c:	4d0d      	ldr	r5, [pc, #52]	; (8002dc4 <TIM_OC1_SetConfig+0x58>)
 8002d8e:	42a8      	cmp	r0, r5
 8002d90:	d005      	beq.n	8002d9e <TIM_OC1_SetConfig+0x32>
 8002d92:	4d0d      	ldr	r5, [pc, #52]	; (8002dc8 <TIM_OC1_SetConfig+0x5c>)
 8002d94:	42a8      	cmp	r0, r5
 8002d96:	d002      	beq.n	8002d9e <TIM_OC1_SetConfig+0x32>
 8002d98:	4d0c      	ldr	r5, [pc, #48]	; (8002dcc <TIM_OC1_SetConfig+0x60>)
 8002d9a:	42a8      	cmp	r0, r5
 8002d9c:	d10b      	bne.n	8002db6 <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d9e:	2508      	movs	r5, #8
 8002da0:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002da2:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002da4:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8002da6:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002da8:	2504      	movs	r5, #4
 8002daa:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dac:	4d08      	ldr	r5, [pc, #32]	; (8002dd0 <TIM_OC1_SetConfig+0x64>)
 8002dae:	4025      	ands	r5, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002db0:	694c      	ldr	r4, [r1, #20]
 8002db2:	4334      	orrs	r4, r6
 8002db4:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002db6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002db8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dba:	684a      	ldr	r2, [r1, #4]
 8002dbc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dbe:	6203      	str	r3, [r0, #32]
}
 8002dc0:	bd70      	pop	{r4, r5, r6, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	40012c00 	.word	0x40012c00
 8002dc8:	40014400 	.word	0x40014400
 8002dcc:	40014800 	.word	0x40014800
 8002dd0:	fffffcff 	.word	0xfffffcff

08002dd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dd4:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dd6:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dd8:	6a03      	ldr	r3, [r0, #32]
 8002dda:	4a16      	ldr	r2, [pc, #88]	; (8002e34 <TIM_OC3_SetConfig+0x60>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002de0:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002de2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002de4:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002de6:	43ab      	bics	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002de8:	680d      	ldr	r5, [r1, #0]
 8002dea:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <TIM_OC3_SetConfig+0x64>)
 8002dee:	401a      	ands	r2, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002df0:	688b      	ldr	r3, [r1, #8]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002df6:	4a11      	ldr	r2, [pc, #68]	; (8002e3c <TIM_OC3_SetConfig+0x68>)
 8002df8:	4290      	cmp	r0, r2
 8002dfa:	d012      	beq.n	8002e22 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dfc:	4a10      	ldr	r2, [pc, #64]	; (8002e40 <TIM_OC3_SetConfig+0x6c>)
 8002dfe:	4290      	cmp	r0, r2
 8002e00:	d002      	beq.n	8002e08 <TIM_OC3_SetConfig+0x34>
 8002e02:	4a10      	ldr	r2, [pc, #64]	; (8002e44 <TIM_OC3_SetConfig+0x70>)
 8002e04:	4290      	cmp	r0, r2
 8002e06:	d106      	bne.n	8002e16 <TIM_OC3_SetConfig+0x42>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e08:	4a0f      	ldr	r2, [pc, #60]	; (8002e48 <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e0a:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e0c:	4022      	ands	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e0e:	698c      	ldr	r4, [r1, #24]
 8002e10:	4334      	orrs	r4, r6
 8002e12:	0124      	lsls	r4, r4, #4
 8002e14:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e16:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002e18:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002e1a:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002e1c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1e:	6203      	str	r3, [r0, #32]
}
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <TIM_OC3_SetConfig+0x78>)
 8002e24:	401a      	ands	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e26:	68cb      	ldr	r3, [r1, #12]
 8002e28:	021b      	lsls	r3, r3, #8
 8002e2a:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e2c:	4a08      	ldr	r2, [pc, #32]	; (8002e50 <TIM_OC3_SetConfig+0x7c>)
 8002e2e:	4013      	ands	r3, r2
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e30:	e7ea      	b.n	8002e08 <TIM_OC3_SetConfig+0x34>
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	fffffeff 	.word	0xfffffeff
 8002e38:	fffffdff 	.word	0xfffffdff
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	40014400 	.word	0x40014400
 8002e44:	40014800 	.word	0x40014800
 8002e48:	ffffcfff 	.word	0xffffcfff
 8002e4c:	fffff7ff 	.word	0xfffff7ff
 8002e50:	fffffbff 	.word	0xfffffbff

08002e54 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e54:	6a03      	ldr	r3, [r0, #32]
 8002e56:	4a12      	ldr	r2, [pc, #72]	; (8002ea0 <TIM_OC4_SetConfig+0x4c>)
{
 8002e58:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e5e:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e60:	4a10      	ldr	r2, [pc, #64]	; (8002ea4 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8002e62:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002e64:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e66:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e68:	680a      	ldr	r2, [r1, #0]
 8002e6a:	0212      	lsls	r2, r2, #8
 8002e6c:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <TIM_OC4_SetConfig+0x54>)
 8002e70:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e72:	688b      	ldr	r3, [r1, #8]
 8002e74:	031b      	lsls	r3, r3, #12
 8002e76:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e78:	4c0c      	ldr	r4, [pc, #48]	; (8002eac <TIM_OC4_SetConfig+0x58>)
 8002e7a:	42a0      	cmp	r0, r4
 8002e7c:	d005      	beq.n	8002e8a <TIM_OC4_SetConfig+0x36>
 8002e7e:	4c0c      	ldr	r4, [pc, #48]	; (8002eb0 <TIM_OC4_SetConfig+0x5c>)
 8002e80:	42a0      	cmp	r0, r4
 8002e82:	d002      	beq.n	8002e8a <TIM_OC4_SetConfig+0x36>
 8002e84:	4c0b      	ldr	r4, [pc, #44]	; (8002eb4 <TIM_OC4_SetConfig+0x60>)
 8002e86:	42a0      	cmp	r0, r4
 8002e88:	d104      	bne.n	8002e94 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e8a:	4c0b      	ldr	r4, [pc, #44]	; (8002eb8 <TIM_OC4_SetConfig+0x64>)
 8002e8c:	402c      	ands	r4, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e8e:	694d      	ldr	r5, [r1, #20]
 8002e90:	01ad      	lsls	r5, r5, #6
 8002e92:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e94:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e96:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e98:	684a      	ldr	r2, [r1, #4]
 8002e9a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e9c:	6203      	str	r3, [r0, #32]
}
 8002e9e:	bd30      	pop	{r4, r5, pc}
 8002ea0:	ffffefff 	.word	0xffffefff
 8002ea4:	ffff8cff 	.word	0xffff8cff
 8002ea8:	ffffdfff 	.word	0xffffdfff
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	40014400 	.word	0x40014400
 8002eb4:	40014800 	.word	0x40014800
 8002eb8:	ffffbfff 	.word	0xffffbfff

08002ebc <TIM_SlaveTimer_SetConfig.constprop.0>:

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ebc:	2370      	movs	r3, #112	; 0x70
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
 8002ebe:	b530      	push	{r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 8002ec0:	6804      	ldr	r4, [r0, #0]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002ec2:	2007      	movs	r0, #7
  tmpsmcr = htim->Instance->SMCR;
 8002ec4:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ec6:	439a      	bics	r2, r3
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002ec8:	684b      	ldr	r3, [r1, #4]
 8002eca:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002ecc:	4382      	bics	r2, r0
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002ece:	6808      	ldr	r0, [r1, #0]
 8002ed0:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ed2:	60a2      	str	r2, [r4, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002ed4:	2b50      	cmp	r3, #80	; 0x50
 8002ed6:	d026      	beq.n	8002f26 <TIM_SlaveTimer_SetConfig.constprop.0+0x6a>
 8002ed8:	d910      	bls.n	8002efc <TIM_SlaveTimer_SetConfig.constprop.0+0x40>
 8002eda:	2b60      	cmp	r3, #96	; 0x60
 8002edc:	d036      	beq.n	8002f4c <TIM_SlaveTimer_SetConfig.constprop.0+0x90>
 8002ede:	2b70      	cmp	r3, #112	; 0x70
 8002ee0:	d159      	bne.n	8002f96 <TIM_SlaveTimer_SetConfig.constprop.0+0xda>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ee2:	68a2      	ldr	r2, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee4:	4b2d      	ldr	r3, [pc, #180]	; (8002f9c <TIM_SlaveTimer_SetConfig.constprop.0+0xe0>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ee6:	6888      	ldr	r0, [r1, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee8:	401a      	ands	r2, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eea:	68cb      	ldr	r3, [r1, #12]
 8002eec:	6909      	ldr	r1, [r1, #16]
 8002eee:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 8002ef0:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ef2:	0209      	lsls	r1, r1, #8
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ef8:	60a3      	str	r3, [r4, #8]
}
 8002efa:	bd30      	pop	{r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d039      	beq.n	8002f74 <TIM_SlaveTimer_SetConfig.constprop.0+0xb8>
 8002f00:	2001      	movs	r0, #1
 8002f02:	2b40      	cmp	r3, #64	; 0x40
 8002f04:	d8f9      	bhi.n	8002efa <TIM_SlaveTimer_SetConfig.constprop.0+0x3e>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d00b      	beq.n	8002f22 <TIM_SlaveTimer_SetConfig.constprop.0+0x66>
 8002f0a:	d904      	bls.n	8002f16 <TIM_SlaveTimer_SetConfig.constprop.0+0x5a>
 8002f0c:	3b30      	subs	r3, #48	; 0x30
 8002f0e:	1e5a      	subs	r2, r3, #1
 8002f10:	4193      	sbcs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;
 8002f12:	b2d8      	uxtb	r0, r3
 8002f14:	e7f1      	b.n	8002efa <TIM_SlaveTimer_SetConfig.constprop.0+0x3e>
  switch (sSlaveConfig->InputTrigger)
 8002f16:	2210      	movs	r2, #16
 8002f18:	4393      	bics	r3, r2
 8002f1a:	1e5a      	subs	r2, r3, #1
 8002f1c:	4193      	sbcs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	b2d8      	uxtb	r0, r3
 8002f20:	e7eb      	b.n	8002efa <TIM_SlaveTimer_SetConfig.constprop.0+0x3e>
 8002f22:	2000      	movs	r0, #0
 8002f24:	e7e9      	b.n	8002efa <TIM_SlaveTimer_SetConfig.constprop.0+0x3e>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f26:	2501      	movs	r5, #1
                               sSlaveConfig->TriggerPolarity,
 8002f28:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8002f2a:	690b      	ldr	r3, [r1, #16]
  tmpccer = TIMx->CCER;
 8002f2c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f2e:	6a20      	ldr	r0, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f30:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f32:	43a8      	bics	r0, r5
 8002f34:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f36:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f38:	35ef      	adds	r5, #239	; 0xef
 8002f3a:	43a8      	bics	r0, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f3c:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f3e:	200a      	movs	r0, #10
 8002f40:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8002f42:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002f44:	61a3      	str	r3, [r4, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002f46:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8002f48:	6222      	str	r2, [r4, #32]
}
 8002f4a:	e7d6      	b.n	8002efa <TIM_SlaveTimer_SetConfig.constprop.0+0x3e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f4c:	2010      	movs	r0, #16
                               sSlaveConfig->TriggerPolarity,
 8002f4e:	688b      	ldr	r3, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8002f50:	690a      	ldr	r2, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f52:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f54:	4d12      	ldr	r5, [pc, #72]	; (8002fa0 <TIM_SlaveTimer_SetConfig.constprop.0+0xe4>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f56:	4381      	bics	r1, r0
 8002f58:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f5a:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f5c:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f5e:	4028      	ands	r0, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f60:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f62:	20a0      	movs	r0, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8002f64:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f66:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f68:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f6a:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8002f6c:	61a2      	str	r2, [r4, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6e:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8002f70:	6223      	str	r3, [r4, #32]
}
 8002f72:	e7c2      	b.n	8002efa <TIM_SlaveTimer_SetConfig.constprop.0+0x3e>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002f74:	2805      	cmp	r0, #5
 8002f76:	d00e      	beq.n	8002f96 <TIM_SlaveTimer_SetConfig.constprop.0+0xda>
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002f78:	2201      	movs	r2, #1
      tmpccer = htim->Instance->CCER;
 8002f7a:	6a20      	ldr	r0, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002f7c:	6a23      	ldr	r3, [r4, #32]
 8002f7e:	4393      	bics	r3, r2
 8002f80:	6223      	str	r3, [r4, #32]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f82:	23f0      	movs	r3, #240	; 0xf0
      tmpccmr1 = htim->Instance->CCMR1;
 8002f84:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f86:	439a      	bics	r2, r3
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002f88:	690b      	ldr	r3, [r1, #16]
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 = tmpccmr1;
 8002f8e:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8002f90:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8002f92:	2000      	movs	r0, #0
      break;
 8002f94:	e7b1      	b.n	8002efa <TIM_SlaveTimer_SetConfig.constprop.0+0x3e>
        return HAL_ERROR;
 8002f96:	2001      	movs	r0, #1
 8002f98:	e7af      	b.n	8002efa <TIM_SlaveTimer_SetConfig.constprop.0+0x3e>
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	ffff00ff 	.word	0xffff00ff
 8002fa0:	ffff0fff 	.word	0xffff0fff

08002fa4 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002fa4:	223d      	movs	r2, #61	; 0x3d
 8002fa6:	5c81      	ldrb	r1, [r0, r2]
{
 8002fa8:	0003      	movs	r3, r0
    return HAL_ERROR;
 8002faa:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8002fac:	2901      	cmp	r1, #1
 8002fae:	d110      	bne.n	8002fd2 <HAL_TIM_Base_Start+0x2e>
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb0:	3101      	adds	r1, #1
 8002fb2:	5499      	strb	r1, [r3, r2]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a0e      	ldr	r2, [pc, #56]	; (8002ff0 <HAL_TIM_Base_Start+0x4c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00b      	beq.n	8002fd4 <HAL_TIM_Base_Start+0x30>
 8002fbc:	2280      	movs	r2, #128	; 0x80
 8002fbe:	05d2      	lsls	r2, r2, #23
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d007      	beq.n	8002fd4 <HAL_TIM_Base_Start+0x30>
 8002fc4:	4a0b      	ldr	r2, [pc, #44]	; (8002ff4 <HAL_TIM_Base_Start+0x50>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d004      	beq.n	8002fd4 <HAL_TIM_Base_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4302      	orrs	r2, r0
  return HAL_OK;
 8002fce:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002fd0:	601a      	str	r2, [r3, #0]
}
 8002fd2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd4:	2207      	movs	r2, #7
 8002fd6:	6899      	ldr	r1, [r3, #8]
 8002fd8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fda:	2a06      	cmp	r2, #6
 8002fdc:	d005      	beq.n	8002fea <HAL_TIM_Base_Start+0x46>
      __HAL_TIM_ENABLE(htim);
 8002fde:	2101      	movs	r1, #1
 8002fe0:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8002fe2:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e7f3      	b.n	8002fd2 <HAL_TIM_Base_Start+0x2e>
  return HAL_OK;
 8002fea:	2000      	movs	r0, #0
 8002fec:	e7f1      	b.n	8002fd2 <HAL_TIM_Base_Start+0x2e>
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	40012c00 	.word	0x40012c00
 8002ff4:	40000400 	.word	0x40000400

08002ff8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002ff8:	223d      	movs	r2, #61	; 0x3d
 8002ffa:	5c81      	ldrb	r1, [r0, r2]
{
 8002ffc:	0003      	movs	r3, r0
    return HAL_ERROR;
 8002ffe:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8003000:	2901      	cmp	r1, #1
 8003002:	d113      	bne.n	800302c <HAL_TIM_Base_Start_IT+0x34>
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	3101      	adds	r1, #1
 8003006:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	4302      	orrs	r2, r0
 800300e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003010:	4a0d      	ldr	r2, [pc, #52]	; (8003048 <HAL_TIM_Base_Start_IT+0x50>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00b      	beq.n	800302e <HAL_TIM_Base_Start_IT+0x36>
 8003016:	2280      	movs	r2, #128	; 0x80
 8003018:	05d2      	lsls	r2, r2, #23
 800301a:	4293      	cmp	r3, r2
 800301c:	d007      	beq.n	800302e <HAL_TIM_Base_Start_IT+0x36>
 800301e:	4a0b      	ldr	r2, [pc, #44]	; (800304c <HAL_TIM_Base_Start_IT+0x54>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d004      	beq.n	800302e <HAL_TIM_Base_Start_IT+0x36>
    __HAL_TIM_ENABLE(htim);
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4302      	orrs	r2, r0
  return HAL_OK;
 8003028:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800302a:	601a      	str	r2, [r3, #0]
}
 800302c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800302e:	2207      	movs	r2, #7
 8003030:	6899      	ldr	r1, [r3, #8]
 8003032:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003034:	2a06      	cmp	r2, #6
 8003036:	d005      	beq.n	8003044 <HAL_TIM_Base_Start_IT+0x4c>
      __HAL_TIM_ENABLE(htim);
 8003038:	2101      	movs	r1, #1
 800303a:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800303c:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800303e:	430a      	orrs	r2, r1
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	e7f3      	b.n	800302c <HAL_TIM_Base_Start_IT+0x34>
  return HAL_OK;
 8003044:	2000      	movs	r0, #0
 8003046:	e7f1      	b.n	800302c <HAL_TIM_Base_Start_IT+0x34>
 8003048:	40012c00 	.word	0x40012c00
 800304c:	40000400 	.word	0x40000400

08003050 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003050:	2900      	cmp	r1, #0
 8003052:	d126      	bne.n	80030a2 <HAL_TIM_OC_Start+0x52>
 8003054:	233e      	movs	r3, #62	; 0x3e
 8003056:	5cc2      	ldrb	r2, [r0, r3]
 8003058:	2a01      	cmp	r2, #1
 800305a:	d12a      	bne.n	80030b2 <HAL_TIM_OC_Start+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800305c:	2202      	movs	r2, #2
 800305e:	54c2      	strb	r2, [r0, r3]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003060:	221f      	movs	r2, #31
 8003062:	4011      	ands	r1, r2
 8003064:	3a1e      	subs	r2, #30
 8003066:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003068:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800306a:	6a19      	ldr	r1, [r3, #32]
 800306c:	4391      	bics	r1, r2
 800306e:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003070:	6a19      	ldr	r1, [r3, #32]
 8003072:	430a      	orrs	r2, r1
 8003074:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003076:	4a23      	ldr	r2, [pc, #140]	; (8003104 <HAL_TIM_OC_Start+0xb4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d024      	beq.n	80030c6 <HAL_TIM_OC_Start+0x76>
 800307c:	4a22      	ldr	r2, [pc, #136]	; (8003108 <HAL_TIM_OC_Start+0xb8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d02d      	beq.n	80030de <HAL_TIM_OC_Start+0x8e>
 8003082:	4a22      	ldr	r2, [pc, #136]	; (800310c <HAL_TIM_OC_Start+0xbc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d02a      	beq.n	80030de <HAL_TIM_OC_Start+0x8e>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003088:	2280      	movs	r2, #128	; 0x80
 800308a:	05d2      	lsls	r2, r2, #23
 800308c:	4293      	cmp	r3, r2
 800308e:	d01f      	beq.n	80030d0 <HAL_TIM_OC_Start+0x80>
 8003090:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <HAL_TIM_OC_Start+0xc0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d01c      	beq.n	80030d0 <HAL_TIM_OC_Start+0x80>
    __HAL_TIM_ENABLE(htim);
 8003096:	2101      	movs	r1, #1
  return HAL_OK;
 8003098:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	601a      	str	r2, [r3, #0]
}
 80030a0:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030a2:	2904      	cmp	r1, #4
 80030a4:	d021      	beq.n	80030ea <HAL_TIM_OC_Start+0x9a>
 80030a6:	2908      	cmp	r1, #8
 80030a8:	d027      	beq.n	80030fa <HAL_TIM_OC_Start+0xaa>
 80030aa:	2341      	movs	r3, #65	; 0x41
 80030ac:	5cc2      	ldrb	r2, [r0, r3]
 80030ae:	2a01      	cmp	r2, #1
 80030b0:	d001      	beq.n	80030b6 <HAL_TIM_OC_Start+0x66>
    return HAL_ERROR;
 80030b2:	2001      	movs	r0, #1
 80030b4:	e7f4      	b.n	80030a0 <HAL_TIM_OC_Start+0x50>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030b6:	2904      	cmp	r1, #4
 80030b8:	d01b      	beq.n	80030f2 <HAL_TIM_OC_Start+0xa2>
 80030ba:	2908      	cmp	r1, #8
 80030bc:	d1ce      	bne.n	800305c <HAL_TIM_OC_Start+0xc>
 80030be:	2340      	movs	r3, #64	; 0x40
 80030c0:	2202      	movs	r2, #2
 80030c2:	54c2      	strb	r2, [r0, r3]
 80030c4:	e7cc      	b.n	8003060 <HAL_TIM_OC_Start+0x10>
    __HAL_TIM_MOE_ENABLE(htim);
 80030c6:	2280      	movs	r2, #128	; 0x80
 80030c8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80030ca:	0212      	lsls	r2, r2, #8
 80030cc:	430a      	orrs	r2, r1
 80030ce:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030d0:	2207      	movs	r2, #7
 80030d2:	6899      	ldr	r1, [r3, #8]
 80030d4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d6:	2a06      	cmp	r2, #6
 80030d8:	d1dd      	bne.n	8003096 <HAL_TIM_OC_Start+0x46>
  return HAL_OK;
 80030da:	2000      	movs	r0, #0
 80030dc:	e7e0      	b.n	80030a0 <HAL_TIM_OC_Start+0x50>
    __HAL_TIM_MOE_ENABLE(htim);
 80030de:	2280      	movs	r2, #128	; 0x80
 80030e0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80030e2:	0212      	lsls	r2, r2, #8
 80030e4:	430a      	orrs	r2, r1
 80030e6:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e8:	e7ce      	b.n	8003088 <HAL_TIM_OC_Start+0x38>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030ea:	233f      	movs	r3, #63	; 0x3f
 80030ec:	5cc3      	ldrb	r3, [r0, r3]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d1df      	bne.n	80030b2 <HAL_TIM_OC_Start+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030f2:	233f      	movs	r3, #63	; 0x3f
 80030f4:	2202      	movs	r2, #2
 80030f6:	54c2      	strb	r2, [r0, r3]
 80030f8:	e7b2      	b.n	8003060 <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030fa:	2340      	movs	r3, #64	; 0x40
 80030fc:	5cc3      	ldrb	r3, [r0, r3]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d0dd      	beq.n	80030be <HAL_TIM_OC_Start+0x6e>
 8003102:	e7d6      	b.n	80030b2 <HAL_TIM_OC_Start+0x62>
 8003104:	40012c00 	.word	0x40012c00
 8003108:	40014400 	.word	0x40014400
 800310c:	40014800 	.word	0x40014800
 8003110:	40000400 	.word	0x40000400

08003114 <HAL_TIM_PWM_MspInit>:
 8003114:	4770      	bx	lr
 8003116:	46c0      	nop			; (mov r8, r8)

08003118 <HAL_TIM_PWM_Start>:
 8003118:	b510      	push	{r4, lr}
 800311a:	f7ff ff99 	bl	8003050 <HAL_TIM_OC_Start>
 800311e:	bd10      	pop	{r4, pc}

08003120 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003120:	233c      	movs	r3, #60	; 0x3c
{
 8003122:	b570      	push	{r4, r5, r6, lr}
 8003124:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8003126:	5cc0      	ldrb	r0, [r0, r3]
 8003128:	2801      	cmp	r0, #1
 800312a:	d100      	bne.n	800312e <HAL_TIM_ConfigClockSource+0xe>
 800312c:	e075      	b.n	800321a <HAL_TIM_ConfigClockSource+0xfa>
 800312e:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003130:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003132:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8003134:	3301      	adds	r3, #1
 8003136:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8003138:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800313a:	4d52      	ldr	r5, [pc, #328]	; (8003284 <HAL_TIM_ConfigClockSource+0x164>)
  tmpsmcr = htim->Instance->SMCR;
 800313c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800313e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8003140:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003142:	680b      	ldr	r3, [r1, #0]
 8003144:	2b60      	cmp	r3, #96	; 0x60
 8003146:	d100      	bne.n	800314a <HAL_TIM_ConfigClockSource+0x2a>
 8003148:	e069      	b.n	800321e <HAL_TIM_ConfigClockSource+0xfe>
 800314a:	d823      	bhi.n	8003194 <HAL_TIM_ConfigClockSource+0x74>
 800314c:	2b40      	cmp	r3, #64	; 0x40
 800314e:	d100      	bne.n	8003152 <HAL_TIM_ConfigClockSource+0x32>
 8003150:	e07f      	b.n	8003252 <HAL_TIM_ConfigClockSource+0x132>
 8003152:	d952      	bls.n	80031fa <HAL_TIM_ConfigClockSource+0xda>
 8003154:	2b50      	cmp	r3, #80	; 0x50
 8003156:	d13b      	bne.n	80031d0 <HAL_TIM_ConfigClockSource+0xb0>
                               sClockSourceConfig->ClockPolarity,
 8003158:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800315a:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 800315c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800315e:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003160:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003162:	43a6      	bics	r6, r4
 8003164:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003166:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8003168:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800316a:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800316c:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800316e:	240a      	movs	r4, #10
 8003170:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8003172:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8003174:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003176:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003178:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800317a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800317c:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800317e:	3919      	subs	r1, #25
 8003180:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003182:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003184:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003186:	233d      	movs	r3, #61	; 0x3d
 8003188:	2101      	movs	r1, #1
 800318a:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 800318c:	2100      	movs	r1, #0
 800318e:	3b01      	subs	r3, #1
 8003190:	54d1      	strb	r1, [r2, r3]
}
 8003192:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003194:	2480      	movs	r4, #128	; 0x80
 8003196:	0164      	lsls	r4, r4, #5
 8003198:	42a3      	cmp	r3, r4
 800319a:	d03c      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0xf6>
 800319c:	2480      	movs	r4, #128	; 0x80
 800319e:	01a4      	lsls	r4, r4, #6
 80031a0:	42a3      	cmp	r3, r4
 80031a2:	d117      	bne.n	80031d4 <HAL_TIM_ConfigClockSource+0xb4>
  tmpsmcr = TIMx->SMCR;
 80031a4:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a6:	4b38      	ldr	r3, [pc, #224]	; (8003288 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031a8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031aa:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031ac:	688b      	ldr	r3, [r1, #8]
 80031ae:	68c9      	ldr	r1, [r1, #12]
 80031b0:	432b      	orrs	r3, r5
 80031b2:	0209      	lsls	r1, r1, #8
 80031b4:	430b      	orrs	r3, r1
 80031b6:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 80031b8:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	6881      	ldr	r1, [r0, #8]
 80031be:	01db      	lsls	r3, r3, #7
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80031c4:	2000      	movs	r0, #0
      break;
 80031c6:	e7de      	b.n	8003186 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80031c8:	2110      	movs	r1, #16
 80031ca:	001c      	movs	r4, r3
 80031cc:	438c      	bics	r4, r1
 80031ce:	d019      	beq.n	8003204 <HAL_TIM_ConfigClockSource+0xe4>
 80031d0:	2001      	movs	r0, #1
 80031d2:	e7d8      	b.n	8003186 <HAL_TIM_ConfigClockSource+0x66>
 80031d4:	2b70      	cmp	r3, #112	; 0x70
 80031d6:	d1fb      	bne.n	80031d0 <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr = TIMx->SMCR;
 80031d8:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031da:	4b2b      	ldr	r3, [pc, #172]	; (8003288 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031dc:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031de:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031e0:	688b      	ldr	r3, [r1, #8]
 80031e2:	68c9      	ldr	r1, [r1, #12]
 80031e4:	432b      	orrs	r3, r5
 80031e6:	0209      	lsls	r1, r1, #8
 80031e8:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ea:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031ec:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 80031ee:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 80031f0:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031f2:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80031f4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80031f6:	2000      	movs	r0, #0
      break;
 80031f8:	e7c5      	b.n	8003186 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d002      	beq.n	8003204 <HAL_TIM_ConfigClockSource+0xe4>
 80031fe:	d9e3      	bls.n	80031c8 <HAL_TIM_ConfigClockSource+0xa8>
 8003200:	2b30      	cmp	r3, #48	; 0x30
 8003202:	d1e5      	bne.n	80031d0 <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr &= ~TIM_SMCR_TS;
 8003204:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003206:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003208:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800320a:	430b      	orrs	r3, r1
 800320c:	2107      	movs	r1, #7
 800320e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003210:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003212:	2000      	movs	r0, #0
}
 8003214:	e7b7      	b.n	8003186 <HAL_TIM_ConfigClockSource+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8003216:	2000      	movs	r0, #0
 8003218:	e7b5      	b.n	8003186 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 800321a:	2002      	movs	r0, #2
 800321c:	e7b9      	b.n	8003192 <HAL_TIM_ConfigClockSource+0x72>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800321e:	2510      	movs	r5, #16
 8003220:	6a04      	ldr	r4, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8003222:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003224:	43ac      	bics	r4, r5
                               sClockSourceConfig->ClockFilter);
 8003226:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003228:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322a:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800322c:	4e17      	ldr	r6, [pc, #92]	; (800328c <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800322e:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003230:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003232:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003234:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8003236:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8003238:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800323a:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800323c:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	4323      	orrs	r3, r4
  TIMx->CCER = tmpccer;
 8003242:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003244:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003246:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003248:	3909      	subs	r1, #9
 800324a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800324c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800324e:	2000      	movs	r0, #0
}
 8003250:	e799      	b.n	8003186 <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 8003252:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003254:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8003256:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003258:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800325a:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800325c:	43a6      	bics	r6, r4
 800325e:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003260:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8003262:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003264:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003266:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003268:	240a      	movs	r4, #10
 800326a:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800326c:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 800326e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003270:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003272:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003274:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003276:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003278:	3929      	subs	r1, #41	; 0x29
 800327a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800327c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	2000      	movs	r0, #0
}
 8003280:	e781      	b.n	8003186 <HAL_TIM_ConfigClockSource+0x66>
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	ffff0088 	.word	0xffff0088
 8003288:	ffff00ff 	.word	0xffff00ff
 800328c:	ffff0fff 	.word	0xffff0fff

08003290 <HAL_TIM_SlaveConfigSynchro>:
{
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003292:	253c      	movs	r5, #60	; 0x3c
 8003294:	5d43      	ldrb	r3, [r0, r5]
{
 8003296:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8003298:	2b01      	cmp	r3, #1
 800329a:	d019      	beq.n	80032d0 <HAL_TIM_SlaveConfigSynchro+0x40>
 800329c:	2701      	movs	r7, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800329e:	263d      	movs	r6, #61	; 0x3d
 80032a0:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80032a2:	5547      	strb	r7, [r0, r5]
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	5583      	strb	r3, [r0, r6]
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80032a6:	f7ff fe09 	bl	8002ebc <TIM_SlaveTimer_SetConfig.constprop.0>
 80032aa:	2800      	cmp	r0, #0
 80032ac:	d10b      	bne.n	80032c6 <HAL_TIM_SlaveConfigSynchro+0x36>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80032ae:	2140      	movs	r1, #64	; 0x40
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	438a      	bics	r2, r1
 80032b6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	4906      	ldr	r1, [pc, #24]	; (80032d4 <HAL_TIM_SlaveConfigSynchro+0x44>)
 80032bc:	400a      	ands	r2, r1
 80032be:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80032c0:	55a7      	strb	r7, [r4, r6]
  __HAL_UNLOCK(htim);
 80032c2:	5560      	strb	r0, [r4, r5]
}
 80032c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(htim);
 80032c6:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 80032c8:	55a7      	strb	r7, [r4, r6]
    return HAL_ERROR;
 80032ca:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80032cc:	5563      	strb	r3, [r4, r5]
    return HAL_ERROR;
 80032ce:	e7f9      	b.n	80032c4 <HAL_TIM_SlaveConfigSynchro+0x34>
  __HAL_LOCK(htim);
 80032d0:	2002      	movs	r0, #2
 80032d2:	e7f7      	b.n	80032c4 <HAL_TIM_SlaveConfigSynchro+0x34>
 80032d4:	ffffbfff 	.word	0xffffbfff

080032d8 <HAL_TIM_OC_DelayElapsedCallback>:
 80032d8:	4770      	bx	lr
 80032da:	46c0      	nop			; (mov r8, r8)

080032dc <HAL_TIM_IC_CaptureCallback>:
 80032dc:	4770      	bx	lr
 80032de:	46c0      	nop			; (mov r8, r8)

080032e0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80032e0:	4770      	bx	lr
 80032e2:	46c0      	nop			; (mov r8, r8)

080032e4 <HAL_TIM_TriggerCallback>:
 80032e4:	4770      	bx	lr
 80032e6:	46c0      	nop			; (mov r8, r8)

080032e8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032e8:	2202      	movs	r2, #2
 80032ea:	6803      	ldr	r3, [r0, #0]
{
 80032ec:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032ee:	6919      	ldr	r1, [r3, #16]
{
 80032f0:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032f2:	420a      	tst	r2, r1
 80032f4:	d002      	beq.n	80032fc <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032f6:	68d9      	ldr	r1, [r3, #12]
 80032f8:	420a      	tst	r2, r1
 80032fa:	d165      	bne.n	80033c8 <HAL_TIM_IRQHandler+0xe0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032fc:	2204      	movs	r2, #4
 80032fe:	6919      	ldr	r1, [r3, #16]
 8003300:	420a      	tst	r2, r1
 8003302:	d002      	beq.n	800330a <HAL_TIM_IRQHandler+0x22>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003304:	68d9      	ldr	r1, [r3, #12]
 8003306:	420a      	tst	r2, r1
 8003308:	d14b      	bne.n	80033a2 <HAL_TIM_IRQHandler+0xba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800330a:	2208      	movs	r2, #8
 800330c:	6919      	ldr	r1, [r3, #16]
 800330e:	420a      	tst	r2, r1
 8003310:	d002      	beq.n	8003318 <HAL_TIM_IRQHandler+0x30>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003312:	68d9      	ldr	r1, [r3, #12]
 8003314:	420a      	tst	r2, r1
 8003316:	d133      	bne.n	8003380 <HAL_TIM_IRQHandler+0x98>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003318:	2210      	movs	r2, #16
 800331a:	6919      	ldr	r1, [r3, #16]
 800331c:	420a      	tst	r2, r1
 800331e:	d002      	beq.n	8003326 <HAL_TIM_IRQHandler+0x3e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003320:	68d9      	ldr	r1, [r3, #12]
 8003322:	420a      	tst	r2, r1
 8003324:	d11c      	bne.n	8003360 <HAL_TIM_IRQHandler+0x78>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003326:	2201      	movs	r2, #1
 8003328:	6919      	ldr	r1, [r3, #16]
 800332a:	420a      	tst	r2, r1
 800332c:	d002      	beq.n	8003334 <HAL_TIM_IRQHandler+0x4c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800332e:	68d9      	ldr	r1, [r3, #12]
 8003330:	420a      	tst	r2, r1
 8003332:	d15c      	bne.n	80033ee <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003334:	2280      	movs	r2, #128	; 0x80
 8003336:	6919      	ldr	r1, [r3, #16]
 8003338:	420a      	tst	r2, r1
 800333a:	d002      	beq.n	8003342 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800333c:	68d9      	ldr	r1, [r3, #12]
 800333e:	420a      	tst	r2, r1
 8003340:	d15c      	bne.n	80033fc <HAL_TIM_IRQHandler+0x114>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003342:	2240      	movs	r2, #64	; 0x40
 8003344:	6919      	ldr	r1, [r3, #16]
 8003346:	420a      	tst	r2, r1
 8003348:	d002      	beq.n	8003350 <HAL_TIM_IRQHandler+0x68>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800334a:	68d9      	ldr	r1, [r3, #12]
 800334c:	420a      	tst	r2, r1
 800334e:	d15d      	bne.n	800340c <HAL_TIM_IRQHandler+0x124>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003350:	2220      	movs	r2, #32
 8003352:	6919      	ldr	r1, [r3, #16]
 8003354:	420a      	tst	r2, r1
 8003356:	d002      	beq.n	800335e <HAL_TIM_IRQHandler+0x76>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003358:	68d9      	ldr	r1, [r3, #12]
 800335a:	420a      	tst	r2, r1
 800335c:	d141      	bne.n	80033e2 <HAL_TIM_IRQHandler+0xfa>
}
 800335e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003360:	3a21      	subs	r2, #33	; 0x21
 8003362:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003364:	3219      	adds	r2, #25
 8003366:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003368:	69da      	ldr	r2, [r3, #28]
 800336a:	23c0      	movs	r3, #192	; 0xc0
 800336c:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800336e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003370:	421a      	tst	r2, r3
 8003372:	d05e      	beq.n	8003432 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003374:	f7ff ffb2 	bl	80032dc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003378:	2300      	movs	r3, #0
 800337a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	e7d2      	b.n	8003326 <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003380:	3a11      	subs	r2, #17
 8003382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003384:	320d      	adds	r2, #13
 8003386:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003388:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800338c:	079b      	lsls	r3, r3, #30
 800338e:	d14d      	bne.n	800342c <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003390:	f7ff ffa2 	bl	80032d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003394:	0020      	movs	r0, r4
 8003396:	f7ff ffa3 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339a:	2300      	movs	r3, #0
 800339c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	e7ba      	b.n	8003318 <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033a2:	3a09      	subs	r2, #9
 80033a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a6:	3207      	adds	r2, #7
 80033a8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033aa:	699a      	ldr	r2, [r3, #24]
 80033ac:	23c0      	movs	r3, #192	; 0xc0
 80033ae:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80033b0:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b2:	421a      	tst	r2, r3
 80033b4:	d137      	bne.n	8003426 <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	f7ff ff8f 	bl	80032d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ba:	0020      	movs	r0, r4
 80033bc:	f7ff ff90 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c0:	2300      	movs	r3, #0
 80033c2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	e7a0      	b.n	800330a <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033c8:	3a05      	subs	r2, #5
 80033ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033cc:	3204      	adds	r2, #4
 80033ce:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	079b      	lsls	r3, r3, #30
 80033d4:	d021      	beq.n	800341a <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 80033d6:	f7ff ff81 	bl	80032dc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033da:	2300      	movs	r3, #0
 80033dc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	e78c      	b.n	80032fc <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033e2:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 80033e4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80033e8:	f000 fa1c 	bl	8003824 <HAL_TIMEx_CommutCallback>
}
 80033ec:	e7b7      	b.n	800335e <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033ee:	3a03      	subs	r2, #3
 80033f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80033f2:	0020      	movs	r0, r4
 80033f4:	f7fd fa22 	bl	800083c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	e79b      	b.n	8003334 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033fc:	3a02      	subs	r2, #2
 80033fe:	3aff      	subs	r2, #255	; 0xff
 8003400:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003402:	0020      	movs	r0, r4
 8003404:	f000 fa10 	bl	8003828 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	e79a      	b.n	8003342 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800340c:	3a81      	subs	r2, #129	; 0x81
 800340e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003410:	0020      	movs	r0, r4
 8003412:	f7ff ff67 	bl	80032e4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	e79a      	b.n	8003350 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	f7ff ff5d 	bl	80032d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800341e:	0020      	movs	r0, r4
 8003420:	f7ff ff5e 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003424:	e7d9      	b.n	80033da <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8003426:	f7ff ff59 	bl	80032dc <HAL_TIM_IC_CaptureCallback>
 800342a:	e7c9      	b.n	80033c0 <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 800342c:	f7ff ff56 	bl	80032dc <HAL_TIM_IC_CaptureCallback>
 8003430:	e7b3      	b.n	800339a <HAL_TIM_IRQHandler+0xb2>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003432:	f7ff ff51 	bl	80032d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003436:	0020      	movs	r0, r4
 8003438:	f7ff ff52 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
 800343c:	e79c      	b.n	8003378 <HAL_TIM_IRQHandler+0x90>
 800343e:	46c0      	nop			; (mov r8, r8)

08003440 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003440:	4a1e      	ldr	r2, [pc, #120]	; (80034bc <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8003442:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003444:	4290      	cmp	r0, r2
 8003446:	d033      	beq.n	80034b0 <TIM_Base_SetConfig+0x70>
 8003448:	2280      	movs	r2, #128	; 0x80
 800344a:	05d2      	lsls	r2, r2, #23
 800344c:	4290      	cmp	r0, r2
 800344e:	d01b      	beq.n	8003488 <TIM_Base_SetConfig+0x48>
 8003450:	4a1b      	ldr	r2, [pc, #108]	; (80034c0 <TIM_Base_SetConfig+0x80>)
 8003452:	4290      	cmp	r0, r2
 8003454:	d018      	beq.n	8003488 <TIM_Base_SetConfig+0x48>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003456:	4a1b      	ldr	r2, [pc, #108]	; (80034c4 <TIM_Base_SetConfig+0x84>)
 8003458:	4290      	cmp	r0, r2
 800345a:	d019      	beq.n	8003490 <TIM_Base_SetConfig+0x50>
 800345c:	4a1a      	ldr	r2, [pc, #104]	; (80034c8 <TIM_Base_SetConfig+0x88>)
 800345e:	4290      	cmp	r0, r2
 8003460:	d002      	beq.n	8003468 <TIM_Base_SetConfig+0x28>
 8003462:	4a1a      	ldr	r2, [pc, #104]	; (80034cc <TIM_Base_SetConfig+0x8c>)
 8003464:	4290      	cmp	r0, r2
 8003466:	d117      	bne.n	8003498 <TIM_Base_SetConfig+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003468:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <TIM_Base_SetConfig+0x90>)
 800346a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800346c:	68ca      	ldr	r2, [r1, #12]
 800346e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003470:	2280      	movs	r2, #128	; 0x80
 8003472:	4393      	bics	r3, r2
 8003474:	694a      	ldr	r2, [r1, #20]
 8003476:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003478:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800347a:	688b      	ldr	r3, [r1, #8]
 800347c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800347e:	680b      	ldr	r3, [r1, #0]
 8003480:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003482:	690b      	ldr	r3, [r1, #16]
 8003484:	6303      	str	r3, [r0, #48]	; 0x30
 8003486:	e010      	b.n	80034aa <TIM_Base_SetConfig+0x6a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003488:	2270      	movs	r2, #112	; 0x70
 800348a:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800348c:	684a      	ldr	r2, [r1, #4]
 800348e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003490:	4a0f      	ldr	r2, [pc, #60]	; (80034d0 <TIM_Base_SetConfig+0x90>)
 8003492:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003494:	68ca      	ldr	r2, [r1, #12]
 8003496:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	4393      	bics	r3, r2
 800349c:	694a      	ldr	r2, [r1, #20]
 800349e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80034a0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034a2:	688b      	ldr	r3, [r1, #8]
 80034a4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80034a6:	680b      	ldr	r3, [r1, #0]
 80034a8:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80034aa:	2301      	movs	r3, #1
 80034ac:	6143      	str	r3, [r0, #20]
}
 80034ae:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034b0:	2270      	movs	r2, #112	; 0x70
 80034b2:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80034b4:	684a      	ldr	r2, [r1, #4]
 80034b6:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80034b8:	e7d6      	b.n	8003468 <TIM_Base_SetConfig+0x28>
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	40012c00 	.word	0x40012c00
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40002000 	.word	0x40002000
 80034c8:	40014400 	.word	0x40014400
 80034cc:	40014800 	.word	0x40014800
 80034d0:	fffffcff 	.word	0xfffffcff

080034d4 <HAL_TIM_Base_Init>:
{
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80034d8:	d026      	beq.n	8003528 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80034da:	233d      	movs	r3, #61	; 0x3d
 80034dc:	5cc3      	ldrb	r3, [r0, r3]
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01c      	beq.n	800351e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	2302      	movs	r3, #2
 80034e6:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e8:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80034ea:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ec:	c901      	ldmia	r1!, {r0}
 80034ee:	f7ff ffa7 	bl	8003440 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f2:	2301      	movs	r3, #1
 80034f4:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 80034f6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fa:	3a08      	subs	r2, #8
 80034fc:	54a3      	strb	r3, [r4, r2]
 80034fe:	3201      	adds	r2, #1
 8003500:	54a3      	strb	r3, [r4, r2]
 8003502:	3201      	adds	r2, #1
 8003504:	54a3      	strb	r3, [r4, r2]
 8003506:	3201      	adds	r2, #1
 8003508:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800350a:	3201      	adds	r2, #1
 800350c:	54a3      	strb	r3, [r4, r2]
 800350e:	3201      	adds	r2, #1
 8003510:	54a3      	strb	r3, [r4, r2]
 8003512:	3201      	adds	r2, #1
 8003514:	54a3      	strb	r3, [r4, r2]
 8003516:	3201      	adds	r2, #1
 8003518:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800351a:	5563      	strb	r3, [r4, r5]
}
 800351c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800351e:	333c      	adds	r3, #60	; 0x3c
 8003520:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8003522:	f7fd fd43 	bl	8000fac <HAL_TIM_Base_MspInit>
 8003526:	e7dd      	b.n	80034e4 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8003528:	2001      	movs	r0, #1
 800352a:	e7f7      	b.n	800351c <HAL_TIM_Base_Init+0x48>

0800352c <HAL_TIM_PWM_Init>:
{
 800352c:	b570      	push	{r4, r5, r6, lr}
 800352e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003530:	d026      	beq.n	8003580 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003532:	233d      	movs	r3, #61	; 0x3d
 8003534:	5cc3      	ldrb	r3, [r0, r3]
 8003536:	b2da      	uxtb	r2, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01c      	beq.n	8003576 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	2302      	movs	r3, #2
 800353e:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003540:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003542:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003544:	c901      	ldmia	r1!, {r0}
 8003546:	f7ff ff7b 	bl	8003440 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800354a:	2301      	movs	r3, #1
 800354c:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 800354e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003550:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003552:	3a08      	subs	r2, #8
 8003554:	54a3      	strb	r3, [r4, r2]
 8003556:	3201      	adds	r2, #1
 8003558:	54a3      	strb	r3, [r4, r2]
 800355a:	3201      	adds	r2, #1
 800355c:	54a3      	strb	r3, [r4, r2]
 800355e:	3201      	adds	r2, #1
 8003560:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003562:	3201      	adds	r2, #1
 8003564:	54a3      	strb	r3, [r4, r2]
 8003566:	3201      	adds	r2, #1
 8003568:	54a3      	strb	r3, [r4, r2]
 800356a:	3201      	adds	r2, #1
 800356c:	54a3      	strb	r3, [r4, r2]
 800356e:	3201      	adds	r2, #1
 8003570:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003572:	5563      	strb	r3, [r4, r5]
}
 8003574:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003576:	333c      	adds	r3, #60	; 0x3c
 8003578:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 800357a:	f7ff fdcb 	bl	8003114 <HAL_TIM_PWM_MspInit>
 800357e:	e7dd      	b.n	800353c <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8003580:	2001      	movs	r0, #1
 8003582:	e7f7      	b.n	8003574 <HAL_TIM_PWM_Init+0x48>

08003584 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003584:	2210      	movs	r2, #16
 8003586:	6a03      	ldr	r3, [r0, #32]
{
 8003588:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800358a:	4393      	bics	r3, r2
 800358c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800358e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003590:	4d15      	ldr	r5, [pc, #84]	; (80035e8 <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 8003592:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003594:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003596:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003598:	680d      	ldr	r5, [r1, #0]
 800359a:	022d      	lsls	r5, r5, #8
 800359c:	4315      	orrs	r5, r2
  tmpccer &= ~TIM_CCER_CC2P;
 800359e:	2220      	movs	r2, #32
 80035a0:	4394      	bics	r4, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035a2:	688a      	ldr	r2, [r1, #8]
 80035a4:	0112      	lsls	r2, r2, #4
 80035a6:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035a8:	4c10      	ldr	r4, [pc, #64]	; (80035ec <TIM_OC2_SetConfig+0x68>)
 80035aa:	42a0      	cmp	r0, r4
 80035ac:	d012      	beq.n	80035d4 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ae:	4c10      	ldr	r4, [pc, #64]	; (80035f0 <TIM_OC2_SetConfig+0x6c>)
 80035b0:	42a0      	cmp	r0, r4
 80035b2:	d002      	beq.n	80035ba <TIM_OC2_SetConfig+0x36>
 80035b4:	4c0f      	ldr	r4, [pc, #60]	; (80035f4 <TIM_OC2_SetConfig+0x70>)
 80035b6:	42a0      	cmp	r0, r4
 80035b8:	d106      	bne.n	80035c8 <TIM_OC2_SetConfig+0x44>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035ba:	4c0f      	ldr	r4, [pc, #60]	; (80035f8 <TIM_OC2_SetConfig+0x74>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035bc:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035be:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035c0:	698b      	ldr	r3, [r1, #24]
 80035c2:	4333      	orrs	r3, r6
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 80035c8:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80035ca:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80035cc:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80035ce:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80035d0:	6202      	str	r2, [r0, #32]
}
 80035d2:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 80035d4:	2480      	movs	r4, #128	; 0x80
 80035d6:	43a2      	bics	r2, r4
 80035d8:	0016      	movs	r6, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035da:	68ca      	ldr	r2, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 80035dc:	3c40      	subs	r4, #64	; 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035de:	0112      	lsls	r2, r2, #4
 80035e0:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80035e2:	43a2      	bics	r2, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e4:	e7e9      	b.n	80035ba <TIM_OC2_SetConfig+0x36>
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	ffff8cff 	.word	0xffff8cff
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40014400 	.word	0x40014400
 80035f4:	40014800 	.word	0x40014800
 80035f8:	fffff3ff 	.word	0xfffff3ff

080035fc <HAL_TIM_PWM_ConfigChannel>:
{
 80035fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80035fe:	233c      	movs	r3, #60	; 0x3c
{
 8003600:	0014      	movs	r4, r2
  __HAL_LOCK(htim);
 8003602:	5cc2      	ldrb	r2, [r0, r3]
{
 8003604:	0005      	movs	r5, r0
 8003606:	000e      	movs	r6, r1
  __HAL_LOCK(htim);
 8003608:	2a01      	cmp	r2, #1
 800360a:	d05a      	beq.n	80036c2 <HAL_TIM_PWM_ConfigChannel+0xc6>
 800360c:	2201      	movs	r2, #1
 800360e:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8003610:	2c08      	cmp	r4, #8
 8003612:	d045      	beq.n	80036a0 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8003614:	d81a      	bhi.n	800364c <HAL_TIM_PWM_ConfigChannel+0x50>
 8003616:	2c00      	cmp	r4, #0
 8003618:	d030      	beq.n	800367c <HAL_TIM_PWM_ConfigChannel+0x80>
 800361a:	2c04      	cmp	r4, #4
 800361c:	d12c      	bne.n	8003678 <HAL_TIM_PWM_ConfigChannel+0x7c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800361e:	6804      	ldr	r4, [r0, #0]
 8003620:	0020      	movs	r0, r4
 8003622:	f7ff ffaf 	bl	8003584 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003626:	2380      	movs	r3, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 8003628:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800362a:	69a2      	ldr	r2, [r4, #24]
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	4313      	orrs	r3, r2
 8003630:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003632:	69a3      	ldr	r3, [r4, #24]
 8003634:	4a24      	ldr	r2, [pc, #144]	; (80036c8 <HAL_TIM_PWM_ConfigChannel+0xcc>)
 8003636:	4013      	ands	r3, r2
 8003638:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800363a:	6933      	ldr	r3, [r6, #16]
 800363c:	69a2      	ldr	r2, [r4, #24]
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	4313      	orrs	r3, r2
 8003642:	61a3      	str	r3, [r4, #24]
  __HAL_UNLOCK(htim);
 8003644:	233c      	movs	r3, #60	; 0x3c
 8003646:	2200      	movs	r2, #0
 8003648:	54ea      	strb	r2, [r5, r3]
}
 800364a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 800364c:	2c0c      	cmp	r4, #12
 800364e:	d113      	bne.n	8003678 <HAL_TIM_PWM_ConfigChannel+0x7c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003650:	6804      	ldr	r4, [r0, #0]
 8003652:	0020      	movs	r0, r4
 8003654:	f7ff fbfe 	bl	8002e54 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	69e2      	ldr	r2, [r4, #28]
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	4313      	orrs	r3, r2
 8003660:	61e3      	str	r3, [r4, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003662:	69e3      	ldr	r3, [r4, #28]
 8003664:	4a18      	ldr	r2, [pc, #96]	; (80036c8 <HAL_TIM_PWM_ConfigChannel+0xcc>)
  HAL_StatusTypeDef status = HAL_OK;
 8003666:	2000      	movs	r0, #0
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003668:	4013      	ands	r3, r2
 800366a:	61e3      	str	r3, [r4, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800366c:	6933      	ldr	r3, [r6, #16]
 800366e:	69e2      	ldr	r2, [r4, #28]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	4313      	orrs	r3, r2
 8003674:	61e3      	str	r3, [r4, #28]
      break;
 8003676:	e7e5      	b.n	8003644 <HAL_TIM_PWM_ConfigChannel+0x48>
  switch (Channel)
 8003678:	2001      	movs	r0, #1
 800367a:	e7e3      	b.n	8003644 <HAL_TIM_PWM_ConfigChannel+0x48>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800367c:	6804      	ldr	r4, [r0, #0]
 800367e:	0020      	movs	r0, r4
 8003680:	f7ff fb74 	bl	8002d6c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003684:	2208      	movs	r2, #8
 8003686:	69a3      	ldr	r3, [r4, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003688:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800368a:	4313      	orrs	r3, r2
 800368c:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800368e:	69a3      	ldr	r3, [r4, #24]
 8003690:	3a04      	subs	r2, #4
 8003692:	4393      	bics	r3, r2
 8003694:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003696:	69a3      	ldr	r3, [r4, #24]
 8003698:	6932      	ldr	r2, [r6, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	61a3      	str	r3, [r4, #24]
      break;
 800369e:	e7d1      	b.n	8003644 <HAL_TIM_PWM_ConfigChannel+0x48>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036a0:	6807      	ldr	r7, [r0, #0]
 80036a2:	0038      	movs	r0, r7
 80036a4:	f7ff fb96 	bl	8002dd4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036a8:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036aa:	69fb      	ldr	r3, [r7, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80036ac:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036ae:	4323      	orrs	r3, r4
 80036b0:	61fb      	str	r3, [r7, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	4393      	bics	r3, r2
 80036b6:	61fb      	str	r3, [r7, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	6932      	ldr	r2, [r6, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61fb      	str	r3, [r7, #28]
      break;
 80036c0:	e7c0      	b.n	8003644 <HAL_TIM_PWM_ConfigChannel+0x48>
  __HAL_LOCK(htim);
 80036c2:	2002      	movs	r0, #2
 80036c4:	e7c1      	b.n	800364a <HAL_TIM_PWM_ConfigChannel+0x4e>
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	fffffbff 	.word	0xfffffbff

080036cc <HAL_TIMEx_OCN_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036cc:	2900      	cmp	r1, #0
 80036ce:	d12c      	bne.n	800372a <HAL_TIMEx_OCN_Start+0x5e>
 80036d0:	2342      	movs	r3, #66	; 0x42
 80036d2:	5cc2      	ldrb	r2, [r0, r3]
 80036d4:	2a01      	cmp	r2, #1
 80036d6:	d130      	bne.n	800373a <HAL_TIMEx_OCN_Start+0x6e>
  {
    return HAL_ERROR;
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036d8:	2202      	movs	r2, #2
 80036da:	54c2      	strb	r2, [r0, r3]
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036dc:	221f      	movs	r2, #31
 80036de:	4011      	ands	r1, r2
 80036e0:	3a1b      	subs	r2, #27
 80036e2:	408a      	lsls	r2, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80036e4:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80036e6:	6a19      	ldr	r1, [r3, #32]
 80036e8:	4391      	bics	r1, r2
 80036ea:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036ec:	6a19      	ldr	r1, [r3, #32]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 80036f2:	2280      	movs	r2, #128	; 0x80
 80036f4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80036f6:	0212      	lsls	r2, r2, #8
 80036f8:	430a      	orrs	r2, r1
 80036fa:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fc:	4a15      	ldr	r2, [pc, #84]	; (8003754 <HAL_TIMEx_OCN_Start+0x88>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00c      	beq.n	800371c <HAL_TIMEx_OCN_Start+0x50>
 8003702:	2280      	movs	r2, #128	; 0x80
 8003704:	05d2      	lsls	r2, r2, #23
 8003706:	4293      	cmp	r3, r2
 8003708:	d008      	beq.n	800371c <HAL_TIMEx_OCN_Start+0x50>
 800370a:	4a13      	ldr	r2, [pc, #76]	; (8003758 <HAL_TIMEx_OCN_Start+0x8c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d005      	beq.n	800371c <HAL_TIMEx_OCN_Start+0x50>
    __HAL_TIM_ENABLE(htim);
 8003710:	2101      	movs	r1, #1
  return HAL_OK;
 8003712:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	601a      	str	r2, [r3, #0]
}
 800371a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800371c:	2207      	movs	r2, #7
 800371e:	6899      	ldr	r1, [r3, #8]
 8003720:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003722:	2a06      	cmp	r2, #6
 8003724:	d1f4      	bne.n	8003710 <HAL_TIMEx_OCN_Start+0x44>
  return HAL_OK;
 8003726:	2000      	movs	r0, #0
 8003728:	e7f7      	b.n	800371a <HAL_TIMEx_OCN_Start+0x4e>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800372a:	2904      	cmp	r1, #4
 800372c:	d007      	beq.n	800373e <HAL_TIMEx_OCN_Start+0x72>
 800372e:	2908      	cmp	r1, #8
 8003730:	d00a      	beq.n	8003748 <HAL_TIMEx_OCN_Start+0x7c>
 8003732:	2345      	movs	r3, #69	; 0x45
 8003734:	5cc2      	ldrb	r2, [r0, r3]
 8003736:	2a01      	cmp	r2, #1
 8003738:	d0ce      	beq.n	80036d8 <HAL_TIMEx_OCN_Start+0xc>
    return HAL_ERROR;
 800373a:	2001      	movs	r0, #1
 800373c:	e7ed      	b.n	800371a <HAL_TIMEx_OCN_Start+0x4e>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800373e:	2343      	movs	r3, #67	; 0x43
 8003740:	5cc2      	ldrb	r2, [r0, r3]
 8003742:	2a01      	cmp	r2, #1
 8003744:	d0c8      	beq.n	80036d8 <HAL_TIMEx_OCN_Start+0xc>
 8003746:	e7f8      	b.n	800373a <HAL_TIMEx_OCN_Start+0x6e>
 8003748:	2344      	movs	r3, #68	; 0x44
 800374a:	5cc2      	ldrb	r2, [r0, r3]
 800374c:	2a01      	cmp	r2, #1
 800374e:	d0c3      	beq.n	80036d8 <HAL_TIMEx_OCN_Start+0xc>
 8003750:	e7f3      	b.n	800373a <HAL_TIMEx_OCN_Start+0x6e>
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	40012c00 	.word	0x40012c00
 8003758:	40000400 	.word	0x40000400

0800375c <HAL_TIMEx_PWMN_Start>:
 800375c:	b510      	push	{r4, lr}
 800375e:	f7ff ffb5 	bl	80036cc <HAL_TIMEx_OCN_Start>
 8003762:	bd10      	pop	{r4, pc}

08003764 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8003764:	233c      	movs	r3, #60	; 0x3c
{
 8003766:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8003768:	5cc3      	ldrb	r3, [r0, r3]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d021      	beq.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 800376e:	233d      	movs	r3, #61	; 0x3d
 8003770:	2202      	movs	r2, #2
  tmpcr2 &= ~TIM_CR2_MMS;
 8003772:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8003776:	6803      	ldr	r3, [r0, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800377a:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800377c:	43aa      	bics	r2, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800377e:	680d      	ldr	r5, [r1, #0]
 8003780:	432a      	orrs	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8003782:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003784:	4a0c      	ldr	r2, [pc, #48]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d006      	beq.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 800378a:	2280      	movs	r2, #128	; 0x80
 800378c:	05d2      	lsls	r2, r2, #23
 800378e:	4293      	cmp	r3, r2
 8003790:	d002      	beq.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8003792:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d104      	bne.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003798:	2280      	movs	r2, #128	; 0x80
 800379a:	4394      	bics	r4, r2
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800379c:	684a      	ldr	r2, [r1, #4]
 800379e:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 80037a0:	609c      	str	r4, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80037a2:	233d      	movs	r3, #61	; 0x3d
 80037a4:	2201      	movs	r2, #1
 80037a6:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 80037a8:	2200      	movs	r2, #0
 80037aa:	3b01      	subs	r3, #1
 80037ac:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80037ae:	2000      	movs	r0, #0
}
 80037b0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80037b2:	2002      	movs	r0, #2
 80037b4:	e7fc      	b.n	80037b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40000400 	.word	0x40000400

080037c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80037c0:	223c      	movs	r2, #60	; 0x3c
{
 80037c2:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80037c4:	5c83      	ldrb	r3, [r0, r2]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d01e      	beq.n	8003808 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037ca:	68cb      	ldr	r3, [r1, #12]
 80037cc:	4c0f      	ldr	r4, [pc, #60]	; (800380c <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 80037ce:	4023      	ands	r3, r4
 80037d0:	688c      	ldr	r4, [r1, #8]
 80037d2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037d4:	4c0e      	ldr	r4, [pc, #56]	; (8003810 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 80037d6:	4023      	ands	r3, r4
 80037d8:	684c      	ldr	r4, [r1, #4]
 80037da:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037dc:	4c0d      	ldr	r4, [pc, #52]	; (8003814 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 80037de:	4023      	ands	r3, r4
 80037e0:	680c      	ldr	r4, [r1, #0]
 80037e2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037e4:	4c0c      	ldr	r4, [pc, #48]	; (8003818 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 80037e6:	4023      	ands	r3, r4
 80037e8:	690c      	ldr	r4, [r1, #16]
 80037ea:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037ec:	4c0b      	ldr	r4, [pc, #44]	; (800381c <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 80037ee:	4023      	ands	r3, r4
 80037f0:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037f2:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037f4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037f6:	4c0a      	ldr	r4, [pc, #40]	; (8003820 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 80037f8:	4023      	ands	r3, r4
 80037fa:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80037fc:	6801      	ldr	r1, [r0, #0]
 80037fe:	644b      	str	r3, [r1, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8003800:	2300      	movs	r3, #0
 8003802:	5483      	strb	r3, [r0, r2]
  return HAL_OK;
 8003804:	2000      	movs	r0, #0
}
 8003806:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8003808:	2002      	movs	r0, #2
 800380a:	e7fc      	b.n	8003806 <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 800380c:	fffffcff 	.word	0xfffffcff
 8003810:	fffffbff 	.word	0xfffffbff
 8003814:	fffff7ff 	.word	0xfffff7ff
 8003818:	ffffefff 	.word	0xffffefff
 800381c:	ffffdfff 	.word	0xffffdfff
 8003820:	ffffbfff 	.word	0xffffbfff

08003824 <HAL_TIMEx_CommutCallback>:
 8003824:	4770      	bx	lr
 8003826:	46c0      	nop			; (mov r8, r8)

08003828 <HAL_TIMEx_BreakCallback>:
 8003828:	4770      	bx	lr
 800382a:	46c0      	nop			; (mov r8, r8)

0800382c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800382c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800382e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003832:	2201      	movs	r2, #1
 8003834:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003838:	6801      	ldr	r1, [r0, #0]
 800383a:	4c13      	ldr	r4, [pc, #76]	; (8003888 <UART_EndRxTransfer+0x5c>)
 800383c:	680b      	ldr	r3, [r1, #0]
 800383e:	4023      	ands	r3, r4
 8003840:	600b      	str	r3, [r1, #0]
 8003842:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003846:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384e:	6801      	ldr	r1, [r0, #0]
 8003850:	688b      	ldr	r3, [r1, #8]
 8003852:	4393      	bics	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
 8003856:	f38c 8810 	msr	PRIMASK, ip

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800385a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800385c:	2b01      	cmp	r3, #1
 800385e:	d10b      	bne.n	8003878 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003860:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003864:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003868:	6802      	ldr	r2, [r0, #0]
 800386a:	3432      	adds	r4, #50	; 0x32
 800386c:	6813      	ldr	r3, [r2, #0]
 800386e:	34ff      	adds	r4, #255	; 0xff
 8003870:	43a3      	bics	r3, r4
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	2220      	movs	r2, #32
 800387c:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387e:	2300      	movs	r3, #0
 8003880:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003882:	6683      	str	r3, [r0, #104]	; 0x68
}
 8003884:	bd10      	pop	{r4, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	fffffedf 	.word	0xfffffedf

0800388c <HAL_UART_Transmit_DMA>:
{
 800388c:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800388e:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	0004      	movs	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003894:	2a20      	cmp	r2, #32
 8003896:	d140      	bne.n	800391a <HAL_UART_Transmit_DMA+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8003898:	2900      	cmp	r1, #0
 800389a:	d02b      	beq.n	80038f4 <HAL_UART_Transmit_DMA+0x68>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d029      	beq.n	80038f4 <HAL_UART_Transmit_DMA+0x68>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a0:	2280      	movs	r2, #128	; 0x80
 80038a2:	6880      	ldr	r0, [r0, #8]
 80038a4:	0152      	lsls	r2, r2, #5
 80038a6:	4290      	cmp	r0, r2
 80038a8:	d01f      	beq.n	80038ea <HAL_UART_Transmit_DMA+0x5e>
    huart->TxXferSize  = Size;
 80038aa:	2250      	movs	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 80038ac:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80038ae:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 80038b0:	3202      	adds	r2, #2
 80038b2:	52a3      	strh	r3, [r4, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038b4:	2021      	movs	r0, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b6:	2584      	movs	r5, #132	; 0x84
 80038b8:	2200      	movs	r2, #0
 80038ba:	5162      	str	r2, [r4, r5]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038bc:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (huart->hdmatx != NULL)
 80038be:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d019      	beq.n	80038f8 <HAL_UART_Transmit_DMA+0x6c>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80038c4:	4e16      	ldr	r6, [pc, #88]	; (8003920 <HAL_UART_Transmit_DMA+0x94>)
      huart->hdmatx->XferAbortCallback = NULL;
 80038c6:	6342      	str	r2, [r0, #52]	; 0x34
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80038c8:	6286      	str	r6, [r0, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80038ca:	4e16      	ldr	r6, [pc, #88]	; (8003924 <HAL_UART_Transmit_DMA+0x98>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80038cc:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80038ce:	62c6      	str	r6, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80038d0:	4e15      	ldr	r6, [pc, #84]	; (8003928 <HAL_UART_Transmit_DMA+0x9c>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80038d2:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80038d4:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80038d6:	f7fe f951 	bl	8001b7c <HAL_DMA_Start_IT>
 80038da:	2800      	cmp	r0, #0
 80038dc:	d00c      	beq.n	80038f8 <HAL_UART_Transmit_DMA+0x6c>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038de:	2310      	movs	r3, #16
 80038e0:	5163      	str	r3, [r4, r5]
        huart->gState = HAL_UART_STATE_READY;
 80038e2:	3310      	adds	r3, #16
        return HAL_ERROR;
 80038e4:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 80038e6:	67e3      	str	r3, [r4, #124]	; 0x7c
        return HAL_ERROR;
 80038e8:	e005      	b.n	80038f6 <HAL_UART_Transmit_DMA+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ea:	6922      	ldr	r2, [r4, #16]
 80038ec:	2a00      	cmp	r2, #0
 80038ee:	d1dc      	bne.n	80038aa <HAL_UART_Transmit_DMA+0x1e>
      if ((((uint32_t)pData) & 1U) != 0U)
 80038f0:	07ca      	lsls	r2, r1, #31
 80038f2:	d5da      	bpl.n	80038aa <HAL_UART_Transmit_DMA+0x1e>
      return HAL_ERROR;
 80038f4:	2001      	movs	r0, #1
}
 80038f6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80038f8:	2240      	movs	r2, #64	; 0x40
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fe:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003902:	2301      	movs	r3, #1
 8003904:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003908:	2080      	movs	r0, #128	; 0x80
 800390a:	6822      	ldr	r2, [r4, #0]
 800390c:	6893      	ldr	r3, [r2, #8]
 800390e:	4303      	orrs	r3, r0
 8003910:	6093      	str	r3, [r2, #8]
 8003912:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8003916:	2000      	movs	r0, #0
 8003918:	e7ed      	b.n	80038f6 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_BUSY;
 800391a:	2002      	movs	r0, #2
 800391c:	e7eb      	b.n	80038f6 <HAL_UART_Transmit_DMA+0x6a>
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	0800392d 	.word	0x0800392d
 8003924:	08003979 	.word	0x08003979
 8003928:	08003989 	.word	0x08003989

0800392c <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800392c:	6982      	ldr	r2, [r0, #24]
{
 800392e:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003930:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003932:	2a20      	cmp	r2, #32
 8003934:	d01a      	beq.n	800396c <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8003936:	2252      	movs	r2, #82	; 0x52
 8003938:	2100      	movs	r1, #0
 800393a:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393c:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003940:	3101      	adds	r1, #1
 8003942:	f381 8810 	msr	PRIMASK, r1

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003946:	2480      	movs	r4, #128	; 0x80
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	6882      	ldr	r2, [r0, #8]
 800394c:	43a2      	bics	r2, r4
 800394e:	6082      	str	r2, [r0, #8]
 8003950:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003954:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003958:	f381 8810 	msr	PRIMASK, r1

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	313f      	adds	r1, #63	; 0x3f
 8003960:	6813      	ldr	r3, [r2, #0]
 8003962:	430b      	orrs	r3, r1
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	f380 8810 	msr	PRIMASK, r0
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800396a:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 800396c:	0018      	movs	r0, r3
 800396e:	f7fc ff8f 	bl	8000890 <HAL_UART_TxCpltCallback>
}
 8003972:	e7fa      	b.n	800396a <UART_DMATransmitCplt+0x3e>

08003974 <HAL_UART_TxHalfCpltCallback>:
 8003974:	4770      	bx	lr
 8003976:	46c0      	nop			; (mov r8, r8)

08003978 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003978:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800397a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800397c:	f7ff fffa 	bl	8003974 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003980:	bd10      	pop	{r4, pc}
 8003982:	46c0      	nop			; (mov r8, r8)

08003984 <HAL_UART_RxCpltCallback>:
 8003984:	4770      	bx	lr
 8003986:	46c0      	nop			; (mov r8, r8)

08003988 <UART_DMAError>:
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003988:	2280      	movs	r2, #128	; 0x80
{
 800398a:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800398c:	6a44      	ldr	r4, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800398e:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003990:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003992:	58a0      	ldr	r0, [r4, r2]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003994:	6899      	ldr	r1, [r3, #8]
 8003996:	420a      	tst	r2, r1
 8003998:	d001      	beq.n	800399e <UART_DMAError+0x16>
 800399a:	2d21      	cmp	r5, #33	; 0x21
 800399c:	d00d      	beq.n	80039ba <UART_DMAError+0x32>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	065b      	lsls	r3, r3, #25
 80039a2:	d501      	bpl.n	80039a8 <UART_DMAError+0x20>
 80039a4:	2822      	cmp	r0, #34	; 0x22
 80039a6:	d01b      	beq.n	80039e0 <UART_DMAError+0x58>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80039a8:	2284      	movs	r2, #132	; 0x84
 80039aa:	2110      	movs	r1, #16
 80039ac:	58a3      	ldr	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039ae:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80039b0:	430b      	orrs	r3, r1
 80039b2:	50a3      	str	r3, [r4, r2]
  HAL_UART_ErrorCallback(huart);
 80039b4:	f7fc ff7e 	bl	80008b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039b8:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 80039ba:	2352      	movs	r3, #82	; 0x52
 80039bc:	2200      	movs	r2, #0
 80039be:	52e2      	strh	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c4:	3b51      	subs	r3, #81	; 0x51
 80039c6:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	359f      	adds	r5, #159	; 0x9f
 80039ce:	6813      	ldr	r3, [r2, #0]
 80039d0:	43ab      	bics	r3, r5
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	f381 8810 	msr	PRIMASK, r1
  huart->gState = HAL_UART_STATE_READY;
 80039d8:	2320      	movs	r3, #32
 80039da:	67e3      	str	r3, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80039dc:	6823      	ldr	r3, [r4, #0]
}
 80039de:	e7de      	b.n	800399e <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 80039e0:	235a      	movs	r3, #90	; 0x5a
 80039e2:	2200      	movs	r2, #0
    UART_EndRxTransfer(huart);
 80039e4:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 80039e6:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 80039e8:	f7ff ff20 	bl	800382c <UART_EndRxTransfer>
 80039ec:	e7dc      	b.n	80039a8 <UART_DMAError+0x20>
 80039ee:	46c0      	nop			; (mov r8, r8)

080039f0 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	225a      	movs	r2, #90	; 0x5a
{
 80039f4:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80039f8:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 80039fa:	3a08      	subs	r2, #8
 80039fc:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039fe:	f7fc ff59 	bl	80008b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a02:	bd10      	pop	{r4, pc}

08003a04 <HAL_UART_IRQHandler>:
{
 8003a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a06:	46ce      	mov	lr, r9
 8003a08:	4647      	mov	r7, r8
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a0a:	6802      	ldr	r2, [r0, #0]
{
 8003a0c:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a0e:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a10:	48b0      	ldr	r0, [pc, #704]	; (8003cd4 <HAL_UART_IRQHandler+0x2d0>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a12:	6811      	ldr	r1, [r2, #0]
{
 8003a14:	b580      	push	{r7, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a16:	6895      	ldr	r5, [r2, #8]
  if (errorflags == 0U)
 8003a18:	4203      	tst	r3, r0
 8003a1a:	d000      	beq.n	8003a1e <HAL_UART_IRQHandler+0x1a>
 8003a1c:	e07e      	b.n	8003b1c <HAL_UART_IRQHandler+0x118>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a1e:	2020      	movs	r0, #32
 8003a20:	4218      	tst	r0, r3
 8003a22:	d002      	beq.n	8003a2a <HAL_UART_IRQHandler+0x26>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a24:	4208      	tst	r0, r1
 8003a26:	d000      	beq.n	8003a2a <HAL_UART_IRQHandler+0x26>
 8003a28:	e0ee      	b.n	8003c08 <HAL_UART_IRQHandler+0x204>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a2a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003a2c:	2801      	cmp	r0, #1
 8003a2e:	d01b      	beq.n	8003a68 <HAL_UART_IRQHandler+0x64>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a30:	2080      	movs	r0, #128	; 0x80
 8003a32:	0340      	lsls	r0, r0, #13
 8003a34:	4203      	tst	r3, r0
 8003a36:	d002      	beq.n	8003a3e <HAL_UART_IRQHandler+0x3a>
 8003a38:	026d      	lsls	r5, r5, #9
 8003a3a:	d500      	bpl.n	8003a3e <HAL_UART_IRQHandler+0x3a>
 8003a3c:	e0e9      	b.n	8003c12 <HAL_UART_IRQHandler+0x20e>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a3e:	2280      	movs	r2, #128	; 0x80
 8003a40:	421a      	tst	r2, r3
 8003a42:	d109      	bne.n	8003a58 <HAL_UART_IRQHandler+0x54>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a44:	2240      	movs	r2, #64	; 0x40
 8003a46:	421a      	tst	r2, r3
 8003a48:	d002      	beq.n	8003a50 <HAL_UART_IRQHandler+0x4c>
 8003a4a:	420a      	tst	r2, r1
 8003a4c:	d000      	beq.n	8003a50 <HAL_UART_IRQHandler+0x4c>
 8003a4e:	e0e9      	b.n	8003c24 <HAL_UART_IRQHandler+0x220>
}
 8003a50:	bcc0      	pop	{r6, r7}
 8003a52:	46b9      	mov	r9, r7
 8003a54:	46b0      	mov	r8, r6
 8003a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a58:	420a      	tst	r2, r1
 8003a5a:	d0f3      	beq.n	8003a44 <HAL_UART_IRQHandler+0x40>
    if (huart->TxISR != NULL)
 8003a5c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f6      	beq.n	8003a50 <HAL_UART_IRQHandler+0x4c>
      huart->TxISR(huart);
 8003a62:	0020      	movs	r0, r4
 8003a64:	4798      	blx	r3
 8003a66:	e7f3      	b.n	8003a50 <HAL_UART_IRQHandler+0x4c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a68:	2610      	movs	r6, #16
 8003a6a:	421e      	tst	r6, r3
 8003a6c:	d0e0      	beq.n	8003a30 <HAL_UART_IRQHandler+0x2c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a6e:	420e      	tst	r6, r1
 8003a70:	d0de      	beq.n	8003a30 <HAL_UART_IRQHandler+0x2c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a72:	2340      	movs	r3, #64	; 0x40
 8003a74:	001d      	movs	r5, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a76:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	6892      	ldr	r2, [r2, #8]
 8003a7a:	4015      	ands	r5, r2
 8003a7c:	4213      	tst	r3, r2
 8003a7e:	d100      	bne.n	8003a82 <HAL_UART_IRQHandler+0x7e>
 8003a80:	e0ea      	b.n	8003c58 <HAL_UART_IRQHandler+0x254>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a82:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8003a84:	682a      	ldr	r2, [r5, #0]
 8003a86:	6852      	ldr	r2, [r2, #4]
 8003a88:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003a8a:	2a00      	cmp	r2, #0
 8003a8c:	d0e0      	beq.n	8003a50 <HAL_UART_IRQHandler+0x4c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a8e:	2158      	movs	r1, #88	; 0x58
 8003a90:	4688      	mov	r8, r1
 8003a92:	5a61      	ldrh	r1, [r4, r1]
 8003a94:	4291      	cmp	r1, r2
 8003a96:	d9db      	bls.n	8003a50 <HAL_UART_IRQHandler+0x4c>
        huart->RxXferCount = nb_remaining_rx_data;
 8003a98:	275a      	movs	r7, #90	; 0x5a
 8003a9a:	53e2      	strh	r2, [r4, r7]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a9c:	69aa      	ldr	r2, [r5, #24]
 8003a9e:	2a20      	cmp	r2, #32
 8003aa0:	d032      	beq.n	8003b08 <HAL_UART_IRQHandler+0x104>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa6:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aaa:	6821      	ldr	r1, [r4, #0]
 8003aac:	4f8a      	ldr	r7, [pc, #552]	; (8003cd8 <HAL_UART_IRQHandler+0x2d4>)
 8003aae:	680a      	ldr	r2, [r1, #0]
 8003ab0:	403a      	ands	r2, r7
 8003ab2:	600a      	str	r2, [r1, #0]
 8003ab4:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abc:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac0:	6821      	ldr	r1, [r4, #0]
 8003ac2:	688a      	ldr	r2, [r1, #8]
 8003ac4:	4382      	bics	r2, r0
 8003ac6:	608a      	str	r2, [r1, #8]
 8003ac8:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003acc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad0:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad4:	6821      	ldr	r1, [r4, #0]
 8003ad6:	688a      	ldr	r2, [r1, #8]
 8003ad8:	439a      	bics	r2, r3
 8003ada:	608a      	str	r2, [r1, #8]
 8003adc:	f385 8810 	msr	PRIMASK, r5
          huart->RxState = HAL_UART_STATE_READY;
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	3340      	adds	r3, #64	; 0x40
 8003ae4:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	6623      	str	r3, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aea:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aee:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af2:	6822      	ldr	r2, [r4, #0]
 8003af4:	6813      	ldr	r3, [r2, #0]
 8003af6:	43b3      	bics	r3, r6
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003afe:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003b00:	f7fe f87c 	bl	8001bfc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b04:	4643      	mov	r3, r8
 8003b06:	5ae1      	ldrh	r1, [r4, r3]
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b0c:	3358      	adds	r3, #88	; 0x58
 8003b0e:	5ae3      	ldrh	r3, [r4, r3]
 8003b10:	0020      	movs	r0, r4
 8003b12:	1ac9      	subs	r1, r1, r3
 8003b14:	b289      	uxth	r1, r1
 8003b16:	f7fc fe9f 	bl	8000858 <HAL_UARTEx_RxEventCallback>
 8003b1a:	e799      	b.n	8003a50 <HAL_UART_IRQHandler+0x4c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b1c:	2601      	movs	r6, #1
 8003b1e:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b20:	486e      	ldr	r0, [pc, #440]	; (8003cdc <HAL_UART_IRQHandler+0x2d8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b22:	402f      	ands	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b24:	4008      	ands	r0, r1
 8003b26:	4338      	orrs	r0, r7
 8003b28:	d100      	bne.n	8003b2c <HAL_UART_IRQHandler+0x128>
 8003b2a:	e77e      	b.n	8003a2a <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b2c:	421e      	tst	r6, r3
 8003b2e:	d006      	beq.n	8003b3e <HAL_UART_IRQHandler+0x13a>
 8003b30:	05c8      	lsls	r0, r1, #23
 8003b32:	d504      	bpl.n	8003b3e <HAL_UART_IRQHandler+0x13a>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b34:	2584      	movs	r5, #132	; 0x84
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b36:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b38:	5960      	ldr	r0, [r4, r5]
 8003b3a:	4330      	orrs	r0, r6
 8003b3c:	5160      	str	r0, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b3e:	2002      	movs	r0, #2
 8003b40:	4218      	tst	r0, r3
 8003b42:	d05c      	beq.n	8003bfe <HAL_UART_IRQHandler+0x1fa>
 8003b44:	2f00      	cmp	r7, #0
 8003b46:	d00e      	beq.n	8003b66 <HAL_UART_IRQHandler+0x162>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b48:	2684      	movs	r6, #132	; 0x84
 8003b4a:	2504      	movs	r5, #4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b4c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b4e:	59a0      	ldr	r0, [r4, r6]
 8003b50:	4328      	orrs	r0, r5
 8003b52:	51a0      	str	r0, [r4, r6]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b54:	421d      	tst	r5, r3
 8003b56:	d006      	beq.n	8003b66 <HAL_UART_IRQHandler+0x162>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b58:	2004      	movs	r0, #4
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b5a:	2584      	movs	r5, #132	; 0x84
 8003b5c:	2602      	movs	r6, #2
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b5e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b60:	5960      	ldr	r0, [r4, r5]
 8003b62:	4330      	orrs	r0, r6
 8003b64:	5160      	str	r0, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b66:	2508      	movs	r5, #8
 8003b68:	421d      	tst	r5, r3
 8003b6a:	d008      	beq.n	8003b7e <HAL_UART_IRQHandler+0x17a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b6c:	2020      	movs	r0, #32
 8003b6e:	4008      	ands	r0, r1
 8003b70:	4338      	orrs	r0, r7
 8003b72:	d004      	beq.n	8003b7e <HAL_UART_IRQHandler+0x17a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b74:	2684      	movs	r6, #132	; 0x84
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b76:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b78:	59a0      	ldr	r0, [r4, r6]
 8003b7a:	4328      	orrs	r0, r5
 8003b7c:	51a0      	str	r0, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b7e:	2080      	movs	r0, #128	; 0x80
 8003b80:	0100      	lsls	r0, r0, #4
 8003b82:	4203      	tst	r3, r0
 8003b84:	d007      	beq.n	8003b96 <HAL_UART_IRQHandler+0x192>
 8003b86:	014d      	lsls	r5, r1, #5
 8003b88:	d505      	bpl.n	8003b96 <HAL_UART_IRQHandler+0x192>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b8a:	2584      	movs	r5, #132	; 0x84
 8003b8c:	2620      	movs	r6, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b8e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b90:	5960      	ldr	r0, [r4, r5]
 8003b92:	4330      	orrs	r0, r6
 8003b94:	5160      	str	r0, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b96:	2084      	movs	r0, #132	; 0x84
 8003b98:	5820      	ldr	r0, [r4, r0]
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	d100      	bne.n	8003ba0 <HAL_UART_IRQHandler+0x19c>
 8003b9e:	e757      	b.n	8003a50 <HAL_UART_IRQHandler+0x4c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ba0:	2020      	movs	r0, #32
 8003ba2:	4218      	tst	r0, r3
 8003ba4:	d001      	beq.n	8003baa <HAL_UART_IRQHandler+0x1a6>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ba6:	4208      	tst	r0, r1
 8003ba8:	d14f      	bne.n	8003c4a <HAL_UART_IRQHandler+0x246>
      errorcode = huart->ErrorCode;
 8003baa:	2684      	movs	r6, #132	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bac:	2740      	movs	r7, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bae:	2328      	movs	r3, #40	; 0x28
      errorcode = huart->ErrorCode;
 8003bb0:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bb2:	6895      	ldr	r5, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bb4:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bb6:	403d      	ands	r5, r7
        UART_EndRxTransfer(huart);
 8003bb8:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bba:	431d      	orrs	r5, r3
 8003bbc:	d100      	bne.n	8003bc0 <HAL_UART_IRQHandler+0x1bc>
 8003bbe:	e085      	b.n	8003ccc <HAL_UART_IRQHandler+0x2c8>
        UART_EndRxTransfer(huart);
 8003bc0:	f7ff fe34 	bl	800382c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	421f      	tst	r7, r3
 8003bca:	d027      	beq.n	8003c1c <HAL_UART_IRQHandler+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bcc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd6:	6822      	ldr	r2, [r4, #0]
 8003bd8:	6893      	ldr	r3, [r2, #8]
 8003bda:	43bb      	bics	r3, r7
 8003bdc:	6093      	str	r3, [r2, #8]
 8003bde:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8003be2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d019      	beq.n	8003c1c <HAL_UART_IRQHandler+0x218>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003be8:	4b3d      	ldr	r3, [pc, #244]	; (8003ce0 <HAL_UART_IRQHandler+0x2dc>)
 8003bea:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bec:	f7fe f824 	bl	8001c38 <HAL_DMA_Abort_IT>
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d100      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x1f2>
 8003bf4:	e72c      	b.n	8003a50 <HAL_UART_IRQHandler+0x4c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bf6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003bf8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bfa:	4798      	blx	r3
 8003bfc:	e728      	b.n	8003a50 <HAL_UART_IRQHandler+0x4c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bfe:	0758      	lsls	r0, r3, #29
 8003c00:	d5b1      	bpl.n	8003b66 <HAL_UART_IRQHandler+0x162>
 8003c02:	2f00      	cmp	r7, #0
 8003c04:	d1a8      	bne.n	8003b58 <HAL_UART_IRQHandler+0x154>
 8003c06:	e7ae      	b.n	8003b66 <HAL_UART_IRQHandler+0x162>
      if (huart->RxISR != NULL)
 8003c08:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d000      	beq.n	8003c10 <HAL_UART_IRQHandler+0x20c>
 8003c0e:	e728      	b.n	8003a62 <HAL_UART_IRQHandler+0x5e>
 8003c10:	e71e      	b.n	8003a50 <HAL_UART_IRQHandler+0x4c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c12:	6210      	str	r0, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003c14:	0020      	movs	r0, r4
 8003c16:	f000 fcf1 	bl	80045fc <HAL_UARTEx_WakeupCallback>
    return;
 8003c1a:	e719      	b.n	8003a50 <HAL_UART_IRQHandler+0x4c>
            HAL_UART_ErrorCallback(huart);
 8003c1c:	0020      	movs	r0, r4
 8003c1e:	f7fc fe49 	bl	80008b4 <HAL_UART_ErrorCallback>
 8003c22:	e715      	b.n	8003a50 <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c24:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c2e:	6821      	ldr	r1, [r4, #0]
 8003c30:	680b      	ldr	r3, [r1, #0]
 8003c32:	4393      	bics	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]
 8003c36:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c3a:	2320      	movs	r3, #32
 8003c3c:	67e3      	str	r3, [r4, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c3e:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c40:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8003c42:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_TxCpltCallback(huart);
 8003c44:	f7fc fe24 	bl	8000890 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c48:	e702      	b.n	8003a50 <HAL_UART_IRQHandler+0x4c>
        if (huart->RxISR != NULL)
 8003c4a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ac      	beq.n	8003baa <HAL_UART_IRQHandler+0x1a6>
          huart->RxISR(huart);
 8003c50:	0020      	movs	r0, r4
 8003c52:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c54:	6822      	ldr	r2, [r4, #0]
 8003c56:	e7a8      	b.n	8003baa <HAL_UART_IRQHandler+0x1a6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c58:	2358      	movs	r3, #88	; 0x58
 8003c5a:	225a      	movs	r2, #90	; 0x5a
 8003c5c:	5ae1      	ldrh	r1, [r4, r3]
 8003c5e:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 8003c60:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c62:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8003c64:	2a00      	cmp	r2, #0
 8003c66:	d100      	bne.n	8003c6a <HAL_UART_IRQHandler+0x266>
 8003c68:	e6f2      	b.n	8003a50 <HAL_UART_IRQHandler+0x4c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c6a:	1ac9      	subs	r1, r1, r3
 8003c6c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003c6e:	2900      	cmp	r1, #0
 8003c70:	d100      	bne.n	8003c74 <HAL_UART_IRQHandler+0x270>
 8003c72:	e6ed      	b.n	8003a50 <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c74:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c78:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c7c:	6822      	ldr	r2, [r4, #0]
 8003c7e:	6813      	ldr	r3, [r2, #0]
 8003c80:	4698      	mov	r8, r3
 8003c82:	4647      	mov	r7, r8
 8003c84:	4b17      	ldr	r3, [pc, #92]	; (8003ce4 <HAL_UART_IRQHandler+0x2e0>)
 8003c86:	401f      	ands	r7, r3
 8003c88:	6017      	str	r7, [r2, #0]
 8003c8a:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c92:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c96:	6822      	ldr	r2, [r4, #0]
 8003c98:	6893      	ldr	r3, [r2, #8]
 8003c9a:	4383      	bics	r3, r0
 8003c9c:	6093      	str	r3, [r2, #8]
 8003c9e:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8003ca2:	2380      	movs	r3, #128	; 0x80
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca8:	6625      	str	r5, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8003caa:	66a5      	str	r5, [r4, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cac:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb0:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb4:	6822      	ldr	r2, [r4, #0]
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	43b3      	bics	r3, r6
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	f385 8810 	msr	PRIMASK, r5
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cc0:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cc2:	0020      	movs	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cc4:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cc6:	f7fc fdc7 	bl	8000858 <HAL_UARTEx_RxEventCallback>
 8003cca:	e6c1      	b.n	8003a50 <HAL_UART_IRQHandler+0x4c>
        HAL_UART_ErrorCallback(huart);
 8003ccc:	f7fc fdf2 	bl	80008b4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd0:	51a5      	str	r5, [r4, r6]
 8003cd2:	e6bd      	b.n	8003a50 <HAL_UART_IRQHandler+0x4c>
 8003cd4:	0000080f 	.word	0x0000080f
 8003cd8:	fffffeff 	.word	0xfffffeff
 8003cdc:	04000120 	.word	0x04000120
 8003ce0:	080039f1 	.word	0x080039f1
 8003ce4:	fffffedf 	.word	0xfffffedf

08003ce8 <UART_RxISR_8BIT>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
  uint16_t uhMask = huart->Mask;
 8003ce8:	235c      	movs	r3, #92	; 0x5c
 8003cea:	5ac2      	ldrh	r2, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cec:	3324      	adds	r3, #36	; 0x24
 8003cee:	58c1      	ldr	r1, [r0, r3]
{
 8003cf0:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cf2:	2922      	cmp	r1, #34	; 0x22
 8003cf4:	d005      	beq.n	8003d02 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cf6:	2108      	movs	r1, #8
 8003cf8:	6802      	ldr	r2, [r0, #0]
 8003cfa:	6993      	ldr	r3, [r2, #24]
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	6193      	str	r3, [r2, #24]
  }
}
 8003d00:	bd70      	pop	{r4, r5, r6, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d02:	6801      	ldr	r1, [r0, #0]
 8003d04:	8c8c      	ldrh	r4, [r1, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d06:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8003d08:	4022      	ands	r2, r4
 8003d0a:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8003d0c:	215a      	movs	r1, #90	; 0x5a
    huart->pRxBuffPtr++;
 8003d0e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003d10:	3201      	adds	r2, #1
 8003d12:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8003d14:	5a42      	ldrh	r2, [r0, r1]
 8003d16:	3a01      	subs	r2, #1
 8003d18:	b292      	uxth	r2, r2
 8003d1a:	5242      	strh	r2, [r0, r1]
    if (huart->RxXferCount == 0U)
 8003d1c:	5a42      	ldrh	r2, [r0, r1]
 8003d1e:	b291      	uxth	r1, r2
 8003d20:	2a00      	cmp	r2, #0
 8003d22:	d1ed      	bne.n	8003d00 <UART_RxISR_8BIT+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d24:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d28:	3201      	adds	r2, #1
 8003d2a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d2e:	6805      	ldr	r5, [r0, #0]
 8003d30:	4e1f      	ldr	r6, [pc, #124]	; (8003db0 <UART_RxISR_8BIT+0xc8>)
 8003d32:	682c      	ldr	r4, [r5, #0]
 8003d34:	4034      	ands	r4, r6
 8003d36:	602c      	str	r4, [r5, #0]
 8003d38:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d3c:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d40:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d44:	6805      	ldr	r5, [r0, #0]
 8003d46:	68ac      	ldr	r4, [r5, #8]
 8003d48:	4394      	bics	r4, r2
 8003d4a:	60ac      	str	r4, [r5, #8]
 8003d4c:	f38c 8810 	msr	PRIMASK, ip
      huart->RxState = HAL_UART_STATE_READY;
 8003d50:	2420      	movs	r4, #32
 8003d52:	50c4      	str	r4, [r0, r3]
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d54:	6803      	ldr	r3, [r0, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d56:	6641      	str	r1, [r0, #100]	; 0x64
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d58:	685b      	ldr	r3, [r3, #4]
      huart->RxISR = NULL;
 8003d5a:	6681      	str	r1, [r0, #104]	; 0x68
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d5c:	021b      	lsls	r3, r3, #8
 8003d5e:	d50a      	bpl.n	8003d76 <UART_RxISR_8BIT+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d60:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d64:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d68:	6802      	ldr	r2, [r0, #0]
 8003d6a:	4c12      	ldr	r4, [pc, #72]	; (8003db4 <UART_RxISR_8BIT+0xcc>)
 8003d6c:	6813      	ldr	r3, [r2, #0]
 8003d6e:	4023      	ands	r3, r4
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	f381 8810 	msr	PRIMASK, r1
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d76:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d116      	bne.n	8003daa <UART_RxISR_8BIT+0xc2>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	6602      	str	r2, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d80:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d84:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d88:	6801      	ldr	r1, [r0, #0]
 8003d8a:	3210      	adds	r2, #16
 8003d8c:	680b      	ldr	r3, [r1, #0]
 8003d8e:	4393      	bics	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]
 8003d92:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d96:	6803      	ldr	r3, [r0, #0]
 8003d98:	69d9      	ldr	r1, [r3, #28]
 8003d9a:	420a      	tst	r2, r1
 8003d9c:	d000      	beq.n	8003da0 <UART_RxISR_8BIT+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d9e:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003da0:	2358      	movs	r3, #88	; 0x58
 8003da2:	5ac1      	ldrh	r1, [r0, r3]
 8003da4:	f7fc fd58 	bl	8000858 <HAL_UARTEx_RxEventCallback>
 8003da8:	e7aa      	b.n	8003d00 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8003daa:	f7ff fdeb 	bl	8003984 <HAL_UART_RxCpltCallback>
 8003dae:	e7a7      	b.n	8003d00 <UART_RxISR_8BIT+0x18>
 8003db0:	fffffedf 	.word	0xfffffedf
 8003db4:	fbffffff 	.word	0xfbffffff

08003db8 <UART_RxISR_16BIT>:
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003db8:	235c      	movs	r3, #92	; 0x5c
{
 8003dba:	b570      	push	{r4, r5, r6, lr}
  uint16_t uhMask = huart->Mask;
 8003dbc:	5ac4      	ldrh	r4, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dbe:	3324      	adds	r3, #36	; 0x24
 8003dc0:	58c2      	ldr	r2, [r0, r3]
 8003dc2:	2a22      	cmp	r2, #34	; 0x22
 8003dc4:	d005      	beq.n	8003dd2 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003dc6:	2108      	movs	r1, #8
 8003dc8:	6802      	ldr	r2, [r0, #0]
 8003dca:	6993      	ldr	r3, [r2, #24]
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	6193      	str	r3, [r2, #24]
  }
}
 8003dd0:	bd70      	pop	{r4, r5, r6, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003dd2:	6802      	ldr	r2, [r0, #0]
 8003dd4:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003dd6:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8003dd8:	4021      	ands	r1, r4
 8003dda:	8011      	strh	r1, [r2, #0]
    huart->RxXferCount--;
 8003ddc:	215a      	movs	r1, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 8003dde:	3202      	adds	r2, #2
 8003de0:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8003de2:	5a42      	ldrh	r2, [r0, r1]
 8003de4:	3a01      	subs	r2, #1
 8003de6:	b292      	uxth	r2, r2
 8003de8:	5242      	strh	r2, [r0, r1]
    if (huart->RxXferCount == 0U)
 8003dea:	5a42      	ldrh	r2, [r0, r1]
 8003dec:	b291      	uxth	r1, r2
 8003dee:	2a00      	cmp	r2, #0
 8003df0:	d1ee      	bne.n	8003dd0 <UART_RxISR_16BIT+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df6:	3201      	adds	r2, #1
 8003df8:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfc:	6805      	ldr	r5, [r0, #0]
 8003dfe:	4e20      	ldr	r6, [pc, #128]	; (8003e80 <UART_RxISR_16BIT+0xc8>)
 8003e00:	682c      	ldr	r4, [r5, #0]
 8003e02:	4034      	ands	r4, r6
 8003e04:	602c      	str	r4, [r5, #0]
 8003e06:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e0a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e12:	6805      	ldr	r5, [r0, #0]
 8003e14:	68ac      	ldr	r4, [r5, #8]
 8003e16:	4394      	bics	r4, r2
 8003e18:	60ac      	str	r4, [r5, #8]
 8003e1a:	f38c 8810 	msr	PRIMASK, ip
      huart->RxState = HAL_UART_STATE_READY;
 8003e1e:	2420      	movs	r4, #32
 8003e20:	50c4      	str	r4, [r0, r3]
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e22:	6803      	ldr	r3, [r0, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e24:	6641      	str	r1, [r0, #100]	; 0x64
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e26:	685b      	ldr	r3, [r3, #4]
      huart->RxISR = NULL;
 8003e28:	6681      	str	r1, [r0, #104]	; 0x68
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	d50a      	bpl.n	8003e44 <UART_RxISR_16BIT+0x8c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e2e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e32:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e36:	6802      	ldr	r2, [r0, #0]
 8003e38:	4c12      	ldr	r4, [pc, #72]	; (8003e84 <UART_RxISR_16BIT+0xcc>)
 8003e3a:	6813      	ldr	r3, [r2, #0]
 8003e3c:	4023      	ands	r3, r4
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	f381 8810 	msr	PRIMASK, r1
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e44:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d116      	bne.n	8003e78 <UART_RxISR_16BIT+0xc0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	6602      	str	r2, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e4e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e52:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e56:	6801      	ldr	r1, [r0, #0]
 8003e58:	3210      	adds	r2, #16
 8003e5a:	680b      	ldr	r3, [r1, #0]
 8003e5c:	4393      	bics	r3, r2
 8003e5e:	600b      	str	r3, [r1, #0]
 8003e60:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e64:	6803      	ldr	r3, [r0, #0]
 8003e66:	69d9      	ldr	r1, [r3, #28]
 8003e68:	420a      	tst	r2, r1
 8003e6a:	d000      	beq.n	8003e6e <UART_RxISR_16BIT+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e6c:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e6e:	2358      	movs	r3, #88	; 0x58
 8003e70:	5ac1      	ldrh	r1, [r0, r3]
 8003e72:	f7fc fcf1 	bl	8000858 <HAL_UARTEx_RxEventCallback>
 8003e76:	e7ab      	b.n	8003dd0 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8003e78:	f7ff fd84 	bl	8003984 <HAL_UART_RxCpltCallback>
 8003e7c:	e7a8      	b.n	8003dd0 <UART_RxISR_16BIT+0x18>
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	fffffedf 	.word	0xfffffedf
 8003e84:	fbffffff 	.word	0xfbffffff

08003e88 <HAL_MultiProcessor_EnterMuteMode>:
  __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 8003e88:	2104      	movs	r1, #4
 8003e8a:	6802      	ldr	r2, [r0, #0]
 8003e8c:	6993      	ldr	r3, [r2, #24]
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	6193      	str	r3, [r2, #24]
}
 8003e92:	4770      	bx	lr

08003e94 <UART_SetConfig>:
{
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e98:	6925      	ldr	r5, [r4, #16]
 8003e9a:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e9c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e9e:	432b      	orrs	r3, r5
 8003ea0:	6965      	ldr	r5, [r4, #20]
 8003ea2:	69c1      	ldr	r1, [r0, #28]
 8003ea4:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ea6:	6810      	ldr	r0, [r2, #0]
 8003ea8:	4d39      	ldr	r5, [pc, #228]	; (8003f90 <UART_SetConfig+0xfc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eaa:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003eac:	4028      	ands	r0, r5
 8003eae:	4303      	orrs	r3, r0
 8003eb0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb2:	6853      	ldr	r3, [r2, #4]
 8003eb4:	4837      	ldr	r0, [pc, #220]	; (8003f94 <UART_SetConfig+0x100>)
  tmpreg |= huart->Init.OneBitSampling;
 8003eb6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb8:	4003      	ands	r3, r0
 8003eba:	68e0      	ldr	r0, [r4, #12]
 8003ebc:	4303      	orrs	r3, r0
 8003ebe:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ec0:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ec2:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8003ec4:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ec6:	4d34      	ldr	r5, [pc, #208]	; (8003f98 <UART_SetConfig+0x104>)
 8003ec8:	4028      	ands	r0, r5
 8003eca:	4303      	orrs	r3, r0
 8003ecc:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ece:	4b33      	ldr	r3, [pc, #204]	; (8003f9c <UART_SetConfig+0x108>)
 8003ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d909      	bls.n	8003ef0 <UART_SetConfig+0x5c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003edc:	2380      	movs	r3, #128	; 0x80
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	4299      	cmp	r1, r3
 8003ee2:	d029      	beq.n	8003f38 <UART_SetConfig+0xa4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee4:	f7fe fb36 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	d10f      	bne.n	8003f0c <UART_SetConfig+0x78>
 8003eec:	2000      	movs	r0, #0
 8003eee:	e018      	b.n	8003f22 <UART_SetConfig+0x8e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef0:	2080      	movs	r0, #128	; 0x80
 8003ef2:	4a2b      	ldr	r2, [pc, #172]	; (8003fa0 <UART_SetConfig+0x10c>)
 8003ef4:	0200      	lsls	r0, r0, #8
 8003ef6:	5cd3      	ldrb	r3, [r2, r3]
 8003ef8:	4281      	cmp	r1, r0
 8003efa:	d035      	beq.n	8003f68 <UART_SetConfig+0xd4>
    switch (clocksource)
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d041      	beq.n	8003f84 <UART_SetConfig+0xf0>
 8003f00:	d813      	bhi.n	8003f2a <UART_SetConfig+0x96>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0ee      	beq.n	8003ee4 <UART_SetConfig+0x50>
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d10a      	bne.n	8003f20 <UART_SetConfig+0x8c>
        pclk = (uint32_t) HSI_VALUE;
 8003f0a:	4826      	ldr	r0, [pc, #152]	; (8003fa4 <UART_SetConfig+0x110>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f0c:	6861      	ldr	r1, [r4, #4]
 8003f0e:	084b      	lsrs	r3, r1, #1
 8003f10:	1818      	adds	r0, r3, r0
 8003f12:	f7fc f8f9 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f16:	0002      	movs	r2, r0
 8003f18:	4b23      	ldr	r3, [pc, #140]	; (8003fa8 <UART_SetConfig+0x114>)
 8003f1a:	3a10      	subs	r2, #16
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d907      	bls.n	8003f30 <UART_SetConfig+0x9c>
    switch (clocksource)
 8003f20:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8003f26:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8003f28:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d0ee      	beq.n	8003f0c <UART_SetConfig+0x78>
 8003f2e:	e7f7      	b.n	8003f20 <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	60d8      	str	r0, [r3, #12]
 8003f34:	2000      	movs	r0, #0
 8003f36:	e7f4      	b.n	8003f22 <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f38:	f7fe fb0c 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d0d5      	beq.n	8003eec <UART_SetConfig+0x58>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f40:	0043      	lsls	r3, r0, #1
 8003f42:	6861      	ldr	r1, [r4, #4]
 8003f44:	0848      	lsrs	r0, r1, #1
 8003f46:	18c0      	adds	r0, r0, r3
 8003f48:	f7fc f8de 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f4c:	0002      	movs	r2, r0
 8003f4e:	4b16      	ldr	r3, [pc, #88]	; (8003fa8 <UART_SetConfig+0x114>)
 8003f50:	3a10      	subs	r2, #16
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d8e4      	bhi.n	8003f20 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f56:	4b15      	ldr	r3, [pc, #84]	; (8003fac <UART_SetConfig+0x118>)
        huart->Instance->BRR = brrtemp;
 8003f58:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f5a:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f5c:	0700      	lsls	r0, r0, #28
 8003f5e:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8003f60:	4303      	orrs	r3, r0
 8003f62:	60d3      	str	r3, [r2, #12]
 8003f64:	2000      	movs	r0, #0
 8003f66:	e7dc      	b.n	8003f22 <UART_SetConfig+0x8e>
    switch (clocksource)
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d00e      	beq.n	8003f8a <UART_SetConfig+0xf6>
 8003f6c:	d805      	bhi.n	8003f7a <UART_SetConfig+0xe6>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0e2      	beq.n	8003f38 <UART_SetConfig+0xa4>
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d1d4      	bne.n	8003f20 <UART_SetConfig+0x8c>
 8003f76:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <UART_SetConfig+0x11c>)
 8003f78:	e7e3      	b.n	8003f42 <UART_SetConfig+0xae>
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d1d0      	bne.n	8003f20 <UART_SetConfig+0x8c>
 8003f7e:	2380      	movs	r3, #128	; 0x80
 8003f80:	025b      	lsls	r3, r3, #9
 8003f82:	e7de      	b.n	8003f42 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8003f84:	f7fe fa30 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
        break;
 8003f88:	e7ae      	b.n	8003ee8 <UART_SetConfig+0x54>
        pclk = HAL_RCC_GetSysClockFreq();
 8003f8a:	f7fe fa2d 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
        break;
 8003f8e:	e7d5      	b.n	8003f3c <UART_SetConfig+0xa8>
 8003f90:	ffff69f3 	.word	0xffff69f3
 8003f94:	ffffcfff 	.word	0xffffcfff
 8003f98:	fffff4ff 	.word	0xfffff4ff
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	08005310 	.word	0x08005310
 8003fa4:	007a1200 	.word	0x007a1200
 8003fa8:	0000ffef 	.word	0x0000ffef
 8003fac:	0000fff0 	.word	0x0000fff0
 8003fb0:	00f42400 	.word	0x00f42400

08003fb4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003fb6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fb8:	07da      	lsls	r2, r3, #31
 8003fba:	d506      	bpl.n	8003fca <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fbc:	6801      	ldr	r1, [r0, #0]
 8003fbe:	4c28      	ldr	r4, [pc, #160]	; (8004060 <UART_AdvFeatureConfig+0xac>)
 8003fc0:	684a      	ldr	r2, [r1, #4]
 8003fc2:	4022      	ands	r2, r4
 8003fc4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003fc6:	4322      	orrs	r2, r4
 8003fc8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fca:	079a      	lsls	r2, r3, #30
 8003fcc:	d506      	bpl.n	8003fdc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fce:	6801      	ldr	r1, [r0, #0]
 8003fd0:	4c24      	ldr	r4, [pc, #144]	; (8004064 <UART_AdvFeatureConfig+0xb0>)
 8003fd2:	684a      	ldr	r2, [r1, #4]
 8003fd4:	4022      	ands	r2, r4
 8003fd6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003fd8:	4322      	orrs	r2, r4
 8003fda:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fdc:	075a      	lsls	r2, r3, #29
 8003fde:	d506      	bpl.n	8003fee <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fe0:	6801      	ldr	r1, [r0, #0]
 8003fe2:	4c21      	ldr	r4, [pc, #132]	; (8004068 <UART_AdvFeatureConfig+0xb4>)
 8003fe4:	684a      	ldr	r2, [r1, #4]
 8003fe6:	4022      	ands	r2, r4
 8003fe8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003fea:	4322      	orrs	r2, r4
 8003fec:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fee:	071a      	lsls	r2, r3, #28
 8003ff0:	d506      	bpl.n	8004000 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ff2:	6801      	ldr	r1, [r0, #0]
 8003ff4:	4c1d      	ldr	r4, [pc, #116]	; (800406c <UART_AdvFeatureConfig+0xb8>)
 8003ff6:	684a      	ldr	r2, [r1, #4]
 8003ff8:	4022      	ands	r2, r4
 8003ffa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003ffc:	4322      	orrs	r2, r4
 8003ffe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004000:	06da      	lsls	r2, r3, #27
 8004002:	d506      	bpl.n	8004012 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004004:	6801      	ldr	r1, [r0, #0]
 8004006:	4c1a      	ldr	r4, [pc, #104]	; (8004070 <UART_AdvFeatureConfig+0xbc>)
 8004008:	688a      	ldr	r2, [r1, #8]
 800400a:	4022      	ands	r2, r4
 800400c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800400e:	4322      	orrs	r2, r4
 8004010:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004012:	069a      	lsls	r2, r3, #26
 8004014:	d506      	bpl.n	8004024 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004016:	6801      	ldr	r1, [r0, #0]
 8004018:	4c16      	ldr	r4, [pc, #88]	; (8004074 <UART_AdvFeatureConfig+0xc0>)
 800401a:	688a      	ldr	r2, [r1, #8]
 800401c:	4022      	ands	r2, r4
 800401e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004020:	4322      	orrs	r2, r4
 8004022:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004024:	065a      	lsls	r2, r3, #25
 8004026:	d50a      	bpl.n	800403e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004028:	6801      	ldr	r1, [r0, #0]
 800402a:	4d13      	ldr	r5, [pc, #76]	; (8004078 <UART_AdvFeatureConfig+0xc4>)
 800402c:	684a      	ldr	r2, [r1, #4]
 800402e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004030:	402a      	ands	r2, r5
 8004032:	4322      	orrs	r2, r4
 8004034:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004036:	2280      	movs	r2, #128	; 0x80
 8004038:	0352      	lsls	r2, r2, #13
 800403a:	4294      	cmp	r4, r2
 800403c:	d009      	beq.n	8004052 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800403e:	061b      	lsls	r3, r3, #24
 8004040:	d506      	bpl.n	8004050 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004042:	6802      	ldr	r2, [r0, #0]
 8004044:	490d      	ldr	r1, [pc, #52]	; (800407c <UART_AdvFeatureConfig+0xc8>)
 8004046:	6853      	ldr	r3, [r2, #4]
 8004048:	400b      	ands	r3, r1
 800404a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800404c:	430b      	orrs	r3, r1
 800404e:	6053      	str	r3, [r2, #4]
}
 8004050:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004052:	684a      	ldr	r2, [r1, #4]
 8004054:	4c0a      	ldr	r4, [pc, #40]	; (8004080 <UART_AdvFeatureConfig+0xcc>)
 8004056:	4022      	ands	r2, r4
 8004058:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800405a:	4322      	orrs	r2, r4
 800405c:	604a      	str	r2, [r1, #4]
 800405e:	e7ee      	b.n	800403e <UART_AdvFeatureConfig+0x8a>
 8004060:	fffdffff 	.word	0xfffdffff
 8004064:	fffeffff 	.word	0xfffeffff
 8004068:	fffbffff 	.word	0xfffbffff
 800406c:	ffff7fff 	.word	0xffff7fff
 8004070:	ffffefff 	.word	0xffffefff
 8004074:	ffffdfff 	.word	0xffffdfff
 8004078:	ffefffff 	.word	0xffefffff
 800407c:	fff7ffff 	.word	0xfff7ffff
 8004080:	ff9fffff 	.word	0xff9fffff

08004084 <UART_WaitOnFlagUntilTimeout>:
{
 8004084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004086:	4645      	mov	r5, r8
 8004088:	4698      	mov	r8, r3
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800408a:	2304      	movs	r3, #4
{
 800408c:	4657      	mov	r7, sl
 800408e:	464e      	mov	r6, r9
 8004090:	46de      	mov	lr, fp
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004092:	469a      	mov	sl, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004094:	3304      	adds	r3, #4
 8004096:	4699      	mov	r9, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004098:	2380      	movs	r3, #128	; 0x80
{
 800409a:	b5e0      	push	{r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800409c:	011b      	lsls	r3, r3, #4
{
 800409e:	b083      	sub	sp, #12
 80040a0:	0015      	movs	r5, r2
 80040a2:	0007      	movs	r7, r0
 80040a4:	000c      	movs	r4, r1
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040a6:	469b      	mov	fp, r3
{
 80040a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040aa:	6802      	ldr	r2, [r0, #0]
 80040ac:	e001      	b.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 80040ae:	1c73      	adds	r3, r6, #1
 80040b0:	d10e      	bne.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b2:	69d3      	ldr	r3, [r2, #28]
 80040b4:	4023      	ands	r3, r4
 80040b6:	1b1b      	subs	r3, r3, r4
 80040b8:	4259      	negs	r1, r3
 80040ba:	414b      	adcs	r3, r1
 80040bc:	42ab      	cmp	r3, r5
 80040be:	d0f6      	beq.n	80040ae <UART_WaitOnFlagUntilTimeout+0x2a>
  return HAL_OK;
 80040c0:	2000      	movs	r0, #0
}
 80040c2:	b003      	add	sp, #12
 80040c4:	bcf0      	pop	{r4, r5, r6, r7}
 80040c6:	46bb      	mov	fp, r7
 80040c8:	46b2      	mov	sl, r6
 80040ca:	46a9      	mov	r9, r5
 80040cc:	46a0      	mov	r8, r4
 80040ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d0:	f7fd f990 	bl	80013f4 <HAL_GetTick>
 80040d4:	4643      	mov	r3, r8
 80040d6:	1ac0      	subs	r0, r0, r3
 80040d8:	42b0      	cmp	r0, r6
 80040da:	d81d      	bhi.n	8004118 <UART_WaitOnFlagUntilTimeout+0x94>
 80040dc:	2e00      	cmp	r6, #0
 80040de:	d01b      	beq.n	8004118 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040e0:	4651      	mov	r1, sl
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	6813      	ldr	r3, [r2, #0]
 80040e6:	4219      	tst	r1, r3
 80040e8:	d0e3      	beq.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x2e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040ea:	4649      	mov	r1, r9
 80040ec:	69d3      	ldr	r3, [r2, #28]
 80040ee:	4019      	ands	r1, r3
 80040f0:	9101      	str	r1, [sp, #4]
 80040f2:	4649      	mov	r1, r9
 80040f4:	4219      	tst	r1, r3
 80040f6:	d111      	bne.n	800411c <UART_WaitOnFlagUntilTimeout+0x98>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040f8:	4659      	mov	r1, fp
 80040fa:	69d3      	ldr	r3, [r2, #28]
 80040fc:	420b      	tst	r3, r1
 80040fe:	d0d8      	beq.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x2e>
          UART_EndRxTransfer(huart);
 8004100:	0038      	movs	r0, r7
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004102:	6211      	str	r1, [r2, #32]
          UART_EndRxTransfer(huart);
 8004104:	f7ff fb92 	bl	800382c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004108:	2384      	movs	r3, #132	; 0x84
 800410a:	2220      	movs	r2, #32
 800410c:	50fa      	str	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 800410e:	9a01      	ldr	r2, [sp, #4]
 8004110:	3b0c      	subs	r3, #12
          return HAL_TIMEOUT;
 8004112:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8004114:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8004116:	e7d4      	b.n	80040c2 <UART_WaitOnFlagUntilTimeout+0x3e>
        return HAL_TIMEOUT;
 8004118:	2003      	movs	r0, #3
 800411a:	e7d2      	b.n	80040c2 <UART_WaitOnFlagUntilTimeout+0x3e>
           UART_EndRxTransfer(huart);
 800411c:	0038      	movs	r0, r7
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800411e:	6211      	str	r1, [r2, #32]
           UART_EndRxTransfer(huart);
 8004120:	f7ff fb84 	bl	800382c <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004124:	2384      	movs	r3, #132	; 0x84
 8004126:	464a      	mov	r2, r9
 8004128:	50fa      	str	r2, [r7, r3]
           __HAL_UNLOCK(huart);
 800412a:	2200      	movs	r2, #0
 800412c:	3b0c      	subs	r3, #12
           return HAL_ERROR;
 800412e:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8004130:	54fa      	strb	r2, [r7, r3]
           return HAL_ERROR;
 8004132:	e7c6      	b.n	80040c2 <UART_WaitOnFlagUntilTimeout+0x3e>

08004134 <HAL_UART_Transmit>:
{
 8004134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004136:	4647      	mov	r7, r8
 8004138:	46ce      	mov	lr, r9
 800413a:	b580      	push	{r7, lr}
 800413c:	001f      	movs	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800413e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8004140:	0004      	movs	r4, r0
 8004142:	000d      	movs	r5, r1
 8004144:	0016      	movs	r6, r2
 8004146:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8004148:	2b20      	cmp	r3, #32
 800414a:	d14c      	bne.n	80041e6 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 800414c:	2900      	cmp	r1, #0
 800414e:	d044      	beq.n	80041da <HAL_UART_Transmit+0xa6>
 8004150:	2a00      	cmp	r2, #0
 8004152:	d042      	beq.n	80041da <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	6882      	ldr	r2, [r0, #8]
 8004158:	015b      	lsls	r3, r3, #5
 800415a:	429a      	cmp	r2, r3
 800415c:	d104      	bne.n	8004168 <HAL_UART_Transmit+0x34>
 800415e:	6903      	ldr	r3, [r0, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004164:	07cb      	lsls	r3, r1, #31
 8004166:	d438      	bmi.n	80041da <HAL_UART_Transmit+0xa6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004168:	2200      	movs	r2, #0
 800416a:	2384      	movs	r3, #132	; 0x84
 800416c:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800416e:	3b63      	subs	r3, #99	; 0x63
 8004170:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8004172:	f7fd f93f 	bl	80013f4 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8004176:	2350      	movs	r3, #80	; 0x50
 8004178:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 800417a:	3302      	adds	r3, #2
      pdata16bits = NULL;
 800417c:	2100      	movs	r1, #0
    huart->TxXferCount = Size;
 800417e:	52e6      	strh	r6, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004180:	2380      	movs	r3, #128	; 0x80
 8004182:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8004184:	4680      	mov	r8, r0
      pdata16bits = NULL;
 8004186:	4689      	mov	r9, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004188:	015b      	lsls	r3, r3, #5
 800418a:	429a      	cmp	r2, r3
 800418c:	d03e      	beq.n	800420c <HAL_UART_Transmit+0xd8>
    while (huart->TxXferCount > 0U)
 800418e:	2352      	movs	r3, #82	; 0x52
 8004190:	5ae3      	ldrh	r3, [r4, r3]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d029      	beq.n	80041ea <HAL_UART_Transmit+0xb6>
      huart->TxXferCount--;
 8004196:	2652      	movs	r6, #82	; 0x52
 8004198:	e00a      	b.n	80041b0 <HAL_UART_Transmit+0x7c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800419a:	782a      	ldrb	r2, [r5, #0]
 800419c:	6823      	ldr	r3, [r4, #0]
        pdata8bits++;
 800419e:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041a0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 80041a2:	5ba2      	ldrh	r2, [r4, r6]
 80041a4:	3a01      	subs	r2, #1
 80041a6:	b292      	uxth	r2, r2
 80041a8:	53a2      	strh	r2, [r4, r6]
    while (huart->TxXferCount > 0U)
 80041aa:	5ba3      	ldrh	r3, [r4, r6]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01c      	beq.n	80041ea <HAL_UART_Transmit+0xb6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041b0:	4643      	mov	r3, r8
 80041b2:	2200      	movs	r2, #0
 80041b4:	2180      	movs	r1, #128	; 0x80
 80041b6:	0020      	movs	r0, r4
 80041b8:	9700      	str	r7, [sp, #0]
 80041ba:	f7ff ff63 	bl	8004084 <UART_WaitOnFlagUntilTimeout>
 80041be:	2800      	cmp	r0, #0
 80041c0:	d120      	bne.n	8004204 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 80041c2:	2d00      	cmp	r5, #0
 80041c4:	d1e9      	bne.n	800419a <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041c6:	464b      	mov	r3, r9
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	6822      	ldr	r2, [r4, #0]
 80041cc:	05db      	lsls	r3, r3, #23
 80041ce:	0ddb      	lsrs	r3, r3, #23
 80041d0:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata16bits++;
 80041d2:	2302      	movs	r3, #2
 80041d4:	469c      	mov	ip, r3
 80041d6:	44e1      	add	r9, ip
 80041d8:	e7e3      	b.n	80041a2 <HAL_UART_Transmit+0x6e>
      return  HAL_ERROR;
 80041da:	2001      	movs	r0, #1
}
 80041dc:	b003      	add	sp, #12
 80041de:	bcc0      	pop	{r6, r7}
 80041e0:	46b9      	mov	r9, r7
 80041e2:	46b0      	mov	r8, r6
 80041e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80041e6:	2002      	movs	r0, #2
 80041e8:	e7f8      	b.n	80041dc <HAL_UART_Transmit+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ea:	4643      	mov	r3, r8
 80041ec:	2200      	movs	r2, #0
 80041ee:	2140      	movs	r1, #64	; 0x40
 80041f0:	0020      	movs	r0, r4
 80041f2:	9700      	str	r7, [sp, #0]
 80041f4:	f7ff ff46 	bl	8004084 <UART_WaitOnFlagUntilTimeout>
      huart->gState = HAL_UART_STATE_READY;
 80041f8:	2320      	movs	r3, #32
 80041fa:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041fc:	2800      	cmp	r0, #0
 80041fe:	d0ed      	beq.n	80041dc <HAL_UART_Transmit+0xa8>
      return HAL_TIMEOUT;
 8004200:	2003      	movs	r0, #3
 8004202:	e7eb      	b.n	80041dc <HAL_UART_Transmit+0xa8>
        huart->gState = HAL_UART_STATE_READY;
 8004204:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8004206:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8004208:	67e3      	str	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 800420a:	e7e7      	b.n	80041dc <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800420c:	6923      	ldr	r3, [r4, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1bd      	bne.n	800418e <HAL_UART_Transmit+0x5a>
 8004212:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8004214:	2500      	movs	r5, #0
 8004216:	e7ba      	b.n	800418e <HAL_UART_Transmit+0x5a>

08004218 <HAL_UART_Receive>:
{
 8004218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800421a:	464f      	mov	r7, r9
 800421c:	4646      	mov	r6, r8
 800421e:	46d6      	mov	lr, sl
 8004220:	b5c0      	push	{r6, r7, lr}
 8004222:	001f      	movs	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	58c3      	ldr	r3, [r0, r3]
{
 8004228:	0004      	movs	r4, r0
 800422a:	000d      	movs	r5, r1
 800422c:	0016      	movs	r6, r2
 800422e:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 8004230:	2b20      	cmp	r3, #32
 8004232:	d154      	bne.n	80042de <HAL_UART_Receive+0xc6>
    if ((pData == NULL) || (Size == 0U))
 8004234:	2900      	cmp	r1, #0
 8004236:	d04b      	beq.n	80042d0 <HAL_UART_Receive+0xb8>
 8004238:	2a00      	cmp	r2, #0
 800423a:	d049      	beq.n	80042d0 <HAL_UART_Receive+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800423c:	2380      	movs	r3, #128	; 0x80
 800423e:	6882      	ldr	r2, [r0, #8]
 8004240:	015b      	lsls	r3, r3, #5
 8004242:	429a      	cmp	r2, r3
 8004244:	d104      	bne.n	8004250 <HAL_UART_Receive+0x38>
 8004246:	6903      	ldr	r3, [r0, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_UART_Receive+0x38>
      if ((((uint32_t)pData) & 1U) != 0U)
 800424c:	07cb      	lsls	r3, r1, #31
 800424e:	d43f      	bmi.n	80042d0 <HAL_UART_Receive+0xb8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004250:	2300      	movs	r3, #0
 8004252:	2284      	movs	r2, #132	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004254:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004256:	50a3      	str	r3, [r4, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004258:	3a04      	subs	r2, #4
 800425a:	50a1      	str	r1, [r4, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425c:	6623      	str	r3, [r4, #96]	; 0x60
    tickstart = HAL_GetTick();
 800425e:	f7fd f8c9 	bl	80013f4 <HAL_GetTick>
    huart->RxXferSize  = Size;
 8004262:	2358      	movs	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 8004264:	2280      	movs	r2, #128	; 0x80
    huart->RxXferSize  = Size;
 8004266:	52e6      	strh	r6, [r4, r3]
    huart->RxXferCount = Size;
 8004268:	3302      	adds	r3, #2
 800426a:	52e6      	strh	r6, [r4, r3]
    UART_MASK_COMPUTATION(huart);
 800426c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800426e:	4681      	mov	r9, r0
    UART_MASK_COMPUTATION(huart);
 8004270:	0152      	lsls	r2, r2, #5
 8004272:	4293      	cmp	r3, r2
 8004274:	d04a      	beq.n	800430c <HAL_UART_Receive+0xf4>
 8004276:	2200      	movs	r2, #0
 8004278:	4690      	mov	r8, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d031      	beq.n	80042e2 <HAL_UART_Receive+0xca>
 800427e:	235c      	movs	r3, #92	; 0x5c
 8004280:	4642      	mov	r2, r8
 8004282:	52e2      	strh	r2, [r4, r3]
      pdata16bits = NULL;
 8004284:	2300      	movs	r3, #0
 8004286:	469a      	mov	sl, r3
    while (huart->RxXferCount > 0U)
 8004288:	235a      	movs	r3, #90	; 0x5a
 800428a:	5ae3      	ldrh	r3, [r4, r3]
      huart->RxXferCount--;
 800428c:	265a      	movs	r6, #90	; 0x5a
    while (huart->RxXferCount > 0U)
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <HAL_UART_Receive+0x8e>
 8004292:	e031      	b.n	80042f8 <HAL_UART_Receive+0xe0>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004294:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8004296:	3501      	adds	r5, #1
      huart->RxXferCount--;
 8004298:	5ba2      	ldrh	r2, [r4, r6]
 800429a:	3a01      	subs	r2, #1
 800429c:	b292      	uxth	r2, r2
 800429e:	53a2      	strh	r2, [r4, r6]
    while (huart->RxXferCount > 0U)
 80042a0:	5ba3      	ldrh	r3, [r4, r6]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d028      	beq.n	80042f8 <HAL_UART_Receive+0xe0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80042a6:	464b      	mov	r3, r9
 80042a8:	2200      	movs	r2, #0
 80042aa:	2120      	movs	r1, #32
 80042ac:	0020      	movs	r0, r4
 80042ae:	9700      	str	r7, [sp, #0]
 80042b0:	f7ff fee8 	bl	8004084 <UART_WaitOnFlagUntilTimeout>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	d124      	bne.n	8004302 <HAL_UART_Receive+0xea>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80042b8:	4642      	mov	r2, r8
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042be:	4013      	ands	r3, r2
      if (pdata8bits == NULL)
 80042c0:	2d00      	cmp	r5, #0
 80042c2:	d1e7      	bne.n	8004294 <HAL_UART_Receive+0x7c>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80042c4:	4652      	mov	r2, sl
 80042c6:	8013      	strh	r3, [r2, #0]
        pdata16bits++;
 80042c8:	2302      	movs	r3, #2
 80042ca:	469c      	mov	ip, r3
 80042cc:	44e2      	add	sl, ip
 80042ce:	e7e3      	b.n	8004298 <HAL_UART_Receive+0x80>
      return  HAL_ERROR;
 80042d0:	2001      	movs	r0, #1
}
 80042d2:	b002      	add	sp, #8
 80042d4:	bce0      	pop	{r5, r6, r7}
 80042d6:	46ba      	mov	sl, r7
 80042d8:	46b1      	mov	r9, r6
 80042da:	46a8      	mov	r8, r5
 80042dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80042de:	2002      	movs	r0, #2
 80042e0:	e7f7      	b.n	80042d2 <HAL_UART_Receive+0xba>
    UART_MASK_COMPUTATION(huart);
 80042e2:	6923      	ldr	r3, [r4, #16]
 80042e4:	1e5a      	subs	r2, r3, #1
 80042e6:	4193      	sbcs	r3, r2
 80042e8:	227f      	movs	r2, #127	; 0x7f
 80042ea:	425b      	negs	r3, r3
 80042ec:	4393      	bics	r3, r2
 80042ee:	4698      	mov	r8, r3
 80042f0:	23ff      	movs	r3, #255	; 0xff
 80042f2:	469c      	mov	ip, r3
 80042f4:	44e0      	add	r8, ip
 80042f6:	e7c2      	b.n	800427e <HAL_UART_Receive+0x66>
    huart->RxState = HAL_UART_STATE_READY;
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	2220      	movs	r2, #32
    return HAL_OK;
 80042fc:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 80042fe:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8004300:	e7e7      	b.n	80042d2 <HAL_UART_Receive+0xba>
        huart->RxState = HAL_UART_STATE_READY;
 8004302:	2380      	movs	r3, #128	; 0x80
 8004304:	2220      	movs	r2, #32
        return HAL_TIMEOUT;
 8004306:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8004308:	50e2      	str	r2, [r4, r3]
        return HAL_TIMEOUT;
 800430a:	e7e2      	b.n	80042d2 <HAL_UART_Receive+0xba>
    UART_MASK_COMPUTATION(huart);
 800430c:	6923      	ldr	r3, [r4, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_UART_Receive+0x108>
 8004312:	225c      	movs	r2, #92	; 0x5c
 8004314:	4b06      	ldr	r3, [pc, #24]	; (8004330 <HAL_UART_Receive+0x118>)
 8004316:	46aa      	mov	sl, r5
 8004318:	4698      	mov	r8, r3
      pdata8bits  = NULL;
 800431a:	2500      	movs	r5, #0
 800431c:	52a3      	strh	r3, [r4, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431e:	e7b3      	b.n	8004288 <HAL_UART_Receive+0x70>
    UART_MASK_COMPUTATION(huart);
 8004320:	235c      	movs	r3, #92	; 0x5c
 8004322:	22ff      	movs	r2, #255	; 0xff
 8004324:	52e2      	strh	r2, [r4, r3]
 8004326:	33a3      	adds	r3, #163	; 0xa3
 8004328:	4698      	mov	r8, r3
      pdata16bits = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	469a      	mov	sl, r3
 800432e:	e7ab      	b.n	8004288 <HAL_UART_Receive+0x70>
 8004330:	000001ff 	.word	0x000001ff

08004334 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004334:	2200      	movs	r2, #0
 8004336:	2384      	movs	r3, #132	; 0x84
{
 8004338:	b530      	push	{r4, r5, lr}
 800433a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433c:	50c2      	str	r2, [r0, r3]
{
 800433e:	b083      	sub	sp, #12
  tickstart = HAL_GetTick();
 8004340:	f7fd f858 	bl	80013f4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004344:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8004346:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004348:	6811      	ldr	r1, [r2, #0]
 800434a:	0709      	lsls	r1, r1, #28
 800434c:	d40f      	bmi.n	800436e <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	0752      	lsls	r2, r2, #29
 8004352:	d41b      	bmi.n	800438c <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8004354:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 8004356:	2280      	movs	r2, #128	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8004358:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800435a:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435c:	2300      	movs	r3, #0
  return HAL_OK;
 800435e:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004360:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004362:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8004364:	2378      	movs	r3, #120	; 0x78
 8004366:	2200      	movs	r2, #0
 8004368:	54e2      	strb	r2, [r4, r3]
}
 800436a:	b003      	add	sp, #12
 800436c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800436e:	2180      	movs	r1, #128	; 0x80
 8004370:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <UART_CheckIdleState+0xc4>)
 8004372:	2200      	movs	r2, #0
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	0389      	lsls	r1, r1, #14
 8004378:	0003      	movs	r3, r0
 800437a:	0020      	movs	r0, r4
 800437c:	f7ff fe82 	bl	8004084 <UART_WaitOnFlagUntilTimeout>
 8004380:	2800      	cmp	r0, #0
 8004382:	d129      	bne.n	80043d8 <UART_CheckIdleState+0xa4>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004384:	6822      	ldr	r2, [r4, #0]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	0752      	lsls	r2, r2, #29
 800438a:	d5e3      	bpl.n	8004354 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800438c:	2180      	movs	r1, #128	; 0x80
 800438e:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <UART_CheckIdleState+0xc4>)
 8004390:	2200      	movs	r2, #0
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	0020      	movs	r0, r4
 8004396:	002b      	movs	r3, r5
 8004398:	03c9      	lsls	r1, r1, #15
 800439a:	f7ff fe73 	bl	8004084 <UART_WaitOnFlagUntilTimeout>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d0d8      	beq.n	8004354 <UART_CheckIdleState+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a6:	2201      	movs	r2, #1
 80043a8:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ac:	6821      	ldr	r1, [r4, #0]
 80043ae:	4d13      	ldr	r5, [pc, #76]	; (80043fc <UART_CheckIdleState+0xc8>)
 80043b0:	680b      	ldr	r3, [r1, #0]
 80043b2:	402b      	ands	r3, r5
 80043b4:	600b      	str	r3, [r1, #0]
 80043b6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ba:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043be:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c2:	6821      	ldr	r1, [r4, #0]
 80043c4:	688b      	ldr	r3, [r1, #8]
 80043c6:	4393      	bics	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
 80043ca:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 80043d2:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 80043d4:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 80043d6:	e7c5      	b.n	8004364 <UART_CheckIdleState+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043dc:	2301      	movs	r3, #1
 80043de:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043e2:	2080      	movs	r0, #128	; 0x80
 80043e4:	6822      	ldr	r2, [r4, #0]
 80043e6:	6813      	ldr	r3, [r2, #0]
 80043e8:	4383      	bics	r3, r0
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80043f0:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80043f2:	387d      	subs	r0, #125	; 0x7d
      huart->gState = HAL_UART_STATE_READY;
 80043f4:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80043f6:	e7b5      	b.n	8004364 <UART_CheckIdleState+0x30>
 80043f8:	01ffffff 	.word	0x01ffffff
 80043fc:	fffffedf 	.word	0xfffffedf

08004400 <HAL_UART_Init>:
{
 8004400:	b510      	push	{r4, lr}
 8004402:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004404:	d026      	beq.n	8004454 <HAL_UART_Init+0x54>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004406:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004408:	2b00      	cmp	r3, #0
 800440a:	d025      	beq.n	8004458 <HAL_UART_Init+0x58>
  huart->gState = HAL_UART_STATE_BUSY;
 800440c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800440e:	2101      	movs	r1, #1
 8004410:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004412:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004414:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004416:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8004418:	438b      	bics	r3, r1
 800441a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800441c:	f7ff fd3a 	bl	8003e94 <UART_SetConfig>
 8004420:	2801      	cmp	r0, #1
 8004422:	d017      	beq.n	8004454 <HAL_UART_Init+0x54>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004426:	2b00      	cmp	r3, #0
 8004428:	d110      	bne.n	800444c <HAL_UART_Init+0x4c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	490d      	ldr	r1, [pc, #52]	; (8004464 <HAL_UART_Init+0x64>)
 800442e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004430:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004432:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004434:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	438a      	bics	r2, r1
 800443c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	3929      	subs	r1, #41	; 0x29
 8004442:	430a      	orrs	r2, r1
 8004444:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004446:	f7ff ff75 	bl	8004334 <UART_CheckIdleState>
}
 800444a:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800444c:	0020      	movs	r0, r4
 800444e:	f7ff fdb1 	bl	8003fb4 <UART_AdvFeatureConfig>
 8004452:	e7ea      	b.n	800442a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8004454:	2001      	movs	r0, #1
 8004456:	e7f8      	b.n	800444a <HAL_UART_Init+0x4a>
    huart->Lock = HAL_UNLOCKED;
 8004458:	2278      	movs	r2, #120	; 0x78
 800445a:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 800445c:	f7fc fe42 	bl	80010e4 <HAL_UART_MspInit>
 8004460:	e7d4      	b.n	800440c <HAL_UART_Init+0xc>
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	ffffb7ff 	.word	0xffffb7ff

08004468 <HAL_MultiProcessor_Init>:
{
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	0004      	movs	r4, r0
 800446c:	000e      	movs	r6, r1
 800446e:	0015      	movs	r5, r2
  if (huart == NULL)
 8004470:	2800      	cmp	r0, #0
 8004472:	d036      	beq.n	80044e2 <HAL_MultiProcessor_Init+0x7a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004474:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d035      	beq.n	80044e6 <HAL_MultiProcessor_Init+0x7e>
  huart->gState = HAL_UART_STATE_BUSY;
 800447a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800447c:	2101      	movs	r1, #1
 800447e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004480:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004482:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004484:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8004486:	438b      	bics	r3, r1
 8004488:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800448a:	f7ff fd03 	bl	8003e94 <UART_SetConfig>
 800448e:	2801      	cmp	r0, #1
 8004490:	d027      	beq.n	80044e2 <HAL_MultiProcessor_Init+0x7a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004494:	2b00      	cmp	r3, #0
 8004496:	d120      	bne.n	80044da <HAL_MultiProcessor_Init+0x72>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	4915      	ldr	r1, [pc, #84]	; (80044f0 <HAL_MultiProcessor_Init+0x88>)
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044a0:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	438a      	bics	r2, r1
 80044a8:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 80044aa:	2280      	movs	r2, #128	; 0x80
 80044ac:	0112      	lsls	r2, r2, #4
 80044ae:	4295      	cmp	r5, r2
 80044b0:	d00c      	beq.n	80044cc <HAL_MultiProcessor_Init+0x64>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	490f      	ldr	r1, [pc, #60]	; (80044f4 <HAL_MultiProcessor_Init+0x8c>)
  return (UART_CheckIdleState(huart));
 80044b6:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80044b8:	400a      	ands	r2, r1
  __HAL_UART_ENABLE(huart);
 80044ba:	2101      	movs	r1, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80044bc:	432a      	orrs	r2, r5
 80044be:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE(huart);
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80044c6:	f7ff ff35 	bl	8004334 <UART_CheckIdleState>
}
 80044ca:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	0636      	lsls	r6, r6, #24
 80044d0:	0212      	lsls	r2, r2, #8
 80044d2:	0a12      	lsrs	r2, r2, #8
 80044d4:	4316      	orrs	r6, r2
 80044d6:	605e      	str	r6, [r3, #4]
 80044d8:	e7eb      	b.n	80044b2 <HAL_MultiProcessor_Init+0x4a>
    UART_AdvFeatureConfig(huart);
 80044da:	0020      	movs	r0, r4
 80044dc:	f7ff fd6a 	bl	8003fb4 <UART_AdvFeatureConfig>
 80044e0:	e7da      	b.n	8004498 <HAL_MultiProcessor_Init+0x30>
    return HAL_ERROR;
 80044e2:	2001      	movs	r0, #1
 80044e4:	e7f1      	b.n	80044ca <HAL_MultiProcessor_Init+0x62>
    huart->Lock = HAL_UNLOCKED;
 80044e6:	2278      	movs	r2, #120	; 0x78
 80044e8:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 80044ea:	f7fc fdfb 	bl	80010e4 <HAL_UART_MspInit>
 80044ee:	e7c4      	b.n	800447a <HAL_MultiProcessor_Init+0x12>
 80044f0:	ffffb7ff 	.word	0xffffb7ff
 80044f4:	fffff7ff 	.word	0xfffff7ff

080044f8 <HAL_MultiProcessor_EnableMuteMode>:
  __HAL_LOCK(huart);
 80044f8:	2378      	movs	r3, #120	; 0x78
{
 80044fa:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 80044fc:	5cc2      	ldrb	r2, [r0, r3]
 80044fe:	2a01      	cmp	r2, #1
 8004500:	d014      	beq.n	800452c <HAL_MultiProcessor_EnableMuteMode+0x34>
 8004502:	2201      	movs	r2, #1
 8004504:	54c2      	strb	r2, [r0, r3]
  huart->gState = HAL_UART_STATE_BUSY;
 8004506:	3b54      	subs	r3, #84	; 0x54
 8004508:	67c3      	str	r3, [r0, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800450a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_MME);
 8004512:	2380      	movs	r3, #128	; 0x80
 8004514:	6802      	ldr	r2, [r0, #0]
 8004516:	019b      	lsls	r3, r3, #6
 8004518:	6814      	ldr	r4, [r2, #0]
 800451a:	4323      	orrs	r3, r4
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	f381 8810 	msr	PRIMASK, r1
  huart->gState = HAL_UART_STATE_READY;
 8004522:	2320      	movs	r3, #32
 8004524:	67c3      	str	r3, [r0, #124]	; 0x7c
  return (UART_CheckIdleState(huart));
 8004526:	f7ff ff05 	bl	8004334 <UART_CheckIdleState>
}
 800452a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800452c:	2002      	movs	r0, #2
 800452e:	e7fc      	b.n	800452a <HAL_MultiProcessor_EnableMuteMode+0x32>

08004530 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8004530:	2358      	movs	r3, #88	; 0x58
  huart->pRxBuffPtr  = pData;
 8004532:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004534:	52c2      	strh	r2, [r0, r3]
  huart->RxXferCount = Size;
 8004536:	3302      	adds	r3, #2
 8004538:	52c2      	strh	r2, [r0, r3]
  huart->RxISR       = NULL;
 800453a:	2300      	movs	r3, #0
 800453c:	6683      	str	r3, [r0, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	6882      	ldr	r2, [r0, #8]
 8004542:	015b      	lsls	r3, r3, #5
 8004544:	429a      	cmp	r2, r3
 8004546:	d046      	beq.n	80045d6 <UART_Start_Receive_IT+0xa6>
 8004548:	2300      	movs	r3, #0
 800454a:	2a00      	cmp	r2, #0
 800454c:	d03d      	beq.n	80045ca <UART_Start_Receive_IT+0x9a>
 800454e:	225c      	movs	r2, #92	; 0x5c
 8004550:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004552:	2384      	movs	r3, #132	; 0x84
 8004554:	2200      	movs	r2, #0
 8004556:	50c2      	str	r2, [r0, r3]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004558:	3b04      	subs	r3, #4
 800455a:	3222      	adds	r2, #34	; 0x22
 800455c:	50c2      	str	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800455e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004562:	2101      	movs	r1, #1
 8004564:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004568:	6802      	ldr	r2, [r0, #0]
 800456a:	6893      	ldr	r3, [r2, #8]
 800456c:	430b      	orrs	r3, r1
 800456e:	6093      	str	r3, [r2, #8]
 8004570:	f38c 8810 	msr	PRIMASK, ip
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004574:	2380      	movs	r3, #128	; 0x80
 8004576:	6882      	ldr	r2, [r0, #8]
 8004578:	015b      	lsls	r3, r3, #5
 800457a:	429a      	cmp	r2, r3
 800457c:	d012      	beq.n	80045a4 <UART_Start_Receive_IT+0x74>
 800457e:	4a1c      	ldr	r2, [pc, #112]	; (80045f0 <UART_Start_Receive_IT+0xc0>)
 8004580:	6903      	ldr	r3, [r0, #16]
    huart->RxISR = UART_RxISR_8BIT;
 8004582:	6682      	str	r2, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004584:	2b00      	cmp	r3, #0
 8004586:	d112      	bne.n	80045ae <UART_Start_Receive_IT+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004588:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458c:	2301      	movs	r3, #1
 800458e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004592:	6802      	ldr	r2, [r0, #0]
 8004594:	2020      	movs	r0, #32
 8004596:	6813      	ldr	r3, [r2, #0]
 8004598:	4303      	orrs	r3, r0
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	f381 8810 	msr	PRIMASK, r1
}
 80045a0:	2000      	movs	r0, #0
 80045a2:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a4:	6903      	ldr	r3, [r0, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01f      	beq.n	80045ea <UART_Start_Receive_IT+0xba>
    huart->RxISR = UART_RxISR_8BIT;
 80045aa:	4b11      	ldr	r3, [pc, #68]	; (80045f0 <UART_Start_Receive_IT+0xc0>)
 80045ac:	6683      	str	r3, [r0, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ae:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b2:	2301      	movs	r3, #1
 80045b4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80045b8:	6802      	ldr	r2, [r0, #0]
 80045ba:	3320      	adds	r3, #32
 80045bc:	6810      	ldr	r0, [r2, #0]
 80045be:	33ff      	adds	r3, #255	; 0xff
 80045c0:	4303      	orrs	r3, r0
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	f381 8810 	msr	PRIMASK, r1
}
 80045c8:	e7ea      	b.n	80045a0 <UART_Start_Receive_IT+0x70>
  UART_MASK_COMPUTATION(huart);
 80045ca:	6903      	ldr	r3, [r0, #16]
 80045cc:	425a      	negs	r2, r3
 80045ce:	4153      	adcs	r3, r2
 80045d0:	01db      	lsls	r3, r3, #7
 80045d2:	337f      	adds	r3, #127	; 0x7f
 80045d4:	e7bb      	b.n	800454e <UART_Start_Receive_IT+0x1e>
 80045d6:	6903      	ldr	r3, [r0, #16]
 80045d8:	1e5a      	subs	r2, r3, #1
 80045da:	4193      	sbcs	r3, r2
 80045dc:	22ff      	movs	r2, #255	; 0xff
 80045de:	425b      	negs	r3, r3
 80045e0:	4393      	bics	r3, r2
 80045e2:	4a04      	ldr	r2, [pc, #16]	; (80045f4 <UART_Start_Receive_IT+0xc4>)
 80045e4:	4694      	mov	ip, r2
 80045e6:	4463      	add	r3, ip
 80045e8:	e7b1      	b.n	800454e <UART_Start_Receive_IT+0x1e>
 80045ea:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <UART_Start_Receive_IT+0xc8>)
 80045ec:	6683      	str	r3, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 80045ee:	e7cb      	b.n	8004588 <UART_Start_Receive_IT+0x58>
 80045f0:	08003ce9 	.word	0x08003ce9
 80045f4:	000001ff 	.word	0x000001ff
 80045f8:	08003db9 	.word	0x08003db9

080045fc <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045fc:	4770      	bx	lr
 80045fe:	46c0      	nop			; (mov r8, r8)

08004600 <HAL_MultiProcessorEx_AddressLength_Set>:
  *          @arg @ref UART_ADDRESS_DETECT_4B 4-bit long address
  *          @arg @ref UART_ADDRESS_DETECT_7B 6-, 7- or 8-bit long address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength)
{
 8004600:	000a      	movs	r2, r1
 8004602:	b570      	push	{r4, r5, r6, lr}
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004604:	2800      	cmp	r0, #0
 8004606:	d011      	beq.n	800462c <HAL_MultiProcessorEx_AddressLength_Set+0x2c>
  }

  /* Check the address length parameter */
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));

  huart->gState = HAL_UART_STATE_BUSY;
 8004608:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800460a:	2401      	movs	r4, #1

  /* Set the address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 800460c:	2510      	movs	r5, #16
  huart->gState = HAL_UART_STATE_BUSY;
 800460e:	67c3      	str	r3, [r0, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004610:	6803      	ldr	r3, [r0, #0]
 8004612:	6819      	ldr	r1, [r3, #0]
 8004614:	43a1      	bics	r1, r4
 8004616:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 8004618:	6859      	ldr	r1, [r3, #4]
 800461a:	43a9      	bics	r1, r5
 800461c:	4311      	orrs	r1, r2
 800461e:	6059      	str	r1, [r3, #4]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4322      	orrs	r2, r4
 8004624:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState to Ready */
  return (UART_CheckIdleState(huart));
 8004626:	f7ff fe85 	bl	8004334 <UART_CheckIdleState>
}
 800462a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800462c:	2001      	movs	r0, #1
 800462e:	e7fc      	b.n	800462a <HAL_MultiProcessorEx_AddressLength_Set+0x2a>

08004630 <HAL_UARTEx_ReceiveToIdle_IT>:
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004630:	2380      	movs	r3, #128	; 0x80
 8004632:	58c3      	ldr	r3, [r0, r3]
{
 8004634:	b510      	push	{r4, lr}
 8004636:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8004638:	2b20      	cmp	r3, #32
 800463a:	d129      	bne.n	8004690 <HAL_UARTEx_ReceiveToIdle_IT+0x60>
  {
    if ((pData == NULL) || (Size == 0U))
 800463c:	2900      	cmp	r1, #0
 800463e:	d00b      	beq.n	8004658 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
 8004640:	2a00      	cmp	r2, #0
 8004642:	d009      	beq.n	8004658 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004644:	2380      	movs	r3, #128	; 0x80
 8004646:	6880      	ldr	r0, [r0, #8]
 8004648:	015b      	lsls	r3, r3, #5
 800464a:	4298      	cmp	r0, r3
 800464c:	d106      	bne.n	800465c <HAL_UARTEx_ReceiveToIdle_IT+0x2c>
 800464e:	6923      	ldr	r3, [r4, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d103      	bne.n	800465c <HAL_UARTEx_ReceiveToIdle_IT+0x2c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004654:	07cb      	lsls	r3, r1, #31
 8004656:	d501      	bpl.n	800465c <HAL_UARTEx_ReceiveToIdle_IT+0x2c>
      return HAL_ERROR;
 8004658:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 800465a:	bd10      	pop	{r4, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800465c:	2301      	movs	r3, #1
 800465e:	6623      	str	r3, [r4, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004660:	2300      	movs	r3, #0
    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004662:	0020      	movs	r0, r4
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004664:	6663      	str	r3, [r4, #100]	; 0x64
    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004666:	f7ff ff63 	bl	8004530 <UART_Start_Receive_IT>
    if (status == HAL_OK)
 800466a:	2800      	cmp	r0, #0
 800466c:	d1f5      	bne.n	800465a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800466e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004670:	2b01      	cmp	r3, #1
 8004672:	d1f1      	bne.n	8004658 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004674:	2110      	movs	r1, #16
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	6211      	str	r1, [r2, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800467a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004682:	6822      	ldr	r2, [r4, #0]
 8004684:	6813      	ldr	r3, [r2, #0]
 8004686:	430b      	orrs	r3, r1
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	f38c 8810 	msr	PRIMASK, ip
}
 800468e:	e7e4      	b.n	800465a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    return HAL_BUSY;
 8004690:	2002      	movs	r0, #2
 8004692:	e7e2      	b.n	800465a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>

08004694 <std>:
 8004694:	2300      	movs	r3, #0
 8004696:	b510      	push	{r4, lr}
 8004698:	0004      	movs	r4, r0
 800469a:	6003      	str	r3, [r0, #0]
 800469c:	6043      	str	r3, [r0, #4]
 800469e:	6083      	str	r3, [r0, #8]
 80046a0:	8181      	strh	r1, [r0, #12]
 80046a2:	6643      	str	r3, [r0, #100]	; 0x64
 80046a4:	0019      	movs	r1, r3
 80046a6:	81c2      	strh	r2, [r0, #14]
 80046a8:	6103      	str	r3, [r0, #16]
 80046aa:	6143      	str	r3, [r0, #20]
 80046ac:	6183      	str	r3, [r0, #24]
 80046ae:	2208      	movs	r2, #8
 80046b0:	305c      	adds	r0, #92	; 0x5c
 80046b2:	f000 f901 	bl	80048b8 <memset>
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <std+0x38>)
 80046b8:	6224      	str	r4, [r4, #32]
 80046ba:	6263      	str	r3, [r4, #36]	; 0x24
 80046bc:	4b04      	ldr	r3, [pc, #16]	; (80046d0 <std+0x3c>)
 80046be:	62a3      	str	r3, [r4, #40]	; 0x28
 80046c0:	4b04      	ldr	r3, [pc, #16]	; (80046d4 <std+0x40>)
 80046c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80046c4:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <std+0x44>)
 80046c6:	6323      	str	r3, [r4, #48]	; 0x30
 80046c8:	bd10      	pop	{r4, pc}
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	08004bf5 	.word	0x08004bf5
 80046d0:	08004c1d 	.word	0x08004c1d
 80046d4:	08004c55 	.word	0x08004c55
 80046d8:	08004c81 	.word	0x08004c81

080046dc <stdio_exit_handler>:
 80046dc:	b510      	push	{r4, lr}
 80046de:	4a03      	ldr	r2, [pc, #12]	; (80046ec <stdio_exit_handler+0x10>)
 80046e0:	4903      	ldr	r1, [pc, #12]	; (80046f0 <stdio_exit_handler+0x14>)
 80046e2:	4804      	ldr	r0, [pc, #16]	; (80046f4 <stdio_exit_handler+0x18>)
 80046e4:	f000 f86c 	bl	80047c0 <_fwalk_sglue>
 80046e8:	bd10      	pop	{r4, pc}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	20000010 	.word	0x20000010
 80046f0:	08004b7d 	.word	0x08004b7d
 80046f4:	2000001c 	.word	0x2000001c

080046f8 <cleanup_stdio>:
 80046f8:	6841      	ldr	r1, [r0, #4]
 80046fa:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <cleanup_stdio+0x30>)
 80046fc:	b510      	push	{r4, lr}
 80046fe:	0004      	movs	r4, r0
 8004700:	4299      	cmp	r1, r3
 8004702:	d001      	beq.n	8004708 <cleanup_stdio+0x10>
 8004704:	f000 fa3a 	bl	8004b7c <_fflush_r>
 8004708:	68a1      	ldr	r1, [r4, #8]
 800470a:	4b08      	ldr	r3, [pc, #32]	; (800472c <cleanup_stdio+0x34>)
 800470c:	4299      	cmp	r1, r3
 800470e:	d002      	beq.n	8004716 <cleanup_stdio+0x1e>
 8004710:	0020      	movs	r0, r4
 8004712:	f000 fa33 	bl	8004b7c <_fflush_r>
 8004716:	68e1      	ldr	r1, [r4, #12]
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <cleanup_stdio+0x38>)
 800471a:	4299      	cmp	r1, r3
 800471c:	d002      	beq.n	8004724 <cleanup_stdio+0x2c>
 800471e:	0020      	movs	r0, r4
 8004720:	f000 fa2c 	bl	8004b7c <_fflush_r>
 8004724:	bd10      	pop	{r4, pc}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	2000036c 	.word	0x2000036c
 800472c:	200003d4 	.word	0x200003d4
 8004730:	2000043c 	.word	0x2000043c

08004734 <global_stdio_init.part.0>:
 8004734:	b510      	push	{r4, lr}
 8004736:	4b09      	ldr	r3, [pc, #36]	; (800475c <global_stdio_init.part.0+0x28>)
 8004738:	4a09      	ldr	r2, [pc, #36]	; (8004760 <global_stdio_init.part.0+0x2c>)
 800473a:	2104      	movs	r1, #4
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	4809      	ldr	r0, [pc, #36]	; (8004764 <global_stdio_init.part.0+0x30>)
 8004740:	2200      	movs	r2, #0
 8004742:	f7ff ffa7 	bl	8004694 <std>
 8004746:	2201      	movs	r2, #1
 8004748:	2109      	movs	r1, #9
 800474a:	4807      	ldr	r0, [pc, #28]	; (8004768 <global_stdio_init.part.0+0x34>)
 800474c:	f7ff ffa2 	bl	8004694 <std>
 8004750:	2202      	movs	r2, #2
 8004752:	2112      	movs	r1, #18
 8004754:	4805      	ldr	r0, [pc, #20]	; (800476c <global_stdio_init.part.0+0x38>)
 8004756:	f7ff ff9d 	bl	8004694 <std>
 800475a:	bd10      	pop	{r4, pc}
 800475c:	200004a4 	.word	0x200004a4
 8004760:	080046dd 	.word	0x080046dd
 8004764:	2000036c 	.word	0x2000036c
 8004768:	200003d4 	.word	0x200003d4
 800476c:	2000043c 	.word	0x2000043c

08004770 <__sfp_lock_acquire>:
 8004770:	b510      	push	{r4, lr}
 8004772:	4802      	ldr	r0, [pc, #8]	; (800477c <__sfp_lock_acquire+0xc>)
 8004774:	f000 f8d2 	bl	800491c <__retarget_lock_acquire_recursive>
 8004778:	bd10      	pop	{r4, pc}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	200004a9 	.word	0x200004a9

08004780 <__sfp_lock_release>:
 8004780:	b510      	push	{r4, lr}
 8004782:	4802      	ldr	r0, [pc, #8]	; (800478c <__sfp_lock_release+0xc>)
 8004784:	f000 f8cb 	bl	800491e <__retarget_lock_release_recursive>
 8004788:	bd10      	pop	{r4, pc}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	200004a9 	.word	0x200004a9

08004790 <__sinit>:
 8004790:	b510      	push	{r4, lr}
 8004792:	0004      	movs	r4, r0
 8004794:	f7ff ffec 	bl	8004770 <__sfp_lock_acquire>
 8004798:	6a23      	ldr	r3, [r4, #32]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <__sinit+0x14>
 800479e:	f7ff ffef 	bl	8004780 <__sfp_lock_release>
 80047a2:	bd10      	pop	{r4, pc}
 80047a4:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <__sinit+0x28>)
 80047a6:	6223      	str	r3, [r4, #32]
 80047a8:	4b04      	ldr	r3, [pc, #16]	; (80047bc <__sinit+0x2c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f6      	bne.n	800479e <__sinit+0xe>
 80047b0:	f7ff ffc0 	bl	8004734 <global_stdio_init.part.0>
 80047b4:	e7f3      	b.n	800479e <__sinit+0xe>
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	080046f9 	.word	0x080046f9
 80047bc:	200004a4 	.word	0x200004a4

080047c0 <_fwalk_sglue>:
 80047c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047c2:	0014      	movs	r4, r2
 80047c4:	2600      	movs	r6, #0
 80047c6:	9000      	str	r0, [sp, #0]
 80047c8:	9101      	str	r1, [sp, #4]
 80047ca:	68a5      	ldr	r5, [r4, #8]
 80047cc:	6867      	ldr	r7, [r4, #4]
 80047ce:	3f01      	subs	r7, #1
 80047d0:	d504      	bpl.n	80047dc <_fwalk_sglue+0x1c>
 80047d2:	6824      	ldr	r4, [r4, #0]
 80047d4:	2c00      	cmp	r4, #0
 80047d6:	d1f8      	bne.n	80047ca <_fwalk_sglue+0xa>
 80047d8:	0030      	movs	r0, r6
 80047da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047dc:	89ab      	ldrh	r3, [r5, #12]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d908      	bls.n	80047f4 <_fwalk_sglue+0x34>
 80047e2:	220e      	movs	r2, #14
 80047e4:	5eab      	ldrsh	r3, [r5, r2]
 80047e6:	3301      	adds	r3, #1
 80047e8:	d004      	beq.n	80047f4 <_fwalk_sglue+0x34>
 80047ea:	0029      	movs	r1, r5
 80047ec:	9800      	ldr	r0, [sp, #0]
 80047ee:	9b01      	ldr	r3, [sp, #4]
 80047f0:	4798      	blx	r3
 80047f2:	4306      	orrs	r6, r0
 80047f4:	3568      	adds	r5, #104	; 0x68
 80047f6:	e7ea      	b.n	80047ce <_fwalk_sglue+0xe>

080047f8 <_puts_r>:
 80047f8:	6a03      	ldr	r3, [r0, #32]
 80047fa:	b570      	push	{r4, r5, r6, lr}
 80047fc:	0005      	movs	r5, r0
 80047fe:	000e      	movs	r6, r1
 8004800:	6884      	ldr	r4, [r0, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <_puts_r+0x12>
 8004806:	f7ff ffc3 	bl	8004790 <__sinit>
 800480a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800480c:	07db      	lsls	r3, r3, #31
 800480e:	d405      	bmi.n	800481c <_puts_r+0x24>
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	059b      	lsls	r3, r3, #22
 8004814:	d402      	bmi.n	800481c <_puts_r+0x24>
 8004816:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004818:	f000 f880 	bl	800491c <__retarget_lock_acquire_recursive>
 800481c:	89a3      	ldrh	r3, [r4, #12]
 800481e:	071b      	lsls	r3, r3, #28
 8004820:	d502      	bpl.n	8004828 <_puts_r+0x30>
 8004822:	6923      	ldr	r3, [r4, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d11f      	bne.n	8004868 <_puts_r+0x70>
 8004828:	0021      	movs	r1, r4
 800482a:	0028      	movs	r0, r5
 800482c:	f000 fa70 	bl	8004d10 <__swsetup_r>
 8004830:	2800      	cmp	r0, #0
 8004832:	d019      	beq.n	8004868 <_puts_r+0x70>
 8004834:	2501      	movs	r5, #1
 8004836:	426d      	negs	r5, r5
 8004838:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800483a:	07db      	lsls	r3, r3, #31
 800483c:	d405      	bmi.n	800484a <_puts_r+0x52>
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	059b      	lsls	r3, r3, #22
 8004842:	d402      	bmi.n	800484a <_puts_r+0x52>
 8004844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004846:	f000 f86a 	bl	800491e <__retarget_lock_release_recursive>
 800484a:	0028      	movs	r0, r5
 800484c:	bd70      	pop	{r4, r5, r6, pc}
 800484e:	3601      	adds	r6, #1
 8004850:	60a3      	str	r3, [r4, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	da04      	bge.n	8004860 <_puts_r+0x68>
 8004856:	69a2      	ldr	r2, [r4, #24]
 8004858:	429a      	cmp	r2, r3
 800485a:	dc16      	bgt.n	800488a <_puts_r+0x92>
 800485c:	290a      	cmp	r1, #10
 800485e:	d014      	beq.n	800488a <_puts_r+0x92>
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	6022      	str	r2, [r4, #0]
 8004866:	7019      	strb	r1, [r3, #0]
 8004868:	68a3      	ldr	r3, [r4, #8]
 800486a:	7831      	ldrb	r1, [r6, #0]
 800486c:	3b01      	subs	r3, #1
 800486e:	2900      	cmp	r1, #0
 8004870:	d1ed      	bne.n	800484e <_puts_r+0x56>
 8004872:	60a3      	str	r3, [r4, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	da0f      	bge.n	8004898 <_puts_r+0xa0>
 8004878:	0028      	movs	r0, r5
 800487a:	0022      	movs	r2, r4
 800487c:	310a      	adds	r1, #10
 800487e:	f000 fa05 	bl	8004c8c <__swbuf_r>
 8004882:	250a      	movs	r5, #10
 8004884:	3001      	adds	r0, #1
 8004886:	d1d7      	bne.n	8004838 <_puts_r+0x40>
 8004888:	e7d4      	b.n	8004834 <_puts_r+0x3c>
 800488a:	0022      	movs	r2, r4
 800488c:	0028      	movs	r0, r5
 800488e:	f000 f9fd 	bl	8004c8c <__swbuf_r>
 8004892:	3001      	adds	r0, #1
 8004894:	d1e8      	bne.n	8004868 <_puts_r+0x70>
 8004896:	e7cd      	b.n	8004834 <_puts_r+0x3c>
 8004898:	250a      	movs	r5, #10
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	6022      	str	r2, [r4, #0]
 80048a0:	701d      	strb	r5, [r3, #0]
 80048a2:	e7c9      	b.n	8004838 <_puts_r+0x40>

080048a4 <puts>:
 80048a4:	b510      	push	{r4, lr}
 80048a6:	4b03      	ldr	r3, [pc, #12]	; (80048b4 <puts+0x10>)
 80048a8:	0001      	movs	r1, r0
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	f7ff ffa4 	bl	80047f8 <_puts_r>
 80048b0:	bd10      	pop	{r4, pc}
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	20000068 	.word	0x20000068

080048b8 <memset>:
 80048b8:	0003      	movs	r3, r0
 80048ba:	1882      	adds	r2, r0, r2
 80048bc:	4293      	cmp	r3, r2
 80048be:	d100      	bne.n	80048c2 <memset+0xa>
 80048c0:	4770      	bx	lr
 80048c2:	7019      	strb	r1, [r3, #0]
 80048c4:	3301      	adds	r3, #1
 80048c6:	e7f9      	b.n	80048bc <memset+0x4>

080048c8 <__errno>:
 80048c8:	4b01      	ldr	r3, [pc, #4]	; (80048d0 <__errno+0x8>)
 80048ca:	6818      	ldr	r0, [r3, #0]
 80048cc:	4770      	bx	lr
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	20000068 	.word	0x20000068

080048d4 <__libc_init_array>:
 80048d4:	b570      	push	{r4, r5, r6, lr}
 80048d6:	2600      	movs	r6, #0
 80048d8:	4c0c      	ldr	r4, [pc, #48]	; (800490c <__libc_init_array+0x38>)
 80048da:	4d0d      	ldr	r5, [pc, #52]	; (8004910 <__libc_init_array+0x3c>)
 80048dc:	1b64      	subs	r4, r4, r5
 80048de:	10a4      	asrs	r4, r4, #2
 80048e0:	42a6      	cmp	r6, r4
 80048e2:	d109      	bne.n	80048f8 <__libc_init_array+0x24>
 80048e4:	2600      	movs	r6, #0
 80048e6:	f000 fbab 	bl	8005040 <_init>
 80048ea:	4c0a      	ldr	r4, [pc, #40]	; (8004914 <__libc_init_array+0x40>)
 80048ec:	4d0a      	ldr	r5, [pc, #40]	; (8004918 <__libc_init_array+0x44>)
 80048ee:	1b64      	subs	r4, r4, r5
 80048f0:	10a4      	asrs	r4, r4, #2
 80048f2:	42a6      	cmp	r6, r4
 80048f4:	d105      	bne.n	8004902 <__libc_init_array+0x2e>
 80048f6:	bd70      	pop	{r4, r5, r6, pc}
 80048f8:	00b3      	lsls	r3, r6, #2
 80048fa:	58eb      	ldr	r3, [r5, r3]
 80048fc:	4798      	blx	r3
 80048fe:	3601      	adds	r6, #1
 8004900:	e7ee      	b.n	80048e0 <__libc_init_array+0xc>
 8004902:	00b3      	lsls	r3, r6, #2
 8004904:	58eb      	ldr	r3, [r5, r3]
 8004906:	4798      	blx	r3
 8004908:	3601      	adds	r6, #1
 800490a:	e7f2      	b.n	80048f2 <__libc_init_array+0x1e>
 800490c:	08005314 	.word	0x08005314
 8004910:	08005314 	.word	0x08005314
 8004914:	08005318 	.word	0x08005318
 8004918:	08005314 	.word	0x08005314

0800491c <__retarget_lock_acquire_recursive>:
 800491c:	4770      	bx	lr

0800491e <__retarget_lock_release_recursive>:
 800491e:	4770      	bx	lr

08004920 <sbrk_aligned>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	4e0f      	ldr	r6, [pc, #60]	; (8004960 <sbrk_aligned+0x40>)
 8004924:	000d      	movs	r5, r1
 8004926:	6831      	ldr	r1, [r6, #0]
 8004928:	0004      	movs	r4, r0
 800492a:	2900      	cmp	r1, #0
 800492c:	d102      	bne.n	8004934 <sbrk_aligned+0x14>
 800492e:	f000 fb17 	bl	8004f60 <_sbrk_r>
 8004932:	6030      	str	r0, [r6, #0]
 8004934:	0029      	movs	r1, r5
 8004936:	0020      	movs	r0, r4
 8004938:	f000 fb12 	bl	8004f60 <_sbrk_r>
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	d00a      	beq.n	8004956 <sbrk_aligned+0x36>
 8004940:	2303      	movs	r3, #3
 8004942:	1cc5      	adds	r5, r0, #3
 8004944:	439d      	bics	r5, r3
 8004946:	42a8      	cmp	r0, r5
 8004948:	d007      	beq.n	800495a <sbrk_aligned+0x3a>
 800494a:	1a29      	subs	r1, r5, r0
 800494c:	0020      	movs	r0, r4
 800494e:	f000 fb07 	bl	8004f60 <_sbrk_r>
 8004952:	3001      	adds	r0, #1
 8004954:	d101      	bne.n	800495a <sbrk_aligned+0x3a>
 8004956:	2501      	movs	r5, #1
 8004958:	426d      	negs	r5, r5
 800495a:	0028      	movs	r0, r5
 800495c:	bd70      	pop	{r4, r5, r6, pc}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	200004b0 	.word	0x200004b0

08004964 <_malloc_r>:
 8004964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004966:	2203      	movs	r2, #3
 8004968:	1ccb      	adds	r3, r1, #3
 800496a:	4393      	bics	r3, r2
 800496c:	3308      	adds	r3, #8
 800496e:	0006      	movs	r6, r0
 8004970:	001f      	movs	r7, r3
 8004972:	2b0c      	cmp	r3, #12
 8004974:	d238      	bcs.n	80049e8 <_malloc_r+0x84>
 8004976:	270c      	movs	r7, #12
 8004978:	42b9      	cmp	r1, r7
 800497a:	d837      	bhi.n	80049ec <_malloc_r+0x88>
 800497c:	0030      	movs	r0, r6
 800497e:	f000 f929 	bl	8004bd4 <__malloc_lock>
 8004982:	4b38      	ldr	r3, [pc, #224]	; (8004a64 <_malloc_r+0x100>)
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	001c      	movs	r4, r3
 800498a:	2c00      	cmp	r4, #0
 800498c:	d133      	bne.n	80049f6 <_malloc_r+0x92>
 800498e:	0039      	movs	r1, r7
 8004990:	0030      	movs	r0, r6
 8004992:	f7ff ffc5 	bl	8004920 <sbrk_aligned>
 8004996:	0004      	movs	r4, r0
 8004998:	1c43      	adds	r3, r0, #1
 800499a:	d15e      	bne.n	8004a5a <_malloc_r+0xf6>
 800499c:	9b00      	ldr	r3, [sp, #0]
 800499e:	681c      	ldr	r4, [r3, #0]
 80049a0:	0025      	movs	r5, r4
 80049a2:	2d00      	cmp	r5, #0
 80049a4:	d14e      	bne.n	8004a44 <_malloc_r+0xe0>
 80049a6:	2c00      	cmp	r4, #0
 80049a8:	d051      	beq.n	8004a4e <_malloc_r+0xea>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	0029      	movs	r1, r5
 80049ae:	18e3      	adds	r3, r4, r3
 80049b0:	0030      	movs	r0, r6
 80049b2:	9301      	str	r3, [sp, #4]
 80049b4:	f000 fad4 	bl	8004f60 <_sbrk_r>
 80049b8:	9b01      	ldr	r3, [sp, #4]
 80049ba:	4283      	cmp	r3, r0
 80049bc:	d147      	bne.n	8004a4e <_malloc_r+0xea>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	0030      	movs	r0, r6
 80049c2:	1aff      	subs	r7, r7, r3
 80049c4:	0039      	movs	r1, r7
 80049c6:	f7ff ffab 	bl	8004920 <sbrk_aligned>
 80049ca:	3001      	adds	r0, #1
 80049cc:	d03f      	beq.n	8004a4e <_malloc_r+0xea>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	19db      	adds	r3, r3, r7
 80049d2:	6023      	str	r3, [r4, #0]
 80049d4:	9b00      	ldr	r3, [sp, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d040      	beq.n	8004a5e <_malloc_r+0xfa>
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	42a2      	cmp	r2, r4
 80049e0:	d133      	bne.n	8004a4a <_malloc_r+0xe6>
 80049e2:	2200      	movs	r2, #0
 80049e4:	605a      	str	r2, [r3, #4]
 80049e6:	e014      	b.n	8004a12 <_malloc_r+0xae>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	dac5      	bge.n	8004978 <_malloc_r+0x14>
 80049ec:	230c      	movs	r3, #12
 80049ee:	2500      	movs	r5, #0
 80049f0:	6033      	str	r3, [r6, #0]
 80049f2:	0028      	movs	r0, r5
 80049f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049f6:	6821      	ldr	r1, [r4, #0]
 80049f8:	1bc9      	subs	r1, r1, r7
 80049fa:	d420      	bmi.n	8004a3e <_malloc_r+0xda>
 80049fc:	290b      	cmp	r1, #11
 80049fe:	d918      	bls.n	8004a32 <_malloc_r+0xce>
 8004a00:	19e2      	adds	r2, r4, r7
 8004a02:	6027      	str	r7, [r4, #0]
 8004a04:	42a3      	cmp	r3, r4
 8004a06:	d112      	bne.n	8004a2e <_malloc_r+0xca>
 8004a08:	9b00      	ldr	r3, [sp, #0]
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	6863      	ldr	r3, [r4, #4]
 8004a0e:	6011      	str	r1, [r2, #0]
 8004a10:	6053      	str	r3, [r2, #4]
 8004a12:	0030      	movs	r0, r6
 8004a14:	0025      	movs	r5, r4
 8004a16:	f000 f8e5 	bl	8004be4 <__malloc_unlock>
 8004a1a:	2207      	movs	r2, #7
 8004a1c:	350b      	adds	r5, #11
 8004a1e:	1d23      	adds	r3, r4, #4
 8004a20:	4395      	bics	r5, r2
 8004a22:	1aea      	subs	r2, r5, r3
 8004a24:	429d      	cmp	r5, r3
 8004a26:	d0e4      	beq.n	80049f2 <_malloc_r+0x8e>
 8004a28:	1b5b      	subs	r3, r3, r5
 8004a2a:	50a3      	str	r3, [r4, r2]
 8004a2c:	e7e1      	b.n	80049f2 <_malloc_r+0x8e>
 8004a2e:	605a      	str	r2, [r3, #4]
 8004a30:	e7ec      	b.n	8004a0c <_malloc_r+0xa8>
 8004a32:	6862      	ldr	r2, [r4, #4]
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	d1d5      	bne.n	80049e4 <_malloc_r+0x80>
 8004a38:	9b00      	ldr	r3, [sp, #0]
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	e7e9      	b.n	8004a12 <_malloc_r+0xae>
 8004a3e:	0023      	movs	r3, r4
 8004a40:	6864      	ldr	r4, [r4, #4]
 8004a42:	e7a2      	b.n	800498a <_malloc_r+0x26>
 8004a44:	002c      	movs	r4, r5
 8004a46:	686d      	ldr	r5, [r5, #4]
 8004a48:	e7ab      	b.n	80049a2 <_malloc_r+0x3e>
 8004a4a:	0013      	movs	r3, r2
 8004a4c:	e7c4      	b.n	80049d8 <_malloc_r+0x74>
 8004a4e:	230c      	movs	r3, #12
 8004a50:	0030      	movs	r0, r6
 8004a52:	6033      	str	r3, [r6, #0]
 8004a54:	f000 f8c6 	bl	8004be4 <__malloc_unlock>
 8004a58:	e7cb      	b.n	80049f2 <_malloc_r+0x8e>
 8004a5a:	6027      	str	r7, [r4, #0]
 8004a5c:	e7d9      	b.n	8004a12 <_malloc_r+0xae>
 8004a5e:	605b      	str	r3, [r3, #4]
 8004a60:	deff      	udf	#255	; 0xff
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	200004ac 	.word	0x200004ac

08004a68 <__sflush_r>:
 8004a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a6a:	898b      	ldrh	r3, [r1, #12]
 8004a6c:	0005      	movs	r5, r0
 8004a6e:	000c      	movs	r4, r1
 8004a70:	071a      	lsls	r2, r3, #28
 8004a72:	d45c      	bmi.n	8004b2e <__sflush_r+0xc6>
 8004a74:	684a      	ldr	r2, [r1, #4]
 8004a76:	2a00      	cmp	r2, #0
 8004a78:	dc04      	bgt.n	8004a84 <__sflush_r+0x1c>
 8004a7a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004a7c:	2a00      	cmp	r2, #0
 8004a7e:	dc01      	bgt.n	8004a84 <__sflush_r+0x1c>
 8004a80:	2000      	movs	r0, #0
 8004a82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a84:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004a86:	2f00      	cmp	r7, #0
 8004a88:	d0fa      	beq.n	8004a80 <__sflush_r+0x18>
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2080      	movs	r0, #128	; 0x80
 8004a8e:	682e      	ldr	r6, [r5, #0]
 8004a90:	602a      	str	r2, [r5, #0]
 8004a92:	001a      	movs	r2, r3
 8004a94:	0140      	lsls	r0, r0, #5
 8004a96:	6a21      	ldr	r1, [r4, #32]
 8004a98:	4002      	ands	r2, r0
 8004a9a:	4203      	tst	r3, r0
 8004a9c:	d034      	beq.n	8004b08 <__sflush_r+0xa0>
 8004a9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	075b      	lsls	r3, r3, #29
 8004aa4:	d506      	bpl.n	8004ab4 <__sflush_r+0x4c>
 8004aa6:	6863      	ldr	r3, [r4, #4]
 8004aa8:	1ac0      	subs	r0, r0, r3
 8004aaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <__sflush_r+0x4c>
 8004ab0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ab2:	1ac0      	subs	r0, r0, r3
 8004ab4:	0002      	movs	r2, r0
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	0028      	movs	r0, r5
 8004aba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004abc:	6a21      	ldr	r1, [r4, #32]
 8004abe:	47b8      	blx	r7
 8004ac0:	89a2      	ldrh	r2, [r4, #12]
 8004ac2:	1c43      	adds	r3, r0, #1
 8004ac4:	d106      	bne.n	8004ad4 <__sflush_r+0x6c>
 8004ac6:	6829      	ldr	r1, [r5, #0]
 8004ac8:	291d      	cmp	r1, #29
 8004aca:	d82c      	bhi.n	8004b26 <__sflush_r+0xbe>
 8004acc:	4b2a      	ldr	r3, [pc, #168]	; (8004b78 <__sflush_r+0x110>)
 8004ace:	410b      	asrs	r3, r1
 8004ad0:	07db      	lsls	r3, r3, #31
 8004ad2:	d428      	bmi.n	8004b26 <__sflush_r+0xbe>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	6063      	str	r3, [r4, #4]
 8004ad8:	6923      	ldr	r3, [r4, #16]
 8004ada:	6023      	str	r3, [r4, #0]
 8004adc:	04d2      	lsls	r2, r2, #19
 8004ade:	d505      	bpl.n	8004aec <__sflush_r+0x84>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <__sflush_r+0x82>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d100      	bne.n	8004aec <__sflush_r+0x84>
 8004aea:	6560      	str	r0, [r4, #84]	; 0x54
 8004aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aee:	602e      	str	r6, [r5, #0]
 8004af0:	2900      	cmp	r1, #0
 8004af2:	d0c5      	beq.n	8004a80 <__sflush_r+0x18>
 8004af4:	0023      	movs	r3, r4
 8004af6:	3344      	adds	r3, #68	; 0x44
 8004af8:	4299      	cmp	r1, r3
 8004afa:	d002      	beq.n	8004b02 <__sflush_r+0x9a>
 8004afc:	0028      	movs	r0, r5
 8004afe:	f000 fa55 	bl	8004fac <_free_r>
 8004b02:	2000      	movs	r0, #0
 8004b04:	6360      	str	r0, [r4, #52]	; 0x34
 8004b06:	e7bc      	b.n	8004a82 <__sflush_r+0x1a>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	0028      	movs	r0, r5
 8004b0c:	47b8      	blx	r7
 8004b0e:	1c43      	adds	r3, r0, #1
 8004b10:	d1c6      	bne.n	8004aa0 <__sflush_r+0x38>
 8004b12:	682b      	ldr	r3, [r5, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0c3      	beq.n	8004aa0 <__sflush_r+0x38>
 8004b18:	2b1d      	cmp	r3, #29
 8004b1a:	d001      	beq.n	8004b20 <__sflush_r+0xb8>
 8004b1c:	2b16      	cmp	r3, #22
 8004b1e:	d101      	bne.n	8004b24 <__sflush_r+0xbc>
 8004b20:	602e      	str	r6, [r5, #0]
 8004b22:	e7ad      	b.n	8004a80 <__sflush_r+0x18>
 8004b24:	89a2      	ldrh	r2, [r4, #12]
 8004b26:	2340      	movs	r3, #64	; 0x40
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	81a3      	strh	r3, [r4, #12]
 8004b2c:	e7a9      	b.n	8004a82 <__sflush_r+0x1a>
 8004b2e:	690e      	ldr	r6, [r1, #16]
 8004b30:	2e00      	cmp	r6, #0
 8004b32:	d0a5      	beq.n	8004a80 <__sflush_r+0x18>
 8004b34:	680f      	ldr	r7, [r1, #0]
 8004b36:	600e      	str	r6, [r1, #0]
 8004b38:	1bba      	subs	r2, r7, r6
 8004b3a:	9201      	str	r2, [sp, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	079b      	lsls	r3, r3, #30
 8004b40:	d100      	bne.n	8004b44 <__sflush_r+0xdc>
 8004b42:	694a      	ldr	r2, [r1, #20]
 8004b44:	60a2      	str	r2, [r4, #8]
 8004b46:	9b01      	ldr	r3, [sp, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	dd99      	ble.n	8004a80 <__sflush_r+0x18>
 8004b4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b4e:	0032      	movs	r2, r6
 8004b50:	001f      	movs	r7, r3
 8004b52:	0028      	movs	r0, r5
 8004b54:	9b01      	ldr	r3, [sp, #4]
 8004b56:	6a21      	ldr	r1, [r4, #32]
 8004b58:	47b8      	blx	r7
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	dc06      	bgt.n	8004b6c <__sflush_r+0x104>
 8004b5e:	2340      	movs	r3, #64	; 0x40
 8004b60:	2001      	movs	r0, #1
 8004b62:	89a2      	ldrh	r2, [r4, #12]
 8004b64:	4240      	negs	r0, r0
 8004b66:	4313      	orrs	r3, r2
 8004b68:	81a3      	strh	r3, [r4, #12]
 8004b6a:	e78a      	b.n	8004a82 <__sflush_r+0x1a>
 8004b6c:	9b01      	ldr	r3, [sp, #4]
 8004b6e:	1836      	adds	r6, r6, r0
 8004b70:	1a1b      	subs	r3, r3, r0
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	e7e7      	b.n	8004b46 <__sflush_r+0xde>
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	dfbffffe 	.word	0xdfbffffe

08004b7c <_fflush_r>:
 8004b7c:	690b      	ldr	r3, [r1, #16]
 8004b7e:	b570      	push	{r4, r5, r6, lr}
 8004b80:	0005      	movs	r5, r0
 8004b82:	000c      	movs	r4, r1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d102      	bne.n	8004b8e <_fflush_r+0x12>
 8004b88:	2500      	movs	r5, #0
 8004b8a:	0028      	movs	r0, r5
 8004b8c:	bd70      	pop	{r4, r5, r6, pc}
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	d004      	beq.n	8004b9c <_fflush_r+0x20>
 8004b92:	6a03      	ldr	r3, [r0, #32]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <_fflush_r+0x20>
 8004b98:	f7ff fdfa 	bl	8004790 <__sinit>
 8004b9c:	220c      	movs	r2, #12
 8004b9e:	5ea3      	ldrsh	r3, [r4, r2]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0f1      	beq.n	8004b88 <_fflush_r+0xc>
 8004ba4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ba6:	07d2      	lsls	r2, r2, #31
 8004ba8:	d404      	bmi.n	8004bb4 <_fflush_r+0x38>
 8004baa:	059b      	lsls	r3, r3, #22
 8004bac:	d402      	bmi.n	8004bb4 <_fflush_r+0x38>
 8004bae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bb0:	f7ff feb4 	bl	800491c <__retarget_lock_acquire_recursive>
 8004bb4:	0028      	movs	r0, r5
 8004bb6:	0021      	movs	r1, r4
 8004bb8:	f7ff ff56 	bl	8004a68 <__sflush_r>
 8004bbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bbe:	0005      	movs	r5, r0
 8004bc0:	07db      	lsls	r3, r3, #31
 8004bc2:	d4e2      	bmi.n	8004b8a <_fflush_r+0xe>
 8004bc4:	89a3      	ldrh	r3, [r4, #12]
 8004bc6:	059b      	lsls	r3, r3, #22
 8004bc8:	d4df      	bmi.n	8004b8a <_fflush_r+0xe>
 8004bca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bcc:	f7ff fea7 	bl	800491e <__retarget_lock_release_recursive>
 8004bd0:	e7db      	b.n	8004b8a <_fflush_r+0xe>
	...

08004bd4 <__malloc_lock>:
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	4802      	ldr	r0, [pc, #8]	; (8004be0 <__malloc_lock+0xc>)
 8004bd8:	f7ff fea0 	bl	800491c <__retarget_lock_acquire_recursive>
 8004bdc:	bd10      	pop	{r4, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	200004a8 	.word	0x200004a8

08004be4 <__malloc_unlock>:
 8004be4:	b510      	push	{r4, lr}
 8004be6:	4802      	ldr	r0, [pc, #8]	; (8004bf0 <__malloc_unlock+0xc>)
 8004be8:	f7ff fe99 	bl	800491e <__retarget_lock_release_recursive>
 8004bec:	bd10      	pop	{r4, pc}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	200004a8 	.word	0x200004a8

08004bf4 <__sread>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	000c      	movs	r4, r1
 8004bf8:	250e      	movs	r5, #14
 8004bfa:	5f49      	ldrsh	r1, [r1, r5]
 8004bfc:	f000 f99c 	bl	8004f38 <_read_r>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	db03      	blt.n	8004c0c <__sread+0x18>
 8004c04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c06:	181b      	adds	r3, r3, r0
 8004c08:	6563      	str	r3, [r4, #84]	; 0x54
 8004c0a:	bd70      	pop	{r4, r5, r6, pc}
 8004c0c:	89a3      	ldrh	r3, [r4, #12]
 8004c0e:	4a02      	ldr	r2, [pc, #8]	; (8004c18 <__sread+0x24>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	81a3      	strh	r3, [r4, #12]
 8004c14:	e7f9      	b.n	8004c0a <__sread+0x16>
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	ffffefff 	.word	0xffffefff

08004c1c <__swrite>:
 8004c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1e:	001f      	movs	r7, r3
 8004c20:	898b      	ldrh	r3, [r1, #12]
 8004c22:	0005      	movs	r5, r0
 8004c24:	000c      	movs	r4, r1
 8004c26:	0016      	movs	r6, r2
 8004c28:	05db      	lsls	r3, r3, #23
 8004c2a:	d505      	bpl.n	8004c38 <__swrite+0x1c>
 8004c2c:	230e      	movs	r3, #14
 8004c2e:	5ec9      	ldrsh	r1, [r1, r3]
 8004c30:	2200      	movs	r2, #0
 8004c32:	2302      	movs	r3, #2
 8004c34:	f000 f96c 	bl	8004f10 <_lseek_r>
 8004c38:	89a3      	ldrh	r3, [r4, #12]
 8004c3a:	4a05      	ldr	r2, [pc, #20]	; (8004c50 <__swrite+0x34>)
 8004c3c:	0028      	movs	r0, r5
 8004c3e:	4013      	ands	r3, r2
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	0032      	movs	r2, r6
 8004c44:	230e      	movs	r3, #14
 8004c46:	5ee1      	ldrsh	r1, [r4, r3]
 8004c48:	003b      	movs	r3, r7
 8004c4a:	f000 f99b 	bl	8004f84 <_write_r>
 8004c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c50:	ffffefff 	.word	0xffffefff

08004c54 <__sseek>:
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	000c      	movs	r4, r1
 8004c58:	250e      	movs	r5, #14
 8004c5a:	5f49      	ldrsh	r1, [r1, r5]
 8004c5c:	f000 f958 	bl	8004f10 <_lseek_r>
 8004c60:	89a3      	ldrh	r3, [r4, #12]
 8004c62:	1c42      	adds	r2, r0, #1
 8004c64:	d103      	bne.n	8004c6e <__sseek+0x1a>
 8004c66:	4a05      	ldr	r2, [pc, #20]	; (8004c7c <__sseek+0x28>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	bd70      	pop	{r4, r5, r6, pc}
 8004c6e:	2280      	movs	r2, #128	; 0x80
 8004c70:	0152      	lsls	r2, r2, #5
 8004c72:	4313      	orrs	r3, r2
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	6560      	str	r0, [r4, #84]	; 0x54
 8004c78:	e7f8      	b.n	8004c6c <__sseek+0x18>
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	ffffefff 	.word	0xffffefff

08004c80 <__sclose>:
 8004c80:	b510      	push	{r4, lr}
 8004c82:	230e      	movs	r3, #14
 8004c84:	5ec9      	ldrsh	r1, [r1, r3]
 8004c86:	f000 f90d 	bl	8004ea4 <_close_r>
 8004c8a:	bd10      	pop	{r4, pc}

08004c8c <__swbuf_r>:
 8004c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8e:	0006      	movs	r6, r0
 8004c90:	000d      	movs	r5, r1
 8004c92:	0014      	movs	r4, r2
 8004c94:	2800      	cmp	r0, #0
 8004c96:	d004      	beq.n	8004ca2 <__swbuf_r+0x16>
 8004c98:	6a03      	ldr	r3, [r0, #32]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <__swbuf_r+0x16>
 8004c9e:	f7ff fd77 	bl	8004790 <__sinit>
 8004ca2:	69a3      	ldr	r3, [r4, #24]
 8004ca4:	60a3      	str	r3, [r4, #8]
 8004ca6:	89a3      	ldrh	r3, [r4, #12]
 8004ca8:	071b      	lsls	r3, r3, #28
 8004caa:	d528      	bpl.n	8004cfe <__swbuf_r+0x72>
 8004cac:	6923      	ldr	r3, [r4, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d025      	beq.n	8004cfe <__swbuf_r+0x72>
 8004cb2:	6923      	ldr	r3, [r4, #16]
 8004cb4:	6820      	ldr	r0, [r4, #0]
 8004cb6:	b2ef      	uxtb	r7, r5
 8004cb8:	1ac0      	subs	r0, r0, r3
 8004cba:	6963      	ldr	r3, [r4, #20]
 8004cbc:	b2ed      	uxtb	r5, r5
 8004cbe:	4283      	cmp	r3, r0
 8004cc0:	dc05      	bgt.n	8004cce <__swbuf_r+0x42>
 8004cc2:	0021      	movs	r1, r4
 8004cc4:	0030      	movs	r0, r6
 8004cc6:	f7ff ff59 	bl	8004b7c <_fflush_r>
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	d11d      	bne.n	8004d0a <__swbuf_r+0x7e>
 8004cce:	68a3      	ldr	r3, [r4, #8]
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	60a3      	str	r3, [r4, #8]
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	6022      	str	r2, [r4, #0]
 8004cdc:	701f      	strb	r7, [r3, #0]
 8004cde:	6963      	ldr	r3, [r4, #20]
 8004ce0:	4283      	cmp	r3, r0
 8004ce2:	d004      	beq.n	8004cee <__swbuf_r+0x62>
 8004ce4:	89a3      	ldrh	r3, [r4, #12]
 8004ce6:	07db      	lsls	r3, r3, #31
 8004ce8:	d507      	bpl.n	8004cfa <__swbuf_r+0x6e>
 8004cea:	2d0a      	cmp	r5, #10
 8004cec:	d105      	bne.n	8004cfa <__swbuf_r+0x6e>
 8004cee:	0021      	movs	r1, r4
 8004cf0:	0030      	movs	r0, r6
 8004cf2:	f7ff ff43 	bl	8004b7c <_fflush_r>
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	d107      	bne.n	8004d0a <__swbuf_r+0x7e>
 8004cfa:	0028      	movs	r0, r5
 8004cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cfe:	0021      	movs	r1, r4
 8004d00:	0030      	movs	r0, r6
 8004d02:	f000 f805 	bl	8004d10 <__swsetup_r>
 8004d06:	2800      	cmp	r0, #0
 8004d08:	d0d3      	beq.n	8004cb2 <__swbuf_r+0x26>
 8004d0a:	2501      	movs	r5, #1
 8004d0c:	426d      	negs	r5, r5
 8004d0e:	e7f4      	b.n	8004cfa <__swbuf_r+0x6e>

08004d10 <__swsetup_r>:
 8004d10:	4b30      	ldr	r3, [pc, #192]	; (8004dd4 <__swsetup_r+0xc4>)
 8004d12:	b570      	push	{r4, r5, r6, lr}
 8004d14:	0005      	movs	r5, r0
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	000c      	movs	r4, r1
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d004      	beq.n	8004d28 <__swsetup_r+0x18>
 8004d1e:	6a03      	ldr	r3, [r0, #32]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <__swsetup_r+0x18>
 8004d24:	f7ff fd34 	bl	8004790 <__sinit>
 8004d28:	230c      	movs	r3, #12
 8004d2a:	5ee2      	ldrsh	r2, [r4, r3]
 8004d2c:	b293      	uxth	r3, r2
 8004d2e:	0711      	lsls	r1, r2, #28
 8004d30:	d423      	bmi.n	8004d7a <__swsetup_r+0x6a>
 8004d32:	06d9      	lsls	r1, r3, #27
 8004d34:	d407      	bmi.n	8004d46 <__swsetup_r+0x36>
 8004d36:	2309      	movs	r3, #9
 8004d38:	2001      	movs	r0, #1
 8004d3a:	602b      	str	r3, [r5, #0]
 8004d3c:	3337      	adds	r3, #55	; 0x37
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	81a3      	strh	r3, [r4, #12]
 8004d42:	4240      	negs	r0, r0
 8004d44:	bd70      	pop	{r4, r5, r6, pc}
 8004d46:	075b      	lsls	r3, r3, #29
 8004d48:	d513      	bpl.n	8004d72 <__swsetup_r+0x62>
 8004d4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d4c:	2900      	cmp	r1, #0
 8004d4e:	d008      	beq.n	8004d62 <__swsetup_r+0x52>
 8004d50:	0023      	movs	r3, r4
 8004d52:	3344      	adds	r3, #68	; 0x44
 8004d54:	4299      	cmp	r1, r3
 8004d56:	d002      	beq.n	8004d5e <__swsetup_r+0x4e>
 8004d58:	0028      	movs	r0, r5
 8004d5a:	f000 f927 	bl	8004fac <_free_r>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	6363      	str	r3, [r4, #52]	; 0x34
 8004d62:	2224      	movs	r2, #36	; 0x24
 8004d64:	89a3      	ldrh	r3, [r4, #12]
 8004d66:	4393      	bics	r3, r2
 8004d68:	81a3      	strh	r3, [r4, #12]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	6063      	str	r3, [r4, #4]
 8004d6e:	6923      	ldr	r3, [r4, #16]
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	2308      	movs	r3, #8
 8004d74:	89a2      	ldrh	r2, [r4, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	81a3      	strh	r3, [r4, #12]
 8004d7a:	6923      	ldr	r3, [r4, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10b      	bne.n	8004d98 <__swsetup_r+0x88>
 8004d80:	21a0      	movs	r1, #160	; 0xa0
 8004d82:	2280      	movs	r2, #128	; 0x80
 8004d84:	89a3      	ldrh	r3, [r4, #12]
 8004d86:	0089      	lsls	r1, r1, #2
 8004d88:	0092      	lsls	r2, r2, #2
 8004d8a:	400b      	ands	r3, r1
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d003      	beq.n	8004d98 <__swsetup_r+0x88>
 8004d90:	0021      	movs	r1, r4
 8004d92:	0028      	movs	r0, r5
 8004d94:	f000 f848 	bl	8004e28 <__smakebuf_r>
 8004d98:	220c      	movs	r2, #12
 8004d9a:	5ea3      	ldrsh	r3, [r4, r2]
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	001a      	movs	r2, r3
 8004da0:	b299      	uxth	r1, r3
 8004da2:	4002      	ands	r2, r0
 8004da4:	4203      	tst	r3, r0
 8004da6:	d00f      	beq.n	8004dc8 <__swsetup_r+0xb8>
 8004da8:	2200      	movs	r2, #0
 8004daa:	60a2      	str	r2, [r4, #8]
 8004dac:	6962      	ldr	r2, [r4, #20]
 8004dae:	4252      	negs	r2, r2
 8004db0:	61a2      	str	r2, [r4, #24]
 8004db2:	2000      	movs	r0, #0
 8004db4:	6922      	ldr	r2, [r4, #16]
 8004db6:	4282      	cmp	r2, r0
 8004db8:	d1c4      	bne.n	8004d44 <__swsetup_r+0x34>
 8004dba:	0609      	lsls	r1, r1, #24
 8004dbc:	d5c2      	bpl.n	8004d44 <__swsetup_r+0x34>
 8004dbe:	2240      	movs	r2, #64	; 0x40
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	81a3      	strh	r3, [r4, #12]
 8004dc4:	3801      	subs	r0, #1
 8004dc6:	e7bd      	b.n	8004d44 <__swsetup_r+0x34>
 8004dc8:	0788      	lsls	r0, r1, #30
 8004dca:	d400      	bmi.n	8004dce <__swsetup_r+0xbe>
 8004dcc:	6962      	ldr	r2, [r4, #20]
 8004dce:	60a2      	str	r2, [r4, #8]
 8004dd0:	e7ef      	b.n	8004db2 <__swsetup_r+0xa2>
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	20000068 	.word	0x20000068

08004dd8 <__swhatbuf_r>:
 8004dd8:	b570      	push	{r4, r5, r6, lr}
 8004dda:	000e      	movs	r6, r1
 8004ddc:	001d      	movs	r5, r3
 8004dde:	230e      	movs	r3, #14
 8004de0:	5ec9      	ldrsh	r1, [r1, r3]
 8004de2:	0014      	movs	r4, r2
 8004de4:	b096      	sub	sp, #88	; 0x58
 8004de6:	2900      	cmp	r1, #0
 8004de8:	da0c      	bge.n	8004e04 <__swhatbuf_r+0x2c>
 8004dea:	89b2      	ldrh	r2, [r6, #12]
 8004dec:	2380      	movs	r3, #128	; 0x80
 8004dee:	0011      	movs	r1, r2
 8004df0:	4019      	ands	r1, r3
 8004df2:	421a      	tst	r2, r3
 8004df4:	d013      	beq.n	8004e1e <__swhatbuf_r+0x46>
 8004df6:	2100      	movs	r1, #0
 8004df8:	3b40      	subs	r3, #64	; 0x40
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	6029      	str	r1, [r5, #0]
 8004dfe:	6023      	str	r3, [r4, #0]
 8004e00:	b016      	add	sp, #88	; 0x58
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	466a      	mov	r2, sp
 8004e06:	f000 f85f 	bl	8004ec8 <_fstat_r>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	dbed      	blt.n	8004dea <__swhatbuf_r+0x12>
 8004e0e:	23f0      	movs	r3, #240	; 0xf0
 8004e10:	9901      	ldr	r1, [sp, #4]
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	4019      	ands	r1, r3
 8004e16:	4b03      	ldr	r3, [pc, #12]	; (8004e24 <__swhatbuf_r+0x4c>)
 8004e18:	18c9      	adds	r1, r1, r3
 8004e1a:	424b      	negs	r3, r1
 8004e1c:	4159      	adcs	r1, r3
 8004e1e:	2380      	movs	r3, #128	; 0x80
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	e7ea      	b.n	8004dfa <__swhatbuf_r+0x22>
 8004e24:	ffffe000 	.word	0xffffe000

08004e28 <__smakebuf_r>:
 8004e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e2a:	2602      	movs	r6, #2
 8004e2c:	898b      	ldrh	r3, [r1, #12]
 8004e2e:	0005      	movs	r5, r0
 8004e30:	000c      	movs	r4, r1
 8004e32:	4233      	tst	r3, r6
 8004e34:	d006      	beq.n	8004e44 <__smakebuf_r+0x1c>
 8004e36:	0023      	movs	r3, r4
 8004e38:	3347      	adds	r3, #71	; 0x47
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	6123      	str	r3, [r4, #16]
 8004e3e:	2301      	movs	r3, #1
 8004e40:	6163      	str	r3, [r4, #20]
 8004e42:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004e44:	466a      	mov	r2, sp
 8004e46:	ab01      	add	r3, sp, #4
 8004e48:	f7ff ffc6 	bl	8004dd8 <__swhatbuf_r>
 8004e4c:	9900      	ldr	r1, [sp, #0]
 8004e4e:	0007      	movs	r7, r0
 8004e50:	0028      	movs	r0, r5
 8004e52:	f7ff fd87 	bl	8004964 <_malloc_r>
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d108      	bne.n	8004e6c <__smakebuf_r+0x44>
 8004e5a:	220c      	movs	r2, #12
 8004e5c:	5ea3      	ldrsh	r3, [r4, r2]
 8004e5e:	059a      	lsls	r2, r3, #22
 8004e60:	d4ef      	bmi.n	8004e42 <__smakebuf_r+0x1a>
 8004e62:	2203      	movs	r2, #3
 8004e64:	4393      	bics	r3, r2
 8004e66:	431e      	orrs	r6, r3
 8004e68:	81a6      	strh	r6, [r4, #12]
 8004e6a:	e7e4      	b.n	8004e36 <__smakebuf_r+0xe>
 8004e6c:	2380      	movs	r3, #128	; 0x80
 8004e6e:	89a2      	ldrh	r2, [r4, #12]
 8004e70:	6020      	str	r0, [r4, #0]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	81a3      	strh	r3, [r4, #12]
 8004e76:	9b00      	ldr	r3, [sp, #0]
 8004e78:	6120      	str	r0, [r4, #16]
 8004e7a:	6163      	str	r3, [r4, #20]
 8004e7c:	9b01      	ldr	r3, [sp, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00c      	beq.n	8004e9c <__smakebuf_r+0x74>
 8004e82:	0028      	movs	r0, r5
 8004e84:	230e      	movs	r3, #14
 8004e86:	5ee1      	ldrsh	r1, [r4, r3]
 8004e88:	f000 f830 	bl	8004eec <_isatty_r>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d005      	beq.n	8004e9c <__smakebuf_r+0x74>
 8004e90:	2303      	movs	r3, #3
 8004e92:	89a2      	ldrh	r2, [r4, #12]
 8004e94:	439a      	bics	r2, r3
 8004e96:	3b02      	subs	r3, #2
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	81a3      	strh	r3, [r4, #12]
 8004e9c:	89a3      	ldrh	r3, [r4, #12]
 8004e9e:	433b      	orrs	r3, r7
 8004ea0:	81a3      	strh	r3, [r4, #12]
 8004ea2:	e7ce      	b.n	8004e42 <__smakebuf_r+0x1a>

08004ea4 <_close_r>:
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	b570      	push	{r4, r5, r6, lr}
 8004ea8:	4d06      	ldr	r5, [pc, #24]	; (8004ec4 <_close_r+0x20>)
 8004eaa:	0004      	movs	r4, r0
 8004eac:	0008      	movs	r0, r1
 8004eae:	602b      	str	r3, [r5, #0]
 8004eb0:	f7fc f9d8 	bl	8001264 <_close>
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	d103      	bne.n	8004ec0 <_close_r+0x1c>
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d000      	beq.n	8004ec0 <_close_r+0x1c>
 8004ebe:	6023      	str	r3, [r4, #0]
 8004ec0:	bd70      	pop	{r4, r5, r6, pc}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	200004b4 	.word	0x200004b4

08004ec8 <_fstat_r>:
 8004ec8:	2300      	movs	r3, #0
 8004eca:	b570      	push	{r4, r5, r6, lr}
 8004ecc:	4d06      	ldr	r5, [pc, #24]	; (8004ee8 <_fstat_r+0x20>)
 8004ece:	0004      	movs	r4, r0
 8004ed0:	0008      	movs	r0, r1
 8004ed2:	0011      	movs	r1, r2
 8004ed4:	602b      	str	r3, [r5, #0]
 8004ed6:	f7fc f9c9 	bl	800126c <_fstat>
 8004eda:	1c43      	adds	r3, r0, #1
 8004edc:	d103      	bne.n	8004ee6 <_fstat_r+0x1e>
 8004ede:	682b      	ldr	r3, [r5, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d000      	beq.n	8004ee6 <_fstat_r+0x1e>
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
 8004ee8:	200004b4 	.word	0x200004b4

08004eec <_isatty_r>:
 8004eec:	2300      	movs	r3, #0
 8004eee:	b570      	push	{r4, r5, r6, lr}
 8004ef0:	4d06      	ldr	r5, [pc, #24]	; (8004f0c <_isatty_r+0x20>)
 8004ef2:	0004      	movs	r4, r0
 8004ef4:	0008      	movs	r0, r1
 8004ef6:	602b      	str	r3, [r5, #0]
 8004ef8:	f7fc f9be 	bl	8001278 <_isatty>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d103      	bne.n	8004f08 <_isatty_r+0x1c>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d000      	beq.n	8004f08 <_isatty_r+0x1c>
 8004f06:	6023      	str	r3, [r4, #0]
 8004f08:	bd70      	pop	{r4, r5, r6, pc}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	200004b4 	.word	0x200004b4

08004f10 <_lseek_r>:
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	0004      	movs	r4, r0
 8004f14:	0008      	movs	r0, r1
 8004f16:	0011      	movs	r1, r2
 8004f18:	001a      	movs	r2, r3
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	4d05      	ldr	r5, [pc, #20]	; (8004f34 <_lseek_r+0x24>)
 8004f1e:	602b      	str	r3, [r5, #0]
 8004f20:	f7fc f9ac 	bl	800127c <_lseek>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d103      	bne.n	8004f30 <_lseek_r+0x20>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d000      	beq.n	8004f30 <_lseek_r+0x20>
 8004f2e:	6023      	str	r3, [r4, #0]
 8004f30:	bd70      	pop	{r4, r5, r6, pc}
 8004f32:	46c0      	nop			; (mov r8, r8)
 8004f34:	200004b4 	.word	0x200004b4

08004f38 <_read_r>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	0004      	movs	r4, r0
 8004f3c:	0008      	movs	r0, r1
 8004f3e:	0011      	movs	r1, r2
 8004f40:	001a      	movs	r2, r3
 8004f42:	2300      	movs	r3, #0
 8004f44:	4d05      	ldr	r5, [pc, #20]	; (8004f5c <_read_r+0x24>)
 8004f46:	602b      	str	r3, [r5, #0]
 8004f48:	f7fc f970 	bl	800122c <_read>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	d103      	bne.n	8004f58 <_read_r+0x20>
 8004f50:	682b      	ldr	r3, [r5, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d000      	beq.n	8004f58 <_read_r+0x20>
 8004f56:	6023      	str	r3, [r4, #0]
 8004f58:	bd70      	pop	{r4, r5, r6, pc}
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	200004b4 	.word	0x200004b4

08004f60 <_sbrk_r>:
 8004f60:	2300      	movs	r3, #0
 8004f62:	b570      	push	{r4, r5, r6, lr}
 8004f64:	4d06      	ldr	r5, [pc, #24]	; (8004f80 <_sbrk_r+0x20>)
 8004f66:	0004      	movs	r4, r0
 8004f68:	0008      	movs	r0, r1
 8004f6a:	602b      	str	r3, [r5, #0]
 8004f6c:	f7fc f988 	bl	8001280 <_sbrk>
 8004f70:	1c43      	adds	r3, r0, #1
 8004f72:	d103      	bne.n	8004f7c <_sbrk_r+0x1c>
 8004f74:	682b      	ldr	r3, [r5, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d000      	beq.n	8004f7c <_sbrk_r+0x1c>
 8004f7a:	6023      	str	r3, [r4, #0]
 8004f7c:	bd70      	pop	{r4, r5, r6, pc}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	200004b4 	.word	0x200004b4

08004f84 <_write_r>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	0004      	movs	r4, r0
 8004f88:	0008      	movs	r0, r1
 8004f8a:	0011      	movs	r1, r2
 8004f8c:	001a      	movs	r2, r3
 8004f8e:	2300      	movs	r3, #0
 8004f90:	4d05      	ldr	r5, [pc, #20]	; (8004fa8 <_write_r+0x24>)
 8004f92:	602b      	str	r3, [r5, #0]
 8004f94:	f7fc f958 	bl	8001248 <_write>
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d103      	bne.n	8004fa4 <_write_r+0x20>
 8004f9c:	682b      	ldr	r3, [r5, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d000      	beq.n	8004fa4 <_write_r+0x20>
 8004fa2:	6023      	str	r3, [r4, #0]
 8004fa4:	bd70      	pop	{r4, r5, r6, pc}
 8004fa6:	46c0      	nop			; (mov r8, r8)
 8004fa8:	200004b4 	.word	0x200004b4

08004fac <_free_r>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	0005      	movs	r5, r0
 8004fb0:	2900      	cmp	r1, #0
 8004fb2:	d010      	beq.n	8004fd6 <_free_r+0x2a>
 8004fb4:	1f0c      	subs	r4, r1, #4
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	da00      	bge.n	8004fbe <_free_r+0x12>
 8004fbc:	18e4      	adds	r4, r4, r3
 8004fbe:	0028      	movs	r0, r5
 8004fc0:	f7ff fe08 	bl	8004bd4 <__malloc_lock>
 8004fc4:	4a1d      	ldr	r2, [pc, #116]	; (800503c <_free_r+0x90>)
 8004fc6:	6813      	ldr	r3, [r2, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d105      	bne.n	8004fd8 <_free_r+0x2c>
 8004fcc:	6063      	str	r3, [r4, #4]
 8004fce:	6014      	str	r4, [r2, #0]
 8004fd0:	0028      	movs	r0, r5
 8004fd2:	f7ff fe07 	bl	8004be4 <__malloc_unlock>
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	42a3      	cmp	r3, r4
 8004fda:	d908      	bls.n	8004fee <_free_r+0x42>
 8004fdc:	6820      	ldr	r0, [r4, #0]
 8004fde:	1821      	adds	r1, r4, r0
 8004fe0:	428b      	cmp	r3, r1
 8004fe2:	d1f3      	bne.n	8004fcc <_free_r+0x20>
 8004fe4:	6819      	ldr	r1, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	1809      	adds	r1, r1, r0
 8004fea:	6021      	str	r1, [r4, #0]
 8004fec:	e7ee      	b.n	8004fcc <_free_r+0x20>
 8004fee:	001a      	movs	r2, r3
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <_free_r+0x4e>
 8004ff6:	42a3      	cmp	r3, r4
 8004ff8:	d9f9      	bls.n	8004fee <_free_r+0x42>
 8004ffa:	6811      	ldr	r1, [r2, #0]
 8004ffc:	1850      	adds	r0, r2, r1
 8004ffe:	42a0      	cmp	r0, r4
 8005000:	d10b      	bne.n	800501a <_free_r+0x6e>
 8005002:	6820      	ldr	r0, [r4, #0]
 8005004:	1809      	adds	r1, r1, r0
 8005006:	1850      	adds	r0, r2, r1
 8005008:	6011      	str	r1, [r2, #0]
 800500a:	4283      	cmp	r3, r0
 800500c:	d1e0      	bne.n	8004fd0 <_free_r+0x24>
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	1841      	adds	r1, r0, r1
 8005014:	6011      	str	r1, [r2, #0]
 8005016:	6053      	str	r3, [r2, #4]
 8005018:	e7da      	b.n	8004fd0 <_free_r+0x24>
 800501a:	42a0      	cmp	r0, r4
 800501c:	d902      	bls.n	8005024 <_free_r+0x78>
 800501e:	230c      	movs	r3, #12
 8005020:	602b      	str	r3, [r5, #0]
 8005022:	e7d5      	b.n	8004fd0 <_free_r+0x24>
 8005024:	6820      	ldr	r0, [r4, #0]
 8005026:	1821      	adds	r1, r4, r0
 8005028:	428b      	cmp	r3, r1
 800502a:	d103      	bne.n	8005034 <_free_r+0x88>
 800502c:	6819      	ldr	r1, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	1809      	adds	r1, r1, r0
 8005032:	6021      	str	r1, [r4, #0]
 8005034:	6063      	str	r3, [r4, #4]
 8005036:	6054      	str	r4, [r2, #4]
 8005038:	e7ca      	b.n	8004fd0 <_free_r+0x24>
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	200004ac 	.word	0x200004ac

08005040 <_init>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	46c0      	nop			; (mov r8, r8)
 8005044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005046:	bc08      	pop	{r3}
 8005048:	469e      	mov	lr, r3
 800504a:	4770      	bx	lr

0800504c <_fini>:
 800504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005052:	bc08      	pop	{r3}
 8005054:	469e      	mov	lr, r3
 8005056:	4770      	bx	lr
